es:
  data:
    authored_hints:
      2-3 Artist 1 new_authored_hint:
        2-3_Artist_1_new_a: Si utiliza el bloque para hacerme 'avanzar 100 píxeles', sacaré una línea automáticamente.
        2-3_Artist_1_new_b: '¿Tienes problemas girando la esquina? Usa el bloque `girar a la derecha 90 grados`.'
      2-3 Artist 11_authored_hint:
        2-3_Artist_11_a: '¿Tienes problemas con los ángulos? Necesitas ir 360 grados en 8 vueltas.  ¿Qué es 360/8? '
      2-3 Artist 12_authored_hint:
        2-3_Artist_12_a: Hay 360 grados en un círculo, así que si el artista gira 1 grado cada vez en el lazo, tendrá que hacerlo 360 veces.
      2-3 Artist 2 new_authored_hint:
        2-3_Artist_2_new_a: El artista parece no estar apuntando en la dirección correcta. ¿Puedes hacerlo girar primero antes de dibujar la línea?
      2-3 Artist 3new_authored_hint:
        2-3_Artist_3new_a: '¿Cuánto es 100-70?  Basado en el problema de la historia, así es que tal alto el sombrero tiene que ser!'
        2-3_Artist_3new_b: El artista parece no estar apuntando en la dirección correcta. ¿Puedes hacerlo girar primero antes de dibujar la línea?
      2-3 Artist 4_authored_hint:
        2-3_Artist_4_a: Para terminar la casa, ¡todo lo que tenemos que hacer es dibujar un cuadrado!
      2-3 Artist 6_authored_hint:
        2-3_Artist_6_a: 'Para hacer esos pequeños ángulos, tienes que girar *más lejos* cada vez que hecho con la Plaza.   '
        2-3_Artist_6_b: Como ya estoy mirando hacia la derecha, es más fácil empezar por avanzar, y luego hacer vueltas a la izquierda para crear el triángulo.
        2-3_Artist_6_c: Cada lado del triángulo es de la misma longitud que cada lado de la Plaza... ¡100 píxeles!
      2-3 Artist 7_authored_hint:
        2-3_Artist_7_a: La forma más sencilla de resolver este rompecabezas es dibujar el primer cuadrado y acabar con el artista apuntando hacia abajo antes de comenzar el segundo cuadrado.
      2-3 Artist 8_authored_hint:
        2-3_Artist_8_a: Si cortar 200 por la mitad, ¿de cuántos píxeles de ancho necesita ser cada cuadrado?
      2-3 Artist 9 NEW_authored_hint:
        2-3_Artist_9_a: Este diamante es realmente sólo un cuadrado de lado
      2-3 Artist 9 REPLACEMENT_authored_hint:
        step_size: Cada paso es de 100 píxeles de ancho y 100 píxeles de alto.
      2-3 Artist 9_authored_hint:
        2-3_Artist_9_a: Este diamante es sólo un cuadrado dado vuelta 45 grados.
        2-3_Artist_9_b: |-
          ¡No olvide girar el artista a la izquierda 45 grados antes de empezar a dibujar tu cuadrado! ![](https://images.code.org/47cc2474e533667101a2d73b98da204e-image-1467744539967.gif)
      2-3 Artist Debugging 10_authored_hint:
        2-3_Artist_Debugging_10_a: Recuerda, quieres que el panel de control sea 10 píxeles * mayor *... así que no olvides ** añadir ** 10 a cualquier número que cambies.
        2-3_Artist_Debugging_10_b: "** ¡Está bien usar ensayo y error aquí! **\n\nComienza por cambiar un número a la vez.    \n\n ¿Que números de hacen qué?\n\nSi te pierdes, simplemente haz clic en \"Comenzar nuevamente\"."
      2-3 Artist Debugging 2_authored_hint:
        2-3_Artist_Debugging_2_a: 'Consejo: Cada barba es de 75 píxeles de largo.'
      2-3 Artist Debugging 3_authored_hint:
        2-3_Artist_Debugging_3_a: Una de las vueltas es 15 grados más pequeña.
        2-3_Artist_Debugging_3_b: Si el programa se ejecuta demasiado rápido para ver lo que está ocurriendo, trate de frenar usando la barra deslizante.
      2-3 Artist Debugging 7_authored_hint:
        2-3_Artist_Debugging_7_a: '¿Qué pasa si haces que el artista se mueva o salte hacia atrás después de que dibuje la primera línea?'
      2-3 Artist Debugging 8_authored_hint:
        2-3_Artist_Debugging_8_a: |-
          ¿Cuántas veces se repitió mi forma?
          
          ¿Cuantas veces *debería* repetirse la forma?
          
          ¿Donde se puede cambiar eso en el programa?
      2-3 Artist Debugging 9_authored_hint:
        2-3_Artist_Debugging_9_a: '¡El artista necesita girar 60 grados más a la izquierda antes de comenzar a dibujar!'
        2-3_Artist_Debugging_9_b: No necesitas agregar otro bloque para obtener el giro completo, ¡solamente agrega 60 grados al bloque de `girar a la izquierda` que ya hay allí!
      2-3 Artist Functions 1 a_authored_hint:
        2-3_Artist_Functions_1_a: Los cuadrados tienen 100 píxeles de lado cada uno, lo que significa que te habrás movido 175 píxeles hacia adelante antes de dibijar el segundo cuadrado.
        2-3_Artist_Functions_1_b: Está bien dibujar líneas superpuestas para realizar los anteojos.
      2-3 Artist Functions 1_authored_hint:
        2-3_Artist_Functions_1_a: Los cuadrados tienen 100 píxeles de lado cada uno, lo que significa que te habrás movido 175 píxeles hacia adelante antes de dibijar el segundo cuadrado.
        2-3_Artist_Functions_1_b: Está bien dibujar líneas superpuestas para realizar los anteojos.
      2-3 Artist Functions 11 a_authored_hint:
        2-3_Artist_Functions_11_a: Deberás cambiar no solo la cantidad y el largo de los lados dentro de la función, sino que también deberás cambiar el ángulo con el que el artista gira entre cada lado.
      2-3 Artist Functions 11_authored_hint:
        2-3_Artist_Functions_11_a: Deberás cambiar no solo la cantidad y el largo de los lados dentro de la función, sino que también deberás cambiar el ángulo con el que el artista gira entre cada lado.
      2-3 Artist Functions 12 a_authored_hint:
        2-3_Artist_Functions_12_a: Intenta ejecutar el código primero para ver que necesitarás agregar.
      2-3 Artist Functions 12_authored_hint:
        2-3_Artist_Functions_12_a: Intenta ejecutar el código primero para ver que necesitarás agregar.
      2-3 Artist Functions 2 a_authored_hint:
        2-3_Artist_Functions_2_a: |-
          Tu programa deberá:
          - Usar función
          - Mover hacia adelante 100 + 75 píxeles
          - Usar función
      2-3 Artist Functions 2_authored_hint:
        2-3_Artist_Functions_2_a: |-
          Tu programa deberá:
          - Usar función
          - Mover hacia adelante 100 + 75 píxeles
          - Usar función
      2-3 Artist Functions 3 a_authored_hint:
        2-3_Artist_Functions_3_a: "**115 + 45 = 160**"
      2-3 Artist Functions 3_authored_hint:
        2-3_Artist_Functions_3_a: "**115 + 45 = 160**"
      2-3 Artist Functions 4 a_authored_hint:
        2-3_Artist_Functions_4_a: El artista necesita girar 120 grados entre cada cuadrado para completar este diseño.
      2-3 Artist Functions 4_authored_hint:
        2-3_Artist_Functions_4_a: El artista necesita girar 120 grados entre cada cuadrado para completar este diseño.
      2-3 Artist Loops New 11_authored_hint:
        2-3_Artist_Loops_New_11_a: |-
          Recordar que el código del último rompecabezas fue:
          
          ![](https://images.code.org/15288d042780242ec5edeed5204c6ebb-image-1469640792081.png)
        2-3_Artist_Loops_New_11_b: Tu nuevo giro debería ir al **final** del código dentro del bucle.
      2-3 Artist Loops New 12_authored_hint:
        2-3_Artist Loops_New_12_a: Antes de iniciar el diamante, el artista necesita girar 60 grados a la izquierda para llegar al camino correcto.
        2-3_Artist Loops_New_12_b: Luego que el artista se mueve hacia adelante 100 píxeles, deberá girar a la derecha 120 grados para lograr realizar la esquina fina.
        2-3_Artist Loops_New_12_c: El artista necesita girar a la derecha solamente 60 grados para crear una esquina amplia.
      2-3 Artist Loops New 13_authored_hint:
        2-3_Artist_Loops_New_13_a: "Al final de cada diamante, el artista ya estará mirando en la dirección correcta para iniciar el siguiente.\n\nPor esto no se necesita agregar un bloque extra de `girar a la izquierda` antes de comenzar nuevamente."
        2-3_Artist_Loops_New_13_b: "Para realizar cada diamente, el artista necesitará:\n- moverse\n- girar a la derecha 120 grados\n- moverse\n- girar a la derecha 60 grados\n\n¡Luego todo de nuevo!"
      2-3 Artist Loops New 9_authored_hint:
        2-3_Artist_Loops_New_9_a: El artista necesita girar 45 grados a la derecha antes de empezar a dibujar.
        2-3_Artist_Loops_New_9_b: Esta V es la mitad de un cuadrado.  ¿Cuál sería el código para dibujar la mitad de un cuadrado?
      2-3 Artist Nested Loops 1_authored_hint:
        2-3_Artist_Nested_Loops_1_a: Recuerda poner todos los bloques grises dentro de tu bucle.
      2-3 Artist Nested Loops 3_authored_hint:
        2-3_Artist_Nested_Loops_3_a: "¿Necesitas ayuda con los ángulos?\n**360/12 = 30**"
        2-3_Artist_Nested_Loops_3_b: Recuerda poner todo el código gris y tu bloque de girar dentro de un bucle.
      2-3 Artist Nested Loops 4_authored_hint:
        2-3_Artist_Nested_Loops_3_a: "¿Necesitas ayuda con los ángulos?\n**360/12 = 30**"
      2-3 Artist Nested Loops 5_authored_hint:
        2-3_Artist_Nested_Loops_5_a: "Utilice el bloque 'salto adelante' llegar desde la parte superior de una plaza el lugar donde se iniciará la siguiente. Si sus plazas son 20 píxeles de alto y 20 píxeles apartes, ¿cuánto necesita saltar?"
      2-3 Artist Nested Loops 7_authored_hint:
        2-3_Artist_Nested_Loops_7_a: "¿Hasta qué punto gire en cada lazo?    ¿Qué es 360/10?"
      2-3 Artist Nested Loops 9_authored_hint:
        2-3_Artist_Nested_Loops_9_a: |-
          ¿Necesitas ayuda para encontrar el ángulo correcto?
          
          **360/12 = 30**
      2-3 Bee Conditionals 14_authored_hint:
        2-3_Bee_Conditionals_14_a: '¿Teniendo un tiempo difícil averiguar cómo bajar los bloques?  ¡Intentar tratar la flor roja exactamente igual que una flor morada!'
        2-3_Bee_Conditionals_14_b: '¿Si la flor roja fuera púrpura, podría usted averiguar cómo utilizar un bucle extra ''repetición'' para reducir el código?'
        2-3_Bee_Conditionals_14_c: "Intenta separar esto en dos partes :  \n\n\n![](https://images.code.org/895a52f3febff9edb83979f7861cf67a-image-1469640892331.png)\n\n1) Tomar néctar 3 veces\n  - Mueve adelante 5 veces\n  - Verifica si hay néctar, si hay: cógelo\n  - Gira a la izquierda\n  \n2) Fabricar miel \n  - Mueve adelante una vez\n  - Fabrica dos de miel"
      2-3 Bee Conditionals 15_authored_hint:
        2-3_Bee_Conditionals_15_a: 'Recuerde: Flores de color púrpura sólo néctar ya sea 0 o 1 y puede cambiar cada vez que se ejecuta el programa.'
      2-3 Bee Conditionals 3_authored_hint:
        2-3_Bee_Conditionals_3_a: El código será acortado si usa un bucle cada vez que avanza, otro bucle para recolectar néctar y otro para hacer miel.
      2-3 Bee Conditionals 6_authored_hint:
        2-3_Bee_Conditionals_6_a: 'Recuerde:! las flores púrpuras cambian entre 0 y 1 de néctar cuando ejecuta su programa!'
      2-3 Bee Debugging 1_authored_hint:
        2-3_Bee_Debugging_1_a: Una vez que encuentras y arreglas el bloque incorrecto, ¿ves algún patrón que pueda hacerse más simple usando un ciclo `repetir`?
      2-3 Bee Debugging 2_authored_hint:
        2-3_Bee_Debugging_2_a: Una vez que encuentras y arreglas el bloque incorrecto, ¿ves algún patrón que pueda hacerse más simple usando un ciclo `repetir`?
      2-3 Bee Debugging 4_authored_hint:
        2-3_Bee_Debugging_4_a: '¿Hay algún lugar donde la abeja haga algo que no tiene sentido? ¿Qué pasa cuando cambias ese bloque?'
      2-3 Bee Functions 4_authored_hint:
        2-3_Bee_Functions_4_a: No tienes que usar un bucle con una función. Intenta moverte, usa las funciones, luego avanza y usa las funciones de nuevo.
      2-3 Bee Functions 6_authored_hint:
        2-3_Bee_Functions_6_a: No tienes que usar un bucle con una función. Intenta moverte, usa las funciones, luego avanza y usa las funciones de nuevo.
      2-3 Bee Functions 8_authored_hint:
        2-3_Bee_Functions_8_a: "Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco\nAgrega algunos bloques, luego pruébalo. Agrega más, luego intenta de nuevo. ¡Pronto, lo lograras!\n![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)"
      2-3 Bee Functions 9_authored_hint:
        2-3_Bee_Functions_8_a: "Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco.\nAgregue algunos bloques, luego pruébelo. Agrega más, luego intenta de nuevo. ¡Pronto, llegarás allí!"
        2-3_Bee_Functions_8_b: |-
          Recuerda construir tu código dentro del bloque de función verde.
          ![](https://images.code.org/8fe1fae5caf4ede3a9c9bd9f26940cde-image-1467996837459.gif)
      2-3 Bee Loops 2_authored_hint:
        2-3_Bee_Loops_2_a: Deberías terminar con cuatro bloques dentro de tu bucle.
      2-3 Bee Loops 3_authored_hint:
        2-3_Bee_Loops_3_a: Deberías tener 6 bloques dentro de tu bucle.
      2-3 Bee Loops 3B_authored_hint:
        2-3_Bee_Loops_3B_a: Necesitas dos bucles `repetir` diferentes, uno después del otro.
      2-3 Bee Loops 4_authored_hint:
        2-3_Bee_Loops_4_a: Deberías terminar con cinco bloques dentro de tu bucle.
      2-3 Bee Loops 4A_authored_hint:
        2-3_Bee_Loops_4A_a: La primera acción será un giro, en lugar de un movimiento.
        2-3_Bee_Loops_4A_b: La última parte del programa puede terminarse escribiendo código al final de su programa fuera de su bucle.
        2-3_Bee_Loops_4A_c: Si aún no puedes detectar los bucles, intenta codificarlo primero, luego ve lo que puedes combinar en un bucle 'repetir' al final.
      2-3 Bee Loops 5_authored_hint:
        2-3_Bee_Loops_5_a: Si no puedes detectar los bloques para colocar `repetir` inmediatamente, comienza por codificar cada movimiento y busca un patrón.
      2-3 Bee Loops 6_authored_hint:
        2-3_Bee_Loops_6_a: Si no puedes decir qué debería ir en el bucle 'repetir', intenta arrastrar los bloques uno por uno y ve si puedes encontrar un patrón.
        2-3_Bee_Loops_6_b: Aquí deberían haber 6 bloques dentro del bucle 'repetir' cuando hayas terminado.
      2-3 Bee Loops 7_authored_hint:
        2-3_Bee_Loops_7_a: La primera acción será un giro, en lugar de un movimiento.
        2-3_Bee_Loops_7_b: 'Si no puedes imaginar el bucle desde el principio, intenta programarlo a lo largo del camino, luego busca un patrón.  '
      2-3 Maze 1_authored_hint:
        2-3_Maze_1_a: Para usar un bloque `avanzar`, arrástralo desde el área de la barra de herramientas al espacio de trabajo y conéctelo al bloque`al ejecutar`.
      2-3 Maze 16_authored_hint:
        2-3_Maze_16_a: Si el patrón es difícil de ver, intenta programarlo todo primero y ve qué cosas se repiten una y otra vez antes de colocar los bucles.
        2-3_Maze_16_b: "Para poner muchos bloques dentro de un bucle 'repetir', simplemente arrastra un bucle hacia el espacio de trabajo, luego arrastra todos los bloques desde el programa de inicio dentro de él!"
      2-3 Maze 6_authored_hint:
        2-3_Maze_6_a: '¡Aquí tienes dos caminos para resolver el puzzle!'
      2-3 Maze Loops 17_authored_hint:
        2-3_Maze_Loops_17_a: Si el patrón es difícil de ver, intenta programarlo todo primero y ve qué cosas se repiten una y otra vez antes de colocar los bucles.
        2-3_Maze_Loops_17_b: '¿Se borró el código de inicio? ¡Haga clic en "volver a empezar" para recuperarlo!'
      2-3 Maze Loops 18_authored_hint:
        2-3_Maze_Loops_18_a: Si el patrón es difícil de ver, intenta programarlo todo primero y ve qué cosas se repiten una y otra vez antes de colocar los bucles.
      2-3 Maze Loops 19_authored_hint:
        2-3_Maze_Loops_19_a: Si estas atascado, intenta escribir el código sin bucles primero y busca patrones.
        2-3_Maze_Loops_19_b: Poner un bucle de repetición dentro de otro puede ayudar a disminuir la cantidad de bloques utilizados.
      2-3 Maze Loops 20_authored_hint:
        2-3_Maze_Loops_20_a: Busca un patrón de escalera en este laberinto para encontrar dónde un bucle puede ser usado.
      2-3 Maze Loops 21_authored_hint:
        2-3_Maze_Loops_21_a: Si tienes problemas para encontrar el patrón de escalera, intenta cubrir los caminos bloqueados con tu dedo.
      4-5 Artist 1_authored_hint:
        4-5_Artist_1_a: "![](https://images.code.org/e5a08f29a9c4e306de5553dafca9fb5d-image-1467913845542.gif)"
      4-5 Artist 11_authored_hint:
        4-5_Artist_11_a: Dentro de tu ciclo, asegúrate de que el artista salta hacia atrás y hacia arriba después de dibujar cada línea.
      4-5 Artist 3_authored_hint:
        4-5_Artist_3_a: |-
          Si el lecho de flores mide 600 píxeles y dos de los lados tienen 200 píxeles de largo, aquí se explica cómo se suman los lados cortos:
          **600 - 200 - 200 = 200**
          Eso significa que ambos lados cortos suman hasta 200 píxeles.
          ** ¿Qué es 200/2? **
        4-5_Artist_3_b: Si tu no puedes ver donde esta el bucle 'repetir' inmediatamente, intenta programar toda la solución y busca el patrón.
      4-5 Artist 4_authored_hint:
        4-5_Artist_4_a: "¡Hay 360 grados en un círculo!\n¡Esa es la cantidad de veces que necesitas repetir este código (convirtiendo 1 grado por vez) antes de que termine el círculo!"
      4-5 Artist 5_authored_hint:
        4-5_Artist_5_a: |-
          Prueba y error es un gran método, pero también puede resolver el problema dividiendo el ángulo de 90 grados en tercios.
          
          ** 90/3 = _____ **
      4-5 Artist 7_authored_hint:
        4-5_Artist_7_a: '¿Qué ángulo es el más pequeño? ¿En qué ángulo está parado el artista? '
      4-5 Artist 8_authored_hint:
        4-5_Artist_8_a: "Los lados largos son 240 píxeles cada uno. Eso significa que los 2 lados cortos deben sumar:\n\n** 800 - 240 - 240 = 320 **\n\n¿Qué es ** 320/2 **? "
        4-5_Artist_8_b: "¡Esta imagen se puede hacer de 2 maneras!\n- Dibuja dos rectángulos que son ** 120 ** de largo y ** 160 ** de alto, con un lado superpuesto\n\n- Dibuja un rectángulo que sea ** 240 ** de largo y ** 160 ** alto, luego agregua una línea en el medio."
      4-5 Artist 9_authored_hint:
        4-5_Artist_9_a: "Cuando un triángulo es un equilátero, los lados y ángulos son iguales.\n"
        4-5_Artist_9_b: Necesitarás dibujar tres triángulos del mismo tamaño. No olvides pasar a tu nueva posición tras cada uno.
      4-5 Artist Assessment 1_authored_hint:
        4-5_Artist_Assessment_1_a: Solo necesitas dibujar el triángulo exterior para completar este puzzle.
      4-5 Artist Patterns 11_authored_hint:
        4-5_Artist_Patterns_11_a: Si hay 360 grados en un círculo y cada vuelta gira 3 grados, ¿cuántas veces necesitarías trazar la mitad de un círculo completo?
      4-5 Artist Patterns 2_authored_hint:
        4-5_Artist_Patterns_2_a: Ten en cuenta que dado que los cuadrados tienen 20 píxeles de largo, tendrás que saltar 20 píxeles antes de comenzar su siguiente cuadrado.
      4-5 Artist Patterns 3_authored_hint:
        4-5_Artist_Patterns_3_a: Ten cuidado de sacar el bloque completo de "código de la barra de herramientas cada vez que pruebas uno nuevo.
        4-5_Artist_Patterns_3_b: Si tu código se vuelve demasiado confuso, siempre puedes hacer clic en "volver a empezar" y ¡volver a intentarlo!
      4-5 Artist Patterns 5_authored_hint:
        4-5_Artist_Patterns_5_a: "Ahora, cuando el artista termina cada diamante, se encuentra en la dirección opuesta a la que necesita para comenzar la siguiente.\n\n¿Cuántos grados el necesita para girarse y ponerse en línea recta?"
      4-5 Bee Conditionals 4_authored_hint:
        remember_quantum: "** Recuerda: ** Este puzzle cambia cada vez que se ejecuta.\n\nQuerras usar un bloque condicional (`Si` o` Si /si no`) para resolver el desafío."
      4-5 Bee Conditionals 5_authored_hint:
        remember_quantum: "** Recuerda: ** Este puzzle cambia cada vez que se ejecuta.\n\nQuerras usar un bloque condicional (`Si` o` Si /si no`) para resolver el desafío."
      4-5 Bee Conditionals 6_authored_hint:
        4-5 Bee Conditionals 6_a: Puedes resolver este rompecabezas usando solo los bloques en el espacio de trabajo. ¿En qué orden deberían ir?
        4-5 Bee Conditionals 6_b: Asegúrate de verificar si la flor tiene más de ** 0 ** néctar al menos ** 3 ** veces para resolver este puzzle.
      4-5 Bee Debugging 1_authored_hint:
        4-5_Bee_Debugging_1_a: Si tienes problemas para descubrir lo que no está bien, intente ejecutarlo para ver dónde estan las cosas mal.
      4-5 Bee Nested Loops Rows_authored_hint:
        4-5_Bee_Nested_Loops_Rows_a: Intente tratar este puzzle como un rectángulo largo donde la abeja necesita avanzar, luego gire a la izquierda varias veces para completar el camino.
      4-5 Maze 10_authored_hint:
        4-5_Maze_10_a: |-
          Si no puedes ver cómo usar los bucles para resolver el rompecabezas de inmediato, intenta resolverlo primero, luego busca un patrón.
          
          ¿Debería poner 'repetir' para acortar el código?
      4-5 Maze 4_authored_hint:
        4-5_Maze_4_a: Si estas teniendo dificultades para averiguar dónde colocar la repetición, intenta codificar todo y busca un patrón.
      4-5 Maze 5_authored_hint:
        4-5_Maze_5_a: Intenta usar un bucle de "repetir" cada vez que necesites `avanzar´ más de dos pasos.
        4-5_Maze_5_b: Tu puedes usar mas de un bucle 'repetir' en el puzzle.
      4-5 Maze 6_authored_hint:
        4-5_Maze_6_a: "Intenta trazar un camino con tu dedo.\n¿Es el camino más corto que puedes encontrar?"
      4-5 Maze 7_authored_hint:
        4-5_Maze_7_a: "** ¿Quieres que tu código sea lo más pequeño posible? **\n\nBusca patrones en tus bloques. ¿Ves algo que se repite? ¡Intenta poner un bucle en su lugar!"
      4-5 Nested Loops 12_authored_hint:
        4-5_Nested_Loops_12_a: "**360 / 36 = ?**"
      4-5 Nested Loops 2_authored_hint: [ ]
      4-5 Nested Loops 6_authored_hint:
        4-5_Nested_Loops_6_a: |-
          No olvides hacer un giro después de tu bucle interno.
          
          Estarás formando un bucle de 6 triángulos en 360 grados.
          
          ** 360/6 =? **
      4-5 Nested Loops 7_authored_hint:
        4-5_Nested_Loops_7_a: |-
          Este diseño se repetirá 10 veces terminando en 360 grados.
          
          ** 360/10 =? **
      4-5 Nested Loops 8_authored_hint:
        4-5_Nested_Loops_8_a: |-
          Tienes que repetir el bucle 6 veces terminando en 360 grados.
          
          ** 360/6 =? **
      4-5 While Loops 8_authored_hint:
        4-5_While_Loops_8_a: Cada elemento necesitara su propio bucle 'mientras'.
      AppLab Intro 3 - Change Screen Color_authored_hint: [ ]
      AppLab Intro 4 - Change Screen Color_authored_hint: [ ]
      AppLab Intro 5 - Change Screen Color_authored_hint: [ ]
      AppLab Intro 6 - Change Screen Color_authored_hint: [ ]
      AppLab Intro 7 - Change Screen Color_authored_hint: [ ]
      Artist Inspiration_authored_hint:
        brush_width: Establecemos el grosor del pincel a 1, luego el color a azul antes de hacer cualquier otra cosa.
        double_loop: Intenta colocar un 'bucle para' dentro de un bucle 'repetir '.
        specifics: "El `bucle para` se ejecuta de tres a diecisiete para cada uno de los seis\" pétalos \"antes de pasar a crear el siguiente, dibujando formas con solo un número impar de lados.\n        \nEl bloque `establecer alfa` usa la división para atenuar el color a medida que el contador aumenta."
        after: Cuando hayas terminado con cada "pétalo", asegúrate de "avanzar" 20 píxeles antes de hacer una rotación de 60 grados.
        solution: |-
          **Solución**
          
          
          ![Image of Solution Blocks](https://images.code.org/d85a18bd31a09f87b41a818fc8d6c1cc-image-1469641375258.png)
      Bergeron Robot Maze1_authored_hint:
        2-3_Maze_1_a: Para usar un bloque `avanzar`, arrástralo desde el área de la barra de herramientas al espacio de trabajo y conéctelo al bloque`al ejecutar`.
      Course 4 Artist 11_authored_hint:
        Course_4_Artist_11_a: 'El semi-hexágono tiene una ** longitud de 30 ** y gira a la derecha por ** 60 grados **.  '
        Course_4_Artist_11_b: 'El triángulo 2/3 tiene una ** longitud de 80 ** y gira a la derecha por ** 120 grados **. '
      Course 4 Artist 12_authored_hint:
        Course_4_Artist_12_a: 'Cada forma repetida es la combinación de ** la mitad de un hexágono **, seguida de ** 2/3 de un triángulo **. '
        Course_4_Artist_12_b: 'La forma de la unidad es casi la misma que en el último puzzle, excepto que el medio hexágono es un poco más grande. '
        Course_4_Artist_12_c: "1) Las primeras tres líneas tienen 60 píxeles de largo y necesitas girar 60 grados.\n 2) Las siguientes dos líneas tienen 80 píxeles de largo y necesitas girar 120 grados "
        Course_4_Artist_12_d: |-
          **Solución:**
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_picker">
          <title name="COLOUR">#843179</title>
          </block>
          </value>
          <next>
          <block type="controls_repeat">
          <title name="TIMES">6</title>
          <statement name="DO">
          <block type="controls_repeat">
          <title name="TIMES">3</title>
          <statement name="DO">
          <block type="draw_move_by_constant">
          <title name="DIR">moveForward</title>
          <title name="VALUE">60</title>
          <next>
          <block type="draw_turn_by_constant">
          <title name="DIR">turnRight</title>
          <title name="VALUE">60</title>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="draw_move_by_constant">
          <title name="DIR">moveForward</title>
          <title name="VALUE">80</title>
          <next>
          <block type="draw_turn_by_constant">
          <title name="DIR">turnRight</title>
          <title name="VALUE">120</title>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 Artist 6_authored_hint:
        Course_4_Artist_6_a: Hay 3 triángulos dentro de la rotación de 360 grados... ¿Cuántas veces 3 entra en 360?
      Course 4 Artist 7_authored_hint: [ ]
      Course 4 Artist 8a_authored_hint:
        Course_4_Artist_8a: |-
          ¿Necesitas ayuda para calcular qué tan lejos girar?
          
          Hay 3 triángulos dentro de la rotación de 360 grados.
          
          ¿Cuántas veces 3 entran en 360?
      Course 4 Artist 9_authored_hint:
        Course_4_Artist_9_a: "¿Necesitas saber cuánto girar?\n\n¿Qué es 360 dividido por 10?"
      Course 4 Artist Binary Free Play 2b_authored_hint:
        Course_4_Artist_Binary_Free_Play_2b_a: Este código usa dos `bucle para`. Uno cuenta de 1 a 8, el otro cuenta de 8 a 1.
        Course_4_Artist_Binary_Free_Play_2b_b: Cada `bucle contar` tiene tres repeticiones. El primero dibuja el conjunto más a la izquierda de 1s, el segundo dibuja los 0s en el medio y el tercero dibuja los 1s a la derecha.
        Course_4_Artist_Binary_Free_Play_2b_c: En cada repetición necesitas `contador` para 1s y` 16- (contador 2x) `para 0s.
        Course_4_Artist_Binary_Free_Play_2b_d: |-
          ** Solución: ** 
          
          <xml><block type="when_run" deletable="false" movable="false"> <next><block type="controls_for_counter" inline="true"> <mutation counter="counter"></mutation> <value name="FROM"> <block type="math_number"> <title name="NUM"> 1</title></block></value> <value name="TO"> <block type="math_number"> <title name="NUM"> 8</title></block></value> <value name="BY"> <block type="math_number"> <title name="NUM"> 1</title></block></value> <statement name="DO"> <block type="controls_repeat_ext" inline="true"> <value name="TIMES"> <block type="variables_get"> <title name="VAR"> contador de</title></block></value> <statement name="DO"> <block type="procedures_callnoreturn" inline="true"> <mutation name="draw"> <arg name="binary"></arg></mutation> <value name="ARG0"> <block type="text"> <title name="TEXT"> 1</title></block></value></block></statement> <next><block type="controls_repeat_ext" inline="true"> <value name="TIMES"> <block type="math_arithmetic" inline="true"> <title name="OP"> menos</title> <value name="A"> <block type="math_number"> <title name="NUM"> 16</title></block></value> <value name="B"> <block type="math_arithmetic" inline="true"> <title name="OP"> multiplicar</title> <value name="A"> <block type="variables_get"> <title name="VAR"> contador</title></block></value> <value name="B"> <block type="math_number"> <title name="NUM"> 2</title></block></value></block></value></block></value> <statement name="DO"> <block type="procedures_callnoreturn" inline="true"> <mutation name="draw"> <arg name="binary"></arg></mutation> <value name="ARG0"> <block type="text"> <title name="TEXT"> 0</title></block></value></block></statement> <next><block type="controls_repeat_ext" inline="true"> <value name="TIMES"> <block type="variables_get"> <title name="VAR"> contador de</title></block></value> <statement name="DO"> <block type="procedures_callnoreturn" inline="true"> <mutation name="draw"> <arg name="binary"></arg></mutation> <value name="ARG0"> <block type="text"> <title name="TEXT"> 1</title></block></value></block></statement></block></next></block></next></block></statement> <next><block type="controls_for_counter" inline="true"> <mutation counter="counter"></mutation> <value name="FROM"> <block type="math_number"> <title name="NUM"> 8</title></block></value> <value name="TO"> <block type="math_number"> <title name="NUM"> 1</title></block></value> <value name="BY"> <block type="math_number"> <title name="NUM"> 1</title></block></value> <statement name="DO"> <block type="controls_repeat_ext" inline="true"> <value name="TIMES"> <block type="variables_get"> <title name="VAR"> contador de</title></block></value> <statement name="DO"> <block type="procedures_callnoreturn" inline="true"> <mutation name="draw"> <arg name="binary"></arg></mutation> <value name="ARG0"> <block type="text"> <title name="TEXT"> 1</title></block></value></block></statement> <next><block type="controls_repeat_ext" inline="true"> <value name="TIMES"> <block type="math_arithmetic" inline="true"> <title name="OP"> menos</title> <value name="A"> <block type="math_number"> <title name="NUM"> 16</title></block></value> <value name="B"> <block type="math_arithmetic" inline="true"> <title name="OP"> se multiplican</title> <value name="A"> <block type="variables_get"> <title name="VAR"> contador</title></block></value> <value name="B"> <block type="math_number"> <title name="NUM"> 2</title></block></value></block></value></block></value> <statement name="DO"> <block type="procedures_callnoreturn" inline="true"> <mutation name="draw"> <arg name="binary"></arg></mutation> <value name="ARG0"> <block type="text"> <title name="TEXT"> 0</title></block></value></block></statement> <next><block type="controls_repeat_ext" inline="true"> <value name="TIMES"> <block type="variables_get"> <title name="VAR"> contador de</title></block></value> <statement name="DO"> <block type="procedures_callnoreturn" inline="true"> <mutation name="draw"> <arg name="binary"></arg></mutation> <value name="ARG0"> <block type="text"> <title name="TEXT"> 1</title></block></value></block></statement></block></next></block></next></block></statement></block></next></block></next></block> </xml>
      Course 4 Artist For Loops 11_authored_hint:
        Course_4_Artist_For_Loops_11_a: "¡El ángulo de giro cambiará con cada forma!\n\nUse el bloque matemático para ingresar 360 dividido por el número de lados que tiene la forma para obtener el ángulo correcto. "
      Course 4 Artist For Loops 11a_authored_hint:
        Course_4_Artist_For_Loops_11a_a: '360 dividido por el número de lados que tiene una forma es la cantidad de grados que deberá girar. '
        Course_4_Artist_For_Loops_11a_b: 'Cada vez, deberá avanzar 10 veces la longitud del número actual de lados. '
      Course 4 Artist For Loops 3_authored_hint:
        Course_4_Artist_For_Loops_3_a: Para hacer que el bucle `para` impulse su movimiento, asegúrese de estar usando` contador` como distancia.
      Course 4 Artist For Loops 4_authored_hint:
        Course_4_Artist_For_Loops_4_a: "** ¿Cuál es el número más pequeño que necesitará?\n¿Cuál es el número más grande?\n¿Qué tan grande es el aumento en cada ocasión? **\n\nEsas son las preguntas que debe realizar para completar los espacios en blanco del ciclo `para`."
      Course 4 Artist For Loops Challenge_authored_hint:
        Course_4_Artist_For_Loops_Challenge_a: La forma más grande tiene 19 lados. El más pequeño tiene solo dos.
        Course_4_Artist_For_Loops_Challenge_b: El bucle 'para' cuenta hasta dos cada vez que se ejecuta.
      Course 4 Artist For Loops Challenge_a_authored_hint:
        Course_4_Artist_For_Loops_Challenge_a: El polígono más grande tiene 19 lados.
        Course_4_Artist_For_Loops_Challenge_b: Cada polígono está incompleto, con un lado menos de lo que debería tener.
      Course 4 Artist For Loops inspire_authored_hint:
        Course_4_Artist_For_Loops_inspire_a: La base de este código es la misma que la solución al desafío anterior... con un par de cambios.
        Course_4_Artist_For_Loops_inspire_b: Intenta con un bucle 'para' que va de 3 a 10 con un incremento de 1.
        Course_4_Artist_For_Loops_inspire_c: Hay dos iteraciones del mismo bucle de repetición dentro del bucle `para`, pero la segunda repetición gira en la dirección opuesta.
        Course_4_Artist_For_Loops_inspire_d: "**Solución:**  \n\n<xml>\n  <block type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"controls_for_counter\" inline=\"true\" movable=\"false\">\n      <mutation counter=\"counter\"></mutation>\n        <value name=\"FROM\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">3</title>\n          </block>\n        </value>\n        <value name=\"TO\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">10</title>\n          </block>\n        </value>\n        <value name=\"BY\">\n          <block type=\"math_number\">\n            <title name=\"NUM\">1</title>\n          </block>\n        </value>\n        <statement name=\"DO\">\n          <block type=\"controls_repeat_ext\" inline=\"true\">\n            <value name=\"TIMES\">\n              <block type=\"math_arithmetic\" inline=\"true\">\n                <title name=\"OP\">MINUS</title>\n                <value name=\"A\">\n                  <block type=\"variables_get\">\n                    <title name=\"VAR\">counter</title>\n                  </block>\n                </value>\n                <value name=\"B\">\n                  <block type=\"math_number\">\n                    <title name=\"NUM\">1</title>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name=\"DO\">\n              <block type=\"draw_move\" inline=\"true\">\n                <title name=\"DIR\">moveForward</title>\n                <value name=\"VALUE\">\n                  <block type=\"math_number\">\n                    <title name=\"NUM\">40</title>\n                  </block>\n                </value>\n                <next>\n                  <block type=\"draw_turn\" inline=\"true\">\n                    <title name=\"DIR\">turnRight</title>\n                    <value name=\"VALUE\">\n                      <block type=\"math_arithmetic\" inline=\"true\">\n                        <title name=\"OP\">DIVIDE</title>\n                        <value name=\"A\">\n                          <block type=\"math_number\">\n                            <title name=\"NUM\">360</title>\n                          </block>\n                        </value>\n                        <value name=\"B\">\n                          <block type=\"variables_get\">\n                            <title name=\"VAR\">counter</title>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type=\"controls_repeat_ext\" inline=\"true\">\n                <value name=\"TIMES\">\n                  <block type=\"math_arithmetic\" inline=\"true\">\n                    <title name=\"OP\">MINUS</title>\n                    <value name=\"A\">\n                      <block type=\"variables_get\">\n                        <title name=\"VAR\">counter</title>\n                      </block>\n                    </value>\n                    <value name=\"B\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">1</title>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n                <statement name=\"DO\">\n                  <block type=\"draw_move\" inline=\"true\">\n                    <title name=\"DIR\">moveForward</title>\n                    <value name=\"VALUE\">\n                      <block type=\"math_number\">\n                        <title name=\"NUM\">40</title>\n                      </block>\n                    </value>\n                    <next>\n                      <block type=\"draw_turn\" inline=\"true\">\n                        <title name=\"DIR\">turnLeft</title>\n                        <value name=\"VALUE\">\n                          <block type=\"math_arithmetic\" inline=\"true\">\n                            <title name=\"OP\">DIVIDE</title>\n                            <value name=\"A\">\n                              <block type=\"math_number\">\n                                <title name=\"NUM\">360</title>\n                              </block>\n                            </value>\n                            <value name=\"B\">\n                              <block type=\"variables_get\">\n                                <title name=\"VAR\">counter</title>\n                              </block>\n                            </value>\n                          </block>\n                        </value>\n                      </block>\n                    </next>\n                  </block>\n                </statement>\n              </block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </next>\n  </block>\n</xml>"
      Course 4 Artist Functions Inspiration_authored_hint:
        Course_4_Artist_Functions_Inspiration_a: Comienza con el código del último puzzle y agregue un `giro a la derecha` adicional de tres grados dentro del ciclo de repetición.
        Course_4_Artist_Functions_Inspiration_b: Intenta girar más de 90 grados fuera del bucle `repetir`, pero aún dentro del bucle`para`.
        Course_4_Artist_Functions_Inspiration_c: |-
          **Solución:**
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">14</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_random"/>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="procedures_callnoreturn">
          <mutation name="draw a square 20"></mutation>
          <next>
          <block type="jump_by_constant">
          <title name="DIR">jumpForward</title>
          <title name="VALUE">20</title>
          <next>
          <block type="draw_turn_by_constant">
          <title name="DIR">turnRight</title>
          <title name="VALUE">3</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="draw_turn_by_constant">
          <title name="DIR">turnLeft</title>
          <title name="VALUE">100</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </xml>
      Course 4 Artist Functions challenge_authored_hint:
        Course_4_Artist_Functions_challenge_a: Parte de entender cómo usar funciones es averiguar cuáles necesita y cuáles no.
        Course_4_Artist_Functions_challenge_b: Use un bucle `para`, luego use su contador de variable dentro de un bucle` repetir` anidado.
        Course_4_Artist_Functions_challenge_c: En cada iteración, debe dibujar un cuadrado y luego saltar hacia adelante.
        Course_4_Artist_Functions_challenge_d: Tendras que girar a la izquierda 90 grados fuera de tu `repetir`, pero aún dentro del bucle `para`.
      Course 4 Artist Inspire_authored_hint:
        Course_4_Artist_Inspire_a: Después de completar un cuadrado, intente saltar la mitad de su longitud antes de girar y hacer otro.
        Course_4_Artist_Inspire_b: Cada cuadrado y salto se repite cuatro veces (usando un giro a la izquierda en el medio) para formar una unidad completa similar a un molinete.
        Course_4_Artist_Inspire_c: Cada molinete también se repite cuatro veces, con un giro a la derecha de ** 360 / lados **.
        Course_4_Artist_Inspire_d: |-
          **Solución:**
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_picker">
          <title name="COLOUR">#843179</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">sides</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
      Course 4 Artist Vars 13_authored_hint:
        Course_4_Artist_Vars_13_a: Necesita dos bucles de repetir (uno dentro del otro) ambos repitiendo 'lados' veces.
        Course_4_Artist_Vars_13_b: "El ciclo de repetición interno dibuja un octágono (girando a la izquierda).\n\nLuego, debe avanzar y girar a la derecha solo en el bucle externo."
        Course_4_Artist_Vars_13_c: Para ajustar la forma para que permanezca del mismo tamaño cuando cambia el número de lados, use el bloque matemático para dividir la longitud en píxeles por el número de lados.
      Course 4 Artist Vars 6_authored_hint:
        Course_4_Artist_Vars_6_a: Para dibujar un polígono regular, gire ** 360 / lados ** cada vez.
      Course 4 Artist Vars 8_authored_hint:
        Course_4_Artist_Vars_8_a: Si divide su longitud inicial por el número de lados, la longitud de cada lado se acortará a medida que el número de lados aumente.
      Course 4 Bee Params 7_authored_hint:
        notice_pattern: '¿Ves un patrón en cómo cambia la cantidad de néctar? '
        count_with_for: Tenga en cuenta que el néctar se incrementa en pasos. ¿Qué tipo de bloque puede usar para hacer lo mismo muchas veces mientras cuenta?
      Course 4 Bee Params 8_authored_hint:
        Course_4_Bee_Params_8_a: Está bien pedir un número de miel y un número de néctar cada vez. Si no hay nada de algo, el número puede ser 0.
      Course 4 Play Lab Params 2_authored_hint:
        Course_4_Play_Lab_Params_2_a: Debes hacer clic en "editar" en la función de salto y actualizarla para que use el parámetro `altura`.
      Course 4 Play Lab Vars 2_authored_hint:
        Course_4_Play_Lab_Vars_2_a: Asegúrese de establecer el número de `velocidad_perro`a algo más grande que` velocidad_gato`.
      Course 4 Play Labs For Loops 2_authored_hint:
        Course_4_Play_Labs_For_Loops_2_a: '¿Qué agregarías a tu bucle `para`en cada ocasión para omitir los números pares?'
      Course 4 Playlab For Loop Freeplay_authored_hint: [ ]
      Course 4 Playlab For Loops 4b_authored_hint:
        Course_4_Playlab_For_Loops_4b_a: Las banderas están a unos 330 píxeles de distancia de los personajes.
        Course_4_Playlab_For_Loops_4b_b: '¿Qué se puede hacer para que cada personaje alcance 330 píxeles en el mismo número de movimientos con diferentes números de inicio y parada?'
        Course_4_Playlab_For_Loops_4b_c: Recuerde, no importa cuánto se haya pasado un personaje de la bandera en su último paso, siempre que le tome a cada personaje el mismo número de pasos para llegar a la bandera.
      Course 4 Playlab For Loops 5b_authored_hint:
        Course_4_Playlab_For_Loops_5b_a: Los personajes están a unos 175 píxeles del centro.
        Course_4_Playlab_For_Loops_5b_b: Recuerde, el próximo paso de un personaje será más largo que el anterior, ya que el contador sigue creciendo.
      Course 4 Playlab For Loops 6b_authored_hint: [ ]
      Course 4 SCF 1_authored_hint:
        Course_4_SCF_1_a: Cada hexágono tiene 40 lados de píxeles.
        Course_4_SCF_1_b: Hay un salto de 120 píxeles entre cada hexágono en cada línea horizontal.
        Course_4_SCF_1_c: "Antes de dibujar la segunda fila de hexágonos, debe girar a la derecha 60 grados y avanzar 40 píxeles.\n\nUna vez que estás en la ubicación vertical correcta, debes volver a girar tu artista y retroceder 320 píxeles hacia atrás."
        Course_4_SCF_1_d: "Antes de dibujar la tercera fila de hexágonos, debes girar a la derecha 60 grados y avanzar 40 píxeles.\n\nUna vez que estás en la ubicación vertical correcta, debes volver a girar tu artista y retroceder 440 píxeles (120 píxeles más que tu función de desplazamiento 'hacia abajo / adelante'). "
        Course_4_SCF_1_e: |-
          **Solución:**
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="procedures_callnoreturn">
          <mutation name="draw a line of hexagons"></mutation>
          <next>
          <block type="procedures_callnoreturn">
          <mutation name="shift down/forward"></mutation>
          <next>
          <block type="procedures_callnoreturn">
          <mutation name="draw a line of hexagons"></mutation>
          <next>
          <block type="procedures_callnoreturn">
          <mutation name="shift down/backward"></mutation>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          <block type="procedures_defnoreturn">
          <mutation></mutation>
          <title name="NAME">draw a hexagon</title>
          <statement name="STACK">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">6</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">40</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">60</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </statement>
          </block>
          <block type="procedures_defnoreturn">
          <mutation></mutation>
          <title name="NAME">shift down/backward</title>
          <statement name="STACK">
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">60</title>
          </block>
          </value>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">40</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">60</title>
          </block>
          </value>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpBackward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">440</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          <block type="procedures_defnoreturn">
          <mutation></mutation>
          <title name="NAME">draw a line of hexagons</title>
          <statement name="STACK">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <statement name="DO">
          <block type="procedures_callnoreturn">
          <mutation name="draw a hexagon"></mutation>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">120</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </statement>
          </block>
          <block type="procedures_defnoreturn">
          <mutation></mutation>
          <title name="NAME">shift down/forward</title>
          <statement name="STACK">
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">60</title>
          </block>
          </value>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">40</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">60</title>
          </block>
          </value>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpBackward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">320</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </xml>
      Course 4 SCF 1a_authored_hint:
        Course_4_SCF_1a_a: Recuerda tus funciones desde la etapa 16.
        Course_4_SCF_1a_b: "Mira este camino como su ruta principal:\n\n![](https://images.code.org/1c3feab70af706409b3a05af4dc83c2e-image-1469726967858.png)"
        Course_4_SCF_1a_c: Deberías considerar usar un `bucle para`. No para los pasos, sino para el parámetro de la función.
        Course_4_SCF_1a_d: |-
          **Solución:**
          
          <xml>
          <block type="when_run" deletable="false" movable="false" uservisible="false" y="14">
          <next>
          <block type="variables_set" inline="false" uservisible="false">
          <title name="VAR">left</title>
          <value name="VALUE">
          <block type="math_number" uservisible="false">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false" uservisible="false">
          <title name="VAR">right</title>
          <value name="VALUE">
          <block type="math_number" uservisible="false">
          <title name="NUM">0</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">21</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_if">
          <title name="DIR">isPathLeft</title>
          <statement name="DO">
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="get nectar">
          <arg name="dir"></arg>
          <arg name="counter"></arg>
          </mutation>
          <value name="ARG0">
          <block type="variables_get">
          <title name="VAR">left</title>
          </block>
          </value>
          <value name="ARG1">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="maze_if">
          <title name="DIR">isPathRight</title>
          <statement name="DO">
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="get nectar">
          <arg name="dir"></arg>
          <arg name="counter"></arg>
          </mutation>
          <value name="ARG0">
          <block type="variables_get">
          <title name="VAR">right</title>
          </block>
          </value>
          <value name="ARG1">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          <block type="procedures_defnoreturn" editable="false" usercreated="true">
          <mutation>
          <arg name="dir"></arg>
          <arg name="counter"></arg>
          </mutation>
          <title name="NAME">get nectar</title>
          <statement name="STACK">
          <block type="controls_if" inline="false">
          <mutation else="1"></mutation>
          <value name="IF0">
          <block type="logic_compare" inline="true" movable="false">
          <title name="OP">EQ</title>
          <value name="A">
          <block type="parameters_get">
          <title name="VAR">dir</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">left</title>
          </block>
          </value>
          </block>
          </value>
          <statement name="DO0">
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          </block>
          </statement>
          <statement name="ELSE">
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="parameters_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_nectar"></block>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveBackward</title>
          </block>
          </statement>
          <next>
          <block type="controls_if" inline="false">
          <mutation else="1"></mutation>
          <value name="IF0">
          <block type="logic_compare" inline="true" movable="false">
          <title name="OP">EQ</title>
          <value name="A">
          <block type="parameters_get">
          <title name="VAR">dir</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">left</title>
          </block>
          </value>
          </block>
          </value>
          <statement name="DO0">
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </statement>
          <statement name="ELSE">
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </xml>
      Course 4 SCF 1b_authored_hint:
        Course_4_SCF_1b_a: "Tenga en cuenta que la forma de todos los puntos de miel es similar.\n\nBuen lugar para una función!"
        Course_4_SCF_1b_b: "Mira esta idea de cómo la abeja podría viajar:\n\n![](https://images.code.org/996ab4a2de6048cbb99b84c56cc4ad61-image-1469726859769.png)"
        Course_4_SCF_1b_c: Deberías considerar usar un `bucle para` para la distancia que recorre la abeja.
        Course_4_SCF_1b_d: |-
          **Solución:**
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="procedures_callnoreturn">
          <mutation name="make honey up and over"></mutation>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          <block type="procedures_defnoreturn" editable="false" usercreated="true">
          <mutation></mutation>
          <title name="NAME">make honey up and over</title>
          <statement name="STACK">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_honey">
          <next>
          <block type="maze_honey">
          <next>
          <block type="maze_move">
          <title name="DIR">moveBackward</title>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="maze_move">
          <title name="DIR">moveBackward</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </xml>
      Course 4 SCF 2_authored_hint:
        Course_4_SCF_2_a: Cada octágono tiene 40 píxeles por lado.
        Course_4_SCF_2_b: Hay un salto de 136 píxeles entre cada octágono en cada línea horizontal.
        Course_4_SCF_2_c: "Antes de dibujar la segunda fila de octágonos, debes girar a la derecha 45 grados y avanzar 96 píxeles.\n\nUna vez que estás en la ubicación vertical correcta, debes volver a girar tu artista y retroceder 408 píxeles. "
        Course_4_SCF_2_d: "Tenga en cuenta que debido a que hay menos octágonos en las filas pares, no tiene que retroceder más para llegar al punto de partida de las filas impares.\n\nEsto significa que puede usar la misma función para todas las filas."
        Course_4_SCF_2_e: |-
          **Solución:**
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="draw octagons">
          <arg name="numOctagons"></arg>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <next>
          <block type="procedures_callnoreturn">
          <mutation name="shift down"></mutation>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="draw octagons">
          <arg name="numOctagons"></arg>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <next>
          <block type="procedures_callnoreturn">
          <mutation name="shift down"></mutation>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="draw octagons">
          <arg name="numOctagons"></arg>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          <block type="procedures_defnoreturn" editable="false">
          <mutation>
          <arg name="numOctagons"></arg>
          </mutation>
          <title name="NAME">draw octagons</title>
          <statement name="STACK">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="parameters_get">
          <title name="VAR">numOctagons</title>
          </block>
          </value>
          <statement name="DO">
          <block type="procedures_callnoreturn">
          <mutation name="draw an octagon"></mutation>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">136</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </statement>
          </block>
          <block type="procedures_defnoreturn" editable="false">
          <mutation></mutation>
          <title name="NAME">draw an octagon</title>
          <statement name="STACK">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">8</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">40</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">45</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </statement>
          </block>
          <block type="procedures_defnoreturn" editable="false">
          <mutation></mutation>
          <title name="NAME">shift down</title>
          <statement name="STACK">
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">45</title>
          </block>
          </value>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">96</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">45</title>
          </block>
          </value>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpBackward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">408</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </xml>
      Course 4 SCF 3_authored_hint:
        Course_4_SCF_3_a: "![](https://images.code.org/9310e6352e85a8265b424c9d57ca28d1-image-1446239776339.gif)"
        Course_4_SCF_3_b: 'Esta es una serie de octógonos con lados que son ''contador'' píxeles de largo. '
        Course_4_SCF_3_c: 'Cada octágono se llama desde dentro de un bucle ''para'' que va de 200 hasta 2 por 2. '
        Course_4_SCF_3_d: 'No olvides dar vuelta de 22.5 grados al final de cada iteración. '
        Course_4_SCF_3_e: Tanto el color de cada octágono como el ancho del lápiz están controlados por la variable `contador '.
        Course_4_SCF_3_f: |-
          **Solución:**
          
          <xml>
          <block type="procedures_defnoreturn" editable="false">
          <mutation>
          <arg name="length"></arg>
          </mutation>
          <title name="NAME">draw an octagon</title>
          <statement name="STACK">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">8</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="parameters_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">45</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </statement>
          </block>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">200</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_rgb" inline="false">
          <value name="RED">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MINUS</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </value>
          <value name="GREEN">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="BLUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MULTIPLY</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="draw an octagon">
          <arg name="length"></arg>
          </mutation>
          <value name="ARG0">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">22.5</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCFL 1_authored_hint:
        Course_4_SCFL_1_a: "Echa un vistazo a esta opción de movimiento:\n\n![](https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png)"
        Course_4_SCFL_1_b: 'Intente usar dos bucles `para`: uno para trepar y agarrar néctar, y el otro para bajar y hacer miel.'
        Course_4_SCFL_1_c: "Observe que un bucle `para` necesita varios bucles regulares dentro en que se repita 'contador' veces para hacer el patrón creciente de escalera.\n\nEl otro bucle `para` solo necesita un bucle regular para hacer una cantidad 'contador' de miel."
        Course_4_SCFL_1_d: |-
          **Solución:**
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward">
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="maze_moveForward">
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_honey"/>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCFL 1a_authored_hint:
        Course_4_SCFL_1a_a: Puede que tengas que desplazarte más lejos en general para usar la menor cantidad de bloques.
        Course_4_SCFL_1a_b: "Echa un vistazo a esta opción de movimiento:\n\n![](https://images.code.org/253d710ff7d1b494fe8fd20cfc92baaf-image-1469726263579.png)"
        Course_4_SCFL_1a_c: Un `bucle para` te ayudará a ejecutar el mismo patrón, pero con un número variable de pasos. Tenga en cuenta que el número de pasos necesarios disminuye de 7 a 5 por 1.
        Course_4_SCFL_1a_d: |-
          **Solución:**
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">7</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCFL 1b_authored_hint:
        Course_4_SCFL_1b_a: Intenta usando un 'bucle para'.
        Course_4_SCFL_1b_b: "Echa un vistazo a esta opción de movimiento:\n\n![](https://images.code.org/1957633c453f4025a3fd6ce0e201398b-image-1469642319721.png)"
        Course_4_SCFL_1b_c: |-
          **Solución:**
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCFL 2_authored_hint:
        Course_4_SCFL_2_a: "Echa un vistazo a esta opción de movimiento:\n\n![](https://images.code.org/a69c63a039031254097f19231dd7bf95-image-1469726483169.png)"
        Course_4_SCFL_2_b: Observe que hay tres puntos durante cada iteración de este bucle `para` donde se detiene para interactuar con los objetos.
        Course_4_SCFL_2_c: Durante cada iteración del ciclo `para`, el número de cada objeto se relaciona con la variable` contador` de alguna manera.
        Course_4_SCFL_2_d: |-
          **Solución:**
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward">
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="maze_moveForward">
          <next>
          <block type="maze_moveForward">
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MULTIPLY</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_honey"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="maze_moveForward">
          <next>
          <block type="maze_moveForward">
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_arithmetic" inline="true">
          <title name="OP">POWER</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCFL 3_authored_hint:
        Course_4_SCFL_3_a: El 'ancho de pluma' es 1. El primer cuadro tiene 50 de píxeles de lado, y cada cuadrado es 50 píxeles más amplio que el anterior.
        Course_4_SCFL_3_b: La opacidad en el pincel siempre es `contador` / 2.
        Course_4_SCFL_3_c: Después de hacer cada cuadrado, no te olvides de moverte hacia atrás, girar, moverte de nuevo, ¡y luego retroceder!
        Course_4_SCFL_3_d: |-
          **Solución:**
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_picker">
          <title name="COLOUR">#0000cd</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">50</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">350</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">50</title>
          </block>
          </value>
          <statement name="DO">
          <block type="alpha" inline="true" id="alpha">
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpBackward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpBackward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCFL 4_authored_hint:
        Course_4_SCFL_4_a: El cambio de color ocurre usando el bloque `set color with red, green, blue`. El rojo siempre tiene el valor de `contador`, el verde siempre es` 255 - contador`, y el azul permanece constante en 255 exactamente.
        Course_4_SCFL_4_b: Cada figura es un cuadro con lados que son de 'counter' píxeles de largo, comenzando con 5px, e incrementándose por 5px todo el camino hasta 200px.
        Course_4_SCFL_4_c: El artista gira 15 grados entre cada cuadro.
        Course_4_SCFL_4_d: |-
          **Solución:**
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">200</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_rgb" inline="false">
          <value name="RED">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="GREEN">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MINUS</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </value>
          <value name="BLUE">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_turn_by_constant">
          <title name="DIR">turnRight</title>
          <title name="VALUE">90</title>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">15</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCFL 6_authored_hint:
        Course_4_SCFL_6_a: El cambio de color ocurre utilizando el bloque 'definir color con rojo, verde, azul'. Rojo es la constante definida como 255, verde  es siempre el valor de 'contador', y azul es siempre '255-contador'.
        Course_4_SCFL_6_b: El código para esto es mucho más simple de lo que usted podría pensar. Solo defina el color dentro del 'ciclo for', avance, luego gire.
        Course_4_SCFL_6_c: 'El `control de flujo` va de 5 a 250 por 2. '
        Course_4_SCFL_6_d: |-
          **Solución:**
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">250</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_rgb" inline="false">
          <value name="RED">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          <value name="GREEN">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="BLUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MINUS</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">80</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCFL 7_authored_hint:
        Course_4_SCFL_7_a: El cambio de color ocurre usando el bloque `set color con rojo, verde, azul`. Rojo está configurado como `contador`. El verde es `255 - contador`, y el azul se establece constante en 255.
        Course_4_SCFL_7_b: 'Este dibujo se hace usando dos ''controles de flujos'' similares. Uno va de 5 a 200 por 2, el otro va de 200 a 5 por 2. '
        Course_4_SCFL_7_c: Dentro de cada `control de flujo` avanzas 5 píxeles antes de girar en` 360 / counter`. ¡No olvides poner tu pincel en el "contador" antes de hacer algo!
        Course_4_SCFL_7_d: Tendrás que girar a la izquierda 225 grados entre los dos `for loops`.
        Course_4_SCFL_7_e: |-
          **solución:**
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="alpha" inline="true" id="alpha">
          <value name="VALUE">
          <block type="math_number_dropdown">
          <title name="NUM" config="100,90,80,70,60,50,40,30,20,10,0">20</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">200</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_rgb" inline="false">
          <value name="RED">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="GREEN">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MINUS</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </value>
          <value name="BLUE">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">360</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">225</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">200</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_rgb" inline="false">
          <value name="RED">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="GREEN">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MINUS</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </value>
          <value name="BLUE">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">360</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCV 1_authored_hint:
        Course_4_SCV_1_a: 'Las variables son útiles ya que usted puede sumarlas cada vez mediante un lazo. '
        Course_4_SCV_1_b: Este rompecabezas tiene un lazo que crea un polígono, un lazo que repite el polígono 'lados' veces, luego otro lazo que lo hace todo de nuevo después de sumar 5 a 'lados'.
        Course_4_SCV_1_c: Usar una variable para 'lados' y una para 'longitud' hace al código más limpio ya que usted puede reutilizar el mismo código múltiples veces, en vez de crear una nueva copia para cada conjunto de números.
        Course_4_SCV_1_d: |-
          **solución:**
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">500</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">sides</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">0</title>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_random"/>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">sides</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">360</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">360</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCV 2_authored_hint:
        Course_4_SCV_2_a: "La imagen completa se compone de 10 de estas \"flores\":\n! [] (https://images.code.org/bac2a606dfa59c00409294499540267d-imagen-1469641972385.png)\n        \n... que se componen de 10 de estos decágonos:\n! [] (https://images.code.org/1e15f278c9c1606f90a2490ec3a94eb4-image-1469642051512.png)"
        Course_4_SCV_2_b: 'Este diseño utiliza lazos anidados (tres niveles). Todos los lazos se ejecutan ''lados'' veces. '
        Course_4_SCV_2_c: El artista gira a la izquierda cuando se crea cada decágono, pero gira a la derecha en los otros dos lazos.
        Course_4_SCV_2_d: Para evitar que todos sus 10 pétalos de "flores" sean dibujados en el mismo lugar, asegúrese de saltar hacia adelante por `longitud`/`lados` antes de girar 360/`lados` grados como parte de su lazo más externo.
        Course_4_SCV_2_e: |-
          **Solución:**
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">400</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">sides</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_picker">
          <title name="COLOUR">#ff0000</title>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">360</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">360</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpForward</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">360</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCV 3_authored_hint:
        Course_4_SCV_3_a: 'Utilice su block de matemáticas para sumar y restar puntos a los puntos variables cuando los sprites choquen. '
        Course_4_SCV_3_b: Usted puede cambiar el parámetro de cuán lejos se mueve su sprite cada vez que una de las teclas flecha es presionada.
        Course_4_SCV_3_c: |-
          **Solución:**
          
          <xml><block type="when_run"><next><block type="variables_set" inline="false"><title name="VAR">points</title><value name="VALUE"><block type="math_number"><title name="NUM">0</title></block></value></block></next></block><block type="studio_whenArrow"><title name="VALUE">up</title><next><block type="studio_moveDistanceParams" inline="true"><title name="SPRITE">0</title><title name="DIR">1</title><value name="DISTANCE"><block type="math_number"><title name="NUM">25</title></block></value></block></next></block><block type="studio_whenArrow"><title name="VALUE">down</title><next><block type="studio_moveDistanceParams" inline="true"><title name="SPRITE">0</title><title name="DIR">4</title><value name="DISTANCE"><block type="math_number"><title name="NUM">25</title></block></value></block></next></block><block type="studio_whenArrow"><title name="VALUE">left</title><next><block type="studio_moveDistanceParams" inline="true"><title name="SPRITE">0</title><title name="DIR">8</title><value name="DISTANCE"><block type="math_number"><title name="NUM">25</title></block></value></block></next></block><block type="studio_whenArrow"><title name="VALUE">right</title><next><block type="studio_moveDistanceParams" inline="true"><title name="SPRITE">0</title><title name="DIR">2</title><value name="DISTANCE"><block type="math_number"><title name="NUM">25</title></block></value></block></next></block><block type="studio_whenSpriteCollided"><title name="SPRITE1">0</title><title name="SPRITE2">1</title><next><block type="variables_set" inline="false"><title name="VAR">points</title><value name="VALUE"><block type="math_arithmetic" inline="true"><title name="OP">ADD</title><value name="A"><block type="variables_get"><title name="VAR">points</title></block></value><value name="B"><block type="math_number"><title name="NUM">2</title></block></value></block></value></block></next></block><block type="studio_whenSpriteCollided"><title name="SPRITE1">0</title><title name="SPRITE2">2</title><next><block type="variables_set" inline="false"><title name="VAR">points</title><value name="VALUE"><block type="math_arithmetic" inline="true"><title name="OP">ADD</title><value name="A"><block type="variables_get"><title name="VAR">points</title></block></value><value name="B"><block type="math_number"><title name="NUM">3</title></block></value></block></value></block></next></block>
          <block type="studio_whenSpriteCollided">
          <title name="SPRITE1">1</title>
          <title name="SPRITE2">2</title>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">points</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MINUS</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">points</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCV 4_authored_hint:
        Course_4_SCV_4_a: Tres variables le ayudarán aquí. Una para las unidades de néctar, una para unidades de miel, y una para cuán lejos la abeja debería moverse en cada iteración.
        Course_4_SCV_4_b: 'Será muy útil usar tres lazos dentro de su lazo principal. Uno para moverse hacia adelante, uno para recolectar néctar y otro para hacer miel. '
        Course_4_SCV_4_c: "Echa un vistazo a esta opción de movimiento:\n\n![](https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png)"
        Course_4_SCV_4_d: |-
          **Solución:**
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">honey</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">nectar</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">6</title>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MINUS</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">nectar</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">nectar</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          <next>
          <block type="maze_moveForward">
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">honey</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_honey"/>
          </statement>
          <next>
          <block type="maze_moveForward">
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">honey</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">honey</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">nectar</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MINUS</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">nectar</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCV 5_authored_hint:
        Course_4_SCV_5_a: |-
          Eche un vistazo a esta opción de movimiento:
          
          ![](https://images.code.org/a69c63a039031254097f19231dd7bf95-image-1469726483169.png)
        Course_4_SCV_5_b: Cada vez mediante el lazo, las flores tienen dos veces menos néctar y la abeja necesitará hacer una miel más.
        Course_4_SCV_5_c: Note que al principio del lazo exterior, las abejas se mueven tantas veces como haya néctar en la siguiente flor.
        Course_4_SCV_5_d: |-
          **Solución:**
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">honey</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">nectar</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">nectar</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">nectar</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">honey</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_honey"/>
          </statement>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">honey</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">honey</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">nectar</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MINUS</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">nectar</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCV 6_authored_hint:
        Course_4_SCV_6_a: |-
          Eche un vistazo a cómo luce una sola forma completa
          
          ! [] (https://images.code.org/9e30d3a87186cefe730984feee195806-image-1469642178866.png)
        Course_4_SCV_6_b: 'Usted se beneficiará de la creación de 8 variables: red1, green1, blue1, red2, green2, blue2, longitud, y lados.'
        Course_4_SCV_6_c: Cada uno de los 5 lados de la forma se divide en pedazos de "largo" / "lados" donde el zig es verde azulado (rgb = 0,175,200) y el zag es morado (rgb = 100, 50, 150).
        Course_4_SCV_6_d: 'Para zig, gire a la izquierda en `360` /` lados`. Para zag, gire a la derecha en `360` /` lados`. '
        Course_4_SCV_6_e: 'El resto del programa es muy estándar para hacer una rotación completa de 360 grados de esa forma, excepto que estamos superponiendo las formas a la mitad, por lo que tenemos que girar a la derecha por `180` /` lados`, lo que significa que necesitamos dos veces tantos de ellos como de costumbre (repeticiones `lados` *` 2`). '
        Course_4_SCV_6_f: |-
          **Solution:**
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">red1</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">0</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">green1</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">175</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">blue1</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">200</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">red2</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">100</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">green2</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">50</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">blue2</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">150</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">70</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">sides</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MULTIPLY</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_rgb" inline="false">
          <value name="RED">
          <block type="variables_get">
          <title name="VAR">red1</title>
          </block>
          </value>
          <value name="GREEN">
          <block type="variables_get">
          <title name="VAR">green1</title>
          </block>
          </value>
          <value name="BLUE">
          <block type="variables_get">
          <title name="VAR">blue1</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">360</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_rgb" inline="false">
          <value name="RED">
          <block type="variables_get">
          <title name="VAR">red2</title>
          </block>
          </value>
          <value name="GREEN">
          <block type="variables_get">
          <title name="VAR">green2</title>
          </block>
          </value>
          <value name="BLUE">
          <block type="variables_get">
          <title name="VAR">blue2</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">360</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">360</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">180</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      CourseF_PlayLab_vars2_authored_hint:
        Course_4_Play_Lab_Vars_2_a: Asegúrese de establecer el número de `velocidad_perro`a algo más grande que` velocidad_gato`.
      D_Frozen_nested3_authored_hint:
        courseD_artist_project3_a: Use the drop down menu on the `turn` blocks to choose the angle you need!
        courseD_artist_project3_b: "Try nested loops!\n\nUse the code that you created to draw a line of shapes and nest it inside of another loop.  At the bottom, before the outside loop ends, add a block that will turn Elsa around.  \n\n- Try 72 degrees if you are repeating the outer loop 5 times\n- Try 60 degrees if you are repeating the outer loop 6 times"
      D_Frozen_nested4_authored_hint:
        courseD_artist_project4_a: |
          Here is the pentagon snowflake with a turn of 36 degrees before a triangle snowflake:
          
          <img src="https://images.code.org/2ba023db9404f948fab655bfa7923160-image-1495822526223.14.13.png" width="200px" />
          
          
          Here's a set of hexagons with squares:
          
          <img src="https://images.code.org/4d77462f3d07df6f1f5f2dc25e5d2b70-image-1495822526224.15.08.png" width="200px" />
        courseD_artist_project4_b: To try this, draw your first snowflake, turn, then draw a second snowflake.
      D_Frozen_nested5_authored_hint:
        courseD_artist_project4_a: |
          Lines of 2 hexagons and 4 triangles:
          
          <img src="https://images.code.org/37ca9779bafd2ccc5cc801f82358008e-image-1495823683964.34.09.png" width="200px" />
      D_Frozen_nested6_authored_hint:
        courseD_artist_project1a_a: |
          This stair step uses a 76 degree turn and repeats 4 times.
          
          <img src="https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png" width="200px" />
        courseD_artist_project1a_b: These patterns are a lot like the stair steps from other puzzles, but using a different angle.
      D_Frozen_nested7_authored_hint:
        courseD_artist_project2a_a: |
          This drawing was made by nesting a loop of 4 stairs and a `turn right 180 degrees` block inside of a `repeat 2 times` block.
          
          <img src="https://images.code.org/bb24f9acee8afed2e119c1e920cb43f6-image-1495834479042.16.27.png" width="200px" />
      D_Frozen_nested8_authored_hint:
        courseD_artist_project3a_a: You can choose different amounts to rotate your shape! What about 18 times with a 20 degree turn in between?
      D_Frozen_nested9_authored_hint:
        courseD_artist_project4a_a: |
          Here are two different lengths of snowflake, drawn one after another (with a 30 degree turn in between.)
          
          <img src="https://images.code.org/45dedb51d89d3e5d0a88fe65ecbd7d7b-image-1495833855890.22.39.png" width="200px" />
      Farmer for Authored Hint testing_authored_hint:
        first_hint: |-
          Esta es la primera pista.
          
          Tiene * algo de * ** basic ** `margen`
        second_hint: |-
          Esta es la segunda pista. Tiene una imagen
          
          ![](https://images.code.org/cab43107265a683a6216e18faab2353f-image-1452027548372.png)
        last_hint: Esta es la tercera y última pista. No tiene nada especial.
      Farmer for TTS testing_authored_hint:
        first_hint: |-
          Esta es la primera pista.
          
          Tiene * algo de * ** basic ** `margen`
        second_hint: |-
          Esta es la segunda pista. Tiene una imagen
          
          ![](https://images.code.org/cab43107265a683a6216e18faab2353f-image-1452027548372.png)
        last_hint: Esta es la tercera y última pista. No tiene nada especial.
      Function intro Ryan_authored_hint:
        Function_intro_Ryan_b: Si llamas a las funciones correctamente, este es el camino por el que ira...
        Function_intro_Ryan_a: '¡Puedes invocar una función muchas veces dentro de tu programa! Intenta invocarla dos veces para resolver este rompecabezas.'
      Harvesting_authored_hint:
        pointer_harvester_test: '¿Qué tipo de bloque puedo usar para verificar algo y tomar una decisión?'
      Inspirational Artwork_authored_hint:
        brush_width: Establecemos el grosor del pincel a 1, luego el color a azul antes de hacer cualquier otra cosa.
        double_loop: Intenta colocar un 'bucle para' dentro de un bucle 'repetir '.
        specifics: "El `bucle para` se ejecuta de tres a diecisiete para cada uno de los seis\" pétalos \"antes de pasar a crear el siguiente, dibujando formas con solo un número impar de lados.\n        \nEl bloque `establecer alfa` usa la división para atenuar el color a medida que el contador aumenta."
        after: Cuando hayas terminado con cada "pétalo", asegúrate de "avanzar" 20 píxeles antes de hacer una rotación de 60 grados.
        solution: |-
          **Solución**
          
          
          ![Image of Solution Blocks](https://images.code.org/d85a18bd31a09f87b41a818fc8d6c1cc-image-1469641375258.png)
      InspirationalArtwork_authored_hint: [ ]
      InspirationalArtwork_2018_authored_hint: [ ]
      K2.0 sequence 1_authored_hint:
        K2.0_sequence_1_a: This program is missing one block. Can you figure out which one?
      K2.0 sequence 10_authored_hint:
        K2.0_sequence_10_a: If you're having trouble, try writing down the steps on a piece of paper first.
        K2.0_sequence_10_b: You will need three different kinds of arrows to solve this puzzle.
      K2.0 sequence 12_authored_hint:
        K2.0_sequence_12_a: If the pig isn't moving far enough, try adding another block.
      K2.0 sequence 2_authored_hint:
        K2.0_sequence_2_a: One of the blocks is moving the bird in the wrong direction. Can you figure out which one and replace it with the correct block?
      K2.0 sequence 3_authored_hint:
        K2.0_sequence_3_a: If you are having trouble, try to figure out what the correct path is and then remove the block that doesn't fit.
      K2.0 sequence 4_authored_hint:
        K2.0_sequence_4_a: Use 2 different arrow blocks to solve this puzzle!
      K2.0 sequence 5_authored_hint:
        K2.0_sequence_5: Your final code should have three movement blocks.
      K2.0 sequence 6_authored_hint:
        K2.0_sequence_6_a: There is 1 block that you need to add to move the bird to the pig.
        K2.0_sequence_6_b: If you can't figure out what to do, try drawing the puzzle on paper and use your finger to figure out which way to move.
      K2.0 sequence 7_authored_hint:
        K2.0_sequence_7_a: If you're stuck, try drawing the image on paper to see how the bird should move.
      K2.0 sequence 8_authored_hint:
        K2.0_sequence_8_a: Stuck? Try tracing the bird's path with your finger.
      K2.0 sequence 9_authored_hint:
        K2.0_sequence_9_a: If you're having trouble, try writing down the steps on a piece of paper first.
        K2.0_sequence_9_b: You will need to go three different directions to solve this puzzle.
      K2.0 sequence FP_authored_hint:
        K2.0_sequence_FP_a: If the path you need is unclear, use your finger to trace your way from the bird to the pig.
      K2.0 sequence pre_authored_hint:
        K2.0_sequence_pre_a: If you are having trouble getting the bird to move, make sure blocks are connected under `when run`.
      MC Agent Freeplay_authored_hint:
        MC_HOC_2017_13_Cole_a: Haz que el Agent construya varios puentes para que Alex o Steve puedan caminar más allá de los bordes del mapa.
      MC_HOC_2017_01_Cole_authored_hint:
        MC_HOC_2017_01_Cole_a: Utiliza las flechas direccionales para dirigir al jugador hasta la casa. Conseguirás la victoria si terminas en el recuadro naranja.
      MC_HOC_2017_01_RETRY_authored_hint:
        MC_HOC_2017_01_RETRY_a: Arrastra un bloque de "avanzar" de la caja de herramientas al espacio de trabajo y colócalo debajo del bloque de "al ejecutar"
        MC_HOC_2017_01_RETRY_b: No te olvides de hacer clic en "Ejecutar" para ejecutar el código del Agent.
        MC_HOC_2017_01_RETRY_c: Una vez el Agent haya ejecutado todo su código, podrás desplazar al jugador con las flechas direccionales.
      MC_HOC_2017_02_Cole_authored_hint:
        MC_HOC_2017_02_Cole_a: Haz que el Agent se desplace hacia adelante dos espacios para que se sitúe en el plato de presión. Eso abrirá la puerta para tu jugador.
        MC_HOC_2017_02_Cole_b: |-
          ¡Pulsa "Ejecutar"! 
          Puedes ejecutar tu código incluso si no es el correcto. Ejecuta y reinicia tu código todas las veces que quieras hasta que observes qué es lo que falla.
        MC_HOC_2017_02_Cole_c: Una vez el Agent haya abierto la puerta, utiliza las flechas direccionales para mover al jugador por el mapa.
        MC_HOC_2017_02_Cole_d: Make sure the Agent is following the path outlined on the map!
      MC_HOC_2017_02_Will_authored_hint:
        MC_HOC_2017_02_Cole_a: Haz que el Agent se desplace hacia adelante dos espacios para que se sitúe en el plato de presión. Eso abrirá la puerta para tu jugador.
        MC_HOC_2017_02_Cole_b: |-
          ¡Pulsa "Ejecutar Agent"! 
          Puedes ejecutar tu código incluso si no es el correcto. Ejecuta y reinicia tu código todas las veces que quieras hasta que observes qué es lo que falla.
        MC_HOC_2017_02_Cole_c: Una vez el Agent haya abierto la puerta, utiliza las flechas direccionales para mover al jugador hasta el recuadro naranja.
      MC_HOC_2017_03_Cole_authored_hint:
        MC_HOC_2017_03_Cole_a: Una vez lleves al Agent al plato de presión, podrás utilizar las flechas direccionales para llevar al jugador hasta la brújula.
        MC_HOC_2017_03_Cole_b: '¿Te parece que el código es demasiado largo? Intenta utilizar un bucle de "repetición" y comprueba si puedes acortarlo.'
      MC_HOC_2017_04POINT5_Cole_authored_hint:
        MC_HOC_2017_04POINT5_Cole_a: |-
          Cruzar estos dos platos de presión aquí hará que se abra un camino para el jugador.
          ![](https://images.code.org/9760c20b83d191570858617f8522ddad-image-1507751553614.50.25.png)
      MC_HOC_2017_04POINT5_RYAN_authored_hint:
        MC_HOC_2017_04POINT5_RYAN_b: 'Utiliza el bloque de "girar a la derecha" para modificar la dirección del Agent.'
        MC_HOC_2017_04POINT5_RYAN_a: El Agent solo tiene que llegar al primer plato de presión para que Alex o Steve puedan llegar al hacha.
      MC_HOC_2017_04_Cole_authored_hint:
        MC_HOC_2017_04_Cole_a: El Agent tiene que "avanzar" 7 veces. ¿Cómo puedes utilizar un bucle de "repetición" para que eso suceda?
        MC_HOC_2017_04_Cole_c: |-
          ¡Pulsa "Ejecutar"! 
          Puedes ejecutar tu código incluso si no es el correcto. Ejecuta y reinicia tu código todas las veces que quieras hasta que observes qué es lo que falla.
        MC_HOC_2017_04_Cole_b: Una vez el Agent llegue al plato de presión, abrirá la puerta para el jugador.
      MC_HOC_2017_05_Cole_authored_hint:
        MC_HOC_2017_05_Cole_a: '¿Sabías que puedes poner más de un elemento de código en un bucle? Intenta poner un tablón **y** avanzar dentro de una "repetición" para completar este rompecabezas.'
        MC_HOC_2017_05_Cole_b: Haz que el Agente cruce el río, construyendo un puente mientras vas.
      MC_HOC_2017_05_Josh_authored_hint:
        MC_HOC_2017_05_Cole_a: '¿Sabías que puedes poner más de un elemento de código en un bucle? Intenta poner un tablón **y** avanzar dentro de una "repetición" para completar este rompecabezas.'
      MC_HOC_2017_06_Cole_authored_hint:
        MC_HOC_2017_06_Cole_a: '¿Cuántas veces se ejecuta este bucle? ¿Cuántas veces *debería* ejecutarse?'
        MC_HOC_2017_06_Cole_b: '¡Ayuda al Agente a construir un puente a través del agua! '
      MC_HOC_2017_06_Josh_authored_hint:
        MC_HOC_2017_06_Cole_a: '¡Intenta poner más de una instrucción dentro de un bucle de "repetición"!'
      MC_HOC_2017_07_Cole_authored_hint:
        MC_HOC_2017_07_Cole_c: Todo lo que necesitas que el agente haga es limpiar el camino hasta llegar al carro de la mina.
        MC_HOC_2017_07_Cole_a: Para resolver este rompecabezas, intenta averiguar para qué sirve la función de "despejar camino" e invócala tantas veces como consideres necesario utilizando el pequeño bloque verde de "despejar camino" en la caja de herramientas.
        MC_HOC_2017_07_Cole_b: Intenta combinar los bloques de función con otros bloques de la caja de herramientas para solucionar este rompecabezas.
      MC_HOC_2017_08_RY_authored_hint:
        MC_HOC_2017_08_RY_a: |-
          ¡Pulsa "Ejecutar Agent"! 
          Puedes ejecutar tu código incluso si no es el correcto. Ejecuta y reinicia tu código todas las veces que quieras hasta que observes qué es lo que falla.
        MC_HOC_2017_08_RY_b: Hay MUCHAS maneras de resolver este rompecabezas. ¡Prueba varias!
      MC_HOC_2017_08_Will_authored_hint:
        MC_HOC_2017_08_RY_a: |-
          ¡Pulsa "Ejecutar Agent"! 
          Puedes ejecutar tu código incluso si no es el correcto. Ejecuta y reinicia tu código todas las veces que quieras hasta que observes qué es lo que falla.
        MC_HOC_2017_08_RY_b: Hay MUCHAS maneras de resolver este rompecabezas. ¡Prueba varias!
      MC_HOC_2017_10_Cole_authored_hint:
        MC_HOC_2017_10_Cole_a: '¡Utiliza las funciones para que resolver este rompecabezas sea más sencillo!'
      MC_HOC_2017_10_RETRY_authored_hint:
        MC_HOC_2017_10_Cole_b: '¿No sabes a dónde ir? ¡Intenta encontrar la línea punteada!'
        MC_HOC_2017_10_Cole_a: '¡Utiliza las funciones para que resolver este rompecabezas sea más sencillo!'
      MC_HOC_2017_13_Cole_authored_hint:
        MC_HOC_2017_13_Cole_a: Haz que el Agent construya varios puentes para que Alex o Steve puedan caminar más allá de los bordes del mapa.
      MC_HOC_2017_4.5v2_authored_hint:
        MC_HOC_2017_04POINT5_Cole_a: |-
          Cruzar estos dos platos de presión aquí hará que se abra un camino para el jugador.
          ![](https://images.code.org/9760c20b83d191570858617f8522ddad-image-1507751553614.50.25.png)
      MC_HOC_2017_Ali_authored_hint:
        MC_HOC_2017_08_RY_a: |-
          ¡Pulsa "Ejecutar"! 
          Puedes ejecutar tu código incluso si no es el correcto. Ejecuta y reinicia tu código todas las veces que quieras hasta que observes qué es lo que falla.
        MC_HOC_2017_08_RY_b: Hay MUCHAS maneras de resolver este rompecabezas. ¡Prueba varias!
        MC_HOC_2017_08_RY_c: Intenta seguir la línea punteada para un camino simple a través de la lava.
      MC_HOC_2017_FP10x10_authored_hint: [ ]
      MC_HOC_2017_FP10x10_RE_authored_hint: [ ]
      MC_HOC_2017_FP20x20_authored_hint:
        MC_HOC_2017_13_Cole_a: Haz que el Agent construya varios puentes para que Alex o Steve puedan caminar más allá de los bordes del mapa.
      MikeStar_authored_hint:
        hint1: Don't give up!
      MikeStarHard_authored_hint:
        hint1: Don't give up!
      MikeStarNested_authored_hint:
        hint1: Don't give up!
      NEW Course 4 Artist Functions 13_authored_hint:
        NEW_Course_4_Artist_Functions_13_a: Intenta editar la función de `dibuja una línea de cuadrados` para que no tengas que decidirlo dos veces.
        NEW_Course_4_Artist_Functions_13_c: '¿Qué código necesitarías si estás intentando hacer una estrella usando líneas regular en vez de cajas?'
      NEW Course 4 Artist Functions 4_authored_hint:
        NEW_Course_4_Artist_Functions_4_a: Tendrás que usar un bloque de `gira a la derecha con 120 grados` luego de cada cuadro.
      NEW Course 4 Artist Functions 9_authored_hint:
        NEW_Course_4_Artist_Functions_9_a: Intenta ejecutar el código antes de añadir algún bloque. ¿Qué hace que el dibujo se vea un poco mal?
        NEW_Course_4_Artist_Functions_9_b: Si no puedes encontrar exactamente lo que está mal, intenta reducirle la velocidad al artista moviendo el control deslizante a la izquierda.
      NEW Course 4 Artist Params 11_authored_hint:
        NEW_Course_4_Artist_Params_11_a: Hay más de un número que necesita ser reemplazado por una variable dentro de la función.
      NEW Course 4 Artist Params 13_authored_hint:
        NEW_Course_4_Artist_Params_13_a: 'Vas a necesitar dividir el *perímetro* por el número de lados para mantener las formas en el mismo tamaño a pesar de todo. '
      NEW Course 4 Artist Params 14_authored_hint:
        NEW_Course_4_Artist_Params_14_a: It's okay to run the program a few times to figure out how the function works with different parameters.
      NEW Course 4 Artist Params inspire_authored_hint:
        brush_width: Establecemos el grosor del pincel a 1, luego el color a azul antes de hacer cualquier otra cosa.
        double_loop: Intenta colocar un 'bucle para' dentro de un bucle 'repetir '.
        specifics: "El `bucle para` se ejecuta de tres a diecisiete para cada uno de los seis\" pétalos \"antes de pasar a crear el siguiente, dibujando formas con solo un número impar de lados.\n        \nEl bloque `establecer alfa` usa la división para atenuar el color a medida que el contador aumenta."
        after: Cuando hayas terminado con cada "pétalo", asegúrate de "avanzar" 20 píxeles antes de hacer una rotación de 60 grados.
        solution: |-
          **Solution**
          
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_picker">
          <title name="COLOUR">#0000cd</title>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">6</title>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">17</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="alpha" inline="true" id="alpha">
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">500</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="draw a polygon">
          <arg name="length"></arg>
          <arg name="sides"></arg>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">30</title>
          </block>
          </value>
          <value name="ARG1">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">20</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">60</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      NEW Course 4 Bee For Loops 10a_authored_hint:
        NEW_Course_4_Bee_For_Loops_10a_a: Can you find a pattern between the number of steps you need to take and the number of nectars to gather?
        NEW_Course_4_Bee_For_Loops_10a_b: You'll need to have 2 repeats, one will use a math block.
      NEW Course 4 Bee For Loops 7_authored_hint:
        NEW_Course_4_Bee_For_Loops_7_a: |-
          Try doing some math with the counter variable.
          
          What do you have to do to the counter at each flower to equal the amount of nectar you need to collect?
      NEW Course 4 Bee For Loops 8_authored_hint:
        NEW_Course_4_Bee_For_Loops_8_a: "Si tu bucle cuenta hacia arriba, el incremento es añadido a tu variable de contabilidad cada vez a través. \n\n¿Qué necesitas agregarle a cada número para obtener el número tras ese?"
      New Minecraft Hero Project_authored_hint:
        MC_HOC_2017_13_Cole_a: Haz que el Agent construya varios puentes para que Alex o Steve puedan caminar más allá de los bordes del mapa.
      Overworld Avoid Monsters_authored_hint:
        mc_8_a: Hay pocos caminos que puede tomar. ¿Cuál es el más corto?
        mc_8_b: Utilice 'repetir' lazos' para simplificar su código.
        mc_8_c: Su meta es entrar en la puerta de la casa en la parte superior de la pantalla.
      Overworld Avoid Monsters_2018_authored_hint:
        mc_8_a: Hay pocos caminos que puede tomar. ¿Cuál es el más corto?
        mc_8_b: Utilice 'repetir' lazos' para simplificar su código.
        mc_8_c: Su meta es entrar en la puerta de la casa en la parte superior de la pantalla.
      Overworld Chop Tree_authored_hint:
        mc_2_a: 'Usted necesita ''avanzar'' dos veces para pararse en frente del árbol.'
        mc_2_b: El comando 'destruir bloque' corta el árbol en frente de usted.
      Overworld Chop Tree_2018_authored_hint:
        mc_2_a: 'Usted necesita ''avanzar'' dos veces para pararse en frente del árbol.'
        mc_2_b: El comando 'destruir bloque' corta el árbol en frente de usted.
      Overworld Chop Trees_authored_hint:
        mc_4_a: 'Puede talar árboles en cualquier orden. ¿Qué camino toma el menor número de bloques?'
        mc_4_b: El comando 'destruir bloque' corta el árbol en frente de usted.
      Overworld Chop Trees_2018_authored_hint:
        mc_4_a: 'Puede talar árboles en cualquier orden. ¿Qué camino toma el menor número de bloques?'
        mc_4_b: El comando 'destruir bloque' corta el árbol en frente de usted.
      Overworld House Frame Chosen_authored_hint:
        mc_6_a: Haga click en la flecha sobre el bloque 'colocar' para escoger lo que quiere colocar.
        mc_6_b: Don't be afraid to make a mistake! Run the code to see what happens, even if you haven't solved the puzzle yet.
        mc_6_c: Usted puede poner más de un bloque dentro de un lazo 'repetir'.
      Overworld House Frame Chosen_2018_authored_hint:
        mc_6_a: Haga click en la flecha sobre el bloque 'colocar' para escoger lo que quiere colocar.
        mc_6_b: Don't be afraid to make a mistake! Run the code to see what happens, even if you haven't solved the puzzle yet.
        mc_6_c: Usted puede poner más de un bloque dentro de un lazo 'repetir'.
      Overworld Move to Sheep_authored_hint:
        mc_1_a: 'El bloque ''avanzar'' está en la parte superior del cuadro de herramientas.'
        mc_1_b: 'Asegúrate de que ambos bloques `mover hacia adelante` estén rotos al bloque `cuando corre`.'
      Overworld Move to Sheep_2018_authored_hint:
        mc_1_a: 'El bloque ''avanzar'' está en la parte superior del cuadro de herramientas.'
        mc_1_b: 'Asegúrate de que ambos bloques `mover hacia adelante` estén rotos al bloque `cuando corre`.'
      Overworld Place Wall_authored_hint:
        mc_5_a: Use primero el bloque 'colocar', y luego el bloque 'mover'.
        mc_5_b: Asegúrese de que ambos bloques están dentro del lazo 'repetir' para ejecutar el código más de una vez.
        mc_5_c: Don't be afraid to make a mistake! Run the code to see what happens, even if you haven't solved the puzzle yet.
      Overworld Place Wall_2018_authored_hint:
        mc_5_a: Use primero el bloque 'colocar', y luego el bloque 'mover'.
        mc_5_b: Asegúrese de que ambos bloques están dentro del lazo 'repetir' para ejecutar el código más de una vez.
        mc_5_c: Don't be afraid to make a mistake! Run the code to see what happens, even if you haven't solved the puzzle yet.
      Overworld Plant Crops_authored_hint:
        mc_7_a: Use el bloque 'cultivo de plantas' para plantar un cultivo en el espacio donde está parado.
        mc_7_b: Ambas franjas de tierra marrón oscuro junto al agua necesitan ser llenadas con cultivos.
        mc_7_c: Usted puede poner más de un bloque dentro de un lazo 'repetir'.
      Overworld Plant Crops_2018_authored_hint:
        mc_7_a: Use el bloque 'cultivo de plantas' para plantar un cultivo en el espacio donde está parado.
        mc_7_b: Ambas franjas de tierra marrón oscuro junto al agua necesitan ser llenadas con cultivos.
        mc_7_c: Usted puede poner más de un bloque dentro de un lazo 'repetir'.
      Overworld Powered Minecart_authored_hint:
        mc_13_a: Utilice 'colocar riel' para colocar un riel en el cuadro en el que está.
        mc_13_b: Utilice los lazos 'repetir' para hacer su código más corto.
      Overworld Powered Minecart_2018_authored_hint:
        mc_13_a: Utilice 'colocar riel' para colocar un riel en el cuadro en el que está.
        mc_13_b: Utilice los lazos 'repetir' para hacer su código más corto.
      Overworld Shear Sheep_authored_hint:
        mc_3_a: 'El bloque ''esquilar '' obtiene la oveja en frente de usted. ¿Está frente a la oveja?'
        mc_3_b: 'Si necesita cambiar la dirección en la que mira, utilice un bloque de ''girar''.'
        mc_3_c: 'Don''t be afraid to make a mistake! Run the code to see what happens, even if you haven''t solved the puzzle yet.  '
      Overworld Shear Sheep_2018_authored_hint:
        mc_3_a: 'El bloque ''esquilar '' obtiene la oveja en frente de usted. ¿Está frente a la oveja?'
        mc_3_b: 'Si necesita cambiar la dirección en la que mira, utilice un bloque de ''girar''.'
        mc_3_c: 'Don''t be afraid to make a mistake! Run the code to see what happens, even if you haven''t solved the puzzle yet.  '
      Pattern Bee 1_authored_hint:
        conditional_pointer: |-
          Comience por pensar sobre esta parte: ¿ Cuál es la diferencia en cada paso el camino? ¿ Qué tipo de bloque puede usar para tomas una *decisión* sobre si usted está en una flor o en un panal?
          
          ![](https://images.code.org/a4883ea91c2f879ca1bb281d7944ed87-image-1471477752512.48.07 PM.png)
        turn_at_honeycomb_pointer: Que no sea hacer miel, ¿ve algo diferente que tiene que hacer en cada panal?
      Planning Farmer_authored_hint:
        conditional_pointer: |-
          Comience por pensar sobre esta parte: ¿ Cuál es la diferencia en cada paso el camino? ¿ Qué tipo de bloque puede usar para tomas una *decisión* sobre si usted está en una flor o en un panal?
          
          ![](https://images.code.org/a4883ea91c2f879ca1bb281d7944ed87-image-1471477752512.48.07 PM.png)
        turn_at_honeycomb_pointer: Que no sea hacer miel, ¿ve algo diferente que tiene que hacer en cada panal?
      Quantum Bee - Ryan_authored_hint:
        test_hint: Esto es una pista.
      Test embedded K1 Blockly in instructions_authored_hint: [ ]
      Underground Avoiding Lava_authored_hint:
        mc_11_a: Todo el código está en su lugar para asegurarse de la lava y enfrentarla. Todo lo que necesitas hacer es agregar un bloque para moverte.
        mc_11_b: '¿Debería su comando ''avanzar'' ir dentro de la instrucción ''if'' o después?'
      Underground Avoiding Lava_2018_authored_hint:
        mc_11_a: Todo el código está en su lugar para asegurarse de la lava y enfrentarla. Todo lo que necesitas hacer es agregar un bloque para moverte.
        mc_11_b: '¿Debería su comando ''avanzar'' ir dentro de la instrucción ''if'' o después?'
      Underground If Statements_authored_hint:
        mc_12_a: Los espacios con puntos rojos son donde usted encontrará Redstone.
        mc_12_b: '¿Puede utilizar un lazo ''repetir'' para hacer su código más corto?'
        mc_12_c: 'Usa un argumento `y si` para revisar si hay espacios con lava, entonces coloca rocas. '
      Underground If Statements_2018_authored_hint:
        mc_12_a: Los espacios con puntos rojos son donde usted encontrará Redstone.
        mc_12_b: '¿Puede utilizar un lazo ''repetir'' para hacer su código más corto?'
        mc_12_c: 'Usa un argumento `y si` para revisar si hay espacios con lava, entonces coloca rocas. '
      Underground Iron_authored_hint:
        mc_10_a: '¡Los bloques de hierro son los espacios punteados detrás de la antorcha! ¿Cómo va a llegar allá?'
        mc_10_b: Cuando está parado el borde de la lava, utilice 'colocar adoquín adelante' para un camino seguro.¡Luego, podrá caminar sobre el!
        mc_10_c: Don't be afraid to make a mistake! Run the code to see what happens, even if you haven't solved the puzzle yet.
      Underground Iron_2018_authored_hint:
        mc_10_a: '¡Los bloques de hierro son los espacios punteados detrás de la antorcha! ¿Cómo va a llegar allá?'
        mc_10_b: Cuando está parado el borde de la lava, utilice 'colocar adoquín adelante' para un camino seguro.¡Luego, podrá caminar sobre el!
        mc_10_c: Don't be afraid to make a mistake! Run the code to see what happens, even if you haven't solved the puzzle yet.
      Underground Mining Coal_authored_hint:
        mc_9_a: '¿Está frente al camino correcto? El ''bloque destruir'' explota el bloque en frente de usted.'
        mc_9_b: '¡Las machas negras en el muro son carbón! Utilice ''destruir bloque'' en estas para minar el carbón.'
        mc_9_c: Utilice 'poner antorcha' para poner una antorcha en el espacio donde está parado.
      Underground Mining Coal_2018_authored_hint:
        mc_9_a: '¿Está frente al camino correcto? El ''bloque destruir'' explota el bloque en frente de usted.'
        mc_9_b: '¡Las machas negras en el muro son carbón! Utilice ''destruir bloque'' en estas para minar el carbón.'
        mc_9_c: Utilice 'poner antorcha' para poner una antorcha en el espacio donde está parado.
      Valentine_artist2_01_authored_hint:
        Valentine_artist2_01_a: Each side of the grass is 30 pixels long. Try using a stair step pattern.
        Valentine_artist2_01_b: 'Do you see any patterns repeating? You should be using two `move forward` blocks and two different `turn` blocks inside a loop. '
        Valentine_artist2_01_c: |-
          Try this loop
          <xml><block type="controls_repeat">
          <title name="TIMES">8</title>
          <statement name="DO">
          <block type="draw_move_by_constant">
          <title name="DIR">moveForward</title>
          <title name="VALUE">30</title>
          <next>
          <block type="draw_turn_by_constant">
          <title name="DIR">turnRight</title>
          <title name="VALUE">90</title>
          <next>
          <block type="draw_move_by_constant">
          <title name="DIR">moveForward</title>
          <title name="VALUE">30</title>
          <next>
          <block type="draw_turn_by_constant">
          <title name="DIR">turnLeft</title>
          <title name="VALUE">90</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block></xml>
      Valentine_artist_01_authored_hint:
        Valentine_artist_01_a: Which direction does the artist need to face to move? Which direction does the artist need to face to place a new llama sticker?
        Valentine_artist_01_b: The artist needs to place 10 llama stickers and turn 90 degrees at each turn.
      Valentine_playlab_01_authored_hint:
        Valentine_playlab_01_a: |-
          Snap the `actor 1 throw red hearts down` block into the `when actor 1 clicked` event.
          
          Don't forget to change `left` to `down`!
        Valentine_playlab_01_b: Use the `move actor 1 left` block by clicking it into place beneath the `when left arrow clicked` event.
      aE1_authored_hint: [ ]
      aE2_authored_hint:
        aE2_a: Nota que como los pañuelos tienen 20 píxeles de largo, necesitarás saltar 20 píxeles antes de iniciar tu siguiente bucle.
      aE3_authored_hint:
        aE3_a: Después de ejecutar su **lazo anidado** de la última etapa, usted necesitará saltar hacia atrás hasta el comienzo de la línea.
        aE3_b: "¡No olvide mover al artista hacia abajo antes de comenzar una nueva fila de figuras!\n\nPara mover al artista abajo y tenerlo frente a la vía correcta otra vez, asegúrese de que:\n-Gire 90 grados (para ver hacia abajo)\n-Salta 20 píxeles (Para obtener una nueva fila)\n-Girar hacia atrás 90 grados (Para ver hacia la derecha otra vez)"
        aE3_c: Cuando este todo listo, sus **lazos anidados** deberían ser de tres niveles de repetición.
        aE3_d: Si tu código se vuelve demasiado confuso, siempre puedes hacer clic en "volver a empezar" y ¡volver a intentarlo!
      aE3alternate_authored_hint:
        aE3alternate_a: Después de ejecutar su **lazo anidado** de la última etapa, usted necesitará saltar hacia atrás hasta el comienzo de la línea.
        aE3alternate_b: "¡No olvide mover al artista hacia abajo antes de comenzar una nueva fila de figuras!\n\nPara mover al artista abajo y tenerlo frente a la vía correcta otra vez, asegúrese de que:\n-Gire 90 grados (para ver hacia abajo)\n-Salta 20 píxeles (Para obtener una nueva fila)\n-Girar hacia atrás 90 grados (Para ver hacia la derecha otra vez)"
        aE3alternate_c: Cuando este todo listo, sus **lazos anidados** deberían ser de tres niveles de repetición.
        aE3alternate_d: Si tu código se vuelve demasiado confuso, siempre puedes hacer clic en "volver a empezar" y ¡volver a intentarlo!
      aE3alternateB_authored_hint:
        aE4alternateB_a: Después de ejecutar su **lazo anidado** de la última etapa, usted necesitará saltar hacia atrás hasta el comienzo de la línea.
        aE4alternateB_b: "¡No olvide mover al artista hacia abajo antes de comenzar una nueva fila de figuras!\n\nPara mover al artista abajo y tenerlo frente a la vía correcta otra vez, asegúrese de que:\n-Gire 90 grados (para ver hacia abajo)\n-Salta 20 píxeles (Para obtener una nueva fila)\n-Girar hacia atrás 90 grados (Para ver hacia la derecha otra vez)"
        aE4alternateB_c: Cuando este todo listo, sus **lazos anidados** deberían ser de tres niveles de repetición.
        aE4alternateB_d: Si tu código se vuelve demasiado confuso, siempre puedes hacer clic en "volver a empezar" y ¡volver a intentarlo!
      aE4_authored_hint:
        aE4_a: Después de ejecutar su **lazo anidado** de la última etapa, usted necesitará saltar hacia atrás hasta el comienzo de la línea.
        aE4_b: "¡No olvide mover al artista hacia abajo antes de comenzar una nueva fila de figuras!\n\nPara mover al artista abajo y tenerlo frente a la vía correcta otra vez, asegúrese de que:\n-Gire 90 grados (para ver hacia abajo)\n-Salta 20 píxeles (Para obtener una nueva fila)\n-Girar hacia atrás 90 grados (Para ver hacia la derecha otra vez)"
        aE4_c: Cuando este todo listo, sus **lazos anidados** deberían ser de tres niveles de repetición.
        aE4_d: Si tu código se vuelve demasiado confuso, siempre puedes hacer clic en "volver a empezar" y ¡volver a intentarlo!
      aE5_authored_hint: [ ]
      aE6_authored_hint:
        aE6_a: |-
          Si hay 180 grados en un semicírculo y en cada lazo el artista hace giros de 3 grados, ¿Cuántas lazos necesitaría usted para dibujar la mitad de un círculo completo?
          
          **180 ÷ 3 = ?**
      aE7_authored_hint:
        aE7_a: Dibuja la mitad inferior de un círculo y luego la mitad superior de un círculo para hacer un segmento.
        aE7_b: Usted necesitará 4 segmentos para completar este rompecabezas.
      aE8_authored_hint:
        aE8_a: "Para hacer un cuadrado desde su línea, usted necesitará: \n\n- dibujar la línea - \n- usar la esquina curva\n\nRepita estos pasos 4 veces."
      allHallows2017_authored_hint:
        allHallows2017_a: '¡Cuidado!  ¡GT puede seguirlo detrás en su bicicleta y borrar la línea!'
        allHallows2017_g: 'Sarah dice: "¿Tiene frío? Venga siéntese en la esquina...¡Son 90 grados!"'
        allHallows2017_c: 'Jordyn says: "You crayon''t stop now! Keep going!"'
        allHallows2017_d: 'Josh dice: "¡Tendrá que recurrir a sus habilidades de codificación para completar este rompecabezas!"'
        allHallows2017_e: 'Dani dice: "No soy buena con los juegos de palabras. ¡Intente usar un bloque ''repetir''!"'
        allHallows2017_b: 'Baker dice: "El lápiz de color Chicago sólo funciona en la *línea verde*."'
        allHallows2017_f: 'Amy dice: "¡Puede hacerlo! Solo piense fuera de la caja"'
      artistDebugVideo1_authored_hint:
        courseA_artist_loops7_a: Can't figure out where to put the loop? Try writing the code step-by-step and look for a pattern.
      artistFunctionsVideo1_authored_hint: [ ]
      artistLoopsK2_authored_hint:
        artistLoopsK2_a: Si quiere que el lazo se repita más de 4 veces, usted puede cambiar el número en la parte superior del bloque.
      artistLoopsK2gradek_artist_loops3_authored_hint:
        artistLoopsK2_a: Si quiere que el lazo se repita más de 4 veces, usted puede cambiar el número en la parte superior del bloque.
      artistLoopsK3_authored_hint:
        artistLoopsK3_a: '¡Intente utilizando lo que ha aprendido acerca de los bloques repetir para completar este rompecabezas!'
      artistLoopsK4_authored_hint:
        artistLoopsK4_a: '¿Atorado? Intente ejecutando el código para ver cual bloque es el incorrecto.'
      artistLoopsK5_authored_hint:
        artistLoopsK5_a: All 4 of the starting blocks should go inside of your repeat block to solve this puzzle.
      artistLoopsK6_authored_hint:
        artistLoopsK6_a: Try running the code to see where there is a bug.
      artistLoopsK7_authored_hint:
        artistLoopsK7_a: All of the blocks you need for this puzzle are already in your workspace!
      artistLoopsK8_authored_hint:
        artistLoopsK8_a: Try running the code to see where there is a bug.
      artistLoopsK9_authored_hint:
        artistLoopsK9_a: This challenge uses FOUR loops, one right after another!
      artistLoopsKA_authored_hint:
        artistLoopsKA_a: Use the jump block to move forward without drawing a line.
      artistLoopsKB_authored_hint:
        artistLoopsKB_a: There should be 3 blocks inside of your loop to solve this puzzle.
      artistLoopsKFP_authored_hint: [ ]
      comment_intro_maze_2018_authored_hint:
        courseC_maze_programming4_a: Comments are also helpful when other people try to read your code.
        courseC_maze_programming4_b: Add a comment when you change directions- what would have happened if you turned the other way?
      conditionals_forvideo_harvester_authored_hint: [ ]
      course1_artist_loops_challenge1_authored_hint:
        courseA_artist_loops_challenge1_a: |+
          You can use loops like this to create the walls and the roof. Try repeating different blocks.
          
          
          
          ![](https://images.code.org/1581a2f599b501103064fc9864aa964d-image-1491863694560.png)
          
          Design your own or click the ![](https://images.code.org/53090194cea5dbf35ce9e35205156f5d-image-1491864793265.png) for some ideas!
        courseA_artist_loops_challenge1_b: "![](https://images.code.org/34f3bae38f77f07eaf455188c0b008e5-image-1491864823946.png)"
        courseA_artist_loops_challenge1_c: "![](https://images.code.org/24b208839971803f3f6cd6ae41da56df-image-1491864839734.png)"
        courseA_artist_loops_challenge1_d: "![](https://images.code.org/d3ccefffa0cc77bdd4a597cdb49fc85e-image-1491864847347.png)"
      course1_artist_loops_challenge2_authored_hint:
        harvey_tictactoe: Puedes usar bloques `saltar` para moverte a otros espacios.
      course1_artist_loops_challenge3_authored_hint:
        courseA_artist_loops_challenge2_a: 'Blocks like this: <xml>  <block type="simple_move_up_left"/></xml> will let your artist move at a slant!'
        courseA_artist_loops_challenge2_b: '¡Cuando terminas una casa de ave, `salta` a la siguiente!'
        courseA_artist_loops_challenge2_c: Necesitarás MUCHOS bloques dentro del bucle para este desafío.
      course1_artist_loops_challenge4_authored_hint:
        courseB_artist_loops_challenge1_a: 'Blocks like this: <xml>  <block type="simple_move_up_right"/></xml> will let your artist move at a slant!'
        courseB_artist_loops_challenge1_b: When you finish one of the dice, `jump` to the next!
        courseB_artist_loops_challenge1_c: 'You will need to `move` or `jump` over some of the same lines twice. '
      course1_collector_loops_challenge1_authored_hint:
        courseA_collector_loops_challenge1_a: Intenta cambiar los números en cada bucle si algo va mal.
        courseA_collector_loops_challenge1_b: No necesitas usar un bucle si solo estás haciendo algo una vez.
        courseA_collector_loops_challenge1_c: Hay 6 gemas en el lado derecho de la cueva, pero solo necesitas mover y coleccionar 5 veces. ¿Sabes por qué?
      course1_collector_loops_challenge2_authored_hint:
        courseA_collector_loops_challenge2_b: "You only need to use one ![](https://images.code.org/803e9ee8b5bc9311a26edf955cd3c03f-image-1491001702274.07.34 PM.png) block to solve this.\n\n"
        courseA_collector_loops_challenge2_a: |-
          You can move back over the path a second time before moving south.
          
          ![](https://images.code.org/88c28c76dbea70e20253083d22b5f5fd-image-1491001404225.01.21 PM.png)
      course1_collector_loops_challenge3_authored_hint:
        courseB_collector_loops_challenge1_b: |
          Start by looping the commands `move south` and `get treasure`.
          <xml>
          <block type="maze_moveSouth"/><next>
          <block type="collector_collect"/></next>
          </xml>
        courseB_collector_loops_challenge1_a: |
          The north pattern is a little different than the south pattern.
          <xml>
          <block type="collector_collect"/><next>
          <block type="maze_moveNorth"/></next>next>
          </xml>
        courseB_collector_loops_challenge1_c: "Move East twice between each path.\n<xml>\n  <block type=\"maze_moveEast\"/><next>\n  <block type=\"maze_moveEast\"/></next>next>\n  </xml>\nYou can do this with only 14 blocks. Click for one more hint to see a solution. \n"
        courseB_collector_loops_challenge1_d: |-
          Try this!
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="maze_moveNorth"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      course1_collector_loops_challenge4_authored_hint:
        courseB_collector_loops_challenge2_a: If something goes wrong, don't be afraid to start over. Don't give up!
        courseB_collector_loops_challenge2_b: |-
          If you repeat this pattern, Laurel won't hit the wall at the bottom of the cave!
          
          <xml><block type="maze_moveEast">
          <next>
          <block type="collector_collect">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveSouth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
        courseB_collector_loops_challenge2_c: Try using a `repeat` block to collect the final pile of treasure!
        courseB_collector_loops_challenge2_d: |-
          Try this solution:
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_simplified_dropdown">
          <title name="TIMES" config="3-10">4</title>
          <statement name="DO">
          <block type="maze_moveEast">
          <next>
          <block type="collector_collect">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveSouth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="controls_repeat_simplified_dropdown">
          <title name="TIMES" config="3-10">6</title>
          <statement name="DO">
          <block type="collector_collect"/>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      course1_maze_debugging_challenge1_authored_hint:
        courseA_maze_seq_challenge1_a: Algunos caminos te guiarán al TNT, si vas muy lejos.
      course1_maze_debugging_challenge2_authored_hint:
        courseB_maze_seq_challenge2_a: You do not need to add or remove blocks to solve this puzzle.
        courseB_maze_seq_challenge2_b: Rearrange the blocks and take the middle path.
      course1_maze_seq_challenge1_authored_hint:
        courseA_maze_seq_challenge2_a: Try counting the spaces with your finger. Remember not to count the space where you start!
      course1_maze_seq_challenge2_authored_hint:
        courseB_maze_seq_challenge1_a: The shortest path might not work this time.
        courseB_maze_seq_challenge1_b: Intenta moverte al oeste para empezar.
      course1_playlab_events_challenge1_authored_hint:
        courseA_playlab_events_challenge1_a: "Make Waddles the Penguin show when you click Robin!\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">2</title>\n    <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">3</title>\n      </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_b: "Make Boo the Ghost show when you click Waddles!\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">3</title>\n    <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">4</title>\n      </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_c: "Make Jayden the Fuzzy Monster show when you click Boo!\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">4</title>\n    <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">5</title>\n      </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_d: "Make Spiff the Robot show when you click the monster!\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">5</title>\n    <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">6</title>\n      </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_e: "Finally, make Wendel the Wizard show when you click on Spiff!\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">6</title>\n    <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">7</title>\n      </block>\n    </next>\n  </block></xml>"
      course1_playlab_events_challenge2_authored_hint:
        courseA_playlab_events_challenge2_a: "You can make a bird sing.\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">2</title>\n    <next>\n\n          <block type=\"studio_saySprite\">\n            <title name=\"SPRITE\">2</title>\n            <title name=\"TEXT\">Tweet</title>\n          </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge2_b: "You can make a robot beep.\n<xml>\n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">6</title>\n    <next>\n      \n          <block type=\"studio_playSound\">\n            <title name=\"SOUND\">winpoint</title>\n          </block>\n        </next>\n\n  </block></xml>"
        courseA_playlab_events_challenge2_c: |-
          You can make an angry monster growl.
          
          <xml>  <block type="studio_whenSpriteClicked">
          <title name="SPRITE">5</title>
          <next>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">5</title>
          <title name="VALUE">2</title>
          <next>
          <block type="studio_saySprite">
          <title name="SPRITE">5</title>
          <title name="TEXT">Roar!</title>
          <next>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">5</title>
          <title name="VALUE">0</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
      course2_artist_nestedLoops_challenge1_authored_hint:
        courseD_artist_nestedLoops_challenge1_a: Intenta crear un buce anidad para crear 4 octágonos. Gira 45 grados para hacer el octágono. Salta, entonces gira 90 grados luego de cada uno.
        courseD_artist_nestedLoops_challenge1_b: Añade el código para arrastrar un triángulo dentro de tu bucle anidado. Usa giros de 120 grados para tu triángulo.
        courseD_artist_nestedLoops_challenge1_c: |-
          Use a nested loop:
          - Repeat 8 times
          - draw an octagon
          - draw a triangle
          - jump forward 50 pixels
          - turn right by 90 degrees
      course2_artist_nestedLoops_challenge2_authored_hint:
        courseD_artist_nestedLoops_challenge2_a: To draw a regular octagon, the artist needs to turn 45 degrees 8 times.
        courseD_artist_nestedLoops_challenge2_b: To draw a square, the artist needs to turn 90 degrees 4 times.
      course2_artist_prog_challenge1_authored_hint:
        courseC_artist_prog_challenge1_a: 'The rectangle is 200 pixels wide and 100 pixels tall. '
      course2_artist_prog_challenge2_authored_hint:
        courseC_artist_prog_challenge2_a: "You can put commands inside `repeat` block to loop them over and over. Try it!\n<xml>\n  \n          <block type=\"controls_repeat\">\n            <title name=\"TIMES\">6</title>\n            <statement name=\"DO\">\n              <block type=\"draw_move_by_constant_dropdown\">\n                <title name=\"DIR\">moveForward</title>\n                <title name=\"VALUE\" config=\"25,50,100,150,200,300\">25</title>\n                <next>\n                  <block type=\"jump_by_constant_dropdown\">\n                    <title name=\"DIR\">jumpForward</title>\n                    <title name=\"VALUE\" config=\"25,50,100,150,200,300\">25</title>\n                  </block>\n                </next>\n              </block>\n              </statement></block></xml>"
      course2_bee_conditionals_challenge1_authored_hint:
        courseD_bee_conditionals_challenge1_a: |-
          Can you find a path that reaches every flower and honeycomb without hitting any trees? The best path is a spiral.
          
          **You can solve this without ever turning left.**
        courseD_bee_conditionals_challenge1_b: In this puzzle, each space could have a flower, a honey comb, or nothing.  That means you can repeat your `if/else` conditional at each square.
      course2_bee_conditionals_challenge2_authored_hint:
        courseD_bee_conditionals_challenge1_b: |-
          Just like the `if at flower` blocks, the code inside a `while nectar > 0` will only run if the bee is at a flower. The main differences is that the code inside will run repetitively until there is no nectar left.  Try this pattern:
          
          <xml>  <block type="bee_whileNectarAmount">
          <title name="ARG1">nectarRemaining</title>
          <title name="OP">&gt;</title>
          <title name="ARG2">0</title>                    <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          </block></xml>
      course2_collector_loops_challenge2_authored_hint:
        courseC_maze_loops_challenge2_a: The original code would work great - if there was only one piece of treasure in each pile!
        courseC_maze_loops_challenge2_b: Use loops so you don't run out of `collect` blocks!
      course2_collector_prog_challenge1_authored_hint:
        courseC_collector_prog_challenge1_a: You can use the `collect` command more often to collect the extra treasure.
      course2_collector_prog_challenge2_authored_hint:
        courseC_collector_prog_challenge1_a: You can use the `collect` command more often to collect the extra treasure.
      course2_harvester_loops_challenge1_authored_hint:
        courseC_harvester_loops_challenge1_a: '¡Ni siquiera pienses en intentar esto sin bucles!'
        courseC_harvester_loops_challenge1_b: Puedes repetir `mueve hacia adelante` y `elige maíz` todas las veces que necesites hacerlo, luego haz `gira a la derecha` en cada esquina.
        courseC_harvester_loops_challenge1_c: |-
          The best way to collect the first four corn uses a `repeat` block inside of another `repeat` block. You can use this pattern for the rest of the puzzle too!
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="harvester_corn"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </statement>
          </block></next></block></xml>
      course2_harvester_loops_challenge2_authored_hint:
        courseC_harvester_loops_challenge2_a: One way to solve this looks like a zig-zag. Another way looks like a spiral! There are lots of different solutions to a puzzle like this. Be persistent!
        courseC_harvester_loops_challenge2_b: You can repeat `move forward` and `pick lettuce` as many times as you need to, then turn at each corner.
        courseC_harvester_loops_challenge2_c: |
          This zig-zag pattern can be repeated twice to finish the puzzle with just 20 blocks!
          
          ![](https://images.code.org/26cfaf6fe4a275e266b51e9ef3711171-image-1493502306380.18.52 PM copy.png)
        courseC_harvester_loops_challenge2_d: |-
          This spiral pattern can be coded with just 18 blocks!
          
          ![](https://images.code.org/0bfc0a0ed6783fae908368a6e6d12c02-image-1493501358990.18.52 PM.png)
      course2_maze_loops_challenge1_authored_hint:
        courseC_maze_loops_challenge1_a: Think about this path as being three different pieces. Each one has a pattern you can repeat.
        courseC_maze_loops_challenge1_b: In between each `repeat` block, you will need to `turn left` or `turn right` to get ready Scrat for the next pattern.
        courseC_maze_loops_challenge1_c: |-
          Si lo has logrado hasta tan lejos, solo necesitas `girar a la izquierda`, luego `mover hacia adelante` unas pocas veces. ¡No te rindas!
          
          ![](https://images.code.org/7696c5c16b8ddf1d53436cdc7fb6346d-image-1494101728016.14.34 PM.png)
      course2_maze_programming_challenge1_authored_hint: [ ]
      course2_maze_programming_challenge2_authored_hint:
        courseC_maze_programming_challenge2_a: "*¡Si me envías hacia atrás, sé muy cuidadoso de que me dirija al camino correcto!*"
        courseC_maze_programming_challenge2_b: '¡La solución más corta usa solo 5 bloques, pero usa el bloque de `repetir!'
      course2_maze_seq_challenge1_authored_hint:
        courseA_maze_seq_challenge2_a: Try counting the spaces with your finger. Remember not to count the space where you start!
      course2_maze_seq_challenge2_authored_hint:
        courseB_maze_seq_challenge1_a: The shortest path might not work this time.
        courseB_maze_seq_challenge1_b: Intenta moverte al oeste para empezar.
      course3_artist_concept_challenge1_authored_hint:
        courseE_artist_concept_challenge1_a: 'El semi-hexágono tiene una ** longitud de 30 ** y gira a la derecha por ** 60 grados **.  '
        courseE_artist_concept_challenge1_b: 'El triángulo 2/3 tiene una ** longitud de 80 ** y gira a la derecha por ** 120 grados **. '
      course3_artist_functions_challenge1_authored_hint:
        courseE_artist_functions_challenge1_a: If you call the function one more time, you can create the same design in the final corner. You can also `jump to` other positions or change the whole thing around however you want!
      course3_artist_functions_challenge2_authored_hint:
        courseE_artist_functions_challenge1_a: "<xml>\n\n  <block type=\"jump_to_xy\">\n    <title name=\"XPOS\">350</title>\n    <title name=\"YPOS\">200</title>\n  </block>\n  </xml>\n  \nThis `jump to` block lets you move the zombie artist to any pixel on the grid, whenever you want. It works by moving him a number of pixels over to the right and a number of pixels down. This is always counted from the top left corner, which it means it doesn't matter where the zombie artist is *before* the command is run!\n\n![](https://images.code.org/b90fdddc778a27e199221271ce91307a-image-1496450976440.png)"
      course3_bee_debugging_challenge1_authored_hint:
        courseD_bee_debugging_challenge1_a: Why does the first half of this program work? Think about why the bee needs to move backward. How much nectar does the bee collect each time it moves over a flower?
        courseD_bee_debugging_challenge1_b: On the way back, have the bee follow the same pattern. How much honey does the bee need to make each time it moves over a honey comb?
        courseD_bee_debugging_challenge1_c: |-
          After the bee makes it to the bottom row, have it repeat these commands:
          
          * Repeat 2 times:
          * Move forward
          * Make 3 honey
          * Move backward
      course3_bee_functions_challenge1_authored_hint:
        courseE_bee_functions_challenge1_a: "Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco.\nAgregue algunos bloques, luego pruébelo. Agrega más, luego intenta de nuevo. ¡Pronto, llegarás allí!"
        courseE_bee_functions_challenge1_b: Remember to build your code inside of the green function block.
      course3_bee_functions_challenge2_authored_hint:
        courseE_bee_functions_challenge1_a: "Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco.\nAgregue algunos bloques, luego pruébelo. Agrega más, luego intenta de nuevo. ¡Pronto, llegarás allí!"
        courseE_bee_functions_challenge1_b: Remember to build your code inside of the green function block.
      course3_bee_functions_challenge3_authored_hint:
        courseF_bee_functions_challenge1_a: Puedes usar las funciones en la caja de herramientas para ayudarlo. ¡Puedes invocar una función dentro de la definición de otra función!
      course3_bee_functions_challenge4_authored_hint:
        courseF_bee_functions_challenge2_a: |-
          Si hay un camino a la derecha, deberías hacer lo siguiente:
          * Obtén cualquier néctar o haz miel.
          * Gira a la derecha hacia el camino lateral.
          * Muévete hasta final de la ruta lateral.
          * Dobla a la derecha.
          
          Si repites las acciones anteriores dos veces, estarás listo para retroceder por la ruta principal.
          
          ** ¡Solo haz clic para obtener otra sugerencia si deseas ver la solución completa! **
        courseF_bee_functions_challenge2_b: |-
          **Solution:**
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_untilBlocked">
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_if">
          <title name="DIR">isPathRight</title>
          <statement name="DO">
          <block type="procedures_callnoreturn" id="function">
          <mutation name="move and check"/>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          <block type="procedures_defnoreturn" editable="false" usercreated="true">
          <mutation/>
          <title name="NAME">check nectar or honey</title>
          <statement name="STACK">
          <block type="bee_ifElseFlower">
          <title name="LOC">atFlower</title>
          <statement name="DO">
          <block type="bee_whileNectarAmount">
          <title name="ARG1">nectarRemaining</title>
          <title name="OP">&gt;</title>
          <title name="ARG2">0</title>
          <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          </block>
          </statement>
          <statement name="ELSE">
          <block type="bee_whileNectarAmount">
          <title name="ARG1">honeyAvailable</title>
          <title name="OP">&gt;</title>
          <title name="ARG2">0</title>
          <statement name="DO">
          <block type="maze_honey"/>
          </statement>
          </block>
          </statement>
          </block>
          </statement>
          </block>
          <block type="procedures_defnoreturn" deletable="false" movable="false" editable="false">
          <mutation/>
          <title name="NAME">move and check</title>
          <statement name="STACK">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="procedures_callnoreturn">
          <mutation name="check nectar or honey"/>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="maze_untilBlocked">
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </statement>
          </block>
          </xml>
      course3_collector_debugging_challenge2_authored_hint:
        courseD_collector_debugging_challenge2_a: "Start by focusing on collect TWO gems from each of the first two piles.\n\n![](https://images.code.org/8493c16a5b913b91e28b36eb2b280b8c-image-1494775939149.25.04 AM copy.png)\nUse these blocks.\n\n<xml>\n<block type=\"collector_collect\"></block>\n<block type=\"controls_repeat\" limit=\"2\">\n    <title name=\"TIMES\">2</title>\n  </block>\n<block type=\"maze_move\" x=\"175px\" y=\"17px\">\n                    <title name=\"DIR\">moveForward</title>\n\n                  </block>\n                  \n \n   <block type=\"controls_repeat\" limit=\"2\" x=\"175px\" y=\"56px\">\n    <title name=\"TIMES\">2</title>\n  </block>\n\n\n\n</xml>"
        courseD_collector_debugging_challenge2_b: "Next, collect the remaining gems in this row.\n\n![](https://images.code.org/22fff9fb20a50beaf4800aa022a5deb0-image-1494775944657.25.04 AM.png)\nAdd these blocks to your program.\n\n<xml><block type=\"maze_move\">\n                    <title name=\"DIR\">moveBackward</title>\n                  </block>\n<block type=\"controls_repeat\">\n        <title name=\"TIMES\">4</title>\n        <statement name=\"DO\">\n          \n        </statement>\n      </block>\n</xml>"
        courseD_collector_debugging_challenge2_c: "Finally, collect the remaining treasure. Add these blocks to your program.\n\n<xml>\n  <block type=\"maze_turn\">\n                <title name=\"DIR\">turnRight</title>\n              </block>\n      <block type=\"controls_repeat\">\n        <title name=\"TIMES\">4</title>\n        <statement name=\"DO\">\n          \n        </statement>\n      </block>\n\n</xml>"
        courseD_collector_debugging_challenge2_d: |-
          Here is the complete solution for this puzzle.
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat">
          <title name="TIMES">4</title>
          <statement name="DO">
          <block type="controls_repeat">
          <title name="TIMES">4</title>
          <statement name="DO">
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="collector_collect"/>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_move">
          <title name="DIR">moveBackward</title>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </xml>
      course3_farmer_condLoops_challenge1_authored_hint:
        courseD_farmer_condLoops_challenge1_a: El botón de `PASO` puede ser muy útil en este desafío.
        courseD_farmer_condLoops_challenge1_b: Normally you would just `pick pumpkin` if you are at a pumpkin. What else do you need to do if you're at a pumpkin?
      course3_farmer_condLoops_challenge2_authored_hint:
        courseD_farmer_condLoops_challenge2_a: The amount of each vegetable in each space varies. Use `while` loops for these.
      course3_farmer_until_challenge2_authored_hint: [ ]
      course3_maze_debugging_challenge1_authored_hint:
        courseC_maze_debugging_challenge1_a: Left or right? It's up to you!
        courseC_maze_debugging_challenge1_b: Scrat's path is the shape of a rectangle! He needs to turn the same way each time!
        courseC_maze_debugging_challenge1_c: If you are getting stuck, you can always start over, or remove all the code and find your own way!
      course3_maze_debugging_challenge2_authored_hint:
        courseC_maze_debugging_challenge2_a: Una manera de resolver esto es añadir más pasos hacia adelante y entre los turnos.
        courseC_maze_debugging_challenge2_b: '¡Si te estás atorando, siempre puedes empezar de nuevo o remover todos los códigos y encontrar tu solución!'
        courseC_maze_debugging_challenge2_c: |-
          Hay dos caminos que puedes seguir al usar `mover hacia adelante`, y solo en cuatro turnos. ¡Si encuentras una manera de usar el bloque `repetir`, puede que hayan incluso más!
          
          ![](https://images.code.org/8a4665671cda35fea1f629a5bcc39e26-image-1493502743154.48.05 PM.png)
      course3_maze_until_challenge1_authored_hint: [ ]
      course3_playLab_challenge1_authored_hint:
        courseE_playLab_challenge1_a: |-
          Here are some things you could do when the player wins the game:
          
          * Make the dinosaur vanish.
          * Stop the squirrels.
          * Make the squirrels and knight happy.
          * Set a new background.
          * Make the knight thank the player for helping.
          * Make all of the actors vanish and show a "You Win!" message.
        courseE_playLab_challenge1_b: |-
          Here are some things you could do when the player loses the game:
          
          * Make the knight vanish.
          * Make the squirrels sad.
          * Make the dinosaur say something.
          * Set a new background.
          * Make all of the actors vanish and show a "Game Over" message.
      course3_playlab_challenge2_authored_hint:
        courseE_playlab_challenge2_a: |-
          The actor knows what to say based on its mood. Try playing with the things the witch might say.
          
          <xml><block type="studio_saySpriteParamsTime" inline="true">
          <value name="SPRITE">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TEXT">
          <block type="text">
          <title name="TEXT">Concentrate and ask again!</title>
          </block>
          </value>
          <value name="TIME">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          </block></xml>
        courseE_playlab_challenge2_b: "It will feel like the game starts all over if you call the `ask a question` function again below the list of conditionals.\n<xml><block type=\"studio_saySpriteParamsTime\" inline=\"true\">\n               \n<block type=\"procedures_callnoreturn\">\n<mutation name=\"Ask a question\"></mutation>\n        </block></block></xml>"
        courseE_playlab_challenge2_c: "You will need to add more conditional statements to give the actors more things to say.\n\n<xml><block type=\"studio_ifActorHasEmotionParams\" inline=\"true\">\n            <title name=\"EMOTION\">2</title>\n            <value name=\"SPRITE\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">1</title>\n              </block>\n            </value>\n            <statement name=\"DO\">\n              <block type=\"studio_saySpriteParamsTime\" inline=\"true\">\n            <value name=\"SPRITE\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">1</title>\n              </block>\n            </value>\n            <value name=\"TEXT\">\n              <block type=\"text\">\n                <title name=\"TEXT\">???</title>\n              </block>\n            </value>\n            <value name=\"TIME\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">2</title>\n              </block>\n            </value>\n          </block>\n              </statement></block></xml>\n              \nDon't forget to change which moods the actor will show inside of the `repeat forever` loop. You can also set the moods randomly!"
        courseE_playlab_challenge2_d: |-
          Once you understand all of the code that relates to Actor 1, you can try re-writing the same code, but this time for Actor 2.
          
          Don't forget to change the instructions inside the `show title screen` block so they still make sense!
        courseE_playlab_challenge2_e: |-
          When everything is done, you should be able to click on either actor and get up to 8 different messages. Is it possible to expand it even further?
          
          Have a friend try your app when it is finished!
      course4_artist_binary_challenge2_authored_hint:
        courseD_artist_binary_challenge2_a: |-
          The best tip I have for you is to press `⟲ Start Over` if it starts to get really messy.
          
          There are only few lines wrong in the original program. If one approach fails, back up and try again. There is a solution!
      course4_artist_concept_challenge2_authored_hint:
        courseE_artist_concept_challenge2_a: Once you define a function, you can call it over and over again - whenever and wherever you want!
        courseE_artist_concept_challenge2_b: |-
          You can jump to different positions on the canvas using this command:
          <xml>  <block type="jump_to">
          <title name="VALUE">???</title>
          </block></xml>
      course4_artist_functions_challenge2_authored_hint:
        courseE_artist_functions_challenge1_a: "<xml>\n\n  <block type=\"jump_to_xy\">\n    <title name=\"XPOS\">350</title>\n    <title name=\"YPOS\">200</title>\n  </block>\n  </xml>\n  \nThis `jump to` block lets you move the zombie artist to any pixel on the grid, whenever you want. It works by moving him a number of pixels over to the right and a number of pixels down. This is always counted from the top left corner, which it means it doesn't matter where the zombie artist is *before* the command is run!\n\n![](https://images.code.org/b90fdddc778a27e199221271ce91307a-image-1496450976440.png)"
      course4_artist_fwp_challenge1_authored_hint: [ ]
      course4_artist_variables_challenge1_authored_hint:
        courseF_artist_variables_challenge1_a: Each vertical line has a length of `10`. Each horizontal line should have a length of `length`.
        courseF_artist_variables_challenge1_b: You will want to increase the value of `length` by 10 **twice** inside the loop.
        courseF_artist_variables_challenge1_c: Para completar el patrón, deberá girar a la izquierda dos veces, girar a la derecha dos veces y avanzar un total de cuatro veces.
        courseF_artist_variables_challenge1_d: |-
          This puzzle just uses one loop. Without any variables, a similar path might just be a zig-zag.
          
          ![](https://images.code.org/664fdd219502d004fb07886f834fa3d5-image-1496868743379.51.36 PM.png)
          
          If you are having trouble, start by creating this image, then try to see where you can use variables to change the length of the horizontal lines.
        courseF_artist_variables_challenge1_e: |-
          Here is the solution.
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">18</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      course4_artist_variables_challenge2_authored_hint:
        courseF_artist_variables_challenge2_a: 'Las variables son útiles ya que usted puede sumarlas cada vez mediante un lazo. '
        courseF_artist_variables_challenge2_b: Este rompecabezas tiene un lazo que crea un polígono, un lazo que repite el polígono 'lados' veces, luego otro lazo que lo hace todo de nuevo después de sumar 5 a 'lados'.
        courseF_artist_variables_challenge2_c: Usar una variable para 'lados' y una para 'longitud' hace al código más limpio ya que usted puede reutilizar el mismo código múltiples veces, en vez de crear una nueva copia para cada conjunto de números.
        courseF_artist_variables_challenge2_d: |-
          **Solution:**
          
          ![Solution](https://images.code.org/311b4a946cb8f3b4144b5075be6460a3-image-1469641878222.png)
      course4_bee_for_challenge1_authored_hint: [ ]
      course4_bee_fwp_challenge1_authored_hint:
        courseF_bee_fwp_challenge1_a: |-
          The main program should look something like this:
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">6</title>
          </block>
          </value>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
        courseF_bee_fwp_challenge1_b: |-
          Mira cuánto maíz hay disponible para sembrar en cada espacio. ¿Ves el paterno contrario? El parámetro `longitud` debería ser usado para establecer el valor máximo en el `para el bucle`.
          
          ¡No olvides que el grajero se mueva hacia atrás por el camino principal tras sembrar!
        courseF_bee_fwp_challenge1_c: |-
          Place a `for loop` inside a function and set it to count from `1` to `length` by `1`.
          Inside this loop, you should move forward and pick all of the corn.
          
          <xml>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="parameters_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          </statement>
          </block></xml>
        courseF_bee_fwp_challenge1_d: |-
          Inside the `for loop` you will want to `move forward` then `get nectar` **counter times**.
          After the `for loop` you can just `move backward` **length times**.
          
          You may need to read this hint several times to understand it. The part in **bold** is a hint about how to use the two `repeat` loops you will need.
        courseF_bee_fwp_challenge1_e: |
          **Here is the solution:**
          
          <xml>
          <block type="procedures_defnoreturn" editable="false" usercreated="true">
          <mutation>
          <arg name="length"/>
          </mutation>
          <title name="NAME">pick row</title>
          <statement name="STACK">
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="parameters_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="harvester_corn"/>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="parameters_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveBackward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block></xml>
      course4_bee_fwp_challenge2_authored_hint:
        courseF_bee_fwp_challenge2_a: |-
          Comience asegurándose de que entiende cómo funciona esta *supuesta* función. A medida que la agricultora se mueve por cada camino, solo intentará recolectar maíz. En cambio, ¿cómo puedes hacer que revise cada una de las 3 verduras y elegir solo la que encuentra?
          
          Agregue declaraciones condicionales a la función para buscar maíz, calabazas y lechuga.
        courseF_bee_fwp_challenge2_b: "Are you running out of `move forward` blocks?\nTry using a *second* `for loop` in your main program. \n\n**Note:** Be careful not to confuse `counter` with `counter2` in your code."
        courseF_bee_fwp_challenge2_c: |-
          **Here is what your function should look like:**
          
          <xml><block type="procedures_defnoreturn" deletable="false" movable="false" editable="false" usercreated="true">
          <mutation>
          <arg name="length"/>
          </mutation>
          <title name="NAME">pick row</title>
          <statement name="STACK">
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="parameters_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="harvester_ifHasCrop">
          <title name="LOC">Corn</title>
          <statement name="DO">
          <block type="harvester_corn"/>
          </statement>
          <next>
          <block type="harvester_ifHasCrop">
          <title name="LOC">Pumpkin</title>
          <statement name="DO">
          <block type="harvester_pumpkin"/>
          </statement>
          <next>
          <block type="harvester_ifHasCrop">
          <title name="LOC">Lettuce</title>
          <statement name="DO">
          <block type="harvester_lettuce"/>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="parameters_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveBackward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </xml>
        courseF_bee_fwp_challenge2_d: |
          **Here is what your main program should look like:**
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter2</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">6</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="variables_get">
          <title name="VAR">counter2</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block></xml>
      course4_collector_nested_loops_challenge2_authored_hint:
        courseD_bee_nested_loops_challenge2_a: Don't forget that you can `repeat` a single command or a longer pattern. You can even `repeat` a `repeat` block!
        courseD_bee_nested_loops_challenge2_b: To get all 4 gems, first use a loop to move away from the center. Turn left or right, then use a nested loop to move from the first pile of treasure to the second. If you repeat the nested loop enough times, the collector will move around the *entire* cave!
        courseD_bee_nested_loops_challenge2_c: The shortest program that reaches all the treasure uses only one `collect` block and two turns.
        courseD_bee_nested_loops_challenge2_d: |-
          **Solution:**
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      course4_harvester_nested_loops_challenge1_authored_hint:
        courseD_harvester_nested_loops_challenge1_a: You have probably already used a loop to create a zig-zag pattern. If you remember that algorithm, you can make a few additions to it here.
      course4_playlab_variables_challenge1_authored_hint:
        courseF_playlab_variables_challenge1_a: |-
          You will need additional blocks from the tool box to get the actors to talk.
          <xml><block type="studio_saySpriteParamsTime" inline="true">
          <value name="SPRITE">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TEXT">
          <block type="text">
          <title name="TEXT">Knock knock.</title>
          </block>
          </value>
          <value name="TIME">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          </block></xml>
      course4_playlab_variables_challenge3_authored_hint:
        courseF_playlab_variables_challenge3_a: |-
          The actor knows what to say because it checks the current value of the `fortune` variable.
          
          <xml><block type="variables_set" inline="false">
          <title name="VAR">fortune</title>
          <value name="VALUE">
          <block type="text" movable="false">
          <title name="TEXT">Concentrate and ask again!</title>
          </block>
          </value>
          </block></xml>
        courseF_playlab_variables_challenge3_b: |-
          It will feel like the game starts all over if you call the `ask a question` function again after the actor says the fortune.
          <xml><block type="studio_saySpriteParamsTime" inline="true">
          <value name="SPRITE">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TEXT">
          <block type="variables_get">
          <title name="VAR">fortune</title>
          </block>
          </value>
          <value name="TIME">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <next>
          <block type="procedures_callnoreturn">
          <mutation name="Ask a question"/>
          </block></next></block></xml>
        courseF_playlab_variables_challenge3_c: "You will need to add more conditional statements to give the actors more things to say.\n\n<xml><block type=\"studio_ifActorHasEmotionParams\" inline=\"true\">\n            <title name=\"EMOTION\">2</title>\n            <value name=\"SPRITE\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">1</title>\n              </block>\n            </value>\n            <statement name=\"DO\">\n              <block type=\"variables_set\" inline=\"false\">\n                <title name=\"VAR\">fortune</title>\n                <value name=\"VALUE\">\n                  <block type=\"text\" movable=\"false\">\n                    <title name=\"TEXT\">???</title>\n                  </block>\n                </value>\n              </block>\n              </statement></block></xml>\n              \nDon't forget to change which moods the actor will show inside of the `repeat forever` loop. You can also set the moods randomly!"
        courseF_playlab_variables_challenge3_d: |-
          Once you understand all of the code that relates to Actor 1, you can try re-writing the same code, but this time for Actor 2.
          
          Don't forget to change the instructions inside the `Ask a question` function so they still make sense!
        courseF_playlab_variables_challenge3_e: |-
          When everything is done, you should be able to click on either actor and get up to 8 different messages. Is it possible to expand it even further?
          
          Have a friend try your app when it is finished!
      courseA_artist_loops10_authored_hint: [ ]
      courseA_artist_loops10_2018_authored_hint: [ ]
      courseA_artist_loops11_authored_hint: [ ]
      courseA_artist_loops11_2018_authored_hint: [ ]
      courseA_artist_loops11_predict2_authored_hint: [ ]
      courseA_artist_loops12_authored_hint: [ ]
      courseA_artist_loops12_2018_authored_hint: [ ]
      courseA_artist_loops2_authored_hint:
        courseA_artist_loops2_a: Can't figure out how to draw a line?  Start attaching blocks to the <xml><block type="when_run"/></xml> block to see what happens.
        courseA_artist_loops2_b: Use this block <xml><block type="simple_move_right"/></xml> to solve this puzzle.
      courseA_artist_loops2_2018_authored_hint:
        courseA_artist_loops2_a: Can't figure out how to draw a line?  Start attaching blocks to the <xml><block type="when_run"/></xml> block to see what happens.
        courseA_artist_loops2_b: Use this block <xml><block type="simple_move_right"/></xml> to solve this puzzle.
      courseA_artist_loops3_authored_hint:
        courseA_artist_loops3_a: Trace slowly through the program with your finger to see where it goes wrong.
        courseA_artist_loops3_b: |-
          You will want to use a block like this to solve this puzzle.
          
          ![](https://images.code.org/16a3ab2e639eacee18ee5405ed9966dc-image-1498670745551.24.49 AM.png)
      courseA_artist_loops3_2018_authored_hint:
        courseA_artist_loops3_a: Trace slowly through the program with your finger to see where it goes wrong.
        courseA_artist_loops3_b: |-
          You will want to use a block like this to solve this puzzle.
          
          ![](https://images.code.org/16a3ab2e639eacee18ee5405ed9966dc-image-1498670745551.24.49 AM.png)
      courseA_artist_loops4_authored_hint:
        courseA_artist_loops4_a: Si quiere que el lazo se repita más de 4 veces, usted puede cambiar el número en la parte superior del bloque.
        courseA_artist_loops4_b: |-
          Since you can only use one <xml><block type="simple_move_right"/></xml>
          block, try putting it inside of the <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="2-6">5</title></block></xml> loop.
      courseA_artist_loops4_2018_authored_hint:
        courseA_artist_loops4_a: Si quiere que el lazo se repita más de 4 veces, usted puede cambiar el número en la parte superior del bloque.
        courseA_artist_loops4_b: |-
          Since you can only use one <xml><block type="simple_move_right"/></xml>
          block, try putting it inside of the <block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="2-6">5</title></block> loop.
      courseA_artist_loops5_authored_hint:
        courseA_artist_loops5_a: Try using what you've learned about <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml> blocks to complete this puzzle!
        courseA_artist_loops5_b: Si quiere que el lazo se repita más de 4 veces, usted puede cambiar el número en la parte superior del bloque.
        courseA_artist_loops5_c: "Since you can only use one <xml><block type=\"simple_move_right\"/></xml> block, try putting it inside of the \n<xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"3-10\">???</title></block></xml>\nloop."
      courseA_artist_loops5_2018_authored_hint:
        courseA_artist_loops5_a: Try using what you've learned about <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml> blocks to complete this puzzle!
        courseA_artist_loops5_b: Si quiere que el lazo se repita más de 4 veces, usted puede cambiar el número en la parte superior del bloque.
        courseA_artist_loops5_c: "Since you can only use one <xml><block type=\"simple_move_right\"/></xml> block, try putting it inside of the \n<xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"3-10\">???</title></block></xml>\nloop."
      courseA_artist_loops6_authored_hint:
        courseA_artist_loops6_a: Can't figure out how to make the hill?  Try playing with the blocks a bit to see what each one draws.
        courseA_artist_loops6_b: Necesitarás 2 bloques en 2 direcciones para resolver este acertijo.
      courseA_artist_loops6_2018_authored_hint:
        courseA_artist_loops6_a: Can't figure out how to make the hill?  Try playing with the blocks a bit to see what each one draws.
        courseA_artist_loops6_b: Necesitarás 2 bloques en 2 direcciones para resolver este acertijo.
      courseA_artist_loops7_authored_hint:
        courseA_artist_loops7_a: Can't figure out where to put the loop? Try writing the code step-by-step and look for a pattern.
        courseA_artist_loops7_b: Escribe el código ara una ola primero, luego repite eso para dibujar los otros dos.
        courseA_artist_loops7_c: |-
          Remember you can put more than one block in a <xml><block type="controls_repeat">
          <title name="TIMES">???</title>
          </block></xml> loop.
      courseA_artist_loops7_2018_authored_hint:
        courseA_artist_loops7_a: Can't figure out where to put the loop? Try writing the code step-by-step and look for a pattern.
        courseA_artist_loops7_b: Escribe el código ara una ola primero, luego repite eso para dibujar los otros dos.
        courseA_artist_loops7_c: |-
          Remember you can put more than one block in a <xml><block type="controls_repeat">
          <title name="TIMES">???</title>
          </block></xml> loop.
      courseA_artist_loops7_forVideo_authored_hint:
        courseA_artist_loops7_a: Can't figure out where to put the loop? Try writing the code step-by-step and look for a pattern.
        courseA_artist_loops7_b: Escribe el código ara una ola primero, luego repite eso para dibujar los otros dos.
        courseA_artist_loops7_c: |-
          Remember you can put more than one block in a <xml><block type="controls_repeat">
          <title name="TIMES">???</title>
          </block></xml> loop.
      courseA_artist_loops8_authored_hint:
        courseA_artist_loops8_a: Try running the code to see what has been written for you.
        courseA_artist_loops8_b: How would you loop the code that has been given to you?
        courseA_artist_loops8_c: "What does the code do?  \nWhat is it supposed to do?  \nWhat does that tell you?"
      courseA_artist_loops8_2018_authored_hint:
        courseA_artist_loops8_a: Try running the code to see what has been written for you.
        courseA_artist_loops8_b: How would you loop the code that has been given to you?
        courseA_artist_loops8_c: "What does the code do?  \nWhat is it supposed to do?  \nWhat does that tell you?"
      courseA_artist_loops9_authored_hint:
        courseA_artist_loops9_a: Add another block to the code you are given to draw the rest of the stairs.
        courseA_artist_loops9_b: "The block you add should go inside of the \n<xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"3-10\">5</title></block>\n</xml> loop."
        courseA_artist_loops9_c: Si no puedes averiguar en dónde poner el bucle, intenta escribiendo tu código paso por paso y mira los patrones.
      courseA_artist_loops9_2018_authored_hint:
        courseA_artist_loops9_a: Add another block to the code you are given to draw the rest of the stairs.
        courseA_artist_loops9_b: "The block you add should go inside of the \n<xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"3-10\">5</title></block>\n</xml> loop."
        courseA_artist_loops9_c: Si no puedes averiguar en dónde poner el bucle, intenta escribiendo tu código paso por paso y mira los patrones.
      courseA_artist_loops_challenge1_authored_hint: [ ]
      courseA_artist_loops_challenge1_2018_authored_hint: [ ]
      courseA_artist_loops_challenge2_authored_hint:
        courseA_artist_loops_challenge2_a: Blocks like this <xml>  <block type="simple_move_up_left"/></xml> will let your artist move at a slant!
        courseA_artist_loops_challenge2_b: '¡Cuando terminas una casa de ave, `salta` a la siguiente!'
        courseA_artist_loops_challenge2_c: Necesitarás MUCHOS bloques dentro del bucle para este desafío.
      courseA_artist_loops_challenge2a_authored_hint:
        courseA_artist_loops_challenge2_a: Blocks like this <xml>  <block type="simple_move_up_left"/></xml> will let your artist move at a slant!
        courseA_artist_loops_challenge2_b: '¡Cuando termines una tienda, `salta` dos veces hacia arriba para ir a la siguiente!'
        courseA_artist_loops_challenge2_c: Todos tus bloques deberán estar dentro de un bucle para finalizar este acertijo.
      courseA_artist_loops_challenge2a_2018_authored_hint:
        courseA_artist_loops_challenge2_a: Blocks like this <xml>  <block type="simple_move_up_left"/></xml> will let your artist move at a slant!
        courseA_artist_loops_challenge2_b: '¡Cuando termines una tienda, `salta` dos veces hacia arriba para ir a la siguiente!'
        courseA_artist_loops_challenge2_c: Todos tus bloques deberán estar dentro de un bucle para finalizar este acertijo.
      courseA_artist_loops_challenge3_authored_hint:
        harvey_tictactoe: Puedes usar bloques `saltar` para moverte a otros espacios.
      courseA_bee_seq1_authored_hint:
        courseA_bee_seq1_a: |-
          Use this block to get nectar once the bee finds a flower.
          
          <xml>
          <block type="maze_nectar"/>
          </xml>
      courseA_bee_seq10_authored_hint: [ ]
      courseA_bee_seq11_authored_hint: [ ]
      courseA_bee_seq12_authored_hint:
        courseA_bee_seq1_a: |-
          Use this block to get nectar once the bee finds a flower.
          
          <xml>
          <block type="maze_nectar"/>
          </xml>
      courseA_bee_seq13_authored_hint: [ ]
      courseA_bee_seq14_authored_hint: [ ]
      courseA_bee_seq2_authored_hint: [ ]
      courseA_bee_seq3_authored_hint: [ ]
      courseA_bee_seq4_authored_hint: [ ]
      courseA_bee_seq5_authored_hint: [ ]
      courseA_bee_seq6_authored_hint: [ ]
      courseA_bee_seq7_authored_hint: [ ]
      courseA_bee_seq8_authored_hint: [ ]
      courseA_bee_seq9_authored_hint: [ ]
      courseA_collector_loops1_authored_hint:
        courseA_collector_loops1_a: |-
          After you have moved to a square with treasure, use this block to pick it up.
          <xml>  <block type="collector_collect"/></xml>
        courseA_collector_loops1_b: Una solución simple sería moverte al Este 2 veces, luego obtendrás el tesoro.
      courseA_collector_loops10_authored_hint: [ ]
      courseA_collector_loops10_2018_authored_hint: [ ]
      courseA_collector_loops11_authored_hint: [ ]
      courseA_collector_loops11_2018_authored_hint: [ ]
      courseA_collector_loops11_predict2_authored_hint: [ ]
      courseA_collector_loops1_2018_authored_hint:
        courseA_collector_loops1_a: |-
          After you have moved to a square with treasure, use this block to pick it up.
          <xml>  <block type="collector_collect"/></xml>
        courseA_collector_loops1_b: Una solución simple sería moverte al Este 2 veces, luego obtendrás el tesoro.
      courseA_collector_loops2_authored_hint:
        courseA_collector_loops2_a: Tendrás que moverte antes de coleccionar algún tesoro.
        courseA_collector_loops2_b: |-
          After you have moved to a square with treasure, use this block to pick it up.
          <xml>  <block type="collector_collect"/></xml>
      courseA_collector_loops2_2018_authored_hint:
        courseA_collector_loops2_a: Tendrás que moverte antes de coleccionar algún tesoro.
        courseA_collector_loops2_b: |-
          After you have moved to a square with treasure, use this block to pick it up.
          <xml>  <block type="collector_collect"/></xml>
      courseA_collector_loops3_authored_hint:
        courseA_collector_loops3_a: "Try using a \n<xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"3-10\">???</title></block></xml> loop!"
        courseA_collector_loops3_b: Remember, you can put more than 1 block inside a <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml> loop.
      courseA_collector_loops3_2018_authored_hint:
        courseA_collector_loops3_a: "Try using a \n<xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"3-10\">???</title></block></xml> loop!"
        courseA_collector_loops3_b: Remember, you can put more than 1 block inside a <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml> loop.
      courseA_collector_loops3_predict1_authored_hint: [ ]
      courseA_collector_loops4_authored_hint:
        courseA_collector_loops4_a: To change how far Laurel goes, change the number of times that the loop runs.
        courseA_collector_loops4_b: Don't forget that Laurel needs to walk down and collect the treasure after she finishes the <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml> loop!
      courseA_collector_loops4_2018_authored_hint:
        courseA_collector_loops4_a: To change how far Laurel goes, change the number of times that the loop runs.
        courseA_collector_loops4_b: Don't forget that Laurel needs to walk down and collect the treasure after she finishes the <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml> loop!
      courseA_collector_loops5_authored_hint:
        courseA_collector_loops5_a: If you can't figure out the answer right away, try using a piece of paper to figure out what arrows you will need and look for a pattern.
        courseA_collector_loops5_b: Intenta dividir el problema en dos partes, moviéndote hacia los lados y hacia abajo.
        courseA_collector_loops5_c: You'll want to start with a <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml> loop that moves Laurel west and collects treasure.
      courseA_collector_loops5_2018_authored_hint:
        courseA_collector_loops5_a: If you can't figure out the answer right away, try using a piece of paper to figure out what arrows you will need and look for a pattern.
        courseA_collector_loops5_b: Intenta dividir el problema en dos partes, moviéndote hacia los lados y hacia abajo.
        courseA_collector_loops5_c: You'll want to start with a <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml> loop that moves Laurel west and collects treasure.
      courseA_collector_loops6_authored_hint:
        courseA_collector_loops6_a: '¿No puedes averiguar lo que está mal? Intenta ejecutar el código un par de veces para ver lo que sucede.'
        courseA_collector_loops6_b: The shortest solution has 2 <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml> loops, one after the other.
      courseA_collector_loops6_2018_authored_hint:
        courseA_collector_loops6_a: '¿No puedes averiguar lo que está mal? Intenta ejecutar el código un par de veces para ver lo que sucede.'
        courseA_collector_loops6_b: The shortest solution has 2 <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml> loops, one after the other.
      courseA_collector_loops7_authored_hint:
        courseA_collector_loops7_a: Si no puedes averiguar lo que viene luego, intenta ejecutar el código para ver en donde finaliza Laurel.
      courseA_collector_loops7_2018_authored_hint:
        courseA_collector_loops7_a: Si no puedes averiguar lo que viene luego, intenta ejecutar el código para ver en donde finaliza Laurel.
      courseA_collector_loops8_authored_hint:
        courseA_collector_loops8_a: Si estás teniendo problemas para resolver el acertijo, intenta escribir movimientos en una hoja de papel y ver el patrón.
        courseA_collector_loops8_b: Intenta separar el acertijo en 3 problemas separados y escribir los bucles para cada uno.
        courseA_collector_loops8_c: Recuerda que puedes escribir con un pedazo de el código a la vez, luego presiona "Ejecutar" para saber a dónde necesitas ir a partir de aquí.
      courseA_collector_loops8_2018_authored_hint:
        courseA_collector_loops8_a: Si estás teniendo problemas para resolver el acertijo, intenta escribir movimientos en una hoja de papel y ver el patrón.
        courseA_collector_loops8_b: Intenta separar el acertijo en 3 problemas separados y escribir los bucles para cada uno.
        courseA_collector_loops8_c: Recuerda que puedes escribir con un pedazo de el código a la vez, luego presiona "Ejecutar" para saber a dónde necesitas ir a partir de aquí.
      courseA_collector_loops9_authored_hint:
        courseA_collector_loops9_a: 'If you can''t spot the best places to use loops, try coding it out step-by-step and look for a pattern. '
        courseA_collector_loops9_b: Try putting 2 of your <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml> loops inside of another loop to make your code shorter!
      courseA_collector_loops9_2018_authored_hint:
        courseA_collector_loops9_a: 'If you can''t spot the best places to use loops, try coding it out step-by-step and look for a pattern. '
        courseA_collector_loops9_b: Try putting 2 of your <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml> loops inside of another loop to make your code shorter!
      courseA_collector_loops_challenge1_authored_hint:
        courseA_collector_loops_challenge1_a: Intenta cambiar los números en cada bucle si algo parece ir mal.
        courseA_collector_loops_challenge1_b: No necesitas usar un bucle si solo estás haciendo algo una vez.
        courseA_collector_loops_challenge1_c: Hay 6 gemas en el lado derecho de la cueva cuando comienzas, pero solo necesitas moverte 5 veces al sur para obtener el tesoro. ¿Sabes por qué?
        courseA_collector_loops_challenge1_d: |-
          The starting program doesn't collect the last 2 gems. Try adding this code at the very end:
          <xml><block type="maze_moveEast">
          <next>
          <block type="collector_collect_simplified">
          <next>
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
      courseA_collector_loops_challenge1_2018_authored_hint:
        courseA_collector_loops_challenge1_a: Intenta cambiar los números en cada bucle si algo parece ir mal.
        courseA_collector_loops_challenge1_b: No necesitas usar un bucle si solo estás haciendo algo una vez.
        courseA_collector_loops_challenge1_c: Hay 6 gemas en el lado derecho de la cueva cuando comienzas, pero solo necesitas moverte 5 veces al sur para obtener el tesoro. ¿Sabes por qué?
        courseA_collector_loops_challenge1_d: |-
          The starting program doesn't collect the last 2 gems. Try adding this code at the very end:
          <xml><block type="maze_moveEast">
          <next>
          <block type="collector_collect_simplified">
          <next>
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
      courseA_collector_loops_challenge2_authored_hint:
        courseA_collector_loops_challenge2_b: Solo necesitas usar 1 bloque para resolver esto.
        courseA_collector_loops_challenge2_a: Puedes moverte hacia atrás el camino por una segunda vez antes de moverte al sur.
      courseA_collector_loops_challenge2kp_authored_hint:
        courseA_collector_loops_challenge2kp_b: Intenta este camino para buscar una solución.
        courseA_collector_loops_challenge2kp_a: '¿Puedes usar bucles para solucionar el problema?'
      courseA_collector_loops_challenge2kp_2018_authored_hint:
        courseA_collector_loops_challenge2kp_b: Intenta este camino para buscar una solución.
        courseA_collector_loops_challenge2kp_a: '¿Puedes usar bucles para solucionar el problema?'
      courseA_collector_preLoops1_authored_hint: [ ]
      courseA_collector_preLoops2_authored_hint: [ ]
      courseA_collector_preLoops3_authored_hint: [ ]
      courseA_collector_preLoops4_authored_hint:
        courseA_collector_preLoops4_a: "To grab the treasure, snap two ![](https://images.code.org/2df8a25d7e96207f57d1a6b504950b70-image-1508906116743.34.37.png) blocks and one ![](https://images.code.org/563c0deb5c51d43cdfa72d62dec3419d-image-1508904559201.05.30.png) block to the bottom of the program and click \"Run\"!\n\n"
      courseA_collector_preLoops5_authored_hint:
        courseA_collector_preLoops5_a: '¡Necesitarás ir a dos direcciones distintas para obtener una sola gema!'
      courseA_collector_preLoops6_authored_hint:
        courseA_collector_preLoops6_a: You will need to use two ![](https://images.code.org/563c0deb5c51d43cdfa72d62dec3419d-image-1508904559201.05.30.png) blocks to solve this puzzle.
      courseA_collector_preLoops7_authored_hint:
        courseA_collector_loops2_b: |-
          After you have moved to a square with treasure, use this block to pick it up.
          <xml>  <block type="collector_collect"/></xml>
      courseA_forVideoTest_artist_authored_hint: [ ]
      courseA_harvester_forVideo_authored_hint:
        courseA_harvester_loops3_a: |-
          Use a `repeat` block like this to help you!
          <xml><block type="controls_repeat_simplified_dropdown">
          <title name="TIMES" config="2-10">3</title>
          </block></xml>
      courseA_harvester_loops1_authored_hint:
        courseA_harvester_loops1_a: |-
          Once you move to some corn, use this block to pick it!
          <xml><block type="harvester_corn"/></xml>
      courseA_harvester_loops10_authored_hint: [ ]
      courseA_harvester_loops11_authored_hint: [ ]
      courseA_harvester_loops2_authored_hint:
        courseA_harvester_loops2_a: 'Your code will have **four** `move West` blocks and **four** `pick corn` blocks. '
      courseA_harvester_loops3_authored_hint:
        courseA_harvester_loops3_a: |-
          Use a `repeat` block like this to help you!
          <xml><block type="controls_repeat_simplified_dropdown">
          <title name="TIMES" config="2-10">4</title>
          </block></xml>
        courseA_harvester_loops3_b: To repeat code, drag out a `repeat` loop, then put the block you want inside of it.
      courseA_harvester_loops4_authored_hint:
        courseA_harvester_loops4_a: Don't be afraid to press `Run` to see what happens!
        courseA_harvester_loops4_b: How many pieces of corn are there? How many times does your code repeat?
      courseA_harvester_loops5_authored_hint:
        courseA_harvester_loops5_a: If you get stuck, try solving the puzzle in 2 parts, one part before the corner and one part after the corner.
        courseA_harvester_loops5_b: Your final code will have **one** `repeat` loop, **one** `move South` block, and **one** `move East` block.
        courseA_harvester_loops5_c: Use this path to pick all the corn!
      courseA_harvester_loops5a_authored_hint:
        courseA_harvester_loops5a_a: You will need one `repeat` loop after another.
        courseA_harvester_loops5a_b: One loop will repeat `move South`, and the other will repeat `move East`.
        courseA_harvester_loops5a_c: Use this path to move one way, and then the other.
      courseA_harvester_loops5b_authored_hint:
        courseA_harvester_loops5b_a: Press `Run` and see what happens!
        courseA_harvester_loops5b_b: Are your loops repeating the right number of times?
        courseA_harvester_loops5b_c: Move one way, then the other with this path.
      courseA_harvester_loops6_authored_hint:
        courseA_harvester_loops6_a: If you get stuck, try writing the steps on paper and looking for repeating patterns.
        courseA_harvester_loops6_b: This is the path you should take to pick all the corn.
      courseA_harvester_loops7_authored_hint:
        courseA_harvester_loops7_a: You will need two `repeat` loops after each other!
        courseA_harvester_loops7_b: Use two loops to follow this path.
      courseA_harvester_loops8_authored_hint: [ ]
      courseA_harvester_loops9_authored_hint:
        courseA_harvester_loops9_a: Break this puzzle up into three different parts. One part to the first corner, one part to the second corner, and one part to the end.
        courseA_harvester_loops9_b: Don't be afraid to run your code after every part to see what happens!
        courseA_harvester_loops9_c: Follow this path to pick all the corn.
      courseA_harvester_seq1_authored_hint:
        courseA_harvester_seq1_a: |-
          Use this block to pick the corn when the harvester finds it!
          
          <xml>
          <block type="harvester_corn"/>
          </xml>
        courseA_harvester_seq1_b: |-
          The harvester will need to move East three times to get to the corn. Use this block:
          <xml>
          <block type="maze_moveEast"/>
          </xml>
      courseA_harvester_seq10_authored_hint:
        courseA_harvester_seq10_a: Are you stuck? Try writing down the steps on a piece of paper first.
        courseA_harvester_seq10_b: You need to `Move East`, then `Move North`. Do this two times. Don't forget to get all the corn too!
        courseA_harvester_seq10_c: Try using this path to pick all the corn.
      courseA_harvester_seq11_authored_hint: [ ]
      courseA_harvester_seq12_authored_hint: [ ]
      courseA_harvester_seq13_authored_hint:
        courseA_bee_seq1_a: |-
          Use this block to pick corn once the harvester gets to it.
          
          <xml>
          <block type="maze_nectar"/>
          </xml>
      courseA_harvester_seq2_authored_hint:
        courseA_harvester_seq2_a: Don't forget to use <xml><block type="harvester_corn"/></xml> to pick the corn!
        courseA_harvester_seq2_b: Try writing down the steps on paper to find a solution!
      courseA_harvester_seq3_authored_hint:
        courseA_harvester_seq3_a: |-
          Did you remember to use this block?
          <xml><block type="harvester_corn"/></xml>
        courseA_harvester_seq3_b: Say the steps out loud and see if it helps you figure out the answer.
      courseA_harvester_seq4_authored_hint:
        courseA_harvester_seq4_a: How many spaces are between the Harvester and the corn? How many blocks are already in your workspace?
        courseA_harvester_seq4_b: |-
          You will need five `Move East` blocks and one `Pick Corn` block:
          <xml><block type="harvester_corn"/></xml>
      courseA_harvester_seq5_authored_hint:
        courseA_harvester_seq5_a: Which block moves the harvester the wrong way?
        courseA_harvester_seq5_b: You need to remove one block.
        courseA_harvester_seq5_c: |-
          Throw this block in the trash!
          <xml><block type="maze_moveNorth"/></xml>
      courseA_harvester_seq6_authored_hint:
        courseA_harvester_seq6_a: If you're stuck, try saying the steps out loud. It could help you figure out the right path.
      courseA_harvester_seq7_authored_hint:
        courseA_harvester_seq7_a: Try solving the puzzle in 2 parts, one part before the corner and one part after the corner.
        courseA_harvester_seq7_b: Having trouble? This is the path the harvester should take.
      courseA_harvester_seq8_authored_hint: [ ]
      courseA_harvester_seq9_authored_hint:
        courseA_harvester_seq9_a: Run the code a few times to see what happens. Where does the harvester stop?
        courseA_harvester_seq9_b: Don't forget to pick all the corn! You will need **3** pick corn blocks.
        courseA_harvester_seq9_c: You should take this path to pick all the corn.
      courseA_maze_ramp2_2018_authored_hint:
        '1': |-
          Your code should look like this:
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_ramp2a_2018_authored_hint:
        '1': Snap both `East` blocks to the bottom of the `when run` block.
      courseA_maze_ramp3_2018_authored_hint:
        courseC_maze_programming3_a: "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\nTo delete a block from the middle of your code, drag all of the blocks underneath it away to the right and let them sit in the workspace for a while.  \n\nClick on the block you want to delete, and drag it back to the toolbox.\n\nFinally, put your other blocks back in place where they belong.\n"
      courseA_maze_ramp3a_2018_authored_hint:
        '1': |
          Your code should look like this:
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveNorth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_ramp4_2018_authored_hint:
        courseC_maze_programming4_a: You can turn right or left from the bird's point of view. If you are facing right, turning right will make you point downwards.
        courseC_maze_programming4_b: To follow the path, move forward and turn one way, then move again and turn the opposite way. Move forward one more time to reach the pig.
      courseA_maze_ramp4a_2018_authored_hint:
        '1': |-
          Your code should look like this:
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveSouth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_ramp5_2018_authored_hint:
        courseC_maze_programming5_a: Try using the "Step" button to run your code line by line. Can you figure out what you need to do next?
        courseC_maze_programming5_b: Remember that turns are from the bird's perspective.
        courseC_maze_programming5_c: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet.
      courseA_maze_ramp5a_2018_authored_hint:
        '1': |-
          Your code should look like this:
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveWest">
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_seq1_authored_hint:
        courseA_maze_seq1_a: |-
          If you are having trouble getting the bird to move, make sure blocks are snapped in place under <xml>
          <block type="when_run"/>
          </xml>
        courseA_maze_seq1_b: |-
          The bird will need to move West 3 times to get to the pig. Use this block:
          <xml><block type="maze_moveWest"/></xml>
      courseA_maze_seq10_authored_hint:
        courseA_maze_seq10_a: If you're having trouble, try writing down the steps on a piece of paper first.
        courseA_maze_seq10_b: You will need to go 3 directions to solve this puzzle.
      courseA_maze_seq10_2018_authored_hint:
        courseA_maze_seq10_a: If you're having trouble, try writing down the steps on a piece of paper first.
        courseA_maze_seq10_b: You will need to go 3 different directions to solve this puzzle.
      courseA_maze_seq11_authored_hint: [ ]
      courseA_maze_seq11_2018_authored_hint: [ ]
      courseA_maze_seq12_authored_hint: [ ]
      courseA_maze_seq12_2018_authored_hint: [ ]
      courseA_maze_seq12_predict2_authored_hint: [ ]
      courseA_maze_seq13_authored_hint:
        courseA_maze_seq13_a: If the path you need is unclear, use your finger to trace your way from the bird to the pig.
        courseA_maze_seq13_b: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen.
        courseA_maze_seq13_c: |-
          These <xml><block type="maze_moveNorth"/></xml>
          <xml><block type="maze_moveEast"/></xml> blocks will help you move closer to the pig.
      courseA_maze_seq13_2018_authored_hint:
        courseA_maze_seq13_a: If the path you need is unclear, use your finger to trace your way from the bird to the pig.
        courseA_maze_seq13_b: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen.
        courseA_maze_seq13_c: |-
          These <xml><block type="maze_moveNorth"/></xml>
          <xml><block type="maze_moveEast"/></xml> blocks will help you move closer to the pig.
      courseA_maze_seq1_2018_authored_hint:
        courseA_maze_seq1_a: |-
          If you are having trouble getting the bird to move, make sure blocks are snapped in place under <xml>
          <block type="when_run"/>
          </xml>
        courseA_maze_seq1_b: |-
          The bird will need to move West 3 times to get to the pig. Use this block:
          <xml><block type="maze_moveWest"/></xml>
      courseA_maze_seq2_authored_hint:
        courseA_maze_seq2_a: This program is missing 1 block. Can you figure out which one?
        courseA_maze_seq2_b: Intenta ejecutar el código primero para ver en donde termina el ave. ¿A dónde necesitas ir a partir de ahí?
      courseA_maze_seq2_2018_authored_hint:
        courseA_maze_seq2_a: This program is missing 1 block. Can you figure out which one?
        courseA_maze_seq2_b: Intenta ejecutar el código primero para ver en donde termina el ave. ¿A dónde necesitas ir a partir de ahí?
      courseA_maze_seq2_predict1_authored_hint: [ ]
      courseA_maze_seq3_authored_hint:
        courseA_maze_seq3_a: 1 of the blocks is moving the bird in the wrong direction. Can you figure out which one and replace it with the correct block?
        courseA_maze_seq3_b: Intenta usar el botón secundario para encontrar los lugares en donde los programas van mal. ¿Será en el primer lugar? ¿En el segundo?
        courseA_maze_seq3_c: This <xml><block type="maze_moveNorth"/></xml> block doesn't seem to be moving the bird in the right direction. Can you replace it with a different block?
      courseA_maze_seq3_2018_authored_hint:
        courseA_maze_seq3_a: 1 of the blocks is moving the bird in the wrong direction. Can you figure out which one and replace it with the correct block?
        courseA_maze_seq3_b: Intenta usar el botón secundario para encontrar los lugares en donde los programas van mal. ¿Será en el primer lugar? ¿En el segundo?
        courseA_maze_seq3_c: This <xml><block type="maze_moveNorth"/></xml> block doesn't seem to be moving the bird in the right direction. Can you replace it with a different block?
      courseA_maze_seq4_authored_hint:
        courseA_maze_seq4_a: If you are having trouble, try to figure out what the correct path is and then remove the block that doesn't fit.
        courseA_maze_seq4_b: Try running the code as it is. Does something go wrong? Which block can you remove? How can you fix it?
      courseA_maze_seq4_2018_authored_hint:
        courseA_maze_seq4_a: If you are having trouble, try to figure out what the correct path is and then remove the block that doesn't fit.
        courseA_maze_seq4_b: Try running the code as it is. Does something go wrong? Which block can you remove? How can you fix it?
      courseA_maze_seq4a_authored_hint:
        courseA_maze_seq4_a: If you are having trouble, try using your finger to figure out the correct path by pointing it out on the map. What moves did your finger make?
      courseA_maze_seq5_authored_hint:
        courseA_maze_seq5_a: Try writing down the steps on paper to find a solution!
        courseA_maze_seq5_b: You will need 2 blocks, pointing in 2 directions.
      courseA_maze_seq5_2018_authored_hint:
        '1': Try writing down the steps on paper to find a solution!
        '2': |-
          You will need to use this block:
          
          <xml><block type="maze_moveSouth"/></xml>
      courseA_maze_seq5a_2018_authored_hint:
        '1': Say the steps out loud and see if it helps you figure out the answer.
      courseA_maze_seq6_authored_hint:
        courseA_maze_seq6_a: Your final code should have 3 movement blocks.
        courseA_maze_seq6_b: If you get stuck, try solving the puzzle in 2 parts, one part before the corner and one part after the corner.
      courseA_maze_seq6_2018_authored_hint:
        courseA_maze_seq6_a: Your final code should have 3 movement blocks.
        courseA_maze_seq6_b: If you get stuck, try solving the puzzle in 2 parts, one part before the corner and one part after the corner.
      courseA_maze_seq7_authored_hint:
        courseA_maze_seq7_a: There is 1 block that you need to add to move the bird to the pig.
        courseA_maze_seq7_b: If you can't figure out what to do, try drawing the puzzle on paper and use your finger to figure out which way to move.
      courseA_maze_seq7_2018_authored_hint:
        courseA_maze_seq7_a: There is 1 block that you need to add to move the bird to the pig.
        courseA_maze_seq7_b: If you can't figure out what to do, try drawing the puzzle on paper and use your finger to figure out which way to move.
      courseA_maze_seq8_authored_hint:
        courseA_maze_seq8_a: If you're stuck, try drawing the image on paper to see how the bird should move.
      courseA_maze_seq8_2018_authored_hint:
        courseA_maze_seq8_a: If you're stuck, try drawing the image on paper to see how the bird should move.
      courseA_maze_seq9_authored_hint:
        courseA_maze_seq9_a: Stuck? Try tracing the bird's path with your finger.
        courseA_maze_seq9_b: If you're not sure what to do, try pressing "Start over" and running the code to see what goes wrong.
        courseA_maze_seq9_c: You will need to move in 3 directions to solve this puzzle.
      courseA_maze_seq9_2018_authored_hint:
        courseA_maze_seq9_a: Stuck? Try tracing the bird's path with your finger.
        courseA_maze_seq9_b: If you're not sure what to do, try pressing "Start over" and running the code to see what goes wrong.
        courseA_maze_seq9_c: You will need to move in 3 directions to solve this puzzle.
      courseA_maze_seq_challenge1_authored_hint:
        courseA_maze_seq_challenge1_a: There are two solutions to this puzzle.
      courseA_maze_seq_challenge1_2018_authored_hint:
        courseA_maze_seq_challenge1_a: There are two solutions to this puzzle.
      courseA_maze_seq_challenge2_authored_hint:
        courseA_maze_seq_challenge2_a: Try counting the spaces with your finger. Remember not to count the space where you start!
      courseA_maze_seq_challenge2_2018_authored_hint:
        courseA_maze_seq_challenge2_a: Try counting the spaces with your finger. Remember not to count the space where you start!
      courseA_playLab_events2_authored_hint:
        courseA_playLab_events2_a: Look for a block that that makes the dog say something.
        courseA_playLab_events2_b: |-
          This is the code you need to complete this puzzle:
          
          <xml>
          <block type="when_run" movable="false" deletable="false">
          <next>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">1</title>
          <title name="VALUE">Hi there.</title>
          </block>
          </next>
          </block>
          </xml>
      courseA_playLab_events2_2018_authored_hint:
        courseA_playLab_events2_a: Look for a block that that makes the dog say something.
        courseA_playLab_events2_b: |-
          This is the code you need to complete this puzzle:
          
          <xml>
          <block type="when_run" movable="false" deletable="false">
          <next>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">1</title>
          <title name="VALUE">Hi there.</title>
          </block>
          </next>
          </block>
          </xml>
      courseA_playLab_events3_authored_hint:
        courseA_playLab_events3_a: |-
          Drag this block  <xml><block type="studio_move">
          <title name="SPRITE">1</title>
          <title name="DIR">8</title>
          </block></xml> out and snap it to the bottom of <xml><block type="studio_whenArrow">
          <title name="VALUE">left</title>
          </block></xml>
        courseA_playLab_events3_b: Remember to use the left arrow key to move Jorge to the flag once you have written your program. When the flag turns green, you've finished!
      courseA_playLab_events3_2018_authored_hint:
        courseA_playLab_events3_a: |-
          Drag this block  <xml><block type="studio_move">
          <title name="SPRITE">1</title>
          <title name="DIR">8</title>
          </block></xml> out and snap it to the bottom of <xml><block type="studio_whenArrow">
          <title name="VALUE">left</title>
          </block></xml>
        courseA_playLab_events3_b: Remember to use the left arrow key to move Jorge to the flag once you have written your program. When the flag turns green, you've finished!
      courseA_playLab_events4_authored_hint:
        courseA_playLab_events4_a: |-
          Here is the event block that you will need to get Jorge to move right:
          
          <xml><block type="studio_move">
          <title name="SPRITE">1</title>
          <title name="DIR">2</title>
          </block></xml>
        courseA_playLab_events4_b: |-
          This is the code you will need to complete this puzzle:
          
          <xml><block type="studio_whenArrow">
          <title name="VALUE">right</title>
          <next>
          <block type="studio_move">
          <title name="SPRITE">1</title>
          <title name="DIR">2</title>
          </block></next></block></xml>
      courseA_playLab_events4_2018_authored_hint:
        courseA_playLab_events4_a: |-
          Here is the event block that you will need to get Jorge to move right:
          
          <xml><block type="studio_move">
          <title name="SPRITE">1</title>
          <title name="DIR">2</title>
          </block></xml>
        courseA_playLab_events4_b: |-
          This is the code you will need to complete this puzzle:
          
          <xml><block type="studio_whenArrow">
          <title name="VALUE">right</title>
          <next>
          <block type="studio_move">
          <title name="SPRITE">1</title>
          <title name="DIR">2</title>
          </block></next></block></xml>
      courseA_playLab_events5_authored_hint:
        courseA_playLab_events5_a: "Here are the event blocks that you will need to use to move Jorge up and down:\n\n<xml><block type=\"studio_whenArrow\">\n    <title name=\"VALUE\">up</title>\n  </block></xml>\nand \n<xml><block type=\"studio_whenArrow\">\n    <title name=\"VALUE\">down</title>\n  </block></xml>"
        courseA_playLab_events5_b: |-
          Did you know that you can change the key for  the event arrow by clicking on the picture in the block and choosing a new key?
          
          ![](https://images.code.org/b010b6a8131689af53b33148753c15b4-image-1492639642316.gif)
      courseA_playLab_events5_2018_authored_hint:
        courseA_playLab_events5_a: "Here are the event blocks that you will need to use to move Jorge up and down:\n\n<xml><block type=\"studio_whenArrow\">\n    <title name=\"VALUE\">up</title>\n  </block></xml>\nand \n<xml><block type=\"studio_whenArrow\">\n    <title name=\"VALUE\">down</title>\n  </block></xml>"
        courseA_playLab_events5_b: |-
          Did you know that you can change the key for  the event arrow by clicking on the picture in the block and choosing a new key?
          
          ![](https://images.code.org/b010b6a8131689af53b33148753c15b4-image-1492639642316.gif)
      courseA_playLab_events6_authored_hint:
        courseA_playLab_events6_a: |-
          Here is the event block that you would use to have Jorge do something when clicked:
          
          <xml><block type="studio_whenSpriteClicked">
          <title name="SPRITE">1</title>
          </block></xml>
        courseA_playLab_events6_b: |-
          Here is the block you would use to change the background:
          
          <xml><block type="studio_setBackground">
          <title name="VALUE">random</title>
          </block></xml>
        courseA_playLab_events6_c: |-
          Here is the block you would use to play a random sound:
          
          <xml><block type="studio_playSound">
          <title name="SOUND">random</title>
          </block></xml>
      courseA_playLab_events6_2018_authored_hint:
        courseA_playLab_events6_a: |-
          Here is the event block that you would use to have Jorge do something when clicked:
          
          <xml><block type="studio_whenSpriteClicked">
          <title name="SPRITE">1</title>
          </block></xml>
        courseA_playLab_events6_b: |-
          Here is the block you would use to change the background:
          
          <xml><block type="studio_setBackground">
          <title name="VALUE">random</title>
          </block></xml>
        courseA_playLab_events6_c: |-
          Here is the block you would use to play a random sound:
          
          <xml><block type="studio_playSound">
          <title name="SOUND">random</title>
          </block></xml>
      courseA_playLab_events7_authored_hint:
        courseA_playLab_events7_a: |-
          Use this block to control what happens when the actors collide.
          
          <xml><block type="studio_whenSpriteCollided">
          <title name="SPRITE1">1</title>
          <title name="SPRITE2">0</title>
          </block></xml>
      courseA_playLab_events7_2018_authored_hint:
        courseA_playLab_events7_a: |-
          Use this block to control what happens when the actors collide.
          
          <xml><block type="studio_whenSpriteCollided">
          <title name="SPRITE1">1</title>
          <title name="SPRITE2">0</title>
          </block></xml>
      courseA_playlab_challengeTemplate_authored_hint: [ ]
      courseA_playlab_events_challenge1_authored_hint:
        courseA_playlab_events_challenge1_a: "Make Waddles the Penguin show when you click Robin!\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">2</title>\n    <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">3</title>\n      </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_b: "Make Boo the Ghost show when you click Waddles!\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">3</title>\n    <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">4</title>\n      </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_c: "Make Jayden the Fuzzy Monster show when you click Boo!\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">4</title>\n    <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">5</title>\n      </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_d: "Make Spiff the Robot show when you click the monster!\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">5</title>\n    <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">6</title>\n      </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_e: "Finally, make Wendel the Wizard show when you click Spiff!\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">6</title>\n    <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">7</title>\n      </block>\n    </next>\n  </block></xml>"
      courseA_playlab_events_challenge1_2018_authored_hint:
        courseA_playlab_events_challenge1_a: "Make Waddles the Penguin show when you click Robin!\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">2</title>\n    <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">3</title>\n      </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_b: "Make Boo the Ghost show when you click Waddles!\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">3</title>\n    <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">4</title>\n      </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_c: "Make Jayden the Fuzzy Monster show when you click Boo!\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">4</title>\n    <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">5</title>\n      </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_d: "Make Spiff the Robot show when you click the monster!\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">5</title>\n    <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">6</title>\n      </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_e: "Finally, make Wendel the Wizard show when you click Spiff!\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">6</title>\n    <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">7</title>\n      </block>\n    </next>\n  </block></xml>"
      courseA_playlab_events_challenge1a_authored_hint:
        courseA_playlab_events_challenge1_a: "You can make a bird sing.\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">2</title>\n    <next>\n\n          <block type=\"studio_saySprite\">\n            <title name=\"SPRITE\">2</title>\n            <title name=\"TEXT\">Tweet</title>\n          </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_b: "You can make a robot beep.\n<xml>\n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">6</title>\n    <next>\n      \n          <block type=\"studio_playSound\">\n            <title name=\"SOUND\">winpoint</title>\n          </block>\n        </next>\n\n  </block></xml>"
        courseA_playlab_events_challenge1_c: |-
          You can make an angry monster growl.
          
          <xml>  <block type="studio_whenSpriteClicked">
          <title name="SPRITE">5</title>
          <next>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">5</title>
          <title name="VALUE">2</title>
          <next>
          <block type="studio_saySprite">
          <title name="SPRITE">5</title>
          <title name="TEXT">Roar!</title>
          <next>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">5</title>
          <title name="VALUE">0</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
      courseA_playlab_events_challenge2_authored_hint:
        courseA_playlab_events_challenge2_a: "You can make a bird sing.\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">2</title>\n    <next>\n\n          <block type=\"studio_saySprite\">\n            <title name=\"SPRITE\">2</title>\n            <title name=\"TEXT\">Tweet</title>\n          </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge2_b: "You can make a robot beep.\n<xml>\n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">6</title>\n    <next>\n      \n          <block type=\"studio_playSound\">\n            <title name=\"SOUND\">winpoint</title>\n          </block>\n        </next>\n\n  </block></xml>"
        courseA_playlab_events_challenge2_c: |-
          You can make an angry monster growl.
          
          <xml>  <block type="studio_whenSpriteClicked">
          <title name="SPRITE">5</title>
          <next>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">5</title>
          <title name="VALUE">2</title>
          <next>
          <block type="studio_saySprite">
          <title name="SPRITE">5</title>
          <title name="TEXT">Roar!</title>
          <next>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">5</title>
          <title name="VALUE">0</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
      courseA_playlab_events_challenge2_2018_authored_hint:
        courseA_playlab_events_challenge2_a: "You can make a bird sing.\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">2</title>\n    <next>\n\n          <block type=\"studio_saySprite\">\n            <title name=\"SPRITE\">2</title>\n            <title name=\"TEXT\">Tweet</title>\n          </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge2_b: "You can make a robot beep.\n<xml>\n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">6</title>\n    <next>\n      \n          <block type=\"studio_playSound\">\n            <title name=\"SOUND\">winpoint</title>\n          </block>\n        </next>\n\n  </block></xml>"
        courseA_playlab_events_challenge2_c: |-
          You can make an angry monster growl.
          
          <xml>  <block type="studio_whenSpriteClicked">
          <title name="SPRITE">5</title>
          <next>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">5</title>
          <title name="VALUE">2</title>
          <next>
          <block type="studio_saySprite">
          <title name="SPRITE">5</title>
          <title name="TEXT">Roar!</title>
          <next>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">5</title>
          <title name="VALUE">0</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
      courseA_playlab_events_challengeClone_authored_hint:
        courseA_playlab_events_challenge1_a: "Make Waddles the Penguin show when you click Robin!\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">2</title>\n    <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">3</title>\n      </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_b: "Make Boo the Ghost show when you click Waddles!\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">3</title>\n    <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">4</title>\n      </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_c: "Make Jayden the Fuzzy Monster show when you click Boo!\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">4</title>\n    <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">5</title>\n      </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_d: "Make Spiff the Robot show when you click the monster!\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">5</title>\n    <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">6</title>\n      </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_e: "Finally, make Wendel the Wizard show when you click on Spiff!\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">6</title>\n    <next>\n      <block type=\"studio_setSprite\">\n        <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">7</title>\n      </block>\n    </next>\n  </block></xml>"
      courseA_toMakeLoopsVideo_Collector_authored_hint: [ ]
      courseB_Scrat_ramp1_2018_authored_hint:
        '1': If Scrat isn't doing what you want, make sure both of the blocks have been fully clicked together, then click "Run" again.
        '2': Don't be afraid to make a mistake! Try something, and if it doesn't work, try something else!
      courseB_Scrat_ramp2_2018_authored_hint:
        '1': |-
          Your code should look like this:
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_Scrat_ramp3a_2018_authored_hint:
        '1': |
          Your code should look like this:
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveNorth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_Scrat_ramp4a_2018_authored_hint:
        '1': |-
          Your code should look like this:
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveSouth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_Scrat_ramp5a_2018_authored_hint:
        '1': |-
          Your code should look like this:
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveWest">
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_artist_loops10_authored_hint: [ ]
      courseB_artist_loops10_2018_authored_hint: [ ]
      courseB_artist_loops2_authored_hint:
        courseB_artist_loops2_a: Si quiere que el lazo se repita más de 4 veces, usted puede cambiar el número en la parte superior del bloque.
        courseB_artist_loops2_b: Try running the code first to see where the artist ends up.
      courseB_artist_loops2_2018_authored_hint:
        courseB_artist_loops2_a: Si quiere que el lazo se repita más de 4 veces, usted puede cambiar el número en la parte superior del bloque.
        courseB_artist_loops2_b: Try running the code first to see where the artist ends up.
      courseB_artist_loops3_authored_hint:
        courseB_artist_loops3_a: Remember to use a `repeat` loop for better code!
        courseB_artist_loops3_b: The artist will want to move South to draw this line.
      courseB_artist_loops3_2018_authored_hint:
        courseB_artist_loops3_a: Remember to use a `repeat` loop for better code!
        courseB_artist_loops3_b: The artist will want to move South to draw this line.
      courseB_artist_loops4_authored_hint:
        courseB_artist_loops4_a: The jump block lets you move forward without drawing a line.
        courseB_artist_loops4_b: You will need to add a block inside of the repeat loop to solve this puzzle.
        courseB_artist_loops4_c: No olvides cambiar el número de veces que el bucle se repite.
      courseB_artist_loops4_2018_authored_hint:
        courseB_artist_loops4_a: The jump block lets you move forward without drawing a line.
        courseB_artist_loops4_b: You will need to add a block inside of the repeat loop to solve this puzzle.
        courseB_artist_loops4_c: No olvides cambiar el número de veces que el bucle se repite.
      courseB_artist_loops5_authored_hint:
        courseB_artist_loops5_a: Drag out a `repeat` loop, then put the other blocks inside of it. How many times do you need to repeat?
      courseB_artist_loops5_2018_authored_hint:
        courseB_artist_loops5_a: Drag out a `repeat` loop, then put the other blocks inside of it. How many times do you need to repeat?
      courseB_artist_loops6_authored_hint:
        courseB_artist_loops6_b: Intenta escribir tus movimientos en un pedazo de papel y buscar un patrón.
      courseB_artist_loops6_2018_authored_hint:
        courseB_artist_loops6_b: Intenta escribir tus movimientos en un pedazo de papel y buscar un patrón.
      courseB_artist_loops7_authored_hint:
        courseB_artist_loops7_a: This challenge uses **4** loops, one right after another!
        courseB_artist_loops7_b: |-
          Notice that every loop makes a stair pattern that goes a different direction.
          
          ![](https://images.code.org/7d08d5514766c5c15074e90731991505-image-1466705649513.gif)
        courseB_artist_loops7_c: "The loops should do this:\n- Loop 1\n  - Right\n  - Down\n  \n- Loop 2\n  - Right\n  - Up\n\n- Loop 3\n  - Left\n  - Up\n\n- Loop 4\n  - Left\n  - Down"
      courseB_artist_loops7_2018_authored_hint:
        courseB_artist_loops7_a: This challenge uses **4** loops, one right after another!
        courseB_artist_loops7_b: |-
          Notice that every loop makes a stair pattern that goes a different direction.
          
          ![](https://images.code.org/7d08d5514766c5c15074e90731991505-image-1466705649513.gif)
        courseB_artist_loops7_c: "The loops should do this:\n- Loop 1\n  - Right\n  - Down\n  \n- Loop 2\n  - Right\n  - Up\n\n- Loop 3\n  - Left\n  - Up\n\n- Loop 4\n  - Left\n  - Down"
      courseB_artist_loops8_authored_hint:
        courseB_artist_loops8_a: How many times should you repeat the pattern to make the ladder?
        courseB_artist_loops8_b: Intenta ejecutar el código que se te ha dado para ver lo que hace.
      courseB_artist_loops8_2018_authored_hint:
        courseB_artist_loops8_a: How many times should you repeat the pattern to make the ladder?
        courseB_artist_loops8_b: Intenta ejecutar el código que se te ha dado para ver lo que hace.
      courseB_artist_loops8_predict1_authored_hint: [ ]
      courseB_artist_loops9_authored_hint:
        courseB_artist_loops9_a: Remember that jump blocks can be used to move without drawing a line.
        courseB_artist_loops9_b: You will want to use the W block to solve this puzzle.
        courseB_artist_loops9_c: Can't figure out where to put the loop? Try writing the code step-by-step and look for a pattern.
      courseB_artist_loops9_2018_authored_hint:
        courseB_artist_loops9_a: Remember that jump blocks can be used to move without drawing a line.
        courseB_artist_loops9_b: You will want to use the W block to solve this puzzle.
        courseB_artist_loops9_c: Can't figure out where to put the loop? Try writing the code step-by-step and look for a pattern.
      courseB_artist_loops_challenge1_authored_hint:
        courseB_artist_loops_challenge1_a: 'Blocks like this: <xml>  <block type="simple_move_up_right"/></xml> will let your artist move at a slant!'
        courseB_artist_loops_challenge1_b: When you finish one of the dice, `jump` to the next!
        courseB_artist_loops_challenge1_c: 'You will need to `move` or `jump` over some of the same lines twice. '
      courseB_artist_loops_challenge1_2018_authored_hint:
        courseB_artist_loops_challenge1_a: 'Blocks like this: <xml>  <block type="simple_move_up_right"/></xml> will let your artist move at a slant!'
        courseB_artist_loops_challenge1_b: When you finish one of the dice, `jump` to the next!
        courseB_artist_loops_challenge1_c: 'You will need to `move` or `jump` over some of the same lines twice. '
      courseB_artist_loops_challenge2_authored_hint:
        courseB_artist_loops_challenge2_a: The code to draw an X is already given to you. All you need to do is repeat the X and `jump` to the next spot.
        courseB_artist_loops_challenge2_b: Puedes usar bloques `saltar` para moverte a otros espacios.
      courseB_artist_loops_challenge2_2018_authored_hint:
        courseB_artist_loops_challenge2_a: The code to draw an X is already given to you. All you need to do is repeat the X and `jump` to the next spot.
        courseB_artist_loops_challenge2_b: Puedes usar bloques `saltar` para moverte a otros espacios.
      courseB_collector_loops1_authored_hint:
        courseB_collector_loops1_a: The <xml><block type="collector_collect_simplified"/></xml> block can be used to pick up treasure when you are standing on top of it.
      courseB_collector_loops10_authored_hint:
        courseB_collector_loops10_a: If you can't figure out where to put the `repeat` loops, write out the code step-by-step and look for a pattern.
        courseB_collector_loops10_b: Try writing the moves down on a piece of paper and looking for a pattern.
      courseB_collector_loops10_2018_authored_hint:
        courseB_collector_loops10_a: If you can't figure out where to put the `repeat` loops, write out the code step-by-step and look for a pattern.
        courseB_collector_loops10_b: Try writing the moves down on a piece of paper and looking for a pattern.
      courseB_collector_loops1_2018_authored_hint:
        courseB_collector_loops1_a: The <xml><block type="collector_collect_simplified"/></xml> block can be used to pick up treasure when you are standing on top of it.
      courseB_collector_loops2_authored_hint:
        courseB_collector_loops2_a: Tendrás que moverte antes de coleccionar algún tesoro.
        courseB_collector_loops2_b: When you have reached a spot with treasure, use the <xml><block type="collector_collect"/></xml> block to pick it up.
      courseB_collector_loops2_2018_authored_hint:
        courseB_collector_loops2_a: Tendrás que moverte antes de coleccionar algún tesoro.
        courseB_collector_loops2_b: When you have reached a spot with treasure, use the <xml><block type="collector_collect"/></xml> block to pick it up.
      courseB_collector_loops3_authored_hint:
        courseB_collector_prog3_a: Try using a <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">5</title></block></xml> block to collect your treasure.
        courseB_collector_prog3_b: Remember you can put more than one block inside a repeat loop.
      courseB_collector_loops3_2018_authored_hint:
        courseB_collector_prog3_a: Try using a <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">5</title></block></xml> block to collect your treasure.
        courseB_collector_prog3_b: Remember you can put more than one block inside a repeat loop.
      courseB_collector_loops3_predict1_authored_hint:
        courseB_collector_prog3_a: Try using a `repeat` block to collect your gold.
      courseB_collector_loops4_authored_hint:
        courseB_collector_loops4_a: Try using the step button to figure out where things go wrong.
        courseB_collector_loops4_b: To change how far Laurel goes, change the number of times that the loop runs.
        courseB_collector_loops4_c: Laurel needs to walk down and collect the treasure after she finishes the `repeat` loop!
      courseB_collector_loops4_2018_authored_hint:
        courseB_collector_loops4_a: Try using the step button to figure out where things go wrong.
        courseB_collector_loops4_b: To change how far Laurel goes, change the number of times that the loop runs.
        courseB_collector_loops4_c: Laurel needs to walk down and collect the treasure after she finishes the `repeat` loop!
      courseB_collector_loops5_authored_hint:
        courseB_collector_loops5_a: Use more than one loop to get the job done.
        courseB_collector_loops5_b: Try running the code a couple of times to see what happens.
      courseB_collector_loops5_2018_authored_hint:
        courseB_collector_loops5_a: Use more than one loop to get the job done.
        courseB_collector_loops5_b: Try running the code a couple of times to see what happens.
      courseB_collector_loops6_authored_hint:
        courseB_collector_loops6_a: Can't figure out where things start going wrong? Use the "Step" button to run through your program one block at a time.
        courseB_collector_loops6_b: You can change the number of times the repeat loop runs by clicking on the "3" and choosing a different number.
        courseB_collector_loops6_c: You will want to use 3 `repeat` loops to solve this puzzle.
        courseB_collector_loops6_d: If you're confused, try breaking this puzzle into 3 pieces.
      courseB_collector_loops6_2018_authored_hint:
        courseB_collector_loops6_a: Can't figure out where things start going wrong? Use the "Step" button to run through your program one block at a time.
        courseB_collector_loops6_b: You can change the number of times the repeat loop runs by clicking on the "3" and choosing a different number.
        courseB_collector_loops6_c: You will want to use 3 `repeat` loops to solve this puzzle.
        courseB_collector_loops6_d: If you're confused, try breaking this puzzle into 3 pieces.
      courseB_collector_loops7_authored_hint:
        courseB_collector_loops7_a: If you are having a hard time with the puzzle, try drawing it on paper to help you figure it out.
        courseB_collector_loops7_b: You will need 3 repeat loops to solve this puzzle, and don't forget the extra treasure at the end!
      courseB_collector_loops7_2018_authored_hint:
        courseB_collector_loops7_a: If you are having a hard time with the puzzle, try drawing it on paper to help you figure it out.
        courseB_collector_loops7_b: You will need 3 repeat loops to solve this puzzle, and don't forget the extra treasure at the end!
      courseB_collector_loops8_authored_hint:
        courseB_collector_loops8_challenge_a: If you can't figure out where to put the repeat loops, write out the code step-by-step and look for a pattern.
      courseB_collector_loops8_2018_authored_hint:
        courseB_collector_loops8_challenge_a: If you can't figure out where to put the repeat loops, write out the code step-by-step and look for a pattern.
      courseB_collector_loops9_authored_hint:
        courseB_collector_loops9_a: 'Does this seem too hard?  Break it up into 3 little problems to make it feel easier.  '
        courseB_collector_loops9_b: You will need 3 repeat loops, one after the other, for this solution.
      courseB_collector_loops9_2018_authored_hint:
        courseB_collector_loops9_a: 'Does this seem too hard?  Break it up into 3 little problems to make it feel easier.  '
        courseB_collector_loops9_b: You will need 3 repeat loops, one after the other, for this solution.
      courseB_collector_loops_challenge1_authored_hint:
        courseB_collector_loops_challenge1_b: |
          Start by looping the following commands:
          
          <xml>
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"></block>
          </next>
          </block>
          </xml>
        courseB_collector_loops_challenge1_c: "Move East twice between each path.\n<xml>\n  <block type=\"maze_moveEast\"><next>\n  <block type=\"maze_moveEast\"></block></next></block>\n  </xml>\nYou can do this with only 14 blocks. Click for one more hint to see a solution. \n"
        courseB_collector_loops_challenge1_d: |-
          Try this!
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="maze_moveNorth"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_collector_loops_challenge1_2018_authored_hint:
        courseB_collector_loops_challenge1_b: |
          Start by looping the following commands:
          
          <xml>
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"></block>
          </next>
          </block>
          </xml>
        courseB_collector_loops_challenge1_c: "Move East twice between each path.\n<xml>\n  <block type=\"maze_moveEast\"><next>\n  <block type=\"maze_moveEast\"></block></next></block>\n  </xml>\nYou can do this with only 14 blocks. Click for one more hint to see a solution. \n"
        courseB_collector_loops_challenge1_d: |-
          Try this!
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="maze_moveNorth"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_collector_loops_challenge2_authored_hint:
        courseB_collector_loops_challenge2_a: If something goes wrong, don't be afraid to start over. Don't give up!
        courseB_collector_loops_challenge2_b: |-
          If you repeat this pattern, Laurel won't hit the wall at the bottom of the cave!
          
          <xml><block type="maze_moveEast">
          <next>
          <block type="collector_collect">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveSouth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
        courseB_collector_loops_challenge2_c: Try using a `repeat` block to collect the final pile of treasure!
        courseB_collector_loops_challenge2_d: |-
          Try this solution:
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_simplified_dropdown">
          <title name="TIMES" config="3-10">4</title>
          <statement name="DO">
          <block type="maze_moveEast">
          <next>
          <block type="collector_collect">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveSouth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="controls_repeat_simplified_dropdown">
          <title name="TIMES" config="3-10">6</title>
          <statement name="DO">
          <block type="collector_collect"/>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_collector_loops_challenge2a_authored_hint:
        courseB_collector_loops_challenge2a_a: If something goes wrong, try debugging it. Don't give up!
        courseB_collector_loops_challenge2a_b: Look at this option for getting through the maze. Do you see a pattern that you can repeat?
        courseB_collector_loops_challenge2a_c: To collect all of the treasure, you will either need to add two  <xml> <block type="collector_collect"/></xml> blocks inside your loop, or put the block inside of its own `repeat` block.
      courseB_collector_loops_challenge2a_2018_authored_hint:
        courseB_collector_loops_challenge2a_a: If something goes wrong, try debugging it. Don't give up!
        courseB_collector_loops_challenge2a_b: Look at this option for getting through the maze. Do you see a pattern that you can repeat?
        courseB_collector_loops_challenge2a_c: To collect all of the treasure, you will either need to add two  <xml> <block type="collector_collect"/></xml> blocks inside your loop, or put the block inside of its own `repeat` block.
      courseB_collector_loops_challenge`_authored_hint:
        courseA_collector_loops_challenge2_b: "You only need to use one ![](https://images.code.org/803e9ee8b5bc9311a26edf955cd3c03f-image-1491001702274.07.34 PM.png) block to solve this.\n\n"
        courseA_collector_loops_challenge2_a: |-
          You can move back over the path a second time before moving south.
          
          ![](https://images.code.org/88c28c76dbea70e20253083d22b5f5fd-image-1491001404225.01.21 PM.png)
      courseB_collector_prog3_authored_hint:
        courseB_collector_prog3_a: Try using a `repeat` block to collect your gold.
      courseB_iceage_loops1_authored_hint:
        courseB_iceage_loops1_a: Watch out for broken ice! Scrat will fall right through!
        courseB_iceage_loops1_b: |-
          You will have to use this block:
          <xml><block type="maze_moveEast"/></xml>
      courseB_iceage_loops10_authored_hint:
        courseB_iceage_loops10_a: Watch out for broken ice! Scrat will fall into the water!
        courseB_iceage_loops10_b: Try saying the steps out loud or writing them down on a piece of paper. Do you see any patterns?
        courseB_iceage_loops10_c: This is a long puzzle! Follow this path.
      courseB_iceage_loops2_authored_hint:
        courseB_iceage_loops2_a: Break this puzzle into two pieces, one before the corner, and one after the corner.
        courseB_iceage_loops2_b: If you get stuck, try saying the steps out loud.
        courseB_iceage_loops2_c: Follow this path to get Scrat to the acorn.
      courseB_iceage_loops3_authored_hint:
        courseB_iceage_loops3_a: |-
          Use this new block!
          <xml><block type="controls_repeat_simplified_dropdown">
          <title name="TIMES" config="3-10">5</title>
          </block></xml>
        courseB_iceage_loops3_b: To repeat code, drag out a `repeat` loop, then put the block you want inside of it.
      courseB_iceage_loops4_authored_hint:
        courseB_iceage_loops4_a: Try writing down the steps Scrat would take to get to the acorn. Do you see a pattern?
        courseB_iceage_loops4_b: Don't be afraid to run your code and see what happens!
        courseB_iceage_loops4_c: This is the path Scrat should take.
      courseB_iceage_loops6_authored_hint:
        courseB_iceage_loops6_a: Your final code will have **three** movement blocks.
        courseB_iceage_loops6_b: You only need to add **one** more loop!
        courseB_iceage_loops6_c: Your final path should look like this.
      courseB_iceage_loops7_authored_hint:
        courseB_iceage_loops7_a: If you get stuck, try writing steps down on a piece of paper. Do you see a pattern?
        courseB_iceage_loops7_b: This is the path Scrat should take to get to the acorn.
      courseB_iceage_loops8_authored_hint:
        courseB_iceage_loops8_a: Are the movement blocks right? What else can you change?
        courseB_iceage_loops8_b: The first loop should repeat **3** times, the second should repeat **5** times, the third loop should repeat **4** times, and the last loop should repeat **4** times.
        courseB_iceage_loops8_c: Use loops to help Scrat follow this path.
      courseB_iceage_loops9_authored_hint:
        courseB_iceage_loops9_a: Having trouble? Try breaking this puzzle into smaller pieces. Don't be afraid to run your puzzle as you code!
        courseB_iceage_loops9_b: Your final code should have **4** loops.
        courseB_iceage_loops9_c: Scrat should follow this path to get the acorn.
      courseB_maze_seq1_authored_hint:
        courseB_maze_seq1_a: Connect blocks to the <xml><block type="when_run"/></xml> block to make the bird move!
        courseB_maze_seq1_b: Drag three of these <xml><block type="maze_moveSouth"/></xml> arrows out and connect them to the <xml><block type="when_run"/></xml> block to get your bird to the pig.
      courseB_maze_seq10_authored_hint:
        courseB_maze_seq10_a: Try writing down the steps on a piece of paper first.
        courseB_maze_seq10_b: You will need to move in two different directions to reach the pig.
      courseB_maze_seq10_2018_authored_hint: [ ]
      courseB_maze_seq10_predict1_authored_hint: [ ]
      courseB_maze_seq10_predict1_2018_authored_hint: [ ]
      courseB_maze_seq11_authored_hint:
        courseB_maze_seq11_a: Try writing down the steps on a piece of paper first.
        courseB_maze_seq11_b: 'Solve the puzzle in two parts: one before the corner and one after the corner.'
      courseB_maze_seq11_2018_authored_hint: [ ]
      courseB_maze_seq1_2018_authored_hint:
        courseB_maze_seq1_a: Connect blocks to the <xml><block type="when_run"/></xml> block to make Scrat move!
        courseB_maze_seq1_b: Drag three of these <xml><block type="maze_moveSouth"/></xml> arrows out and connect them to the <xml><block type="when_run"/></xml> block to get Scrat to the acorn.
      courseB_maze_seq1_predict1_authored_hint: [ ]
      courseB_maze_seq1_predict1_2018_authored_hint: [ ]
      courseB_maze_seq2_authored_hint:
        courseB_maze_seq2_a: This program is missing one block. Can you figure out which one?
        courseB_maze_seq2_b: Try running the code you are given to see what the bird needs to do next.
      courseB_maze_seq2_2018_authored_hint:
        courseB_maze_seq2_a: This program is missing one block. Can you figure out which one?
        courseB_maze_seq2_b: Try running the code you are given to see what Scrat needs to do next.
      courseB_maze_seq3_authored_hint:
        courseB_maze_seq3_a: One of the blocks is moving the bird in the wrong direction. Can you figure out which one and replace it with the correct block?
        courseB_maze_seq3_b: Try using the step button to find where the program goes wrong. Is it the first step? The second?
        courseB_maze_seq3_c: The <xml><block type="maze_moveWest"/></xml> block doesn't seem to be moving the bird in the right direction.
      courseB_maze_seq3_2018_authored_hint:
        courseB_maze_seq3_a: One of the blocks is moving Scrat in the wrong direction. Can you figure out which one and replace it with the correct block?
        courseB_maze_seq3_b: Try using the step button to find where the program goes wrong. Is it the first step? The second?
        courseB_maze_seq3_c: The <xml><block type="maze_moveWest"/></xml> block doesn't seem to be moving the bird in the right direction.
      courseB_maze_seq4_authored_hint:
        courseB_maze_seq4_a: Try adding one instruction at a time until you get to the pig.
        courseB_maze_seq4_b: You will want to use the <xml><block type="maze_moveEast"/></xml> block to solve this puzzle.
      courseB_maze_seq4_2018_authored_hint:
        courseB_maze_seq4_a: Try adding one instruction at a time until you get to the acorn.
        courseB_maze_seq4_b: You will want to use the <xml><block type="maze_moveEast"/></xml> block to solve this puzzle.
      courseB_maze_seq5_authored_hint:
        courseB_maze_seq5_a: If you get stuck, try drawing out the path on paper.
        courseB_maze_seq5_b: There are 2 ways to solve this puzzle!
        courseB_maze_seq5_c: Not sure how to get to the pig?  Try this path.
      courseB_maze_seq5_2018_authored_hint:
        courseB_maze_seq5_a: If you get stuck, try drawing out the path on paper.
        courseB_maze_seq5_b: There are 2 ways to solve this puzzle!
        courseB_maze_seq5_c: Not sure how to get to the acorn?  Try this path.
      courseB_maze_seq6_authored_hint:
        courseB_maze_seq6_a: Your final code should have three movement blocks.
        courseB_maze_seq6_b: If you get stuck, try solving the puzzle in two parts, one sideways and one up-and-down.
        courseB_maze_seq5_c: There are two ways to solve this puzzle.
        courseB_maze_seq5_d: Not sure how to get to the pig? Try this path!
      courseB_maze_seq6_2018_authored_hint:
        courseB_maze_seq6_a: Your final code should have three movement blocks.
        courseB_maze_seq6_b: If you get stuck, try solving the puzzle in two parts, one sideways and one up-and-down.
        courseB_maze_seq5_c: There are two ways to solve this puzzle.
        courseB_maze_seq5_d: Not sure how to get to the acorn? Try this path!
      courseB_maze_seq7_authored_hint:
        courseB_maze_seq7_a: Add 1 block to move the bird to the pig.
        courseB_maze_seq7_b: Try running the code that's given to you and see where you end up.
        courseB_maze_seq7_c: Can't get to the pig?  Try this path!
      courseB_maze_seq7_2018_authored_hint:
        courseB_maze_seq7_a: Add 1 block to move Scrat to the acorn.
        courseB_maze_seq7_b: Try running the code that's given to you and see where you end up.
        courseB_maze_seq7_c: Can't get to the acorn?  Try this path!
      courseB_maze_seq8_authored_hint:
        courseB_maze_seq8_a: Try adding one block at a time until you solve the puzzle.
        courseB_maze_seq8_b: '¡Aquí tienes dos caminos para resolver el puzzle!'
        courseB_maze_seq8_c: Don't know which way to go? Try this path!
      courseB_maze_seq8_2018_authored_hint:
        courseB_maze_seq8_a: Try adding one block at a time until you solve the puzzle.
        courseB_maze_seq8_b: '¡Aquí tienes dos caminos para resolver el puzzle!'
        courseB_maze_seq8_c: Don't know which way to go? Try this path!
      courseB_maze_seq9_authored_hint:
        courseB_maze_seq9_a: Try writing down all of the steps on a piece of paper first.
        courseB_maze_seq9_b: Build your program a block at a time and test as you build.
        courseB_maze_seq9_c: There are two ways to solve this puzzle.
        courseB_maze_seq9_d: Stuck?  Try this path!
      courseB_maze_seq9_2018_authored_hint:
        courseB_maze_seq9_a: Try writing down all of the steps on a piece of paper first.
        courseB_maze_seq9_b: Build your program a block at a time and test as you build.
        courseB_maze_seq9_c: There are two ways to solve this puzzle.
        courseB_maze_seq9_d: Stuck?  Try this path!
      courseB_maze_seq9_challenge1_authored_hint: [ ]
      courseB_maze_seqCold_authored_hint:
        courseB_maze_seqCold_a: Stuck? Try tracing the bird's path with your finger.
        courseB_maze_seqCold_b: The extra blocks need to be added before the last ![](https://images.code.org/145dfc20c086bc8fc265de47f3cfe4b0-image-1467848177684.35.51 PM.png )
      courseB_maze_seqOld_authored_hint:
        courseB_maze_seqOld_a: If you're having trouble, try writing down the steps on a piece of paper first.
      courseB_maze_seq_challenge1_authored_hint:
        courseB_maze_seq_challenge1_a: The shortest path might not work this time.
        courseB_maze_seq_challenge1_b: Try using the <xml><block type="maze_moveWest"/></xml> block to start.
      courseB_maze_seq_challenge1_2018_authored_hint:
        courseB_maze_seq_challenge1_a: The shortest path might not work this time.
        courseB_maze_seq_challenge1_b: Try using the <xml><block type="maze_moveWest"/></xml> block to start.
      courseB_maze_seq_challenge2_authored_hint:
        courseB_maze_seq_challenge2_a: You do not need to add or remove blocks to solve this puzzle.
        courseB_maze_seq_challenge2_b: Rearrange the blocks and take the staircase pattern path.
      courseB_maze_seq_challenge2_2018_authored_hint:
        courseB_maze_seq_challenge2_a: You do not need to add or remove blocks to solve this puzzle.
        courseB_maze_seq_challenge2_b: Rearrange the blocks and take the staircase pattern path.
      courseB_playlab_challenge1_Template_authored_hint: [ ]
      courseB_playlab_challenge1_Template_2018_authored_hint: [ ]
      courseB_playlab_events2_authored_hint:
        courseB_playlab_events2_a: |-
          This is the block to have Daisy say something:
          
          <xml>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">0</title>
          <title name="VALUE">Hi there.</title>
          </block>
          </xml>
      courseB_playlab_events2_2018_authored_hint:
        courseB_playlab_events2_a: |-
          This is the block to have Daisy say something:
          
          <xml>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">0</title>
          <title name="VALUE">Hi there.</title>
          </block>
          </xml>
      courseB_playlab_events3_authored_hint:
        courseB_playlab_events3_a: |-
          This is the block you should use to add the event:
          
          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">0</title>
          </block>
          </xml>
        courseB_playlab_events3_b: |-
          This is the block you need to switch Daisy's mood:
          
          <xml>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">0</title>
          <title name="VALUE">random</title>
          </block>
          </xml>
      courseB_playlab_events3_2018_authored_hint:
        courseB_playlab_events3_a: |-
          This is the block you should use to add the event:
          
          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">0</title>
          </block>
          </xml>
        courseB_playlab_events3_b: |-
          This is the block you need to switch Daisy's mood:
          
          <xml>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">0</title>
          <title name="VALUE">random</title>
          </block>
          </xml>
      courseB_playlab_events4_authored_hint:
        courseB_playlab_events4_a: |-
          This is the event that controls the left arrow:
          
          <xml>
          <block type="studio_whenArrow">
          <title name="VALUE">left</title>
          </block>
          </xml>
        courseB_playlab_events4_b: |-
          This is the block that makes the knight move left.
          
          <xml>
          <block type="studio_move">
          <title name="SPRITE">1</title>
          <title name="DIR">8</title>
          </block>
          </xml>
      courseB_playlab_events4_2018_authored_hint:
        courseB_playlab_events4_a: |-
          This is the event that controls the left arrow:
          
          <xml>
          <block type="studio_whenArrow">
          <title name="VALUE">left</title>
          </block>
          </xml>
        courseB_playlab_events4_b: |-
          This is the block that makes the knight move left.
          
          <xml>
          <block type="studio_move">
          <title name="SPRITE">1</title>
          <title name="DIR">8</title>
          </block>
          </xml>
      courseB_playlab_events5_authored_hint:
        courseB_playlab_events5_a: "This is the event block that controls the right arrow: \n\n<xml>\n  <block type=\"studio_whenArrow\">\n    <title name=\"VALUE\">right</title>\n  </block>\n  </xml>"
        courseB_playlab_events5_b: "This is the block that makes the knight run away. \n\n<xml>\n<block type=\"studio_move\">\n    <title name=\"SPRITE\">1</title>\n    <title name=\"DIR\">2</title>\n  </block>\n</xml>"
      courseB_playlab_events5_2018_authored_hint:
        courseB_playlab_events5_a: "This is the event block that controls the right arrow: \n\n<xml>\n  <block type=\"studio_whenArrow\">\n    <title name=\"VALUE\">right</title>\n  </block>\n  </xml>"
        courseB_playlab_events5_b: "This is the block that makes the knight run away. \n\n<xml>\n<block type=\"studio_move\">\n    <title name=\"SPRITE\">1</title>\n    <title name=\"DIR\">2</title>\n  </block>\n</xml>"
      courseB_playlab_events6_authored_hint:
        courseB_playlab_events6_a: |-
          You will need these event blocks:
          
          <xml>
          <block type="studio_whenArrow" id="callMe">
          <title name="VALUE">up</title>
          </block>
          <block type="studio_whenArrow" id="callMe">
          <title name="VALUE">down</title>
          </block>
          </xml>
        courseB_playlab_events6_b: |-
          Use the drop down arrows on the green `when ___ arrow pressed` event blocks to choose different directions.
          
          ![](https://images.code.org/b4c76f19fc2d2694c1f731e5f6e786b8-image-1501003990996.gif)
        courseB_playlab_events6_c: Get to all of the flags to pass!
      courseB_playlab_events6_2018_authored_hint:
        courseB_playlab_events6_a: |-
          You will need these event blocks:
          
          <xml>
          <block type="studio_whenArrow" id="callMe">
          <title name="VALUE">up</title>
          </block>
          <block type="studio_whenArrow" id="callMe">
          <title name="VALUE">down</title>
          </block>
          </xml>
        courseB_playlab_events6_b: |-
          Use the drop down arrows on the green `when ___ arrow pressed` event blocks to choose different directions.
          
          ![](https://images.code.org/b4c76f19fc2d2694c1f731e5f6e786b8-image-1501003990996.gif)
        courseB_playlab_events6_c: Get to all of the flags to pass!
      courseB_playlab_events7_authored_hint:
        courseB_playlab_events7_a: |-
          This is the event block that you will need:
          
          <xml>
          <block type="studio_whenSpriteCollided">
          <title name="SPRITE1">0</title>
          <title name="SPRITE2">1</title>
          </block>
          </xml>
        courseB_playlab_events7_b: |-
          This is the block you need to play a sound.
          
          <xml>
          <block type="studio_playSound">
          <title name="SOUND">slap</title>
          </block>
          </xml>
        courseB_playlab_events7_c: |-
          This is the block you need to make the knight vanish:
          
          <xml>
          <block type="studio_vanish">
          <title name="SPRITE">1</title>
          </block>
          </xml>
      courseB_playlab_events7_2018_authored_hint:
        courseB_playlab_events7_a: |-
          This is the event block that you will need:
          
          <xml>
          <block type="studio_whenSpriteCollided">
          <title name="SPRITE1">0</title>
          <title name="SPRITE2">1</title>
          </block>
          </xml>
        courseB_playlab_events7_b: |-
          This is the block you need to play a sound.
          
          <xml>
          <block type="studio_playSound">
          <title name="SOUND">slap</title>
          </block>
          </xml>
        courseB_playlab_events7_c: |-
          This is the block you need to make the knight vanish:
          
          <xml>
          <block type="studio_vanish">
          <title name="SPRITE">1</title>
          </block>
          </xml>
      courseB_playlab_eventsTemplate_authored_hint: [ ]
      courseB_playlab_eventsTemplate_2018_authored_hint: [ ]
      courseB_playlab_eventsToolbox_authored_hint:
        courseB_playlab_events7_a: |-
          This is the event block that you will need:
          
          ![](https://images.code.org/2ed42b3a3108c6affdfc866de57f2eec-image-1475624565390.42.18.png)
        courseB_playlab_events7_b: |-
          This is the block you need to play a sound.
          
          ![](https://images.code.org/58e9b9a146a4ca3a8eee25845110b805-image-1475624550269.42.00.png)
        courseB_playlab_events7_c: |-
          This is the block you need to make the knight vanish:
          
          ![](https://images.code.org/f468611cbe51e1cb35531334f625395a-image-1475624478204.41.02.png)
      courseB_playlab_events_challenge1_authored_hint:
        courseB_playlab_events_challenge1_a: "Make the other animals move down when you press `▼`. \n<xml>\n  <block type=\"studio_whenArrow\" movable=\"false\">\n    <title name=\"VALUE\">down</title>\n  </block>\n</xml>"
        courseB_playlab_events_challenge1_b: |
          Change the speed of the animals by using this block:
          <xml>
          <block type="studio_setSpriteSpeed">
          <title name="SPRITE">0</title>
          <title name="VALUE">Studio.SpriteSpeed.NORMAL</title>
          </block></xml>
        courseB_playlab_events_challenge1_c: |-
          What will the everyone say when the race is over? Make them talk with this event:
          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">2</title>
          <next>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">2</title>
          <title name="VALUE">Woo hoo!</title>
          </block>
          </next>
          </block>
          </xml>
      courseB_playlab_events_challenge1_2018_authored_hint:
        courseB_playlab_events_challenge1_a: "Make the other animals move down when you press `▼`. \n<xml>\n  <block type=\"studio_whenArrow\" movable=\"false\">\n    <title name=\"VALUE\">down</title>\n  </block>\n</xml>"
        courseB_playlab_events_challenge1_b: |
          Change the speed of the animals by using this block:
          <xml>
          <block type="studio_setSpriteSpeed">
          <title name="SPRITE">0</title>
          <title name="VALUE">Studio.SpriteSpeed.NORMAL</title>
          </block></xml>
        courseB_playlab_events_challenge1_c: |-
          What will the everyone say when the race is over? Make them talk with this event:
          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">2</title>
          <next>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">2</title>
          <title name="VALUE">Woo hoo!</title>
          </block>
          </next>
          </block>
          </xml>
      courseB_playlab_events_challenge2_authored_hint:
        courseB_playlab_events_challenge2_a: Each animal in the game should disappear when clicked. It should also come back after a second or two!
        courseB_playlab_events_challenge2_b: |-
          Use other event blocks to make the other animals disappear!
          
          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">1</title>
          </block>
          </xml>
        courseB_playlab_events_challenge2_c: |-
          Use extra commands to play sounds or score points when you click the animals!
          <xml>
          <block type="studio_playSound">
          <title name="SOUND">slap</title>
          </block>
          <block type="studio_changeScore"/></xml>
        courseB_playlab_events_challenge2_d: |-
          Mix it up!
          
          Make some animals give more points than others.
          Use different sounds.
          Change the animals' moods!
      courseB_playlab_events_challenge2_2018_authored_hint:
        courseB_playlab_events_challenge2_a: Each animal in the game should disappear when clicked. It should also come back after a second or two!
        courseB_playlab_events_challenge2_b: |-
          Use other event blocks to make the other animals disappear!
          
          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">1</title>
          </block>
          </xml>
        courseB_playlab_events_challenge2_c: |-
          Use extra commands to play sounds or score points when you click the animals!
          <xml>
          <block type="studio_playSound">
          <title name="SOUND">slap</title>
          </block>
          <block type="studio_changeScore"/></xml>
        courseB_playlab_events_challenge2_d: |-
          Mix it up!
          
          Make some animals give more points than others.
          Use different sounds.
          Change the animals' moods!
      courseB_playlab_events_challenge2_embed_authored_hint:
        courseB_playlab_events_challenge2_a: Each animal in the game should vanish when tapped. It should also come back after a second or two!
        courseB_playlab_events_challenge2_b: |-
          Use other event blocks to make the other animals disappear!
          
          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">1</title>
          </block>
          </xml>
        courseB_playlab_events_challenge2_c: |-
          Use extra commands to play sounds or score points when you click the animals!
          <xml>
          <block type="studio_playSound">
          <title name="SOUND">slap</title>
          </block>
          <block type="studio_changeScore"/></xml>
        courseB_playlab_events_challenge2_d: |-
          Mix it up!
          
          Make some animals give more points than others.
          Use different sounds.
          Change the animals' moods!
      courseB_playlab_events_challenge2_template_authored_hint:
        courseB_playlab_events_challenge2_a: Each animal in the game should vanish when tapped. It should also come back after a second or two!
        courseB_playlab_events_challenge2_b: |-
          Use other event blocks to make the other animals disappear!
          
          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">1</title>
          </block>
          </xml>
        courseB_playlab_events_challenge2_c: |-
          Use extra commands to play sounds or score points when you click the animals!
          <xml>
          <block type="studio_playSound">
          <title name="SOUND">slap</title>
          </block>
          <block type="studio_changeScore"/></xml>
        courseB_playlab_events_challenge2_d: |-
          Mix it up!
          
          Make some animals give more points than others.
          Use different sounds.
          Change the animals' moods!
      courseB_playlab_events_challenge2_template_2018_authored_hint:
        courseB_playlab_events_challenge2_a: Each animal in the game should vanish when tapped. It should also come back after a second or two!
        courseB_playlab_events_challenge2_b: |-
          Use other event blocks to make the other animals disappear!
          
          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">1</title>
          </block>
          </xml>
        courseB_playlab_events_challenge2_c: |-
          Use extra commands to play sounds or score points when you click the animals!
          <xml>
          <block type="studio_playSound">
          <title name="SOUND">slap</title>
          </block>
          <block type="studio_changeScore"/></xml>
        courseB_playlab_events_challenge2_d: |-
          Mix it up!
          
          Make some animals give more points than others.
          Use different sounds.
          Change the animals' moods!
      courseB_scrat_forVideo_authored_hint: [ ]
      courseB_starWars_prog1_authored_hint:
        courseB_starWars_prog1_a: Try adding blocks one at a time, then click "Run" to see what happens.
        courseB_starWars_prog1_b: |
          You will want to move East to solve this puzzle. How far do you need to move?
          <xml><block type="studio_moveEast"/></xml>
      courseB_starWars_prog10_authored_hint: [ ]
      courseB_starWars_prog10_2018_authored_hint: [ ]
      courseB_starWars_prog11_authored_hint: [ ]
      courseB_starWars_prog11_2018_authored_hint: [ ]
      courseB_starWars_prog1_2018_authored_hint:
        courseB_starWars_prog1_a: Try adding blocks one at a time, then click "Run" to see what happens.
        courseB_starWars_prog1_b: |
          You will want to move East to solve this puzzle. How far do you need to move?
          <xml><block type="studio_moveEast"/></xml>
      courseB_starWars_prog2_authored_hint:
        courseB_starWars_prog2_a: Split this problem into two parts. Get one one pile of scrap metal, then figure out how to get to the other one.
      courseB_starWars_prog2_2018_authored_hint:
        courseB_starWars_prog2_a: Split this problem into two parts. Get one one pile of scrap metal, then figure out how to get to the other one.
      courseB_starWars_prog3_authored_hint:
        courseB_starWars_prog3_a: You will need to move 3 ways to solve this puzzle.
        courseB_starWars_prog3_b: Build one piece of code at a time. Run it to figure out where to go from there.
      courseB_starWars_prog3_2018_authored_hint:
        courseB_starWars_prog3_a: You will need to move 3 ways to solve this puzzle.
        courseB_starWars_prog3_b: Build one piece of code at a time. Run it to figure out where to go from there.
      courseB_starWars_prog4_authored_hint:
        courseB_starWars_prog4_a: Build one piece of code at a time. Run it to figure out where to go from there.
        courseB_starWars_prog4_b: |-
          Try using the `repeat` block for shorter code.
          <xml>  <block type="controls_repeat_simplified">
          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog4_2018_authored_hint:
        courseB_starWars_prog4_a: Build one piece of code at a time. Run it to figure out where to go from there.
        courseB_starWars_prog4_b: |-
          Try using the `repeat` block for shorter code.
          <xml>  <block type="controls_repeat_simplified">
          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog5_authored_hint:
        courseB_starWars_prog5_a: Doesn't this pattern look a little like the last puzzle?
        courseB_starWars_prog5_b: BB-8 will grab the scrap metal as he rolls over it.
        courseB_starWars_prog5_c: Trace this pattern with your finger. Count the pieces of metal as you move.
        courseB_starWars_prog5_da: |-
          Look what happens if you use the same solution as the stair-step puzzle:
          
          ![](https://images.code.org/866b4121069423bf03d92dcb8f2276af-image-1503709785988.09.24.png)
      courseB_starWars_prog5_2018_authored_hint:
        courseB_starWars_prog5_a: Doesn't this pattern look a little like the last puzzle?
        courseB_starWars_prog5_b: BB-8 will grab the scrap metal as he rolls over it.
        courseB_starWars_prog5_c: Trace this pattern with your finger. Count the pieces of metal as you move.
        courseB_starWars_prog5_da: |-
          Look what happens if you use the same solution as the stair-step puzzle:
          
          ![](https://images.code.org/866b4121069423bf03d92dcb8f2276af-image-1503709785988.09.24.png)
      courseB_starWars_prog6_authored_hint:
        courseB_starWars_prog6_a: This pattern is just a stair step with two moves per direction!
        courseB_starWars_prog6_b: |-
          Try using the `repeat` block for shorter code.
          <xml>  <block type="controls_repeat_simplified">
          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog6_2018_authored_hint:
        courseB_starWars_prog6_a: This pattern is just a stair step with two moves per direction!
        courseB_starWars_prog6_b: |-
          Try using the `repeat` block for shorter code.
          <xml>  <block type="controls_repeat_simplified">
          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog7_authored_hint:
        courseB_starWars_prog7_a: Doesn't this pattern look a little like the last puzzle?
        courseB_starWars_prog7_b: BB-8 will grab the scrap metal as he rolls over it.
        courseB_starWars_prog7_c: Try drawing the large stair step pattern over this puzzle. Does it cover all of the scrap metal?
      courseB_starWars_prog7_2018_authored_hint:
        courseB_starWars_prog7_a: Doesn't this pattern look a little like the last puzzle?
        courseB_starWars_prog7_b: BB-8 will grab the scrap metal as he rolls over it.
        courseB_starWars_prog7_c: Try drawing the large stair step pattern over this puzzle. Does it cover all of the scrap metal?
      courseB_starWars_prog8_authored_hint:
        courseB_starWars_prog8_a: It is okay to go back over a set of spaces where you have already traveled.
        courseB_starWars_prog8_b: |-
          Try using the `repeat` block to see what happens to the code that you put inside.
          
          <xml>
          <block type="controls_repeat_simplified">
          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog8_2018_authored_hint:
        courseB_starWars_prog8_a: It is okay to go back over a set of spaces where you have already traveled.
        courseB_starWars_prog8_b: |-
          Try using the `repeat` block to see what happens to the code that you put inside.
          
          <xml>
          <block type="controls_repeat_simplified">
          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog9_authored_hint:
        courseB_starWars_prog9_a: Don't be afraid to make a mistake! Run the code to see what happens, even if you haven't solved the puzzle yet.
        courseB_starWars_prog9_b: There are many ways to solve this puzzle.
        courseB_starWars_prog9_c: Could a `repeat` loop help out here?
      courseB_starWars_prog9_2018_authored_hint:
        courseB_starWars_prog9_a: Don't be afraid to make a mistake! Run the code to see what happens, even if you haven't solved the puzzle yet.
        courseB_starWars_prog9_b: There are many ways to solve this puzzle.
        courseB_starWars_prog9_c: Could a `repeat` loop help out here?
      courseC_PlayLab_embed_events9_authored_hint: [ ]
      courseC_PlayLab_events1_authored_hint:
        courseC_PlayLab_events1_a: |-
          Attach this block to the `when run` block:
          
          <xml>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">0</title>
          <title name="VALUE">Hi there.</title>
          </block>
          </xml>
      courseC_PlayLab_events1_2018_authored_hint:
        courseC_PlayLab_events1_a: |-
          Attach this block to the `when run` block:
          
          <xml>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">0</title>
          <title name="VALUE">Hi there.</title>
          </block>
          </xml>
      courseC_PlayLab_events2_authored_hint:
        courseC_PlayLab_events2_a: |-
          Attach two of these blocks to the `when run` block:
          
          <xml>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">0</title>
          <title name="VALUE">Hi there.</title>
          </block>
          </xml>
        courseC_PlayLab_events2_b: Use the dropdown menu on the second `actor __ say` block to change which actor speaks.
      courseC_PlayLab_events2_2018_authored_hint:
        courseC_PlayLab_events2_a: |-
          Attach two of these blocks to the `when run` block:
          
          <xml>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">0</title>
          <title name="VALUE">Hi there.</title>
          </block>
          </xml>
        courseC_PlayLab_events2_b: Use the dropdown menu on the second `actor __ say` block to change which actor speaks.
      courseC_PlayLab_events3_authored_hint:
        courseC_PlayLab_events3_a: You only need to move Jorge to the right by about 25 pixels to solve this puzzle.
        courseC_PlayLab_events3_b: Is there a block in the toolbox that looks like it would move an actor?
        courseC_PlayLab_events3_c: |-
          Attach this block to the `when run` block:
          
          <xml>
          <block type="studio_moveDistance">
          <title name="SPRITE">0</title>
          <title name="DIR">2</title>
          <title name="DISTANCE">25</title>
          </block>
          </xml>
      courseC_PlayLab_events3_2018_authored_hint:
        courseC_PlayLab_events3_a: You only need to move Jorge to the right by about 25 pixels to solve this puzzle.
        courseC_PlayLab_events3_b: Is there a block in the toolbox that looks like it would move an actor?
        courseC_PlayLab_events3_c: |-
          Attach this block to the `when run` block:
          
          <xml>
          <block type="studio_moveDistance">
          <title name="SPRITE">0</title>
          <title name="DIR">2</title>
          <title name="DISTANCE">25</title>
          </block>
          </xml>
      courseC_PlayLab_events4_authored_hint:
        courseC_PlayLab_events4_b: When the "Run" button is clicked, Jorge needs to move right **100** pixels to reach Olive the Cat.
        courseC_PlayLab_events4_a: You will need to attach an `actor __ say` block to the `when actor touches` event to solve this puzzle.
      courseC_PlayLab_events4_2018_authored_hint:
        courseC_PlayLab_events4_b: When the "Run" button is clicked, Jorge needs to move right **100** pixels to reach Olive the Cat.
        courseC_PlayLab_events4_a: You will need to attach an `actor __ say` block to the `when actor touches` event to solve this puzzle.
      courseC_PlayLab_events5_authored_hint:
        courseC_PlayLab_events5_a: You will need to click the dropdown menu in the `actor say` block to find the text "What's new?"
        courseC_PlayLab_events5_b: Click on Octavia when you run your program to check that it works!
      courseC_PlayLab_events5_2018_authored_hint:
        courseC_PlayLab_events5_a: You will need to click the dropdown menu in the `actor say` block to find the text "What's new?"
        courseC_PlayLab_events5_b: Click on Octavia when you run your program to check that it works!
      courseC_PlayLab_events6_authored_hint:
        courseC_PlayLab_events6_a: Each green `when arrow` block should have one action below it.
        courseC_PlayLab_events6_b: Use the drop down menu on the `move actor 1` block to change which direction Waddles moves.
        courseC_PlayLab_events6_c: When you're done, you should be able to move Waddles around using the arrow keys on your computer!
      courseC_PlayLab_events6_2018_authored_hint:
        courseC_PlayLab_events6_a: Each green `when arrow` block should have one action below it.
        courseC_PlayLab_events6_b: Use the drop down menu on the `move actor 1` block to change which direction Waddles moves.
        courseC_PlayLab_events6_c: When you're done, you should be able to move Waddles around using the arrow keys on your computer!
      courseC_PlayLab_events7_authored_hint:
        courseC_PlayLab_events7_a: 'Use both the `move actor 2 up 400 pixels` block and the `move actor 2 down 400 pixels` block inside the `repeat forever` loop to solve this puzzle. '
        courseC_PlayLab_events7_b: The `repeat forever` loop does not need to be connected to any other event blocks; it will run on its own.
      courseC_PlayLab_events7_2018_authored_hint:
        courseC_PlayLab_events7_a: 'Use both the `move actor 2 up 400 pixels` block and the `move actor 2 down 400 pixels` block inside the `repeat forever` loop to solve this puzzle. '
        courseC_PlayLab_events7_b: The `repeat forever` loop does not need to be connected to any other event blocks; it will run on its own.
      courseC_PlayLab_events8_authored_hint:
        courseC_PlayLab_events8_a: You will need to connect blocks to the `when actor touches` block to make this happen correctly.
        courseC_PlayLab_events8_b: The `actor say` and `play sound` blocks in the toolbox should help you out!
      courseC_PlayLab_events8_2018_authored_hint:
        courseC_PlayLab_events8_a: You will need to connect blocks to the `when actor touches` block to make this happen correctly.
        courseC_PlayLab_events8_b: The `actor say` and `play sound` blocks in the toolbox should help you out!
      courseC_PlayLab_events9_authored_hint:
        courseC_PlayLab_events9_a: The `score point` block will help you to solve this puzzle.
        courseC_PlayLab_events9_b: Make sure that your new `when actor touches` block says actor **1** and actor **3**.
        courseC_PlayLab_events9_c: You can have more than one `when actor touches` event in your workspace at the same time, so you don't have to delete the first one!
      courseC_PlayLab_events9_2018_authored_hint:
        courseC_PlayLab_events9_a: The `score point` block will help you to solve this puzzle.
        courseC_PlayLab_events9_b: Make sure that your new `when actor touches` block says actor **1** and actor **3**.
        courseC_PlayLab_events9_c: You can have more than one `when actor touches` event in your workspace at the same time, so you don't have to delete the first one!
      courseC_PlayLab_eventsA_authored_hint:
        courseC_PlayLab_eventsA_a: Use the `set background` block and the `set actor to a ____ speed` block to solve this puzzle.
        courseC_PlayLab_eventsA_b: You will need to specifically drag a `when run` event block into the workspace to solve this puzzle.
      courseC_PlayLab_eventsA_2018_authored_hint:
        courseC_PlayLab_eventsA_a: Use the `set background` block and the `set actor to a ____ speed` block to solve this puzzle.
        courseC_PlayLab_eventsA_b: You will need to specifically drag a `when run` event block into the workspace to solve this puzzle.
      courseC_PlayLab_eventsFP_authored_hint:
        idea1: |-
          *Need an idea?*
          
          **Who's there?** Make characters appear with random images, so no one knows who's showing up next.
          
          ![](https://images.code.org/a56e03479801995d93ad5a4e4384a79e-image-1475340154498.gif)
        idea2: |-
          *Need an idea?*
          
          **Going on an Adventure** - Change the background, then have the characters talk about where they are now.
          
          ![](https://images.code.org/010c4d919f841d6049caf9211ab65ccc-image-1475340583052.gif)
        idea3: |-
          *Need an idea?*
          
          **Pinball** - Make one character move using the arrow keys (use `when up arrow`, `when down arrow` blocks), then play random sounds when it collides with other characters on the screen.
      courseC_PlayLab_eventsFP_2018_authored_hint:
        idea1: |-
          *Need an idea?*
          
          **Who's there?** Make characters appear with random images, so no one knows who's showing up next.
          
          ![](https://images.code.org/a56e03479801995d93ad5a4e4384a79e-image-1475340154498.gif)
        idea2: |-
          *Need an idea?*
          
          **Going on an Adventure** - Change the background, then have the characters talk about where they are now.
          
          ![](https://images.code.org/010c4d919f841d6049caf9211ab65ccc-image-1475340583052.gif)
        idea3: |-
          *Need an idea?*
          
          **Pinball** - Make one character move using the arrow keys (use `when up arrow`, `when down arrow` blocks), then play random sounds when it collides with other characters on the screen.
      courseC_PlayLab_events_challenge1_authored_hint:
        courseC_PlayLab_events_challenge_a: |
          You can use this block to move actors to different places on the game space.
          <xml> <block type="studio_setSpritePosition">
          <title name="SPRITE">0</title>
          <title name="VALUE">12</title>
          </block></xml>
        courseC_PlayLab_events_challenge_b: Try using `set actor 1 to the middle left position` when it touches either of the other actors. This will reset the game so the player can keep trying!
        courseC_PlayLab_events_challenge_c: |-
          You might also want to try changing the speed of the different actors to make the game easier or more challenging!
          <xml>  <block type="studio_setSpriteSpeed">
          <title name="SPRITE">0</title>
          <title name="VALUE">Studio.SpriteSpeed.FAST</title>
          </block></xml>
      courseC_PlayLab_events_challenge1_2018_authored_hint:
        courseC_PlayLab_events_challenge_a: |
          You can use this block to move actors to different places on the game space.
          <xml> <block type="studio_setSpritePosition">
          <title name="SPRITE">0</title>
          <title name="VALUE">12</title>
          </block></xml>
        courseC_PlayLab_events_challenge_b: Try using `set actor 1 to the middle left position` when it touches either of the other actors. This will reset the game so the player can keep trying!
        courseC_PlayLab_events_challenge_c: |-
          You might also want to try changing the speed of the different actors to make the game easier or more challenging!
          <xml>  <block type="studio_setSpriteSpeed">
          <title name="SPRITE">0</title>
          <title name="VALUE">Studio.SpriteSpeed.FAST</title>
          </block></xml>
      courseC_PlayLab_events_challenge1_xy_blocks_authored_hint:
        courseC_PlayLab_events_challenge_a: The two values on this block allow you to move an actor to any pixel in the game area. You can choose any number from 0-400.
        courseC_PlayLab_events_challenge_b: |-
          You can decide which numbers to use, by thinking about how far over from the top left corner you'd like to move. The first number is the number of pixels from the left. The second number is the number of pixels from the top.
          <xml><block type="studio_setSpriteXY" inline="true">
          <value name="SPRITE">
          <block type="math_number" movable="false">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="XPOS">
          <block type="math_number" movable="false">
          <title name="NUM">37</title>
          </block>
          </value>
          <value name="YPOS">
          <block type="math_number" movable="false">
          <title name="NUM">187</title>
          </block>
          </value>
          </block></xml>
          ![](https://images.code.org/b1559bf476ceb59f880c43271c5e10b2-image-1494111787192.59.49 PM.png)
      courseC_artist_loop1_authored_hint:
        courseC_artist_loop1_a: You don't need to make any changes to the loop, just put one block above it.
        courseC_artist_loop1_b: |-
          This is the block you will need to set a pattern:
          
          <xml>
          <block type="draw_line_style_pattern">
          <title name="VALUE">DEFAULT</title>
          </block>
          </xml>
          
          Choose any pattern you like!
      courseC_artist_loop1_2018_authored_hint:
        courseC_artist_loop1_a: You don't need to make any changes to the loop, just put one block above it.
        courseC_artist_loop1_b: |-
          This is the block you will need to set a pattern:
          
          <xml>
          <block type="draw_line_style_pattern">
          <title name="VALUE">DEFAULT</title>
          </block>
          </xml>
          
          Choose any pattern you like!
      courseC_artist_loops1a_authored_hint:
        courseC_artist_loops1a_a: |-
          This is the first block you will need:
          
          <xml>
          <block type="jump_to_xy">
          <title name="XPOS">200</title>
          <title name="YPOS">200</title>
          </block>
          </xml>
        courseC_artist_loops1a_b: |-
          Use this block to draw the sticker!
          
          <xml>
          <block type="sticker">
          <title name="VALUE">Bird</title>
          </block>
          </xml>
      courseC_artist_loops1a_2018_authored_hint:
        courseC_artist_loops1a_a: |-
          This is the first block you will need:
          
          <xml>
          <block type="jump_to_xy">
          <title name="XPOS">200</title>
          <title name="YPOS">200</title>
          </block>
          </xml>
        courseC_artist_loops1a_b: |-
          Use this block to draw the sticker!
          
          <xml>
          <block type="sticker">
          <title name="VALUE">Bird</title>
          </block>
          </xml>
      courseC_artist_loops2a_authored_hint:
        courseC_artist_loops2a_a: Inside your loop, you will want to jump to 200 over 200 down, then draw the bird sticker, then turn 30 degrees.
        courseC_artist_loops2a_b: Click on the number at the top of the `repeat` loop to change how many times it repeats.
      courseC_artist_loops2a_2018_authored_hint:
        courseC_artist_loops2a_a: Inside your loop, you will want to jump to 200 over 200 down, then draw the bird sticker, then turn 30 degrees.
        courseC_artist_loops2a_b: Click on the number at the top of the `repeat` loop to change how many times it repeats.
      courseC_artist_loops3a_authored_hint:
        courseC_artist_loops3a_a: You will want to add just one block inside of your loop, after the bird sticker.
        courseC_artist_loops3a_b: Use the drop down menu on the `draw sticker` block to find the bat sticker.
      courseC_artist_loops3a_2018_authored_hint:
        courseC_artist_loops3a_a: You will want to add just one block inside of your loop, after the bird sticker.
        courseC_artist_loops3a_b: Use the drop down menu on the `draw sticker` block to find the bat sticker.
      courseC_artist_loops4a_authored_hint:
        courseC_artist_loops4a_a: |-
          Use this block to jump forward:
          
          <xml>
          <block type="jump_by_constant">
          <title name="DIR">jumpForward</title>
          <title name="VALUE">100</title>
          </block>
          </xml>
          
          Don't forget to change how far!
      courseC_artist_loops4a_2018_authored_hint:
        courseC_artist_loops4a_a: |-
          Use this block to jump forward:
          
          <xml>
          <block type="jump_by_constant">
          <title name="DIR">jumpForward</title>
          <title name="VALUE">100</title>
          </block>
          </xml>
          
          Don't forget to change how far!
      courseC_artist_loops5_authored_hint:
        courseC_artist_loops5_a: |-
          Try using the `jump to` block to get your artist back toward the center:
          
          <xml>
          <block type="jump_to_xy">
          <title name="XPOS">100</title>
          <title name="YPOS">100</title>
          </block>
          </xml>
      courseC_artist_loops5a_authored_hint:
        courseC_artist_loops5a_a: Use the drop down menus on the `draw sticker` blocks to change their images.
      courseC_artist_loops5a_2018_authored_hint:
        courseC_artist_loops5a_a: Use the drop down menus on the `draw sticker` blocks to change their images.
      courseC_artist_loops5b_authored_hint:
        courseC_artist_loops5b_a: |-
          Use this block to set the pattern of your lines:
          
          <xml>
          <block type="draw_line_style_pattern">
          <title name="VALUE">DEFAULT</title>
          </block>
          </xml>
        courseC_artist_loops5b_b: To make a design like the one above, you will want to move backward the same amount that you move forward.
      courseC_artist_loops5b_2018_authored_hint:
        courseC_artist_loops5b_a: |-
          Use this block to set the pattern of your lines:
          
          <xml>
          <block type="draw_line_style_pattern">
          <title name="VALUE">DEFAULT</title>
          </block>
          </xml>
        courseC_artist_loops5b_b: To make a design like the one above, you will want to move backward the same amount that you move forward.
      courseC_artist_loops6_authored_hint:
        courseC_artist_loops6_a: |
          Try a triangle flower:
          <img src="https://images.code.org/4248a974a7631c4240effba06fdee731-image-1495821015097.49.18.png" width="150px" />
          
          Or a little green bug:
          <img src="https://images.code.org/b9454d6f1159e19c58d9f5b5b37fd156-image-1495821067980.52.43.png" width="150px" />
      courseC_artist_loops6a_authored_hint:
        courseC_artist_loops6a_a: To make a design like the one above, jump forward less than 75 pixels between each sticker.
      courseC_artist_loops6a_2018_authored_hint:
        courseC_artist_loops6a_a: To make a design like the one above, jump forward less than 75 pixels between each sticker.
      courseC_artist_loops7a_authored_hint:
        courseC_artist_loops7a_a: |-
          A circle has 360 degrees. Multiply the degrees in your turn times the number of times you repeat. Does it equal 360?
          Check the suggested rotations to see that this works!
      courseC_artist_loops7a_2018_authored_hint:
        courseC_artist_loops7a_a: |-
          A circle has 360 degrees. Multiply the degrees in your turn times the number of times you repeat. Does it equal 360?
          Check the suggested rotations to see that this works!
      courseC_artist_loopsPre1a_authored_hint:
        courseC_artist_loopsPre1a_a: Remember to put the `turn` block inside of the loop.
        courseC_artist_loopsPre1a_b: 'Your `repeat` loop should have 3 blocks inside of it: `jump to 200 over 200 down`, `move forward by 50 pixels`, and `turn right by 60 degrees`.'
      courseC_artist_loopsPre1a_2018_authored_hint:
        courseC_artist_loopsPre1a_a: Remember to put the `turn` block inside of the loop.
        courseC_artist_loopsPre1a_b: 'Your `repeat` loop should have 3 blocks inside of it: `jump to 200 over 200 down`, `move forward by 50 pixels`, and `turn right by 60 degrees`.'
      courseC_artist_loopsPrePre1a_authored_hint:
        courseC_artist_loopsPrePre1a_a: |-
          The first block you will need is:
          
          ![](https://images.code.org/60e3354a2e7dd37b64833eac1e8694be-image-1499710228373.08.14 AM.png)
        courseC_artist_loopsPrePre1a_b: |-
          To move forward 50 pixels, use this block:
          
          ![](https://images.code.org/411fca4606a09641e6eedf5069ac4efa-image-1499710237929.08.27 AM.png)
      courseC_artist_loopsPrePre1a_2018_authored_hint:
        courseC_artist_loopsPrePre1a_a: |-
          The first block you will need is:
          
          ![](https://images.code.org/60e3354a2e7dd37b64833eac1e8694be-image-1499710228373.08.14 AM.png)
        courseC_artist_loopsPrePre1a_b: |-
          To move forward 50 pixels, use this block:
          
          ![](https://images.code.org/411fca4606a09641e6eedf5069ac4efa-image-1499710237929.08.27 AM.png)
      courseC_artist_prog1_authored_hint: [ ]
      courseC_artist_prog1_2018_authored_hint: [ ]
      courseC_artist_prog2_authored_hint:
        courseC_artist_prog2_a: 'Si utiliza el bloque para hacerme ''avanzar 100 píxeles'', sacaré una línea automáticamente.'
        courseC_artist_prog2_b: '¿Tienes problemas girando la esquina? Usa el bloque `girar a la derecha 90 grados`.'
      courseC_artist_prog2_2018_authored_hint:
        courseC_artist_prog2_a: 'Si utiliza el bloque para hacerme ''avanzar 100 píxeles'', sacaré una línea automáticamente.'
        courseC_artist_prog2_b: '¿Tienes problemas girando la esquina? Usa el bloque `girar a la derecha 90 grados`.'
      courseC_artist_prog3_authored_hint:
        courseC_artist_prog3_a: |-
          To create this window, just draw a square with 100 pixel sides.
          - move forward
          - turn
          - move forward
          - turn
          - move forward
          - turn
          - move forward
        courseC_artist_prog3_b: Want to make shorter code? Try using a loop in this puzzle.
      courseC_artist_prog3_2018_authored_hint:
        courseC_artist_prog3_a: |-
          To create this window, just draw a square with 100 pixel sides.
          - move forward
          - turn
          - move forward
          - turn
          - move forward
          - turn
          - move forward
        courseC_artist_prog3_b: Want to make shorter code? Try using a loop in this puzzle.
      courseC_artist_prog4_authored_hint:
        courseC_artist_prog4_a: To finish the rocket, just draw the triangle on top!
        courseC_artist_prog4_b: You can use the drop down menu on the `turn` blocks to see which angle you need!
        courseC_artist_prog4_c: |-
          To draw a triangle, you will want to:
          - move forward
          - turn left 120 degrees
          - move forward
          - turn left 120 degrees
          - move forward
      courseC_artist_prog4_2018_authored_hint:
        courseC_artist_prog4_a: To finish the rocket, just draw the triangle on top!
        courseC_artist_prog4_b: You can use the drop down menu on the `turn` blocks to see which angle you need!
        courseC_artist_prog4_c: |-
          To draw a triangle, you will want to:
          - move forward
          - turn left 120 degrees
          - move forward
          - turn left 120 degrees
          - move forward
      courseC_artist_prog5_authored_hint:
        courseC_artist_prog5_a: Slow the slider down all the way until you can run your code line-by-line to see where things go wrong.
        courseC_artist_prog5_b: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet.
        courseC_artist_prog5_c: You can use the drop down menu on the `turn` blocks to see which angle you need!
        courseC_artist_prog5_d: Each turn should be 90 degrees to the right.
      courseC_artist_prog5_2018_authored_hint:
        courseC_artist_prog5_a: Slow the slider down all the way until you can run your code line-by-line to see where things go wrong.
        courseC_artist_prog5_b: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet.
        courseC_artist_prog5_c: You can use the drop down menu on the `turn` blocks to see which angle you need!
        courseC_artist_prog5_d: Each turn should be 90 degrees to the right.
      courseC_artist_prog6_authored_hint:
        courseC_artist_prog6_a: The artist is already facing the correct way to draw his first line.
        courseC_artist_prog6_b: This diamond is really just a square that's standing on its corner.
        courseC_artist_prog6_c: Since this diamond is also a square, be sure to turn 90 degrees at the corners.
      courseC_artist_prog6_2018_authored_hint:
        courseC_artist_prog6_a: The artist is already facing the correct way to draw his first line.
        courseC_artist_prog6_b: This diamond is really just a square that's standing on its corner.
        courseC_artist_prog6_c: Since this diamond is also a square, be sure to turn 90 degrees at the corners.
      courseC_artist_prog6_predict1_authored_hint: [ ]
      courseC_artist_prog6_predict1_2018_authored_hint: [ ]
      courseC_artist_prog7_authored_hint:
        courseC_artist_prog7_a: Every angle is either 45 or 90 degrees.
        courseC_artist_prog7_b: "Does it work at the first step?  \nHow about the second?  \nWhere does it go wrong?"
        courseC_artist_prog7_c: You can use the dropdown menu on the turn blocks to see which angle you need!
        courseC_artist_prog7_d: |-
          You will want to:
          - move forward
          - turn right 45 degrees
          - move forward
          - turn right 90 degrees
          - move forward
          - turn right 45 degrees
          
          Repeat this pattern 2 times!
        courseC_artist_prog7_e: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet.
      courseC_artist_prog7_2018_authored_hint:
        courseC_artist_prog7_a: Every angle is either 45 or 90 degrees.
        courseC_artist_prog7_b: "Does it work at the first step?  \nHow about the second?  \nWhere does it go wrong?"
        courseC_artist_prog7_c: You can use the dropdown menu on the turn blocks to see which angle you need!
        courseC_artist_prog7_d: |-
          You will want to:
          - move forward
          - turn right 45 degrees
          - move forward
          - turn right 90 degrees
          - move forward
          - turn right 45 degrees
          
          Repeat this pattern 2 times!
        courseC_artist_prog7_e: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet.
      courseC_artist_prog8_authored_hint: [ ]
      courseC_artist_prog8_2018_authored_hint: [ ]
      courseC_artist_prog_challenge1-doghouse_authored_hint:
        courseC_artist_prog7_a: Use 60 degree angles to make the roof.
      courseC_artist_prog_challenge1_authored_hint:
        courseC_artist_prog_challenge1_a: You can draw this as a rectangle with a line in the middle or two different squares!
      courseC_artist_prog_challenge1_2018_authored_hint:
        courseC_artist_prog_challenge1_a: You can draw this as a rectangle with a line in the middle or two different squares!
      courseC_artist_prog_challenge2_authored_hint:
        courseC_artist_prog_challenge2_a: "You can put commands inside `repeat` block to loop them over and over. Try it!\n<xml>\n  \n          <block type=\"controls_repeat\">\n            <title name=\"TIMES\">6</title>\n            <statement name=\"DO\">\n              <block type=\"draw_move_by_constant_dropdown\">\n                <title name=\"DIR\">moveForward</title>\n                <title name=\"VALUE\" config=\"25,50,100,150,200,300\">25</title>\n                <next>\n                  <block type=\"jump_by_constant_dropdown\">\n                    <title name=\"DIR\">jumpForward</title>\n                    <title name=\"VALUE\" config=\"25,50,100,150,200,300\">25</title>\n                  </block>\n                </next>\n              </block>\n              </statement></block></xml>"
      courseC_artist_prog_challenge2a_authored_hint:
        courseC_artist_prog_challenge2_a: After you draw the first line, turn left before you draw your second line.
        courseC_artist_prog_challenge2_b: After you draw the second line, turn right before you draw your third line.
      courseC_artist_prog_challenge2a_2018_authored_hint:
        courseC_artist_prog_challenge2_a: After you draw the first line, turn left before you draw your second line.
        courseC_artist_prog_challenge2_b: After you draw the second line, turn right before you draw your third line.
      courseC_collector_loops_challenge2_authored_hint:
        courseC_maze_loops_challenge2_b: Use loops so you don't run out of `collect` blocks!
      courseC_collector_loops_challenge2_2018_authored_hint:
        courseC_maze_loops_challenge2_b: Use loops so you don't run out of `collect` blocks!
      courseC_collector_prog1_authored_hint:
        courseC_collector_prog1_a: When you are standing on a space with treasure, use the <xml><block type="collector_collect"/></xml> block to pick it up.
        courseC_collector_prog1_b: The most simple solution would be to move forward once, then collect treasure.
      courseC_collector_prog1_2018_authored_hint:
        courseC_collector_prog1_a: When you are standing on a space with treasure, use the <xml><block type="collector_collect"/></xml> block to pick it up.
        courseC_collector_prog1_b: The most simple solution would be to move forward once, then collect treasure.
      courseC_collector_prog2_authored_hint:
        courseC_collector_prog2_a: You can use four <xml><block type="maze_move"><title name="DIR">moveForward</title></block></xml> blocks or use the <xml><block type="controls_repeat_dropdown"><title name="TIMES" config="3-10">???</title></block></xml> block to make your program shorter.
        courseC_collector_prog2_b: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet.
      courseC_collector_prog2_2018_authored_hint:
        courseC_collector_prog2_a: You can use four <xml><block type="maze_move"><title name="DIR">moveForward</title></block></xml> blocks or use the <xml><block type="controls_repeat_dropdown"><title name="TIMES" config="3-10">???</title></block></xml> block to make your program shorter.
        courseC_collector_prog2_b: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet.
      courseC_collector_prog3_authored_hint:
        courseC_collector_prog3_a: The program will only run the blocks that are connected to the <xml><block type="when_run"/></xml> block.
        courseC_collector_prog3_b: Try using the "Step" button to run your code one line at a time.  Do you see where the code goes wrong?
        courseC_collector_prog3_c: If you are having trouble figuring this puzzle out, try writing the moves down on a piece of paper.
      courseC_collector_prog3_2018_authored_hint:
        courseC_collector_prog3_a: The program will only run the blocks that are connected to the <xml><block type="when_run"/></xml> block.
        courseC_collector_prog3_b: Try using the "Step" button to run your code one line at a time.  Do you see where the code goes wrong?
        courseC_collector_prog3_c: If you are having trouble figuring this puzzle out, try writing the moves down on a piece of paper.
      courseC_collector_prog4_authored_hint:
        courseC_collector_prog4_a: If you get stuck, try writing out the steps on a piece of paper.
        courseC_collector_prog4_b: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet.
        courseC_collector_prog4_c: Try this option for a path.
      courseC_collector_prog4_2018_authored_hint:
        courseC_collector_prog4_a: If you get stuck, try writing out the steps on a piece of paper.
        courseC_collector_prog4_b: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet.
        courseC_collector_prog4_c: Try this option for a path.
      courseC_collector_prog5_authored_hint:
        courseC_collector_prog5_a: "\"Does it work at the first step?\nDoes it work at the second step? \nWhere do things go wrong?\""
        courseC_collector_prog5_b: If you fixed one bug and the program still doesn't work, use the steps above to find more bugs.
        courseC_collector_prog5_c: If you get stuck, try writing out the steps on a piece of paper.
        courseC_collector_prog5_d: Follow the path to collect the treasure.
      courseC_collector_prog5_2018_authored_hint:
        courseC_collector_prog5_a: "\"Does it work at the first step?\nDoes it work at the second step? \nWhere do things go wrong?\""
        courseC_collector_prog5_b: If you fixed one bug and the program still doesn't work, use the steps above to find more bugs.
        courseC_collector_prog5_c: If you get stuck, try writing out the steps on a piece of paper.
        courseC_collector_prog5_d: Follow the path to collect the treasure.
      courseC_collector_prog6_authored_hint:
        courseC_collector_prog6_a: "Can you figure out what is going wrong?  \n\nTry using the \"Step\" button to find errors by running your code line by line."
        courseC_collector_prog6_b: Stuck?  Try this path to collect the treasure.
      courseC_collector_prog6_2018_authored_hint:
        courseC_collector_prog6_a: "Can you figure out what is going wrong?  \n\nTry using the \"Step\" button to find errors by running your code line by line."
        courseC_collector_prog6_b: Stuck?  Try this path to collect the treasure.
      courseC_collector_prog7_authored_hint:
        courseC_collector_prog7_a: 'There is already a lot of great code in the workspace.  You don''t need to delete any of it to solve this puzzle.  '
        courseC_collector_prog7_b: Don't see the block you need to get the adventurer moving in the right direction?  Pull one from the toolbox.
        courseC_collector_prog7_c: Having trouble seeing a route to collect all of the treasure?  Try this path!
      courseC_collector_prog7_2018_authored_hint:
        courseC_collector_prog7_a: 'There is already a lot of great code in the workspace.  You don''t need to delete any of it to solve this puzzle.  '
        courseC_collector_prog7_b: Don't see the block you need to get the adventurer moving in the right direction?  Pull one from the toolbox.
        courseC_collector_prog7_c: Having trouble seeing a route to collect all of the treasure?  Try this path!
      courseC_collector_prog8_authored_hint: [ ]
      courseC_collector_prog8_2018_authored_hint: [ ]
      courseC_collector_prog9_authored_hint: [ ]
      courseC_collector_prog9_2018_authored_hint: [ ]
      courseC_collector_progA_authored_hint:
        courseC_collector_progA_a: Try using the "Step" button to go through your code line by line.
      courseC_collector_prog_challenge1_authored_hint:
        courseC_collector_prog_challenge1_a: You can use the `collect` block many times to collect the extra treasure.
      courseC_collector_prog_challenge1_2018_authored_hint:
        courseC_collector_prog_challenge1_a: You can use the `collect` block many times to collect the extra treasure.
      courseC_collector_prog_challenge2_authored_hint:
        courseC_collector_prog_challenge1_a: You can use more than one `collect` block at each space.
        courseC_collector_prog_challenge1_b: Lost your way?  Try this path to solve the puzzle!
      courseC_collector_prog_challenge2_2018_authored_hint:
        courseC_collector_prog_challenge1_a: You can use more than one `collect` block at each space.
        courseC_collector_prog_challenge1_b: Lost your way?  Try this path to solve the puzzle!
      courseC_external_events_authored_hint: [ ]
      courseC_flappy_events1_authored_hint:
        courseC_flappy_events1_a: "![](https://images.code.org/5f1d0edf6ebb44d98ffdce623cfe0ad4-image-1501192487040.gif)"
      courseC_flappy_events1_2018_authored_hint:
        courseC_flappy_events1_a: "![](https://images.code.org/5f1d0edf6ebb44d98ffdce623cfe0ad4-image-1501192487040.gif)"
      courseC_flappy_events2_authored_hint:
        courseC_flappy_events2_a: 'The block you need to add is called `set speed`. '
        courseC_flappy_events2_b: Connect the `set speed` block to the `when run` block to solve this puzzle.
      courseC_flappy_events2_2018_authored_hint:
        courseC_flappy_events2_a: 'The block you need to add is called `set speed`. '
        courseC_flappy_events2_b: Connect the `set speed` block to the `when run` block to solve this puzzle.
      courseC_flappy_events3_authored_hint:
        courseC_flappy_events3_a: If something isn't working correctly, make sure your blocks are connected to the correct events in the workspace.
      courseC_flappy_events3_2018_authored_hint:
        courseC_flappy_events3_a: If something isn't working correctly, make sure your blocks are connected to the correct events in the workspace.
      courseC_flappy_events4_authored_hint:
        courseC_flappy_events4_a: Connect the `end game` block to `when hit an obstacle` to solve this puzzle.
      courseC_flappy_events4_2018_authored_hint:
        courseC_flappy_events4_a: Connect the `end game` block to `when hit an obstacle` to solve this puzzle.
      courseC_flappy_events5_authored_hint:
        courseC_flappy_events5_a: You will need to use the `score a point` block to pass this level.
      courseC_flappy_events5_2018_authored_hint:
        courseC_flappy_events5_a: You will need to use the `score a point` block to pass this level.
      courseC_flappy_events6_authored_hint:
        courseC_flappy_events6_a: Try connecting the `flap a ____ amount` block to the `when click` event.
      courseC_flappy_events6_2018_authored_hint:
        courseC_flappy_events6_a: Try connecting the `flap a ____ amount` block to the `when click` event.
      courseC_flappy_events7_authored_hint:
        courseC_flappy_events7_a: 'You can change the background using the `set scene` block. '
      courseC_flappy_events7_2018_authored_hint:
        courseC_flappy_events7_a: 'You can change the background using the `set scene` block. '
      courseC_flappy_events8_authored_hint:
        courseC_flappy_events8_a: Try connecting a second `set scene` block under the `when pass obstacle` event to pass this level.
      courseC_flappy_events8_2018_authored_hint:
        courseC_flappy_events8_a: Try connecting a second `set scene` block under the `when pass obstacle` event to pass this level.
      courseC_flappy_events9_authored_hint:
        courseC_flappy_events9_a: Connect the `set score 0` block to the `when hit an obstacle` event to pass this level.
      courseC_flappy_events9_2018_authored_hint:
        courseC_flappy_events9_a: Connect the `set score 0` block to the `when hit an obstacle` event to pass this level.
      courseC_flappy_events_template_authored_hint: [ ]
      courseC_flappy_events_template_2018_authored_hint: [ ]
      courseC_harvester_loops1_authored_hint:
        courseC_harvester_loops1_a: Once you have moved to a pumpkin, use <xml><block type="harvester_pumpkin"/></xml> to collect it.
        courseC_harvester_loops1_b: You can use a loop with the <xml><block type="harvester_pumpkin"/></xml> block to pick more than one pumpkin from a square.
      courseC_harvester_loops10_authored_hint: [ ]
      courseC_harvester_loops10_2018_authored_hint: [ ]
      courseC_harvester_loops11_authored_hint: [ ]
      courseC_harvester_loops11_2018_authored_hint: [ ]
      courseC_harvester_loops1_2018_authored_hint:
        courseC_harvester_loops1_a: Once you have moved to a pumpkin, use <xml><block type="harvester_pumpkin"/></xml> to collect it.
        courseC_harvester_loops1_b: You can use a loop with the <xml><block type="harvester_pumpkin"/></xml> block to pick more than one pumpkin from a square.
      courseC_harvester_loops2_authored_hint:
        courseC_harvester_loops2_a: If you get stuck, try writing the steps on paper and looking for repeating patterns.
        courseC_harvester_loops2_b: You will need one `repeat` loop after another.
        courseC_harvester_loops2_c: One loop will repeat the `move forward` command, and the other will repeat the `pick pumpkin` command.
      courseC_harvester_loops2_2018_authored_hint:
        courseC_harvester_loops2_a: If you get stuck, try writing the steps on paper and looking for repeating patterns.
        courseC_harvester_loops2_b: You will need one `repeat` loop after another.
        courseC_harvester_loops2_c: One loop will repeat the `move forward` command, and the other will repeat the `pick pumpkin` command.
      courseC_harvester_loops3_authored_hint:
        courseC_harvester_loops3_a: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet.
        courseC_harvester_loops3_b: For the first pumpkins, you can use code very similar to the last puzzle. Which way do you need to turn afterwards?
        courseC_harvester_loops3_c: If you want to simplify your code, you can actually put one loop inside of another! This is called a **nested loop**.
      courseC_harvester_loops3_2018_authored_hint:
        courseC_harvester_loops3_a: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet.
        courseC_harvester_loops3_b: For the first pumpkins, you can use code very similar to the last puzzle. Which way do you need to turn afterwards?
        courseC_harvester_loops3_c: If you want to simplify your code, you can actually put one loop inside of another! This is called a **nested loop**.
      courseC_harvester_loops4_authored_hint:
        courseC_harvester_loops4_a: Use the new `pick corn` block to collect the corn.
        courseC_harvester_loops4_b: You can use multiple repeat loops in your code, some to pick corn and some to pick pumpkins.
        courseC_harvester_loops4_c: If you want to simplify your code, you can actually put one loop inside of another! This is called a **nested loop**.
      courseC_harvester_loops4_2018_authored_hint:
        courseC_harvester_loops4_a: Use the new `pick corn` block to collect the corn.
        courseC_harvester_loops4_b: You can use multiple repeat loops in your code, some to pick corn and some to pick pumpkins.
        courseC_harvester_loops4_c: If you want to simplify your code, you can actually put one loop inside of another! This is called a **nested loop**.
      courseC_harvester_loops5_authored_hint:
        courseC_harvester_loops5_a: If you get stuck, try drawing the entire program and then looking for repeating patterns.
        courseC_harvester_loops5_b: Does this stair step look familiar from other puzzles? The movements should be similar, just remember to collect crops along the way.
      courseC_harvester_loops5_2018_authored_hint:
        courseC_harvester_loops5_a: If you get stuck, try drawing the entire program and then looking for repeating patterns.
        courseC_harvester_loops5_b: Does this stair step look familiar from other puzzles? The movements should be similar, just remember to collect crops along the way.
      courseC_harvester_loops6_authored_hint:
        courseC_harvester_loops6_a: Remember you can put multiple blocks in one repeat loop.
        courseC_harvester_loops6_b: Don’t forget to turn at the end of the row of corn.
      courseC_harvester_loops6_2018_authored_hint:
        courseC_harvester_loops6_a: Remember you can put multiple blocks in one repeat loop.
        courseC_harvester_loops6_b: Don’t forget to turn at the end of the row of corn.
      courseC_harvester_loops7_authored_hint:
        courseC_harvester_loops7_a: You can solve this puzzle two ways, either get the corn or the pumpkins first.
        courseC_harvester_loops7_b: You will need multiple `repeat` loops to solve this puzzle.
      courseC_harvester_loops7_2018_authored_hint:
        courseC_harvester_loops7_a: You can solve this puzzle two ways, either get the corn or the pumpkins first.
        courseC_harvester_loops7_b: You will need multiple `repeat` loops to solve this puzzle.
      courseC_harvester_loops8_authored_hint:
        courseC_harvester_loops8_a: Does this stair step look familiar from the previous puzzle? The movements should be similar, just remember to collect crops along the way.
        courseC_harvester_loops8_b: If you want to simplify your code more, you can actually put one `repeat` loop inside of another! This is called a **nested loop**.
      courseC_harvester_loops8_2018_authored_hint:
        courseC_harvester_loops8_a: Does this stair step look familiar from the previous puzzle? The movements should be similar, just remember to collect crops along the way.
        courseC_harvester_loops8_b: If you want to simplify your code more, you can actually put one `repeat` loop inside of another! This is called a **nested loop**.
      courseC_harvester_loops9_authored_hint: [ ]
      courseC_harvester_loops9_2018_authored_hint: [ ]
      courseC_harvester_loops_challenge1_authored_hint:
        courseC_harvester_loops_challenge1_a: This is too hard without loops!
        courseC_harvester_loops_challenge1_b: You can repeat `move forward` and `pick corn` as many times as you need, then turn right at each corner.
        courseC_harvester_loops_challenge1_c: |-
          The best way to collect the first four corn uses a `repeat` block inside of another `repeat` block. You can use this pattern for the rest of the puzzle too!
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="harvester_corn"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </statement>
          </block></next></block></xml>
      courseC_harvester_loops_challenge1a_authored_hint:
        courseC_harvester_loops_challenge1_a: This is too hard without loops!
        courseC_harvester_loops_challenge1_b: You can repeat `move forward` and `pick corn` as many times as you need, then `turn right` at each corner.
        courseC_harvester_loops_challenge1_c: |-
          The best way to collect the corn in the middle uses a `repeat` block inside of another `repeat` block.
          
          <xml><block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="controls_repeat">
          <title name="TIMES">4</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="harvester_corn"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </statement>
          </block></xml>
      courseC_harvester_loops_challenge1a_2018_authored_hint:
        courseC_harvester_loops_challenge1_a: This is too hard without loops!
        courseC_harvester_loops_challenge1_b: You can repeat `move forward` and `pick corn` as many times as you need, then `turn right` at each corner.
        courseC_harvester_loops_challenge1_c: |-
          The best way to collect the corn in the middle uses a `repeat` block inside of another `repeat` block.
          
          <xml><block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="controls_repeat">
          <title name="TIMES">4</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="harvester_corn"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </statement>
          </block></xml>
      courseC_harvester_loops_challenge2_authored_hint:
        courseC_harvester_loops_challenge2_a: One way to solve this looks like a zig-zag. Another way looks like a spiral! There are lots of different solutions to a puzzle like this. Be persistent!
        courseC_harvester_loops_challenge2_b: You can repeat `move forward` and `pick lettuce` as many times as you need to, then turn at each corner.
        courseC_harvester_loops_challenge2_c: |
          This zig-zag pattern can be repeated twice to finish the puzzle with just 20 blocks!
          
          ![](https://images.code.org/26cfaf6fe4a275e266b51e9ef3711171-image-1493502306380.18.52 PM copy.png)
        courseC_harvester_loops_challenge2_d: |-
          This spiral pattern can be coded with just 18 blocks!
          
          ![](https://images.code.org/0bfc0a0ed6783fae908368a6e6d12c02-image-1493501358990.18.52 PM.png)
      courseC_harvester_loops_challenge2_2018_authored_hint:
        courseC_harvester_loops_challenge2_a: One way to solve this looks like a zig-zag. Another way looks like a spiral! There are lots of different solutions to a puzzle like this. Be persistent!
        courseC_harvester_loops_challenge2_b: You can repeat `move forward` and `pick lettuce` as many times as you need to, then turn at each corner.
        courseC_harvester_loops_challenge2_c: |
          This zig-zag pattern can be repeated twice to finish the puzzle with just 20 blocks!
          
          ![](https://images.code.org/26cfaf6fe4a275e266b51e9ef3711171-image-1493502306380.18.52 PM copy.png)
        courseC_harvester_loops_challenge2_d: |-
          This spiral pattern can be coded with just 18 blocks!
          
          ![](https://images.code.org/0bfc0a0ed6783fae908368a6e6d12c02-image-1493501358990.18.52 PM.png)
      courseC_harvester_loops_forVid_authored_hint: [ ]
      courseC_maze_debugging1_authored_hint:
        courseC_maze_debugging1_a: |-
          - Does everything work after the first step?
          - Does it still work after the second?
          - Where does it go wrong?
        courseC_maze_debugging1_b: There is 1 block you need to add to complete this puzzle.
      courseC_maze_debugging1_2018_authored_hint:
        courseC_maze_debugging1_a: |-
          - Does everything work after the first step?
          - Does it still work after the second?
          - Where does it go wrong?
        courseC_maze_debugging1_b: There is 1 block you need to add to complete this puzzle.
      courseC_maze_debugging2_authored_hint:
        courseC_maze_debugging2_a: There is a lot of valuable code in the workspace.  Don't just delete it all and start over!
        courseC_maze_debugging2_b: |-
          - Does everything work after the first step?
          - Does it still work after the second?
          - Where does it go wrong?
        courseC_maze_debugging2_c: '¿No puedes averiguar lo que está mal? Intenta ejecutar el código un par de veces para ver lo que sucede.'
      courseC_maze_debugging2_2018_authored_hint:
        courseC_maze_debugging2_a: There is a lot of valuable code in the workspace.  Don't just delete it all and start over!
        courseC_maze_debugging2_b: |-
          - Does everything work after the first step?
          - Does it still work after the second?
          - Where does it go wrong?
        courseC_maze_debugging2_c: '¿No puedes averiguar lo que está mal? Intenta ejecutar el código un par de veces para ver lo que sucede.'
      courseC_maze_debugging3_authored_hint:
        courseC_maze_debugging3_a: |-
          To delete a block from the middle of your code, drag all of the blocks to another part of the workspace.
          
          Drag the block you want to delete back to the toolbox.
          
          Finally, put your other blocks back where they belong.
          
          ![](https://images.code.org/bbafa5a100505b2b99a3f43ad3195471-image-1479933232821.gif)
        courseC_maze_debugging3_b: '¿No puedes averiguar lo que está mal? Intenta ejecutar el código un par de veces para ver lo que sucede.'
      courseC_maze_debugging3_2018_authored_hint:
        courseC_maze_debugging3_a: |-
          To delete a block from the middle of your code, drag all of the blocks to another part of the workspace.
          
          Drag the block you want to delete back to the toolbox.
          
          Finally, put your other blocks back where they belong.
          
          ![](https://images.code.org/bbafa5a100505b2b99a3f43ad3195471-image-1479933232821.gif)
        courseC_maze_debugging3_b: '¿No puedes averiguar lo que está mal? Intenta ejecutar el código un par de veces para ver lo que sucede.'
      courseC_maze_debugging4_authored_hint:
        courseC_maze_debugging4_a: Use the "Step" button to run through the instructions one at a time.  Does that help you find the line where things go wrong?
        courseC_maze_debugging4_b: One of the turns is making Scrat go in the wrong direction. Can you figure out which one?
      courseC_maze_debugging4_2018_authored_hint:
        courseC_maze_debugging4_a: Use the "Step" button to run through the instructions one at a time.  Does that help you find the line where things go wrong?
        courseC_maze_debugging4_b: One of the turns is making Scrat go in the wrong direction. Can you figure out which one?
      courseC_maze_debugging5_authored_hint:
        courseC_maze_debugging5_a: "There are lots of helpful blocks in the workspace already.  Don't delete them all! \n\nUse the \"Step\" button to go through and figure out where the code goes wrong."
        courseC_maze_debugging5_b: Try saying what Scrat should do out loud.  Is it the same as the code in the workspace?  What goes wrong?
      courseC_maze_debugging5_2018_authored_hint:
        courseC_maze_debugging5_a: "There are lots of helpful blocks in the workspace already.  Don't delete them all! \n\nUse the \"Step\" button to go through and figure out where the code goes wrong."
        courseC_maze_debugging5_b: Try saying what Scrat should do out loud.  Is it the same as the code in the workspace?  What goes wrong?
      courseC_maze_debugging6_authored_hint:
        courseC_maze_debugging6_a: |-
          - What is Scrat supposed to do?
          - What does Scrat do?
          - What does that tell you?
        courseC_maze_debugging6_b: |-
          Once you've found and fixed the first bug, go through the debugging process again to find the second one.
          
          Repeat the process until the program works!
      courseC_maze_debugging6_2018_authored_hint:
        courseC_maze_debugging6_a: |-
          - What is Scrat supposed to do?
          - What does Scrat do?
          - What does that tell you?
        courseC_maze_debugging6_b: |-
          Once you've found and fixed the first bug, go through the debugging process again to find the second one.
          
          Repeat the process until the program works!
      courseC_maze_debugging7_authored_hint:
        courseC_maze_debugging7_a: |-
          - Does everything work at the first step?
          - How about the second step?
          - Where does it go wrong?
        courseC_maze_debugging7_b: Don't forget to use the "Step" button to run the program line by line!
        courseC_maze_debugging7_c: |-
          After you find and fix the first bug, make sure to use the debugging process again to find the next one.
          
          Repeat the debugging process until the program works!
      courseC_maze_debugging7_2018_authored_hint:
        courseC_maze_debugging7_a: |-
          - Does everything work at the first step?
          - How about the second step?
          - Where does it go wrong?
        courseC_maze_debugging7_b: Don't forget to use the "Step" button to run the program line by line!
        courseC_maze_debugging7_c: |-
          After you find and fix the first bug, make sure to use the debugging process again to find the next one.
          
          Repeat the debugging process until the program works!
      courseC_maze_debugging8_authored_hint:
        courseC_maze_debugging8_a: |-
          - What is Scrat supposed to do?
          - What does Scrat do?
          - What does that tell you?
      courseC_maze_debugging8_predict1_authored_hint: [ ]
      courseC_maze_debugging8_predict1_2018_authored_hint: [ ]
      courseC_maze_debugging9_authored_hint: [ ]
      courseC_maze_debugging9_2018_authored_hint: [ ]
      courseC_maze_debugging_challenge1_authored_hint:
        courseC_maze_debugging_challenge1_a: Left or right? It's up to you!
        courseC_maze_debugging_challenge1_b: Scrat's path is the shape of a rectangle! He needs to turn the same way each time.
        courseC_maze_debugging_challenge1_c: If you are getting stuck, you can always start over and find a new way!
      courseC_maze_debugging_challenge1_2018_authored_hint:
        courseC_maze_debugging_challenge1_a: Left or right? It's up to you!
        courseC_maze_debugging_challenge1_b: Scrat's path is the shape of a rectangle! He needs to turn the same way each time.
        courseC_maze_debugging_challenge1_c: If you are getting stuck, you can always start over and find a new way!
      courseC_maze_debugging_challenge2_authored_hint:
        courseC_maze_debugging_challenge2_b: If you are getting stuck, try debugging the code.  Where does it go wrong?
        courseC_maze_debugging_challenge2_c: |-
          There are two different paths you can follow by just moving forward and turning four times. If you find one way to use a loop, there may be even more!
          
          ![](https://images.code.org/8a4665671cda35fea1f629a5bcc39e26-image-1493502743154.48.05 PM.png)
      courseC_maze_debugging_challenge2_2018_authored_hint:
        courseC_maze_debugging_challenge2_b: If you are getting stuck, try debugging the code.  Where does it go wrong?
        courseC_maze_debugging_challenge2_c: |-
          There are two different paths you can follow by just moving forward and turning four times. If you find one way to use a loop, there may be even more!
          
          ![](https://images.code.org/8a4665671cda35fea1f629a5bcc39e26-image-1493502743154.48.05 PM.png)
      courseC_maze_loops10_authored_hint: [ ]
      courseC_maze_loops10_predict2_authored_hint: [ ]
      courseC_maze_loops11_authored_hint: [ ]
      courseC_maze_loops2_authored_hint:
        courseC_maze_loops2_a: You can solve this puzzle with just three blocks, including `when run`.
        courseC_maze_loops2_b: Try putting the `move forward` block inside of a `repeat` block to create a loop.
        courseC_maze_loops2_c: You need to repeat the `move forward` command 5 times to solve this puzzle.
      courseC_maze_loops2_predict1_authored_hint:
        courseC_maze_loops2_a: You can solve this puzzle with just three blocks, including `when run`.
        courseC_maze_loops2_b: Try putting the `move forward` block inside of a `repeat` block to create a loop.
        courseC_maze_loops2_c: You need to repeat the `move forward` command 5 times to solve this puzzle.
      courseC_maze_loops3_authored_hint:
        courseC_maze_loops3_a: This puzzle is very similar to the last one.
        courseC_maze_loops3_b: Use a `repeat 5 times` block to create the loop.
      courseC_maze_loops4_authored_hint:
        courseC_maze_loops4_a: Not all command blocks should be repeated.
        courseC_maze_loops4_b: Use two `repeat` blocks set to different numbers.
        courseC_maze_loops4_c: "`Turn right` once between the two loops."
      courseC_maze_loops5_authored_hint:
        courseC_maze_loops5_a: The best solution uses two `move forward` commands and one loop.
      courseC_maze_loops6_authored_hint:
        courseC_maze_loops6_a: If the pattern is hard to see, try coding it all out first and see what repeats over and over before you put the loops in.
        courseC_maze_loops6_b: "Para poner muchos bloques dentro de un bucle 'repetir', simplemente arrastra un bucle hacia el espacio de trabajo, luego arrastra todos los bloques desde el programa de inicio dentro de él!"
      courseC_maze_loops7_authored_hint:
        courseC_maze_loops7_a: Si el patrón es difícil de ver, intenta programarlo todo primero y ve qué cosas se repiten una y otra vez antes de colocar los bucles.
      courseC_maze_loops8_authored_hint:
        courseC_puppy_loops8courseC_maze_loops8_a: Try thinking about this problem in small parts. Take your time. You don't need to solve it on the first try!
        courseC_puppy_loops8courseC_maze_loops8_b: The first half of this path is similar to the stairs from the last puzzle, but it goes in a different direction.
        courseC_puppy_loops8courseC_maze_loops8_c: "There are different ways to solve this. \n\nYou will want to use at least two loops, and repeat a set of actions in the first one, then a single `move forward` in the other."
      courseC_maze_loops9_authored_hint:
        courseC_maze_loops9_1: 'If you''re having trouble finding where the code should repeat, try writing it down on a piece of paper and looking for a pattern. '
      courseC_maze_loops_challenge1_authored_hint:
        courseC_maze_loops_challenge1_a: Think about this path as being three different pieces. Each one has a pattern you can repeat.
        courseC_maze_loops_challenge1_b: In between each `repeat` block, you will need to `turn left` or `turn right` to get ready Scrat for the next pattern.
      courseC_maze_loops_challenge1a_authored_hint:
        courseC_maze_loops_challenge1_a: Think about this path as being two different pieces. Each one has a pattern you can repeat.
        courseC_maze_loops_challenge1_b: Can you remember how to use loops to repeat a staircase pattern?
      courseC_maze_loops_challenge1a_2018_authored_hint:
        courseC_maze_loops_challenge1_a: Think about this path as being two different pieces. Each one has a pattern you can repeat.
        courseC_maze_loops_challenge1_b: Can you remember how to use loops to repeat a staircase pattern?
      courseC_maze_loops_challenge2_authored_hint:
        courseC_maze_loops_challenge2_a: The original code would work great - if there was only one piece of treasure in each pile!
        courseC_maze_loops_challenge2_b: Use loops so you don't run out of `collect` blocks!
      courseC_maze_programming1_authored_hint:
        courseC_maze_programming1_0: Make sure all of the blocks have been fully snapped together, then click "Run" again.
      courseC_maze_programming1_2018_authored_hint:
        courseC_maze_programming1_0: Make sure all of the blocks have been fully snapped together, then click "Run" again.
      courseC_maze_programming2_authored_hint:
        courseC_maze_programming2_a: To use a <xml><block type="maze_moveForward"/></xml> block, drag it out of the toolbox and snap it to the <xml><block type="when_run"/></xml> block.
        courseC_maze_programming2_b: Make sure all of the blocks have been fully snapped together, then click "Run" again.
      courseC_maze_programming2_2018_authored_hint:
        courseC_maze_programming2_a: To use a <xml><block type="maze_moveForward"/></xml> block, drag it out of the toolbox and snap it to the <xml><block type="when_run"/></xml> block.
        courseC_maze_programming2_b: Make sure all of the blocks have been fully snapped together, then click "Run" again.
      courseC_maze_programming3_authored_hint:
        courseC_maze_programming3_a: Try running the code first to see where it goes wrong.
        courseC_maze_programming3_b: |-
          ![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)
          
          To delete a block from the middle of your code, drag all of the blocks to another part of the workspace.
          
          Drag the block you want to delete back to the toolbox.
          
          Finally, put your other blocks back where they belong.
      courseC_maze_programming3_2018_authored_hint:
        courseC_maze_programming3_a: Try running the code first to see where it goes wrong.
        courseC_maze_programming3_b: |-
          ![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)
          
          To delete a block from the middle of your code, drag all of the blocks to another part of the workspace.
          
          Drag the block you want to delete back to the toolbox.
          
          Finally, put your other blocks back where they belong.
      courseC_maze_programming4_authored_hint:
        courseC_maze_programming4_a: Remember that when you turn, you are turning from the *bird's* point of view.  If you turn right, the bird will point down.
        courseC_maze_programming4_b: |-
          To follow the path:
          - move forward
          - turn one way
          - move forward
          - turn back the other way
          - move forward
      courseC_maze_programming4_2018_authored_hint:
        courseC_maze_programming4_a: Remember that when you turn, you are turning from the *bird's* point of view.  If you turn right, the bird will point down.
        courseC_maze_programming4_b: |-
          To follow the path:
          - move forward
          - turn one way
          - move forward
          - turn back the other way
          - move forward
      courseC_maze_programming5_authored_hint:
        courseC_maze_programming5_a: Try using the "Step" button to run your code line by line. Can you figure out what you need to do next?
        courseC_maze_programming5_b: The bird will need to make one turn to complete this puzzle. Can you figure out which way?
        courseC_maze_programming5_c: The solution will have two `move forward` blocks, a turn, and two more `move forward` blocks.
      courseC_maze_programming5_2018_authored_hint:
        courseC_maze_programming5_a: Try using the "Step" button to run your code line by line. Can you figure out what you need to do next?
        courseC_maze_programming5_b: The bird will need to make one turn to complete this puzzle. Can you figure out which way?
        courseC_maze_programming5_c: The solution will have two `move forward` blocks, a turn, and two more `move forward` blocks.
      courseC_maze_programming6_authored_hint:
        courseC_maze_programming6_a: '¡Aquí tienes dos caminos para resolver el puzzle!'
        courseC_maze_programming6_b: Follow your finger from the bird to the pig, which steps did you take?
        courseC_maze_programming6_c: Remember you have to turn first, since the bird starts facing a wall.
        courseC_maze_programming6_d: Feel stuck?  Look at this path!
      courseC_maze_programming6_2018_authored_hint:
        courseC_maze_programming6_a: '¡Aquí tienes dos caminos para resolver el puzzle!'
        courseC_maze_programming6_b: Follow your finger from the bird to the pig, which steps did you take?
        courseC_maze_programming6_c: Remember you have to turn first, since the bird starts facing a wall.
        courseC_maze_programming6_d: Feel stuck?  Look at this path!
      courseC_maze_programming7_authored_hint:
        courseC_maze_programming7_a: Don't forget to use the "Step" button to go through block by block and look for errors.
        courseC_maze_programming7_b: If you are having trouble figuring this puzzle out, try writing the moves down on a piece of paper.
      courseC_maze_programming7_2018_authored_hint:
        courseC_maze_programming7_a: Don't forget to use the "Step" button to go through block by block and look for errors.
        courseC_maze_programming7_b: If you are having trouble figuring this puzzle out, try writing the moves down on a piece of paper.
      courseC_maze_programming8_authored_hint:
        courseC_maze_programming8_a: Remember you can use the "Step" button to look through your code line-by-line if you get stuck.
        courseC_maze_programming8_b: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet.
      courseC_maze_programming8_2018_authored_hint:
        courseC_maze_programming8_a: Remember you can use the "Step" button to look through your code line-by-line if you get stuck.
        courseC_maze_programming8_b: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet.
      courseC_maze_programming8_predict1_authored_hint: [ ]
      courseC_maze_programming8_predict1_2018_authored_hint: [ ]
      courseC_maze_programming9_authored_hint: [ ]
      courseC_maze_programming9_2018_authored_hint: [ ]
      courseC_maze_programming_challenge1_authored_hint:
        courseC_maze_programming_challenge1_a: There are many ways to get to the pig. Use your finger to find a path and then program it!
      courseC_maze_programming_challenge1_2018_authored_hint:
        courseC_maze_programming_challenge1_a: There are many ways to get to the pig. Use your finger to find a path and then program it!
      courseC_maze_programming_challenge2_authored_hint:
        courseC_maze_programming_challenge2_a: '*"If you send me backwards, be extra careful that I turn the correct way!"*'
        courseC_maze_programming_challenge2_b: |-
          The shortest solution uses only 5 blocks, but it uses this block:
          <xml><block type="controls_repeat_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
      courseC_maze_programming_challenge2_2018_authored_hint:
        courseC_maze_programming_challenge2_a: '*"If you send me backwards, be extra careful that I turn the correct way!"*'
        courseC_maze_programming_challenge2_b: |-
          The shortest solution uses only 5 blocks, but it uses this block:
          <xml><block type="controls_repeat_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
      courseC_playLab_embedded_authored_hint: [ ]
      courseC_puppy_loops10_authored_hint:
        courseC_puppy_loops9_1: I need to move two or three time between each turn.
      courseC_puppy_loops11_authored_hint: [ ]
      courseC_puppy_loops8_authored_hint:
        2-3_Maze_Loops_17_a: Try thinking about this problem in small parts. Take your time. You don't need to solve it on the first try!
        2-3_Maze_Loops_17_b: The first half of this path is similar to the stair step from the last puzzle, but it goes a different direction.
        courseC_puppy_loops8_c: There are different ways to solve this. You will want to use at least two loops, and repeat either a set of actions or a single movement.
      courseC_puppy_loops8courseC_maze_loops8_authored_hint:
        courseC_puppy_loops8courseC_maze_loops8_a: Try thinking about this problem in small parts. Take your time. You don't need to solve it on the first try!
        courseC_puppy_loops8courseC_maze_loops8_b: The first half of this path is similar to the stairs from the last puzzle, but it goes in a different direction.
        courseC_puppy_loops8courseC_maze_loops8_c: "There are different ways to solve this. \n\nYou will want to use at least two loops, and repeat a set of actions in the first one, then a single `move forward` in the other."
      courseC_puppy_loops9_authored_hint:
        courseC_puppy_loops9_1: If you repeat the first few actions, you can get me to the pig with just four more blocks!
      courseC_starWars_loops1_authored_hint:
        courseC_starWars_loops1_a: When BB-8 rolls over scrap metal he picks it up automatically.
        courseC_starWars_loops1_b: Don't be afraid to make a mistake! Run the code to see what happens, even if you haven't solved the puzzle yet.
        courseC_starWars_loops1_c: You will want to `move forward` five times to solve this puzzle.
      courseC_starWars_loops10_authored_hint:
        courseC_starWars_loops10_a: Doesn't this pattern look like a giant set of stair steps? See if you can use what you learned from previous puzzles to get all of the turns.
        courseC_starWars_loops10_b: "If you want to use less code, you can put one `repeat` loop inside of another!   \nThis is called a **nested loop**."
        courseC_starWars_loops10_c: Don't be afraid to make a mistake! Run the code to see what happens, even if you haven't solved the puzzle yet.
      courseC_starWars_loops10_2018_authored_hint:
        courseC_starWars_loops10_a: Doesn't this pattern look like a giant set of stair steps? See if you can use what you learned from previous puzzles to get all of the turns.
        courseC_starWars_loops10_b: "If you want to use less code, you can put one `repeat` loop inside of another!   \nThis is called a **nested loop**."
        courseC_starWars_loops10_c: Don't be afraid to make a mistake! Run the code to see what happens, even if you haven't solved the puzzle yet.
      courseC_starWars_loops10_predict2_authored_hint: [ ]
      courseC_starWars_loops10_predict2_2018_authored_hint: [ ]
      courseC_starWars_loops11_authored_hint: [ ]
      courseC_starWars_loops11_2018_authored_hint: [ ]
      courseC_starWars_loops1_2018_authored_hint:
        courseC_starWars_loops1_a: When BB-8 rolls over scrap metal he picks it up automatically.
        courseC_starWars_loops1_b: Don't be afraid to make a mistake! Run the code to see what happens, even if you haven't solved the puzzle yet.
        courseC_starWars_loops1_c: You will want to `move forward` five times to solve this puzzle.
      courseC_starWars_loops2_authored_hint:
        courseC_starWars_loops2_a: To repeat code, drag out a `repeat` loop, then put the block you want inside of it.
      courseC_starWars_loops2_2018_authored_hint:
        courseC_starWars_loops2_a: To repeat code, drag out a `repeat` loop, then put the block you want inside of it.
      courseC_starWars_loops4_authored_hint:
        courseC_starWars_loops4_c: Clicking on the small arrow next to "left" on the turn block will let you change it to  "right".
        courseC_starWars_loops4_a: Use two `repeat` blocks.
        courseC_starWars_loops4_b: 'Each `repeat` loop will have only one command inside of it: `move forward`.'
      courseC_starWars_loops4_2018_authored_hint:
        courseC_starWars_loops4_c: Clicking on the small arrow next to "left" on the turn block will let you change it to  "right".
        courseC_starWars_loops4_a: Use two `repeat` blocks.
        courseC_starWars_loops4_b: 'Each `repeat` loop will have only one command inside of it: `move forward`.'
      courseC_starWars_loops5_authored_hint:
        courseC_starWars_loops5_b: To move down, you have to turn and then move forward.
        courseC_starWars_loops5_a: The best solution uses a turn, then a single `move forward`, another turn, then a loop.
      courseC_starWars_loops5_2018_authored_hint:
        courseC_starWars_loops5_b: To move down, you have to turn and then move forward.
        courseC_starWars_loops5_a: The best solution uses a turn, then a single `move forward`, another turn, then a loop.
      courseC_starWars_loops6_authored_hint:
        courseC_starWars_loops6_a: Try writing all of the moves down on a piece of paper and looking for a pattern.
        courseC_starWars_loops6_b: "If you want to use less code, you can put one `repeat` loop inside of another!   \nThis is called a **nested loop**."
      courseC_starWars_loops6_2018_authored_hint:
        courseC_starWars_loops6_a: Try writing all of the moves down on a piece of paper and looking for a pattern.
        courseC_starWars_loops6_b: "If you want to use less code, you can put one `repeat` loop inside of another!   \nThis is called a **nested loop**."
      courseC_starWars_loops7_authored_hint:
        courseC_starWars_loops7_a: This pattern looks harder than it is! Start with a simple stair step. Does that cover all of the scrap metal?
        courseC_starWars_loops7_b: If you are having trouble with this puzzle, try writing all of the moves on a piece of paper and looking for a pattern.
        courseC_starWars_loops7_c: Don't be afraid to make a mistake! Run the code to see what happens, even if you haven't solved the puzzle yet.
      courseC_starWars_loops7_2018_authored_hint:
        courseC_starWars_loops7_a: This pattern looks harder than it is! Start with a simple stair step. Does that cover all of the scrap metal?
        courseC_starWars_loops7_b: If you are having trouble with this puzzle, try writing all of the moves on a piece of paper and looking for a pattern.
        courseC_starWars_loops7_c: Don't be afraid to make a mistake! Run the code to see what happens, even if you haven't solved the puzzle yet.
      courseC_starWars_loops8_authored_hint:
        course_starWars_loops8_a: Try thinking about this problem in small parts. Take your time. You don't need to solve it on the first try!
        course_starWars_loops8_b: Think of the first half of this problem as a stair step problem. How did you solve that before?
        course_starWars_loops8_c: |-
          Take a look at this path.
          
          ![](https://images.code.org/7d696dd3b1e6984a1d6041f366d5c96b-image-1510198804955.37.04.png)
      courseC_starWars_loops8_2018_authored_hint:
        course_starWars_loops8_a: Try thinking about this problem in small parts. Take your time. You don't need to solve it on the first try!
        course_starWars_loops8_b: Think of the first half of this problem as a stair step problem. How did you solve that before?
        course_starWars_loops8_c: |-
          Take a look at this path.
          
          ![](https://images.code.org/7d696dd3b1e6984a1d6041f366d5c96b-image-1510198804955.37.04.png)
      courseC_starWars_loops9_authored_hint:
        course_starWars_loops9_b: You can put more than one block inside a `repeat` loop.
        course_starWars_loops9_c: |-
          You do not need to turn left to solve this puzzle. All of your turns can be to the right.
          
          ![](https://images.code.org/3dd00d424aa4112934053548b48bbb69-image-1510198997590.40.57.png)
      courseC_starWars_loops9_2018_authored_hint:
        course_starWars_loops9_b: You can put more than one block inside a `repeat` loop.
        course_starWars_loops9_c: |-
          You do not need to turn left to solve this puzzle. All of your turns can be to the right.
          
          ![](https://images.code.org/3dd00d424aa4112934053548b48bbb69-image-1510198997590.40.57.png)
      courseD_Frozen_nested1_authored_hint:
        courseD_artist_project1_a: Use the drop down menu on the `turn` blocks to choose the angle you need!
        courseD_artist_project1_b: Remember that `move forward` draws a line, while `jump forward` does not.
      courseD_Frozen_nested2_authored_hint:
        courseD_artist_project2_a: Remember that `move forward` draws a line, while `jump forward` does not.
        courseD_artist_project2_b: After you draw and move the first time, you can repeat the code by adding a loop around the outside.
      courseD_Frozen_nested3_authored_hint:
        courseD_artist_project3_a: Use the drop down menu on the `turn` blocks to choose the angle you need!
        courseD_artist_project3_b: "Try nested loops!\n\nUse the code that you created to draw a line of shapes and nest it inside of another loop.  At the bottom, before the outside loop ends, add a block that will turn Elsa around.  \n\n- Try 72 degrees if you are repeating the outer loop 5 times\n- Try 60 degrees if you are repeating the outer loop 6 times"
      courseD_Frozen_nested4_authored_hint:
        courseD_artist_project4_a: |
          Here is the pentagon snowflake with a turn of 36 degrees before a triangle snowflake:
          
          <img src="https://images.code.org/2ba023db9404f948fab655bfa7923160-image-1495822526223.14.13.png" width="200px" />
          
          
          Here's a set of hexagons with squares:
          
          <img src="https://images.code.org/4d77462f3d07df6f1f5f2dc25e5d2b70-image-1495822526224.15.08.png" width="200px" />
        courseD_artist_project4_b: To try this, draw your first snowflake, turn, then draw a second snowflake.
      courseD_Frozen_nested5_authored_hint:
        courseD_artist_project4_a: |
          Lines of 2 hexagons and 4 triangles:
          
          <img src="https://images.code.org/37ca9779bafd2ccc5cc801f82358008e-image-1495823683964.34.09.png" width="200px" />
      courseD_Frozen_nested6_authored_hint:
        courseD_artist_project1a_a: |
          This stair step uses a 76 degree turn and repeats 4 times.
          
          <img src="https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png" width="200px" />
        courseD_artist_project1a_b: These patterns are a lot like the stair steps from other puzzles, but using a different angle.
      courseD_Frozen_nested7_authored_hint:
        courseD_artist_project2a_a: |
          This drawing was made by nesting a loop of 4 stairs and a `turn right 180 degrees` block inside of a `repeat 2 times` block.
          
          <img src="https://images.code.org/bb24f9acee8afed2e119c1e920cb43f6-image-1495834479042.16.27.png" width="200px" />
      courseD_Frozen_nested8_authored_hint:
        courseD_artist_project3a_a: You can choose different amounts to rotate your shape! What about 18 times with a 20 degree turn in between?
      courseD_Frozen_nested9_authored_hint:
        courseD_artist_project4a_a: |
          Here are two different lengths of snowflake, drawn one after another (with a 30 degree turn in between.)
          
          <img src="https://images.code.org/45dedb51d89d3e5d0a88fe65ecbd7d7b-image-1495833855890.22.39.png" width="200px" />
      courseD_artist_1_2018_authored_hint:
        courseD_artist_project1_a: Use the drop down menu on the `turn` blocks to choose the angle you need!
        courseD_artist_project1_b: Remember that `move forward` draws a line, while `jump forward` does not.
      courseD_artist_2_2018_authored_hint:
        courseD_artist_project1_b: Remember that `move` draws a line, while `jump` does not.
        courseD_artist_project1_a: Use the drop down menu on the `turn` blocks to choose the angle you need!
      courseD_artist_3_2018_authored_hint: [ ]
      courseD_artist_4_2018_authored_hint: [ ]
      courseD_artist_5_2018_authored_hint:
        '1': If you are switching your shapes, don't forget that you will need to switch their angles, too!
      courseD_artist_6_2018_authored_hint: [ ]
      courseD_artist_7_2018_authored_hint:
        courseD_artist_project2a_a: |
          This drawing was made by nesting a loop of 4 stairs and a `turn right 180 degrees` block inside of a `repeat 2 times` block.
          
          <img src="https://images.code.org/bb24f9acee8afed2e119c1e920cb43f6-image-1495834479042.16.27.png" width="200px" />
      courseD_artist_8_2018_authored_hint:
        courseD_artist_project3a_a: You can choose different amounts to rotate your shape! What about 18 times with a 20 degree turn in between?
      courseD_artist_9_2018_authored_hint:
        courseD_artist_project4a_a: |
          Here are two different lengths of snowflake, drawn one after another (with a 30 degree turn in between.)
          
          <img src="https://images.code.org/45dedb51d89d3e5d0a88fe65ecbd7d7b-image-1495833855890.22.39.png" width="200px" />
      courseD_artist_Template_2018_authored_hint: [ ]
      courseD_artist_binary1_authored_hint:
        courseD_artist_binary1_a: Replace the "???" in the text block with the binary image you want, in zeroes and ones.
        courseD_artist_binary1_b: The artist will draw a white space for every 1 and a black space for every 0.
        courseD_artist_binary1_c: |-
          This is how you can input your binary code:
          
          ![](https://images.code.org/ec0f974e32c4323fc61cb49b48b8f1c0-image-1500334311345.2_hint.gif)
      courseD_artist_binary1_2018_authored_hint:
        courseD_artist_binary1_a: Replace the "???" in the text block with the binary image you want, in zeroes and ones.
        courseD_artist_binary1_b: The artist will draw a white space for every 1 and a black space for every 0.
        courseD_artist_binary1_c: |-
          This is how you can input your binary code:
          
          ![](https://images.code.org/ec0f974e32c4323fc61cb49b48b8f1c0-image-1500334311345.2_hint.gif)
      courseD_artist_binary2_authored_hint:
        courseD_artist_binary2_a: Just click `Run` to see this program in action!
      courseD_artist_binary2_2018_authored_hint:
        courseD_artist_binary2_a: Just click `Run` to see this program in action!
      courseD_artist_binary3_authored_hint:
        courseD_artist_binary3_a: One of the four binary patterns in the toolbox will solve this puzzle!
        courseD_artist_binary3_b: Don't be afraid to make a mistake! Try writing binary and running the code to see what will happen, even if you haven't solved the puzzle yet.
      courseD_artist_binary3_2018_authored_hint:
        courseD_artist_binary3_a: One of the four binary patterns in the toolbox will solve this puzzle!
        courseD_artist_binary3_b: Don't be afraid to make a mistake! Try writing binary and running the code to see what will happen, even if you haven't solved the puzzle yet.
      courseD_artist_binary4_authored_hint:
        courseD_artist_binary4_a: Look at the first three squares on the top row. Could you repeat these three to get the whole pattern?
        courseD_artist_binary4_b: Don't be afraid to make a mistake! Try writing binary and running the code to see what will happen, even if you don't think you've solved the puzzle yet.
      courseD_artist_binary4_2018_authored_hint:
        courseD_artist_binary4_a: Look at the first three squares on the top row. Could you repeat these three to get the whole pattern?
        courseD_artist_binary4_b: Don't be afraid to make a mistake! Try writing binary and running the code to see what will happen, even if you don't think you've solved the puzzle yet.
      courseD_artist_binary5_authored_hint:
        courseD_artist_binary5_a: Try running the code first to see what you have to work with.
        courseD_artist_binary5_b: You only need to switch two rows to make a smile.
        courseD_artist_binary5_c: If you are having trouble figuring this puzzle out, try writing the binary lines down on a piece of paper and looking for a pattern.
      courseD_artist_binary5_2018_authored_hint:
        courseD_artist_binary5_a: Try running the code first to see what you have to work with.
        courseD_artist_binary5_b: You only need to switch two rows to make a smile.
        courseD_artist_binary5_c: If you are having trouble figuring this puzzle out, try writing the binary lines down on a piece of paper and looking for a pattern.
      courseD_artist_binary6_authored_hint:
        courseD_artist_binary6_a: Start at the top left. How far do you have to read before the pattern starts to repeat?
        courseD_artist_binary6_b: You can build your binary string a bit at a time, and keep testing!
      courseD_artist_binary6_2018_authored_hint:
        courseD_artist_binary6_a: Start at the top left. How far do you have to read before the pattern starts to repeat?
        courseD_artist_binary6_b: You can build your binary string a bit at a time, and keep testing!
      courseD_artist_binary7_authored_hint:
        courseD_artist_binary7_a: Start at the top left. How far do you have to read before the pattern starts to repeat?
        courseD_artist_binary7_b: Don't be afraid to make a mistake! Try writing binary and running the code to see what will happen, even if you don't think you've solved the puzzle yet.
      courseD_artist_binary7_2018_authored_hint:
        courseD_artist_binary7_a: Start at the top left. How far do you have to read before the pattern starts to repeat?
        courseD_artist_binary7_b: Don't be afraid to make a mistake! Try writing binary and running the code to see what will happen, even if you don't think you've solved the puzzle yet.
      courseD_artist_binary8_authored_hint:
        courseD_artist_binary8_a: The spiral can be confusing sometimes. Isolate each horizontal line in your mind as you create this design.
        courseD_artist_binary8_b: Try running the code first to see what you have to work with.
        courseD_artist_binary8_c: Don't be afraid to make a mistake! Try writing binary and running the code to see what will happen, even if you haven't solved the puzzle yet.
      courseD_artist_binary8_2018_authored_hint:
        courseD_artist_binary8_a: The spiral can be confusing sometimes. Isolate each horizontal line in your mind as you create this design.
        courseD_artist_binary8_b: Try running the code first to see what you have to work with.
        courseD_artist_binary8_c: Don't be afraid to make a mistake! Try writing binary and running the code to see what will happen, even if you haven't solved the puzzle yet.
      courseD_artist_binaryFP_authored_hint: [ ]
      courseD_artist_binaryFP8_authored_hint: [ ]
      courseD_artist_binaryFP_2018_authored_hint: [ ]
      courseD_artist_binary_challenge2_authored_hint:
        courseD_artist_binary_challenge2_a: There are only few lines wrong in the original program.
      courseD_artist_binary_challenge2_2018_authored_hint:
        courseD_artist_binary_challenge2_a: There are only few lines wrong in the original program.
      courseD_artist_binary_challenge3_authored_hint:
        courseD_artist_binary_challenge3_a: |-
          The best tip I have for you is to press `⟲ Start Over` if it starts to get really messy.
          
          There are only few lines wrong in the original program. If one approach fails, back up and try again. There is a solution!
      courseD_artist_embed_frozen_authored_hint: [ ]
      courseD_artist_embed_frozen2_authored_hint: [ ]
      courseD_artist_embedded_project1a_authored_hint: [ ]
      courseD_artist_functions10_authored_hint:
        courseD_artist_functions10_b: This drawing is a lot like the last one, except the function draws a different kind of line.
        courseD_artist_functions10_a: To get around using multiple `move forward` blocks, create a `draw hexagon` function and call that multiple times.
      courseD_artist_functions2_authored_hint:
        courseD_artist_functions2_a: |-
          Tu programa deberá:
          - Usar función
          - Mover hacia adelante 100 + 75 píxeles
          - Usar función
      courseD_artist_functions3_authored_hint:
        courseD_artist_functions3_a: |-
          To solve this puzzle, you just need to add a  loop that repeats the starter code 8 times.
          
          If you can't remember what the starter code was, click "start over" in the upper right corner of the workspace.
      courseD_artist_functions4_authored_hint:
        courseD_artist_functions4_a: Try using a function!
      courseD_artist_functions5_authored_hint:
        courseD_artist_functions5_a: Don't give up!  Remember what you have been learning.
        courseD_artist_functions5_b: Functions make it easy to call saved code at any time, not just from inside a loop!
      courseD_artist_functions6_authored_hint:
        grade4_artist_functions_windows0_a: Focus only on making one window for now.  We'll create a function for it in the next puzzle.
        grade4_artist_functions_windows0_b: Try using nested loops, where the inner loop makes the square and the outer loop rotates the square four times.
      courseD_artist_functions7_authored_hint:
        courseD_artist_functions7_a: Try creating your function first then adding in windows one at a time.
        courseD_artist_functions7_b: You shouldn't need to add any extra repeat loops.  Just jump the artist 100 pixels forward for each top window, and 150 pixels down to get the bottom windows.
      courseD_artist_functions8_authored_hint:
        courseD_artist_functions8_a: |-
          Start by making a function for a square, then try making a function for a line of squares.
          
          How would you use the `draw a line of squares` function to make this image?
        courseD_artist_functions8_b: After your first line of squares, you need to move the artist down and back before you start your second line of squares.
        courseD_artist_functions8_c: You should move the artist back a different number of pixels for even lines than for odd ones.
      courseD_artist_functions9_authored_hint:
        courseD_artist_functions9_a: To get around the need to have multiple `move forward` blocks, create a `draw triangle` function and call that multiple times.
        courseD_artist_functions9_b: This drawing is made by creating a line of triangles and turning either 60 or 120 degrees after each time you draw the triangle line.
      courseD_artist_nestedLoops1_authored_hint:
        courseD_artist_nestedLoops1_a: The easiest way to draw this is to move forward and use right turns.
        courseD_artist_nestedLoops1_b: You can draw this triangle with a `repeat` loop with two blocks inside. Which blocks do you need?
        courseD_artist_nestedLoops1_c: Try writing the steps on paper and looking for patterns that can be simplified with loops.
      courseD_artist_nestedLoops10_authored_hint: [ ]
      courseD_artist_nestedLoops10_2018_authored_hint: [ ]
      courseD_artist_nestedLoops1_2018_authored_hint:
        courseD_artist_nestedLoops1_a: The easiest way to draw this is to move forward and use right turns.
        courseD_artist_nestedLoops1_b: You can draw this triangle with a `repeat` loop with two blocks inside. Which blocks do you need?
        courseD_artist_nestedLoops1_c: Try writing the steps on paper and looking for patterns that can be simplified with loops.
      courseD_artist_nestedLoops1a_authored_hint:
        courseD_artist_nestedLoops1a_a: |-
          You will need to draw a total of 6 triangles. After finishing each triangle, rotate 60 degrees and move to start the next triangle.
          
          ![](https://images.code.org/ad6c6d98298df9f4e3cea5bbe5ec776e-image-1497476332024.2_solution2.gif)
        courseD_artist_nestedLoops1a_b: If you create your triangle with a loop, the artist should be facing the same way as they started. This will make the 60 degree turns a lot easier.
        courseD_artist_nestedLoops1a_c: If you want colors, use the `set color` block in your code. You don't have to match the colors in the template image.
      courseD_artist_nestedLoops1a_2018_authored_hint:
        courseD_artist_nestedLoops1a_a: |-
          You will need to draw a total of 6 triangles. After finishing each triangle, rotate 60 degrees and move to start the next triangle.
          
          ![](https://images.code.org/ad6c6d98298df9f4e3cea5bbe5ec776e-image-1497476332024.2_solution2.gif)
        courseD_artist_nestedLoops1a_b: If you create your triangle with a loop, the artist should be facing the same way as they started. This will make the 60 degree turns a lot easier.
        courseD_artist_nestedLoops1a_c: If you want colors, use the `set color` block in your code. You don't have to match the colors in the template image.
      courseD_artist_nestedLoops2_authored_hint:
        courseD_artist_nestedLoops2_a: Nest your loops by surrounding your triangle code with another `repeat` loop.
        courseD_artist_nestedLoops2_b: Remember to put the `turn` block inside of the loop so that the artist turns after each triangle.
      courseD_artist_nestedLoops2_2018_authored_hint:
        courseD_artist_nestedLoops2_a: Nest your loops by surrounding your triangle code with another `repeat` loop.
        courseD_artist_nestedLoops2_b: Remember to put the `turn` block inside of the loop so that the artist turns after each triangle.
      courseD_artist_nestedLoops3_authored_hint:
        courseD_artist_nestedLoops3_a: "Utilice el bloque 'salto adelante' llegar desde la parte superior de una plaza el lugar donde se iniciará la siguiente. Si sus plazas son 20 píxeles de alto y 20 píxeles apartes, ¿cuánto necesita saltar?"
        courseD_artist_nestedLoops3_b: 'Don''t forget to use a nested loop to solve this puzzle quickly. '
        courseD_artist_nestedLoops3_c: 'Start by using a `repeat` loop to make one square.  Next, repeat that square 8 times, jumping 40 pixels in between. '
      courseD_artist_nestedLoops3_2018_authored_hint:
        courseD_artist_nestedLoops3_a: "Utilice el bloque 'salto adelante' llegar desde la parte superior de una plaza el lugar donde se iniciará la siguiente. Si sus plazas son 20 píxeles de alto y 20 píxeles apartes, ¿cuánto necesita saltar?"
        courseD_artist_nestedLoops3_b: 'Don''t forget to use a nested loop to solve this puzzle quickly. '
        courseD_artist_nestedLoops3_c: 'Start by using a `repeat` loop to make one square.  Next, repeat that square 8 times, jumping 40 pixels in between. '
      courseD_artist_nestedLoops4_authored_hint:
        courseD_artist_nestedLoops4_d: To solve this correctly, you'll need to move **before** you turn, or else your circles will be off by the tiniest little amount!
        courseD_artist_nestedLoops4_a: |-
          To make a circle:
          - Repeat 360 times
          - Move forward 1 pixel
          - Turn left 1 degree
        courseD_artist_nestedLoops4_b: Don't forget to jump forward by 50 pixels between circles.
        courseD_artist_nestedLoops4_c: Use a nested loop to draw your circles 4 times.
      courseD_artist_nestedLoops4_2018_authored_hint:
        courseD_artist_nestedLoops4_d: To solve this correctly, you'll need to move **before** you turn, or else your circles will be off by the tiniest little amount!
        courseD_artist_nestedLoops4_a: |-
          To make a circle:
          - Repeat 360 times
          - Move forward 1 pixel
          - Turn left 1 degree
        courseD_artist_nestedLoops4_b: Don't forget to jump forward by 50 pixels between circles.
        courseD_artist_nestedLoops4_c: Use a nested loop to draw your circles 4 times.
      courseD_artist_nestedLoops5_authored_hint:
        courseD_artist_nestedLoops5_a: |-
          To do this easily:
          
          - repeat 4 times
          - make a circle
          - jump forward 50 pixels
          - turn right 90 degrees
        courseD_artist_nestedLoops5_b: To make a circle you'll need to set a repeat loop to repeat 360 times. Inside the loop, move forward 1 pixel and turn by 1 degree.
      courseD_artist_nestedLoops5_2018_authored_hint:
        courseD_artist_nestedLoops5_a: |-
          To do this easily:
          
          - repeat 4 times
          - make a circle
          - jump forward 50 pixels
          - turn right 90 degrees
        courseD_artist_nestedLoops5_b: To make a circle you'll need to set a repeat loop to repeat 360 times. Inside the loop, move forward 1 pixel and turn by 1 degree.
      courseD_artist_nestedLoops6_authored_hint:
        courseD_artist_nestedLoops6_a: You'll need to repeat your outer loop 6 times now, instead of only 4.
        courseD_artist_nestedLoops6_b: 'Now that you''re breaking 360 degrees into six pieces instead of only four, you will only need to turn 60 degrees between circles. '
      courseD_artist_nestedLoops7_authored_hint:
        courseD_artist_nestedLoops7_a: You'll need to use nested loops here. First, use a loop to draw a square. What will the outer loop do if the inner loop draws a square?
        courseD_artist_nestedLoops7_b: |-
          Use a nested loop, where the inner loop is the code for a square.
          
          - repeat 6 times
          - make square
          - jump forward by **50 pixels**
          - turn **60 degrees**
      courseD_artist_nestedLoops7_2018_authored_hint:
        courseD_artist_nestedLoops7_a: You'll need to use nested loops here. First, use a loop to draw a square. What will the outer loop do if the inner loop draws a square?
        courseD_artist_nestedLoops7_b: |-
          Use a nested loop, where the inner loop is the code for a square.
          
          - repeat 6 times
          - make square
          - jump forward by **50 pixels**
          - turn **60 degrees**
      courseD_artist_nestedLoops8_authored_hint:
        courseD_artist_nestedLoops8_a: To have 8 hexagons in your drawing, you'll need to turn **45 degrees** between each of them. Why? Because 360 degrees (a full turn around) divided by 8 (the number of hexagons) is 45 degrees.
        courseD_artist_nestedLoops8_b: If you're stuck, start by looking at the last puzzle, then change the things that are different.
        courseD_artist_nestedLoops8_c: |-
          Use a nested loop:
          
          - Repeat 8 times
          - draw a hexagon
          - jump forward 50 pixels
          - turn right 45 degrees
      courseD_artist_nestedLoops8_2018_authored_hint:
        courseD_artist_nestedLoops8_a: To have 8 hexagons in your drawing, you'll need to turn **45 degrees** between each of them. Why? Because 360 degrees (a full turn around) divided by 8 (the number of hexagons) is 45 degrees.
        courseD_artist_nestedLoops8_b: If you're stuck, start by looking at the last puzzle, then change the things that are different.
        courseD_artist_nestedLoops8_c: |-
          Use a nested loop:
          
          - Repeat 8 times
          - draw a hexagon
          - jump forward 50 pixels
          - turn right 45 degrees
      courseD_artist_nestedLoops9_authored_hint:
        courseD_artist_nestedLoops9_a: Start by using a nested loop like you had before, but this time, make it with squares.
        courseD_artist_nestedLoops9_b: Add a second set of nested loops to the end of the first set, but this time use triangles.
        courseD_artist_nestedLoops9_c: |-
          Use two nested loops:
          - Repeat 8 times
          - draw a square
          - jump forward 50 pixels
          - turn right by 45 degrees
          - Repeat 8 times
          - draw a triangle
          - jump forward 50 pixels
          - turn right by 45 degrees
      courseD_artist_nestedLoops9_2018_authored_hint:
        courseD_artist_nestedLoops9_a: Start by using a nested loop like you had before, but this time, make it with squares.
        courseD_artist_nestedLoops9_b: Add a second set of nested loops to the end of the first set, but this time use triangles.
        courseD_artist_nestedLoops9_c: |-
          Use two nested loops:
          - Repeat 8 times
          - draw a square
          - jump forward 50 pixels
          - turn right by 45 degrees
          - Repeat 8 times
          - draw a triangle
          - jump forward 50 pixels
          - turn right by 45 degrees
      courseD_artist_nestedLoops9_predict1_authored_hint: [ ]
      courseD_artist_nestedLoops9_predict1_2018_authored_hint: [ ]
      courseD_artist_nestedLoopsFP_authored_hint:
        courseD_artist_nestedLoopsFP_a: |-
          <img src="https://images.code.org/9257cbf61f238f5a749a949059731934-image-1478732674615.02.25.png" width="200px"/>
          
          This image was made using a single nested loop that repeats a hexagon (with 50px sides) 15 times using a 48 degree turn.
        courseD_artist_nestedLoopsFP_b: |-
          <img src="https://images.code.org/31a85d4e5be5209240195d34b17a177b-image-1478732674613.32.53.png" width="200px"/>
          
          This image was made using similar code to other levels you've done before, but with circles (repeat 360 times: move forward 1, turn 1 degree).
        courseD_artist_nestedLoopsFP_c: |-
          <img src="https://images.code.org/f654f1512860c6c8cf6795c961a8959c-image-1478732674616.02.58.png" width="200px"/>
          
          This image was made using a single nested loop that repeats a pentagon (with 50px sides) 15 times using a 48 degree turn.
      courseD_artist_nestedLoopsFP_2018_authored_hint:
        courseD_artist_nestedLoopsFP_a: |-
          <img src="https://images.code.org/9257cbf61f238f5a749a949059731934-image-1478732674615.02.25.png" width="200px"/>
          
          This image was made using a single nested loop that repeats a hexagon (with 50px sides) 15 times using a 48 degree turn.
        courseD_artist_nestedLoopsFP_b: |-
          <img src="https://images.code.org/31a85d4e5be5209240195d34b17a177b-image-1478732674613.32.53.png" width="200px"/>
          
          This image was made using similar code to other levels you've done before, but with circles (repeat 360 times: move forward 1, turn 1 degree).
        courseD_artist_nestedLoopsFP_c: |-
          <img src="https://images.code.org/f654f1512860c6c8cf6795c961a8959c-image-1478732674616.02.58.png" width="200px"/>
          
          This image was made using a single nested loop that repeats a pentagon (with 50px sides) 15 times using a 48 degree turn.
      courseD_artist_nestedLoopsPre1_authored_hint: [ ]
      courseD_artist_nestedLoops_challenge1_authored_hint:
        courseD_artist_nestedLoops_challenge1_a: Start by changing the color to blue, then create an octagon with 50 pixel sides and 45 degree left turns.
        courseD_artist_nestedLoops_challenge1_b: Add the code to change the color to green, and make a triangle with 50 pixel sides and 120 degree left turns.
        courseD_artist_nestedLoops_challenge1_c: After you've drawn both shapes, you will need to jump forward by 50 pixels before you turn right by 90 degrees.
        courseD_artist_nestedLoops_challenge1_d: Put all of your code inside of a `repeat 4 times` loop to finish it off.
      courseD_artist_nestedLoops_challenge1_2018_authored_hint:
        courseD_artist_nestedLoops_challenge1_a: Start by changing the color to blue, then create an octagon with 50 pixel sides and 45 degree left turns.
        courseD_artist_nestedLoops_challenge1_b: Add the code to change the color to green, and make a triangle with 50 pixel sides and 120 degree left turns.
        courseD_artist_nestedLoops_challenge1_c: After you've drawn both shapes, you will need to jump forward by 50 pixels before you turn right by 90 degrees.
        courseD_artist_nestedLoops_challenge1_d: Put all of your code inside of a `repeat 4 times` loop to finish it off.
      courseD_artist_nestedLoops_challenge2_authored_hint:
        courseD_artist_nestedLoops_challenge2_a: To draw a regular octagon, the artist needs to turn 45 degrees 8 times.
        courseD_artist_nestedLoops_challenge2_b: To draw a square, the artist needs to turn 90 degrees 4 times.
      courseD_artist_nestedLoops_challenge2_2018_authored_hint:
        courseD_artist_nestedLoops_challenge2_a: To draw a regular octagon, the artist needs to turn 45 degrees 8 times.
        courseD_artist_nestedLoops_challenge2_b: To draw a square, the artist needs to turn 90 degrees 4 times.
      courseD_artist_project1_authored_hint:
        courseD_artist_project1_a: Use the drop down menu on the `turn` blocks to choose the angle you need!
        courseD_artist_project1_b: Remember that `move forward` draws a line, while `jump forward` does not.
      courseD_artist_project1_2018_authored_hint:
        courseD_artist_project1_a: Use the drop down menu on the `turn` blocks to choose the angle you need!
        courseD_artist_project1_b: Remember that `move forward` draws a line, while `jump forward` does not.
      courseD_artist_project1a_authored_hint:
        courseD_artist_project1a_a: |
          This stair step uses a 76 degree turn and repeats 4 times.
          
          <img src="https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png" width="200px" />
        courseD_artist_project1a_b: These patterns are a lot like the stair steps from other puzzles, but using a different angle.
      courseD_artist_project1a_2018_authored_hint:
        courseD_artist_project1a_a: |
          This stair step uses a 76 degree turn and repeats 4 times.
          
          <img src="https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png" width="200px" />
        courseD_artist_project1a_b: These patterns are a lot like the stair steps from other puzzles, but using a different angle.
      courseD_artist_project2_authored_hint:
        courseD_artist_project2_a: Remember that `move forward` draws a line, while `jump forward` does not.
        courseD_artist_project2_b: After you draw and move the first time, you can repeat the code by adding a loop around the outside.
      courseD_artist_project2Template_authored_hint: [ ]
      courseD_artist_project2Template_2018_authored_hint: [ ]
      courseD_artist_project2_2018_authored_hint:
        courseD_artist_project2_a: Remember that `move forward` draws a line, while `jump forward` does not.
        courseD_artist_project2_b: After you draw and move the first time, you can repeat the code by adding a loop around the outside.
      courseD_artist_project2a_authored_hint:
        courseD_artist_project2a_a: |
          This drawing was made by nesting a loop of 4 stairs and a `turn right 180 degrees` block inside of a `repeat 2 times` block.
          
          <img src="https://images.code.org/bb24f9acee8afed2e119c1e920cb43f6-image-1495834479042.16.27.png" width="200px" />
      courseD_artist_project2a_2018_authored_hint:
        courseD_artist_project2a_a: |
          This drawing was made by nesting a loop of 4 stairs and a `turn right 180 degrees` block inside of a `repeat 2 times` block.
          
          <img src="https://images.code.org/bb24f9acee8afed2e119c1e920cb43f6-image-1495834479042.16.27.png" width="200px" />
      courseD_artist_project3_authored_hint:
        courseD_artist_project3_a: Use the drop down menu on the `turn` blocks to choose the angle you need!
        courseD_artist_project3_b: "Try nested loops!\n\nUse the code that you created to draw a line of shapes and nest it inside of another loop.  At the bottom, before the outside loop ends, add a block that will turn Elsa around.  \n\n- Try 72 degrees if you are repeating the outer loop 5 times\n- Try 60 degrees if you are repeating the outer loop 6 times"
      courseD_artist_project3_2018_authored_hint:
        courseD_artist_project3_a: Use the drop down menu on the `turn` blocks to choose the angle you need!
        courseD_artist_project3_b: "Try nested loops!\n\nUse the code that you created to draw a line of shapes and nest it inside of another loop.  At the bottom, before the outside loop ends, add a block that will turn Elsa around.  \n\n- Try 72 degrees if you are repeating the outer loop 5 times\n- Try 60 degrees if you are repeating the outer loop 6 times"
      courseD_artist_project3a_authored_hint:
        courseD_artist_project3a_a: You can choose different amounts to rotate your shape! What about 18 times with a 20 degree turn in between?
      courseD_artist_project3a_2018_authored_hint:
        courseD_artist_project3a_a: You can choose different amounts to rotate your shape! What about 18 times with a 20 degree turn in between?
      courseD_artist_project4_authored_hint:
        courseD_artist_project4_a: |
          Here is the pentagon snowflake with a turn of 36 degrees before a triangle snowflake:
          
          <img src="https://images.code.org/2ba023db9404f948fab655bfa7923160-image-1495822526223.14.13.png" width="200px" />
          
          
          Here's a set of hexagons with squares:
          
          <img src="https://images.code.org/4d77462f3d07df6f1f5f2dc25e5d2b70-image-1495822526224.15.08.png" width="200px" />
        courseD_artist_project4_b: To try this, draw your first snowflake, turn, then draw a second snowflake.
      courseD_artist_project4_2018_authored_hint:
        courseD_artist_project4_a: |
          Here is the pentagon snowflake with a turn of 36 degrees before a triangle snowflake:
          
          <img src="https://images.code.org/2ba023db9404f948fab655bfa7923160-image-1495822526223.14.13.png" width="200px" />
          
          
          Here's a set of hexagons with squares:
          
          <img src="https://images.code.org/4d77462f3d07df6f1f5f2dc25e5d2b70-image-1495822526224.15.08.png" width="200px" />
        courseD_artist_project4_b: To try this, draw your first snowflake, turn, then draw a second snowflake.
      courseD_artist_project4a_authored_hint:
        courseD_artist_project4a_a: |
          Here are two different lengths of snowflake, drawn one after another (with a 30 degree turn in between.)
          
          <img src="https://images.code.org/45dedb51d89d3e5d0a88fe65ecbd7d7b-image-1495833855890.22.39.png" width="200px" />
      courseD_artist_project4a_2018_authored_hint:
        courseD_artist_project4a_a: |
          Here are two different lengths of snowflake, drawn one after another (with a 30 degree turn in between.)
          
          <img src="https://images.code.org/45dedb51d89d3e5d0a88fe65ecbd7d7b-image-1495833855890.22.39.png" width="200px" />
      courseD_artist_project5_authored_hint:
        courseD_artist_project4_a: |
          Lines of 2 hexagons and 4 triangles:
          
          <img src="https://images.code.org/37ca9779bafd2ccc5cc801f82358008e-image-1495823683964.34.09.png" width="200px" />
      courseD_artist_project5_2018_authored_hint:
        courseD_artist_project4_a: |
          Lines of 2 hexagons and 4 triangles:
          
          <img src="https://images.code.org/37ca9779bafd2ccc5cc801f82358008e-image-1495823683964.34.09.png" width="200px" />
      courseD_artist_projectTemplate_authored_hint: [ ]
      courseD_artist_projectTemplate_2018_authored_hint: [ ]
      courseD_artist_project_embedded_authored_hint: [ ]
      courseD_artist_ramp11_authored_hint:
        courseD_artist_ramp11a: To draw a side, use the `move forward by 100 pixels` block, and change the 100 to a 200.
        courseD_artist_ramp11b: |-
          To draw 4 sides, put a `move forward by 200 pixels` block inside of a repeat loop and make sure the loop is set to draw 4 times.
          
          Don't forget to turn afterward!
        courseD_artist_ramp11_c: Remember to put the `turn` block inside of your loop!
      courseD_artist_ramp12_authored_hint:
        courseD_artist_ramp12_a: You can either draw the square first, then the triangle, or do it the other way around!
        courseD_artist_ramp12_b: Try splitting the problem into 2 parts, and using 2 loops.
        courseD_artist_ramp12_c: You can use the drop down menu on the `turn` blocks to see which angle you need!
      courseD_bee_conditionals1_authored_hint:
        courseD_bee_conditionals1_a: You will need to use an `if` block to check to see if there is a flower beneath the cloud before you try to get nectar.
      courseD_bee_conditionals10_authored_hint: [ ]
      courseD_bee_conditionals10_2018_authored_hint: [ ]
      courseD_bee_conditionals1_predict1_authored_hint:
        courseD_bee_conditionals1_a: You will need to use an `if` block to check to see if there is a flower beneath the cloud before you try to get nectar.
      courseD_bee_conditionals1_predict1_2018_authored_hint:
        courseD_bee_conditionals1_a: You will need to use an `if` block to check to see if there is a flower beneath the cloud before you try to get nectar.
      courseD_bee_conditionals2_authored_hint:
        courseD_bee_conditionals2_hintVid1: Need help getting started?  Watch the video!
        courseD_bee_conditionals2_a: Sometimes a flower will be there, sometimes it won't.  If you want your code to run in both cases, make sure to use an `if` statement.
        courseD_bee_conditionals2_b: You can use a `repeat` loop or a `while path ahead` to move through this maze.
        courseD_bee_conditionals2_c: You don't have to check for honeycombs, there will only be flowers or blank spaces under the clouds.
        courseD_bee_conditionals2_hintVid2: Watch this video for help solving this puzzle.
      courseD_bee_conditionals2_2018_authored_hint:
        courseD_bee_conditionals2_hintVid1: Need help getting started?  Watch the video!
        courseD_bee_conditionals2_a: Sometimes a flower will be there, sometimes it won't.  If you want your code to run in both cases, make sure to use an `if` statement.
        courseD_bee_conditionals2_b: You can use a `repeat` loop or a `while path ahead` to move through this maze.
        courseD_bee_conditionals2_c: You don't have to check for honeycombs, there will only be flowers or blank spaces under the clouds.
        courseD_bee_conditionals2_hintVid2: Watch this video for help solving this puzzle.
      courseD_bee_conditionals2_test_authored_hint:
        courseD_bee_conditionals2_aa: Need help getting started?  Here is a little hint video.
        courseD_bee_conditionals2_a: Sometimes a flower will be there, sometimes it won't.  If you want your code to run in both cases, make sure to use an `if` statement.
        courseD_bee_conditionals2_b: You can use a `repeat` loop or a `while path ahead` to move through this maze.
        courseD_bee_conditionals2_c: You don't have to check for honeycombs, there will only be flowers or blank spaces under the clouds.
        courseD_bee_conditionals2_d: Need help finishing things up?  Watch this hint video.
      courseD_bee_conditionals3_authored_hint:
        courseD_bee_conditionals3_hintVid1: Need help getting started?  Watch the video!
        courseD_bee_conditionals3_a: Be sure to use an `if` statement to check each space to see if it has either a flower or nothing.
        courseD_bee_conditionals3_b: You can use a `repeat` loop or a `while` loop to keep the bee moving forward. Use whichever one you like!
        courseD_bee_conditionals3_c: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet.
        courseD_bee_conditionals3_hintVid2: Watch this video for help solving this puzzle.
      courseD_bee_conditionals3_2018_authored_hint:
        courseD_bee_conditionals3_hintVid1: Need help getting started?  Watch the video!
        courseD_bee_conditionals3_a: Be sure to use an `if` statement to check each space to see if it has either a flower or nothing.
        courseD_bee_conditionals3_b: You can use a `repeat` loop or a `while` loop to keep the bee moving forward. Use whichever one you like!
        courseD_bee_conditionals3_c: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet.
        courseD_bee_conditionals3_hintVid2: Watch this video for help solving this puzzle.
      courseD_bee_conditionals4_authored_hint:
        courseD_bee_conditionals4_hintVid1: Need help getting started?  Watch the video!
        courseD_bee_conditionals4_a: You can still treat every space as if there is a cloud over it, even though you can see the whole path.
        courseD_bee_conditionals4_b: 'Use an `if` statement inside your loop to check each space for nectar. '
        courseD_bee_conditionals4_c: Using <xml><block type="maze_untilBlocked"/></xml> block, you should move forward and check for a flower. If there is a flower, what should the bee do?
        courseD_bee_conditionals4_hintVid2: Watch this video for help solving this puzzle.
      courseD_bee_conditionals4_2018_authored_hint:
        courseD_bee_conditionals4_hintVid1: Need help getting started?  Watch the video!
        courseD_bee_conditionals4_a: You can still treat every space as if there is a cloud over it, even though you can see the whole path.
        courseD_bee_conditionals4_b: 'Use an `if` statement inside your loop to check each space for nectar. '
        courseD_bee_conditionals4_c: Using <xml><block type="maze_untilBlocked"/></xml> block, you should move forward and check for a flower. If there is a flower, what should the bee do?
        courseD_bee_conditionals4_hintVid2: Watch this video for help solving this puzzle.
      courseD_bee_conditionals5_authored_hint:
        courseD_bee_conditionals5_hintVid1: Need help getting started?  Watch the video!
        courseD_bee_conditionals5_a: Think of every side of the rectangular path as a path by itself. Set up a nested loop with a `repeat` block on the outside and a `while there is a path ahead` loop on the inside. How many paths does the bee need to buzz down if the bee needs to buzz down every side with a flower?
        courseD_bee_conditionals5_c: There are 3 sides of the rectangle with flowers, so the code needs to `repeat 3 times`. In every repeat, the bee will need to continue along the path, `while there is a path ahead`. To continue down the path, the bee will need to `move forward`. While on the path, the bee needs to check for a flower. `if there is a flower`, the bee should `get nectar`.
        courseD_bee_conditionals5_b: Inside the `while there is a path ahead` block you will need to move forward and check for a flower. How do you check if there is a flower? What do you do if there is a flower?
        courseD_bee_conditionals5_hintVid2: Watch this video for help solving this puzzle.
      courseD_bee_conditionals5_2018_authored_hint:
        courseD_bee_conditionals5_hintVid1: Need help getting started?  Watch the video!
        courseD_bee_conditionals5_a: Think of every side of the rectangular path as a path by itself. Set up a nested loop with a `repeat` block on the outside and a `while there is a path ahead` loop on the inside. How many paths does the bee need to buzz down if the bee needs to buzz down every side with a flower?
        courseD_bee_conditionals5_c: There are 3 sides of the rectangle with flowers, so the code needs to `repeat 3 times`. In every repeat, the bee will need to continue along the path, `while there is a path ahead`. To continue down the path, the bee will need to `move forward`. While on the path, the bee needs to check for a flower. `if there is a flower`, the bee should `get nectar`.
        courseD_bee_conditionals5_b: Inside the `while there is a path ahead` block you will need to move forward and check for a flower. How do you check if there is a flower? What do you do if there is a flower?
        courseD_bee_conditionals5_hintVid2: Watch this video for help solving this puzzle.
      courseD_bee_conditionals6_authored_hint:
        courseD_bee_conditionals6_hintVid1: Need help getting started?  Watch the video!
        courseD_bee_conditionals6_a: Make sure to use an `if` statement to check for honeycomb beneath each cloud.
        courseD_bee_conditionals6_b: In this case, you do not need to check for flowers under the clouds.
        courseD_bee_conditionals6_c: Is there a loop you can use to make your code simpler?
        courseD_bee_conditionals6_hintVid2: Watch this video for help solving this puzzle.
      courseD_bee_conditionals6_2018_authored_hint:
        courseD_bee_conditionals6_hintVid1: Need help getting started?  Watch the video!
        courseD_bee_conditionals6_a: Make sure to use an `if` statement to check for honeycomb beneath each cloud.
        courseD_bee_conditionals6_b: In this case, you do not need to check for flowers under the clouds.
        courseD_bee_conditionals6_c: Is there a loop you can use to make your code simpler?
        courseD_bee_conditionals6_hintVid2: Watch this video for help solving this puzzle.
      courseD_bee_conditionals7_authored_hint:
        courseD_bee_conditionals7_hintVid1: Need help getting started?  Watch the video!
        courseD_bee_conditionals7_a: "**Remember:** This puzzle changes each time it's run.  \n\nYou'll want to use a conditional block (`if/else`) to solve the challenge."
        courseD_bee_conditionals7_b: If there is not a flower under the cloud, there must be a honeycomb, so you don't need to think about the case of an empty space.
        courseD_bee_conditionals7_hintVid2: Watch this video for help solving this puzzle.
      courseD_bee_conditionals7_2018_authored_hint:
        courseD_bee_conditionals7_hintVid1: Need help getting started?  Watch the video!
        courseD_bee_conditionals7_a: "**Remember:** This puzzle changes each time it's run.  \n\nYou'll want to use a conditional block (`if/else`) to solve the challenge."
        courseD_bee_conditionals7_b: If there is not a flower under the cloud, there must be a honeycomb, so you don't need to think about the case of an empty space.
        courseD_bee_conditionals7_hintVid2: Watch this video for help solving this puzzle.
      courseD_bee_conditionals7_predict2_authored_hint:
        courseD_bee_conditionals7_a: "**Remember:** This puzzle changes each time it's run.  \n\nYou'll want to use a conditional block (`if/else`) to solve the challenge."
      courseD_bee_conditionals7_predict2_2018_authored_hint:
        courseD_bee_conditionals7_a: "**Remember:** This puzzle changes each time it's run.  \n\nYou'll want to use a conditional block (`if/else`) to solve the challenge."
      courseD_bee_conditionals8_authored_hint:
        courseD_bee_conditionals8_hintVid1: Need help getting started?  Watch the video!
        courseD_bee_conditionals8_a: "** Recuerda: ** Este puzzle cambia cada vez que se ejecuta.\n\nQuerras usar un bloque condicional (`Si` o` Si /si no`) para resolver el desafío."
        courseD_bee_conditionals8_b: |-
          This puzzle is tricky, because you can't check blank squares, nectar, *and* honey with just one single conditional.
          
          Only check for nectar and honey at the end of your path.
        courseD_bee_conditionals8_c: How can you make sure to travel to the end every path, no matter how long the path is?
        courseD_bee_conditionals8_d: |-
          Even though there is a cloud right in front of you, you don't have to visit it first. Try starting with the cloud in the bottom right of the square.
          
          ![](https://images.code.org/166e71553edf23bf13ecd290a8e7e721-image-1501013509361.09.09.png)
        courseD_bee_conditionals8_hintVid2: Watch this video for help solving this puzzle.
      courseD_bee_conditionals8_2018_authored_hint:
        courseD_bee_conditionals8_hintVid1: Need help getting started?  Watch the video!
        courseD_bee_conditionals8_a: "** Recuerda: ** Este puzzle cambia cada vez que se ejecuta.\n\nQuerras usar un bloque condicional (`Si` o` Si /si no`) para resolver el desafío."
        courseD_bee_conditionals8_b: |-
          This puzzle is tricky, because you can't check blank squares, nectar, *and* honey with just one single conditional.
          
          Only check for nectar and honey at the end of your path.
        courseD_bee_conditionals8_c: How can you make sure to travel to the end every path, no matter how long the path is?
        courseD_bee_conditionals8_d: |-
          Even though there is a cloud right in front of you, you don't have to visit it first. Try starting with the cloud in the bottom right of the square.
          
          ![](https://images.code.org/166e71553edf23bf13ecd290a8e7e721-image-1501013509361.09.09.png)
        courseD_bee_conditionals8_hintVid2: Watch this video for help solving this puzzle.
      courseD_bee_conditionals9_authored_hint: [ ]
      courseD_bee_conditionals9_2018_authored_hint: [ ]
      courseD_bee_conditionals_challenge1_authored_hint:
        courseD_bee_conditionals_challenge1_a: Can you find a path that reaches every flower and honeycomb without hitting any trees? The best path is a spiral.
        courseD_bee_conditionals_challenge1_b: In this puzzle, each space could have a flower, a honey comb, or nothing.  That means you can repeat your `if/else` conditional at each square.
      courseD_bee_conditionals_challenge1_2018_authored_hint:
        courseD_bee_conditionals_challenge1_a: Can you find a path that reaches every flower and honeycomb without hitting any trees? The best path is a spiral.
        courseD_bee_conditionals_challenge1_b: In this puzzle, each space could have a flower, a honey comb, or nothing.  That means you can repeat your `if/else` conditional at each square.
      courseD_bee_conditionals_challenge2_authored_hint:
        courseD_bee_conditionals_challenge1_b: |-
          Just like the `if at flower` blocks, the code inside a `while nectar > 0` will only run if the bee is at a flower. The difference is that the code inside will run over and over until there is no nectar left.  Try this pattern:
          
          <xml>  <block type="bee_whileNectarAmount">
          <title name="ARG1">nectarRemaining</title>
          <title name="OP">&gt;</title>
          <title name="ARG2">0</title>                    <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          </block></xml>
      courseD_bee_conditionals_challenge2_2018_authored_hint:
        courseD_bee_conditionals_challenge1_b: |-
          Just like the `if at flower` blocks, the code inside a `while nectar > 0` will only run if the bee is at a flower. The difference is that the code inside will run over and over until there is no nectar left.  Try this pattern:
          
          <xml>  <block type="bee_whileNectarAmount">
          <title name="ARG1">nectarRemaining</title>
          <title name="OP">&gt;</title>
          <title name="ARG2">0</title>                    <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          </block></xml>
      courseD_bee_conditionals_challenge3_authored_hint:
        courseD_bee_conditionals_challenge1_b: |-
          Just like the `if at flower` blocks, the code inside a `while nectar > 0` will only run if the bee is at a flower. The main differences is that the code inside will run repetitively until there is no nectar left.  Try this pattern:
          
          <xml>  <block type="bee_whileNectarAmount">
          <title name="ARG1">nectarRemaining</title>
          <title name="OP">&gt;</title>
          <title name="ARG2">0</title>                    <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          </block></xml>
      courseD_bee_debugging1_authored_hint:
        courseD_bee_debugging1_a: |-
          Use the "Step" button to see if everything is right at the first step.
          
          How about the second?
          
          Where does it go wrong?
        courseD_bee_debugging1_b: Do you see any patterns that could be made more simple using a `repeat` loop?
      courseD_bee_debugging2_authored_hint:
        courseD_bee_debugging2_a: |-
          Use the "Step" button to see if everything is right at the first step.
          
          How about the second?
          
          Where does it go wrong?
        courseD_bee_debugging2_b: "Do you see a pattern?   \nTry using nested loops to solve this puzzle.\n\n![](https://images.code.org/72fbb8a06937479599b12804f990a0f3-image-1501012383369.50.27.png)"
      courseD_bee_debugging3_authored_hint:
        courseD_bee_debugging3_a: Is there any place where the bee does something that doesn't make sense? What happens when you change those blocks?
        courseD_bee_debugging3_b: Try simplifying the code using nested loops.
      courseD_bee_debugging4_authored_hint:
        courseD_bee_debugging4_a: "Try using the debugging process a couple of times in a row. \n\nWhat causes the first problem?\n\nOnce that problem is fixed, what goes wrong?"
        courseD_bee_debugging4_b: "If you're having a hard time figuring out how to make the stair step pattern, try tracing it with your finger and saying the commands out loud. \n\nDon't forget to point out the direction of the turns!"
      courseD_bee_debugging5_authored_hint:
        courseD_bee_debugging5_a: |-
          Start by looking at just the first loop.
          
          What does it do?
          
          What is it supposed to do?
          
          What does that tell you?
        courseD_bee_debugging5_b: Once you have the first loop the way you want it, what is left over in your code?
        courseD_bee_debugging5_c: |-
          Try wrapping the leftover loop around the rest of your completed code.  Does is work now?
          
          If not, what is still going wrong?
      courseD_bee_debugging6_authored_hint:
        courseD_bee_debugging6_a: |-
          Try running through the code using the "Step" button.  Is everything good at the first step?
          
          How about the second?
          
          Where do things go wrong?
        courseD_bee_debugging6_b: It looks like all of the right steps are here, you just need more of them.  How can you repeat the `get nectar` and `make honey` actions multiple times?
      courseD_bee_debugging7_authored_hint:
        courseD_bee_debugging7_a: "Try using the \"Step\" button.  Is everything right at the first step?  \n\nHow about the second?  \n\nWhere does it go wrong?  "
        courseD_bee_debugging7_b: If something needs to happen several times, try adding a `repeat` loop.
      courseD_bee_debugging8_authored_hint:
        courseD_bee_debugging8_a: Do you see a pattern that you can simplify with a loop?
        courseD_bee_debugging8_b: Try using a nested loop to make this code shorter.
      courseD_bee_debugging9_authored_hint:
        courseD_bee_debugging9_a: There are several ways to solve this problem...but they all involve turns!
        courseD_bee_debugging9_b: Figure out how you would solve the puzzle, then move step-by-step to try to make the code match what is in your head.
        courseD_bee_debugging9_c: "Envision one of these stair steps to the flowers.   \n\n![](https://images.code.org/d3dfd710961b9ff8571816a97d76ae46-image-1501012931437.59.18.png)\n\nCan you build either of these with what's in the workspace and toolbox?\n\n"
      courseD_bee_debugging9_predict1_authored_hint: [ ]
      courseD_bee_debugging_challenge1_authored_hint:
        courseD_bee_debugging_challenge1_a: Why does the first half of this program work? Think about why the bee needs to move backward. How much nectar does the bee collect each time it moves over a flower?
        courseD_bee_debugging_challenge1_b: On the way back, have the bee follow the same pattern. How much honey does the bee need to make each time it moves over a honey comb?
        courseD_bee_debugging_challenge1_c: |-
          After the bee makes it to the bottom row, have it repeat these commands:
          
          * Repeat 2 times:
          * Move forward
          * Make 3 honey
          * Move backward
      courseD_bee_debugging_challenge1_2018_authored_hint:
        courseD_bee_debugging_challenge1_a: Why does the first half of this program work? Think about why the bee needs to move backward. How much nectar does the bee collect each time it moves over a flower?
        courseD_bee_debugging_challenge1_b: On the way back, have the bee follow the same pattern. How much honey does the bee need to make each time it moves over a honey comb?
        courseD_bee_debugging_challenge1_c: |-
          After the bee makes it to the bottom row, have it repeat these commands:
          
          * Repeat 2 times:
          * Move forward
          * Make 3 honey
          * Move backward
      courseD_bee_debugging_challenge1a_authored_hint:
        courseD_bee_debugging_challenge1_a: Why does the first half of this program work? Think about why the bee needs to move backward. How much nectar does the bee collect each time it moves over a flower?
        courseD_bee_debugging_challenge1_b: To solve this puzzle, have the bee follow the same pattern to make honey that it does when collecting nectar.
        courseD_bee_debugging_challenge1_c: |-
          After the bee makes it to the bottom row, have it repeat these commands:
          
          <xml><block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_honey"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_move">
          <title name="DIR">moveBackward</title>
          </block>
          </next>
          </block></xml>
      courseD_bee_debugging_challenge2_authored_hint:
        courseD_bee_debugging_challenge1_a: Why the first half of this program work? Think about why the bee needs to move backward. How much nectar does the bee collect each time it moves over a flower?
        courseD_bee_debugging_challenge1_b: On the way back, have the bee follow the same pattern. How much honey does the bee need to make each time it moves over a honey comb?
        courseD_bee_debugging_challenge1_c: |-
          After the bee makes it to the bottom row, have it repeat these commands:
          
          * Repeat 2 times:
          * Move forward
          * Make 3 honey
          * Move backward
      courseD_bee_nestedLoops1_authored_hint:
        courseD_bee_nestedLoops1_a: Not working?  Try using the "Step" button to see what happens line by line.
        courseD_bee_nestedLoops1_b: Try writing code for one side of the square first. Can you loop this to get all of the nectar?
        courseD_bee_nestedLoops1_c: Remember to use the `get nectar` block once you are on a square with a flower.
      courseD_bee_nestedLoops1_2018_authored_hint:
        courseD_bee_nestedLoops1_a: Not working?  Try using the "Step" button to see what happens line by line.
        courseD_bee_nestedLoops1_b: Try writing code for one side of the square first. Can you loop this to get all of the nectar?
        courseD_bee_nestedLoops1_c: Remember to use the `get nectar` block once you are on a square with a flower.
      courseD_bee_nestedLoops1a_authored_hint:
        courseD_bee_nestedLoops1_a: Not working?  Try using the "Step" button to see what happens line by line.
        courseD_bee_nestedLoops1_c: Remember to use the `get nectar` block once you are on a square with a flower.
      courseD_bee_nestedLoops1a_2018_authored_hint:
        courseD_bee_nestedLoops1_a: Not working?  Try using the "Step" button to see what happens line by line.
        courseD_bee_nestedLoops1_c: Remember to use the `get nectar` block once you are on a square with a flower.
      courseD_bee_nestedLoops2_authored_hint:
        courseD_bee_nestedLoops2_a: To solve this puzzle, you will need to nest one `repeat` loop inside of another.
        courseD_bee_nestedLoops2_b: Can't figure out where to put the loops? Try writing the code on paper step-by-step and look for a pattern.
        courseD_bee_nestedLoops2_c: Remember you can put more than one block inside of a loop.
      courseD_bee_nestedLoops2_2018_authored_hint:
        courseD_bee_nestedLoops2_a: To solve this puzzle, you will need to nest one `repeat` loop inside of another.
        courseD_bee_nestedLoops2_b: Can't figure out where to put the loops? Try writing the code on paper step-by-step and look for a pattern.
        courseD_bee_nestedLoops2_c: Remember you can put more than one block inside of a loop.
      courseD_bee_nestedLoops2_predict1_authored_hint: [ ]
      courseD_bee_nestedLoops2_predict1_2018_authored_hint: [ ]
      courseD_bee_nestedLoops3_authored_hint:
        grade4_bee_nestedLoops1_a: If you don't understand how to use nested loops here, try writing out the instructions step by step on a piece of paper.  Circle the patterns that you see.
      courseD_bee_nestedLoops5_authored_hint:
        grade4_bee_nestedLoops4_a: Try building your code line by line and see if you can spot the places where a repeat will make the code shorter!
        grade4_bee_nestedLoops4_b: |-
          You will need a nested loop to move forward and get nectar, but only a single loop to collect honey at the end.
          
          Altogether, you should be using 3 loops.
      courseD_bee_nestedLoops6_authored_hint: [ ]
      courseD_bee_nestedLoops6_2018_authored_hint:
        courseD_maze_nestedLoops6_a: If you are stuck, try writing out the code out on paper without loops first and look for patterns.
        courseD_maze_nestedLoops6_b: Nesting `repeat` loops can help decrease the number of blocks used.
        courseD_maze_nestedLoops6_c: It will take two sets of nested `repeat` loops to solve this puzzle.
      courseD_bee_nestedLoops7_authored_hint:
        courseD_bee_nestedLoops7_a: You will need to repeat `get nectar` inside of another `repeat` that also has the `move forward` block inside of it.
        courseD_bee_nestedLoops7_b: You will need to use all three of the available `repeat` blocks to solve this puzzle.
        courseD_bee_nestedLoops7_c: |
          Nest your blocks three deep, like this:
          
          - repeat 4
          - repeat 3
          - repeat 12
          - get nectar
          - move forward
          - turn right
      courseD_bee_nestedLoops7_2018_authored_hint:
        courseD_bee_nestedLoops7_a: You will need to repeat `get nectar` inside of another `repeat` that also has the `move forward` block inside of it.
        courseD_bee_nestedLoops7_b: You will need to use all three of the available `repeat` blocks to solve this puzzle.
        courseD_bee_nestedLoops7_c: |
          Nest your blocks three deep, like this:
          
          - repeat 4
          - repeat 3
          - repeat 12
          - get nectar
          - move forward
          - turn right
      courseD_bee_nestedLoops8_authored_hint: [ ]
      courseD_bee_nestedLoops8_2018_authored_hint: [ ]
      courseD_bee_nestedLoops9_authored_hint: [ ]
      courseD_bee_nestedLoops9_2018_authored_hint: [ ]
      courseD_bee_nestedLoops9_predict2_authored_hint: [ ]
      courseD_bee_nestedLoops9_predict2_2018_authored_hint: [ ]
      courseD_bee_nested_loops_challenge1_authored_hint:
        courseD_bee_nested_loops_challenge2_a: Don't forget that you can `repeat` a single command or a longer pattern. You can even `repeat` a `repeat` block!
        courseD_bee_nested_loops_challenge2_b: To get all 4 gems, first use a loop to move away from the center. Turn left or right, then use a nested loop to move from the first pile of treasure to the second. If you repeat the nested loop enough times, the collector will move around the *entire* cave!
        courseD_bee_nested_loops_challenge2_c: The shortest program that reaches all the treasure uses only one `collect` block and two turns.
      courseD_bee_nested_loops_challenge2_authored_hint:
        courseD_bee_nested_loops_challenge2_a: Don't forget that you can `repeat` a single command or a longer pattern. You can even `repeat` a `repeat` block!
        courseD_bee_nested_loops_challenge2_b: To get all 4 gems, first use a loop to move away from the center. Then turn left or right and use a nested loop to move from the first pile of treasure to the second.
        courseD_bee_nested_loops_challenge2_c: If you repeat the nested loop enough times, the collector will move around the *entire* cave!
        courseD_bee_nested_loops_challenge2_d: The shortest program that reaches all the treasure uses only one `collect` block and two turns.
      courseD_bounce_events10s_authored_hint:
        courseD_bounce_events10s_a: |-
          You should have both of these events in your code:
          <xml><block type="bounce_whenBallInGoal" deletable="false"><next><block type="bounce_playSound"><title name="SOUND">swish</title><next><block type="bounce_incrementPlayerScore"></block></next></block></next></block><block type="bounce_whenBallMissesPaddle" deletable="false"><next><block type="bounce_playSound"><title name="SOUND">whistle</title><next><block type="bounce_incrementOpponentScore"></block></next></block></next></block</xml>
      courseD_bounce_events10s_2018_authored_hint:
        courseD_bounce_events10s_a: |-
          You should have both of these events in your code:
          <xml><block type="bounce_whenBallInGoal" deletable="false"><next><block type="bounce_playSound"><title name="SOUND">swish</title><next><block type="bounce_incrementPlayerScore"></block></next></block></next></block><block type="bounce_whenBallMissesPaddle" deletable="false"><next><block type="bounce_playSound"><title name="SOUND">whistle</title><next><block type="bounce_incrementOpponentScore"></block></next></block></next></block</xml>
      courseD_bounce_events11s_authored_hint:
        courseD_bounce_events11s_a: You will need to throw a ball when the game starts, when you hit the basket, and when the hand misses the ball.
      courseD_bounce_events11s_2018_authored_hint:
        courseD_bounce_events11s_a: You will need to throw a ball when the game starts, when you hit the basket, and when the hand misses the ball.
      courseD_bounce_events12s_authored_hint:
        courseD_bounce_events12s_a: You can speed up the basketball or the hand by attaching those blocks to the `when run` event.
        courseD_bounce_events12s_b: Try making each shot worth 2 points and changing the team logo to the one from your home town!
      courseD_bounce_events12s_2018_authored_hint:
        courseD_bounce_events12s_a: You can speed up the basketball or the hand by attaching those blocks to the `when run` event.
        courseD_bounce_events12s_b: Try making each shot worth 2 points and changing the team logo to the one from your home town!
      courseD_bounce_events1s_authored_hint:
        courseD_bounce_events1s_a: "You need to add the `move left` block to the `when left arrow` event to make this game work:\n\n <xml> <block type=\"bounce_whenLeft\" deletable=\"false\" x=\"20\" y=\"20\">\n    <next>\n      <block type=\"bounce_moveLeft\"/>\n    </next>\n  </block>\n   \n   </xml>"
        courseD_bounce_events1s_b: Don't forget to press "Run" and get the hand to the basket in order to solve this puzzle.
      courseD_bounce_events1s_2018_authored_hint:
        courseD_bounce_events1s_a: "You need to add the `move left` block to the `when left arrow` event to make this game work:\n\n <xml> <block type=\"bounce_whenLeft\" deletable=\"false\" x=\"20\" y=\"20\">\n    <next>\n      <block type=\"bounce_moveLeft\"/>\n    </next>\n  </block>\n   \n   </xml>"
        courseD_bounce_events1s_b: Don't forget to press "Run" and get the hand to the basket in order to solve this puzzle.
      courseD_bounce_events2s_authored_hint:
        courseD_bounce_events2s_a: |-
          You will need to have two sets of `move` events coded for this to work:
          
          <xml>
          <block type="bounce_whenLeft" deletable="false" x="20" y="20">
          <next>
          <block type="bounce_moveLeft"/>
          </next>
          </block>
          <block type="bounce_whenRight" deletable="false" x="180" y="20">
          <next>
          <block type="bounce_moveRight"/>
          </next>
          </block>
          </xml>
      courseD_bounce_events2s_2018_authored_hint:
        courseD_bounce_events2s_a: |-
          You will need to have two sets of `move` events coded for this to work:
          
          <xml>
          <block type="bounce_whenLeft" deletable="false" x="20" y="20">
          <next>
          <block type="bounce_moveLeft"/>
          </next>
          </block>
          <block type="bounce_whenRight" deletable="false" x="180" y="20">
          <next>
          <block type="bounce_moveRight"/>
          </next>
          </block>
          </xml>
      courseD_bounce_events5s_authored_hint:
        courseD_bounce_events5s_a: You do not need to move the hand to solve this puzzle.
        courseD_bounce_events5s_b: |-
          Make sure you have added this code to your workspace:
          <xml>  <block type="bounce_whenPaddleCollided" deletable="false"> <next> <block type="bounce_bounceBall"/></next></block></xml>
      courseD_bounce_events5s_2018_authored_hint:
        courseD_bounce_events5s_a: You do not need to move the hand to solve this puzzle.
        courseD_bounce_events5s_b: |-
          Make sure you have added this code to your workspace:
          <xml>  <block type="bounce_whenPaddleCollided" deletable="false"> <next> <block type="bounce_bounceBall"/></next></block></xml>
      courseD_bounce_events6s_authored_hint:
        courseD_bounce_events6s_a: |-
          Do you have an event that looks like this?
          <xml><block type="bounce_whenWallCollided" deletable="false"><next><block type="bounce_bounceBall"></block></next></block></block></xml>
        courseD_bounce_events6s_b: If you've written the code correctly, you don't have to move the hand to win.
      courseD_bounce_events6s_2018_authored_hint:
        courseD_bounce_events6s_a: |-
          Do you have an event that looks like this?
          <xml><block type="bounce_whenWallCollided" deletable="false"><next><block type="bounce_bounceBall"></block></next></block></block></xml>
        courseD_bounce_events6s_b: If you've written the code correctly, you don't have to move the hand to win.
      courseD_bounce_events7s_authored_hint:
        courseD_bounce_events7s_a: You can add sounds in more places if you feel like it!
      courseD_bounce_events7s_2018_authored_hint:
        courseD_bounce_events7s_a: You can add sounds in more places if you feel like it!
      courseD_bounce_events_template_authored_hint: [ ]
      courseD_bounce_events_template_2018_authored_hint: [ ]
      courseD_collector_debugging1_authored_hint:
        courseD_collector_debugging1_a: |-
          Use the "Step" button to see if everything is right at the first step.
          
          How about the second?
          
          Where does it go wrong?
        courseD_collector_debugging1_b: Do you see any patterns that could be made more simple using a `repeat` loop?
        courseD_collector_debugging1_c: 'Remember to use the `collect` block to pick up treasure once you have moved to it.  '
      courseD_collector_debugging10_predict1_authored_hint:
        courseD_collector_debugging9_a: There are several ways to solve this problem...but they all involve turns!
        courseD_collector_debugging9_b: Figure out how you would solve the puzzle, then move step-by-step to try to make the code match what is in your head.
      courseD_collector_debugging10_predict1_2018_authored_hint:
        courseD_collector_debugging9_a: There are several ways to solve this problem...but they all involve turns!
        courseD_collector_debugging9_b: Figure out how you would solve the puzzle, then move step-by-step to try to make the code match what is in your head.
      courseD_collector_debugging1_2018_authored_hint:
        courseD_collector_debugging1_a: |-
          Use the "Step" button to see if everything is right at the first step.
          
          How about the second?
          
          Where does it go wrong?
        courseD_collector_debugging1_b: Do you see any patterns that could be made more simple using a `repeat` loop?
        courseD_collector_debugging1_c: 'Remember to use the `collect` block to pick up treasure once you have moved to it.  '
      courseD_collector_debugging1a_authored_hint:
        courseD_collector_debugging1_a: |-
          Use the "Step" button to see if everything is right at the first step.
          
          How about the second?
          
          Where does it go wrong?
        courseD_collector_debugging1_c: 'Remember to use the `collect` block to pick up treasure once you have moved to it.  '
      courseD_collector_debugging1a_2018_authored_hint:
        courseD_collector_debugging1_a: |-
          Use the "Step" button to see if everything is right at the first step.
          
          How about the second?
          
          Where does it go wrong?
        courseD_collector_debugging1_c: 'Remember to use the `collect` block to pick up treasure once you have moved to it.  '
      courseD_collector_debugging2_authored_hint:
        courseD_collector_debugging2_a: |-
          Use the "Step" button to see if everything is right at the first step.
          
          How about the second?
          
          Where does it go wrong?
        courseD_collector_debugging2_b: Do you see any patterns that could be made more simple using a `repeat` loop?
        courseD_collector_debugging2_c: Try collecting treasure for one side of this pattern. Can you repeat this to collect treasure on the other two sides?
      courseD_collector_debugging2_2018_authored_hint:
        courseD_collector_debugging2_a: |-
          Use the "Step" button to see if everything is right at the first step.
          
          How about the second?
          
          Where does it go wrong?
        courseD_collector_debugging2_b: Do you see any patterns that could be made more simple using a `repeat` loop?
        courseD_collector_debugging2_c: Try collecting treasure for one side of this pattern. Can you repeat this to collect treasure on the other two sides?
      courseD_collector_debugging2a_authored_hint:
        courseD_collector_debugging2a_a: |-
          Use the "Step" button to see if everything is right at the first step.
          
          How about the second?
          
          Where does it go wrong?
        courseD_collector_debugging2a_c: |-
          What happens?
          
          What is supposed to happen?
          
          What does that tell you?
      courseD_collector_debugging2a_2018_authored_hint:
        courseD_collector_debugging2a_a: |-
          Use the "Step" button to see if everything is right at the first step.
          
          How about the second?
          
          Where does it go wrong?
        courseD_collector_debugging2a_c: |-
          What happens?
          
          What is supposed to happen?
          
          What does that tell you?
      courseD_collector_debugging3_authored_hint:
        courseD_collector_debugging3_a: Is there any place where Laurel does something that doesn't make sense? What happens when you change those blocks?
        courseD_collector_debugging3_b: Try simplifying the code using nested loops.
      courseD_collector_debugging3_2018_authored_hint:
        courseD_collector_debugging3_a: Is there any place where Laurel does something that doesn't make sense? What happens when you change those blocks?
        courseD_collector_debugging3_b: Try simplifying the code using nested loops.
      courseD_collector_debugging3a_authored_hint:
        courseD_collector_debugging3_a: Is there any place where Laurel does something that doesn't make sense? What happens when you change those blocks?
      courseD_collector_debugging3a_2018_authored_hint:
        courseD_collector_debugging3_a: Is there any place where Laurel does something that doesn't make sense? What happens when you change those blocks?
      courseD_collector_debugging4_authored_hint:
        courseD_collector_debugging4_a: "Try using the debugging process a couple of times in a row. \n\nWhat causes the first problem?\n\nOnce that problem is fixed, what goes wrong?"
        courseD_collector_debugging4_b: "If you're having a hard time figuring out how to make the stair step pattern, try tracing it with your finger and saying the commands out loud. \n\nDon't forget to point out the direction of the turns!"
        courseD_collector_debugging4_c: This loop is only missing one block. Can you figure out which one?
      courseD_collector_debugging4_2018_authored_hint:
        courseD_collector_debugging4_a: "Try using the debugging process a couple of times in a row. \n\nWhat causes the first problem?\n\nOnce that problem is fixed, what goes wrong?"
        courseD_collector_debugging4_b: "If you're having a hard time figuring out how to make the stair step pattern, try tracing it with your finger and saying the commands out loud. \n\nDon't forget to point out the direction of the turns!"
        courseD_collector_debugging4_c: This loop is only missing one block. Can you figure out which one?
      courseD_collector_debugging4a_authored_hint:
        courseD_collector_debugging4_a: "Try using the debugging process a couple of times in a row. \n\nWhat causes the first problem?\n\nOnce that problem is fixed, what goes wrong?"
        courseD_collector_debugging4_b: "If you're having a hard time figuring out how to make the stair step pattern, try tracing it with your finger and saying the commands out loud. \n\nDon't forget to point out the direction of the turns!"
      courseD_collector_debugging4a_2018_authored_hint:
        courseD_collector_debugging4_a: "Try using the debugging process a couple of times in a row. \n\nWhat causes the first problem?\n\nOnce that problem is fixed, what goes wrong?"
        courseD_collector_debugging4_b: "If you're having a hard time figuring out how to make the stair step pattern, try tracing it with your finger and saying the commands out loud. \n\nDon't forget to point out the direction of the turns!"
      courseD_collector_debugging5_authored_hint:
        courseD_collector_debugging5_a: |-
          Start by looking at just the first loop.
          
          What does it do?
          
          What is it supposed to do?
          
          What does that tell you?
        courseD_collector_debugging5_b: Once you have the first loop the way you want it, what is left over in your code?
      courseD_collector_debugging5_2018_authored_hint:
        courseD_collector_debugging5_a: |-
          Start by looking at just the first loop.
          
          What does it do?
          
          What is it supposed to do?
          
          What does that tell you?
        courseD_collector_debugging5_b: Once you have the first loop the way you want it, what is left over in your code?
      courseD_collector_debugging5a_authored_hint:
        courseD_collector_debugging5a_a: |-
          What does it do?
          
          What is it supposed to do?
          
          What does that tell you?
        courseD_collector_debugging5a_b: Once you have the first line of treasure collected, what is left over in your code?
      courseD_collector_debugging5a_2018_authored_hint:
        courseD_collector_debugging5a_a: |-
          What does it do?
          
          What is it supposed to do?
          
          What does that tell you?
        courseD_collector_debugging5a_b: Once you have the first line of treasure collected, what is left over in your code?
      courseD_collector_debugging6_authored_hint:
        courseD_collector_debugging6_a: |-
          Try running through the code using the "Step" button.  Is everything good at the first step?
          
          How about the second?
          
          Where do things go wrong?
        courseD_collector_debugging6_b: It looks like all of the right steps are here, you just need more of them.  How can you repeat the `collect` action multiple times?
      courseD_collector_debugging6_2018_authored_hint:
        courseD_collector_debugging6_a: |-
          Try running through the code using the "Step" button.  Is everything good at the first step?
          
          How about the second?
          
          Where do things go wrong?
        courseD_collector_debugging6_b: It looks like all of the right steps are here, you just need more of them.  How can you repeat the `collect` action multiple times?
      courseD_collector_debugging6a_authored_hint:
        courseD_collector_debugging6_a: |-
          Try running through the code using the "Step" button.  Is everything good at the first step?
          
          How about the second?
          
          Where do things go wrong?
        courseD_collector_debugging6_b: It looks like all of the blocks you need are in the workspace. Try clicking "start over" if things get too confusing.
      courseD_collector_debugging6a_2018_authored_hint:
        courseD_collector_debugging6_a: |-
          Try running through the code using the "Step" button.  Is everything good at the first step?
          
          How about the second?
          
          Where do things go wrong?
        courseD_collector_debugging6_b: It looks like all of the blocks you need are in the workspace. Try clicking "start over" if things get too confusing.
      courseD_collector_debugging7_authored_hint:
        courseD_collector_debugging7_a: |-
          Try running through the code using the "Step" button.  Is everything good at the first step?
          
          How about the second?
          
          Where do things go wrong?
        courseD_collector_debugging7_b: If something needs to happen several times, try adding a `repeat` loop.
        courseD_collector_debugging7_c: If you're having trouble, try writing the steps on a piece of paper and then putting the blocks into that order.
      courseD_collector_debugging8_authored_hint:
        courseD_collector_debugging8_a: Do you see a pattern that you can simplify with a loop?
        courseD_collector_debugging8_b: Try using a nested loop to make this code shorter.
      courseD_collector_debugging8_2018_authored_hint:
        courseD_collector_debugging8_a: Do you see a pattern that you can simplify with a loop?
        courseD_collector_debugging8_b: Try using a nested loop to make this code shorter.
      courseD_collector_debugging8a_authored_hint: [ ]
      courseD_collector_debugging8a_2018_authored_hint: [ ]
      courseD_collector_debugging9_authored_hint:
        courseD_collector_debugging9_a: There are several ways to solve this problem...but they all involve turns!
        courseD_collector_debugging9_b: Figure out how you would solve the puzzle, then move step-by-step to try to make the code match what is in your head.
      courseD_collector_debugging9_2018_authored_hint:
        courseD_collector_debugging9_a: There are several ways to solve this problem...but they all involve turns!
        courseD_collector_debugging9_b: Figure out how you would solve the puzzle, then move step-by-step to try to make the code match what is in your head.
      courseD_collector_debugging9a_authored_hint: [ ]
      courseD_collector_debugging9a_2018_authored_hint: [ ]
      courseD_collector_debugging_challenge2_authored_hint:
        courseD_collector_debugging_challenge2_a: "Start by collecting just **two** gems from each of the first **two** piles.\n\n![](https://images.code.org/8493c16a5b913b91e28b36eb2b280b8c-image-1494775939149.25.04 AM copy.png)\nUse these blocks.\n\n<xml>\n<block type=\"collector_collect\"></block>\n<block type=\"controls_repeat\" limit=\"2\">\n    <title name=\"TIMES\">2</title>\n  </block>\n<block type=\"maze_move\" x=\"175px\" y=\"17px\">\n                    <title name=\"DIR\">moveForward</title>\n\n                  </block>\n                  \n \n   <block type=\"controls_repeat\" limit=\"2\" x=\"175px\" y=\"56px\">\n    <title name=\"TIMES\">2</title>\n  </block>\n\n\n\n</xml>"
        courseD_collector_debugging_challenge2_b: "Next, collect the remaining gems in this row.\n\n![](https://images.code.org/22fff9fb20a50beaf4800aa022a5deb0-image-1494775944657.25.04 AM.png)\nAdd these blocks to your program.\n\n<xml><block type=\"maze_move\">\n                    <title name=\"DIR\">moveBackward</title>\n                  </block>\n<block type=\"controls_repeat\">\n        <title name=\"TIMES\">4</title>\n        <statement name=\"DO\">\n          \n        </statement>\n      </block>\n</xml>"
        courseD_collector_debugging_challenge2_c: "Finally, collect the remaining treasure. Add these blocks to your program.\n\n<xml>\n  <block type=\"maze_turn\">\n                <title name=\"DIR\">turnRight</title>\n              </block>\n      <block type=\"controls_repeat\">\n        <title name=\"TIMES\">4</title>\n        <statement name=\"DO\">\n          \n        </statement>\n      </block>\n\n</xml>"
        courseD_collector_debugging_challenge2_d: |-
          Here is the complete solution for this puzzle.
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat">
          <title name="TIMES">4</title>
          <statement name="DO">
          <block type="controls_repeat">
          <title name="TIMES">4</title>
          <statement name="DO">
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="collector_collect"/>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_move">
          <title name="DIR">moveBackward</title>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </xml>
      courseD_collector_debugging_challenge2_2018_authored_hint:
        courseD_collector_debugging_challenge2_a: "Start by collecting just **two** gems from each of the first **two** piles.\n\n![](https://images.code.org/8493c16a5b913b91e28b36eb2b280b8c-image-1494775939149.25.04 AM copy.png)\nUse these blocks.\n\n<xml>\n<block type=\"collector_collect\"></block>\n<block type=\"controls_repeat\" limit=\"2\">\n    <title name=\"TIMES\">2</title>\n  </block>\n<block type=\"maze_move\" x=\"175px\" y=\"17px\">\n                    <title name=\"DIR\">moveForward</title>\n\n                  </block>\n                  \n \n   <block type=\"controls_repeat\" limit=\"2\" x=\"175px\" y=\"56px\">\n    <title name=\"TIMES\">2</title>\n  </block>\n\n\n\n</xml>"
        courseD_collector_debugging_challenge2_b: "Next, collect the remaining gems in this row.\n\n![](https://images.code.org/22fff9fb20a50beaf4800aa022a5deb0-image-1494775944657.25.04 AM.png)\nAdd these blocks to your program.\n\n<xml><block type=\"maze_move\">\n                    <title name=\"DIR\">moveBackward</title>\n                  </block>\n<block type=\"controls_repeat\">\n        <title name=\"TIMES\">4</title>\n        <statement name=\"DO\">\n          \n        </statement>\n      </block>\n</xml>"
        courseD_collector_debugging_challenge2_c: "Finally, collect the remaining treasure. Add these blocks to your program.\n\n<xml>\n  <block type=\"maze_turn\">\n                <title name=\"DIR\">turnRight</title>\n              </block>\n      <block type=\"controls_repeat\">\n        <title name=\"TIMES\">4</title>\n        <statement name=\"DO\">\n          \n        </statement>\n      </block>\n\n</xml>"
        courseD_collector_debugging_challenge2_d: |-
          Here is the complete solution for this puzzle.
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat">
          <title name="TIMES">4</title>
          <statement name="DO">
          <block type="controls_repeat">
          <title name="TIMES">4</title>
          <statement name="DO">
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="collector_collect"/>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_move">
          <title name="DIR">moveBackward</title>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </xml>
      courseD_collector_nested_loops_challenge2_authored_hint:
        courseD_bee_nested_loops_challenge2_a: Don't forget that you can `repeat` a single command or a longer pattern. You can even `repeat` a `repeat` block!
        courseD_bee_nested_loops_challenge2_b: To get all 4 gems, first use a loop to move away from the center. Turn left or right, then use a nested loop to move from the first pile of treasure to the second. If you repeat the nested loop enough times, the collector will move around the *entire* cave!
        courseD_bee_nested_loops_challenge2_c: The shortest program that reaches all the treasure uses only one `collect` block and two turns.
        courseD_bee_nested_loops_challenge2_d: |-
          **Solution:**
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseD_collector_nested_loops_challenge2_2018_authored_hint:
        courseD_bee_nested_loops_challenge2_a: Don't forget that you can `repeat` a single command or a longer pattern. You can even `repeat` a `repeat` block!
        courseD_bee_nested_loops_challenge2_b: To get all 4 gems, first use a loop to move away from the center. Turn left or right, then use a nested loop to move from the first pile of treasure to the second. If you repeat the nested loop enough times, the collector will move around the *entire* cave!
        courseD_bee_nested_loops_challenge2_c: The shortest program that reaches all the treasure uses only one `collect` block and two turns.
        courseD_bee_nested_loops_challenge2_d: |-
          **Solution:**
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseD_collector_nested_loops_challenge2a_authored_hint:
        courseD_collector_nested_loops_challenge2a_a: Don't forget that you can `repeat` a single command or a longer pattern. You can even `repeat` a `repeat` block!
        courseD_collector_nested_loops_challenge2a_b: Can you figure out how to get all four gems without using any more blocks than it takes to get two?
      courseD_collector_ramp10_authored_hint:
        courseD_artist_ramp10_a: |-
          Instead of using four `move forward` blocks for each side, try putting one `move forward` block inside of a `repeat` loop, like this:
          <xml><block type="controls_repeat">
          <title name="TIMES">4</title>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          </block></xml>
        courseD_artist_ramp10_b: Don't forget to collect one piece of treasure, then turn to start on a new side of the square!
        courseD_artist_ramp10_c: If you want to simplify your code, you can put one loop inside of another! This is called a **nested loop**.
      courseD_collector_ramp8_authored_hint:
        courseD_collector_ramp8_a: When you get to a square with treasure, use `collect` to pick it up. For this puzzle, you'll need to collect treasure more than once!
        courseD_collector_ramp8_b: If you want to simplify your code more, you can actually put one `repeat` loop inside of another! This is called a **nested loop**.
      courseD_collector_ramp9_authored_hint:
        courseD_collector_ramp9_a: Start by moving Laurel to the first treasure, then collecting it. Can you repeat this sequence to get the second pile?
        courseD_collector_ramp9_b: If you want to simplify your code, you can put one repeat loop inside of another! This is called a **nested loop**.
      courseD_collector_until_challenge1_authored_hint: [ ]
      courseD_debugging_1_authored_hint:
        courseD_debugging_1_a: |-
          Use the "Step" button to see if everything is right at the first step.
          
          How about the second?
          
          Where does it go wrong?
        courseD_debugging_1_b: Do you see any patterns that could be made more simple using a `repeat` loop?
      courseD_debugging_2_authored_hint:
        courseD_debugging_2_a: |-
          Use the "Step" button to see if everything is right at the first step.
          
          How about the second?
          
          Where does it go wrong?
        courseD_debugging_2_b: Do you see a pattern?  Try using nested loops to solve this puzzle.
      courseD_debugging_3_authored_hint:
        courseD_debugging_3_a: Is there any place where the bee does something that doesn't make sense? What happens when you change those blocks?
        courseD_debugging_3_b: Try simplifying the code using nested loops.
      courseD_debugging_4_authored_hint:
        courseD_debugging_4_a: "Try using the debugging process a couple of times in a row. \n\nWhat causes the first problem?\n\nOnce that problem is fixed, what goes wrong?"
        courseD_debugging_4_b: "If you're having a hard time figuring out how to make the stair step pattern, try tracing it with your finger and saying the commands out loud. \n\nDon't forget to point out the direction of the turns!"
      courseD_debugging_5_authored_hint:
        courseD_debugging_5_a: |-
          Start by looking at just the first loop.
          
          What does it do?
          
          What is it supposed to do?
          
          What does that tell you?
        courseD_debugging_5_b: Once you have the first loop the way you want it, what is left over in your code?
        courseD_debugging_5_c: |-
          Try wrapping the leftover loop around the rest of your completed code.  Does is work now?
          
          If not, what is still going wrong?
      courseD_debugging_6_authored_hint:
        courseD_debugging_6_a: |-
          Try running through the code using the "Step" button.  Is everything good at the first step?
          
          How about the second?
          
          Where do things go wrong?
        courseD_debugging_6_b: It looks like all of the right steps are here, you just need more of them.  How can you repeat the `get nectar` and `make honey` actions multiple times?
      courseD_external_cond_authored_hint: [ ]
      courseD_farmer_condLoops1_authored_hint:
        courseD_farmer_condLoops1_a: You will need to look for corn 5 times, using a repeat loop.
        courseD_farmer_condLoops1_b: Make sure to use an `if at corn` block or you might try to pick something that's not there!
      courseD_farmer_condLoops1_2018_authored_hint:
        courseD_farmer_condLoops1_a: You will need to look for corn 5 times, using a repeat loop.
        courseD_farmer_condLoops1_b: Make sure to use an `if at corn` block or you might try to pick something that's not there!
      courseD_farmer_condLoops2_authored_hint:
        courseD_farmer_condLoops2_a: 'The best way to do this is to nest `if` statements by placing one inside of the other.  '
        courseD_farmer_condLoops2_b: For this puzzle, you should have one `if/else` statement and one plain `if` statement.
        courseD_farmer_condLoops2_c: "Your `if` statement could look a lot like this:\n\n- if at corn\n - pick corn\n- else\n - if at lettuce\n  \\t- pick lettuce\n\nIf there is nothing there, you won't pick anything!"
      courseD_farmer_condLoops2_2018_authored_hint:
        courseD_farmer_condLoops2_a: 'The best way to do this is to nest `if` statements by placing one inside of the other.  '
        courseD_farmer_condLoops2_b: For this puzzle, you should have one `if/else` statement and one plain `if` statement.
        courseD_farmer_condLoops2_c: "Your `if` statement could look a lot like this:\n\n- if at corn\n - pick corn\n- else\n - if at lettuce\n  \\t- pick lettuce\n\nIf there is nothing there, you won't pick anything!"
      courseD_farmer_condLoops3_authored_hint:
        courseD_farmer_condLoops3_a: |-
          To get all of the items, try nesting `if` statements three deep.
          
          This means you should put one `if` statement inside of another, then put a third `if` statement inside the second one.
        courseD_farmer_condLoops3_b: For this puzzle, you should have two `if/else` statements and one plain `if` statement.
      courseD_farmer_condLoops3_2018_authored_hint:
        courseD_farmer_condLoops3_a: |-
          To get all of the items, try nesting `if` statements three deep.
          
          This means you should put one `if` statement inside of another, then put a third `if` statement inside the second one.
        courseD_farmer_condLoops3_b: For this puzzle, you should have two `if/else` statements and one plain `if` statement.
      courseD_farmer_condLoops4_authored_hint:
        grade3_RunningFarm_4courseD_farmer_condLoops4: |-
          No one knows how many heads of lettuce will grow from each sprout.
          
          Use a `while there is lettuce` loop to keep picking until each piece has been gathered.
        grade3_RunningFarm_4courseD_farmer_condLoops4_b: The `while` loop will handle empty spaces as well! Since there is no lettuce, it will not pick any and let the code move on.
        grade3_RunningFarm_4courseD_farmer_condLoops4_c: You can use either a `while path ahead` loop or a `repeat` loop to go through all of the crops.
      courseD_farmer_condLoops4_2018_authored_hint:
        grade3_RunningFarm_4courseD_farmer_condLoops4: |-
          No one knows how many heads of lettuce will grow from each sprout.
          
          Use a `while there is lettuce` loop to keep picking until each piece has been gathered.
        grade3_RunningFarm_4courseD_farmer_condLoops4_b: The `while` loop will handle empty spaces as well! Since there is no lettuce, it will not pick any and let the code move on.
        grade3_RunningFarm_4courseD_farmer_condLoops4_c: You can use either a `while path ahead` loop or a `repeat` loop to go through all of the crops.
      courseD_farmer_condLoops4a_authored_hint:
        grade3_RunningFarm_4courseD_farmer_condLoops4: |-
          No one knows how many heads of lettuce will grow from each sprout.
          
          Use a `while there is lettuce` loop to keep picking until each piece has been gathered.
      courseD_farmer_condLoops5_authored_hint:
        courseD_farmer_condLoops5_a: 'There is a new loop: `repeat until at pumpkin`. Can you see how to use it in this puzzle?'
        courseD_farmer_condLoops5_b: There could be more than one corn or lettuce plant in each spot. Use a `while` loop to gather all of them!
      courseD_farmer_condLoops5_2018_authored_hint:
        courseD_farmer_condLoops5_a: 'There is a new loop: `repeat until at pumpkin`. Can you see how to use it in this puzzle?'
        courseD_farmer_condLoops5_b: There could be more than one corn or lettuce plant in each spot. Use a `while` loop to gather all of them!
      courseD_farmer_condLoops6_authored_hint:
        courseD_farmer_condLoops6_a: Use a `while path ahead` loop to move the farmer down each piece of the spiral.
        courseD_farmer_condLoops6_b: You only need to check for corn during most of the harvest.  Just pick one pumpkin at the very end of your program.
      courseD_farmer_condLoops6_2018_authored_hint:
        courseD_farmer_condLoops6_a: Use a `while path ahead` loop to move the farmer down each piece of the spiral.
        courseD_farmer_condLoops6_b: You only need to check for corn during most of the harvest.  Just pick one pumpkin at the very end of your program.
      courseD_farmer_condLoops7_authored_hint:
        courseD_farmer_condLoops7_a: |-
          Notice that the easiest path to get to all of the crops is still a spiral.
          
          ![](https://images.code.org/ba8b8c624f21ade9ac823b045085c435-image-1479364378437.png)
        courseD_farmer_condLoops7_b: Try using `when path ahead` to keep the harvester moving the right number of steps.
      courseD_farmer_condLoops7_2018_authored_hint:
        courseD_farmer_condLoops7_a: |-
          Notice that the easiest path to get to all of the crops is still a spiral.
          
          ![](https://images.code.org/ba8b8c624f21ade9ac823b045085c435-image-1479364378437.png)
        courseD_farmer_condLoops7_b: Try using `when path ahead` to keep the harvester moving the right number of steps.
      courseD_farmer_condLoops8_authored_hint: [ ]
      courseD_farmer_condLoops8_2018_authored_hint: [ ]
      courseD_farmer_condLoops9_authored_hint: [ ]
      courseD_farmer_condLoops9_2018_authored_hint: [ ]
      courseD_farmer_condLoops9_predict1_authored_hint: [ ]
      courseD_farmer_condLoops9_predict1_2018_authored_hint: [ ]
      courseD_farmer_condLoops_challenge1_authored_hint:
        courseD_farmer_condLoops_challenge1_a: The "Step" button could be very helpful in this challenge.
        courseD_farmer_condLoops_challenge1_b: Normally you would just `pick pumpkin` if you are at a pumpkin. What else do you need to do if you're at a pumpkin?
      courseD_farmer_condLoops_challenge1_2018_authored_hint:
        courseD_farmer_condLoops_challenge1_a: The "Step" button could be very helpful in this challenge.
        courseD_farmer_condLoops_challenge1_b: Normally you would just `pick pumpkin` if you are at a pumpkin. What else do you need to do if you're at a pumpkin?
      courseD_farmer_condLoops_challenge2_authored_hint:
        courseD_farmer_condLoops_challenge2_a: The amount of each vegetable in each space can change. A `while` loop can help!
      courseD_farmer_condLoops_challenge2_2018_authored_hint:
        courseD_farmer_condLoops_challenge2_a: The amount of each vegetable in each space can change. A `while` loop can help!
      courseD_farmer_condLoops_challenge2_clone_authored_hint: [ ]
      courseD_farmer_conditionals10_authored_hint: [ ]
      courseD_farmer_conditionals4_authored_hint:
        courseD_farmer_conditionals4_a: Instead of using a `repeat` loop, use a `while` loop to keep digging until the pile is gone.
      courseD_farmer_conditionals5_authored_hint:
        courseD_farmer_conditionals5a: Try nesting a `while` loop inside of a `repeat` loop.
      courseD_farmer_conditionals6_authored_hint:
        courseD_farmer_conditionals6_a: Make sure you're using the `while` loop to figure out how many times to fill each hole.
        courseD_farmer_conditionals6_b: Notice that the farmer needs to move forward and down several times in a stair-step pattern.
      courseD_farmer_conditionals7_authored_hint:
        courseD_farmer_conditionals8_a: The `while path ahead` block lets you keep going, even if you don't know how many squares are in a path.
      courseD_farmer_conditionals8_authored_hint:
        courseD_farmer_conditionals8_a: You are going to need to use more than one `while` loop.
        courseD_farmer_conditionals8_b: Every hole is at the end of a path, so use `while path ahead` before using `while there is a hole`.
        courseD_farmer_conditionals8_c: Notice that you need to repeat the `while path ahead`, `while there is a hole` code six times.
      courseD_farmer_conditionals9_authored_hint: [ ]
      courseD_farmer_until_challenge2_authored_hint: [ ]
      courseD_farmer_until_challenge2_2018_authored_hint: [ ]
      courseD_farmer_while1_authored_hint:
        courseD_farmer_while1_a: You will need to move forward four times to get to the pile. Can you use a `repeat` loop for this?
        courseD_farmer_while1_b: Use the `remove 1` block when you are standing on the pile of dirt to remove it.
      courseD_farmer_while10_authored_hint: [ ]
      courseD_farmer_while10_2018_authored_hint: [ ]
      courseD_farmer_while10_predict2_authored_hint: [ ]
      courseD_farmer_while10_predict2_2018_authored_hint: [ ]
      courseD_farmer_while1_2018_authored_hint:
        courseD_farmer_while1_a: You will need to move forward four times to get to the pile. Can you use a `repeat` loop for this?
        courseD_farmer_while1_b: Use the `remove 1` block when you are standing on the pile of dirt to remove it.
      courseD_farmer_while2_authored_hint:
        courseD_farmer_while2_a: You will only need to move once to get to the hole.
        courseD_farmer_while2_b: You will need the `fill 1` block six times. Can you use a loop to make this simpler?
      courseD_farmer_while2_2018_authored_hint:
        courseD_farmer_while2_a: You will only need to move once to get to the hole.
        courseD_farmer_while2_b: You will need the `fill 1` block six times. Can you use a loop to make this simpler?
      courseD_farmer_while3_authored_hint:
        courseD_farmer_while3_a: A loop can help you simplify your code here.
        courseD_farmer_while3_b: You shouldn't need any `turn` blocks to get to the pile.
      courseD_farmer_while3_2018_authored_hint:
        courseD_farmer_while3_a: A loop can help you simplify your code here.
        courseD_farmer_while3_b: You shouldn't need any `turn` blocks to get to the pile.
      courseD_farmer_while4_authored_hint:
        courseD_farmer_conditionals4_a: Instead of using a `repeat` loop, use a `while` loop to keep digging until the pile is gone.
        courseD_farmer_conditionals4_b: This looks very similar to an earlier puzzle, the only difference is which loop you need.
      courseD_farmer_while4_2018_authored_hint:
        courseD_farmer_conditionals4_a: Instead of using a `repeat` loop, use a `while` loop to keep digging until the pile is gone.
        courseD_farmer_conditionals4_b: This looks very similar to an earlier puzzle, the only difference is which loop you need.
      courseD_farmer_while4_predict1_authored_hint: [ ]
      courseD_farmer_while4_predict1_2018_authored_hint: [ ]
      courseD_farmer_while5_authored_hint:
        courseD_farmer_conditionals5a_a: Try nesting a `while` loop inside of a `repeat` loop.
        courseD_farmer_conditionals5a_b: The farmer needs to move forward a total of five times to get to the end of the row. What else does the farmer need to do?
        courseD_farmer_conditionals5a_c: Move forward 5 times. Each time you move forward, remove the pile of dirt by using the `while there is a pile` block.
      courseD_farmer_while5_2018_authored_hint:
        courseD_farmer_conditionals5a_a: Try nesting a `while` loop inside of a `repeat` loop.
        courseD_farmer_conditionals5a_b: The farmer needs to move forward a total of five times to get to the end of the row. What else does the farmer need to do?
        courseD_farmer_conditionals5a_c: Move forward 5 times. Each time you move forward, remove the pile of dirt by using the `while there is a pile` block.
      courseD_farmer_while6_authored_hint:
        courseD_farmer_conditionals6_a: Make sure you're using the `while` loop to figure out how many times to fill each hole.
        courseD_farmer_conditionals6_b: Notice that the farmer needs to move forward and down several times in a stair-step pattern.
        courseD_farmer_conditionals6_c: |-
          The stair step pattern uses the following blocks
          - move forward
          - fill hole
          - turn right
          - move forward
          - fill hole
          - turn left
          
          How many times do you need to use this stair step pattern?
          
          Make sure you are using the `while there is a hole` to fill the hole.
      courseD_farmer_while6_2018_authored_hint:
        courseD_farmer_conditionals6_a: Make sure you're using the `while` loop to figure out how many times to fill each hole.
        courseD_farmer_conditionals6_b: Notice that the farmer needs to move forward and down several times in a stair-step pattern.
        courseD_farmer_conditionals6_c: |-
          The stair step pattern uses the following blocks
          - move forward
          - fill hole
          - turn right
          - move forward
          - fill hole
          - turn left
          
          How many times do you need to use this stair step pattern?
          
          Make sure you are using the `while there is a hole` to fill the hole.
      courseD_farmer_while7_authored_hint:
        courseD_farmer_conditionals8_a: The `while path ahead` block lets you keep going, even if you don't know how many squares are in a path.
        courseD_farmer_conditionals8_b: Putting a `while path ahead` loop inside of a repeat loop can help you in this puzzle.
        courseD_farmer_conditionals8_c: What do you need to do at the end of each path?
      courseD_farmer_while7_2018_authored_hint:
        courseD_farmer_conditionals8_a: The `while path ahead` block lets you keep going, even if you don't know how many squares are in a path.
        courseD_farmer_conditionals8_b: Putting a `while path ahead` loop inside of a repeat loop can help you in this puzzle.
        courseD_farmer_conditionals8_c: What do you need to do at the end of each path?
      courseD_farmer_while8_authored_hint:
        courseD_farmer_conditionals8_a: You are going to need to use more than one `while` loop.
        courseD_farmer_conditionals8_b: Every hole is at the end of a path, so use `while path ahead` before using `while there is a hole`.
        courseD_farmer_conditionals8_c: Notice that you need to repeat the `while path ahead`, `while there is a hole` code six times.
      courseD_farmer_while8_2018_authored_hint:
        courseD_farmer_conditionals8_a: You are going to need to use more than one `while` loop.
        courseD_farmer_conditionals8_b: Every hole is at the end of a path, so use `while path ahead` before using `while there is a hole`.
        courseD_farmer_conditionals8_c: Notice that you need to repeat the `while path ahead`, `while there is a hole` code six times.
      courseD_farmer_while9_authored_hint: [ ]
      courseD_farmer_while9_2018_authored_hint: [ ]
      courseD_farmer_while_challenge1_authored_hint:
        courseD_farmer_while_challenge1_a: Each hole or pile is located one space **backward** from the end of the path.
        courseD_farmer_while_challenge1_b: If you use a `while` loop, you can tell the farmer to remove a pile or fill a hole, even if one isn't there. That means you can program her to remove any dirt or fill any hole, no matter where she is.
        courseD_farmer_conditionals8_c: It is possible to solve this without using any `repeat` loops. To do this, you will need to use four `while` loops.
      courseD_farmer_while_challenge1_2018_authored_hint:
        courseD_farmer_while_challenge1_a: Each hole or pile is located one space **backward** from the end of the path.
        courseD_farmer_while_challenge1_b: If you use a `while` loop, you can tell the farmer to remove a pile or fill a hole, even if one isn't there. That means you can program her to remove any dirt or fill any hole, no matter where she is.
        courseD_farmer_conditionals8_c: It is possible to solve this without using any `repeat` loops. To do this, you will need to use four `while` loops.
      courseD_farmer_while_challenge2_authored_hint:
        courseD_farmer_while_challenge1_a: Each hole or pile is located one space **backward** from the end of the path.
        courseD_farmer_while_challenge1_b: If you use a `while` loop, you can tell the farmer to remove a pile or fill a hole, even if one isn't there. That means you can program her to remove any dirt and fill any hole, while standing in the same place.
        courseD_farmer_conditionals8_c: It is possible to solve this without using any `repeat` loops. To do this, you will need to use four `while` loops.
      courseD_farmer_while_challenge2_2018_authored_hint:
        courseD_farmer_while_challenge1_a: Each hole or pile is located one space **backward** from the end of the path.
        courseD_farmer_while_challenge1_b: If you use a `while` loop, you can tell the farmer to remove a pile or fill a hole, even if one isn't there. That means you can program her to remove any dirt and fill any hole, while standing in the same place.
        courseD_farmer_conditionals8_c: It is possible to solve this without using any `repeat` loops. To do this, you will need to use four `while` loops.
      courseD_harvester_nested_loops_challenge1-broken_authored_hint:
        courseD_harvester_nested_loops_challenge1_a: You have probably already used a loop to create a zig-zag pattern. If you remember that algorithm, you can make a few additions to it here.
      courseD_harvester_nested_loops_challenge1_authored_hint:
        courseD_harvester_nested_loops_challenge1_a: 'Try following this path to reach all of the corn! '
        courseD_harvester_nested_loops_challenge1_b: To collect more than one piece of corn, you need to use `pick corn` more than one time.
        courseD_harvester_nested_loops_challenge1_c: You will need to put a small loop inside of your main loop to solve this puzzle!
      courseD_harvester_nested_loops_challenge1_2018_authored_hint:
        courseD_harvester_nested_loops_challenge1_a: 'Try following this path to reach all of the corn! '
        courseD_harvester_nested_loops_challenge1_b: To collect more than one piece of corn, you need to use `pick corn` more than one time.
        courseD_harvester_nested_loops_challenge1_c: You will need to put a small loop inside of your main loop to solve this puzzle!
      courseD_iceage_loops1_authored_hint:
        courseD_iceage_loops1_a: Watch out for broken ice! Scrat will fall right through!
        courseD_iceage_loops1_b: |-
          You will have to use this block:
          <xml><block type="maze_moveForward"/></xml>
      courseD_iceage_loops10_authored_hint:
        courseB_iceage_loops10_a: Watch out for broken ice! Scrat will fall into the water!
        courseB_iceage_loops10_b: Try saying the steps out loud or writing them down on a piece of paper. Do you see any patterns?
        courseB_iceage_loops10_c: This is a long puzzle! Follow this path.
      courseD_iceage_loops2_authored_hint:
        courseD_iceage_loops2_a: Break this puzzle into two pieces, one before the corner, and one after the corner.
        courseD_iceage_loops2_b: If you get stuck, try saying the steps out loud.
        courseD_iceage_loops2_c: Follow this path to get Scrat to the acorn.
      courseD_iceage_loops3_authored_hint:
        courseB_iceage_loops3_a: |-
          Use this new block!
          <xml><block type="controls_repeat_dropdown">
          <title name="TIMES" config="2-10">5</title>
          </block></xml>
        courseB_iceage_loops3_b: To repeat code, drag out a `repeat` loop, then put the block you want repeated inside.
      courseD_iceage_loops4_authored_hint:
        courseD_iceage_loops4_a: Don't be afraid to run your code and see what happens!
        courseD_iceage_loops4_b: Try writing down the steps Scrat would take to get to the acorn.  Do you see a pattern?
        courseD_iceage_loops4_c: This is the path Scrat should take.
      courseD_iceage_loops6_authored_hint:
        courseD_iceage_loops6_a: Your final code will have **three** `move forward` blocks.
        courseD_iceage_loops6_b: You only need to add **one** more loop!
        courseD_iceage_loops6_c: Your final path should look like this.
      courseD_iceage_loops7_authored_hint:
        courseB_iceage_loops7_a: If you get stuck, try writing steps down on a piece of paper. Do you see a pattern?
        courseB_iceage_loops7_b: This is the path Scrat should take to get to the acorn.
      courseD_iceage_loops8_authored_hint:
        courseD_iceage_loops8_a: Are the `turn` blocks right? What else can you change?
        courseD_iceage_loops8_b: The first loop should repeat **3** times, the second should repeat **5** times, the third loop should repeat **4** times, and the last loop should repeat **4** times.
        courseD_iceage_loops8_c: Use loops to help Scrat follow this path.
      courseD_iceage_loops9_authored_hint:
        courseD_iceage_loops9_a: Having trouble? Try breaking this puzzle into smaller pieces. Don't be afraid to run your puzzle as you code!
        courseD_iceage_loops9_b: Your final code should have **4** loops.
        courseD_iceage_loops9_c: Scrat should follow this path to get the acorn.
      courseD_maze_loops_challenge1_authored_hint:
        courseD_bee_nested_loops_challenge1_a: Don't forget that you can `repeat` a single command or a longer pattern. You can even `repeat` a `repeat` block!
        courseD_bee_nested_loops_challenge1_b: To get all 4 gems, first use a loop to move away from the center. Turn left or right, then use a nested loop to move from the first pile of treasure to the second. If you repeat the nested loop enough times, the collector will move around the *entire* cave!
        courseD_bee_nested_loops_challenge1_c: The shortest program that reaches all the treasure uses only one `collect` block and two turns.
      courseD_maze_nestedLoops3_authored_hint:
        courseD_maze_nestedLoops3_a: To solve this puzzle, you will need to "nest" one `repeat` loop inside of another `repeat` loop.
        courseD_maze_nestedLoops3_b: Can't figure out where to put the loops? Try writing the code step-by-step and look for a pattern.
        courseD_maze_nestedLoops3_c: Try writing code for one straight piece of path and a turn. Can you repeat this to get to the sunflower?
      courseD_maze_nestedLoops3_2018_authored_hint:
        courseD_maze_nestedLoops3_a: To solve this puzzle, you will need to "nest" one `repeat` loop inside of another `repeat` loop.
        courseD_maze_nestedLoops3_b: Can't figure out where to put the loops? Try writing the code step-by-step and look for a pattern.
        courseD_maze_nestedLoops3_c: Try writing code for one straight piece of path and a turn. Can you repeat this to get to the sunflower?
      courseD_maze_nestedLoops4_authored_hint:
        courseD_maze_nestedLoops4_a: |-
          Try using this path through the maze.
          
          ![](https://images.code.org/565dbbcaf5862da0f60e54195820e814-image-1505961491245.36.09.png)
        courseD_maze_nestedLoops4_b: If the loop pattern is hard to see, try coding it all out first and see what code repeats over and over before you put the loops in.
        courseD_maze_nestedLoops4_c: Try using one `repeat` loop inside of another to cut down on the amount of code you need.
      courseD_maze_nestedLoops4_2018_authored_hint:
        courseD_maze_nestedLoops4_a: |-
          Try using this path through the maze.
          
          ![](https://images.code.org/565dbbcaf5862da0f60e54195820e814-image-1505961491245.36.09.png)
        courseD_maze_nestedLoops4_b: If the loop pattern is hard to see, try coding it all out first and see what code repeats over and over before you put the loops in.
        courseD_maze_nestedLoops4_c: Try using one `repeat` loop inside of another to cut down on the amount of code you need.
      courseD_maze_nestedLoops5_authored_hint:
        courseD_maze_nestedLoops5_a: Look for a stair-step pattern in this maze to find where a nested loop can be used.
        courseD_maze_nestedLoops5_b: Can't figure out where to put the loops? Try writing the code step-by-step and look for a pattern.
      courseD_maze_nestedLoops5_2018_authored_hint:
        courseD_maze_nestedLoops5_a: Look for a stair-step pattern in this maze to find where a nested loop can be used.
        courseD_maze_nestedLoops5_b: Can't figure out where to put the loops? Try writing the code step-by-step and look for a pattern.
      courseD_maze_nestedLoops6_authored_hint:
        courseD_maze_nestedLoops6_a: If you are stuck, try writing out the code out on paper without loops first and look for patterns.
        courseD_maze_nestedLoops6_b: Nesting `repeat` loops can help decrease the number of blocks used.
        courseD_maze_nestedLoops6_c: It will take two sets of nested `repeat` loops to solve this puzzle.
      courseD_maze_nestedLoops6_2018_authored_hint:
        courseD_maze_nestedLoops6_a: If you are stuck, try writing out the code out on paper without loops first and look for patterns.
        courseD_maze_nestedLoops6_b: Nesting `repeat` loops can help decrease the number of blocks used.
        courseD_maze_nestedLoops6_c: It will take two sets of nested `repeat` loops to solve this puzzle.
      courseD_maze_ramp1_authored_hint:
        courseC_maze_programming1_a: If the bird isn't getting to the pig, make sure all three of the blocks have been fully clicked together, then click "Run" again.
        courseC_maze_programming1_b: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet.
      courseD_maze_ramp1_2018_authored_hint:
        courseC_maze_programming1_a: If the bird isn't getting to the pig, make sure all three of the blocks have been fully clicked together, then click "Run" again.
        courseC_maze_programming1_b: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet.
      courseD_maze_ramp2_authored_hint:
        courseC_maze_programming2_a: To use a `move forward` block, drag it from the toolbox out into the workspace and connect it to the `when run` block.
        courseC_maze_programming2_b: Make sure all 3 blocks are clicked together and attached to the `when run` block.
      courseD_maze_ramp2_2018_authored_hint:
        courseC_maze_programming2_a: To use a `move forward` block, drag it from the toolbox out into the workspace and connect it to the `when run` block.
        courseC_maze_programming2_b: Make sure all 3 blocks are clicked together and attached to the `when run` block.
      courseD_maze_ramp3_authored_hint:
        courseC_maze_programming3_a: "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\nTo delete a block from the middle of your code, drag all of the blocks underneath it away to the right and let them sit in the workspace for a while.  \n\nClick on the block you want to delete, and drag it back to the toolbox.\n\nFinally, put your other blocks back in place where they belong.\n"
      courseD_maze_ramp3_2018_authored_hint:
        courseC_maze_programming3_a: "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\nTo delete a block from the middle of your code, drag all of the blocks underneath it away to the right and let them sit in the workspace for a while.  \n\nClick on the block you want to delete, and drag it back to the toolbox.\n\nFinally, put your other blocks back in place where they belong.\n"
      courseD_maze_ramp4_authored_hint:
        courseC_maze_programming4_a: You can turn right or left from the bird's point of view. If you are facing right, turning right will make you point downwards.
        courseC_maze_programming4_b: To follow the path, move forward and turn one way, then move again and turn the opposite way. Move forward one more time to reach the pig.
      courseD_maze_ramp4_2018_authored_hint:
        courseC_maze_programming4_a: You can turn right or left from the bird's point of view. If you are facing right, turning right will make you point downwards.
        courseC_maze_programming4_b: To follow the path, move forward and turn one way, then move again and turn the opposite way. Move forward one more time to reach the pig.
      courseD_maze_ramp5_authored_hint:
        courseC_maze_programming5_a: Try using the "Step" button to run your code line by line. Can you figure out what you need to do next?
        courseC_maze_programming5_b: Remember that turns are from the bird's perspective.
        courseC_maze_programming5_c: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet.
      courseD_maze_ramp5_2018_authored_hint:
        courseC_maze_programming5_a: Try using the "Step" button to run your code line by line. Can you figure out what you need to do next?
        courseC_maze_programming5_b: Remember that turns are from the bird's perspective.
        courseC_maze_programming5_c: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet.
      courseD_maze_ramp5a_authored_hint:
        courseC_maze_programming5_a: Try using the "Step" button to run your code line by line. Can you figure out what you need to do next?
        courseC_maze_programming5_b: Remember that turns are from the bird's perspective.
        courseC_maze_programming5_c: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet.
      courseD_maze_ramp5a_2018_authored_hint:
        courseC_maze_programming5_a: Try using the "Step" button to run your code line by line. Can you figure out what you need to do next?
        courseC_maze_programming5_b: Remember that turns are from the bird's perspective.
        courseC_maze_programming5_c: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet.
      courseD_maze_ramp5b_authored_hint:
        courseC_maze_programming5_a: Try using the "Step" button to run your code line by line. Can you figure out what you need to do next?
        courseC_maze_programming5_b: Remember that turns are from the bird's perspective.
        courseC_maze_programming5_c: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet.
      courseD_maze_ramp5b_2018_authored_hint:
        courseC_maze_programming5_a: Try using the "Step" button to run your code line by line. Can you figure out what you need to do next?
        courseC_maze_programming5_b: Remember that turns are from the bird's perspective.
        courseC_maze_programming5_c: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet.
      courseD_maze_ramp5c_authored_hint: [ ]
      courseD_maze_ramp5c_2018_authored_hint: [ ]
      courseD_maze_ramp5d_authored_hint: [ ]
      courseD_maze_ramp5d_2018_authored_hint: [ ]
      courseD_maze_ramp6_authored_hint:
        courseC_maze_programming6_a: '¡Aquí tienes dos caminos para resolver el puzzle!'
        courseC_maze_programming6_b: The bird starts facing a wall, so remember to turn before you move.
        courseC_maze_programming6_c: Remember you can write one piece of the code at a time, then run it to figure out where you need to go from there.
      courseD_maze_ramp6a_authored_hint:
        courseC_maze_programming6a_a: Use a `repeat` loop to get this bird moving!
      courseD_maze_ramp7_authored_hint:
        courseD_maze_ramp7_b: Don't forget to use the "Step" button to go through block by block and look for errors.
        courseD_maze_ramp7_a: Use repeat blocks to run either a single block or a chunk of code over and over.
        courseD_maze_ramp7_c: If you want to simplify your code, you can put one repeat loop inside of another! This is called a **nested loop**.
      courseD_maze_until1_authored_hint:
        courseD_maze_until1_a: Are there any sequences you can loop to make your code shorter?
        courseD_maze_until1_b: Try using a nested loop to solve this puzzle.
      courseD_maze_until10_authored_hint: [ ]
      courseD_maze_until10_2018_authored_hint: [ ]
      courseD_maze_until10_predict2_authored_hint: [ ]
      courseD_maze_until10_predict2_2018_authored_hint: [ ]
      courseD_maze_until1_2018_authored_hint:
        courseD_maze_until1_a: Are there any sequences you can loop to make your code shorter?
        courseD_maze_until1_b: Try using a nested loop to solve this puzzle.
      courseD_maze_until2_authored_hint:
        courseD_maze_until2_a: An `until pig` loop will help you keep going until you succeed!
      courseD_maze_until2_predict1_authored_hint: [ ]
      courseD_maze_until2_predict1_2018_authored_hint: [ ]
      courseD_maze_until3_authored_hint:
        courseD_maze_until3_a: |-
          - What does your code do?
          - What is it supposed to do?
          - What does that tell you?
        courseD_maze_until3_b: If you are getting stuck, try writing out the steps on a piece of paper and looking for places where they repeat.
        courseD_maze_until3_c: Is there a stair step pattern you can follow for this puzzle?
        courseD_maze_until3_d: Don't forget to use the `repeat until` block to make your code shorter.
      courseD_maze_until3_2018_authored_hint:
        courseD_maze_until3_a: |-
          - What does your code do?
          - What is it supposed to do?
          - What does that tell you?
        courseD_maze_until3_b: If you are getting stuck, try writing out the steps on a piece of paper and looking for places where they repeat.
        courseD_maze_until3_c: Is there a stair step pattern you can follow for this puzzle?
        courseD_maze_until3_d: Don't forget to use the `repeat until` block to make your code shorter.
      courseD_maze_until4_authored_hint:
        courseD_maze_until4_a: |-
          Use the "Step" button to go through your code line by line.
          
          - Does everything work at the first step?
          - Does everything work at the second step?
          - Where does it go wrong?
        courseD_maze_until4_b: Is there a stair step pattern you can follow for this puzzle?
        courseD_maze_until4_c: Don't forget to use the `repeat until` block to make your code shorter.
      courseD_maze_until4_2018_authored_hint:
        courseD_maze_until4_a: |-
          Use the "Step" button to go through your code line by line.
          
          - Does everything work at the first step?
          - Does everything work at the second step?
          - Where does it go wrong?
        courseD_maze_until4_b: Is there a stair step pattern you can follow for this puzzle?
        courseD_maze_until4_c: Don't forget to use the `repeat until` block to make your code shorter.
      courseD_maze_until5_authored_hint:
        courseD_maze_until5_a: Don't forget to use `if path to the left` to keep the zombie checking for a place to turn.
        courseD_maze_until5_b: To use only one `move forward`, put it inside the `repeat until sunflower` block.
        courseD_maze_until5_c: After each step, the zombie should check whether there is a path to the left. What should he do if he finds one?
      courseD_maze_until5_2018_authored_hint:
        courseD_maze_until5_b: To use only one `move forward`, put it inside the `repeat until sunflower` block.
      courseD_maze_until6_authored_hint:
        courseD_maze_until6_a: This time, try the `if path to the right` to keep the zombie on track.
        courseD_maze_until6_b: To use only one `move forward`, put it inside the `repeat until sunflower` block.
        courseD_maze_until6_c: Although there are more turns here than the last puzzle, your code can be almost identical because of the `repeat until` block!
      courseD_maze_until6_2018_authored_hint:
        courseD_maze_until6_b: To use only one `move forward`, put it inside the `repeat until sunflower` block.
      courseD_maze_until7_authored_hint:
        courseD_maze_until7_a: You don't need your code to be any longer than last time, just because the maze is!
        courseD_maze_until7_b: Although there are more turns here than the last puzzle, your code can be almost identical because of the `repeat until` block!
        courseD_maze_until7_c: Remember to check for paths to the left, because turning right will take you down the wrong path!
      courseD_maze_until7_2018_authored_hint:
        courseD_maze_until7_a: You don't need your code to be any longer than last time, just because the maze is!
        courseD_maze_until7_b: Although there are more turns here than the last puzzle, your code can be almost identical because of the `repeat until` block!
      courseD_maze_until8_authored_hint:
        courseD_maze_until8_a: Make sure you're using an `if/else` block to keep the zombie headed the right direction.
        courseD_maze_until8_b: 'With your `if/else` block: if there is a path ahead, what should you do?'
        courseD_maze_until8_c: 'With your `if/else` block: if there is not a path ahead, which way should you turn?'
      courseD_maze_until8_2018_authored_hint:
        courseD_maze_until8_a: Make sure you're using an `if/else` block to keep the zombie headed the right direction.
        courseD_maze_until8_b: 'With your `if/else` block: if there is a path ahead, what should you do?'
        courseD_maze_until8_c: 'With your `if/else` block: if there is not a path ahead, which way should you turn?'
      courseD_maze_until9_authored_hint:
        courseD_maze_until8_a: Using `if path ahead` will keep you going forward whenever possible, helping you miss the paths with chompers.
        courseD_maze_until8_b: Which direction should you turn if there is no path forward?
        courseD_maze_until8_c: Remember to use the `repeat until` block to get you to the sunflower!
      courseD_maze_until9_2018_authored_hint:
        courseD_maze_until8_c: Remember to use the `repeat until` block to get you to the sunflower!
      courseD_maze_until_challenge_authored_hint: [ ]
      courseD_maze_until_challenge1-delete-this-copy_authored_hint: [ ]
      courseD_maze_until_challenge1_authored_hint: [ ]
      courseD_maze_until_challenge1_2018_authored_hint: [ ]
      courseD_maze_until_challenge2_authored_hint: [ ]
      courseD_playLab_cond1_authored_hint:
        courseD_playLab_cond1_a: To solve this challenge, attach the `move actor 1 up` block to the `when up arrow` event, then do the same for every other direction.
        courseD_playLab_cond1_b: Use the drop down menus on the `when arrow` and `move actor` blocks to change which direction they go.
        courseD_playLab_cond1_c: Remember to move Pegleg to both of the flags once you click "Run"!
      courseD_playLab_cond1_2018_authored_hint:
        courseD_playLab_cond1_a: To solve this challenge, attach the `move actor 1 up` block to the `when up arrow` event, then do the same for every other direction.
        courseD_playLab_cond1_b: Use the drop down menus on the `when arrow` and `move actor` blocks to change which direction they go.
        courseD_playLab_cond1_c: Remember to move Pegleg to both of the flags once you click "Run"!
      courseD_playLab_cond2_authored_hint:
        courseD_playLab_cond2_a: To succeed with this puzzle, use the `score point` block beneath the `when actor 1 touches actor 2` event.
      courseD_playLab_cond2_2018_authored_hint:
        courseD_playLab_cond2_a: To succeed with this puzzle, use the `score point` block beneath the `when actor 1 touches actor 2` event.
      courseD_playLab_cond3_authored_hint:
        courseD_playLab_cond3_a: You will need to add two blocks to your `repeat forever` loop.  One will choose a random emotion for the dragon (actor 2) and the other will wait 1 second before going through the loop again.
      courseD_playLab_cond3_2018_authored_hint:
        courseD_playLab_cond3_a: You will need to add two blocks to your `repeat forever` loop.  One will choose a random emotion for the dragon (actor 2) and the other will wait 1 second before going through the loop again.
      courseD_playLab_cond3a_authored_hint:
        courseD_playLab_cond3_c: "- `If` the dragon is happy \n   - `score point`\n   - `score point`  \n   \n   \n \n- `Else` `score point`"
      courseD_playLab_cond3a_2018_authored_hint:
        courseD_playLab_cond3_c: "- `If` the dragon is happy \n   - `score point`\n   - `score point`  \n   \n   \n \n- `Else` `score point`"
      courseD_playLab_cond3b_authored_hint:
        courseD_playLab_cond3b_a: You will need to add blocks to your `repeat forever` loop to make the dragon continue to move up and down
      courseD_playLab_cond4_authored_hint:
        courseD_playLab_cond4_a: You will want to use the `when run` event to get the ninja to chase the pirate.
        courseD_playLab_cond4_b: There is a special block called `set every masked ninja to chase actor` that will keep the ninja hot on the pirate's trail!
        courseD_playLab_cond4_c: Put the `end game as a loss` block underneath the `when actor 1 touches actor 3` event.
      courseD_playLab_cond4_2018_authored_hint:
        courseD_playLab_cond4_a: You will want to use the `when run` event to get the ninja to chase the pirate.
        courseD_playLab_cond4_b: There is a special block called `set every masked ninja to chase actor` that will keep the ninja hot on the pirate's trail!
        courseD_playLab_cond4_c: Put the `end game as a loss` block underneath the `when actor 1 touches actor 3` event.
      courseD_playLab_cond5_authored_hint:
        courseD_playLab_cond5_a: Use an `if` statement that compares whether `score` is `>` 5 to solve this challenge.
        courseD_playLab_cond5_b: You can have more than one `repeat forever` loop in the workspace.
      courseD_playLab_cond5_2018_authored_hint:
        courseD_playLab_cond5_a: Use an `if` statement that compares whether `score` is `>` 5 to solve this challenge.
        courseD_playLab_cond5_b: You can have more than one `repeat forever` loop in the workspace.
      courseD_playLab_cond6_authored_hint:
        courseD_playLab_cond6_a: Add the `set masked ninja speed` block to the beginning of the program to help slow the ninja down.
        courseD_playLab_cond6_b: You will need to use an `if actor 1 y position > 255` block inside of a `repeat forever` block to always check if the pirate is below the octopuses.
      courseD_playLab_cond6_2018_authored_hint:
        courseD_playLab_cond6_a: Add the `set masked ninja speed` block to the beginning of the program to help slow the ninja down.
        courseD_playLab_cond6_b: You will need to use an `if actor 1 y position > 255` block inside of a `repeat forever` block to always check if the pirate is below the octopuses.
      courseD_playLab_cond6a_authored_hint:
        courseD_playLab_cond6_c: Add a `wait 1 second` block to the top of the `repeat forever` loop that checks the pirate position (but not inside the `if` statement) to keep points from being removed too quickly.
      courseD_playLab_cond6a_2018_authored_hint:
        courseD_playLab_cond6_c: Add a `wait 1 second` block to the top of the `repeat forever` loop that checks the pirate position (but not inside the `if` statement) to keep points from being removed too quickly.
      courseD_playLab_cond6cloneForTest_authored_hint:
        courseD_playLab_cond6_a: Add the `set masked ninja speed` block to the beginning of the program to help slow the ninja down.
        courseD_playLab_cond6_b: You will need to use an `if actor 1 y position > 255` block inside of a `repeat forever` block to always check if the pirate is below the octopuses.
        courseD_playLab_cond6_c: Add a `wait 1 second` block to the top of the `repeat forever` loop that checks the pirate position (but not inside the `if` statement) to keep points from being removed too quickly.
      courseD_playLab_embed_cond6a_authored_hint: [ ]
      courseD_playLab_embedded_authored_hint: [ ]
      courseD_scrat_predict1_authored_hint: [ ]
      courseD_scrat_predict1_2018_authored_hint: [ ]
      courseD_scrat_ramp1_authored_hint:
        courseC_maze_programming1_a: If Scrat isn't getting to the acorn, make sure all three of the blocks have been fully snapped together, then click "Run" again.
        courseC_maze_programming1_b: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet.
      courseD_scrat_ramp1_2018_authored_hint:
        courseC_maze_programming1_a: If Scrat isn't getting to the acorn, make sure all three of the blocks have been fully snapped together, then click "Run" again.
        courseC_maze_programming1_b: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet.
      courseD_scrat_ramp2_authored_hint:
        courseC_maze_programming2_a: To use a `move forward` block, drag it from the toolbox out into the workspace and connect it to the `when run` block.
        courseC_maze_programming2_b: Make sure all three `move forward` blocks are attached to the `when run` block.
      courseD_scrat_ramp2_2018_authored_hint:
        courseC_maze_programming2_a: To use a `move forward` block, drag it from the toolbox out into the workspace and connect it to the `when run` block.
        courseC_maze_programming2_b: Make sure all three `move forward` blocks are attached to the `when run` block.
      courseD_scrat_ramp3_authored_hint:
        courseC_maze_programming3_a: "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\nTo delete a block from the middle of your code, drag all of the blocks underneath it away to the right and let them sit in the workspace for a while.  \n\nClick on the block you want to delete, and drag it back to the toolbox.\n\nFinally, put your other blocks back in place where they belong.\n"
        courseC_maze_programming3_b: Remember that turns to the right and left are from Scrat's perspective.
      courseD_scrat_ramp3_2018_authored_hint:
        courseC_maze_programming3_a: "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\nTo delete a block from the middle of your code, drag all of the blocks underneath it away to the right and let them sit in the workspace for a while.  \n\nClick on the block you want to delete, and drag it back to the toolbox.\n\nFinally, put your other blocks back in place where they belong.\n"
        courseC_maze_programming3_b: Remember that turns to the right and left are from Scrat's perspective.
      courseD_scrat_ramp4_authored_hint:
        courseC_maze_programming4_a: You can turn right or left from Scrat's point of view. If you are facing right, turning right will make you point downwards.
        courseC_maze_programming4_b: To follow the path, move forward and turn one way, then move again and turn the opposite way. Move forward one more time to reach the acorn.
        courseC_maze_programming4_c: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet.
      courseD_scrat_ramp4_2018_authored_hint:
        courseC_maze_programming4_a: You can turn right or left from Scrat's point of view. If you are facing right, turning right will make you point downwards.
        courseC_maze_programming4_b: To follow the path, move forward and turn one way, then move again and turn the opposite way. Move forward one more time to reach the acorn.
        courseC_maze_programming4_c: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet.
      courseD_scrat_ramp5_authored_hint:
        courseC_maze_programming5_a: Try using the "Step" button to run your code line by line. Can you figure out what you need to do next?
        courseC_maze_programming5_b: How far do you need to move to get to the corner?
        courseC_maze_programming5_c: You will need to turn left at the corner to get to the acorn.
      courseD_scrat_ramp5_2018_authored_hint:
        courseC_maze_programming5_a: Try using the "Step" button to run your code line by line. Can you figure out what you need to do next?
        courseC_maze_programming5_b: How far do you need to move to get to the corner?
        courseC_maze_programming5_c: You will need to turn left at the corner to get to the acorn.
      courseD_scrat_ramp6_authored_hint:
        courseC_maze_programming6a_a: Use a `repeat` loop to get Scrat moving!
      courseD_scrat_ramp6_2018_authored_hint:
        courseC_maze_programming6a_a: Use a `repeat` loop to get Scrat moving!
      courseD_scrat_ramp7_authored_hint:
        courseD_scrat_programming6_a: '¡Aquí tienes dos caminos para resolver el puzzle!'
        courseD_scrat_programming6_b: Remember to turn first before moving, since Scrat is facing the wrong direction.
        courseD_scrat_programming6_c: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet.
      courseD_scrat_ramp7_2018_authored_hint:
        courseD_scrat_programming6_a: '¡Aquí tienes dos caminos para resolver el puzzle!'
        courseD_scrat_programming6_b: Remember to turn first before moving, since Scrat is facing the wrong direction.
        courseD_scrat_programming6_c: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet.
      courseD_scrat_ramp8_authored_hint:
        courseD_maze_ramp7_b: Don't forget to use the "Step" button to go through block by block and look for errors.
        courseD_maze_ramp7_a: Use repeat blocks to run either a single block or a chunk of code over and over.
        courseD_maze_ramp7_c: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet.
      courseD_scrat_ramp8_2018_authored_hint:
        courseD_maze_ramp7_b: Don't forget to use the "Step" button to go through block by block and look for errors.
        courseD_maze_ramp7_a: Use repeat blocks to run either a single block or a chunk of code over and over.
        courseD_maze_ramp7_c: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet.
      courseE_artist_concept1_authored_hint:
        courseE_artist_concept1_a: The hexagons have 50 pixel sides and 60 degree turns to the right.
        courseE_artist_concept1_b: Try using a function here so you don't have to write the code for a hexagon over and over again.
        courseE_artist_concept1_c: Use the `set width` block before each function call to change the pen width.
      courseE_artist_concept1_2018_authored_hint:
        courseE_artist_concept1_a: The hexagons have 50 pixel sides and 60 degree turns to the right.
        courseE_artist_concept1_b: Try using a function here so you don't have to write the code for a hexagon over and over again.
        courseE_artist_concept1_c: Use the `set width` block before each function call to change the pen width.
      courseE_artist_concept4_authored_hint:
        courseE_artist_concept4_a: There are several ways to solve this puzzle. Can you make a plan?
        courseE_artist_concept4_b: Try creating one square. Then make a line of squares.  What comes next?
        courseE_artist_concept4_c: After drawing a line of squares, you can either turn around and draw another line of squares going left, or you can jump back to the left side of the figure to draw another line of squares going right. Which do you prefer?
      courseE_artist_concept4_2018_authored_hint:
        courseE_artist_concept4_a: There are several ways to solve this puzzle. Can you make a plan?
        courseE_artist_concept4_b: Try creating one square. Then make a line of squares.  What comes next?
        courseE_artist_concept4_c: After drawing a line of squares, you can either turn around and draw another line of squares going left, or you can jump back to the left side of the figure to draw another line of squares going right. Which do you prefer?
      courseE_artist_concept_challenge1_authored_hint:
        courseE_artist_concept_challenge1_a: 'El semi-hexágono tiene una ** longitud de 30 ** y gira a la derecha por ** 60 grados **.  '
        courseE_artist_concept_challenge1_b: 'El triángulo 2/3 tiene una ** longitud de 80 ** y gira a la derecha por ** 120 grados **. '
        courseE_artist_concept_challenge1_c: |-
          This is the design you want to repeat to make the full shape:
          
          ![](https://images.code.org/d6b2afd39119da33d085dcce6077ada8-image-1501705780826.28.43 PM.png)
      courseE_artist_concept_challenge1_2018_authored_hint:
        courseE_artist_concept_challenge1_a: 'El semi-hexágono tiene una ** longitud de 30 ** y gira a la derecha por ** 60 grados **.  '
        courseE_artist_concept_challenge1_b: 'El triángulo 2/3 tiene una ** longitud de 80 ** y gira a la derecha por ** 120 grados **. '
        courseE_artist_concept_challenge1_c: |-
          This is the design you want to repeat to make the full shape:
          
          ![](https://images.code.org/d6b2afd39119da33d085dcce6077ada8-image-1501705780826.28.43 PM.png)
      courseE_artist_concept_challenge2_authored_hint:
        courseE_artist_concept_challenge2_a: Once you define a function, you can call it over and over again - whenever and wherever you want!
        courseE_artist_concept_challenge2_b: |-
          You can jump to different positions on the canvas using this command:
          <xml>  <block type="jump_to">
          <title name="VALUE">???</title>
          </block></xml>
      courseE_artist_concept_challenge2_2018_authored_hint:
        courseE_artist_concept_challenge2_a: Once you define a function, you can call it over and over again - whenever and wherever you want!
        courseE_artist_concept_challenge2_b: |-
          You can jump to different positions on the canvas using this command:
          <xml>  <block type="jump_to">
          <title name="VALUE">???</title>
          </block></xml>
      courseE_artist_embed_functions8_authored_hint: [ ]
      courseE_artist_functions1_authored_hint:
        courseE_artist_functions1_a: Los cuadrados tienen 100 píxeles de lado cada uno, lo que significa que te habrás movido 175 píxeles hacia adelante antes de dibijar el segundo cuadrado.
        courseE_artist_functions1_b: Está bien dibujar líneas superpuestas para realizar los anteojos.
        courseE_artist_functions1_c: For shorter code, try using a `repeat` loop to draw the square frames of the glasses.
      courseE_artist_functions10_authored_hint:
        courseD_artist_functions10_b: This drawing is a lot like the last one, but the `draw line` function is now drawing a different shape.
        courseD_artist_functions10_a: To avoid using multiple `move forward` blocks, create a `draw hexagon` function and call that multiple times.
        courseD_artist_functions10_c: |-
          Do you see where this drawing could use a function called `line of hexagons`?
          
          ![](https://images.code.org/904e0f38232fd9c15a3d2d172e7dde0b-image-1493140714580.gif)
      courseE_artist_functions10_2018_authored_hint:
        courseD_artist_functions10_b: This drawing is a lot like the last one, but the `draw line` function is now drawing a different shape.
        courseD_artist_functions10_a: To avoid using multiple `move forward` blocks, create a `draw hexagon` function and call that multiple times.
        courseD_artist_functions10_c: |-
          Do you see where this drawing could use a function called `line of hexagons`?
          
          ![](https://images.code.org/904e0f38232fd9c15a3d2d172e7dde0b-image-1493140714580.gif)
      courseE_artist_functions1_2018_authored_hint:
        courseE_artist_functions1_a: Los cuadrados tienen 100 píxeles de lado cada uno, lo que significa que te habrás movido 175 píxeles hacia adelante antes de dibijar el segundo cuadrado.
        courseE_artist_functions1_b: Está bien dibujar líneas superpuestas para realizar los anteojos.
        courseE_artist_functions1_c: For shorter code, try using a `repeat` loop to draw the square frames of the glasses.
      courseE_artist_functions2_authored_hint:
        courseD_artist_functions2_b: The function you write should not contain your whole program, just the part that draws a square with 100 pixel sides.
        courseD_artist_functions2_c: |-
          Use the green `draw a square` block to "call" your function under the `when run` block. Otherwise, the code in your function will not run.
          <xml><block type="procedures_callnoreturn" limit="2"><mutation name="draw a square"/></block></xml>
        courseD_artist_functions2_a: |-
          Tu programa deberá:
          - Usar función
          - Mover hacia adelante 100 + 75 píxeles
          - Usar función
      courseE_artist_functions2_2018_authored_hint:
        courseD_artist_functions2_b: The function you write should not contain your whole program, just the part that draws a square with 100 pixel sides.
        courseD_artist_functions2_c: |-
          Use the green `draw a square` block to "call" your function under the `when run` block. Otherwise, the code in your function will not run.
          <xml><block type="procedures_callnoreturn" limit="2"><mutation name="draw a square"/></block></xml>
        courseD_artist_functions2_a: |-
          Tu programa deberá:
          - Usar función
          - Mover hacia adelante 100 + 75 píxeles
          - Usar función
      courseE_artist_functions3_authored_hint:
        courseD_artist_functions3_a: |-
          To solve this puzzle, you just need to add a  loop that repeats the starter code 8 times.
          
          If you can't remember what the starter code was, click "start over" in the upper right corner of the workspace.
        courseD_artist_functions3_b: Your loop should have all 3 starter code blocks inside of it.
      courseE_artist_functions3_2018_authored_hint:
        courseD_artist_functions3_a: |-
          To solve this puzzle, you just need to add a  loop that repeats the starter code 8 times.
          
          If you can't remember what the starter code was, click "start over" in the upper right corner of the workspace.
        courseD_artist_functions3_b: Your loop should have all 3 starter code blocks inside of it.
      courseE_artist_functions4_authored_hint:
        courseD_artist_functions4_a: Try using a function!
        courseD_artist_functions4_b: Drag the `draw a star` function block out of the toolbox to begin building your function. It should have the same code as the previous puzzle, since you are drawing the same star pattern.
        courseD_artist_functions4_c: Use the green `draw a star` block to call this function in your main program. Don't forget to jump forward between each star!
      courseE_artist_functions4_2018_authored_hint:
        courseD_artist_functions4_a: Try using a function!
        courseD_artist_functions4_b: Drag the `draw a star` function block out of the toolbox to begin building your function. It should have the same code as the previous puzzle, since you are drawing the same star pattern.
        courseD_artist_functions4_c: Use the green `draw a star` block to call this function in your main program. Don't forget to jump forward between each star!
      courseE_artist_functions5_authored_hint:
        courseD_artist_functions5_a: Don't give up!  Remember what you have been learning.
        courseD_artist_functions5_b: Functions make it easy to call saved code at any time, not just from inside a loop!
        courseD_artist_functions5_c: Start by dragging the code for a star shape into the `draw a star` function, then use this function to draw the three stars!
      courseE_artist_functions5_2018_authored_hint:
        courseD_artist_functions5_a: Don't give up!  Remember what you have been learning.
        courseD_artist_functions5_b: Functions make it easy to call saved code at any time, not just from inside a loop!
        courseD_artist_functions5_c: Start by dragging the code for a star shape into the `draw a star` function, then use this function to draw the three stars!
      courseE_artist_functions6_authored_hint:
        grade4_artist_functions_windows0_a: Focus only on making one window for now.  We'll create a function in the next puzzle.
        grade4_artist_functions_windows0_b: Try using nested loops. The inner loop will make the square and the outer loop will rotate the square four times.
        grade4_artist_functions_windows0_c: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet.
      courseE_artist_functions6_2018_authored_hint:
        grade4_artist_functions_windows0_a: Focus only on making one window for now.  We'll create a function in the next puzzle.
        grade4_artist_functions_windows0_b: Try using nested loops. The inner loop will make the square and the outer loop will rotate the square four times.
        grade4_artist_functions_windows0_c: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet.
      courseE_artist_functions7_authored_hint:
        courseD_artist_functions7_a: Try creating your function first then add windows one at a time.
        courseD_artist_functions7_b: You shouldn't need to add any extra repeat loops.  Just jump the artist 100 pixels between each top window, then down 150 pixels to get to the bottom windows.
      courseE_artist_functions7_2018_authored_hint:
        courseD_artist_functions7_a: Try creating your function first then add windows one at a time.
        courseD_artist_functions7_b: You shouldn't need to add any extra repeat loops.  Just jump the artist 100 pixels between each top window, then down 150 pixels to get to the bottom windows.
      courseE_artist_functions8_authored_hint:
        courseD_artist_functions8_f: You only need one `move forward` block, but you will need quite a few `jump forward` and/or `jump backward` blocks!
        courseD_artist_functions8_a: |-
          Start by making a function for a square, then try making a function for a line of squares.
          
          How would you use the `draw a line of squares` function to make this image?
        courseD_artist_functions8_d: |-
          To make a line of squares,
          - repeat 3 times
          - draw a square with a side length of **50 pixels**
          - jump forward **100 pixels**
        courseD_artist_functions8_b: |-
          Think of each row in this picture as a line of 3 squares. How many lines of squares are there and where do you start drawing each of them?
          
          ![](https://images.code.org/22a6f5cc5551371057244eee01955f8e-image-1493135135468.4.10 Hint Drawing.png)
        courseD_artist_functions8_c: At the end of each line of squares, the artist will need to jump down and backward before he draws the next line of squares.
        courseD_artist_functions8_g: "![](https://images.code.org/c5b48a0db328c6cb32a024d2bf9c00af-image-1493139855549.gif)"
      courseE_artist_functions8_2018_authored_hint:
        courseD_artist_functions8_f: You only need one `move forward` block, but you will need quite a few `jump forward` and/or `jump backward` blocks!
        courseD_artist_functions8_a: |-
          Start by making a function for a square, then try making a function for a line of squares.
          
          How would you use the `draw a line of squares` function to make this image?
        courseD_artist_functions8_d: |-
          To make a line of squares,
          - repeat 3 times
          - draw a square with a side length of **50 pixels**
          - jump forward **100 pixels**
        courseD_artist_functions8_b: |-
          Think of each row in this picture as a line of 3 squares. How many lines of squares are there and where do you start drawing each of them?
          
          ![](https://images.code.org/22a6f5cc5551371057244eee01955f8e-image-1493135135468.4.10 Hint Drawing.png)
        courseD_artist_functions8_c: At the end of each line of squares, the artist will need to jump down and backward before he draws the next line of squares.
        courseD_artist_functions8_g: "![](https://images.code.org/c5b48a0db328c6cb32a024d2bf9c00af-image-1493139855549.gif)"
      courseE_artist_functions9_authored_hint:
        courseD_artist_functions9_e: |-
          Can you spot all four places that the `line of triangles` can be used in this drawing?
          
          ![](https://images.code.org/130e1040ecca7186dea87f42666f5620-image-1493140373966.gif)
        courseD_artist_functions9_a: |-
          This puzzle can be broken into three parts:
          - make the `draw a triangle` function
          - make the `draw a line of triangles` function
          - use your `draw a line of triangles` function four times to complete the drawing
        courseD_artist_functions9_b: This drawing is made by drawing a line of triangles 4 times and turning either 60 or 120 degrees before you draw the next triangle line.
        courseD_artist_functions9_c: |-
          To draw a line of triangles:
          - repeat 4 times
          - draw a triangle
          - jump forward 50 pixels
        courseD_artist_functions9_d: |-
          To draw the diamond:
          - repeat 2 times
          - draw a line of triangles
          - turn 60 degrees
          - draw a line of triangles
          - turn 120 degrees
      courseE_artist_functions9_2018_authored_hint:
        courseD_artist_functions9_e: |-
          Can you spot all four places that the `line of triangles` can be used in this drawing?
          
          ![](https://images.code.org/130e1040ecca7186dea87f42666f5620-image-1493140373966.gif)
        courseD_artist_functions9_a: |-
          This puzzle can be broken into three parts:
          - make the `draw a triangle` function
          - make the `draw a line of triangles` function
          - use your `draw a line of triangles` function four times to complete the drawing
        courseD_artist_functions9_b: This drawing is made by drawing a line of triangles 4 times and turning either 60 or 120 degrees before you draw the next triangle line.
        courseD_artist_functions9_c: |-
          To draw a line of triangles:
          - repeat 4 times
          - draw a triangle
          - jump forward 50 pixels
        courseD_artist_functions9_d: |-
          To draw the diamond:
          - repeat 2 times
          - draw a line of triangles
          - turn 60 degrees
          - draw a line of triangles
          - turn 120 degrees
      courseE_artist_functions_challenge_authored_hint:
        courseE_artist_functions_challenge_a: If you call the function one more time, you can create the same design in the final corner. You can also `jump to` other positions or change the whole thing around however you want!
      courseE_artist_functions_challenge1_authored_hint:
        courseE_artist_functions_challenge1_a: If you call the function one more time, you can create the same design in the final corner.
        courseE_artist_functions_challenge1_b: You can also `jump to` other positions or change the whole design however you want!
      courseE_artist_functions_challenge1_2018_authored_hint:
        courseE_artist_functions_challenge1_a: If you call the function one more time, you can create the same design in the final corner.
        courseE_artist_functions_challenge1_b: You can also `jump to` other positions or change the whole design however you want!
      courseE_artist_functions_challenge2_authored_hint:
        courseE_artist_functions_challenge1_a: "<xml>\n\n  <block type=\"jump_to_xy\">\n    <title name=\"XPOS\">350</title>\n    <title name=\"YPOS\">200</title>\n  </block>\n  </xml>\n  \nThis `jump to` block lets you move the zombie artist to any pixel on the grid, whenever you want. It works by moving him a number of pixels over to the right and a number of pixels down. This is always counted from the top left corner, which it means it doesn't matter where the zombie artist is *before* the command is run!\n\n![](https://images.code.org/b90fdddc778a27e199221271ce91307a-image-1496450976440.png)"
      courseE_artist_functions_challenge2_2018_authored_hint:
        courseE_artist_functions_challenge1_a: "<xml>\n\n  <block type=\"jump_to_xy\">\n    <title name=\"XPOS\">350</title>\n    <title name=\"YPOS\">200</title>\n  </block>\n  </xml>\n  \nThis `jump to` block lets you move the zombie artist to any pixel on the grid, whenever you want. It works by moving him a number of pixels over to the right and a number of pixels down. This is always counted from the top left corner, which it means it doesn't matter where the zombie artist is *before* the command is run!\n\n![](https://images.code.org/b90fdddc778a27e199221271ce91307a-image-1496450976440.png)"
      courseE_artist_functions_predict1_authored_hint: [ ]
      courseE_artist_functions_predict1_2018_authored_hint: [ ]
      courseE_artist_functions_predict2_authored_hint: [ ]
      courseE_artist_functions_predict2_2018_authored_hint: [ ]
      courseE_artist_predict1_authored_hint: [ ]
      courseE_artist_predict1_2018_authored_hint: [ ]
      courseE_artist_ramp10_authored_hint:
        courseD_artist_ramp10_a: Don't forget to turn by 60 degrees after each triangle.  Which loop do you need to put that instruction inside?
        courseD_artist_ramp10_b: You can use the drop down menu on the `turn` blocks to see which angle you need!
        courseD_artist_ramp10_c: |-
          The artist will draw six triangles in total:
          
          ![](https://images.code.org/752d82f3afdca0a7d7c01d6fa2abb583-image-1499889821499.2_solution2.gif)
      courseE_artist_ramp11_authored_hint:
        courseD_artist_ramp11a: To draw a side, use the `move forward by 100 pixels` block, and change the 100 to a 200.
        courseD_artist_ramp11b: |-
          To draw 4 sides, put the `move forward by 100 pixels` block inside of a repeat loop and make sure the loop is set to draw 4 times.
          
          Don't forget to turn afterward!
      courseE_artist_ramp12_authored_hint:
        courseD_artist_ramp12_a: You can either draw the square first, then the triangle, or do it the other way around!
      courseE_artist_ramp8_authored_hint:
        courseE_artist_ramp8_a: To draw a side, use the `move forward by 100 pixels` block, and change the 100 to a 200.
        courseE_artist_ramp8_b: |-
          To draw 4 sides, put the `move forward by 100 pixels` block inside of a repeat loop and make sure the loop is set to draw 4 times.
          
          Don't forget to turn afterward!
        courseE_artist_ramp8_c: 'Your loop should have two blocks inside of it: `move forward` and `turn right by 90 degrees`.'
      courseE_artist_ramp8_2_authored_hint:
        courseE_artist_ramp8_a: To draw a side, use the `move forward by 100 pixels` block, and change the 100 to a 200.
        courseE_artist_ramp8_b: |-
          To draw 4 sides, put the `move forward by 100 pixels` block inside of a repeat loop and make sure the loop is set to draw 4 times.
          
          Don't forget to turn afterward!
        courseE_artist_ramp8_c: 'Your loop should have two blocks inside of it: `move forward` and `turn right by 90 degrees`.'
      courseE_artist_ramp8_2018_authored_hint:
        courseE_artist_ramp8_a: To draw a side, use the `move forward by 100 pixels` block, and change the 100 to a 200.
        courseE_artist_ramp8_b: |-
          To draw 4 sides, put the `move forward by 100 pixels` block inside of a repeat loop and make sure the loop is set to draw 4 times.
          
          Don't forget to turn afterward!
        courseE_artist_ramp8_c: 'Your loop should have two blocks inside of it: `move forward` and `turn right by 90 degrees`.'
      courseE_artist_ramp8_2_2018_authored_hint:
        courseE_artist_ramp8_a: To draw a side, use the `move forward by 100 pixels` block, and change the 100 to a 200.
        courseE_artist_ramp8_b: |-
          To draw 4 sides, put the `move forward by 100 pixels` block inside of a repeat loop and make sure the loop is set to draw 4 times.
          
          Don't forget to turn afterward!
        courseE_artist_ramp8_c: 'Your loop should have two blocks inside of it: `move forward` and `turn right by 90 degrees`.'
      courseE_artist_ramp9_authored_hint:
        courseD_artist_ramp12_a: How is this similar to a square?  How is it different?
        courseD_artist_ramp12_b: You can use the drop down menu on the `turn` blocks to see which angle you need!
        courseD_artist_ramp12_c: To draw each side, you will need to move forward 100 pixels, then turn right 120 degrees. How many sides do you need?
      courseE_artist_ramp9_2_authored_hint:
        courseD_artist_ramp12_a: How is this similar to a square?  How is it different?
        courseD_artist_ramp12_b: You can use the drop down menu on the `turn` blocks to see which angle you need!
        courseD_artist_ramp12_c: To draw each side, you will need to move forward 100 pixels, then turn right 120 degrees. How many sides do you need?
      courseE_artist_ramp9_2018_authored_hint:
        courseD_artist_ramp12_a: How is this similar to a square?  How is it different?
        courseD_artist_ramp12_b: You can use the drop down menu on the `turn` blocks to see which angle you need!
        courseD_artist_ramp12_c: To draw each side, you will need to move forward 100 pixels, then turn right 120 degrees. How many sides do you need?
      courseE_artist_ramp9_2_2018_authored_hint:
        courseD_artist_ramp12_a: How is this similar to a square?  How is it different?
        courseD_artist_ramp12_b: You can use the drop down menu on the `turn` blocks to see which angle you need!
        courseD_artist_ramp12_c: To draw each side, you will need to move forward 100 pixels, then turn right 120 degrees. How many sides do you need?
      courseE_bee_concept1_authored_hint:
        courseE_bee_concept1_b: Are there any patterns that *repeat* here?
        courseE_bee_concept1_a: If you don't understand how to use nested loops here, try writing out the instructions step by step on a piece of paper.  Circle the patterns that you see.
      courseE_bee_concept1_2018_authored_hint:
        courseE_bee_concept1_b: Are there any patterns that *repeat* here?
        courseE_bee_concept1_a: If you don't understand how to use nested loops here, try writing out the instructions step by step on a piece of paper.  Circle the patterns that you see.
      courseE_bee_concept2_authored_hint:
        courseE_bee_concept2_a: Would a `while` loop help here?
        courseE_bee_concept2_d: You can even check empty spaces to see if honey is > 0.
        courseE_bee_concept2_b: You can use `while` loops to move to the end of each path, and to collect all of the honey from each space.
        courseE_bee_concept2_c: Which way should the bee turn after each path?
      courseE_bee_concept2_2018_authored_hint:
        courseE_bee_concept2_a: Would a `while` loop help here?
        courseE_bee_concept2_d: You can even check empty spaces to see if honey is > 0.
        courseE_bee_concept2_b: You can use `while` loops to move to the end of each path, and to collect all of the honey from each space.
        courseE_bee_concept2_c: Which way should the bee turn after each path?
      courseE_bee_concept3_authored_hint:
        courseE_bee_concept3a_a: Try using nested `repeat` loops to solve this puzzle.
        courseE_bee_concept3a_b: If you can't figure out where to put the loops, try writing your code step-by-step and looking for patterns.
        courseE_bee_concept3a_c: There are three groups of flowers, so your outer `repeat` loop should repeat three times.
      courseE_bee_concept3_2018_authored_hint:
        courseE_bee_concept3a_a: Try using nested `repeat` loops to solve this puzzle.
        courseE_bee_concept3a_b: If you can't figure out where to put the loops, try writing your code step-by-step and looking for patterns.
        courseE_bee_concept3a_c: There are three groups of flowers, so your outer `repeat` loop should repeat three times.
      courseE_bee_concept4_authored_hint:
        courseE_bee_concept4_a: An `if/else` statement could really help you out here.
        courseE_bee_concept4_b: The stair step pattern can help you get through all of the flowers and honeycombs.
        courseE_bee_concept4_c: If you are at a flower, how many times do you have to get nectar? Is this the same number for all flowers?
      courseE_bee_concept4_2018_authored_hint:
        courseE_bee_concept4_a: An `if/else` statement could really help you out here.
        courseE_bee_concept4_b: The stair step pattern can help you get through all of the flowers and honeycombs.
        courseE_bee_concept4_c: If you are at a flower, how many times do you have to get nectar? Is this the same number for all flowers?
      courseE_bee_concept5_authored_hint:
        courseE_bee_concept5_a: The flowers follow a rectangular path.  You can trace that rectangle using `while path ahead` even with a different number of squares per side.
        courseE_bee_concept5_c: |-
          Here's a picture of a rectangular path the bee could take.
          
          ![](https://images.code.org/39554a528b5ed168737e846c161f00ee-image-1510202150660.33.23.png)
        courseE_bee_concept5_b: You can check every square for a flower using the `if` block, even if you already know there's not one there.
      courseE_bee_concept5_2018_authored_hint:
        courseE_bee_concept5_a: The flowers follow a rectangular path.  You can trace that rectangle using `while path ahead` even with a different number of squares per side.
        courseE_bee_concept5_c: |-
          Here's a picture of a rectangular path the bee could take.
          
          ![](https://images.code.org/39554a528b5ed168737e846c161f00ee-image-1510202150660.33.23.png)
        courseE_bee_concept5_b: You can check every square for a flower using the `if` block, even if you already know there's not one there.
      courseE_bee_functions1_authored_hint:
        courseE_bee_functions1_a: Remember that left and right turns are from the point of view of the bee.
        courseE_bee_functions1_b: Use a `repeat` loop when collecting nectar to make your code shorter.
        courseE_bee_functions1_c: Remember that left and right turns are from the perspective of the bee.
      courseE_bee_functions10_authored_hint:
        courseE_bee_functions10_a: You will need a `while` loop to collect all of the honey, since it varies between honeycombs.
        courseE_bee_functions10_b: Include the turns and movement in your function, so you can call it when the bee is on the main path.
        courseE_bee_functions10_c: Remember to call your function in the main program!
      courseE_bee_functions10_2018_authored_hint:
        courseE_bee_functions10_a: You will need a `while` loop to collect all of the honey, since it varies between honeycombs.
        courseE_bee_functions10_b: Include the turns and movement in your function, so you can call it when the bee is on the main path.
        courseE_bee_functions10_c: Remember to call your function in the main program!
      courseE_bee_functions1_2018_authored_hint:
        courseE_bee_functions1_a: Remember that left and right turns are from the point of view of the bee.
        courseE_bee_functions1_b: Use a `repeat` loop when collecting nectar to make your code shorter.
        courseE_bee_functions1_c: Remember that left and right turns are from the perspective of the bee.
      courseE_bee_functions2_authored_hint:
        courseE_bee_functions2_a: The function has been written for you, but you will need to call it at each flower.
        courseE_bee_functions2_b: This <xml><block type="procedures_callnoreturn"><mutation name="get 2 nectar"/></block></xml> block calls the function given to you.
        courseE_bee_functions2_c: You will want to move forward and get 2 nectar twice to solve this puzzle.
      courseE_bee_functions2_2018_authored_hint:
        courseE_bee_functions2_a: The function has been written for you, but you will need to call it at each flower.
        courseE_bee_functions2_b: This <xml><block type="procedures_callnoreturn"><mutation name="get 2 nectar"/></block></xml> block calls the function given to you.
        courseE_bee_functions2_c: You will want to move forward and get 2 nectar twice to solve this puzzle.
      courseE_bee_functions3_authored_hint:
        courseE_bee_functions3_a: 'Your function for this puzzle only needs to collect nectar, it shouldn''t have any `move forward` or `turn` blocks in it. '
        courseE_bee_functions3_b: Call your `get 5` function under the `when run` block.
        courseE_bee_functions3_c: Your main program will control all of the movement, the function is just for what happens when the bee reaches a flower.
        courseE_bee_functions3_d: Try using this path through.
      courseE_bee_functions3_2018_authored_hint:
        courseE_bee_functions3_a: 'Your function for this puzzle only needs to collect nectar, it shouldn''t have any `move forward` or `turn` blocks in it. '
        courseE_bee_functions3_b: Call your `get 5` function under the `when run` block.
        courseE_bee_functions3_c: Your main program will control all of the movement, the function is just for what happens when the bee reaches a flower.
        courseE_bee_functions3_d: Try using this path through.
      courseE_bee_functions4_authored_hint:
        courseE_bee_functions4_a: Your function will already travel down the side paths and return the bee back to the main road.  You don't need to add that part to your program.
        courseE_bee_functions4_b: Use the green `move and get nectar` block to call this function.
        courseE_bee_functions4_c: You don't need to change the function, just use it in your program.
      courseE_bee_functions4_2018_authored_hint:
        courseE_bee_functions4_a: Your function will already travel down the side paths and return the bee back to the main road.  You don't need to add that part to your program.
        courseE_bee_functions4_b: Use the green `move and get nectar` block to call this function.
        courseE_bee_functions4_c: You don't need to change the function, just use it in your program.
      courseE_bee_functions5_authored_hint:
        courseE_bee_functions5_a: Edit the function so that it solves the puzzle without having to change the main program.
        courseE_bee_functions5_c: The `move forward` block can be changed into a `move backward` block. Use this instead of turning all the way around at the end of the paths!
        courseE_bee_functions5_b: "Your function should make the bee: \n- turn\n- move forward\n- collect all of the nectar\n- move backward\n- turn back to the direction that the bee started from"
      courseE_bee_functions5_2018_authored_hint:
        courseE_bee_functions5_a: Edit the function so that it solves the puzzle without having to change the main program.
        courseE_bee_functions5_c: The `move forward` block can be changed into a `move backward` block. Use this instead of turning all the way around at the end of the paths!
        courseE_bee_functions5_b: "Your function should make the bee: \n- turn\n- move forward\n- collect all of the nectar\n- move backward\n- turn back to the direction that the bee started from"
      courseE_bee_functions6_authored_hint:
        courseE_bee_functions6_a: "Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco\nAgrega algunos bloques, luego pruébalo. Agrega más, luego intenta de nuevo. ¡Pronto, lo lograras!\n![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)"
        courseE_bee_functions6_b: It might help in this case to move inside of the function, but not all of your `move` blocks need to be there.
      courseE_bee_functions6_2018_authored_hint:
        courseE_bee_functions6_a: "Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco\nAgrega algunos bloques, luego pruébalo. Agrega más, luego intenta de nuevo. ¡Pronto, lo lograras!\n![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)"
        courseE_bee_functions6_b: It might help in this case to move inside of the function, but not all of your `move` blocks need to be there.
      courseE_bee_functions6test_authored_hint:
        courseE_bee_functions6_a: "Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco\nAgrega algunos bloques, luego pruébalo. Agrega más, luego intenta de nuevo. ¡Pronto, lo lograras!\n![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)"
        courseE_bee_functions6_b: It might help in this case to move inside of the function, but not all of your `move` blocks need to be there.
      courseE_bee_functions7_authored_hint:
        courseE_bee_functions7_a: "Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco.\nAgregue algunos bloques, luego pruébelo. Agrega más, luego intenta de nuevo. ¡Pronto, llegarás allí!"
        courseE_bee_functions7_b: |-
          Recuerda construir tu código dentro del bloque de función verde.
          ![](https://images.code.org/8fe1fae5caf4ede3a9c9bd9f26940cde-image-1467996837459.gif)
        courseE_bee_functions7_c: This function should turn the bee to head him down the path, collect the nectar, make the honey, then turn the bee around and bring him back.
      courseE_bee_functions7_2018_authored_hint:
        courseE_bee_functions7_a: "Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco.\nAgregue algunos bloques, luego pruébelo. Agrega más, luego intenta de nuevo. ¡Pronto, llegarás allí!"
        courseE_bee_functions7_b: |-
          Recuerda construir tu código dentro del bloque de función verde.
          ![](https://images.code.org/8fe1fae5caf4ede3a9c9bd9f26940cde-image-1467996837459.gif)
        courseE_bee_functions7_c: This function should turn the bee to head him down the path, collect the nectar, make the honey, then turn the bee around and bring him back.
      courseE_bee_functions8_authored_hint:
        courseE_bee_functions8_a: Your function will only need to collect nectar. Try using a while loop instead of a repeat loop.
        courseE_bee_functions8_b: Use `while nectar > 0` to make sure you get all of the nectar.
        courseE_bee_functions8_c: Your main program will need a stair step movement pattern. Remember, the main program is the code under the `when run` block.
      courseE_bee_functions8_2018_authored_hint:
        courseE_bee_functions8_a: Your function will only need to collect nectar. Try using a while loop instead of a repeat loop.
        courseE_bee_functions8_b: Use `while nectar > 0` to make sure you get all of the nectar.
        courseE_bee_functions8_c: Your main program will need a stair step movement pattern. Remember, the main program is the code under the `when run` block.
      courseE_bee_functions9_authored_hint:
        courseE_bee_functions9_a: You can use the exact same function for this puzzle as you did in the last puzzle.  All you need to do is create a function that collects all of the nectar when you get to each flower.
        courseE_bee_functions9_b: Even though you know how much nectar some of the flowers have, a `while` loop can make one function work for all of them.
      courseE_bee_functions9_2018_authored_hint:
        courseE_bee_functions9_a: You can use the exact same function for this puzzle as you did in the last puzzle.  All you need to do is create a function that collects all of the nectar when you get to each flower.
        courseE_bee_functions9_b: Even though you know how much nectar some of the flowers have, a `while` loop can make one function work for all of them.
      courseE_bee_functions_challenge1_authored_hint:
        courseE_bee_functions_challenge1_a: "Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco.\nAgregue algunos bloques, luego pruébelo. Agrega más, luego intenta de nuevo. ¡Pronto, llegarás allí!"
        courseE_bee_functions_challenge1_b: Remember to build your code inside of the green function block.
      courseE_bee_functions_challenge1_2018_authored_hint:
        courseE_bee_functions_challenge1_a: "Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco.\nAgregue algunos bloques, luego pruébelo. Agrega más, luego intenta de nuevo. ¡Pronto, llegarás allí!"
        courseE_bee_functions_challenge1_b: Remember to build your code inside of the green function block.
      courseE_bee_functions_challenge2_authored_hint:
        courseE_bee_functions_challenge1_a: "Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco.\nAgregue algunos bloques, luego pruébelo. Agrega más, luego intenta de nuevo. ¡Pronto, llegarás allí!"
        courseE_bee_functions_challenge1_b: Remember to build your code inside of the green function block.
      courseE_bee_functions_challenge2_2018_authored_hint:
        courseE_bee_functions_challenge1_a: "Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco.\nAgregue algunos bloques, luego pruébelo. Agrega más, luego intenta de nuevo. ¡Pronto, llegarás allí!"
        courseE_bee_functions_challenge1_b: Remember to build your code inside of the green function block.
      courseE_bee_ramp14_authored_hint:
        courseE_bee_ramp14_a: The bee works just like the farmer in the previous puzzle. Buzz along the path and collect nectar while there is nectar (while nectar > 0) and make all of the honey.
        courseE_bee_ramp14_b: There can be more than one flower or honeycomb at each space, so make sure to use `while` loops to get them all!
        courseE_bee_ramp14_c: This puzzle is nearly identical to the previous one, just with honey and nectar instead of vegetables.
      courseE_bee_ramp14_2018_authored_hint:
        courseE_bee_ramp14_a: The bee works just like the farmer in the previous puzzle. Buzz along the path and collect nectar while there is nectar (while nectar > 0) and make all of the honey.
        courseE_bee_ramp14_b: There can be more than one flower or honeycomb at each space, so make sure to use `while` loops to get them all!
        courseE_bee_ramp14_c: This puzzle is nearly identical to the previous one, just with honey and nectar instead of vegetables.
      courseE_bee_ramp17_authored_hint:
        courseE_bee_ramp17_a: Since we don't have a repeat block to do something a certain number of times, what block should we use to move along the path?
        courseE_bee_ramp17: If you were to solve this puzzle without an until block, where would you see repeated code? How can you use this repeated code to shape how you must use an until block to solve the problem?
        courseE_bee_ramp17_b: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet.
        courseE_bee_ramp17_c: You will want to move in a stair-step pattern. Try coding that first, then adding the `if/else` statement and `while` loops to check for flowers and honeycombs.
      courseE_collector_ramp10_authored_hint:
        courseD_artist_ramp10_a: |-
          Instead of using four `move forward` blocks for each side, try putting one `move forward` block inside of a `repeat` loop, like this:
          <xml><block type="controls_repeat">
          <title name="TIMES">4</title>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          </block></xml>
        courseD_artist_ramp10_b: Don't forget to collect one piece of treasure, then turn after each set of steps!
      courseE_farmer_concept1_authored_hint:
        courseE_farmer_concept1_a: A `while there is a hole` block will help you fill any hole until it's flat.
        courseE_farmer_concept1_b: You can use a stair step pattern to get to the holes.
      courseE_farmer_concept1_2018_authored_hint:
        courseE_farmer_concept1_a: A `while there is a hole` block will help you fill any hole until it's flat.
        courseE_farmer_concept1_b: You can use a stair step pattern to get to the holes.
      courseE_farmer_concept2_authored_hint:
        courseE_farmer_concept2_a: The paths are all the same length, but they are a different number of squares apart.  A loop isn't ideal here. Try a function.
        courseE_farmer_concept2_b: A function which turns, goes down the path, gathers pumpkins, and returns to the main horizontal path could be helpful here.
        courseE_farmer_concept2_c: Your main program can call this function with the green `do something` block.
      courseE_farmer_concept2_2018_authored_hint:
        courseE_farmer_concept2_a: The paths are all the same length, but they are a different number of squares apart.  A loop isn't ideal here. Try a function.
        courseE_farmer_concept2_b: A function which turns, goes down the path, gathers pumpkins, and returns to the main horizontal path could be helpful here.
        courseE_farmer_concept2_c: Your main program can call this function with the green `do something` block.
      courseE_farmer_concept3_authored_hint:
        grade3_robotFarmer_ConditionalsIntro_8_a: The `while path ahead` block lets you keep going, even if you don't know how many squares are in a path.
        grade3_robotFarmer_ConditionalsIntro_8_b: What should you do once you've reached the end of a path?
        grade3_robotFarmer_ConditionalsIntro_8_c: Use a `repeat` loop to run your code multiple times for each straight path.
      courseE_farmer_concept3_2018_authored_hint:
        grade3_robotFarmer_ConditionalsIntro_8_a: The `while path ahead` block lets you keep going, even if you don't know how many squares are in a path.
        grade3_robotFarmer_ConditionalsIntro_8_b: What should you do once you've reached the end of a path?
        grade3_robotFarmer_ConditionalsIntro_8_c: Use a `repeat` loop to run your code multiple times for each straight path.
      courseE_farmer_concept4_authored_hint:
        4-5_Artist_Patterns_3_a: Ten cuidado de sacar el bloque completo de "código de la barra de herramientas cada vez que pruebas uno nuevo.
        4-5_Artist_Patterns_3_b: Si tu código se vuelve demasiado confuso, siempre puedes hacer clic en "volver a empezar" y ¡volver a intentarlo!
      courseE_farmer_functions1_authored_hint:
        courseE_farmer_functions1_a: The toolbox is organized a little differently this time! Click on the different categories to see which blocks you have.
        courseE_farmer_functions1_b: You only need to pick one pumpkin, but could you use a loop to get to it?
      courseE_farmer_functions10_authored_hint: [ ]
      courseE_farmer_functions10b_authored_hint:
        courseE_farmer_functions10b_a: You will have to re-create your function first.
        courseE_farmer_functions10b_b: Which way do you need to turn after the first pumpkin?
        courseE_farmer_functions10b_c: Look back at the last puzzle if you need help making the function.
      courseE_farmer_functions10b_2018_authored_hint:
        courseE_farmer_functions10b_a: You will have to re-create your function first.
        courseE_farmer_functions10b_b: Which way do you need to turn after the first pumpkin?
        courseE_farmer_functions10b_c: Look back at the last puzzle if you need help making the function.
      courseE_farmer_functions11_predict_authored_hint: [ ]
      courseE_farmer_functions11_predict_2018_authored_hint: [ ]
      courseE_farmer_functions1_2018_authored_hint:
        courseE_farmer_functions1_a: The toolbox is organized a little differently this time! Click on the different categories to see which blocks you have.
        courseE_farmer_functions1_b: You only need to pick one pumpkin, but could you use a loop to get to it?
      courseE_farmer_functions1a_authored_hint:
        courseE_farmer_functions1a_a: Think through the `if/else` statements step by step. What should you do if you are standing at a corn plant?
        courseE_farmer_functions1a_b: Use a `repeat until` block to get to the pumpkin!
      courseE_farmer_functions1a_2018_authored_hint:
        courseE_farmer_functions1a_a: Think through the `if/else` statements step by step. What should you do if you are standing at a corn plant?
        courseE_farmer_functions1a_b: Use a `repeat until` block to get to the pumpkin!
      courseE_farmer_functions2a_authored_hint: [ ]
      courseE_farmer_functions2aALT_authored_hint: [ ]
      courseE_farmer_functions2b_authored_hint:
        courseE_farmer_functions2b_a: You can use a `repeat until pumpkin` to get to the ends of the two paths.
        courseE_farmer_functions2b_b: There is no corn on the connecting path, so you can just move along it and turn.
        courseE_farmer_functions2b_c: You will need two separate `repeat until` blocks to get all of the crops.
      courseE_farmer_functions2b_2018_authored_hint:
        courseE_farmer_functions2b_a: You can use a `repeat until pumpkin` to get to the ends of the two paths.
        courseE_farmer_functions2b_b: There is no corn on the connecting path, so you can just move along it and turn.
        courseE_farmer_functions2b_c: You will need two separate `repeat until` blocks to get all of the crops.
      courseE_farmer_functions2ba_authored_hint:
        courseE_farmer_functions2ba_a: Use the green `corn and pumpkin` block to call this function.
        courseE_farmer_functions2ba_b: Drag all of the blocks in the workspace together under `when run` to see how this function works.
      courseE_farmer_functions2ba_2018_authored_hint:
        courseE_farmer_functions2ba_a: Use the green `corn and pumpkin` block to call this function.
        courseE_farmer_functions2ba_b: Drag all of the blocks in the workspace together under `when run` to see how this function works.
      courseE_farmer_functions3_authored_hint:
        courseE_farmer_functions3_a: Try using a `while path ahead` loop to get you where you need to be.
      courseE_farmer_functions3b_authored_hint:
        courseE_farmer_functions1a_a: Nested `if` and `if/else` statements will really help you out here.
      courseE_farmer_functions3c_authored_hint:
        courseE_farmer_functions3c_a: What sequence is repeated often in this program? Can you drag these blocks into the function?
        courseE_farmer_functions3c_b: Don't forget to call your function in the main program wherever you removed blocks.
      courseE_farmer_functions3c_2018_authored_hint:
        courseE_farmer_functions3c_a: What sequence is repeated often in this program? Can you drag these blocks into the function?
        courseE_farmer_functions3c_b: Don't forget to call your function in the main program wherever you removed blocks.
      courseE_farmer_functions4_authored_hint:
        courseE_farmer_functions4_a: Drag all of the code out of your `repeat` loop and into the `go get pumpkins` function.
        courseE_farmer_functions4_b: Don't forget to put the block that calls the `go get pumpkins` functions inside your loop before you run your code.
      courseE_farmer_functions4b_authored_hint:
        courseE_farmer_functions4b_a: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet.
        courseE_farmer_functions4b_b: Remember to turn after each path.
        courseE_farmer_functions4b_c: The green `corn and pumpkin` blocks are in the Functions tab of the toolbox.
      courseE_farmer_functions4b_2018_authored_hint:
        courseE_farmer_functions4b_a: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet.
        courseE_farmer_functions4b_b: Remember to turn after each path.
        courseE_farmer_functions4b_c: The green `corn and pumpkin` blocks are in the Functions tab of the toolbox.
      courseE_farmer_functions5_authored_hint: [ ]
      courseE_farmer_functions5a_authored_hint: [ ]
      courseE_farmer_functions5b_authored_hint:
        courseE_farmer_functions5b_a: You will need to use a `while corn` loop, a `while lettuce` and a `while pumpkin` to make sure you get everything.
      courseE_farmer_functions5c_authored_hint:
        courseE_farmer_functions5c_a: Are there any other patterns you can loop in this puzzle?
        courseE_farmer_functions5c_b: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet.
      courseE_farmer_functions5c_2018_authored_hint:
        courseE_farmer_functions5c_a: Are there any other patterns you can loop in this puzzle?
        courseE_farmer_functions5c_b: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet.
      courseE_farmer_functions6_authored_hint: [ ]
      courseE_farmer_functions6b_authored_hint: [ ]
      courseE_farmer_functions6c_authored_hint:
        courseE_farmer_functions6c_a: Edit your function to check for the lettuce as well.
        courseE_farmer_functions6c_b: Would an `if/else` block help to check if there is lettuce in a space?
        courseE_farmer_functions6c_c: Don't forget to keep checking for corn!
      courseE_farmer_functions6c_2018_authored_hint:
        courseE_farmer_functions6c_a: Edit your function to check for the lettuce as well.
        courseE_farmer_functions6c_b: Would an `if/else` block help to check if there is lettuce in a space?
        courseE_farmer_functions6c_c: Don't forget to keep checking for corn!
      courseE_farmer_functions7_authored_hint: [ ]
      courseE_farmer_functions7b_authored_hint:
        courseE_farmer_functions7b_a: You don't need a function here, but you can make one if it is helpful to you!
        courseE_farmer_functions7b_b: Use an `if/else` statement to check for crops, then turn based on which crop you find.
        courseE_farmer_functions7b_c: A `repeat until pumpkin` loop can help you get all the way through the maze.
      courseE_farmer_functions7b_2018_authored_hint:
        courseE_farmer_functions7b_a: You don't need a function here, but you can make one if it is helpful to you!
        courseE_farmer_functions7b_b: Use an `if/else` statement to check for crops, then turn based on which crop you find.
        courseE_farmer_functions7b_c: A `repeat until pumpkin` loop can help you get all the way through the maze.
      courseE_farmer_functions8_authored_hint:
        courseE_farmer_functions8_a: Create a function that takes the farmer to the corn, gets all of the corn, then turns around and comes back.
      courseE_farmer_functions8b_authored_hint:
        courseE_farmer_functions8b_a: Try running the code given to see what it does. What do you need after this?
        courseE_farmer_functions8b_b: Drag all of the starter blocks into a function so that you can use them more than once.
        courseE_farmer_functions8b_c: How many times do you need to call the function?
      courseE_farmer_functions8b_2018_authored_hint:
        courseE_farmer_functions8b_a: Try running the code given to see what it does. What do you need after this?
        courseE_farmer_functions8b_b: Drag all of the starter blocks into a function so that you can use them more than once.
        courseE_farmer_functions8b_c: How many times do you need to call the function?
      courseE_farmer_functions9_authored_hint:
        courseE_farmer_functions8_a: Create a function that takes the farmer to the corn, gets all of the corn, then turns around and comes back.
      courseE_farmer_functions9b_authored_hint:
        courseE_farmer_functions9b_a: Can you use nested `if` and `if/else` statements to move along the path?
        courseE_farmer_functions9b_b: Use `repeat until pumpkin` to move through all of the paths.
        courseE_farmer_functions9b_c: You will want to move through the paths as if they are squares getting larger after each loop.
      courseE_farmer_functions9b_2018_authored_hint:
        courseE_farmer_functions9b_a: Can you use nested `if` and `if/else` statements to move along the path?
        courseE_farmer_functions9b_b: Use `repeat until pumpkin` to move through all of the paths.
        courseE_farmer_functions9b_c: You will want to move through the paths as if they are squares getting larger after each loop.
      courseE_farmer_functions9b_clone_authored_hint: [ ]
      courseE_farmer_predict1_authored_hint:
        courseE_farmer_ramp12a: Feel free to go back to the last puzzle if you need a reminder of how to pick produce only **while** there is produce to pick.
      courseE_farmer_predict1_2018_authored_hint:
        courseE_farmer_ramp12a: Feel free to go back to the last puzzle if you need a reminder of how to pick produce only **while** there is produce to pick.
      courseE_farmer_predict2_authored_hint: [ ]
      courseE_farmer_predict2_2018_authored_hint: [ ]
      courseE_farmer_ramp11_authored_hint:
        courseE_farmer_ramp11_a: If you're having a hard time seeing where the loops should go, try coding it all out then looking for a pattern.
        courseE_farmer_ramp11_b: How can you use a `repeat` loop to pick lettuce instead of dragging out 5 `pick lettuce` blocks?
        courseE_farmer_ramp11_c: You don't need to use 5 repeat loops to get all of the lettuce.  Instead, drag your lettuce picking repeat loop inside of another loop (along with a `move forward` block, and you'll have it!)
      courseE_farmer_ramp11a_authored_hint:
        courseE_farmer_ramp12_a: 'Instead of using a `repeat` loop to tell the farmer how many times to shovel dirt, now you can use a `while there is a pile` block.  '
        courseE_farmer_ramp12_b: You only need to move forward once to get to the dirt.
      courseE_farmer_ramp11a_2018_authored_hint:
        courseE_farmer_ramp12_a: 'Instead of using a `repeat` loop to tell the farmer how many times to shovel dirt, now you can use a `while there is a pile` block.  '
        courseE_farmer_ramp12_b: You only need to move forward once to get to the dirt.
      courseE_farmer_ramp11b_authored_hint:
        courseE_farmer_ramp11b_a: You can nest your `while` loop inside of a `repeat` loop to make your code shorter.
      courseE_farmer_ramp11b_2018_authored_hint:
        courseE_farmer_ramp11b_a: You can nest your `while` loop inside of a `repeat` loop to make your code shorter.
      courseE_farmer_ramp12_authored_hint:
        courseE_farmer_ramp12_b: You will still need to use a `repeat` loop on the outside of it all to tell the farmer how many times to walk forward and get lettuce.
      courseE_farmer_ramp12_2018_authored_hint:
        courseE_farmer_ramp12_b: You will still need to use a `repeat` loop on the outside of it all to tell the farmer how many times to walk forward and get lettuce.
      courseE_farmer_ramp12_forswap_authored_hint:
        courseE_farmer_ramp12_b: You will still need to use a `repeat` loop on the outside of it all to tell the farmer how many times to walk forward and get lettuce.
      courseE_farmer_ramp12_forswap_2018_authored_hint:
        courseE_farmer_ramp12_b: You will still need to use a `repeat` loop on the outside of it all to tell the farmer how many times to walk forward and get lettuce.
      courseE_farmer_ramp12a_authored_hint:
        courseE_farmer_ramp12b: You will need to check your `if` statement 21 times to solve this puzzle.
        courseE_farmer_ramp12c: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet.
        courseE_farmer_ramp12d: There will only be lettuce, so you don't need to worry about empty spaces, corn, or pumpkins.
      courseE_farmer_ramp12a_2018_authored_hint:
        courseE_farmer_ramp12b: You will need to check your `if` statement 21 times to solve this puzzle.
        courseE_farmer_ramp12c: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet.
        courseE_farmer_ramp12d: There will only be lettuce, so you don't need to worry about empty spaces, corn, or pumpkins.
      courseE_farmer_ramp12b_authored_hint: [ ]
      courseE_farmer_ramp12b_2018_authored_hint: [ ]
      courseE_farmer_ramp12c_authored_hint:
        courseE_farmer_ramp12b_b: You will still need to use an `until` loop first, then use a `while` loop once you get to the lettuce.
      courseE_farmer_ramp12c_2018_authored_hint:
        courseE_farmer_ramp12b_b: You will still need to use an `until` loop first, then use a `while` loop once you get to the lettuce.
      courseE_farmer_ramp12d_authored_hint:
        courseE_farmer_ramp12d_b: You will still need to put your `until` and `while` loops inside of a `repeat` loop to solve this puzzle!
      courseE_farmer_ramp12d_2018_authored_hint:
        courseE_farmer_ramp12d_b: You will still need to put your `until` and `while` loops inside of a `repeat` loop to solve this puzzle!
      courseE_farmer_ramp12e_authored_hint:
        courseE_farmer_ramp12e_b: The solution to this puzzle will look a lot like the solution to the last puzzle, but turning in the other direction.
      courseE_farmer_ramp12e_2018_authored_hint:
        courseE_farmer_ramp12e_b: The solution to this puzzle will look a lot like the solution to the last puzzle, but turning in the other direction.
      courseE_farmer_ramp12f_authored_hint:
        courseE_farmer_ramp12f_b: Use an `if/else` block to help the farmer decide if she needs to turn right or left.
      courseE_farmer_ramp12f_2018_authored_hint:
        courseE_farmer_ramp12f_b: Use an `if/else` block to help the farmer decide if she needs to turn right or left.
      courseE_farmer_ramp12g_authored_hint:
        courseE_farmer_ramp12G_b: Use an `if/else` block to help the farmer decide if she needs to turn right or left.
      courseE_farmer_ramp12g_2018_authored_hint:
        courseE_farmer_ramp12G_b: Use an `if/else` block to help the farmer decide if she needs to turn right or left.
      courseE_farmer_ramp13_authored_hint:
        courseE_farmer_ramp13_a: There can be more than one of either crop in a space, so make sure to use `while` loops to pick them all!
        courseE_farmer_ramp13_b: Use a `repeat` loop so that you don't have to write a separate if statement for each square.
        courseE_farmer_ramp13_c: If you can't figure out where to put the loops, try writing your code step-by-step and look for patterns.
      courseE_farmer_ramp13_2018_authored_hint:
        courseE_farmer_ramp13_a: There can be more than one of either crop in a space, so make sure to use `while` loops to pick them all!
        courseE_farmer_ramp13_b: Use a `repeat` loop so that you don't have to write a separate if statement for each square.
        courseE_farmer_ramp13_c: If you can't figure out where to put the loops, try writing your code step-by-step and look for patterns.
      courseE_farmer_ramp15_authored_hint:
        courseE_farmer_ramp15_a: Use the `repeat until at pumpkin` block to make it to the end of the path.
        courseE_farmer_ramp15_b: What else needs to be done while moving along the path to the pumpkin?
        courseE_farmer_ramp15_c: The sprouts hide various amounts of either corn or lettuce to harvest on your way to the pumpkin.
      courseE_farmer_ramp15_2018_authored_hint:
        courseE_farmer_ramp15_a: Use the `repeat until at pumpkin` block to make it to the end of the path.
        courseE_farmer_ramp15_b: What else needs to be done while moving along the path to the pumpkin?
        courseE_farmer_ramp15_c: The sprouts hide various amounts of either corn or lettuce to harvest on your way to the pumpkin.
      courseE_farmer_ramp16_authored_hint:
        courseE_farmer_ramp16_a: If we are moving along the path to the pumpkin, what do we have to do over and over? When do we stop repeating?
        courseE_farmer_ramp16_b: Checking for corn or lettuce at every space will help simplify your code. What should you do if there is a crop? What if there is nothing?
        courseE_farmer_ramp16_c: Use an `if/else` block to keep moving forward. Which way do you need to turn when the forward path is blocked?
      courseE_maze_predict1_authored_hint: [ ]
      courseE_maze_predict1_2018_authored_hint: [ ]
      courseE_maze_ramp1_authored_hint:
        courseC_maze_programming1_0: If the bird isn't getting to the pig, make sure all three of the blocks have been fully clicked together, then click "Run" again.
        courseC_maze_programming1_b: You don't need any extra blocks from the toolbox for this puzzle!
      courseE_maze_ramp13_authored_hint:
        courseD_maze_ramp11_b: Don't forget to use the "Step" button to go through block by block and look for errors.
        courseD_maze_ramp11_a: Use repeat blocks to run either a single block or a chunk of code over and over.
      courseE_maze_ramp1_2018_authored_hint:
        courseC_maze_programming1_0: If the bird isn't getting to the pig, make sure all three of the blocks have been fully clicked together, then click "Run" again.
        courseC_maze_programming1_b: You don't need any extra blocks from the toolbox for this puzzle!
      courseE_maze_ramp2_authored_hint:
        courseC_maze_programming2_a: To use a `move forward` block, drag it from the toolbox out into the workspace and connect it to the `when run` block.
        courseC_maze_programming2_b: Make sure all three `move forward` blocks are attached to the `when run` block.
      courseE_maze_ramp2_2018_authored_hint:
        courseC_maze_programming2_a: To use a `move forward` block, drag it from the toolbox out into the workspace and connect it to the `when run` block.
        courseC_maze_programming2_b: Make sure all three `move forward` blocks are attached to the `when run` block.
      courseE_maze_ramp3_authored_hint:
        courseC_maze_programming3_a: "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\nTo delete a block from the middle of your code, drag all of the blocks underneath it away to the right and let them sit in the workspace for a while.  \n\nClick on the block you want to delete, and drag it back to the toolbox.\n\nFinally, put your other blocks back in place where they belong.\n"
        courseC_maze_programming3_b: Remember that turns to the right and left are from the bird's perspective.
      courseE_maze_ramp3_2018_authored_hint:
        courseC_maze_programming3_a: "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\nTo delete a block from the middle of your code, drag all of the blocks underneath it away to the right and let them sit in the workspace for a while.  \n\nClick on the block you want to delete, and drag it back to the toolbox.\n\nFinally, put your other blocks back in place where they belong.\n"
        courseC_maze_programming3_b: Remember that turns to the right and left are from the bird's perspective.
      courseE_maze_ramp4_authored_hint:
        courseC_maze_programming4_a: You can turn right or left from the bird's point of view. If you are facing right, turning right will make you point downwards.
        courseC_maze_programming4_b: To follow the path, move forward and turn one way, then move again and turn the opposite way. Move forward one more time to reach the pig.
        courseC_maze_programming4_c: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet.
      courseE_maze_ramp4_2018_authored_hint:
        courseC_maze_programming4_a: You can turn right or left from the bird's point of view. If you are facing right, turning right will make you point downwards.
        courseC_maze_programming4_b: To follow the path, move forward and turn one way, then move again and turn the opposite way. Move forward one more time to reach the pig.
        courseC_maze_programming4_c: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet.
      courseE_maze_ramp5_authored_hint:
        courseC_maze_programming5_a: Try using the "Step" button to run your code line by line. Can you figure out what you need to do next?
        courseC_maze_programming5_b: How far do you need to move to get to the corner?
        courseC_maze_programming5_c: You will need to turn left at the corner to get to the pig.
      courseE_maze_ramp5_2018_authored_hint:
        courseC_maze_programming5_a: Try using the "Step" button to run your code line by line. Can you figure out what you need to do next?
        courseC_maze_programming5_b: How far do you need to move to get to the corner?
        courseC_maze_programming5_c: You will need to turn left at the corner to get to the pig.
      courseE_maze_ramp6_authored_hint:
        courseC_maze_programming6_a: '¡Aquí tienes dos caminos para resolver el puzzle!'
        courseC_maze_programming6_b: Remember to turn first before moving, since the bird starts facing a wall.
        courseC_maze_programming6_c: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet.
      courseE_maze_ramp6_2018_authored_hint:
        courseC_maze_programming6_a: '¡Aquí tienes dos caminos para resolver el puzzle!'
        courseC_maze_programming6_b: Remember to turn first before moving, since the bird starts facing a wall.
        courseC_maze_programming6_c: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet.
      courseE_maze_ramp7_authored_hint:
        courseD_maze_ramp7_b: Don't forget to use the "Step" button to go through block by block and look for errors.
        courseD_maze_ramp7_a: Use repeat blocks to run either a single block or a chunk of code over and over.
        courseD_maze_ramp7_c: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet.
      courseE_maze_ramp7_2018_authored_hint:
        courseD_maze_ramp7_b: Don't forget to use the "Step" button to go through block by block and look for errors.
        courseD_maze_ramp7_a: Use repeat blocks to run either a single block or a chunk of code over and over.
        courseD_maze_ramp7_c: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet.
      courseE_maze_ramp_predict1_authored_hint: [ ]
      courseE_multi_maze_ramp5_authored_hint:
        courseC_maze_programming5_a: Try using the "Step" button to run your code line by line. Can you figure out what you need to do next?
      courseE_playLab_challenge1_authored_hint:
        courseE_playLab_challenge1_a: |-
          Here are some things you could do when the player wins the game:
          
          * Make the dinosaur vanish.
          * Stop the squirrels.
          * Make the squirrels and knight happy.
          * Set a new background.
          * Make the knight thank the player for helping.
          * Make all of the actors vanish and show a "You Win!" message.
        courseE_playLab_challenge1_b: |-
          Here are some things you could do when the player loses the game:
          
          * Make the knight vanish.
          * Make the squirrels sad.
          * Make the dinosaur say something.
          * Set a new background.
          * Make all of the actors vanish and show a "Game Over" message.
      courseE_playLab_challenge1_2018_authored_hint:
        courseE_playLab_challenge1_a: |-
          Here are some things you could do when the player wins the game:
          
          * Make the dinosaur vanish.
          * Stop the squirrels.
          * Make the squirrels and knight happy.
          * Set a new background.
          * Make the knight thank the player for helping.
          * Make all of the actors vanish and show a "You Win!" message.
        courseE_playLab_challenge1_b: |-
          Here are some things you could do when the player loses the game:
          
          * Make the knight vanish.
          * Make the squirrels sad.
          * Make the dinosaur say something.
          * Set a new background.
          * Make all of the actors vanish and show a "Game Over" message.
      courseE_playLab_embed_scaffold5_authored_hint: [ ]
      courseE_playLab_scaffold1_authored_hint:
        courseE_playLab_scaffold1_a: The `set actor 1 to ??? image` block can be used to add an actor to the stage.
        courseE_playLab_scaffold1_b: Put the `set actor` block under `when run` to make your actor appear at the beginning of the program.
        courseE_playLab_scaffold1_c: Use `set ??? background` to choose a background for your scene.
      courseE_playLab_scaffold1_2018_authored_hint:
        courseE_playLab_scaffold1_a: The `set actor 1 to ??? image` block can be used to add an actor to the stage.
        courseE_playLab_scaffold1_b: Put the `set actor` block under `when run` to make your actor appear at the beginning of the program.
        courseE_playLab_scaffold1_c: Use `set ??? background` to choose a background for your scene.
      courseE_playLab_scaffold2_authored_hint:
        courseE_playLab_scaffold1_a: Pull on the dropdown menu of the `when ____ arrow` event to change the direction the block controls.
        courseE_playLab_scaffold1_b: You should have four `when arrow` event blocks, with a direction to move underneath each.
        courseE_playLab_scaffold1_c: When you are done, you should be able to move your hero with the arrow keys!
      courseE_playLab_scaffold2_2018_authored_hint:
        courseE_playLab_scaffold1_a: Pull on the dropdown menu of the `when ____ arrow` event to change the direction the block controls.
        courseE_playLab_scaffold1_b: You should have four `when arrow` event blocks, with a direction to move underneath each.
        courseE_playLab_scaffold1_c: When you are done, you should be able to move your hero with the arrow keys!
      courseE_playLab_scaffold3_authored_hint: [ ]
      courseE_playLab_scaffold3_2018_authored_hint: [ ]
      courseE_playLab_scaffold4_authored_hint:
        courseE_playLab_scaffold4_a: Use `score point` to add a point, and `remove point` to subtract one.
      courseE_playLab_scaffold4_2018_authored_hint:
        courseE_playLab_scaffold4_a: Use `score point` to add a point, and `remove point` to subtract one.
      courseE_playLab_scaffold5_authored_hint:
        courseE_playLab_scaffold5_a: To finish this level, you need to win or lose. Use a `end game as win` or `end game as loss` block to finish.
      courseE_playLab_scaffold5_2018_authored_hint:
        courseE_playLab_scaffold5_a: To finish this level, you need to win or lose. Use a `end game as win` or `end game as loss` block to finish.
      courseE_playlab_challenge2_authored_hint:
        courseE_playlab_challenge2_a: |-
          The actor knows what to say based on its mood. Try playing with the things the witch might say.
          
          <xml><block type="studio_saySpriteParamsTime" inline="true">
          <value name="SPRITE">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TEXT">
          <block type="text">
          <title name="TEXT">Concentrate and ask again!</title>
          </block>
          </value>
          <value name="TIME">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          </block></xml>
        courseE_playlab_challenge2_b: "It will feel like the game starts all over if you call the `ask a question` function again below the list of conditionals.\n<xml><block type=\"studio_saySpriteParamsTime\" inline=\"true\">\n               \n<block type=\"procedures_callnoreturn\">\n<mutation name=\"Ask a question\"></mutation>\n        </block></block></xml>"
        courseE_playlab_challenge2_c: "You will need to add more conditional statements to give the actors more things to say.\n\n<xml><block type=\"studio_ifActorHasEmotionParams\" inline=\"true\">\n            <title name=\"EMOTION\">2</title>\n            <value name=\"SPRITE\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">1</title>\n              </block>\n            </value>\n            <statement name=\"DO\">\n              <block type=\"studio_saySpriteParamsTime\" inline=\"true\">\n            <value name=\"SPRITE\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">1</title>\n              </block>\n            </value>\n            <value name=\"TEXT\">\n              <block type=\"text\">\n                <title name=\"TEXT\">???</title>\n              </block>\n            </value>\n            <value name=\"TIME\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">2</title>\n              </block>\n            </value>\n          </block>\n              </statement></block></xml>\n              \nDon't forget to change which moods the actor will show inside of the `repeat forever` loop. You can also set the moods randomly!"
        courseE_playlab_challenge2_d: |-
          Once you understand all of the code that relates to Actor 1, you can try re-writing the same code, but this time for Actor 2.
          
          Don't forget to change the instructions inside the `show title screen` block so they still make sense!
        courseE_playlab_challenge2_e: |-
          When everything is done, you should be able to click on either actor and get up to 8 different messages. Is it possible to expand it even further?
          
          Have a friend try your app when it is finished!
      courseE_playlab_variables_challenge2_authored_hint:
        courseF_playlab_variables_challenge3_a: |-
          The actor knows what to say because it checks the current value of the `fortune` variable.
          
          <xml><block type="variables_set" inline="false">
          <title name="VAR">fortune</title>
          <value name="VALUE">
          <block type="text" movable="false">
          <title name="TEXT">Concentrate and ask again!</title>
          </block>
          </value>
          </block></xml>
        courseF_playlab_variables_challenge3_b: |-
          It will feel like the game starts all over if you call the `ask a question` function again after the actor says the fortune.
          <xml><block type="studio_saySpriteParamsTime" inline="true">
          <value name="SPRITE">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TEXT">
          <block type="variables_get">
          <title name="VAR">fortune</title>
          </block>
          </value>
          <value name="TIME">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <next>
          <block type="procedures_callnoreturn">
          <mutation name="Ask a question"/>
          </block></next></block></xml>
        courseF_playlab_variables_challenge3_c: "You will need to add more conditional statements to give the actors more things to say.\n\n<xml><block type=\"studio_ifActorHasEmotionParams\" inline=\"true\">\n            <title name=\"EMOTION\">2</title>\n            <value name=\"SPRITE\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">1</title>\n              </block>\n            </value>\n            <statement name=\"DO\">\n              <block type=\"variables_set\" inline=\"false\">\n                <title name=\"VAR\">fortune</title>\n                <value name=\"VALUE\">\n                  <block type=\"text\" movable=\"false\">\n                    <title name=\"TEXT\">???</title>\n                  </block>\n                </value>\n              </block>\n              </statement></block></xml>\n              \nDon't forget to change which moods the actor will show inside of the `repeat forever` loop. You can also set the moods randomly!"
        courseF_playlab_variables_challenge3_d: |-
          Once you understand all of the code that relates to Actor 1, you can try re-writing the same code, but this time for Actor 2.
          
          Don't forget to change the instructions inside the `Ask a question` function so they still make sense!
        courseF_playlab_variables_challenge3_e: |-
          When everything is done, you should be able to click on either actor and get up to 8 different messages. Is it possible to expand it even further?
          
          Have a friend try your app when it is finished!
      courseF_IceAge_1_authored_hint:
        iceage_hello1_a: You only need to add one block to solve this puzzle.  Drag the `actor 1 say` block out from the toolbar and connect it to the `when run` event block that is already in the workspace. Next, type "Hello!" inside.
      courseF_IceAge_10_authored_hint:
        iceage_throw_hearts_a: When do you want to throw hearts at granny?  When an arrow is pressed? When you click on Sid?  When you click on Granny?  The choice is yours!
        iceage_throw_hearts_b: To get granny to be happy when she receives a heart, you will need to connect the `set actor 2 mood to happy` block beneath the `when actor 2 touches projectile` event.
      courseF_IceAge_11_authored_hint:
        iceage_free_play_a: 'Can you make Sid and Manny have an Ice Crystal fight?  '
        iceage_free_play_b: Make Granny chase Diego.  End the game as a win if she catches him.
        iceage_free_play_c: Can you have Sid throw snowflakes at Diego and have Diego get bigger each time one hits?  End the game as a win if Diego gets hit 5 times.
      courseF_IceAge_2_authored_hint:
        iceage_hello2_a: 'To solve this puzzle, you will need to have Sid say something using the `actor 1 say` block.  You will also need to have Manny say something with the `actor 2 say` block. '
      courseF_IceAge_3_authored_hint:
        iceage_hello3_a: Use the `move actor 1 right by 200 pixels` block to solve this puzzle.
      courseF_IceAge_4_authored_hint:
        iceage_move_to_actor_a: For this puzzle, you can either move Diego down by 200 pixels, or move Manny up by 200 pixels.
        iceage_move_to_actor_b: Connect the `play ___ sound` block to the `when actor 1 touches actor 2` event to finish this challenge.
      courseF_IceAge_5_authored_hint:
        iceage_repeat_a: Use both the `move actor 1 left` and `move actor 1 right` blocks to solve this puzzle.
      courseF_IceAge_6_authored_hint:
        iceage_click_hello_a: Add one or more `actor 1 say` blocks to the `when clicked` event to complete this puzzle.
      courseF_IceAge_7_authored_hint:
        iceage_move_events_a: 'Each of the `when ___ arrow` events will need to have a different `move actor 1` command connected to it to solve this puzzle. '
      courseF_IceAge_8_authored_hint:
        iceage_sound_and_points_a: You will need to add two blocks beneath the `when actor 1 touches actor 2` event.
        iceage_sound_and_points_b: You will need both the `score a point` block and the 'play ____ sound` block to pass this level.
      courseF_IceAge_9_authored_hint:
        iceage_warn_ice_age_a: 'You should only have to add two blocks to get this puzzle where it needs to be. '
        iceage_warn_ice_age_b: Add both new blocks beneath the `when run` event to have them happen immediately after the program starts.
      courseF_IceAge_template_authored_hint: [ ]
      courseF_artist_embed_for7_authored_hint: [ ]
      courseF_artist_for1_authored_hint:
        courseF_artist_for1_a: |-
          Can you draw something like this:
          
          ![](https://images.code.org/80ae9ab3e449db1ed4e13c86239f7617-image-1475906794954.06.12.png)
      courseF_artist_for10_authored_hint:
        courseF_artist_for10_a: The image in the drawing was made using a counter for the `set alpha` and `counter` / 10 as a brush size.
        courseF_artist_for10_b: The image in the drawing uses a turn of 61 degrees.
        courseF_artist_for10_c: |-
          Want to know how the sample image was done?
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_picker">
          <title name="COLOUR">#ff0000</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">15</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">175</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="alpha" inline="true" id="alpha">
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">61</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_artist_for10_2018_authored_hint:
        courseF_artist_for10_a: The image in the drawing was made using a counter for the `set alpha` and `counter` / 10 as a brush size.
        courseF_artist_for10_b: The image in the drawing uses a turn of 61 degrees.
        courseF_artist_for10_c: |-
          Want to know how the sample image was done?
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_picker">
          <title name="COLOUR">#ff0000</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">15</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">175</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="alpha" inline="true" id="alpha">
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">61</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_artist_for10_predict1_authored_hint: [ ]
      courseF_artist_for10_predict1_2018_authored_hint: [ ]
      courseF_artist_for1_2018_authored_hint:
        courseF_artist_for1_a: |-
          Can you draw something like this:
          
          ![](https://images.code.org/80ae9ab3e449db1ed4e13c86239f7617-image-1475906794954.06.12.png)
      courseF_artist_for2_authored_hint:
        courseF_artist_for2_a: |-
          Use `counter` for the length of your triangles inside your `repeat` loop.
          
          <xml><block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </xml>
        courseF_artist_for2_b: Remember to count by 10 within your for loop.
        courseF_artist_for2_c: |-
          This is the pattern that the Artist will follow:
          
          ![](https://images.code.org/a2569b7732cf02a12263607c9e355d19-image-1503676269436.3_hint 2.gif)
      courseF_artist_for2_2018_authored_hint:
        courseF_artist_for2_a: |-
          Use `counter` for the length of your triangles inside your `repeat` loop.
          
          <xml><block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </xml>
        courseF_artist_for2_b: Remember to count by 10 within your for loop.
        courseF_artist_for2_c: |-
          This is the pattern that the Artist will follow:
          
          ![](https://images.code.org/a2569b7732cf02a12263607c9e355d19-image-1503676269436.3_hint 2.gif)
      courseF_artist_for3_authored_hint:
        courseF_artist_for3_a: |-
          To have the `for` loop drive your movement, make sure that you're using `counter` as your distance in the `move forward` block.
          
          <xml>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </xml>
        courseF_artist_for3_b: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet.
      courseF_artist_for3_2018_authored_hint:
        courseF_artist_for3_a: |-
          To have the `for` loop drive your movement, make sure that you're using `counter` as your distance in the `move forward` block.
          
          <xml>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </xml>
        courseF_artist_for3_b: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet.
      courseF_artist_for4_authored_hint:
        courseF_artist_for4_a: "** ¿Cuál es el número más pequeño que necesitará?\n¿Cuál es el número más grande?\n¿Qué tan grande es el aumento en cada ocasión? **\n\nEsas son las preguntas que debe realizar para completar los espacios en blanco del ciclo `para`."
        courseF_artist_for4_b: Your code will be very similar to what you wrote in the last puzzle, but remember to draw a square this time!
        courseF_artist_for4_c: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet.
      courseF_artist_for4_2018_authored_hint:
        courseF_artist_for4_a: "** ¿Cuál es el número más pequeño que necesitará?\n¿Cuál es el número más grande?\n¿Qué tan grande es el aumento en cada ocasión? **\n\nEsas son las preguntas que debe realizar para completar los espacios en blanco del ciclo `para`."
        courseF_artist_for4_b: Your code will be very similar to what you wrote in the last puzzle, but remember to draw a square this time!
        courseF_artist_for4_c: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet.
      courseF_artist_for5_authored_hint:
        courseF_artist_for5_a: You don't need the `repeat` loop inside when making this spiral!
        courseF_artist_for5_b: Your `for` loop, move, and turn blocks can stay exactly the same.
      courseF_artist_for5_2018_authored_hint:
        courseF_artist_for5_a: You don't need the `repeat` loop inside when making this spiral!
        courseF_artist_for5_b: Your `for` loop, move, and turn blocks can stay exactly the same.
      courseF_artist_for6_authored_hint:
        courseF_artist_for6_a: Your `for` loop will count from 15 to 300 by 15.
        courseF_artist_for6_b: Put a `move forward` and a `turn` block within this `for` loop.
        courseF_artist_for6_c: All you have to change is the number of degrees in the `turn` block.
      courseF_artist_for6_2018_authored_hint:
        courseF_artist_for6_a: Your `for` loop will count from 15 to 300 by 15.
        courseF_artist_for6_b: Put a `move forward` and a `turn` block within this `for` loop.
        courseF_artist_for6_c: All you have to change is the number of degrees in the `turn` block.
      courseF_artist_for7_authored_hint:
        courseF_artist_for7_a: The pen is thinner in this puzzle. You will need to set it to `1` before you start.
        courseF_artist_for7_b: Notice that this spiral turns right instead of left!
        courseF_artist_for7_c: The `for` loop in this puzzle goes from 15 to 300 by 2.
        courseF_artist_for7_d: This image is made by turning just 89 degrees.
      courseF_artist_for7_2018_authored_hint:
        courseF_artist_for7_a: The pen is thinner in this puzzle. You will need to set it to `1` before you start.
        courseF_artist_for7_b: Notice that this spiral turns right instead of left!
        courseF_artist_for7_c: The `for` loop in this puzzle goes from 15 to 300 by 2.
        courseF_artist_for7_d: This image is made by turning just 89 degrees.
      courseF_artist_for8_authored_hint:
        courseF_artist_for8_a: Keep everything else the same in your code, only the turn angle needs to change.
        courseF_artist_for8_b: If you want, you can choose a different color for your spiral!
      courseF_artist_for8_2018_authored_hint:
        courseF_artist_for8_a: Keep everything else the same in your code, only the turn angle needs to change.
        courseF_artist_for8_b: If you want, you can choose a different color for your spiral!
      courseF_artist_for9_authored_hint:
        courseF_artist_for9_a: If you put the `set alpha` block inside of your `for` loop, and use the `counter` variable to change it, you can create a design like this.
        courseF_artist_for9_b: The `set alpha` block changes the opacity of a color. The smaller the value, the more transparent the color is.
      courseF_artist_for9_2018_authored_hint:
        courseF_artist_for9_a: If you put the `set alpha` block inside of your `for` loop, and use the `counter` variable to change it, you can create a design like this.
        courseF_artist_for9_b: The `set alpha` block changes the opacity of a color. The smaller the value, the more transparent the color is.
      courseF_artist_for_challenge1_authored_hint:
        courseF_artist_for_challenge1_a: El 'ancho de pluma' es 1. El primer cuadro tiene 50 de píxeles de lado, y cada cuadrado es 50 píxeles más amplio que el anterior.
        courseF_artist_for_challenge1_b: La opacidad en el pincel siempre es `contador` / 2.
        courseF_artist_for_challenge1_c: Después de hacer cada cuadrado, no te olvides de moverte hacia atrás, girar, moverte de nuevo, ¡y luego retroceder!
        courseF_artist_for_challenge1_d: |-
          **Solución:**
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_picker">
          <title name="COLOUR">#0000cd</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">50</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">350</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">50</title>
          </block>
          </value>
          <statement name="DO">
          <block type="alpha" inline="true" id="alpha">
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpBackward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpBackward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_artist_for_challenge1_2018_authored_hint:
        courseF_artist_for_challenge1_a: El 'ancho de pluma' es 1. El primer cuadro tiene 50 de píxeles de lado, y cada cuadrado es 50 píxeles más amplio que el anterior.
        courseF_artist_for_challenge1_b: La opacidad en el pincel siempre es `contador` / 2.
        courseF_artist_for_challenge1_c: Después de hacer cada cuadrado, no te olvides de moverte hacia atrás, girar, moverte de nuevo, ¡y luego retroceder!
        courseF_artist_for_challenge1_d: |-
          **Solución:**
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_picker">
          <title name="COLOUR">#0000cd</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">50</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">350</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">50</title>
          </block>
          </value>
          <statement name="DO">
          <block type="alpha" inline="true" id="alpha">
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpBackward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpBackward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_artist_for_challenge2_authored_hint:
        courseF_artist_for_challenge2_c: 'El `control de flujo` va de 5 a 250 por 2. '
        courseF_artist_for_challenge2_a: El cambio de color ocurre utilizando el bloque 'definir color con rojo, verde, azul'. Rojo es la constante definida como 255, verde  es siempre el valor de 'contador', y azul es siempre '255-contador'.
        courseF_artist_for_challenge2_b: The code for this is simpler than you might think.  Just set the color inside the for loop, move forward, then turn.
        courseF_artist_for_challenge2_d: |-
          **Solution:**
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">250</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_rgb" inline="false">
          <value name="RED">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          <value name="GREEN">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="BLUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MINUS</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">80</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
          
          ![](https://images.code.org/4ce89e8d907f670408c3705f040e8677-image-1497728974326.49.09 PM.png)
      courseF_artist_for_challenge2_2018_authored_hint:
        courseF_artist_for_challenge2_c: 'El `control de flujo` va de 5 a 250 por 2. '
        courseF_artist_for_challenge2_a: El cambio de color ocurre utilizando el bloque 'definir color con rojo, verde, azul'. Rojo es la constante definida como 255, verde  es siempre el valor de 'contador', y azul es siempre '255-contador'.
        courseF_artist_for_challenge2_b: The code for this is simpler than you might think.  Just set the color inside the for loop, move forward, then turn.
        courseF_artist_for_challenge2_d: |-
          **Solution:**
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">250</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_rgb" inline="false">
          <value name="RED">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          <value name="GREEN">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="BLUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MINUS</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">80</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
          
          ![](https://images.code.org/4ce89e8d907f670408c3705f040e8677-image-1497728974326.49.09 PM.png)
      courseF_artist_fwp1_authored_hint:
        courseF_artist_fwp1_c: Put all of the code for drawing a square inside the function editor.
        courseF_artist_fwp1_a: Remember, you need to turn 90 degrees to draw a square.
        courseF_artist_fwp1_b: You only need to repeat as many times as the number of sides in a square.
      courseF_artist_fwp1_2018_authored_hint:
        courseF_artist_fwp1_c: Put all of the code for drawing a square inside the function editor.
        courseF_artist_fwp1_a: Remember, you need to turn 90 degrees to draw a square.
        courseF_artist_fwp1_b: You only need to repeat as many times as the number of sides in a square.
      courseF_artist_fwp2_authored_hint:
        courseF_artist_fwp2_a: You need to click the "edit" button to get into the function.  Once you're there, add a parameter called `length` and use it inside your `move forward` block!
        courseF_artist_fwp2_b: When calling your function, use a `for loop` for the best possible code!
      courseF_artist_fwp2_2018_authored_hint:
        courseF_artist_fwp2_a: You need to click the "edit" button to get into the function.  Once you're there, add a parameter called `length` and use it inside your `move forward` block!
        courseF_artist_fwp2_b: When calling your function, use a `for loop` for the best possible code!
      courseF_artist_fwp2_predict1_authored_hint: [ ]
      courseF_artist_fwp2_predict1_2018_authored_hint: [ ]
      courseF_artist_fwp3_authored_hint:
        courseF_artist_fwp3_a: This gets easier if you put it all in a `for` loop.
        courseF_artist_fwp3_b: |-
          Be sure to turn 90 degrees between each square!
          
          ![](https://images.code.org/97bd8eded03c5aa39740876c8e9f7ff8-image-1469224745277.gif)
      courseF_artist_fwp3_2018_authored_hint:
        courseF_artist_fwp3_a: This gets easier if you put it all in a `for` loop.
        courseF_artist_fwp3_b: |-
          Be sure to turn 90 degrees between each square!
          
          ![](https://images.code.org/97bd8eded03c5aa39740876c8e9f7ff8-image-1469224745277.gif)
      courseF_artist_fwp4_authored_hint:
        courseF_artist_fwp4_b: Remember to **add** a parameter.  Don't remove the one that is already there!
        courseF_artist_fwp4_c: You will need to call your function three times to draw the shapes.
      courseF_artist_fwp4_2018_authored_hint:
        courseF_artist_fwp4_b: Remember to **add** a parameter.  Don't remove the one that is already there!
        courseF_artist_fwp4_c: You will need to call your function three times to draw the shapes.
      courseF_artist_fwp5_authored_hint:
        courseF_artist_fwp5_d: A `for` loop would really help you out here!
        courseF_artist_fwp5_c: You will need to edit the function a little bit, since your previous function turned the artist to the right after each side, and this image needs a turn to the left.
        courseF_artist_fwp5_a: The length of sides for each shape is 7 times the number of sides it has.
        courseF_artist_fwp5_b: Don't forget to jump 100 pixels between shapes.
      courseF_artist_fwp5_2018_authored_hint:
        courseF_artist_fwp5_d: A `for` loop would really help you out here!
        courseF_artist_fwp5_c: You will need to edit the function a little bit, since your previous function turned the artist to the right after each side, and this image needs a turn to the left.
        courseF_artist_fwp5_a: The length of sides for each shape is 7 times the number of sides it has.
        courseF_artist_fwp5_b: Don't forget to jump 100 pixels between shapes.
      courseF_artist_fwp6_authored_hint:
        courseF_artist_fwp6_a: It's okay to run the program a few times to figure out how the function works with different parameters.
        courseF_artist_fwp6_b: You don't need to add any `move` or `turn` blocks to finish this code.
      courseF_artist_fwp6_2018_authored_hint:
        courseF_artist_fwp6_a: It's okay to run the program a few times to figure out how the function works with different parameters.
        courseF_artist_fwp6_b: You don't need to add any `move` or `turn` blocks to finish this code.
      courseF_artist_fwp7_authored_hint:
        courseF_artist_fwp7_a: Feeling lost after trying a couple of ideas? Try clicking the "Start over" button in the upper right-hand corner.
        courseF_artist_fwp7_b: Your new `min` variable should go in the first slot in your `for` loop, inside the function.
      courseF_artist_fwp7_2018_authored_hint:
        courseF_artist_fwp7_a: Feeling lost after trying a couple of ideas? Try clicking the "Start over" button in the upper right-hand corner.
        courseF_artist_fwp7_b: Your new `min` variable should go in the first slot in your `for` loop, inside the function.
      courseF_artist_fwp8_authored_hint:
        courseF_artist_fwp8_a: If your function is correct, you shouldn't need to change it for this puzzle.
        courseF_artist_fwp8_b: The only thing you should need to do between function calls is change the color of the line.
      courseF_artist_fwp8_2018_authored_hint:
        courseF_artist_fwp8_a: If your function is correct, you shouldn't need to change it for this puzzle.
        courseF_artist_fwp8_b: The only thing you should need to do between function calls is change the color of the line.
      courseF_artist_fwp9_authored_hint:
        courseF_artist_fwp9_a: |-
          Try one of these drawings.
          ![](https://images.code.org/eae6d52956c2bc06b90db3693037df36-image-1493739069435.9.13 hints.png)
      courseF_artist_fwp9_2018_authored_hint:
        courseF_artist_fwp9_a: |-
          Try one of these drawings.
          ![](https://images.code.org/eae6d52956c2bc06b90db3693037df36-image-1493739069435.9.13 hints.png)
      courseF_artist_fwp_challenge1_authored_hint:
        courseF_artist_fwp_challenge1_b: This is a series of polygons with sides that are counter pixels long.
        courseF_artist_fwp_challenge1_c: Each polygon is called from inside a for loop that goes from 3 down to 6 by an increment of 1. What shapes is it making?
      courseF_artist_fwp_challenge1_2018_authored_hint:
        courseF_artist_fwp_challenge1_b: This is a series of polygons with sides that are counter pixels long.
        courseF_artist_fwp_challenge1_c: Each polygon is called from inside a for loop that goes from 3 down to 6 by an increment of 1. What shapes is it making?
      courseF_artist_fwp_challenge2_authored_hint:
        courseF_artist_fwp_challenge1_a: "![](https://images.code.org/9310e6352e85a8265b424c9d57ca28d1-image-1446239776339.gif)"
        courseF_artist_fwp_challenge1_b: 'Esta es una serie de octógonos con lados que son ''contador'' píxeles de largo. '
        courseF_artist_fwp_challenge1_c: 'Cada octágono se llama desde dentro de un bucle ''para'' que va de 200 hasta 2 por 2. '
        courseF_artist_fwp_challenge1_d: 'No olvides dar vuelta de 22.5 grados al final de cada iteración. '
        courseF_artist_fwp_challenge1_e: Tanto el color de cada octágono como el ancho del lápiz están controlados por la variable `contador '.
        courseF_artist_fwp_challenge1_f: |-
          **Solution:**
          
          ![Solution Blocks](https://images.code.org/a82cfea836b95ce6625b08afcc3b7b37-image-1469727289590.png)
      courseF_artist_fwp_challenge2_2018_authored_hint:
        courseF_artist_fwp_challenge1_a: "![](https://images.code.org/9310e6352e85a8265b424c9d57ca28d1-image-1446239776339.gif)"
        courseF_artist_fwp_challenge1_b: 'Esta es una serie de octógonos con lados que son ''contador'' píxeles de largo. '
        courseF_artist_fwp_challenge1_c: 'Cada octágono se llama desde dentro de un bucle ''para'' que va de 200 hasta 2 por 2. '
        courseF_artist_fwp_challenge1_d: 'No olvides dar vuelta de 22.5 grados al final de cada iteración. '
        courseF_artist_fwp_challenge1_e: Tanto el color de cada octágono como el ancho del lápiz están controlados por la variable `contador '.
        courseF_artist_fwp_challenge1_f: |-
          **Solution:**
          
          ![Solution Blocks](https://images.code.org/a82cfea836b95ce6625b08afcc3b7b37-image-1469727289590.png)
      courseF_artist_predict1_authored_hint: [ ]
      courseF_artist_predict1_2018_authored_hint: [ ]
      courseF_artist_ramp10_authored_hint:
        courseF_artist_ramp10_a: Don't forget to turn by 60 degrees after each triangle.  Which loop do you need to put that instruction inside?
        courseF_artist_ramp10_b: If your code for a triangle is in a <xml><block type="controls_repeat"><title name="TIMES">6</title></block></xml> loop, this task will be a lot simpler.
        courseF_artist_ramp10_c: |-
          You will draw six triangles in total for this design:
          
          ![](https://images.code.org/bc62bed22e90d35e420b0a116ac487ef-image-1500347536221.2_solution2.gif)
      courseF_artist_ramp10_2018_authored_hint:
        courseF_artist_ramp10_a: Don't forget to turn by 60 degrees after each triangle.  Which loop do you need to put that instruction inside?
        courseF_artist_ramp10_b: If your code for a triangle is in a <xml><block type="controls_repeat"><title name="TIMES">6</title></block></xml> loop, this task will be a lot simpler.
        courseF_artist_ramp10_c: |-
          You will draw six triangles in total for this design:
          
          ![](https://images.code.org/bc62bed22e90d35e420b0a116ac487ef-image-1500347536221.2_solution2.gif)
      courseF_artist_ramp8_authored_hint:
        courseF_artist_ramp8_a: To draw a side, use the <xml><block type="draw_move_by_constant"><title name="DIR">moveForward</title><title name="VALUE">100</title></block></xml> block, and change the 100 to a 200.
        courseF_artist_ramp8_b: |-
          To draw 4 sides, put the <xml><block type="draw_move_by_constant"><title name="DIR">moveForward</title><title name="VALUE">200</title></block></xml> block inside of a repeat loop and make sure the loop is set to draw 4 times.
          
          Don't forget to turn afterward!
        courseF_artist_ramp8_c: Your turn will also go inside of the <xml><block type="controls_repeat"><title name="TIMES">3</title></block></xml> loop.
      courseF_artist_ramp8_2018_authored_hint:
        courseF_artist_ramp8_a: To draw a side, use the <xml><block type="draw_move_by_constant"><title name="DIR">moveForward</title><title name="VALUE">100</title></block></xml> block, and change the 100 to a 200.
        courseF_artist_ramp8_b: |-
          To draw 4 sides, put the <xml><block type="draw_move_by_constant"><title name="DIR">moveForward</title><title name="VALUE">200</title></block></xml> block inside of a repeat loop and make sure the loop is set to draw 4 times.
          
          Don't forget to turn afterward!
        courseF_artist_ramp8_c: Your turn will also go inside of the <xml><block type="controls_repeat"><title name="TIMES">3</title></block></xml> loop.
      courseF_artist_ramp9_authored_hint:
        courseF_artist_ramp9_a: How is this similar to a square?  How is it different?
        courseF_artist_ramp9_b: You can use the drop down menu on the turn blocks to see which angle you need!
        courseF_artist_ramp9_c: You will want to move forward 100 pixels, then turn right 120 degrees for each side. Can you use a <xml><block type="controls_repeat"><title name="TIMES">3</title></block></xml> loop to make your code shorter?
      courseF_artist_ramp9_2018_authored_hint:
        courseF_artist_ramp9_a: How is this similar to a square?  How is it different?
        courseF_artist_ramp9_b: You can use the drop down menu on the turn blocks to see which angle you need!
        courseF_artist_ramp9_c: You will want to move forward 100 pixels, then turn right 120 degrees for each side. Can you use a <xml><block type="controls_repeat"><title name="TIMES">3</title></block></xml> loop to make your code shorter?
      courseF_artist_variables10_authored_hint:
        courseF_artist_variables10_a: Have fun with this level! See what little changes can do to your code.
        courseF_artist_variables10_b: You can try multiple things, and run your code multiple times.
      courseF_artist_variables10_2018_authored_hint:
        courseF_artist_variables10_a: Have fun with this level! See what little changes can do to your code.
        courseF_artist_variables10_b: You can try multiple things, and run your code multiple times.
      courseF_artist_variables2_authored_hint:
        courseF_artist_variables2_a: Remember to move forward after drawing each triangle.
        courseF_artist_variables2_b: Your new loop will contain the loop for your triangle, then a `move forward` command.
      courseF_artist_variables2_2018_authored_hint:
        courseF_artist_variables2_a: Remember to move forward after drawing each triangle.
        courseF_artist_variables2_b: Your new loop will contain the loop for your triangle, then a `move forward` command.
      courseF_artist_variables3_authored_hint:
        courseF_artist_variables3_a: 'The variable `length` will be used in two places in your code: In the side length of your triangle, and in the amount you move forward between triangles.'
        courseF_artist_variables3_b: 'A number block with value 50 should only be in one place: after the `set variable length` block.'
      courseF_artist_variables3_2018_authored_hint:
        courseF_artist_variables3_a: 'The variable `length` will be used in two places in your code: In the side length of your triangle, and in the amount you move forward between triangles.'
        courseF_artist_variables3_b: 'A number block with value 50 should only be in one place: after the `set variable length` block.'
      courseF_artist_variables4_authored_hint:
        courseF_artist_variables4_a: Your code won't be much different than it was in the last puzzle, except that you will need to turn the artist to jump down, then turn him back to get ready to jump forward again.
        courseF_artist_variables4_c: |-
          This is the pattern your artist will be following:
          
          ![](https://images.code.org/41ae98c1633755cf4553f90a80e125cf-image-1500325529204.6_hint.gif)
        courseF_artist_variables4_b: "![](https://images.code.org/fc31a4b60dc86d7b820c2d242f83e6ed-image-1477533361197.gif)"
      courseF_artist_variables4_2018_authored_hint:
        courseF_artist_variables4_a: Your code won't be much different than it was in the last puzzle, except that you will need to turn the artist to jump down, then turn him back to get ready to jump forward again.
        courseF_artist_variables4_c: |-
          This is the pattern your artist will be following:
          
          ![](https://images.code.org/41ae98c1633755cf4553f90a80e125cf-image-1500325529204.6_hint.gif)
        courseF_artist_variables4_b: "![](https://images.code.org/fc31a4b60dc86d7b820c2d242f83e6ed-image-1477533361197.gif)"
      courseF_artist_variables5_authored_hint:
        courseF_artist_variables5_a: The second half of your code should look almost the same as the first half, except you will be turning *left*, jumping, then turning *right*.
        courseF_artist_variables5_b: La primera mitad de tu código dibujará tres triángulos, y la segunda mitad dibujará los otros tres.
        courseF_artist_variables5_c: Comienza por duplicar el código en la primera mitad de su programa, luego modifícalo para que se muestre el diseño.
        courseF_artist_variables5_d: |-
          This is the pattern your artist will follow:
          
          ![](https://images.code.org/e4ac66f8e9a4503e49c4fad1e4fafc1d-image-1500326800109.7_hint.gif)
      courseF_artist_variables5_2018_authored_hint:
        courseF_artist_variables5_a: The second half of your code should look almost the same as the first half, except you will be turning *left*, jumping, then turning *right*.
        courseF_artist_variables5_b: La primera mitad de tu código dibujará tres triángulos, y la segunda mitad dibujará los otros tres.
        courseF_artist_variables5_c: Comienza por duplicar el código en la primera mitad de su programa, luego modifícalo para que se muestre el diseño.
        courseF_artist_variables5_d: |-
          This is the pattern your artist will follow:
          
          ![](https://images.code.org/e4ac66f8e9a4503e49c4fad1e4fafc1d-image-1500326800109.7_hint.gif)
      courseF_artist_variables6_authored_hint:
        courseF_artist_variables6_a: Thanks to variables, you only need to change one number at the top to make this work.
        courseF_artist_variables6_b: Deberás editar el bloque numérico con el valor 50, pero no se debe alterar más nada en el código.
      courseF_artist_variables6_2018_authored_hint:
        courseF_artist_variables6_a: Thanks to variables, you only need to change one number at the top to make this work.
        courseF_artist_variables6_b: Deberás editar el bloque numérico con el valor 50, pero no se debe alterar más nada en el código.
      courseF_artist_variables6a_authored_hint:
        courseF_artist_variables6a_a: Remember to use the variable `length` instead of an actual number to solve this puzzle.
        courseF_artist_variables6a_b: '¡Este código será muy similar al código de tu triángulo, solo que con una forma diferente!'
        courseF_artist_variables6a_c: Primero escribe el código de un cuadrado, luego agrega el código para moverte entre los cuadrados. Finalmente, agrega un bucle alrededor de todo!
        courseF_artist_variables6a_d: |-
          This is the pattern you'll follow!
          
          ![](https://images.code.org/7fd21023b1498742d1a83ad4132d276e-image-1500328404912.9_hint.gif)
      courseF_artist_variables6a_2018_authored_hint:
        courseF_artist_variables6a_a: Remember to use the variable `length` instead of an actual number to solve this puzzle.
        courseF_artist_variables6a_b: '¡Este código será muy similar al código de tu triángulo, solo que con una forma diferente!'
        courseF_artist_variables6a_c: Primero escribe el código de un cuadrado, luego agrega el código para moverte entre los cuadrados. Finalmente, agrega un bucle alrededor de todo!
        courseF_artist_variables6a_d: |-
          This is the pattern you'll follow!
          
          ![](https://images.code.org/7fd21023b1498742d1a83ad4132d276e-image-1500328404912.9_hint.gif)
      courseF_artist_variables7_authored_hint:
        courseF_artist_variables7_a: Start your code by using the `set length` block. Set the length variable to 150.
        courseF_artist_variables7_b: You can use a `repeat` loop to make your code for the triangle simpler.
        courseF_artist_variables7_c: You will want to turn left 120 degrees to make the corners of the triangle.
      courseF_artist_variables7_2018_authored_hint:
        courseF_artist_variables7_a: Start your code by using the `set length` block. Set the length variable to 150.
        courseF_artist_variables7_b: You can use a `repeat` loop to make your code for the triangle simpler.
        courseF_artist_variables7_c: You will want to turn left 120 degrees to make the corners of the triangle.
      courseF_artist_variables8_authored_hint:
        courseF_artist_variables8_b: Remember to start your code for the triangle with the `set length` block, and start it at 150 pixels.
        courseF_artist_variables8_c: Make sure to use the `repeat` loop to draw your triangle.
        courseF_artist_variables8_a: "Try putting the set of \n\n<xml>\n<block type=\"variables_set\" inline=\"false\">\n                        <title name=\"VAR\">length</title>\n                        <value name=\"VALUE\">\n                          <block type=\"math_arithmetic\" inline=\"true\">\n                            <title name=\"OP\">ADD</title>\n                            <value name=\"A\">\n                              <block type=\"variables_get\">\n                                <title name=\"VAR\">length</title>\n                              </block>\n                            </value>\n                            <value name=\"B\">\n                              <block type=\"math_number\">\n                                <title name=\"NUM\">10</title>\n                              </block>\n                            </value>\n                          </block>\n                        </value>\n                      </block>\n</xml>\n\nblocks inside your loop at the end.\n"
      courseF_artist_variables8_2018_authored_hint:
        courseF_artist_variables8_b: Remember to start your code for the triangle with the `set length` block, and start it at 150 pixels.
        courseF_artist_variables8_c: Make sure to use the `repeat` loop to draw your triangle.
        courseF_artist_variables8_a: "Try putting the set of \n\n<xml>\n<block type=\"variables_set\" inline=\"false\">\n                        <title name=\"VAR\">length</title>\n                        <value name=\"VALUE\">\n                          <block type=\"math_arithmetic\" inline=\"true\">\n                            <title name=\"OP\">ADD</title>\n                            <value name=\"A\">\n                              <block type=\"variables_get\">\n                                <title name=\"VAR\">length</title>\n                              </block>\n                            </value>\n                            <value name=\"B\">\n                              <block type=\"math_number\">\n                                <title name=\"NUM\">10</title>\n                              </block>\n                            </value>\n                          </block>\n                        </value>\n                      </block>\n</xml>\n\nblocks inside your loop at the end.\n"
      courseF_artist_variables9_authored_hint:
        courseF_artist_variables9_a: For this puzzle, all you need to do is change how many times the loop repeats.
        courseF_artist_variables9_b: Make sure the blocks that increment `length` are within your loop so the lines keep getting longer.
      courseF_artist_variables9_2018_authored_hint:
        courseF_artist_variables9_a: For this puzzle, all you need to do is change how many times the loop repeats.
        courseF_artist_variables9_b: Make sure the blocks that increment `length` are within your loop so the lines keep getting longer.
      courseF_artist_variablesFP_authored_hint:
        courseF_artist_variablesFP_a: |-
          Try one of these three drawings.
          ![](https://images.code.org/f0bac32182162bd26a8031f5aa4364ef-image-1493738360437.3.15 hints.png)
      courseF_artist_variablesFP_2018_authored_hint:
        courseF_artist_variablesFP_a: |-
          Try one of these three drawings.
          ![](https://images.code.org/f0bac32182162bd26a8031f5aa4364ef-image-1493738360437.3.15 hints.png)
      courseF_artist_variables_4_authored_hint:
        courseF_artist_variables_4_a: Your code won't be much different than it was in the last puzzle, except that you will need to turn the artist to move down, then turn him back to get ready to move forward again.
        courseF_artist_variables_4_b: "![](https://images.code.org/fc31a4b60dc86d7b820c2d242f83e6ed-image-1477533361197.gif)"
      courseF_artist_variables_6_authored_hint:
        courseF_artist_variables_6_a: Thanks to variables, you only need to change one number at the top to make this work.
      courseF_artist_variables_6a_authored_hint:
        courseF_artist_variables6a_a: Remember to use the variable `length` instead of an actual number to solve this puzzle.
      courseF_artist_variables_8_authored_hint:
        courseF_artist_variables_8_a: 'Try putting the set of ![](https://images.code.org/6525bebee31ee15b84a48761b2866f53-image-1477531948829.31.37.png) blocks inside your loop at the end.  '
      courseF_artist_variables_challenge1_authored_hint:
        courseF_artist_variables_challenge1_a: Each vertical line has a length of `10`. Each horizontal line should have a length of `length`.
        courseF_artist_variables_challenge1_b: You will want to increase the value of `length` by 10 **twice** inside the loop.
        courseF_artist_variables_challenge1_c: Para completar el patrón, deberá girar a la izquierda dos veces, girar a la derecha dos veces y avanzar un total de cuatro veces.
        courseF_artist_variables_challenge1_d: |-
          This puzzle just uses one loop. Without any variables, a similar path might just be a zig-zag.
          
          ![](https://images.code.org/664fdd219502d004fb07886f834fa3d5-image-1496868743379.51.36 PM.png)
          
          If you are having trouble, start by creating this image, then try to see where you can use variables to change the length of the horizontal lines.
        courseF_artist_variables_challenge1_e: |-
          Here is the solution.
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">18</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_artist_variables_challenge1_2018_authored_hint:
        courseF_artist_variables_challenge1_a: Each vertical line has a length of `10`. Each horizontal line should have a length of `length`.
        courseF_artist_variables_challenge1_b: You will want to increase the value of `length` by 10 **twice** inside the loop.
        courseF_artist_variables_challenge1_c: Para completar el patrón, deberá girar a la izquierda dos veces, girar a la derecha dos veces y avanzar un total de cuatro veces.
        courseF_artist_variables_challenge1_d: |-
          This puzzle just uses one loop. Without any variables, a similar path might just be a zig-zag.
          
          ![](https://images.code.org/664fdd219502d004fb07886f834fa3d5-image-1496868743379.51.36 PM.png)
          
          If you are having trouble, start by creating this image, then try to see where you can use variables to change the length of the horizontal lines.
        courseF_artist_variables_challenge1_e: |-
          Here is the solution.
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">18</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_artist_variables_challenge1a_authored_hint:
        courseF_artist_variables_challenge1_a: 'Las variables son útiles ya que usted puede sumarlas cada vez mediante un lazo. '
        courseF_artist_variables_challenge1_b: Este rompecabezas tiene un lazo que crea un polígono, un lazo que repite el polígono 'lados' veces, luego otro lazo que lo hace todo de nuevo después de sumar 5 a 'lados'.
        courseF_artist_variables_challenge1_c: Usar una variable para 'lados' y una para 'longitud' hace al código más limpio ya que usted puede reutilizar el mismo código múltiples veces, en vez de crear una nueva copia para cada conjunto de números.
        courseF_artist_variables_challenge1_d: |-
          **Solution:**
          
          ![Solution](https://images.code.org/311b4a946cb8f3b4144b5075be6460a3-image-1469641878222.png)
      courseF_artist_variables_challenge2_authored_hint:
        courseF_artist_variables_challenge2_a: Las variables son útiles ya que usted puede sumarlas cada vez mediante un lazo. 
        courseF_artist_variables_challenge2_c: Usar una variable para 'lados' y una para 'longitud' hace al código más limpio ya que usted puede reutilizar el mismo código múltiples veces, en vez de crear una nueva copia para cada conjunto de números.
        courseF_artist_variables_challenge2_d: |-
          **Solution:**
          
          ![Solution](https://images.code.org/311b4a946cb8f3b4144b5075be6460a3-image-1469641878222.png)
      courseF_artist_variables_challenge2_2018_authored_hint:
        courseF_artist_variables_challenge2_a: Las variables son útiles ya que usted puede sumarlas cada vez mediante un lazo. 
        courseF_artist_variables_challenge2_c: Usar una variable para 'lados' y una para 'longitud' hace al código más limpio ya que usted puede reutilizar el mismo código múltiples veces, en vez de crear una nueva copia para cada conjunto de números.
        courseF_artist_variables_challenge2_d: |-
          **Solution:**
          
          ![Solution](https://images.code.org/311b4a946cb8f3b4144b5075be6460a3-image-1469641878222.png)
      courseF_bee_conditionals10_authored_hint:
        courseF_bee_conditionals10_a: Imagine there is a cloud in every spot. Does this help simplify your code?
        courseF_bee_conditionals10_b: Use an `if/else` block to check every space for nectar or honey.
        courseF_bee_conditionals10_c: Could a `while` loop help get to the end of this path?
      courseF_bee_conditionals10_2018_authored_hint:
        courseF_bee_conditionals10_a: Imagine there is a cloud in every spot. Does this help simplify your code?
        courseF_bee_conditionals10_b: Use an `if/else` block to check every space for nectar or honey.
        courseF_bee_conditionals10_c: Could a `while` loop help get to the end of this path?
      courseF_bee_conditionals1_predict1_authored_hint: [ ]
      courseF_bee_conditionals1_predict1_2018_authored_hint: [ ]
      courseF_bee_conditionals2_authored_hint:
        courseF_bee_conditionals2_a: Sometimes a flower will be there, sometimes it won't.  If you want your code to run in both cases, make sure to use an `if` statement.
        courseF_bee_conditionals2_b: Try writing the sequence to get you to all of the spaces, then add the `if` statement.
      courseF_bee_conditionals2_2018_authored_hint:
        courseF_bee_conditionals2_a: Sometimes a flower will be there, sometimes it won't.  If you want your code to run in both cases, make sure to use an `if` statement.
        courseF_bee_conditionals2_b: Try writing the sequence to get you to all of the spaces, then add the `if` statement.
      courseF_bee_conditionals3_authored_hint:
        courseF_bee_conditionals3_a: Be sure to use an `if` statement to check each space to see if it has either a flower or nothing.
        courseF_bee_conditionals3_b: A `repeat` loop will be useful so you only have to use one `if` block.
        courseF_bee_conditionals3_c: Try writing code to check the first cloud. Can you loop this to check all of them?
      courseF_bee_conditionals3_2018_authored_hint:
        courseF_bee_conditionals3_a: Be sure to use an `if` statement to check each space to see if it has either a flower or nothing.
        courseF_bee_conditionals3_b: A `repeat` loop will be useful so you only have to use one `if` block.
        courseF_bee_conditionals3_c: Try writing code to check the first cloud. Can you loop this to check all of them?
      courseF_bee_conditionals4_authored_hint:
        courseD_bee_conditionals4_a: You can still treat every space as if there is a cloud over it, even though you can see the whole path.
        courseF_bee_conditionals4_b: 'Use an `if` statement inside your loop to check each space for nectar. '
        courseF_bee_conditionals4_c: Using the block `while there is a path ahead`, you should `move forward` and check for a flower. `if there is a flower` what should the bee do?
      courseF_bee_conditionals4_2018_authored_hint:
        courseD_bee_conditionals4_a: You can still treat every space as if there is a cloud over it, even though you can see the whole path.
        courseF_bee_conditionals4_b: 'Use an `if` statement inside your loop to check each space for nectar. '
        courseF_bee_conditionals4_c: Using the block `while there is a path ahead`, you should `move forward` and check for a flower. `if there is a flower` what should the bee do?
      courseF_bee_conditionals5_authored_hint:
        courseF_bee_conditionals5_a: Think of every side of the rectangular path as a path by itself. Set up a nested loop with a `repeat` block on the outside and a `while there is a path ahead` on the inside. How many paths does the bee need to buzz down if the bee needs to buzz every side with a flower?
        courseF_bee_conditionals5_b: Inside the `while there is a path ahead` block, you will need to move forward and check for a flower. How do you check if there is a flower? What do you do if there is a flower?
        courseF_bee_conditionals5_c: 'There are 3 sides of the rectangle with flowers, so the code needs to `repeat 3 times`. In every repeat, the bee will need to continue along the path, `while there is a path ahead`. '
        courseF_bee_conditionals5_d: Para continuar por el camino, la abeja deberá 'avanzar'. Mientras está en el camino, la abeja necesita buscar una flor. ¿Qué debería hacer la abeja si hay una flor?
      courseF_bee_conditionals5_2018_authored_hint:
        courseF_bee_conditionals5_a: Think of every side of the rectangular path as a path by itself. Set up a nested loop with a `repeat` block on the outside and a `while there is a path ahead` on the inside. How many paths does the bee need to buzz down if the bee needs to buzz every side with a flower?
        courseF_bee_conditionals5_b: Inside the `while there is a path ahead` block, you will need to move forward and check for a flower. How do you check if there is a flower? What do you do if there is a flower?
        courseF_bee_conditionals5_c: 'There are 3 sides of the rectangle with flowers, so the code needs to `repeat 3 times`. In every repeat, the bee will need to continue along the path, `while there is a path ahead`. '
        courseF_bee_conditionals5_d: Para continuar por el camino, la abeja deberá 'avanzar'. Mientras está en el camino, la abeja necesita buscar una flor. ¿Qué debería hacer la abeja si hay una flor?
      courseF_bee_conditionals7_predict2_authored_hint: [ ]
      courseF_bee_conditionals7_predict2_2018_authored_hint: [ ]
      courseF_bee_conditionals8_authored_hint:
        courseF_bee_conditionals8_a: "** Recuerda: ** Este puzzle cambia cada vez que se ejecuta.\n\nQuerras usar un bloque condicional (`Si` o` Si /si no`) para resolver el desafío."
        courseF_bee_conditionals8_b: |-
          This puzzle is tricky, because you can't check blank squares, nectar, *and* honey with just one single conditional.
          
          Only check for nectar and honey at the end of your path.
        courseF_bee_conditionals8_c: What happens if you skip the first flower, then use the `while path ahead` block?
      courseF_bee_conditionals8_2018_authored_hint:
        courseF_bee_conditionals8_a: "** Recuerda: ** Este puzzle cambia cada vez que se ejecuta.\n\nQuerras usar un bloque condicional (`Si` o` Si /si no`) para resolver el desafío."
        courseF_bee_conditionals8_b: |-
          This puzzle is tricky, because you can't check blank squares, nectar, *and* honey with just one single conditional.
          
          Only check for nectar and honey at the end of your path.
        courseF_bee_conditionals8_c: What happens if you skip the first flower, then use the `while path ahead` block?
      courseF_bee_for1_authored_hint:
        courseF_bee_for1_a: Drag a purple number block into the blank space on the `repeat` loop to tell it how many times to repeat.
        courseF_bee_for1_b: You will need two blocks in your ‘repeat’ loop to collect all of the nectar.
      courseF_bee_for10_authored_hint:
        courseF_bee_for10_a: Can you find a pattern between the number of steps you need to take and the number of nectars to gather?
        courseF_bee_for10_b: The first set of flowers has a total of **14 flowers**. To get to this first set, the bee must buzz down **7 squares** (or 14 squares divided by 2.) How many flowers are in the next set and how many squares will be the bee have to travel to get there?
        courseF_bee_for10_c: "In the puzzle, the first set of flowers has **14** flowers, the second set has **10** flowers, third set has **6** flowers, and the fourth set has **2** flowers.\n\nIn this drawing, notice there are **7** red squares, **5** orange squares, **3** green squares, and **1** blue block. \n\n![](https://images.code.org/602ce14659299af6a59a79ebd0bdb9d4-image-1493221855089.6.11 Hint Drawing.png)\n\nHow do the numbers relate?"
        courseF_bee_for10_d: You'll need to have 2 repeats, one will use a math block.
      courseF_bee_for10_2018_authored_hint:
        courseF_bee_for10_a: Can you find a pattern between the number of steps you need to take and the number of nectars to gather?
        courseF_bee_for10_b: The first set of flowers has a total of **14 flowers**. To get to this first set, the bee must buzz down **7 squares** (or 14 squares divided by 2.) How many flowers are in the next set and how many squares will be the bee have to travel to get there?
        courseF_bee_for10_c: "In the puzzle, the first set of flowers has **14** flowers, the second set has **10** flowers, third set has **6** flowers, and the fourth set has **2** flowers.\n\nIn this drawing, notice there are **7** red squares, **5** orange squares, **3** green squares, and **1** blue block. \n\n![](https://images.code.org/602ce14659299af6a59a79ebd0bdb9d4-image-1493221855089.6.11 Hint Drawing.png)\n\nHow do the numbers relate?"
        courseF_bee_for10_d: You'll need to have 2 repeats, one will use a math block.
      courseF_bee_for11_authored_hint:
        courseF_bee_for11_a: "How much less is 12 than 15?  \nHow much less is 9 than 12?\n\nDo you see a pattern?"
      courseF_bee_for11_2018_authored_hint:
        courseF_bee_for11_a: "How much less is 12 than 15?  \nHow much less is 9 than 12?\n\nDo you see a pattern?"
      courseF_bee_for1_2018_authored_hint:
        courseF_bee_for1_a: Drag a purple number block into the blank space on the `repeat` loop to tell it how many times to repeat.
        courseF_bee_for1_b: You will need two blocks in your ‘repeat’ loop to collect all of the nectar.
      courseF_bee_for2_authored_hint:
        courseF_bee_for2_a: If you’re confused, work one flower at a time, and test often.
        courseF_bee_for2_b: Remember to move forward between each loop, so you reach each flower.
      courseF_bee_for2_2018_authored_hint:
        courseF_bee_for2_a: If you’re confused, work one flower at a time, and test often.
        courseF_bee_for2_b: Remember to move forward between each loop, so you reach each flower.
      courseF_bee_for3_authored_hint:
        courseF_bee_for3_a: 'Use the `counter` variable inside the `repeat` loop where nectar is gathered to solve this puzzle. '
        courseF_bee_for3_b: Your `for` loop will need to count from 1 to 5 with an increment of 1.
      courseF_bee_for3_predict1_authored_hint: [ ]
      courseF_bee_for3_predict1_2018_authored_hint: [ ]
      courseF_bee_for4_authored_hint:
        courseF_bee_for4_a: Use a `for` loop that goes from 1 to 7 with an increment of 1 to solve this puzzle.
        courseF_bee_for4_b: Within your `for` loop, you will want to have a `move forward` command, and a loop to collect nectar.
        courseF_bee_for4_c: Make sure to use the `counter` variable inside your nested `repeat` loop to get enough nectar!
      courseF_bee_for4_2018_authored_hint:
        courseF_bee_for4_a: Use a `for` loop that goes from 1 to 7 with an increment of 1 to solve this puzzle.
        courseF_bee_for4_b: Within your `for` loop, you will want to have a `move forward` command, and a loop to collect nectar.
        courseF_bee_for4_c: Make sure to use the `counter` variable inside your nested `repeat` loop to get enough nectar!
      courseF_bee_for5_authored_hint:
        courseF_bee_for5_a: This time, your `move forward` block and your `get nectar` block will need to be in separate `repeat` loops, both inside the same `for` loop.
        courseF_bee_for5_b: Use the `counter` variable in each loop so the bee moves different distances between each flower.
        courseF_bee_for5_c: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet.
      courseF_bee_for5_2018_authored_hint:
        courseF_bee_for5_a: This time, your `move forward` block and your `get nectar` block will need to be in separate `repeat` loops, both inside the same `for` loop.
        courseF_bee_for5_b: Use the `counter` variable in each loop so the bee moves different distances between each flower.
        courseF_bee_for5_c: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet.
      courseF_bee_for6_authored_hint:
        courseF_bee_for6_a: Don't forget to use a `counter` variable inside your `repeat` loop.
        courseF_bee_for6_b: Within your `for` loop, you will want to have a `move forward` command, and a loop to collect nectar.
        courseF_bee_for6_c: Your loop should count **from 5 to 1**.
      courseF_bee_for6_2018_authored_hint:
        courseF_bee_for6_a: Don't forget to use a `counter` variable inside your `repeat` loop.
        courseF_bee_for6_b: Within your `for` loop, you will want to have a `move forward` command, and a loop to collect nectar.
        courseF_bee_for6_c: Your loop should count **from 5 to 1**.
      courseF_bee_for7_authored_hint:
        courseF_bee_for7_a: Your `for` loop will need to count from 1 to 7 by 2.
        courseF_bee_for7_b: Within your `for` loop, you will want to have a `move forward` command, and a loop to collect nectar.
        courseF_bee_for7_c: Remember to use the `counter` variable in your `repeat` loop.
      courseF_bee_for7_2018_authored_hint:
        courseF_bee_for7_a: Your `for` loop will need to count from 1 to 7 by 2.
        courseF_bee_for7_b: Within your `for` loop, you will want to have a `move forward` command, and a loop to collect nectar.
        courseF_bee_for7_c: Remember to use the `counter` variable in your `repeat` loop.
      courseF_bee_for8_authored_hint:
        courseF_bee_for8_a: "If your loop is counting up, the increment is added to your counter variable each time through. \n\nWhat do you need to add to each number to get the next amount of nectar?"
        courseF_bee_for8_b: En este puzzle, tendrás que moverte en un patrón de escalones para llegar a las flores.
        courseF_bee_for8_c: Your loop will count *from 3 to 15* with some increment. What is it?
      courseF_bee_for8_2018_authored_hint:
        courseF_bee_for8_a: "If your loop is counting up, the increment is added to your counter variable each time through. \n\nWhat do you need to add to each number to get the next amount of nectar?"
        courseF_bee_for8_b: En este puzzle, tendrás que moverte en un patrón de escalones para llegar a las flores.
        courseF_bee_for8_c: Your loop will count *from 3 to 15* with some increment. What is it?
      courseF_bee_for9_authored_hint:
        courseF_bee_for9_a: |-
          Try doing some math with the counter variable.
          
          What do you have to do to the counter at each flower to equal the amount of nectar you need to collect?
        courseF_bee_for9_c: It looks like you will need to turn the bee at the beginning of each loop iteration if you want to solve the puzzle.
        courseF_bee_for9_b: "**Remember:** If your loop is counting up, the increment is added to your `counter` variable each time through."
      courseF_bee_for9_2018_authored_hint:
        courseF_bee_for9_a: |-
          Try doing some math with the counter variable.
          
          What do you have to do to the counter at each flower to equal the amount of nectar you need to collect?
        courseF_bee_for9_c: It looks like you will need to turn the bee at the beginning of each loop iteration if you want to solve the puzzle.
        courseF_bee_for9_b: "**Remember:** If your loop is counting up, the increment is added to your `counter` variable each time through."
      courseF_bee_for_challenge1_authored_hint: [ ]
      courseF_bee_for_challenge1_2018_authored_hint: [ ]
      courseF_bee_for_challenge2_authored_hint:
        courseF_bee_for_challenge2_a: "Echa un vistazo a esta opción de movimiento:\n\n![](https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png)"
        courseF_bee_for_challenge2_b: 'Intente usar dos bucles `para`: uno para trepar y agarrar néctar, y el otro para bajar y hacer miel.'
        courseF_bee_for_challenge2_c: "Observe que un bucle `para` necesita varios bucles regulares dentro en que se repita 'contador' veces para hacer el patrón creciente de escalera.\n\nEl otro bucle `para` solo necesita un bucle regular para hacer una cantidad 'contador' de miel."
        courseF_bee_for_challenge2_d: |-
          **Solución:**
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward">
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="maze_moveForward">
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_honey"/>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_bee_for_challenge2_2018_authored_hint:
        courseF_bee_for_challenge2_a: "Echa un vistazo a esta opción de movimiento:\n\n![](https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png)"
        courseF_bee_for_challenge2_b: 'Intente usar dos bucles `para`: uno para trepar y agarrar néctar, y el otro para bajar y hacer miel.'
        courseF_bee_for_challenge2_c: "Observe que un bucle `para` necesita varios bucles regulares dentro en que se repita 'contador' veces para hacer el patrón creciente de escalera.\n\nEl otro bucle `para` solo necesita un bucle regular para hacer una cantidad 'contador' de miel."
        courseF_bee_for_challenge2_d: |-
          **Solución:**
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward">
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="maze_moveForward">
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_honey"/>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_bee_for_challenge3_authored_hint:
        courseF_bee_for_challenge2_a: "Echa un vistazo a esta opción de movimiento:\n\n![](https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png)"
        courseF_bee_for_challenge2_b: 'Intente usar dos bucles `para`: uno para trepar y agarrar néctar, y el otro para bajar y hacer miel.'
        courseF_bee_for_challenge2_c: "Observe que un bucle `para` necesita varios bucles regulares dentro en que se repita 'contador' veces para hacer el patrón creciente de escalera.\n\nEl otro bucle `para` solo necesita un bucle regular para hacer una cantidad 'contador' de miel."
        courseF_bee_for_challenge2_d: |-
          **Solución:**
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward">
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="maze_moveForward">
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_honey"/>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_bee_functions2_authored_hint:
        courseF_bee_functions2_a: The function has been written for you, but you will need to call it at each flower.
        courseF_bee_functions2_b: Click on the blue edit button on the `get only nectar` function to see what it does.
      courseF_bee_functions2_2018_authored_hint:
        courseF_bee_functions2_a: The function has been written for you, but you will need to call it at each flower.
        courseF_bee_functions2_b: Click on the blue edit button on the `get only nectar` function to see what it does.
      courseF_bee_functions3_authored_hint:
        courseF_bee_functions3_a: 'Tu función para este puzzle solo necesita hacer miel, no debería tener ningún bloque de ''avanzar'' o ''girar''. '
        courseF_bee_functions3_b: Recuerda que tu función solo debe obtener miel * si * hay un panal de miel.
        courseF_bee_functions3_c: Usa el bloque verde `solo hacer miel` para llamar a tu función.
        courseF_bee_functions3_d: Mira este camino.
      courseF_bee_functions3_2018_authored_hint:
        courseF_bee_functions3_a: 'Tu función para este puzzle solo necesita hacer miel, no debería tener ningún bloque de ''avanzar'' o ''girar''. '
        courseF_bee_functions3_b: Recuerda que tu función solo debe obtener miel * si * hay un panal de miel.
        courseF_bee_functions3_c: Usa el bloque verde `solo hacer miel` para llamar a tu función.
        courseF_bee_functions3_d: Mira este camino.
      courseF_bee_functions3a_authored_hint:
        courseF_bee_functions3a_a: 'Tu función para este puzzle solo necesita obtener néctar o hacer miel, no deberías tener ningún bloque de ''avanzar'' o ''girar''. '
        courseF_bee_functions3a_b: Usa un patrón de escalones para verificar las primeras cuatro nubes.
      courseF_bee_functions3a_2018_authored_hint:
        courseF_bee_functions3a_a: 'Tu función para este puzzle solo necesita obtener néctar o hacer miel, no deberías tener ningún bloque de ''avanzar'' o ''girar''. '
        courseF_bee_functions3a_b: Usa un patrón de escalones para verificar las primeras cuatro nubes.
      courseF_bee_functions4_authored_hint:
        courseF_bee_functions4_a: Tu función debe viajar por los caminos laterales y devolver la abeja a la camino principal. No necesitas agregar esa parte a tu programa principal.
        courseF_bee_functions4_b: Intenta crear el programa y usar los bloques de funciones como esperas que se comporte la función, luego crea la función.
      courseF_bee_functions4_2018_authored_hint:
        courseF_bee_functions4_a: Tu función debe viajar por los caminos laterales y devolver la abeja a la camino principal. No necesitas agregar esa parte a tu programa principal.
        courseF_bee_functions4_b: Intenta crear el programa y usar los bloques de funciones como esperas que se comporte la función, luego crea la función.
      courseF_bee_functions5_authored_hint:
        courseE_bee_functions5_a: Edit the function so that it solves the puzzle without having to change the main program.
        courseE_bee_functions5_b: "Your function should make the bee: \n- turn\n- move forward\n- collect all of the nectar\n- turn around\n- move back to the main path\n- turn back to the direction that the bee started from"
      courseF_bee_functions5a_authored_hint:
        courseF_bee_functions5a_a: "Tu función debería verificar si hay un camino a la derecha, y si lo hay, recorrer los caminos laterales y regresar a la abeja al camino principal.\n\nNo necesitas agregar esa parte a tu programa principal."
        courseF_bee_functions5a_b: Usa un bucle`siempre que` para viajar por todas las rutas principales, ya que son de diferentes longitudes.
        courseF_bee_functions5a_c: Dentro de tu bucle `siempre que`, asegúrate de avanzar, luego usa tu función para buscar una ruta.
      courseF_bee_functions5a_2018_authored_hint:
        courseF_bee_functions5a_a: "Tu función debería verificar si hay un camino a la derecha, y si lo hay, recorrer los caminos laterales y regresar a la abeja al camino principal.\n\nNo necesitas agregar esa parte a tu programa principal."
        courseF_bee_functions5a_b: Usa un bucle`siempre que` para viajar por todas las rutas principales, ya que son de diferentes longitudes.
        courseF_bee_functions5a_c: Dentro de tu bucle `siempre que`, asegúrate de avanzar, luego usa tu función para buscar una ruta.
      courseF_bee_functions6_authored_hint:
        courseF_bee_functions6_a: "Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco\nAgrega algunos bloques, luego pruébalo. Agrega más, luego intenta de nuevo. ¡Pronto, lo lograras!\n![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)"
        courseF_bee_functions6_b: Tu función debe verificar si hay una flor o un panal, obtener néctar o hacer miel, luego girar.
        courseF_bee_functions6_c: Dado que estás girando dentro de tu función, solo necesitas un bucle `siempre que` para atravesar este laberinto.
      courseF_bee_functions6_2018_authored_hint:
        courseF_bee_functions6_a: "Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco\nAgrega algunos bloques, luego pruébalo. Agrega más, luego intenta de nuevo. ¡Pronto, lo lograras!\n![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)"
        courseF_bee_functions6_b: Tu función debe verificar si hay una flor o un panal, obtener néctar o hacer miel, luego girar.
        courseF_bee_functions6_c: Dado que estás girando dentro de tu función, solo necesitas un bucle `siempre que` para atravesar este laberinto.
      courseF_bee_functions7_authored_hint:
        courseF_bee_functions7_a: Puedes mirar hacia atrás en el último puzzle para ver tu función.
        courseF_bee_functions7_b: Trata de dibujar un camino a través de este laberinto con tu dedo. ¿Dónde tendrá que tomar la abeja una decisión?
      courseF_bee_functions7_2018_authored_hint:
        courseF_bee_functions7_a: Puedes mirar hacia atrás en el último puzzle para ver tu función.
        courseF_bee_functions7_b: Trata de dibujar un camino a través de este laberinto con tu dedo. ¿Dónde tendrá que tomar la abeja una decisión?
      courseF_bee_functions8a_authored_hint:
        courseF_bee_functions8a_a: "Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco.\nAgregue algunos bloques, luego pruébelo. Agrega más, luego intenta de nuevo. ¡Pronto, llegarás allí!"
        courseF_bee_functions8a_b: "Recuerda construir código dentro del editor de funciones."
      courseF_bee_functions8a_2018_authored_hint:
        courseF_bee_functions8a_a: "Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco.\nAgregue algunos bloques, luego pruébelo. Agrega más, luego intenta de nuevo. ¡Pronto, llegarás allí!"
        courseF_bee_functions8a_b: "Recuerda construir código dentro del editor de funciones."
      courseF_bee_functionsPre7_authored_hint:
        courseF_bee_functions7_a: "Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco.\nAgregue algunos bloques, luego pruébelo. Agrega más, luego intenta de nuevo. ¡Pronto, llegarás allí!"
        courseF_bee_functions7_b: |-
          Remember to build code inside of the green function block.
          
          ![](https://images.code.org/8fe1fae5caf4ede3a9c9bd9f26940cde-image-1467996837459.gif)
        courseF_bee_functions7_c: '¿De qué manera deberías girar si hay un panal? ¿Qué tal una flor? ¿Qué pasa si no hay nada?'
      courseF_bee_functionsPre7_2018_authored_hint:
        courseF_bee_functions7_a: "Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco.\nAgregue algunos bloques, luego pruébelo. Agrega más, luego intenta de nuevo. ¡Pronto, llegarás allí!"
        courseF_bee_functions7_b: |-
          Remember to build code inside of the green function block.
          
          ![](https://images.code.org/8fe1fae5caf4ede3a9c9bd9f26940cde-image-1467996837459.gif)
        courseF_bee_functions7_c: '¿De qué manera deberías girar si hay un panal? ¿Qué tal una flor? ¿Qué pasa si no hay nada?'
      courseF_bee_functions_challenge1_authored_hint:
        courseF_bee_functions_challenge1_a: Puedes usar las funciones en la caja de herramientas para ayudarlo. ¡Puedes invocar una función dentro de la definición de otra función!
      courseF_bee_functions_challenge1_2018_authored_hint:
        courseF_bee_functions_challenge1_a: Puedes usar las funciones en la caja de herramientas para ayudarlo. ¡Puedes invocar una función dentro de la definición de otra función!
      courseF_bee_functions_challenge2_authored_hint:
        courseF_bee_functions_challenge2_a: |-
          Si hay un camino a la derecha, deberías hacer lo siguiente:
          * Obtén cualquier néctar o haz miel.
          * Gira a la derecha hacia el camino lateral.
          * Muévete hasta final de la ruta lateral.
          * Dobla a la derecha.
          
          Si repites las acciones anteriores dos veces, estarás listo para retroceder por la ruta principal.
          
          ** ¡Solo haz clic para obtener otra sugerencia si deseas ver la solución completa! **
        courseF_bee_functions_challenge2_b: |-
          **Solution:**
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_untilBlocked">
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_if">
          <title name="DIR">isPathRight</title>
          <statement name="DO">
          <block type="procedures_callnoreturn" id="function">
          <mutation name="move and check"></mutation>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          <block type="procedures_defnoreturn" editable="false">
          <mutation></mutation>
          <title name="NAME">move and check</title>
          <statement name="STACK">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="procedures_callnoreturn">
          <mutation name="check nectar or honey"></mutation>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="maze_untilBlocked">
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </statement>
          </block>
          <block type="procedures_defnoreturn" editable="false" usercreated="true">
          <mutation></mutation>
          <title name="NAME">check nectar or honey</title>
          <statement name="STACK">
          <block type="bee_whileNectarAmount">
          <title name="ARG1">nectarRemaining</title>
          <title name="OP">&gt;</title>
          <title name="ARG2">0</title>
          <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          <next>
          <block type="bee_whileNectarAmount">
          <title name="ARG1">honeyAvailable</title>
          <title name="OP">&gt;</title>
          <title name="ARG2">0</title>
          <statement name="DO">
          <block type="maze_honey"/>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </xml>
      courseF_bee_functions_challenge2_2018_authored_hint:
        courseF_bee_functions_challenge2_a: |-
          Si hay un camino a la derecha, deberías hacer lo siguiente:
          * Obtén cualquier néctar o haz miel.
          * Gira a la derecha hacia el camino lateral.
          * Muévete hasta final de la ruta lateral.
          * Dobla a la derecha.
          
          Si repites las acciones anteriores dos veces, estarás listo para retroceder por la ruta principal.
          
          ** ¡Solo haz clic para obtener otra sugerencia si deseas ver la solución completa! **
        courseF_bee_functions_challenge2_b: |-
          **Solution:**
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_untilBlocked">
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_if">
          <title name="DIR">isPathRight</title>
          <statement name="DO">
          <block type="procedures_callnoreturn" id="function">
          <mutation name="move and check"></mutation>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          <block type="procedures_defnoreturn" editable="false">
          <mutation></mutation>
          <title name="NAME">move and check</title>
          <statement name="STACK">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="procedures_callnoreturn">
          <mutation name="check nectar or honey"></mutation>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="maze_untilBlocked">
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </statement>
          </block>
          <block type="procedures_defnoreturn" editable="false" usercreated="true">
          <mutation></mutation>
          <title name="NAME">check nectar or honey</title>
          <statement name="STACK">
          <block type="bee_whileNectarAmount">
          <title name="ARG1">nectarRemaining</title>
          <title name="OP">&gt;</title>
          <title name="ARG2">0</title>
          <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          <next>
          <block type="bee_whileNectarAmount">
          <title name="ARG1">honeyAvailable</title>
          <title name="OP">&gt;</title>
          <title name="ARG2">0</title>
          <statement name="DO">
          <block type="maze_honey"/>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </xml>
      courseF_bee_functions_challenge2_recursion_authored_hint:
        courseF_bee_functions8a_a: "Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco.\nAgregue algunos bloques, luego pruébelo. Agrega más, luego intenta de nuevo. ¡Pronto, llegarás allí!"
        courseF_bee_functions8a_b: "Recuerda construir código dentro del editor de funciones."
      courseF_bee_fwp1_authored_hint:
        courseF_bee_fwp1_a: Use `if` statements to make sure you're only getting nectar from a flower.
        courseF_bee_fwp1_b: Continue along the path using a `repeat` block. Make sure you are using a `move forward` block and checking if there is a flower using a `if` statement.
      courseF_bee_fwp1_2018_authored_hint:
        courseF_bee_fwp1_a: Use `if` statements to make sure you're only getting nectar from a flower.
        courseF_bee_fwp1_b: Continue along the path using a `repeat` block. Make sure you are using a `move forward` block and checking if there is a flower using a `if` statement.
      courseF_bee_fwp2_authored_hint:
        courseF_bee_fwp2_a: "To turn this into a function, simply drag the code into the existing function block.  \n\n\n![](https://images.code.org/4d918c677ecb9f1618c1556566805b32-image-1477621874625.gif)"
        courseF_bee_fwp2_b: Don't forget to connect the `rowOfNectar` block to `when run` to call the function that you just built.
      courseF_bee_fwp2_2018_authored_hint:
        courseF_bee_fwp2_a: "To turn this into a function, simply drag the code into the existing function block.  \n\n\n![](https://images.code.org/4d918c677ecb9f1618c1556566805b32-image-1477621874625.gif)"
        courseF_bee_fwp2_b: Don't forget to connect the `rowOfNectar` block to `when run` to call the function that you just built.
      courseF_bee_fwp3_authored_hint:
        courseF_bee_fwp3_a: Your function will run no matter which direction you're facing.
        courseF_bee_fwp3_b: There are 3 rows of nectar, what kind of turns and movements do you need to make between each row?
        courseF_bee_fwp3_c: Para resolver este puzzle, necesitarás llamar a tu función 3 veces. Entre cada llamada, debes `girar a la derecha`,` avanzar` 2 veces, luego `girar a la derecha` de nuevo. O bien, tienes que `girar a la izquierda`,` avanzar` 2 veces, luego `girar a la izquierda` de nuevo.
      courseF_bee_fwp3_2018_authored_hint:
        courseF_bee_fwp3_a: Your function will run no matter which direction you're facing.
        courseF_bee_fwp3_b: There are 3 rows of nectar, what kind of turns and movements do you need to make between each row?
        courseF_bee_fwp3_c: Para resolver este puzzle, necesitarás llamar a tu función 3 veces. Entre cada llamada, debes `girar a la derecha`,` avanzar` 2 veces, luego `girar a la derecha` de nuevo. O bien, tienes que `girar a la izquierda`,` avanzar` 2 veces, luego `girar a la izquierda` de nuevo.
      courseF_bee_fwp4_authored_hint:
        courseF_bee_fwp4_a: You will need to add a parameter and use the resulting variable in your loop.
        courseF_bee_fwp4_b: El parámetro que crees para tu función se usará en el bucle de repetición para determinar cuántas veces la abeja avanzará y buscará néctar.
      courseF_bee_fwp4_2018_authored_hint:
        courseF_bee_fwp4_a: You will need to add a parameter and use the resulting variable in your loop.
        courseF_bee_fwp4_b: El parámetro que crees para tu función se usará en el bucle de repetición para determinar cuántas veces la abeja avanzará y buscará néctar.
      courseF_bee_fwp5_authored_hint:
        courseF_bee_fwp5_a: Count the number of spaces you need to check in each stretch and use those numbers as your parameters to the function call.
        courseF_bee_fwp5_a_b: Remember to turn between each function call.
      courseF_bee_fwp5_2018_authored_hint:
        courseF_bee_fwp5_a: Count the number of spaces you need to check in each stretch and use those numbers as your parameters to the function call.
        courseF_bee_fwp5_a_b: Remember to turn between each function call.
      courseF_bee_fwp6_authored_hint:
        courseF_bee_fwp6_a: Which block automatically increments a variable that you could use as a parameter?
        courseF_bee_fwp6_b: Try using a `for` loop to solve this puzzle.
      courseF_bee_fwp6_2018_authored_hint:
        courseF_bee_fwp6_a: Which block automatically increments a variable that you could use as a parameter?
        courseF_bee_fwp6_b: Try using a `for` loop to solve this puzzle.
      courseF_bee_fwp7_authored_hint:
        courseF_bee_fwp7_a: You don't need a second parameter for this function, only a second `if` statement.
        courseF_bee_fwp7_b: Add an `if` statement in your function so the bee checks for both honeycombs and flowers.
      courseF_bee_fwp7_2018_authored_hint:
        courseF_bee_fwp7_a: You don't need a second parameter for this function, only a second `if` statement.
        courseF_bee_fwp7_b: Add an `if` statement in your function so the bee checks for both honeycombs and flowers.
      courseF_bee_fwp8_authored_hint:
        courseF_bee_fwp8_a: How could a `for` loop help in this puzzle?
        courseF_bee_fwp8_b: Since the spiral gets smaller as you go in, your `for` loop should count down.
      courseF_bee_fwp8_2018_authored_hint:
        courseF_bee_fwp8_a: How could a `for` loop help in this puzzle?
        courseF_bee_fwp8_b: Since the spiral gets smaller as you go in, your `for` loop should count down.
      courseF_bee_fwp9_authored_hint: [ ]
      courseF_bee_fwp9_predict1_authored_hint: [ ]
      courseF_bee_fwp9_predict1_2018_authored_hint: [ ]
      courseF_bee_fwp_challenge1_authored_hint:
        courseF_bee_fwp_challenge1_a: |-
          The main program should look something like this:
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">6</title>
          </block>
          </value>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
        courseF_bee_fwp_challenge1_b: 'Look at how much corn is available to harvest in each space. Do you see the counter pattern? '
        courseF_bee_fwp_challenge1_b1: |-
          The `length` parameter should be used to set the maximum value in the `for loop`.
          
          Don't forget to have the farmer move back to the main path after harvesting!
        courseF_bee_fwp_challenge1_c: |-
          Place a `for loop` inside a function and set it to count from `1` to `length` by `1`.
          Inside this loop, you should move forward and pick all of the corn.
          
          <xml>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="parameters_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          </statement>
          </block></xml>
        courseF_bee_fwp_challenge1_d: Inside the `for loop` you will want to `move forward` then `pick corn` **counter times**.
        courseF_bee_fwp_challenge1_d2: After the `for loop` you can just `move backward` **length times**.
        courseF_bee_fwp_challenge1_e: |
          **Here is the solution:**
          
          <xml>
          <block type="procedures_defnoreturn" editable="false" usercreated="true">
          <mutation>
          <arg name="length"/>
          </mutation>
          <title name="NAME">pick row</title>
          <statement name="STACK">
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="parameters_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="harvester_corn"/>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="parameters_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveBackward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block></xml>
      courseF_bee_fwp_challenge1_2018_authored_hint:
        courseF_bee_fwp_challenge1_a: |-
          The main program should look something like this:
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">6</title>
          </block>
          </value>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
        courseF_bee_fwp_challenge1_b: 'Look at how much corn is available to harvest in each space. Do you see the counter pattern? '
        courseF_bee_fwp_challenge1_b1: |-
          The `length` parameter should be used to set the maximum value in the `for loop`.
          
          Don't forget to have the farmer move back to the main path after harvesting!
        courseF_bee_fwp_challenge1_c: |-
          Place a `for loop` inside a function and set it to count from `1` to `length` by `1`.
          Inside this loop, you should move forward and pick all of the corn.
          
          <xml>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="parameters_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          </statement>
          </block></xml>
        courseF_bee_fwp_challenge1_d: Inside the `for loop` you will want to `move forward` then `pick corn` **counter times**.
        courseF_bee_fwp_challenge1_d2: After the `for loop` you can just `move backward` **length times**.
        courseF_bee_fwp_challenge1_e: |
          **Here is the solution:**
          
          <xml>
          <block type="procedures_defnoreturn" editable="false" usercreated="true">
          <mutation>
          <arg name="length"/>
          </mutation>
          <title name="NAME">pick row</title>
          <statement name="STACK">
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="parameters_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="harvester_corn"/>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="parameters_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveBackward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block></xml>
      courseF_bee_fwp_challenge2_authored_hint:
        courseF_bee_fwp_challenge2_a: |-
          Comience asegurándose de que entiende cómo funciona esta *supuesta* función. A medida que la agricultora se mueve por cada camino, solo intentará recolectar maíz. En cambio, ¿cómo puedes hacer que revise cada una de las 3 verduras y elegir solo la que encuentra?
          
          Agregue declaraciones condicionales a la función para buscar maíz, calabazas y lechuga.
        courseF_bee_fwp_challenge2_b: |-
          Are you running out of `move forward` blocks?
          Try using a *second* `for loop` in your main program.
        courseF_bee_fwp_challenge2_c: |-
          **Here is what your function should look like:**
          
          <xml><block type="procedures_defnoreturn" deletable="false" movable="false" editable="false" usercreated="true">
          <mutation>
          <arg name="length"/>
          </mutation>
          <title name="NAME">pick row</title>
          <statement name="STACK">
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="parameters_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="harvester_ifHasCrop">
          <title name="LOC">Corn</title>
          <statement name="DO">
          <block type="harvester_corn"/>
          </statement>
          <next>
          <block type="harvester_ifHasCrop">
          <title name="LOC">Pumpkin</title>
          <statement name="DO">
          <block type="harvester_pumpkin"/>
          </statement>
          <next>
          <block type="harvester_ifHasCrop">
          <title name="LOC">Lettuce</title>
          <statement name="DO">
          <block type="harvester_lettuce"/>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="parameters_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveBackward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </xml>
        courseF_bee_fwp_challenge2_d: |
          **Here is what your main program should look like:**
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter2</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">6</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="variables_get">
          <title name="VAR">counter2</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block></xml>
      courseF_bee_fwp_challenge2_2018_authored_hint:
        courseF_bee_fwp_challenge2_a: |-
          Comience asegurándose de que entiende cómo funciona esta *supuesta* función. A medida que la agricultora se mueve por cada camino, solo intentará recolectar maíz. En cambio, ¿cómo puedes hacer que revise cada una de las 3 verduras y elegir solo la que encuentra?
          
          Agregue declaraciones condicionales a la función para buscar maíz, calabazas y lechuga.
        courseF_bee_fwp_challenge2_b: |-
          Are you running out of `move forward` blocks?
          Try using a *second* `for loop` in your main program.
        courseF_bee_fwp_challenge2_c: |-
          **Here is what your function should look like:**
          
          <xml><block type="procedures_defnoreturn" deletable="false" movable="false" editable="false" usercreated="true">
          <mutation>
          <arg name="length"/>
          </mutation>
          <title name="NAME">pick row</title>
          <statement name="STACK">
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="parameters_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="harvester_ifHasCrop">
          <title name="LOC">Corn</title>
          <statement name="DO">
          <block type="harvester_corn"/>
          </statement>
          <next>
          <block type="harvester_ifHasCrop">
          <title name="LOC">Pumpkin</title>
          <statement name="DO">
          <block type="harvester_pumpkin"/>
          </statement>
          <next>
          <block type="harvester_ifHasCrop">
          <title name="LOC">Lettuce</title>
          <statement name="DO">
          <block type="harvester_lettuce"/>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="parameters_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveBackward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </xml>
        courseF_bee_fwp_challenge2_d: |
          **Here is what your main program should look like:**
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter2</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">6</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="variables_get">
          <title name="VAR">counter2</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block></xml>
      courseF_farmer_ramp11_authored_hint:
        courseF_farmer_ramp11_a: If you're having a hard time seeing where the loops should go, try coding it all out then looking for a pattern.
        courseF_farmer_ramp11_b: How can you use a <xml><block type="controls_repeat"><title name="TIMES">???</title></block></xml> loop to pick lettuce, instead of dragging out 5 <xml><block type="harvester_lettuce"/></xml> blocks?
        courseF_farmer_ramp11_c: You don't need to use 5 repeat loops to get all of the lettuce.  Instead, drag your lettuce picking repeat loop inside of another loop (along with a <xml><block type="maze_moveForward"/></xml> block, and you'll have it!)
      courseF_farmer_ramp11_2018_authored_hint:
        courseF_farmer_ramp11_a: If you're having a hard time seeing where the loops should go, try coding it all out then looking for a pattern.
        courseF_farmer_ramp11_b: How can you use a <xml><block type="controls_repeat"><title name="TIMES">???</title></block></xml> loop to pick lettuce, instead of dragging out 5 <xml><block type="harvester_lettuce"/></xml> blocks?
        courseF_farmer_ramp11_c: You don't need to use 5 repeat loops to get all of the lettuce.  Instead, drag your lettuce picking repeat loop inside of another loop (along with a <xml><block type="maze_moveForward"/></xml> block, and you'll have it!)
      courseF_maze_predict1_authored_hint: [ ]
      courseF_maze_ramp1_authored_hint:
        courseF_maze_ramp1_a: If the bird isn't getting to the pig, make sure all of the blocks have been fully snapped together, then click "Run" again.
        courseF_maze_ramp1_b: You don't need any extra blocks from the toolbox here!
      courseF_maze_ramp13_authored_hint:
        courseF_maze_ramp13_b: Don't forget to use the "Step" button to go through block by block and look for errors.
        courseF_maze_ramp13_a: Use repeat blocks to run either a single block or a chunk of code over and over.
        courseF_maze_ramp13_c: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet.
        courseF_maze_ramp13_d: Una vez que hayas terminado tu bucle, ¿qué tienes que hacer para mover los últimos cuadrados? Adjunta estos bloques después del bucle.
      courseF_maze_ramp15_authored_hint:
        courseF_maze_ramp7_b: Don't forget to use the "Step" button to go through block by block and look for errors.
        courseF_maze_ramp7_a: Use repeat blocks to run either a single block or a chunk of code over and over.
      courseF_maze_ramp1_2018_authored_hint:
        courseF_maze_ramp1_a: If the bird isn't getting to the pig, make sure all of the blocks have been fully snapped together, then click "Run" again.
        courseF_maze_ramp1_b: You don't need any extra blocks from the toolbox here!
      courseF_maze_ramp2_authored_hint:
        courseF_maze_ramp2_a: To use a new block, drag it from the toolbox out into the workspace and connect it to the program that is attached to the <xml><block type="when_run"/></xml> block.
        courseF_maze_ramp2_b: Make sure the <xml><block type="maze_moveForward"/></xml> block is inside of the loop, so that it is repeated.
      courseF_maze_ramp2_2018_authored_hint:
        courseF_maze_ramp2_a: To use a new block, drag it from the toolbox out into the workspace and connect it to the program that is attached to the <xml><block type="when_run"/></xml> block.
        courseF_maze_ramp2_b: Make sure the <xml><block type="maze_moveForward"/></xml> block is inside of the loop, so that it is repeated.
      courseF_maze_ramp4_authored_hint:
        courseF_maze_ramp4_a: You can turn right or left from the bird's point of view. If you are facing right, turning right will make you point downwards.
        courseF_maze_ramp4_b: Para seguir el camino, avanza y gira en un sentido, luego muévete tres veces antes de girar en el sentido opuesto. Avanza una vez más para alcanzar al cerdo.
        courseF_maze_ramp4_c: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet.
      courseF_maze_ramp4_2018_authored_hint:
        courseF_maze_ramp4_a: You can turn right or left from the bird's point of view. If you are facing right, turning right will make you point downwards.
        courseF_maze_ramp4_b: Para seguir el camino, avanza y gira en un sentido, luego muévete tres veces antes de girar en el sentido opuesto. Avanza una vez más para alcanzar al cerdo.
        courseF_maze_ramp4_c: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you haven't solved the puzzle yet.
      courseF_maze_ramp5_authored_hint:
        courseF_maze_ramp5_a: Try using the "Step" button to run your code line by line. Can you figure out what you need to do next?
        courseF_maze_ramp5_b: There is more than one way to get to the pig.
        courseF_maze_ramp5_c: Try using a <xml><block type="controls_repeat"><title name="TIMES">3</title></block></xml> loop for shorter code!
      courseF_maze_ramp5_2018_authored_hint:
        courseF_maze_ramp5_a: Try using the "Step" button to run your code line by line. Can you figure out what you need to do next?
        courseF_maze_ramp5_b: There is more than one way to get to the pig.
        courseF_maze_ramp5_c: Try using a <xml><block type="controls_repeat"><title name="TIMES">3</title></block></xml> loop for shorter code!
      courseF_maze_ramp6_authored_hint:
        courseF_maze_ramp6_a: '¡Aquí tienes dos caminos para resolver el puzzle!'
        courseF_maze_ramp6_b: El pájaro comienza a mirar hacia la pared, ¡así que recuerda girar antes de moverte!
        courseF_maze_ramp6_c: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet.
      courseF_maze_ramp6_2018_authored_hint:
        courseF_maze_ramp6_a: '¡Aquí tienes dos caminos para resolver el puzzle!'
        courseF_maze_ramp6_b: El pájaro comienza a mirar hacia la pared, ¡así que recuerda girar antes de moverte!
        courseF_maze_ramp6_c: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet.
      courseF_maze_ramp7_authored_hint:
        courseF_maze_ramp7_b: Don't forget to use the "Step" button to go through block by block and look for errors.
        courseF_maze_ramp7_a: Use repeat blocks to run either a single block or a chunk of code over and over.
        courseF_maze_ramp7_c: Don't be afraid to make a mistake! Try adding blocks and running the code to see what will happen, even if you don't think you've solved the puzzle yet.
        courseF_maze_ramp7_d: Hay más de una forma de llegar al cerdo. ¿Cuál forma requiere el menor código?
        courseF_maze_ramp7_aa: |-
          Look at this path...
          
          ![](https://images.code.org/e1d29901495eea9504c194b09efaa88e-image-1503437474226.29.32.png)
      courseF_playlab_variables1a_authored_hint:
        courseF_playlab_variables1a_a: You will want to replace the words “What should I shout?” in the green block with “Goal!”
      courseF_playlab_variables1a_2018_authored_hint:
        courseF_playlab_variables1a_a: You will want to replace the words “What should I shout?” in the green block with “Goal!”
      courseF_playlab_variables2b_authored_hint:
        courseF_playlab_variables2b_a: '¿Qué crees que dirá Kiki cuando toques `Ejecutar`?'
      courseF_playlab_variables2b_2018_authored_hint:
        courseF_playlab_variables2b_a: '¿Qué crees que dirá Kiki cuando toques `Ejecutar`?'
      courseF_playlab_variables3b_authored_hint:
        courseF_playlab_variables3b_a: The variable blocks are already in the workspace.  All you have to do is put them where they belong!
      courseF_playlab_variables3bEdit_authored_hint:
        courseF_playlab_variables3b_a: The variable blocks are already in the workspace.  All you have to do is put them where they belong!
      courseF_playlab_variables3b_josh_authored_hint:
        courseF_playlab_variables3b_a: 'Hay dos bloques con espacios vacíos: un bloque `actor dice` y un bloque` unirse`. ¡Agregue las variables de bloques allí!'
      courseF_playlab_variables3b_josh_2018_authored_hint:
        courseF_playlab_variables3b_a: 'Hay dos bloques con espacios vacíos: un bloque `actor dice` y un bloque` unirse`. ¡Agregue las variables de bloques allí!'
      courseF_playlab_variables4b_authored_hint:
        courseF_playlab_variables4b_a: No necesitas más bloques de la caja de herramientas aquí.
        courseF_playlab_variables4b_b: Coloque las dos variables 'año' y una variable 'nombre' donde tengan más sentido en la conversación.
      courseF_playlab_variables4b_2018_authored_hint:
        courseF_playlab_variables4b_a: No necesitas más bloques de la caja de herramientas aquí.
        courseF_playlab_variables4b_b: Coloque las dos variables 'año' y una variable 'nombre' donde tengan más sentido en la conversación.
      courseF_playlab_variables5c_authored_hint:
        courseF_playlab_variables5c_a: Encuentre un bloque de variables `respuesta` en la caja de herramientas, debajo de" Variables ".
        courseF_playlab_variables5c_b: Prueba tu código! Intenta ingresar "rojo", y también otros colores, para ver qué pasa.
      courseF_playlab_variables5c_2018_authored_hint:
        courseF_playlab_variables5c_a: Encuentre un bloque de variables `respuesta` en la caja de herramientas, debajo de" Variables ".
        courseF_playlab_variables5c_b: Prueba tu código! Intenta ingresar "rojo", y también otros colores, para ver qué pasa.
      courseF_playlab_variables6c_authored_hint:
        courseF_playlab_variables6c_a: Debajo de la sección "Entrada", usa el bloque `preguntar` para obtener la entrada de los usuarios.
      courseF_playlab_variables6c_2018_authored_hint:
        courseF_playlab_variables6c_a: Debajo de la sección "Entrada", usa el bloque `preguntar` para obtener la entrada de los usuarios.
      courseF_playlab_variables7b_authored_hint:
        courseF_playlab_variables7b_a: Haz que un gato y un perro hablen sobre sus comidas favoritas. Usa el bloque de pregunta para encontrar la comida favorita, ¡luego muestra el texto en la pantalla!
        courseF_playlab_variables7b_b: Haz que tu personaje favorito pregunte si quiere escuchar un chiste. Si la respuesta es sí, muestra una broma a la pantalla.
      courseF_playlab_variables7b_2018_authored_hint:
        courseF_playlab_variables7b_a: Haz que un gato y un perro hablen sobre sus comidas favoritas. Usa el bloque de pregunta para encontrar la comida favorita, ¡luego muestra el texto en la pantalla!
        courseF_playlab_variables7b_b: Haz que tu personaje favorito pregunte si quiere escuchar un chiste. Si la respuesta es sí, muestra una broma a la pantalla.
      courseF_playlab_variables7c_authored_hint:
        courseF_playlab_variables7c_a: Coloque el nuevo bloque `pregunta` antes de su instrucción` si/ de lo contrario` para que pueda usarlo allí en otras etapas.
      courseF_playlab_variables7c_2018_authored_hint:
        courseF_playlab_variables7c_a: Coloque el nuevo bloque `pregunta` antes de su instrucción` si/ de lo contrario` para que pueda usarlo allí en otras etapas.
      courseF_playlab_variables8c_authored_hint:
        courseF_playlab_variables8c_a: El bloque `unirse` entra en un bloque` actor dice`, y te permite usar tus variables en oraciones más grandes.
      courseF_playlab_variables8c_2018_authored_hint:
        courseF_playlab_variables8c_a: El bloque `unirse` entra en un bloque` actor dice`, y te permite usar tus variables en oraciones más grandes.
      courseF_playlab_variables_challenge1_authored_hint:
        courseF_playlab_variables_challenge1_a: |-
          You will need additional blocks from the tool box to get the actors to talk.
          <xml><block type="studio_saySpriteParamsTime" inline="true">
          <value name="SPRITE">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TEXT">
          <block type="text">
          <title name="TEXT">Knock knock.</title>
          </block>
          </value>
          <value name="TIME">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          </block></xml>
      courseF_playlab_variables_challenge1_2018_authored_hint:
        courseF_playlab_variables_challenge1_a: |-
          You will need additional blocks from the tool box to get the actors to talk.
          <xml><block type="studio_saySpriteParamsTime" inline="true">
          <value name="SPRITE">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TEXT">
          <block type="text">
          <title name="TEXT">Knock knock.</title>
          </block>
          </value>
          <value name="TIME">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          </block></xml>
      courseF_playlab_variables_challenge2_authored_hint:
        courseF_playlab_variables_challenge2_a: Suma y resta puntos a la variable `Puntuación` cuando los sprites colisionan. 
        courseF_playlab_variables_challenge2_b: Usted puede cambiar el parámetro de cuán lejos se mueve su sprite cada vez que una de las teclas flecha es presionada.
        courseF_playlab_variables_challenge2_c: |-
          **Solution:**
          
          <xml>
          <block type="studio_whenArrow">
          <title name="VALUE">up</title>
          <next>
          <block type="studio_moveDistanceParams" inline="true">
          <title name="SPRITE">0</title>
          <title name="DIR">1</title>
          <value name="DISTANCE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenArrow">
          <title name="VALUE">down</title>
          <next>
          <block type="studio_moveDistanceParams" inline="true">
          <title name="SPRITE">0</title>
          <title name="DIR">4</title>
          <value name="DISTANCE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenArrow">
          <title name="VALUE">left</title>
          <next>
          <block type="studio_moveDistanceParams" inline="true">
          <title name="SPRITE">0</title>
          <title name="DIR">8</title>
          <value name="DISTANCE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenArrow">
          <title name="VALUE">right</title>
          <next>
          <block type="studio_moveDistanceParams" inline="true">
          <title name="SPRITE">0</title>
          <title name="DIR">2</title>
          <value name="DISTANCE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenSpriteCollided">
          <title name="SPRITE1">0</title>
          <title name="SPRITE2">1</title>
          <next>
          <block type="studio_setScore" inline="false">
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="studio_getScore"/>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenSpriteCollided">
          <title name="SPRITE1">0</title>
          <title name="SPRITE2">2</title>
          <next>
          <block type="studio_setScore" inline="false">
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="studio_getScore"/>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenSpriteCollided">
          <title name="SPRITE1">1</title>
          <title name="SPRITE2">2</title>
          <next>
          <block type="studio_setScore" inline="false">
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MINUS</title>
          <value name="A">
          <block type="studio_getScore"/>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </xml>
      courseF_playlab_variables_challenge2_2018_authored_hint:
        courseF_playlab_variables_challenge2_a: Suma y resta puntos a la variable `Puntuación` cuando los sprites colisionan. 
        courseF_playlab_variables_challenge2_b: Usted puede cambiar el parámetro de cuán lejos se mueve su sprite cada vez que una de las teclas flecha es presionada.
        courseF_playlab_variables_challenge2_c: |-
          **Solution:**
          
          <xml>
          <block type="studio_whenArrow">
          <title name="VALUE">up</title>
          <next>
          <block type="studio_moveDistanceParams" inline="true">
          <title name="SPRITE">0</title>
          <title name="DIR">1</title>
          <value name="DISTANCE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenArrow">
          <title name="VALUE">down</title>
          <next>
          <block type="studio_moveDistanceParams" inline="true">
          <title name="SPRITE">0</title>
          <title name="DIR">4</title>
          <value name="DISTANCE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenArrow">
          <title name="VALUE">left</title>
          <next>
          <block type="studio_moveDistanceParams" inline="true">
          <title name="SPRITE">0</title>
          <title name="DIR">8</title>
          <value name="DISTANCE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenArrow">
          <title name="VALUE">right</title>
          <next>
          <block type="studio_moveDistanceParams" inline="true">
          <title name="SPRITE">0</title>
          <title name="DIR">2</title>
          <value name="DISTANCE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenSpriteCollided">
          <title name="SPRITE1">0</title>
          <title name="SPRITE2">1</title>
          <next>
          <block type="studio_setScore" inline="false">
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="studio_getScore"/>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenSpriteCollided">
          <title name="SPRITE1">0</title>
          <title name="SPRITE2">2</title>
          <next>
          <block type="studio_setScore" inline="false">
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="studio_getScore"/>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenSpriteCollided">
          <title name="SPRITE1">1</title>
          <title name="SPRITE2">2</title>
          <next>
          <block type="studio_setScore" inline="false">
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MINUS</title>
          <value name="A">
          <block type="studio_getScore"/>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </xml>
      courseF_playlab_variables_challenge3_authored_hint:
        courseF_playlab_variables_challenge3_a: |-
          The actor knows what to say because it checks the current value of the `fortune` variable.
          
          <xml><block type="variables_set" inline="false">
          <title name="VAR">fortune</title>
          <value name="VALUE">
          <block type="text" movable="false">
          <title name="TEXT">Concentrate and ask again!</title>
          </block>
          </value>
          </block></xml>
        courseF_playlab_variables_challenge3_b: |-
          It will feel like the game starts all over if you call the `ask a question` function again after the actor says the fortune.
          <xml><block type="studio_saySpriteParamsTime" inline="true">
          <value name="SPRITE">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TEXT">
          <block type="variables_get">
          <title name="VAR">fortune</title>
          </block>
          </value>
          <value name="TIME">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <next>
          <block type="procedures_callnoreturn">
          <mutation name="Ask a question"/>
          </block></next></block></xml>
        courseF_playlab_variables_challenge3_c: "You will need to add more conditional statements to give the actors more things to say.\n\n<xml><block type=\"studio_ifActorHasEmotionParams\" inline=\"true\">\n            <title name=\"EMOTION\">2</title>\n            <value name=\"SPRITE\">\n              <block type=\"math_number\">\n                <title name=\"NUM\">1</title>\n              </block>\n            </value>\n            <statement name=\"DO\">\n              <block type=\"variables_set\" inline=\"false\">\n                <title name=\"VAR\">fortune</title>\n                <value name=\"VALUE\">\n                  <block type=\"text\" movable=\"false\">\n                    <title name=\"TEXT\">???</title>\n                  </block>\n                </value>\n              </block>\n              </statement></block></xml>\n              \nDon't forget to change which moods the actor will show inside of the `repeat forever` loop. You can also set the moods randomly!"
        courseF_playlab_variables_challenge3_d: |-
          Once you understand all of the code that relates to Actor 1, you can try re-writing the same code, but this time for Actor 2.
          
          Don't forget to change the instructions inside the `Ask a question` function so they still make sense!
        courseF_playlab_variables_challenge3_e: |-
          When everything is done, you should be able to click on either actor and get up to 8 different messages. Is it possible to expand it even further?
          
          Have a friend try your app when it is finished!
      coursea_maze_ramp1_2018_authored_hint:
        courseC_maze_programming1_a: If the bird isn't getting to the pig, make sure both of the blocks have been fully clicked together, then click "Run" again.
        courseC_maze_programming1_b: Don't be afraid to make a mistake! Try something, and if it doesn't work, try something else!
      coursef_maze_ramp3_authored_hint:
        courseF_maze_ramp3_a: "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\nTo delete a block from the middle of your code, drag all of the blocks underneath it away to the right and let them sit in the workspace for a while.  \n\nClick on the block you want to delete, and drag it back to the toolbox.\n\nFinally, put your other blocks back in place where they belong.\n"
        courseF_maze_ramp3_b: Use el botón de paso para recorrer el programa línea por línea. ¿Dónde está algo mal?
      coursef_maze_ramp3_2018_authored_hint:
        courseF_maze_ramp3_a: "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\nTo delete a block from the middle of your code, drag all of the blocks underneath it away to the right and let them sit in the workspace for a while.  \n\nClick on the block you want to delete, and drag it back to the toolbox.\n\nFinally, put your other blocks back in place where they belong.\n"
        courseF_maze_ramp3_b: Use el botón de paso para recorrer el programa línea por línea. ¿Dónde está algo mal?
      drawings!_authored_hint:
        triangle_geometry_hint: 'Recuerda: un triángulo equilátero tiene tres lados, ¡con un giro de 60 grados entre cada uno!'
        repeat_pointer: Tienes que dibujar un lado y girar 3 veces... ¿qué bloque puedes usar para ejecutar las mismas instrucciones muchas veces?
        repeat_bottom_out: '¡Usa un bloque `repetir 3 veces`!'
      grade1_adventurer_loops10_authored_hint:
        grade1_adventurer_loops10_a: Necesitarás tres bucles `repetir` para resolver este puzzle.
      grade1_adventurer_loops2_authored_hint:
        grade1_adventurer_loops2_a: Try using a `repeat` block to collect your gold.
      grade1_adventurer_loops3_authored_hint:
        grade1_adventurer_loops3_a: '¿Algo no está bien? Prueba usando el botón de paso para descubrir dónde están las cosas mal.'
      grade1_adventurer_loops4_authored_hint:
        grade1_adventurer_loops4_a: Intenta usar más de un bucle para hacer el trabajo.
      grade1_adventurer_loops5_authored_hint:
        grade1_adventurer_loops5_a: Can't figure out where things start going wrong? Use the "Step" button to run through your program one block at a time.
      grade1_adventurer_loops6_authored_hint:
        grade1_adventurer_loops6_a: If you are having a hard time with the puzzle, try drawing it on paper to help you figure it out.
      grade1_adventurer_loops7_challenge_authored_hint:
        grade1_adventurer_loops7_challenge_a: 'Si no puede averiguar dónde colocar los bucles de repetición, prográmalo paso a paso y busca un patrón. '
        grade1_adventurer_loops7_challenge_b: '¿El código se siente un poco largo? Puede hacerlo mucho más corto moviendo dos de tus bucles `repetir` dentro de otro bucle.'
      grade1_adventurer_loops8_challenge_authored_hint:
        grade1_adventurer_loops8_challenge_a: Can you find a pattern in the steps?  Where can you use a repeat?
      grade1_adventurer_loops9_authored_hint:
        grade1_adventurer_loops9_a: '¿Esto parece demasiado difícil? Divídelo en 4 pequeños problemas para que se sienta más fácil.'
      grade1_artist_loops1_authored_hint:
        grade1_artist_loops1_a: Si quiere que el lazo se repita más de 4 veces, usted puede cambiar el número en la parte superior del bloque.
      grade1_artist_loops2_authored_hint:
        grade1_artist_loops2_a: Remember to use a `repeat` loop for better code!
      grade1_artist_loops3_authored_hint: [ ]
      grade1_artist_loops4_authored_hint:
        grade1_artist_loops4_a: Drag out a `repeat` loop, then put the other blocks inside of it. How many times do you need to repeat?
      grade1_artist_loops5_authored_hint: [ ]
      grade1_artist_loops6_authored_hint:
        grade1_artist_loops6_a: This challenge uses FOUR loops, one right after another!
        grade1_artist_loops6_b: |-
          Notice that every loop makes a stair pattern that travels in a different direction.
          
          ![](https://images.code.org/7d08d5514766c5c15074e90731991505-image-1466705649513.gif)
        grade1_artist_loops6_c: "The loops should do this:\n- Loop 1\n  - Right\n  - Down\n  \n- Loop 2\n  - Right\n  - Up\n\n- Loop 3\n  - Left\n  - Up\n\n- Loop 4\n  - Left\n  - Down"
      grade1_artist_loops7_authored_hint: [ ]
      grade1_artist_loops7a_authored_hint:
        artistLoopsK9_a: This challenge uses FOUR loops, one right after another!
        artistLoopsK9_b: |-
          Notice that every loop makes a stair pattern that travels in a different direction.
          
          ![](https://images.code.org/7d08d5514766c5c15074e90731991505-image-1466705649513.gif)
        artistLoopsK9_c: "The loops should do this:\n- Loop 1\n  - Right\n  - Down\n  \n- Loop 2\n  - Right\n  - Up\n\n- Loop 3\n  - Left\n  - Up\n\n- Loop 4\n  - Left\n  - Down"
      grade1_artist_loops7b_authored_hint:
        grade1_artist_loops7b_a: How many times should you repeat the pattern to make the ladder?
      grade1_artist_loops8_authored_hint: [ ]
      grade1_artist_loops9_authored_hint: [ ]
      grade1_artist_loopsFP_authored_hint: [ ]
      grade1_maze_sequence1_authored_hint:
        grade1_maze_sequence1_a: This program is missing one block. Can you figure out which one?
      grade1_maze_sequence10_authored_hint:
        grade1_maze_sequence10_a: If you're having trouble, try writing down the steps on a piece of paper first.
      grade1_maze_sequence2_authored_hint:
        grade1_maze_sequence2_a: One of the blocks is moving the bird in the wrong direction. Can you figure out which one and replace it with the correct block?
      grade1_maze_sequence3_authored_hint:
        grade1_maze_sequence3_a: Try adding one instruction at a time until you get to the pig.
      grade1_maze_sequence5_authored_hint:
        K2.0_sequence_5: Your final code should have three movement blocks.
      grade1_maze_sequence6_authored_hint:
        K2.0_sequence_6_a: There is 1 block that you need to add to move the bird to the pig.
      grade1_maze_sequence7_authored_hint:
        grade1_maze_sequence7a: Si estás atascado, intenta agregar un bloque a la vez hasta que resuelvas el acertijo.
      grade1_maze_sequence8_authored_hint:
        grade1_maze_sequence8_a: Stuck? Try tracing the bird's path with your finger.
        grade1_maze_sequence8_b: The extra blocks need to be added before the last ![](https://images.code.org/145dfc20c086bc8fc265de47f3cfe4b0-image-1467848177684.35.51 PM.png )
      grade1_maze_sequence9_authored_hint:
        grade1_maze_sequence9_a: If you're having trouble, try writing down the steps on a piece of paper first.
      grade1_maze_sequenceA_authored_hint:
        grade1_maze_sequence10_a: If you're having trouble, try writing down the steps on a piece of paper first.
      grade1_maze_sequenceB_authored_hint:
        grade1_maze_sequenceB_a: If you're having trouble, try writing down the steps on a piece of paper first.
      grade1_maze_sequenceC_authored_hint:
        grade1_maze_sequenceC_a: If you're having trouble, try writing down the steps on a piece of paper first.
      grade2_CaringForNewPet_0_authored_hint:
        grade2_CaringForNewPet_0: If the bird isn't getting to the pig, make sure all three of the blocks have been fully clicked together, then click "Run" again.
      grade2_CaringForNewPet_1_authored_hint:
        2-3_Maze_1_a: To use a `move forward` block, drag it from the toolbox out into the workspace and connect it to the `when run` block.
      grade2_CaringForNewPet_11_authored_hint: [ ]
      grade2_CaringForNewPet_2courseC_maze_programming3_authored_hint:
        courseC_maze_programming3_a: "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\nTo delete a block from the middle of your code, drag all of the blocks underneath it away to the right and let them sit in the workspace for a while.  \n\nClick on the block you want to delete, and drag it back to the toolbox.\n\nFinally, put your other blocks back in place where they belong.\n"
      grade2_CaringForNewPet_3_authored_hint:
        hint1: You can turn right or left from the bird's point of view. If you are facing right, turning right will make you point downwards.
        hint2: This path is a zig-zag. You need to move forward 3 times and turn 2 times.
        hint3: To follow the path, move forward and turn one way, then move again and turn the opposite way. Move forward one more time to reach the pig.
      grade2_CaringForNewPet_3D_authored_hint: [ ]
      grade2_CaringForNewPet_4_authored_hint:
        2-3_Maze_6_a: '¡Aquí tienes dos caminos para resolver el puzzle!'
      grade2_CaringForNewPet_5_authored_hint:
        grade2_CaringForNewPet_5_a: If you can't quite see what you need to do, try saying the steps that your bird will take out loud one-by-one and see if they match the blocks in the workspace.
      grade2_CaringForNewPet_6_authored_hint:
        grade2_CaringForNewPet_6_a: You don't have to code the whole solution at once!  Try running the code as you go to make sure it works at each step.
      grade2_CaringForNewPet_7D_authored_hint:
        grade2_CaringForNewPet_7D_a: Don't forget to use the "Step" button to go through block by block and look for errors.
      grade2_MakeDogTag_1_authored_hint:
        2-3_Artist_1_new_a: Si utiliza el bloque para hacerme 'avanzar 100 píxeles', sacaré una línea automáticamente.
        2-3_Artist_1_new_b: '¿Tienes problemas girando la esquina? Usa el bloque `girar a la derecha 90 grados`.'
      grade2_MakeDogTag_2_authored_hint:
        2-3_Artist_2_new_a: To create this window, just draw a square with 100 pixel sides.
      grade2_MakeDogTag_3_authored_hint:
        2-3_Artist_4_a: To finish the rocket, just draw the triangle on top!
      grade2_MakeDogTag_4_authored_hint: [ ]
      grade2_MakeDogTag_5_authored_hint:
        grade2_MakeDogTag_5a: The artist is already facing the correct way to draw his first line.
        grade2_MakeDogTag_5b: This diamond is really just a square that's standing on its corner.
        grade2_MakeDogTag_5c: Since this diamond is also a square, be sure to turn 90 degrees at the corners.
      grade2_MakeDogTag_6_authored_hint:
        grade2_MakeDogTag_6a: Every angle is either 45 or 90 degrees.
        grade2_MakeDogTag_6b: "Does it work at the first step?  \nHow about the second?  \nWhere does it go wrong?"
      grade2_MakeDogTag_7_authored_hint:
        2-3_Artist_11_a: The exterior angles on this triangle are 120 degrees each.
      grade2_MakeDogTag_9_authored_hint:
        2-3_Artist_Loops_New_11_a: |-
          Remember that the code from the last puzzle was:
          
          ![](https://images.code.org/e5c7492f509dd41efe2888c7e7895c28-image-1461177002636.29.02.png)
        2-3_Artist_Loops_New_11_b: Tu nuevo giro debería ir al **final** del código dentro del bucle.
      grade2_MakeDogTag_BFP_authored_hint: [ ]
      grade2_PuppyLoops_10_authored_hint:
        2-3_Artist_Debugging_8_a: |-
          ¿Cuántas veces se repitió mi forma?
          
          ¿Cuantas veces *debería* repetirse la forma?
          
          ¿Donde se puede cambiar eso en el programa?
      grade2_PuppyLoops_3_authored_hint:
        hint1: This puzzle is very similar to the last one.
        hint2: Use a `repeat 5 times` block to create the loop.
        hint3: Place a `move forward` block inside the `repeat block`.
      grade2_PuppyLoops_5_authored_hint:
        hint1: The best solution uses two `move forward` commands and one loop.
      grade2_PuppyLoops_6_authored_hint:
        2-3_Maze_16_a: Si el patrón es difícil de ver, intenta programarlo todo primero y ve qué cosas se repiten una y otra vez antes de colocar los bucles.
        2-3_Maze_16_b: "Para poner muchos bloques dentro de un bucle 'repetir', simplemente arrastra un bucle hacia el espacio de trabajo, luego arrastra todos los bloques desde el programa de inicio dentro de él!"
      grade2_PuppyLoops_7_authored_hint:
        2-3_Maze_Loops_17_a: Si el patrón es difícil de ver, intenta programarlo todo primero y ve qué cosas se repiten una y otra vez antes de colocar los bucles.
        2-3_Maze_Loops_17_b: '¿Se borró el código de inicio? ¡Haga clic en "volver a empezar" para recuperarlo!'
      grade2_PuppyLoops_8_authored_hint:
        2-3_Artist_Debugging_2_a: 'Consejo: Cada barba es de 75 píxeles de largo.'
      grade2_PuppyLoops_9_authored_hint:
        2-3_Artist_Debugging_7_a: '¿Qué pasa si haces que el artista se mueva o salte hacia atrás después de que dibuje la primera línea?'
      grade2_collector_2_authored_hint:
        hint1: You can use four `move forward` blocks or use the `repeat 4 times` block to make your program shorter.
      grade2_collector_A_authored_hint: [ ]
      grade2_collector_A_2018_authored_hint: [ ]
      grade2_maze_debuggingFP_authored_hint: [ ]
      grade2_maze_intro4_authored_hint:
        hint_1: Connect a "move forward" block to the bottom of the program.
      grade2_playlab_project_6_authored_hint:
        idea1: |-
          *Need an idea?*
          
          **Who's there?** Make characters appear with random images, so no one knows who's showing up next.
          
          ![](https://images.code.org/a56e03479801995d93ad5a4e4384a79e-image-1475340154498.gif)
        idea2: |-
          *Need an idea?*
          
          **Going on an Adventure** - Change the background, then have the characters talk about where they are now.
          
          ![](https://images.code.org/010c4d919f841d6049caf9211ab65ccc-image-1475340583052.gif)
        idea3: |-
          *Need an idea?*
          
          **Pinball** - Make one character move using the arrow keys (use `when up arrow`, `when down arrow` blocks), then play random sounds when it collides with other characters on the screen.
      grade2_puppy_loops2_authored_hint:
        hint1: You can solve this puzzle with just three blocks, including `when run`.
        hint2: Try putting the `move forward` block inside of a `repeat` block to create a loop.
        hint3: You need to repeat the `move forward` command 5 times to solve this puzzle.
      grade2_puppy_loops3_authored_hint:
        hint1: This puzzle is very similar to the last one.
        hint2: Use a `repeat 5 times` block to create the loop.
        hint3: Place a `move forward` block inside the `repeat block`.
      grade2_puppy_loops4_authored_hint:
        hint1: Not all command blocks should be repeated.
        hint2: Use two `repeat` blocks set to different numbers.
        hint3: "`Turn right` once between the two loops."
      grade2_puppy_loops5_authored_hint:
        hint1: The best solution uses two `move forward` commands and one loop.
      grade2_puppy_loops6_authored_hint:
        2-3_Maze_16_a: Si el patrón es difícil de ver, intenta programarlo todo primero y ve qué cosas se repiten una y otra vez antes de colocar los bucles.
        2-3_Maze_16_b: "Para poner muchos bloques dentro de un bucle 'repetir', simplemente arrastra un bucle hacia el espacio de trabajo, luego arrastra todos los bloques desde el programa de inicio dentro de él!"
      grade2_puppy_loops7_authored_hint:
        2-3_Maze_Loops_17_a: Si el patrón es difícil de ver, intenta programarlo todo primero y ve qué cosas se repiten una y otra vez antes de colocar los bucles.
      grade3_ConditionalsElse_4_authored_hint:
        remember_quantum: "** Recuerda: ** Este puzzle cambia cada vez que se ejecuta.\n\nQuerras usar un bloque condicional (`Si` o` Si /si no`) para resolver el desafío."
      grade3_ConditionalsElse_5_authored_hint:
        remember_quantum: "** Recuerda: ** Este puzzle cambia cada vez que se ejecuta.\n\nQuerras usar un bloque condicional (`Si` o` Si /si no`) para resolver el desafío."
      grade3_ConditionalsElse_TeacherIDo_authored_hint:
        remember_quantum: "** Recuerda: ** Este puzzle cambia cada vez que se ejecuta.\n\nQuerras usar un bloque condicional (`Si` o` Si /si no`) para resolver el desafío."
      grade3_Conditionals_10 BAD_authored_hint:
        4-5_Bee_Nested_Loops_Rows_a: Intente tratar este puzzle como un rectángulo largo donde la abeja necesita avanzar, luego gire a la izquierda varias veces para completar el camino.
      grade3_Conditionals_11_authored_hint:
        2-3_Bee_Conditionals_14_a: '¿Teniendo un tiempo difícil averiguar cómo bajar los bloques?  ¡Intentar tratar la flor roja exactamente igual que una flor morada!'
        2-3_Bee_Conditionals_14_b: '¿Si la flor roja fuera púrpura, podría usted averiguar cómo utilizar un bucle extra ''repetición'' para reducir el código?'
        2-3_Bee_Conditionals_14_c: "Try breaking this up into two separate chunks:  \n\n![](https://images.code.org/670ac0889a8f523865ff4099b4c54844-image-1463445460440.36.42.png)\n\n1) Gather nectar 3 times\n  - Move forward 5 times\n  - Check to see if nectar, if so: get it\n  - Turn left\n  \n2) Make honey \n  - Move forward one time\n  - Make two honey"
      grade3_Conditionals_12_authored_hint:
        2-3_Bee_Conditionals_15_a: 'Recuerde: Flores de color púrpura sólo néctar ya sea 0 o 1 y puede cambiar cada vez que se ejecuta el programa.'
      grade3_Conditionals_2_authored_hint:
        2-3_Bee_Conditionals_3_a: El código será acortado si usa un bucle cada vez que avanza, otro bucle para recolectar néctar y otro para hacer miel.
      grade3_Conditionals_4_authored_hint:
        2-3_Bee_Conditionals_6_a: 'Recuerde:! las flores púrpuras cambian entre 0 y 1 de néctar cuando ejecuta su programa!'
      grade3_Conditionals_TeacherIDo_authored_hint:
        2-3_Bee_Conditionals_6_a: 'Recuerde:! las flores púrpuras cambian entre 0 y 1 de néctar cuando ejecuta su programa!'
      grade3_Debugging_1_authored_hint:
        2-3_Bee_Debugging_1_a: Una vez que encuentras y arreglas el bloque incorrecto, ¿ves algún patrón que pueda hacerse más simple usando un ciclo `repetir`?
      grade3_Debugging_10_authored_hint:
        grade3_Debugging_10_a: |-
          Start by looking at just the first loop.
          
          What does it do?
          
          What is it supposed to do?
          
          What does that tell you?
        grade3_Debugging_10_b: Once you have the first loop the way you want it, what is left over in your code?
        grade3_Debugging_10_c: |-
          Try wrapping the leftover loop around the rest of your completed code.  Does is work now?
          
          If not, what is still going wrong?
      grade3_Debugging_11_authored_hint:
        grade3_Debugging_11_a: |-
          Try running through the code using the "Step" button.  Is everything good at the first step?
          
          How about the second?
          
          Where do things go wrong?
        grade3_Debugging_11_b: It looks like all of the right steps are here, you just need more of them.  How can you repeat the `get nectar` and `make honey` actions multiple times?
      grade3_Debugging_2_authored_hint:
        grade3_Debugging_2_a: |-
          Use the "Step" button to see if everything is right at the first step.
          
          How about the second?
          
          Where does it go wrong?
        grade3_Debugging_2_b: Do you see any patterns that could be made more simple using a `repeat` loop?
      grade3_Debugging_3_authored_hint:
        grade3_Debugging_3_a: |-
          Use the "Step" button to see if everything is right at the first step.
          
          How about the second?
          
          Where does it go wrong?
        grade3_Debugging_3_b: Do you see a pattern?  Try using nested loops to solve this puzzle.
      grade3_Debugging_4_authored_hint:
        grade3_Debugging_4_a: Is there any place where the bee does something that doesn't make sense? What happens when you change those blocks?
        grade3_Debugging_4_b: Try simplifying the code using nested loops.
      grade3_Debugging_8_authored_hint:
        grade3_Debugging_8_a: "Try using the debugging process a couple of times in a row. \n\nWhat causes the first problem?\n\nOnce that problem is fixed, what goes wrong?"
        grade3_Debugging_8_b: "If you're having a hard time figuring out how to make the stair step pattern, try tracing it with your finger and saying the commands out loud. \n\nDon't forget to point out the direction of the turns!"
      grade3_Debugging_TeacherIDo_authored_hint:
        2-3_Bee_Debugging_4_a: '¿Hay algún lugar donde la abeja haga algo que no tiene sentido? ¿Qué pasa cuando cambias ese bloque?'
      grade3_Loops_10_authored_hint:
        2-3_Bee_Loops_4_a: Deberías terminar con cinco bloques dentro de tu bucle.
      grade3_Loops_11_authored_hint:
        2-3_Bee_Loops_5_a: Si no puedes detectar los bloques para colocar `repetir` inmediatamente, comienza por codificar cada movimiento y busca un patrón.
      grade3_Loops_12_authored_hint:
        2-3_Bee_Loops_6_a: Si no puedes decir qué debería ir en el bucle 'repetir', intenta arrastrar los bloques uno por uno y ve si puedes encontrar un patrón.
        2-3_Bee_Loops_6_b: Aquí deberían haber 6 bloques dentro del bucle 'repetir' cuando hayas terminado.
      grade3_Loops_4_authored_hint:
        2-3_Bee_Loops_3B_a: Necesitas dos bucles `repetir` diferentes, uno después del otro.
      grade3_Loops_5_authored_hint:
        2-3_Bee_Loops_7_a: La primera acción será un giro, en lugar de un movimiento.
        2-3_Bee_Loops_7_b: 'Si no puedes imaginar el bucle desde el principio, intenta programarlo a lo largo del camino, luego busca un patrón.  '
      grade3_Loops_6_authored_hint:
        2-3_Bee_Loops_4A_a: La primera acción será un giro, en lugar de un movimiento.
        2-3_Bee_Loops_4A_b: La última parte del programa puede terminarse escribiendo código al final de su programa fuera de su bucle.
        2-3_Bee_Loops_4A_c: Si aún no puedes detectar los bucles, intenta codificarlo primero, luego ve lo que puedes combinar en un bucle 'repetir' al final.
      grade3_Loops_8_authored_hint:
        2-3_Bee_Loops_2_a: Deberías terminar con cuatro bloques dentro de tu bucle.
      grade3_Loops_9_authored_hint:
        2-3_Bee_Loops_3_a: Deberías tener 6 bloques dentro de tu bucle.
      grade3_RunningFarm_1_authored_hint:
        grade3_RunningFarm_1_a: You will need to look for corn 5 times, using a repeat loop.
        grade3_RunningFarm_1_b: Make sure to use an `if at corn` block or you might try to pick something that's not there!
      grade3_RunningFarm_10_authored_hint:
        grade3_RunningFarm_10_a: This puzzle uses almost the exact same code as the last level, except you only need to repeat 4 times.
      grade3_RunningFarm_11a_authored_hint:
        grade3_RunningFarm_11a_a: You shouldn't need the `while path ahead` loop this time.
      grade3_RunningFarm_2_authored_hint:
        grade3_RunningFarm_2_a: 'The best way to do this is to nest `if` statements by placing one inside of the other.  '
        grade3_RunningFarm_2_b: For this puzzle, you should have one `if/else` statement and one plain `if` statement.
      grade3_RunningFarm_3_authored_hint:
        grade3_RunningFarm_3_a: |-
          To get all of the items, try nesting `if` statements three deep.
          
          This means you should put one `if` statement inside of another, then put a third `if` statement inside the second one.
        grade3_RunningFarm_3_b: For this puzzle, you should have two `if/else` statements and one plain `if` statement.
      grade3_RunningFarm_4_authored_hint:
        grade3_RunningFarm_4_a: |-
          No one knows how many heads of lettuce will grow from each sprout.
          
          Use a `while there is lettuce` loop to keep picking until each piece has been gathered.
      grade3_RunningFarm_5_authored_hint:
        grade3_RunningFarm_5_a: You will need to check for each type of crop that the farmer can pick.  Try using two `if/else` statements and one  `if` block.
      grade3_RunningFarm_6_authored_hint:
        grade3_RunningFarm_6_a: Use a `while path ahead` loop to move the farmer down each piece of the spiral.
        grade3_RunningFarm_6_b: You only need to check for corn during most of the harvest.  Just pick one pumpkin at the very end of your program.
      grade3_RunningFarm_7_authored_hint:
        grade3_RunningFarm_7_a: |-
          Notice that the easiest path to get to all of the crops is still a spiral.
          
          ![](https://images.code.org/ba8b8c624f21ade9ac823b045085c435-image-1479364378437.png)
        grade3_RunningFarm_7_b: Try using `when path ahead` to keep the farmer moving the right number of steps.
        grade3_RunningFarm_7_c: 'Use nested `if` statements and `while there is` loops to check each space for corn and lettuce, then pick only a single pumpkin at the end. '
      grade3_bee_Conditionals_new4_authored_hint:
        grade3_bee_Conditionals_new4_a: Don't forget that you can use loops for shorter code!
      grade3_bee_conditionals_new1a_authored_hint:
        grade3_bee_conditionals_new1a_a: Be sure to use an `if` statement to check each space to see if it has a flower or nothing.
      grade3_bee_conditionals_new2a_authored_hint:
        grade3_bee_conditionals_new2a_a: You can still treat every space as if there is a cloud over it, even though you can see the whole path.
        grade3_bee_conditionals_new2a_b: 'Use an `if` statement inside your loop to check each space. '
      grade3_bee_conditionals_new3a_authored_hint:
        grade3_bee_conditionals_new3a_a: In this puzzle, you know that each square has either a flower or a honeycomb.  That means you can repeat your `if/else` conditional at each square.
      grade3_bee_conditionals_quantum1_authored_hint:
        grade3_bee_conditionals_quantum1_a: You will need to use an `if` block to check to see if there is a flower beneath the cloud before you try to get nectar.
      grade3_bee_conditionals_quantum2_authored_hint:
        grade3_bee_conditionals_quantum2_a: Sometimes a flower will be there, sometimes it won't.  If you want your code to run in both cases, make sure to use an `if` statement.
      grade3_bee_conditionals_quantum3_authored_hint:
        grade3_bee_conditionals_quantum3: Make sure to use an `if` statement to check for honeycomb beneath each cloud.
      grade3_bee_conditionals_quantum4_authored_hint:
        remember_quantum: "**Remember:** This puzzle changes each time it's run.  \n\nYou'll want to use a conditional block (`if/else`) to solve the challenge."
      grade3_bee_conditionals_quantum5_authored_hint:
        remember_quantum: "** Recuerda: ** Este puzzle cambia cada vez que se ejecuta.\n\nQuerras usar un bloque condicional (`Si` o` Si /si no`) para resolver el desafío."
        grade3_bee_conditionals_quantum5_a: This puzzle is tricky, because you can't check blank squares, nectar *and* honey with a single conditional.
      grade3_maze_loops1_authored_hint:
        grade3_maze_loops1_a: Try using the "Step" button to find errors.
      grade3_maze_loops2_authored_hint:
        grade3_maze_loops2_a: |-
          Try using this path through the maze.
          
          ![](https://images.code.org/6a8b4b97a8eef813d8a827b0b7b2d36b-image-1480446509692.05.22.png)
        grade3_maze_loops2_b: Si el patrón es difícil de ver, intenta programarlo todo primero y ve qué cosas se repiten una y otra vez antes de colocar los bucles.
        grade3_maze_loops2_c: Try using one `repeat` loop inside of another to cut down on the amount of code you need.
      grade3_maze_loops2a_authored_hint:
        grade3_maze_loops2a_a: To solve this puzzle, you will need to "nest" one `repeat` loop inside of another `repeat` loop.
      grade3_maze_loops3_authored_hint:
        2-3_Maze_Loops_19_a: If you are stuck, try writing out the code out on paper without loops first and look for patterns.
        2-3_Maze_Loops_19_b: Nesting `repeat` loops can help decrease the number of blocks used.
        2-3_Maze_Loops_19_c: It will take two sets of nested `repeat` loops to solve this puzzle.
      grade3_maze_loops4_authored_hint:
        2-3_Maze_Loops_20_a: Look for a stair-step pattern in this maze to find where a nested loop can be used.
      grade3_maze_loops5_authored_hint:
        2-3_Maze_Loops_21_a: Si tienes problemas para encontrar el patrón de escalera, intenta cubrir los caminos bloqueados con tu dedo.
      grade3_robotFarmer_ConditionalsIntro_10a_authored_hint: [ ]
      grade3_robotFarmer_ConditionalsIntro_11a_authored_hint: [ ]
      grade3_robotFarmer_ConditionalsIntro_5_authored_hint:
        grade3_robotFarmer_ConditionalsIntro_5a: Try nesting a `while` loop inside of a `repeat` loop.
      grade3_robotFarmer_ConditionalsIntro_7_authored_hint:
        grade3_robotFarmer_ConditionalsIntro_7_a: Make sure you're using the `while` loop to figure out how many times to fill each hole.
        grade3_robotFarmer_ConditionalsIntro_7_b: Notice that the farmer needs to move forward and down several times in a stair-step pattern.
      grade3_robotFarmer_ConditionalsIntro_8_authored_hint:
        grade3_robotFarmer_ConditionalsIntro_8_a: The `while path ahead` block lets you keep going, even if you don't know how many squares are in a path.
      grade3_robotFarmer_ConditionalsIntro_9_authored_hint:
        grade3_robotFarmer_ConditionalsIntro_9_a: You are going to need to use more than one `while` loop.
        grade3_robotFarmer_ConditionalsIntro_9_b: Every hole is at the end of a path, so use `while path ahead` before using `while there is a hole`.
        grade3_robotFarmer_ConditionalsIntro_9_c: Notice that you need to repeat the `while path ahead`, `while there is a hole` code six times.
      grade4_arist_nested_loop_polygons1_authored_hint:
        4-5_Nested_Loops_7_a: |-
          Este diseño se repetirá 10 veces terminando en 360 grados.
          
          ** 360/10 =? **
      grade4_arist_nested_loop_polygons2_authored_hint:
        4-5_Nested_Loops_8_a: |-
          Tienes que repetir el bucle 6 veces terminando en 360 grados.
          
          ** 360/6 =? **
      grade4_arist_nested_loop_triangles2_authored_hint: [ ]
      grade4_arist_nested_loop_triangles3_authored_hint:
        4-5_Nested_Loops_6_a: |-
          No olvides hacer un giro después de tu bucle interno.
          
          Estarás formando un bucle de 6 triángulos en 360 grados.
          
          ** 360/6 =? **
      grade4_arist_nested_loop_triangles6_authored_hint:
        4-5_Nested_Loops_12_a: "**360 / 36 = ?**"
      grade4_artist_functions1_authored_hint:
        2-3_Artist_Functions_1_a: Los cuadrados tienen 100 píxeles de lado cada uno, lo que significa que te habrás movido 175 píxeles hacia adelante antes de dibijar el segundo cuadrado.
        2-3_Artist_Functions_1_b: Está bien dibujar líneas superpuestas para realizar los anteojos.
      grade4_artist_functions2_authored_hint:
        2-3_Artist_Functions_2_a: |-
          Tu programa deberá:
          - Usar función
          - Mover hacia adelante 100 + 75 píxeles
          - Usar función
      grade4_artist_functions2a_authored_hint:
        grade4_artist_functions2a_a: To get around using multiple `move forward` blocks, create a `draw triangle` function and call that multiple times.
      grade4_artist_functions3a_authored_hint:
        grade4_artist_functions2a_a: To get around using multiple `move forward` blocks, create a `draw triangle` function and call that multiple times.
      grade4_artist_functions3b_authored_hint:
        grade4_artist_functions2a_a: To get around using multiple `move forward` blocks, create a `draw hexagon` function and call that multiple times.
      grade4_artist_functionsChallenge0_authored_hint:
        grade4_artist_functionsChallenge0_a: |-
          Start by making a function for a square, then try making a function for a line of squares.
          
          How would you use the `draw a line of squares` function to make this image?
        grade4_artist_functionsChallenge0_b: After your first line of squares, you need to move the artist down and back before you start your second line of squares.
        grade4_artist_functionsChallenge0_c: You should move the artist back a different number of pixels for even lines than for odd ones.
      grade4_artist_functions_challenge_authored_hint:
        Course_4_SCF_1_a: Cada hexágono tiene 40 lados de píxeles.
        Course_4_SCF_1_b: Hay un salto de 120 píxeles entre cada hexágono en cada línea horizontal.
        Course_4_SCF_1_c: "Antes de dibujar la segunda fila de hexágonos, debe girar a la derecha 60 grados y avanzar 40 píxeles.\n\nUna vez que estás en la ubicación vertical correcta, debes volver a girar tu artista y retroceder 320 píxeles hacia atrás."
        Course_4_SCF_1_d: "Antes de dibujar la tercera fila de hexágonos, debes girar a la derecha 60 grados y avanzar 40 píxeles.\n\nUna vez que estás en la ubicación vertical correcta, debes volver a girar tu artista y retroceder 440 píxeles (120 píxeles más que tu función de desplazamiento 'hacia abajo / adelante'). "
        Course_4_SCF_1_e: |-
          **Solution:**
          
          ![Solution Blocks](https://images.code.org/d64a0e22c1db1d98c35b243bca6460ab-image-1469727090121.png)
      grade4_artist_functions_challenge2_authored_hint:
        Course_4_SCF_1_a: Cada hexágono tiene 40 lados de píxeles.
        Course_4_SCF_1_b: Hay un salto de 120 píxeles entre cada hexágono en cada línea horizontal.
        Course_4_SCF_1_c: "Antes de dibujar la segunda fila de hexágonos, debe girar a la derecha 60 grados y avanzar 40 píxeles.\n\nUna vez que estás en la ubicación vertical correcta, debes volver a girar tu artista y retroceder 320 píxeles hacia atrás."
        Course_4_SCF_1_d: "Antes de dibujar la tercera fila de hexágonos, debes girar a la derecha 60 grados y avanzar 40 píxeles.\n\nUna vez que estás en la ubicación vertical correcta, debes volver a girar tu artista y retroceder 440 píxeles (120 píxeles más que tu función de desplazamiento 'hacia abajo / adelante'). "
        Course_4_SCF_1_e: |-
          **Solution:**
          
          ![Solution Blocks](https://images.code.org/d64a0e22c1db1d98c35b243bca6460ab-image-1469727090121.png)
      grade4_artist_functions_stars0_authored_hint:
        grade4_artist_functions_stars0_a: |-
          To solve this puzzle, you just need to add a  loop that repeats the starter code 8 times.
          
          If you can't remember what the starter code was, click "start over" in the upper right corner of the workspace.
      grade4_artist_functions_stars1_authored_hint:
        grade4_artist_functions_stars1_a: Try using a function!
      grade4_artist_functions_stars2_authored_hint:
        grade4_artist_functions_stars2_a: Don't give up!  Remember what you have been learning.
        grade4_artist_functions_stars2_b: Functions make it easy to call saved code at any time, not just from inside a loop!
      grade4_artist_functions_stars3_authored_hint:
        hint1: Don't give up!
      grade4_artist_functions_windows0_authored_hint:
        grade4_artist_functions_windows0_a: Focus only on making one window for now.  We'll create a function for it in the next puzzle.
        grade4_artist_functions_windows0_b: Try using nested loops, where the inner loop makes the square and the outer loop rotates the square four times.
      grade4_artist_functions_windows2_authored_hint:
        grade4_artist_functions_windows2_a: Try creating your function first then adding in windows one at a time.
        grade4_artist_functions_windows2_b: You shouldn't need to add any extra repeat loops.  Just jump the artist 100 pixels forward for each top window, and 150 pixels down to get the bottom windows.
      grade4_artist_nestedLoops_challenge2_authored_hint:
        Course_4_Artist_11_a: 'El semi-hexágono tiene una ** longitud de 30 ** y gira a la derecha por ** 60 grados **.  '
        Course_4_Artist_11_b: 'El triángulo 2/3 tiene una ** longitud de 80 ** y gira a la derecha por ** 120 grados **. '
      grade4_artist_nested_loop_polygons1_authored_hint:
        4-5_Nested_Loops_7_a: |-
          Este diseño se repetirá 10 veces terminando en 360 grados.
          
          ** 360/10 =? **
      grade4_artist_nested_loop_polygons2_authored_hint:
        4-5_Nested_Loops_8_a: |-
          Tienes que repetir el bucle 6 veces terminando en 360 grados.
          
          ** 360/6 =? **
      grade4_artist_nested_loop_triangles2_authored_hint: [ ]
      grade4_artist_nested_loop_triangles3_authored_hint:
        4-5_Nested_Loops_6_a: |-
          Don't forget to make a turn after your inner loop.
          
          You'll be looping 6 triangles over 360 degrees.
          
          **6 x ? = 360**
      grade4_artist_nested_loop_triangles6_authored_hint:
        4-5_Nested_Loops_12_a: "**360 / 36 = ?**"
      grade4_bee_conditionals_new1a_authored_hint:
        grade4_bee_conditionals_new1a_a: An `if` block will help you out in this puzzle.
      grade4_bee_conditionals_new2_authored_hint:
        grade4_bee_conditionals_new2_a: 'The flowers follow a rectangular path.  You can trace that rectangle using `while path ahead` even with a different number of squares per side. '
        grade4_bee_conditionals_new2_b: You can check every square for a flower using the `if` block, even if you already know there's not one there.
      grade4_bee_conditionals_new3b_authored_hint:
        grade4_bee_conditionals_new3b_a: An `if/else` statement could really help you out here.
      grade4_bee_conditionals_quantum4_authored_hint:
        remember_quantum: "** Recuerda: ** Este puzzle cambia cada vez que se ejecuta.\n\nQuerras usar un bloque condicional (`Si` o` Si /si no`) para resolver el desafío."
      grade4_bee_conditionals_quantum5_authored_hint:
        remember_quantum: "** Recuerda: ** Este puzzle cambia cada vez que se ejecuta.\n\nQuerras usar un bloque condicional (`Si` o` Si /si no`) para resolver el desafío."
      grade4_bee_functions1_authored_hint:
        grade4_bee_functions1_a: There is more than one right answer to this puzzle.
      grade4_bee_functions10_authored_hint:
        grade4_bee_functions10_a: You can use the exact same function for this puzzle as you did in the last puzzle.  All you need to do is create a function that collects all of the nectar when you get to each flower.
      grade4_bee_functions2_authored_hint:
        grade4_bee_functions2_a: The function has been written for you, but you will need to call it at each flower.
      grade4_bee_functions3_authored_hint:
        grade4_bee_functions3_a: 'Your function for this puzzle only needs to collect nectar, it shouldn''t have any `move forward` or `turn` blocks in it. '
      grade4_bee_functions4_authored_hint:
        grade4_bee_functions4_a: Your function will travel down the side paths and return the bee back to the main road.  You don't need to add that part to your program.
      grade4_bee_functions6_authored_hint:
        grade4_bee_functions6_a: Edit the function so that it solves the puzzle without having to change the main program.
        grade4_bee_functions6_b: "Your function should make the bee: \n- turn\n- move forward\n- collect all of the nectar\n- turn around\n- move back to the main path\n- turn back to the direction that the bee started from"
      grade4_bee_functions7_authored_hint:
        2-3_Bee_Functions_8_a: "Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco\nAgrega algunos bloques, luego pruébalo. Agrega más, luego intenta de nuevo. ¡Pronto, lo lograras!\n![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)"
      grade4_bee_functions8_authored_hint:
        2-3_Bee_Functions_8_a: "Si el rompecabezas parece desafiante, intenta construir tu función de poco a poco.\nAgregue algunos bloques, luego pruébelo. Agrega más, luego intenta de nuevo. ¡Pronto, llegarás allí!"
        2-3_Bee_Functions_8_b: |-
          Recuerda construir tu código dentro del bloque de función verde.
          ![](https://images.code.org/8fe1fae5caf4ede3a9c9bd9f26940cde-image-1467996837459.gif)
        2-3_Bee_Functions_8_c: This function should turn the bee to head him down the path, collect the nectar, make the honey, then turn the bee around and bring him back.
      grade4_bee_functions9_authored_hint:
        grade4_bee_functions9_a: Your function will only need to collect nectar... but this time, you will need to use a `while` loop instead of a `repeat` loop.
        grade4_bee_functions9_b: Use `while nectar > 0` to make sure you get all of the nectar.
      grade4_bee_nestedLoops1_authored_hint:
        grade4_bee_nestedLoops1_a: If you don't understand how to use nested loops here, try writing out the instructions step by step on a piece of paper.  Circle the patterns that you see.
      grade4_bee_nestedLoops2_authored_hint:
        grade4_bee_nestedLoops2_a: You will need to repeat `get nectar` inside of another `repeat` that also has the `move forward` block inside of it.
        grade4_bee_nestedLoops2_b: You will need to use all three of the available `repeat` blocks to solve this puzzle.
        grade4_bee_nestedLoops2_c: |-
          Nest your blocks three deep, like this:
          
          - repeat 3
          - repeat 3
          - move forward
          - repeat 12
          - get nectar
          - turn right
      grade4_bee_nestedLoops2a_authored_hint:
        grade4_bee_nestedLoops2a_a: Try using nested `repeat` loops to solve this puzzle.
      grade4_bee_nestedLoops4_authored_hint:
        grade4_bee_nestedLoops4_a: Try building your code line by line and see if you can spot the places where a repeat will make the code shorter!
        grade4_bee_nestedLoops4_b: |-
          You will need a nested loop to move forward and get nectar, but only a single loop to collect honey at the end.
          
          Altogether, you should be using 3 loops.
      grade4_bee_nestedLoops5_authored_hint:
        grade4_bee_nestedLoops5_a: You will need 4 repeat blocks!
      grade4_review_artist1_authored_hint:
        2-3_Artist_1_new_a: Si utiliza el bloque para hacerme 'avanzar 100 píxeles', sacaré una línea automáticamente.
        2-3_Artist_1_new_b: '¿Tienes problemas girando la esquina? Usa el bloque `girar a la derecha 90 grados`.'
      grade4_review_artist2_authored_hint:
        2-3_Artist_6_a: 'Para hacer esos pequeños ángulos, tienes que girar *más lejos* cada vez que hecho con la Plaza.   '
        2-3_Artist_6_b: Como ya estoy mirando hacia la derecha, es más fácil empezar por avanzar, y luego hacer vueltas a la izquierda para crear el triángulo.
        2-3_Artist_6_c: Cada lado del triángulo es de la misma longitud que cada lado de la Plaza... ¡100 píxeles!
      grade4_review_bee1_authored_hint:
        2-3_Bee_Loops_3B_a: Necesitas dos bucles `repetir` diferentes, uno después del otro.
      grade4_review_bee2_authored_hint:
        2-3_Bee_Loops_3_a: Deberías tener 6 bloques dentro de tu bucle.
      grade4_review_bee3_authored_hint:
        2-3_Bee_Loops_4_a: Deberías terminar con cinco bloques dentro de tu bucle.
      grade5_artist_binary10_authored_hint:
        Course_4_Artist_Binary_Free_Play_2b_a: Este código usa dos `bucle para`. Uno cuenta de 1 a 8, el otro cuenta de 8 a 1.
        Course_4_Artist_Binary_Free_Play_2b_b: Cada `bucle contar` tiene tres repeticiones. El primero dibuja el conjunto más a la izquierda de 1s, el segundo dibuja los 0s en el medio y el tercero dibuja los 1s a la derecha.
        Course_4_Artist_Binary_Free_Play_2b_c: En cada repetición necesitas `contador` para 1s y` 16- (contador 2x) `para 0s.
        Course_4_Artist_Binary_Free_Play_2b_d: |-
          **Solution:**
          ![solution](https://images.code.org/866a92e042a546de3afcf462a8b5c695-image-1444438735003.58.28.png)
      grade5_artist_for_loops1_authored_hint:
        grade5_artist_for_loops1_a: |-
          If you use this `for` loop, it will run just like a `repeat 3 times` loop.
          
          ![](https://images.code.org/585d2e24f3021ac2561aec6e96dde430-image-1475906135993.54.11.png)
      grade5_artist_for_loops10_authored_hint:
        Course_4_Artist_For_Loops_Challenge_a: El polígono más grande tiene 19 lados.
        Course_4_Artist_For_Loops_Challenge_b: Cada polígono está incompleto, con un lado menos de lo que debería tener.
      grade5_artist_for_loops1b_authored_hint:
        grade5_artist_for_loops1b_a: |-
          Can you draw something like this:
          
          ![](https://images.code.org/80ae9ab3e449db1ed4e13c86239f7617-image-1475906794954.06.12.png)
      grade5_artist_for_loops2_authored_hint:
        grade5_artist_for_loops2_a: |-
          Use `counter` for the length of your triangles inside your `repeat` loop.
          
          ![](https://images.code.org/5e9465321a0b7a4d791848a79f3e6715-image-1475908305872.31.26.png)
      grade5_artist_for_loops3_authored_hint:
        Course_4_Artist_For_Loops_3_a: |-
          To have the `for` loop drive your movement, make sure that you're using `counter` as your distance in the `move forward` block.
          
          ![](https://images.code.org/15e87fc7fe408cbf1b63e0e8e69b7ffe-image-1475908502078.31.26.png)
      grade5_artist_for_loops4_authored_hint:
        Course_4_Artist_For_Loops_4_a: "** ¿Cuál es el número más pequeño que necesitará?\n¿Cuál es el número más grande?\n¿Qué tan grande es el aumento en cada ocasión? **\n\nEsas son las preguntas que debe realizar para completar los espacios en blanco del ciclo `para`."
      grade5_artist_for_loops5_authored_hint:
        grade5_artist_for_loops5_a: You don't need the traditional repeat loop when making this spiral!
      grade5_artist_for_loops7_authored_hint:
        grade5_artist_for_loops7_a: The pen is thinner in this puzzle. You will need to set it to `1` before you start.
        grade5_artist_for_loops7_b: Notice that this spiral turns right instead of left!
      grade5_artist_for_loops7a_authored_hint: [ ]
      grade5_artist_for_loops7b_authored_hint: [ ]
      grade5_artist_for_loops8_authored_hint:
        Course_4_Artist_For_Loops_11_a: "¡El ángulo de giro cambiará con cada forma!\n\nUse el bloque matemático para ingresar 360 dividido por el número de lados que tiene la forma para obtener el ángulo correcto. "
      grade5_artist_for_loops9_authored_hint:
        Course_4_Artist_For_Loops_11a_a: '360 dividido por el número de lados que tiene una forma es la cantidad de grados que deberá girar. '
        Course_4_Artist_For_Loops_11a_b: 'Cada vez, deberá avanzar 10 veces la longitud del número actual de lados. '
      grade5_artist_for_loopsfreeplay11_authored_hint:
        Course_4_Artist_For_Loops_inspire_a: La base de este código es la misma que la solución al desafío anterior... con un par de cambios.
        Course_4_Artist_For_Loops_inspire_b: Intenta con un bucle 'para' que va de 3 a 10 con un incremento de 1.
        Course_4_Artist_For_Loops_inspire_c: Hay dos iteraciones del mismo bucle de repetición dentro del bucle `para`, pero la segunda repetición gira en la dirección opuesta.
        Course_4_Artist_For_Loops_inspire_d: "**Solution:**  ![Solution](https://images.code.org/d619892fc17ff491c201d86bb917e523-image-1441005190828.12.30.png) "
      grade5_artist_for_loopsfreeplay12_authored_hint:
        grade5_artist_for_loopsfreeplay12_a: The image in the drawing was made using a counter for the `set alpha` and `counter` / 10 as a brush size.
        grade5_artist_for_loopsfreeplay12_b: The image in the drawing uses a turn of 61 degrees.
        grade5_artist_for_loopsfreeplay12_c: |-
          Want to know how the sample image was done?
          
          ![](https://images.code.org/fdc5d6c15b357ba9763ac9ea914967a9-image-1475911612774.23.51.png)
      grade5_artist_functionparameters10_authored_hint:
        brush_width: Establecemos el grosor del pincel a 1, luego el color a azul antes de hacer cualquier otra cosa.
        double_loop: Intenta colocar un 'bucle para' dentro de un bucle 'repetir '.
        specifics: "El `bucle para` se ejecuta de tres a diecisiete para cada uno de los seis\" pétalos \"antes de pasar a crear el siguiente, dibujando formas con solo un número impar de lados.\n        \nEl bloque `establecer alfa` usa la división para atenuar el color a medida que el contador aumenta."
        after: Cuando hayas terminado con cada "pétalo", asegúrate de "avanzar" 20 píxeles antes de hacer una rotación de 60 grados.
        solution: |-
          **Solution**
          
          ![](https://images.code.org/7e9f4be39d45726d537fe8e6e9147986-image-1456445254361.png)
      grade5_artist_functionparameters8_authored_hint:
        NEW_Course_4_Artist_Params_13_a: The length of sides for each shape is 7 times the number of sides it has.
      grade5_artist_functionparameters9_authored_hint:
        NEW_Course_4_Artist_Params_14_a: It's okay to run the program a few times to figure out how the function works with different parameters.
        grade5_artist_functionparameters9_b: You don't need to add any `move` or `turn` blocks to finish this code.
      grade5_artist_functionparameters9a_authored_hint:
        grade5_artist_functionparameters9a_a: 'Did the code get so scrambled up that it''s no longer recognizable?  Try clicking the "Start over" button in the upper righthand corner. '
        grade5_artist_functionparameters9a_b: Your new `min` variable should go in the first slot in your `for` loop, inside the function.
      grade5_artist_functionparameters9b_authored_hint:
        grade5_artist_functionparameters9b_a: If your function is correct, you shouldn't need to change it for this puzzle.
        grade5_artist_functionparameters9b_b: The only thing you should need to do between function calls is change the color of the line.
      grade5_artist_functionparameters_6_authored_hint:
        grade5_artist_functionparameters_6_a: Use a `for` loop to get the code as smooth as you can.
        grade5_artist_functionparameters_6_b: Remember to **add** a parameter.  Don't remove the one that is already there!
      grade5_artist_parameters_squares1a_authored_hint:
        grade5_artist_parameters_squares1a_a: Remember, you need to turn 90 degrees to draw a square.
        grade5_artist_parameters_squares1a_b: You only need to repeat as many times as the number of sides in a square.
      grade5_artist_parameters_squares2_authored_hint:
        grade5_artist_parameters_squares2_a: This gets easier if you put it all in a `for` loop.
        grade5_artist_parameters_squares2_b: |-
          Be sure to turn 90 degrees between each square!
          
          ![](https://images.code.org/97bd8eded03c5aa39740876c8e9f7ff8-image-1469224745277.gif)
      grade5_artist_parameters_squares2a_authored_hint:
        grade5_artist_parameters_squares2a_a: You need to click the "edit" button to get into the function.  Once you're there, add a parameter called `length` and use it inside your `move forward` block!
        grade5_artist_parameters_squares2a_b: When calling your function, use a `for loop` for the best possible code!
      grade5_artist_parameters_stars1_authored_hint:
        hint1: Don't give up!
      grade5_artist_variables_freeplay10_authored_hint:
        Course_4_Artist_Vars_8_a: Si divide su longitud inicial por el número de lados, la longitud de cada lado se acortará a medida que el número de lados aumente.
      grade5_artist_variables_freeplay15_authored_hint:
        Course_4_Artist_Inspire_a: Después de completar un cuadrado, intente saltar la mitad de su longitud antes de girar y hacer otro.
        Course_4_Artist_Inspire_b: Cada cuadrado y salto se repite cuatro veces (usando un giro a la izquierda en el medio) para formar una unidad completa similar a un molinete.
        Course_4_Artist_Inspire_c: Cada molinete también se repite cuatro veces, con un giro a la derecha de ** 360 / lados **.
        Course_4_Artist_Inspire_d: |-
          **Solution:**
          ![Blocks for solution](https://images.code.org/1865aaf1b4a8ba84a5e8a7408401092d-image-1440060930335.43.39.png)
      grade5_artist_variables_octagons13_authored_hint:
        Course_4_Artist_Vars_13_a: Necesita dos bucles de repetir (uno dentro del otro) ambos repitiendo 'lados' veces.
        Course_4_Artist_Vars_13_b: "El ciclo de repetición interno dibuja un octágono (girando a la izquierda).\n\nLuego, debe avanzar y girar a la derecha solo en el bucle externo."
        Course_4_Artist_Vars_13_c: Para ajustar la forma para que permanezca del mismo tamaño cuando cambia el número de lados, use el bloque matemático para dividir la longitud en píxeles por el número de lados.
      grade5_artist_variables_square7_authored_hint:
        Course_4_Artist_Vars_6_a: Para dibujar un polígono regular, gire ** 360 / lados ** cada vez.
      grade5_artist_variables_triangles1_authored_hint:
        grade5_artist_variables_triangles1_a: Para formar un ángulo interno de 60 grados en este triángulo, recuerda girar el artista 120 grados.
        grade5_artist_variables_triangles1_b: Use el bucle `repetir` para acortar su código.
        grade5_artist_variables_triangles1_c: Dentro de tu bucle, querras avanzar 50 píxeles, luego gira a la izquierda 120 grados.
      grade5_artist_variables_triangles1_2018_authored_hint:
        grade5_artist_variables_triangles1_a: Para formar un ángulo interno de 60 grados en este triángulo, recuerda girar el artista 120 grados.
        grade5_artist_variables_triangles1_b: Use el bucle `repetir` para acortar su código.
        grade5_artist_variables_triangles1_c: Dentro de tu bucle, querras avanzar 50 píxeles, luego gira a la izquierda 120 grados.
      grade5_bee_for_loops10_authored_hint:
        grade5_bee_for_loops10_a: "How much less is 12 than 15?  \nHow much less is 9 than 12?\n\nDo you see a pattern?"
      grade5_bee_for_loops11_authored_hint:
        NEW_Course_4_Bee_For_Loops_10a_a: Can you find a pattern between the number of steps you need to take and the number of nectars to gather?
        NEW_Course_4_Bee_For_Loops_10a_b: You'll need to have 2 repeats, one will use a math block.
      grade5_bee_for_loops3_authored_hint:
        grade5_bee_for_loops3_a: 'Use the `counter` variable inside the `repeat` loop where nectar is gathered to solve this puzzle. '
        grade5_bee_for_loops3_b: Your `for` loop will need to count from 1 to 5 with an increment of 1.
      grade5_bee_for_loops4_authored_hint:
        grade5_bee_for_loops4_a: Use a `for` loop that goes from 1 to 7 with an increment of 1 to solve this puzzle.
        grade5_bee_for_loops4_b: Make sure to use the `counter` variable inside your nested `repeat` loop to get enough nectar!
      grade5_bee_for_loops5_authored_hint:
        grade5_bee_for_loops5_a: This time, your `move forward` block and your `get nectar` block will need to be in separate `repeat` loops.
      grade5_bee_for_loops6_authored_hint:
        grade5_bee_for_loops6_a: Don't forget to use a `counter` variable inside your `repeat` loop.
      grade5_bee_for_loops7_authored_hint:
        grade5_bee_for_loops7_a: Your `for` loop will need to count from 1 to 7 by 2.
      grade5_bee_for_loops8_authored_hint:
        NEW_Course_4_Bee_For_Loops_8_a: "If your loop is counting up, the increment is added to your counter variable each time through. \n\nWhat do you need to add to each number to get the next amount of nectar?"
      grade5_bee_for_loops9_authored_hint:
        NEW_Course_4_Bee_For_Loops_7_a: |-
          Try doing some math with the counter variable.
          
          What do you have to do to the counter at each flower to equal the amount of nectar you need to collect?
        NEW_Course_4_Bee_For_Loops_7_b: 'Remember: If your loop is counting up, the increment is added to your `counter` variable each time through.'
      grade5_bee_parameters_new1_authored_hint:
        grade5_bee_parameters_new1_a: Use `if` statements to make sure you're only getting nectar from a flower.
      grade5_bee_parameters_new2_authored_hint:
        grade5_bee_parameters_new2_a: "To turn this into a function, simply drag the code into the existing function block.  \n\n\n![](https://images.code.org/4d918c677ecb9f1618c1556566805b32-image-1477621874625.gif)"
        grade5_bee_parameters_new2_b: Don't forget to connect the `rowOfNectar` block to `when run` to call the function that you just built.
      grade5_bee_parameters_new3_authored_hint:
        grade5_bee_parameters_new3_a: Your function will run no matter which direction you're facing.
      grade5_bee_parameters_new4_authored_hint:
        grade5_bee_parameters_new4_a: You will need to add a parameter and use the resulting variable in your loop.
      grade5_bee_parameters_new5_authored_hint:
        grade5_bee_parameters_new5_a: Count the number of spaces you need to check in each stretch and use those numbers as your parameters to the function call.
      grade5_bee_parameters_new6_authored_hint:
        grade5_bee_parameters_new6_a: Which block automatically increments a variable that you could use as a parameter?
      grade5_bee_parameters_new7_authored_hint:
        grade5_bee_parameters_new7_a: You don't need a second parameter for this function, only a second `if` statement.
      grade5_bee_parameters_new8a_authored_hint:
        grade5_bee_parameters_new8a_a: This spiral can be simplified with a `for` loop.
      grade5_bee_parameters_new9a_authored_hint:
        grade5_bee_parameters_new9a_a: A `for` loop can help you with this stair step pattern, too!
        grade5_bee_parameters_new9a_b: For each stair, you'll need to call the function once, turn right, call the function again, then turn left.
      grade5_playlab_variables2_authored_hint:
        Course_4_Play_Lab_Vars_2_a: Asegúrese de establecer el número de `velocidad_perro`a algo más grande que` velocidad_gato`.
      gradeK_sequence_4_authored_hint:
        gradeK_sequence_4_a: Try writing down the steps on paper to find a solution!
      gradek_adventurer_loops3_authored_hint:
        gradek_adventurer_loops3_a: Para cambiar la distancia que recorre el aventurero, cambia la cantidad de veces que se ejecuta el bucle.
        gradek_adventurer_loops3_b: '¡No olvides que el aventurero necesita caminar hacia abajo y recoger oro después de que termine el bucle `repetir`!'
      gradek_adventurer_loops4_authored_hint:
        gradek_adventurer_loops4_a: If you can't figure out the answer right away, try using a piece of paper to figure out what arrows you will need and look for a pattern.
      gradek_adventurer_loops4a_authored_hint:
        gradek_adventurer_loops4a_a: Can't figure out what's wrong? Try running the code to see what happens.
      gradek_adventurer_loops5_authored_hint:
        gradek_adventurer_loops5_a: Si no puedes averiguar lo que viene luego, intenta ejecutar el código para ver en donde finaliza Laurel.
      gradek_adventurer_loops6_authored_hint:
        gradek_adventurer_loops6_a: If you are having trouble figuring this puzzle out, try writing the moves down on a piece of paper and look for a pattern.
      gradek_adventurer_loops7_challenge_authored_hint:
        gradek_adventurer_loops7_challenge_a: '¿El código se siente realmente largo? Intenta poner dos de tus bucles `repetir` dentro de otro bucle para hacerlo mucho más corto!'
      gradek_adventurer_loops8_authored_hint:
        gradek_adventurer_loops8_a: If you can't figure out where to put the loops, try writing the code out step-by-step and look for a pattern.
      gradek_adventurer_loops9_authored_hint:
        gradek_adventurer_loops9_a: If you can't figure out where to put the loops, try writing your code step-by-step and look for patterns.
      gradek_artist_loops1_authored_hint:
        gradek_artist_loops1_a: Can't figure out how to draw a line?  Start attaching blocks to the `when run` block to see what happens.
      gradek_artist_loops2_authored_hint:
        gradek_artist_loops2_a: Is something not quite right?  Use the "Step" button to see where things go wrong.
      gradek_artist_loops3_authored_hint:
        artistLoopsK2_a: Si quiere que el lazo se repita más de 4 veces, usted puede cambiar el número en la parte superior del bloque.
      gradek_artist_loops4_authored_hint:
        artistLoopsK3_a: '¡Intente utilizando lo que ha aprendido acerca de los bloques repetir para completar este rompecabezas!'
      gradek_artist_loops5_authored_hint:
        gradek_artist_loops5_a: Can't figure out how to make the hill?  Try playing with the blocks a bit to see what each one draws.
      gradek_artist_loops6_authored_hint:
        gradek_artist_loops6_a: Can't figure out where to put the loop? Try writing the code step-by-step and look for a pattern.
      gradek_artist_loops7_authored_hint:
        gradek_artist_loops7_a: Try running the code to see what has been written for you.
        gradek_artist_loops7_b: How would you loop the code that has been given to you?
        gradek_artist_loops7_c: "What does the code do?  \nWhat is it supposed to do?  \nWhat does that tell you?"
      gradek_artist_loops8_authored_hint:
        gradek_artist_loops8_a: 'You don''t have to delete everything!  Some of the code is good. Use it to build the rest of the stairs. '
      gradek_artist_loops9_authored_hint:
        artistLoopsKA_a: Use the jump block to move forward without drawing a line.
      gradek_artist_loopsA_authored_hint:
        artistLoopsKB_a: There should be 2 blocks inside of your loop to solve this puzzle.
      gradek_artist_loopsFP_authored_hint: [ ]
      gradek_playlab_events1a_authored_hint:
        gradek_playlab_events1a_a: Attach the `move up` block to the `when click` event so that the cat moves up when the "up" button is pressed.
      gradek_playlab_events1c_authored_hint:
        gradek_playlab_events1c_a: "Here is the block you should connect to the `when run` block: \n\n![](https://images.code.org/ae72d1270ad210cd00fae7e0dfb3549a-image-1478144412134.png)"
      gradek_playlab_events2c_authored_hint:
        gradek_playlab_events2c_a: drag this block out ![](https://images.code.org/b3d6215901969328333d6393f8101c5b-image-1478142333199.png) and connect it to ![](https://images.code.org/4f2130b2a3053695414a02c3d39ef864-image-1478143461271.png)
      gradek_playlab_events3c_authored_hint:
        gradek_playlab_events3c_a: |-
          Here is the event block that you will need to get Jorge to move right:
          
          ![](https://images.code.org/cfc4b696b1ad5762ff40c1c8a17a194d-image-1478141370249.png)
        gradek_playlab_events3c_b: |-
          Here is the block you should connect to the `when right` event:
          
          ![](https://images.code.org/e5c559cc1deef643c8b997d17ecb78e3-image-1478141726783.png)
      gradek_playlab_events4c_authored_hint:
        gradek_playlab_events4c_a: "Here are the event blocks that you will need to use to move Jorge up and down:\n\n![](https://images.code.org/cf9a6992f7b4619dfb592fb6905effbb-image-1478140906017.png)\nand \n![](https://images.code.org/bb2a117cef485e79119a63e5d027968e-image-1478140979742.png)"
      gradek_playlab_events5c_authored_hint:
        gradek_playlab_events5c_a: |-
          Here is the event block that you would use to have Jorge do something when clicked:
          
          ![](https://images.code.org/6e3a654378643fd0590307ec3a0e429c-image-1478140058859.png)
        gradek_playlab_events5c_b: |-
          Here is the block you would use to change the background:
          
          ![](https://images.code.org/3f6d7a642b37c3abffe7b0de062ea076-image-1478140261440.png)
        gradek_playlab_events5c_c: |-
          Here is the block you would use to play a random sound:
          
          ![](https://images.code.org/81a8ef4f64023039438199fef67bb56b-image-1478140125332.png)
      gradek_playlab_eventsA_authored_hint:
        gradek_playlab_eventsA_a: |-
          If this seems like too much to do, try breaking it down into steps:
          
          1)  Have the actor change to a random size on click.
          2) Play a random sound when you click the actor.
          
          Now, make sure both of those actions are attached underneath the same event!
      harvester_Kahoot_authored_hint:
        courseE_farmer_functions1a_a: Think through the `if/else` statements step by step. What should you do if you are standing at a corn plant?
        courseE_farmer_functions1a_b: Use a `repeat until` block to get to the pumpkin!
      harvey_snowflake_artist1_authored_hint: [ ]
      harvey_snowflake_artist2_authored_hint: [ ]
      harvey_tictactoe_authored_hint:
        harvey_tictactoe: Puedes usar bloques `saltar` para moverte a otros espacios.
      iceAgeLoopsforVideo_authored_hint: [ ]
      iceage_click_hello_authored_hint:
        iceage_click_hello_a: Add one or more `actor 1 say` blocks to the `when clicked` event to complete this puzzle.
      iceage_click_hello_2018_authored_hint:
        iceage_click_hello_a: Add one or more `actor 1 say` blocks to the `when clicked` event to complete this puzzle.
      iceage_free_play_authored_hint:
        iceage_free_play_a: 'Can you make Sid and Manny have an Ice Crystal fight?  '
        iceage_free_play_b: Make Granny chase Diego.  End the game as a win if she catches him.
        iceage_free_play_c: Can you have Sid throw snowflakes at Diego and have Diego get bigger each time one hits?  End the game as a win if Diego gets hit 5 times.
      iceage_free_play_2018_authored_hint:
        iceage_free_play_a: 'Can you make Sid and Manny have an Ice Crystal fight?  '
        iceage_free_play_b: Make Granny chase Diego.  End the game as a win if she catches him.
        iceage_free_play_c: Can you have Sid throw snowflakes at Diego and have Diego get bigger each time one hits?  End the game as a win if Diego gets hit 5 times.
      iceage_free_playcourseF_IceAge_11_authored_hint:
        iceage_free_play_a: 'Can you make Sid and Manny have an Ice Crystal fight?  '
        iceage_free_play_b: Make Granny chase Diego.  End the game as a win if she catches him.
        iceage_free_play_c: Can you have Sid throw snowflakes at Diego and have Diego get bigger each time one hits?  End the game as a win if Diego gets hit 5 times.
      iceage_hello1_authored_hint:
        iceage_hello1_a: Solo necesitas agregar un bloque para resolver este puzzle. Arrastre el bloque `decir` desde la barra de herramientas y conéctelo al bloque de evento `cuando ejecuta` que ya se encuentra en el área de trabajo. Luego, escribe "¡Hola!" dentro.
      iceage_hello1_2018_authored_hint:
        iceage_hello1_a: Solo necesitas agregar un bloque para resolver este puzzle. Arrastre el bloque `decir` desde la barra de herramientas y conéctelo al bloque de evento `cuando ejecuta` que ya se encuentra en el área de trabajo. Luego, escribe "¡Hola!" dentro.
      iceage_hello2_authored_hint:
        iceage_hello2_a: 'To solve this puzzle, you will need to have Sid say something using the `actor 1 say` block.  You will also need to have Manny say something with the `actor 2 say` block. '
      iceage_hello2_2018_authored_hint:
        iceage_hello2_a: 'To solve this puzzle, you will need to have Sid say something using the `actor 1 say` block.  You will also need to have Manny say something with the `actor 2 say` block. '
      iceage_move_events_authored_hint:
        iceage_move_events_a: 'Each of the `when ___ arrow` events will need to have a different `move actor 1` command connected to it to solve this puzzle. '
      iceage_move_events_2018_authored_hint:
        iceage_move_events_a: 'Each of the `when ___ arrow` events will need to have a different `move actor 1` command connected to it to solve this puzzle. '
      iceage_move_to_actor_authored_hint:
        iceage_move_to_actor_a: For this puzzle, you can either move Diego down by 200 pixels, or move Manny up by 200 pixels.
        iceage_move_to_actor_b: Connect the `play ___ sound` block to the `when actor 1 touches actor 2` event to finish this challenge.
      iceage_move_to_actor_2018_authored_hint:
        iceage_move_to_actor_a: For this puzzle, you can either move Diego down by 200 pixels, or move Manny up by 200 pixels.
        iceage_move_to_actor_b: Connect the `play ___ sound` block to the `when actor 1 touches actor 2` event to finish this challenge.
      iceage_move_to_flag_authored_hint:
        iceage_hello3_a: Use the `move actor 1 right by 200 pixels` block to solve this puzzle.
      iceage_move_to_flag_2018_authored_hint:
        iceage_hello3_a: Use the `move actor 1 right by 200 pixels` block to solve this puzzle.
      iceage_repeat_authored_hint:
        iceage_repeat_a: Use both the `move actor 1 left` and `move actor 1 right` blocks to solve this puzzle.
      iceage_repeat_2018_authored_hint:
        iceage_repeat_a: Use both the `move actor 1 left` and `move actor 1 right` blocks to solve this puzzle.
      iceage_sound_and_points_authored_hint:
        iceage_sound_and_points_a: You will need to add two blocks beneath the `when actor 1 touches actor 2` event.
        iceage_sound_and_points_b: You will need both the `score a point` block and the 'play ____ sound` block to pass this level.
      iceage_sound_and_points_2018_authored_hint:
        iceage_sound_and_points_a: You will need to add two blocks beneath the `when actor 1 touches actor 2` event.
        iceage_sound_and_points_b: You will need both the `score a point` block and the 'play ____ sound` block to pass this level.
      iceage_throw_hearts_authored_hint:
        iceage_throw_hearts_a: When do you want to throw hearts at granny?  When an arrow is pressed? When you click on Sid?  When you click on Granny?  The choice is yours!
        iceage_throw_hearts_b: To get granny to be happy when she receives a heart, you will need to connect the `set actor 2 mood to happy` block beneath the `when actor 2 touches projectile` event.
      iceage_throw_hearts_2018_authored_hint:
        iceage_throw_hearts_a: When do you want to throw hearts at granny?  When an arrow is pressed? When you click on Sid?  When you click on Granny?  The choice is yours!
        iceage_throw_hearts_b: To get granny to be happy when she receives a heart, you will need to connect the `set actor 2 mood to happy` block beneath the `when actor 2 touches projectile` event.
      iceage_warn_embed_ice_age_authored_hint: [ ]
      iceage_warn_ice_age_authored_hint:
        iceage_warn_ice_age_a: 'You should only have to add two blocks to get this puzzle where it needs to be. '
        iceage_warn_ice_age_b: Add both new blocks beneath the `when run` event to have them happen immediately after the program starts.
      iceage_warn_ice_age_2018_authored_hint:
        iceage_warn_ice_age_a: 'You should only have to add two blocks to get this puzzle where it needs to be. '
        iceage_warn_ice_age_b: Add both new blocks beneath the `when run` event to have them happen immediately after the program starts.
      k1stickerfreeplay_authored_hint: [ ]
      level 'grade3_Loops_10_authored_hint:
        2-3_Bee_Loops_4_a: Deberías terminar con cinco bloques dentro de tu bucle.
      level 'grade3_Loops_11_authored_hint:
        2-3_Bee_Loops_5_a: Si no puedes detectar los bloques para colocar `repetir` inmediatamente, comienza por codificar cada movimiento y busca un patrón.
      level 'grade3_Loops_12_authored_hint:
        2-3_Bee_Loops_6_a: Si no puedes decir qué debería ir en el bucle 'repetir', intenta arrastrar los bloques uno por uno y ve si puedes encontrar un patrón.
        2-3_Bee_Loops_6_b: Aquí deberían haber 6 bloques dentro del bucle 'repetir' cuando hayas terminado.
      level 'grade3_Loops_4_authored_hint:
        2-3_Bee_Loops_3B_a: Necesitas dos bucles `repetir` diferentes, uno después del otro.
      level 'grade3_Loops_5_authored_hint:
        2-3_Bee_Loops_7_a: La primera acción será un giro, en lugar de un movimiento.
        2-3_Bee_Loops_7_b: 'Si no puedes imaginar el bucle desde el principio, intenta programarlo a lo largo del camino, luego busca un patrón.  '
      level 'grade3_Loops_6_authored_hint:
        2-3_Bee_Loops_4A_a: La primera acción será un giro, en lugar de un movimiento.
        2-3_Bee_Loops_4A_b: La última parte del programa puede terminarse escribiendo código al final de su programa fuera de su bucle.
        2-3_Bee_Loops_4A_c: Si aún no puedes detectar los bucles, intenta codificarlo primero, luego ve lo que puedes combinar en un bucle 'repetir' al final.
      level 'grade3_Loops_8_authored_hint:
        2-3_Bee_Loops_2_a: Deberías terminar con cuatro bloques dentro de tu bucle.
      level 'grade3_Loops_9_authored_hint:
        2-3_Bee_Loops_3_a: Deberías tener 6 bloques dentro de tu bucle.
      playLabDebugVideo1_authored_hint:
        courseA_playLab_events2_a: "Here is the block you should connect to the `when run` block: \n\n![](https://images.code.org/ae72d1270ad210cd00fae7e0dfb3549a-image-1478144412134.png)"
      sample3_authored_hint:
        sample3_a: |-
          Try writing the code once and looping it seven times:
          
          ![](https://images.code.org/2a116e75e31ee3a8a8683349c9460286-image-1464307689813.gif)
      sample5_authored_hint:
        sample5_a: Did you know that you can put as many blocks inside of a repeat loop as you want to?
        sample5_b: |-
          The bee is looping these actions over and over again:
          - move forward
          - make honey
          - turn left
          - move forward
          - turn right
      sample6_authored_hint:
        sample6_a: Did you know that you can use more than one repeat loop in a puzzle?
        sample6_b: Sometimes repeat loops have lots of blocks inside, and sometimes they might only have one!
      sample7assessment_authored_hint: [ ]
