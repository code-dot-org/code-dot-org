fi:
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Tervetuloa ensimmäiselle kooditunnille! Sukelletaanpa heti ohjelmoinnin maailmaan.
      2:
        image: notes/hoc1_2.jpg
        text: Käytämme Blocklyä. Se on on visuaalinen ohjelmointikieli, jossa koodia kirjoitetaan vetämällä ja pudottamalla lohkoja.
      3:
        image: notes/hoc1_3.jpg
        text: 'Yleensä koodi kirjoitetaan, mutta Blockly on visuaalinen. Jokainen lohko vastaa riviä "oikeaa" koodia.'
      4:
        image: notes/hoc1_4.jpg
        text: Opit kohta tietotekniikan perusteet. Näitä käsitteitä käytetään kaikkialla aina pienistä sovelluksista Mars-mönkijän ohjaamiseen saakka.
      5:
        image: notes/hoc1_5.jpg
        text: Ohjelma on joukko ohjeita, joita tietokoneesi noudattaa.
      6:
        image: notes/hoc1_6.jpg
        text: Ensimmäisen ohjelmasi tehtävä on ohjata Angry Bird -lintu sokkelon läpi ja osua vihreään possuun.
      7:
        image: notes/hoc1_7.jpg
        text: Vasemmalla on sokkelo, jossa ohjelmasi suoritetaan. Jokaisen tehtävän ohjeet löytyvät sokkelon alapuolelta.
      8:
        image: notes/hoc1_8.jpg
        text: Keskimmäinen työkalupakki sisältää komentoja Angry Bird -linnulle. Näitä käytetään koodisi rakentamiseen.
      9:
        image: notes/hoc1_9.jpg
        text: Oikealla on työtilasi, johon rakennat ohjelmasi raahamalla lohkoja työkalupakista. Jos haluat poistaa lohkon, vedä se nurkasta löytyvään roskakoriin.
      10:
        image: notes/hoc1_10.jpg
        text: 'Jokainen lohko on käsky. Jos vedät "liiku eteenpäin" -lohkon työtilaasi ja painat "suorita ohjelma" -nappia, lintu liikkuu yhden ruudun sokkelossa.'
      11:
        image: notes/hoc1_11.jpg
        text: Tehdäksesi enemmän kuin yhden toiminnon, voit vetää monta lohkoa työtilaasi ja liittää ne yhteen. Lintu tekee käskyt ylhäältä alaspäin.
      12:
        image: notes/hoc1_12.jpg
        text: 'Jos suoritat ohjelman ja haluat korjata ja yrittää uudelleen, paina "alusta" -nappulaa.'
      13:
        image: notes/hoc1_13.jpg
        text: Ja eikun vain possujen kimppuun!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Hei, olen JR! Kaikki ralliautotiimit tarvitsevat tietojenkäsittelyasiantuntijan voittaakseen. He analysoivat auton tietoja saadakseen sen kulkemaan nopeammin.
      2:
        image: notes/stage5_2.jpg
        text: Näissä tehtävissä olet taiteilija, joka piirtää viivaa kulkiessaan.
      3:
        image: notes/stage5_3.jpg
        text: 'Tässä lohkossa lukee "liiku eteenpäin 100 kuvapistettä". Kuvapisteet ovat pieniä pisteitä näytölläsi.'
      4:
        image: notes/stage5_4.jpg
        text: 'Tässä lohkossa lukee "käänny oikealle 90 astetta". Se kääntää taiteilijaasi saman verran kuin "käännä"-lohkot sokkelotehtävissä.'
      5:
        image: notes/stage5_5.jpg
        text: Napsauttamalla lohkon päissä olevia nuolia, voit muuttaa sitä määrää, jonka taiteilija liikkuu eteenpäin tai kääntyy. Leiki nyt hetki näillä lohkoilla tutustuaksesi niihin paremmin.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Hei, olen Paola! Näissä tehtävissä olet maanviljelijä, jonka täytyy saada peltonsa täysin tasaiseksi aloittaakseen istutukset.
      2:
        image: notes/stage9_2.jpg
        text: Sinun täytyy auttaa häntä poistamaan kaikki multakasat ja täyttämään kaikki kuopat.
      3:
        image: notes/stage9_3.jpg
        text: Uudet lohkot poistavat yhden lapiollisen multaa kasasta ja täyttävät yhden lapiollisen multaa kuoppaan.
      4:
        image: notes/stage9_4.jpg
        text: Kasat ja kuopat ovat erikokoisia, joten sinun täytyy kertoa maanviljelijälle kuinka monta lapiollista hänen tulisi käyttää.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Hei olen Katie! Yksi mielenkiintoisimmista asioista tietotekniikassa on, että tietokoneohjelma voi olla vuorovaikutteinen.
      2:
        image: notes/flappy02.jpg
        text: 'Joka kerta kun joku napsauttaa tai kirjoittaa tietokoneella tai puhelimella, se luo "tapahtuman", ja jokin kirjoitettu koodi päättää mitä tehdään kun tuo tapahtuma tapahtuu.'
      3:
        image: notes/flappy03.jpg
        text: 'Esimerkiksi, sinulla voi olla tapahtumakäsittelijä, joka sanoo "kun hiirtä napsautetaan, soita ääni" '
      4:
        image: notes/flappy04.jpg
        text: Oletko koskaan kuullut pelistä nimeltä FlappyBird? Käyttäen tapahtumakäsittelijöitä, opimme kuinka ohjelmoida oma räätälöity versio FlappyBirdistä!
      5:
        image: notes/flappy05.jpg
        text: Nyt tehtävä koodaus tulee tapahtumaan raahaamalla koodia esittäviä lohkoja. Jokainen lohko vastaa yhtä tietokoneelle annettavaa komentoa. Pinnan alla kukin näistä lohkoista vastaa oikea koodia.
      6:
        image: notes/flappy06.jpg
        text: 'Kun tarkastelet työtilaa, huomaat joitain vihreitä lohkoja valmiiksi täytettynä - nämä ovat "tapahtumakäsittelijöitä"'
      7:
        image: notes/flappy07.jpg
        text: 'Jos haluat linnun tekevän RÄPYTTELE-toiminnon kun NAPSAUTAT hiirtä, voit tehdä niin liittämällä "RÄPYTTELE"-lohkon soveltuvaan tapahtumakäsittelijaan. Näin lintu räpyttelee siipiään aina hiiren napsautuksella.'
      8:
        image: notes/flappy08.jpg
        text: Jokaisessa tämän jakson tehtävässä esittelemme työtilassa yhden tai useamman uuden vihreän tapahtumalohkon. Liittämällä toimintolohkoja tapahtumalohkoihin, voit päättää mitä tapahtumista seuraa.
      9:
        image: notes/flappy09.jpg
        text: 'Kun näet tälläisen nuolen alaspäin, se tarkoittaa että voit muuttaa asetuksia - kuten esimerkiksi, mikä ääni kuuluu, kun flappy osuu maahan.'
      10:
        image: notes/flappy10.jpg
        text: Viimeisessä tehtävässä voit luoda oman pelin ja jakaa sen ystäviesi kanssa. Pidä hauskaa!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Hei, olen Mark! Opetellaanpa silmukoita. Silmukalla voit ohjata tietokonetta toistamaan mitä vain toimintoa uudelleen ja uudelleen, tuhansia tai jopa miljardeja kertoja.
      2:
        image: notes/hoc2_2.jpg
        text: Tässä tehtävässä haluamme liikuttaa lintua 5 ruutua eteenpäin osuaksemme possuun.
      3:
        image: notes/hoc2_3.jpg
        text: 'Voimme käyttää uutta "toista"-lohkoa apunamme.'
      4:
        image: notes/hoc2_4.jpg
        text: 'Sen sijaan että vetäisimme 5 "liiku eteenpäin" -lohkoa...'
      5:
        image: notes/hoc2_5.jpg
        text: 'Voimme laittaa "liiku eteenpäin" -lohkon "toista"-lohkon sisään ja kirjoittaa luvun lohkoon kertoaksemme sille, kuinka monta kertaa pitää toistaa.'
      6:
        image: notes/hoc2_6.jpg
        text: 'Ja tämä on tärkeää: voit laittaa enemmän kuin yhden komennon "toista"-lohkoon.'
      7:
        image: notes/hoc2_7.jpg
        text: 'Pidä hauskaa uuden "toista"-lohkon kanssa!'
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: 'Hei, olen Chris. Ennen kuin liityin Miami Heatiin, opiskelin tietojenkäsittelytiedettä Georgian teknillisessä oppilaitoksessa. Kokeillaanpa uutta "toista kunnes" -lohkoa.'
      2:
        image: notes/hoc3_2.jpg
        text: Mitä jos emme tietäisi, kuinka pitkälle linnun pitäisi liikkua saavuttaakseen possun?
      3:
        image: notes/hoc3_3.jpg
        text: 'Jos laitamme "liiku eteenpäin" -lohkon "toista kunnes" -lohkon sisälle, lintu liikkuu eteenpäin KUNNES se saavuttaa possun (tai törmää seinään).'
      4:
        image: notes/hoc3_4.jpg
        text: 'Ja tämä on tärkeää: aivan kuin ennenkin, voimme laittaa monta lohkoa yhteen "toista kunnes" -lohkoon, niin että ne kaikki toistuvat.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'Hei, olen Bill! Opetellaanpa uusi keskeinen käsite: "jos"-lause. Tämän avulla tietokoneet tekevät päätöksiä.'
      2:
        image: notes/hoc4_2.jpg
        text: 'Käytät "Jos"-lausetta itse joka päivä. Esimerkiksi, ennen kuin lähdet ulos, sanot itsellesi: "jos ulkona sataa, tarvitsen sadetakkini."'
      3:
        image: notes/hoc4_3.jpg
        text: Voimme laittaa zombit tarkistamaan, JOS vasemmalle on reitti ja kun zombie tulee sellaiseen kohtaan, voimme laittaa sen kääntymään sinne.
      4:
        image: notes/hoc4_4.jpg
        text: 'Raahataan siis yksi "Jos"-lohko ja sen sisään "käänny vasemmalle" -lohko.'
      5:
        image: notes/hoc4_5.jpg
        text: 'Jos nyt laitamme "liiku eteenpäin" -lohkon sen yläpuolelle ja "toista"-lohkon sen ympärille, niin zombie tarkistaa joka kerta kun se liikkuu, onko vasemmalle reittiä – ja jos on, se kääntyy. "Toista"-lohko on hyvin tärkeä, jotta tarkistus tehdään joka askeleella.'
      6:
        image: notes/hoc4_6.jpg
        text: 'Jos-lauseet ovat hyvin tärkeitä tietojenkäsittelytieteessä. Yksi ensimmäisistä ohjelmista, jonka kirjoitin, oli peli nimeltä ristinolla. Siinä oli jos-lause, joka sanoi "JOS toinen henkilö on voittamassa, estä se siirto, jolla hän voittaisi."'
      7:
        image: notes/hoc4_7.jpg
        text: 'Pidä hauskaa "Jos"-lohkolla!'
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: 'Hei, nimeni on Saloni. Käytän tietojenkäsittelytiedettä ratkomaan ongelmia terveyden ja lääketieteen alueella. Opiskellaanpa "jos muuten" -lohkosta. Se näyttää "jos"-lohkolta, mutta siinä on ylimääräinen pala lopussa, joka sanoo "muuten".'
      2:
        image: notes/hoc5_2.jpg
        text: 'Jos laitan "liiku eteenpäin" -lohkon paikkaan jossa on "tee" ja "käänny vasemmalle" -lohkot kohtaan jossa lukee "muuten" se tarkoittaa että zombie valitsee kahden vaihtoehdon väliltä. JOS edessä on reitti, zombie menee eteenpäin; MUUTEN (jos edessä ei ole reittiä) zombie kääntyy vasemmalle.'
      3:
        image: notes/hoc5_3.jpg
        text: 'Kuten "jos"-lohkon, voimme laittaa myös "jos muuten" -lohkon "toista"-lohkon sisään niin, että zombie jatkaa liikkumista ja "jos muuten" -lohko tarkistaaa jos jonnekin voi kääntyä.'
      4:
        image: notes/hoc5_4.jpg
        text: No niin, laitetaanpa nuo zombiet sinne minne kuuluvat!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: Jos-muuten -lauseke on päätös kahden asian välillä. Katsotaanpa kuinka käytämme jos-muuten -lauseketta kaverimme Scrat-oravan kanssa.
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: 'Tämä lohko näyttää "jos" lohkolta, mutta siinä on "muuten" lisäosa lopussa. Jos laitan "liiku eteenpäin" -lohkon kohtaan jossa on "tee" ja "käänny vasemmalle -lohkon kohtaan, jossa sanotaan "muuten", se tarkoittaa, että Scrat-orava liikkuu eteenpäin jos edessä on reitti. Jos edessä ei ole reittiä, Scrat kääntyy vasemmalle.'
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: 'Se tekee päätöksen ja suorittaa yhden kahdesta toimenpiteesta päätökseen perustuen. Ja aivan kuten "jos"-lohkoissa, voit laittaa "jos-muuten"-lohkoja "toista"-lohkojen sisään.'
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: Autetaanpa Scrat-oravaa saamaan tammenterho!
    function:
      1:
        image: notes/stage13_1.jpg
        text: Hei, olen Brina, insinööri Instagramilla. Funktio on joukko koodirivejä, joita haluat käyttää uudelleen ja uudelleen. Niinpä sen sijaan, että kirjoittaisit kaiken tuon koodin joka kerta, voit käyttää yhtä lohkoa.
      2:
        image: notes/stage13_2.jpg
        text: Nyt opettelemme, miten määritellään funktioita. Funktion määritelmän nurkassa on tähti. Funktion nimi kirjoitetaan ylimmälle riville.
      3:
        image: notes/stage13_3.jpg
        text: 'Määrittelyn sisällä olevat lohkot kertovat, mitä se tekee. Tämän funktion nimi on "täytä 5", ja se koostuu "toista"-lohkosta ja "täytä"-lohkosta.'
      4:
        image: notes/stage13_4.jpg
        text: 'Määritelmät ovat työtilassa, mutta maanviljelijä ei suorita funktiota ennen kuin raahaamme "täytä 5" -funktiolohkon funktiot-valikosta.'
      5:
        image: notes/stage13_5.jpg
        text: 'Laitetaanpa funktiot käytöön! '
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'Hei, olen Makinde! Opetellaanpa "niin kauan kuin" -lohkon toimintaa. '
      2:
        image: notes/stage9_6.jpg
        text: '"Niin kauan kuin" -lohko toistaa mitä tahansa asetat sen sisälle, niin kauan kuin ylhäällä oleva ehto pitää paikkansa eli on TOSI.'
      3:
        image: notes/stage9_7.jpg
        text: 'Esimerkiksi, jos maanviljelijä seisoo kasan päällä, hän jatkaa yhden lapiollisen poistamista "niin kauan kuin" hänen allaan on kasaa jäljellä.'
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: Hei, minä olen Trina ja työskentelen Pixarilla. Olen tehnyt töitä liutaan eri elokuvia, kuten esimerkiksi Shrekiin.
      2:
        image: notes/stage11_2.jpg
        text: 'Tämä on uusi "laskuri"-silmukkamme. Se suorittaa komentoja yhä uudelleen ja voit muuttaa silmukan toimintaa hieman jokaisella kerralla.'
      3:
        image: notes/stage11_3.jpg
        text: 'Tässä esimerkissä "laskuri" -silmukkamme sanoo "laske laskurilla  50:stä 90:een 10 välein" ja sen sisällä meillä on "piirrä neliö" -lohko. Raahaa "laskuri" -lohko "Muuttujat"-valikosta "pituus"-kohtaan.'
      4:
        image: notes/stage11_4.jpg
        text: Tämä tarkoittaa, että taiteilijamme aikoo piirtää neliön, jonka sivujen pituus on 50 kuvapistettä, lisätä tähän 10 ja piirtää neliön, jonka sivujen pituus on 60 kuvapistettä. Sitten hän uudelleen ja uudelleen lisää 10 kuvapistettä ja piirtää neliön, kunnes neliön sivun pituus on 90. Lopulta meillä on neliöt, joiden koot ovat 50, 60, 70, 80 ja 90.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Hei, olen Janete, ja olen insinööri Zyngalla.
      2:
        image: notes/stage15_2.jpg
        text: Mitä jos haluamme piirtää joukon kolmioita, jotka ovat kaikki eri pituisia?
      3:
        image: notes/stage15_3.jpg
        text: Voisimme kirjoittaa kaiken tuon koodin käsin, tai sitten voimme käyttää funktioita, joille annetaan parametreja.
      4:
        image: notes/stage15_4.jpg
        text: 'Tehdäksesi tämän, napsauta sinistä tähteä "piirrä kolmio" -funktion määrittelyssä. Sitten raahaa "syötä nimi" "syöte"-lohkoon.'
      5:
        image: notes/stage15_5.jpg
        text: 'Jos sitten kirjoitat "pituus" kohtaan, jossa lukee "x" ja painat rivinvaihtonäppäintä ("Enter"), olet määrittänyt pituussyötteen funktiollesi.'
      6:
        image: notes/stage15_6.jpg
        text: 'Napsauta sitten tähteä. Seuraavaksi avaa muuttujat-valikko ja raahaa "pituus"-lohko "siirry eteenpäin" -lohkoon funktiomäärityksessäsi. Raahaa myös pois vanha numero-lohko.'
      7:
        image: notes/stage15_7.jpg
        text: 'Kun haluat käyttää parametrillista funktiota, avaa Funktiot-valikko ja raahaa sieltä "piirrä kolmio arvolla pituus" -funktio.'
      8:
        image: notes/stage15_8.jpg
        text: 'Nyt voit käyttää "matematiikka"-lohkoa ja syöttää eri numeroita piirtääksesi eri kokoisia kolmioita.'
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: Onneksi olkoon! Viime pulman ratkaisussa kirjoitit koodin, joka voi ohjata minkä tahansa robotin läpi haarautumattomasta labyrintistä tai kuinka tahansa pitkästä tunnelista, oli kulkijasi sitten zombi, lintu, Mars-mönkijä tai jopa itsestään ajava auto.
      2:
        image: notes/hoc6_2.jpg
        text: Käyttämäsi peruskäsitteet esiintyvät kaikissa ohjelmissa ja mobiilisovelluksissa joita koskaan tulet käyttämään. Opimme toistosilmukat, toista kunnes -lauseet, jos-lauseet ja jos-muuten-lauseet.
      3:
        image: notes/hoc6_3.jpg
        text: Jos pidit ensimmäisestä kooditunnistasi, vieraile code.org-sivustolla jatkaaksesi tietotekniikan opintojasi! Kun suoritat 20 tunnin kurssimme, opit ohjelmoinnin perusteet ja voit ryhtyä opettelemaan miten tehdään sovelluksia puhelimille, robottien ohjeita, pelejä tai mitä tahansa.
      4:
        image: notes/hoc6_4.jpg
        text: Teknologia muuttaa kaikkea mitä teemme. Sillä ole väliä, oletko nuori tai vanha; ohjelmointi on hauskaa, se on luovaa, ja kuka tahansa voi oppia!
    20_wrapup:
      1:
        image: notes/bird.png
        text: Esityksen muistiinpanot tulossa pian!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Hei, nimeni on Lyndsey. Olen malli, näyttelijä ja kirjoitan omia sovelluksiani. Käytetään koodia liittyäksemme Annan ja Elsan seuraan, kun he tutustuvat jään taikaan ja kauneuteen.
      2:
        image: notes/frozen1_2.jpg
        text: Luot lumihiutaleita ja kuvioita luistellessasi. Tee talven ihmemaa jaettavaksi ystävillesi.
      3:
        image: notes/frozen1_3.jpg
        text: Seuraavan tunnin aikana opit koodaamisen perusasiat. Perinteinen ohjelmointi tapahtuu yleensä tekstillä, mutta me käytämme Blocklyä, jossa ohjelmia luodaan kokoamalla niitä visuaalisista lohkoista. Jopa osa yliopistoista käyttää samaa tapaa. Konepellin alla luot kuitenkin ihan oikeaa koodia.
      4:
        image: notes/frozen1_4.jpg
        text: Ohjelma on joukko ohjeita, jotka kertovat tietokoneelle mitä tehdä. Rakennetaanpa koodia, eli ohjelma, joka auttaa Elsaa luomaan yksinkertaisen viivan. Käytämme tätä myöhemmin luodessamme monimutkaisempia kuvioita.
      5:
        image: notes/frozen1_5.jpg
        text: Näyttösi on jaettu kolmeen pääosaan. Vasemmalla on jään pinta, jossa ajat ohjelmasi. Ohjeet kullekin tasolle on kirjoitettu juuri jäänpinnan alle.
      6:
        image: notes/frozen1_6.jpg
        text: Keskimmäinen alue on työkaluvalikko, ja jokainen näistä lohkoista on toiminto jonka Elsa ja Anna voivat tehdä.
      7:
        image: notes/frozen1_7.jpg
        text: 'Valkoista aluetta oikealla kutsutaan työtilaksi ja siinä rakennamme ohjelmamme. Liikkuaksesi jääpinnalla, käytä "Liiku eteenpäin"-lohkoa.'
      8:
        image: notes/frozen1_8.jpg
        text: 'Tässä "Liiku eteenpäin"-lohko sanoo "liiku eteenpäin 100 kuvapistettä". Kun painat "Suorita", mitä tapahtuu? Elsa siirtyy eteenpäin tietyn määrän ruudulla, itse asiassa 100 kuvapistettä! Kuvapisteet ovat hyvin pieniä neliöitä tietokoneesi ruudulla.'
      9:
        image: notes/frozen1_9.jpg
        text: 'Toinen lohko joka meillä on tässä tehtävässä sanoo "käänny oikealle 90 astetta". Ja kun käytämme tätä "Käänny oikealle"-lohkoa, saamme Elsan kääntymään tietyn määrän. Voit kokeille erilaisia arvoja nähdäksesi kuinka kauas haluat Elsan kääntyvän. Kulma mitataan reitiltä Elsan edessä. Joten, tämä on 90 asteen käännös. Ja tämä on 120 asteen käännös.'
      10:
        image: notes/frozen1_10.jpg
        text: Muista, voit muuttaa kuvapisteiden tai asteiden määrää napsauttamalla nuolta niiden vieressä.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: Hei, olen Paola! Tietokoneet ovat tosi hyviä toistamaan toimenpiteitä. Sinä voit laskea 10, 20 tai 100:aan, mutta tietokone voi laskea miljardeihin tai vielä suurempiin lukuihin. Se ei kyllästy ja sillä kuluu siihen aikaa vain muutamia sekunteja. Mitä tahansa se tekee – laskee, piirtää tai jotain muuta – tietokone pystyy toistamaan asioita satoja tai vaikka miljardeja kertoja.
      2:
        image: notes/frozen2_2.jpg
        text: 'Ohjelmoinnissa tätä kutsutaan silmukaksi. Silmukalla toistat koodiasi kerta toisensa jälkeen. Seuraavassa tehtävässä sinun tulee auttaa Annaa luomaan neliö käyttäen "Toista"-lohkoa.'
      3:
        image: notes/frozen2_3.jpg
        text: 'Mitkä tahansa koodilohkot jotka laitat "Toista"-lohkon sisälle, toistetaan sarjassa niin monta kertaa kuin haluat.'
      4:
        image: notes/frozen2_4.jpg
        text: 'Piirtääksesi neliön, voit käyttää "Liiku eteenpäin" ja "Käänny oikealle" -lohkoja neljä kertaa. Mutta helpompaa on kertoa tietokoneelle "Liiku eteenpäin" ja "Käänny oikealle 90 astetta" kerran ja käskeä sitä toistamaan tämä toimintopari 4 kertaa. Tehdäksesi tämän, sinun täytyy laittaa "Liiku eteenpäin" ja "Käänny oikealle" -lohkot "Toista"-lohkon sisään.'
      5:
        image: notes/frozen2_5.jpg
        text: 'Muista, voit muuttaa "Toista"-lohkoissa olevaa numeroa miksi tahansa. Sen sisältö toistetaan numeron määräämä määrä kertoja.'
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Hei, olen Chris Bosh. Olen koripalloammattilainen ja koodasin yliopistossa.
      2:
        image: notes/frozen3_2.jpg
        text: Yksi tietojenkäsittelytieteen tärkeimmistä käsitteistä on uusien komentojen luominen. Suurimmassa osassa ohjelmointikieliä on vain 100 käskysanaa tai komentoa. Ohjelmoinnin taika onkin omien uusien sanojen määrittely ja rakentaminen näistä rakennuspalikoista.
      3:
        image: notes/frozen3_3.jpg
        text: Opetettuasi tietokoneen tekemään toiminnon käyttäen tätä toimintosarjaa, voit keksiä sille nimen ja sillä tavalla tehdä sen toistamisesta helpompaa. Kun määritellä oman käskysi ja antaa sille nimen, sitä kutsutaan funktioksi.
      4:
        image: notes/frozen3_4.jpg
        text: Hei, olen Jess. Ohjelmoidessasi lohkoilla, voit käyttää funktioita kun on joukko toimintoja, jotka haluaisit tehdä monta kertaa. Esimerkiksi, olet kirjoittanut koodia luodaksesi neliön.
      5:
        image: notes/frozen3_5.jpg
        text: 'Voit määritellä tämän funktiona, jonka nimi on "Luo neliö" '
      6:
        image: notes/frozen3_6.jpg
        text: Nyt sinulla on uusi lohko, jota voit käyttää kerta toisensa jälkeen luodaksesi määrättömästi uusia neliöitä.
      7:
        image: notes/frozen3_7.jpg
        text: Monia yksinkertaisia kuvioita voidaan käyttää monimutkaisten kuvioiden piirtämiseen. Seuraavassa tehtävässä juuri piirtämäsi ympyrän koodi on saatavilla uutena funktiona, joka tekee eri kokoisia ympyröitä. Osaatko käyttää sitä auttaaksesi Elsaa luomaan taidokkaita ja kauniita kuvioita jäähän?
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: Tähän mennessä olemme tehneet animaation tai tarinan, joka tekee samat asiat joka kerta suoritettaessa. Nyt voit tehdä oman vuorovaikutteisen pelin, jota voi oikeasti pelata.
      2:
        image: notes/playlab_2.png
        text: 'Tarjolla on "kun nuoli" ja "liikuta hahmoa" -lohkot. Voit laittaa nämä lohkot yhteen ja liikuttaa hahmoja ympäriinsä nuolinäppäimillä.'
      3:
        image: notes/playlab_3.png
        text: Ja on joitain lohkoja, joilla voi tehdä asioita kun hahmot törmäävät tai niitä napsautetaan. Katso ja kokeile, ja pidä hauskaa!
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: "We're going to create games using Play Lab. Good games have a story, and every story has actors. We'll learn how to make our actors like witches, alinens, and animals speak, move, and interact with each other. By the end of this tutorial, you can build a game from scratch and share it with your friends."
      2:
        image: notes/playlab_intro_2.png
        text: Your screen is split into 3 main parts. On the left is the game space where your program will run. The instructions for each level are written below.
      3:
        image: notes/playlab_intro_3.png
        text: "The middle area is the toolbox, and each of these blocks is a piece of code. The white space on the right is called the workspace and this is where we'll build our program."
      4:
        image: notes/playlab_intro_4.png
        text: |-
          To start off, you'll need to link your blocks to the orange "when run" block. You can link multiple blocks together by dragging them out until you see the yellow line, and then they'll snap together.
      5:
        image: notes/playlab_intro_5.png
        text: |-
          In this first puzzle, our actor is a penguin and we'll be making it say "Hello!" by dragging the say block out, linking it to the when run block, and typing in "Hello." We can also make the penguin move by using the move right and move left blocks. Once you have your blocks in place, hit the run button to see what you've programmed.
      6:
        image: notes/playlab_intro_6.png
        text: "Get started and by the end, you'll be able to create your own game with all kinds of players that can interact, turn happy or sad, score points, or throw fireballs, or even vanish each other. It's all up to you and the game you want to make."
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: "Now, we're going to learn about something that all game programmers use everyday. They're called events. An event tells your program to listen for when something happens. When that thing happens, it performs an action."
      2:
        image: notes/playlab_events_2.png
        text: Some examples of events are listening for a mouse click, an arrow button, or a tap on the screen.
      3:
        image: notes/playlab_events_3.png
        text: |-
          Here, we're going to make the space bot greet the earthlings when a player clicks on him. We'll use the "when clicked" block and attach the "say" block to it. When the player clicks on the space bot, everything attached to this "when clicked" event block will be performed. What does your alien say?
      4:
        image: notes/playlab_events_4.png
        text: 'There are also "when arrow" blocks. If you link the "move" blocks to these, you can start to move your actors up, down, left, or right. Step by step, your game is getting more interactive.'
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: 'This is the "repeat forever" block. Anything inside this block will happen forever in the game.'
      2:
        image: notes/playlab_repeat_forever_2.png
        text: |-
          If we want an actor to do something repeatedly, without the player having to do anything, we'll put those blocks inside the "repeat forever" block.
      3:
        image: notes/playlab_repeat_forever_3.png
        text: In this next puzzle, our goal is to help the wizard patrol the boundaries of the kingdom, left and right continuously. Learning how the repeat commands works, will save you a ton of time later when you build your own game.
