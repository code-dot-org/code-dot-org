fr:
  data:
    instructions:
      2-3 Artist 1 new_instruction: "Salut ! Je suis un artiste. Tu peux écrire du code pour me faire dessiner presque n'importe quoi. Utilise quelques blocs pour me faire repasser sur les lignes grises de l'image. (Chaque ligne a une longueur d'environ 100 pixels.)"
      2-3 Artist 11_instruction: 'Ajoute une ligne au panneau stop en dessinant un octogone de 8 côtés, chacun faisant 100 pixels de long. Quel angle de rotation choisirais-tu ? (Indice : Combien font 360/8 ?) '
      2-3 Artist 12_instruction: "Utilise le bloc « répéter plusieurs fois » pour créer un « cercle » qui complètera le globe. Si chaque mouvement effectue une rotation d'1 degré sur la droite, combien de répétitions dois-tu effectuer ? 180 ? 360 ? 500 ?"
      2-3 Artist 2 new_instruction: 'Cette maison a un mur à moitié fini. Chaque côté a une valeur de 100, mais le mur à moitié fini a une valeur de 50. Termine le mur. '
      2-3 Artist 2_instruction: 'Le mur de cette maison est à moitié terminé. Chaque côté a une longueur de 100, mais le mur à moitié fait a une hauteur de 50. Finis le mur. '
      2-3 Artist 3.4_instruction: "Le bloc de saut déplace l'artiste sans rien dessiner. Dessine la ligne pointillée en utilisant les blocs de saut et de dessin."
      2-3 Artist 3_instruction: Ce chapeau a une taille de 100 pixels de haut. Dessine un chapeau qui fait 70 pixels de moins.
      2-3 Artist 3new_instruction: Le chapeau rouge fait 100 pixels de haut. Finis de dessiner un chapeau noir qui est plus court de 70 pixels. La largeur du chapeau noir est de 50 pixels.
      2-3 Artist 4_instruction: Aide-moi à terminer la maison pour ce chat.
      2-3 Artist 5_instruction: "Refais ce code avec un bloc « répéter plusieurs fois » pour dessiner la même maison à l'aide de seulement 3 blocs."
      2-3 Artist 6_instruction: "Cette maison a besoin d'un toit ! Dessine le triangle. Astuce : les 3 côtés sont égaux."
      2-3 Artist 7_instruction: |
        Termine en dessinant la moitié droite de la dernière fenêtre.
        Chaque carré de la fenêtre fait 25 pixels. 
      2-3 Artist 8_instruction: Complète les chambres pour chacun des animaux en divisant le rectangle en 2 carrés égaux. Le rectangle fait 200 pixels de large et 100 pixels de haut.
      2-3 Artist 9_instruction: Termine ce cerf-volant
      2-3 Artist Assessment 1_instruction: 'Évaluation : Termine la dernière dent, de 25 pixels de large et 25 pixels de hauteur.'
      2-3 Artist Debugging 1_instruction: Peux-tu faire en sorte que le haut du chapeau ait une longueur de 100 ?
      2-3 Artist Debugging 10_instruction: 'Le bouton de direction de ma manette de jeu est trop étroit. Astuce : rends-le plus large de 10 pixels.'
      2-3 Artist Debugging 11_instruction: Aide moi à terminer mon magnifique flocon de neige. Combien de fois ai-je besoin de « répéter » pour le finir ?
      2-3 Artist Debugging 12_instruction: "Je suis censé ajouter une vague d'océan à cette scène.  Est-ce que tu peux m'aider?"
      2-3 Artist Debugging 2_instruction: 'Le code pour les trois moustaches que tu vois est erroné. Astuce : chaque moustache est longue de 75 pixels. Corrige ce code pour dessiner les moustaches.'
      2-3 Artist Debugging 3_instruction: "Mon bateau a un trou ! Peux-tu y remédier en changeant l'angle de la ligne ? Astuce : le dernier angle est dévié de 15 degrés."
      2-3 Artist Debugging 4_instruction: "Quelle est l'image que nous essayons de dessiner ? Finis de relier les points en utilisant les angles et les lignes appropriées."
      2-3 Artist Debugging 5_instruction: 'Le code pour la jambe et le pied que tu vois est erroné. Astuce : le pied est trop long, nous devrons peut-être enlever un pas (jeu de mot volontaire).'
      2-3 Artist Debugging 6_instruction: On dirait que je suis assis sur une chaise à laquelle il manque un pied. Modifie les blocs pour dessiner le pied.
      2-3 Artist Debugging 7_instruction: On dirait que le C est dessiné dans le mauvais sens dans le code. Peux-tu le faire ressembler à un C ?
      2-3 Artist Debugging 8_instruction: "Mon moulinet n'est pas complet. Combien de fois dois-je le répéter pour le terminer ?"
      2-3 Artist Debugging 9_instruction: "Le code de cette tige est incorrect. Astuce : l'angle est dévié de 60 degrés."
      2-3 Artist Debugging Assessment 1_instruction: "Cette forme est trop petite. Peux-tu l'agrandir ? Astuce : elle devrait avoir 75 pixels de plus de chaque côté."
      2-3 Artist Free Play_instruction: Jeu libre ! Dessine tout ce que tu veux.
      2-3 Artist Functions 1_instruction: 'Salut. Moi artiste zombie. Moi aime dessiner ! Toi aider moi à dessiner les verres carrés. Astuce : le pont entre les verres fait 25 pixels de moins que la longueur du carré.'
      2-3 Artist Functions 10_instruction: "Voici deux fonctions : une pour dessiner une grande roue et l'autre pour dessiner un petit engrenage. Utilise-les pour dessiner l'intérieur d'une machine !"
      2-3 Artist Functions 11.5_instruction: Voici encore la même fonction « dessiner un hexagone ». Que se passe-t-il si tu tournes seulement de 60 degrés à chaque fois que tu exécutes la boucle ?
      2-3 Artist Functions 11_instruction: "Nous avons renommé la fonction « dessiner un carré » en « dessiner un hexagone », mais elle dessine encore des carrés ! Peux-tu modifier la fonction « dessiner un hexagone » pour dessiner un hexagone avec des côtés de 50 pixels et dessiner l'image en utilisant cette fonction ?"
      2-3 Artist Functions 12_instruction: 'Les fonctions sont très pratiques pour dessiner des choses complexes plusieurs fois. Peux-tu utiliser la fonction « dessiner une fleur » pour remplir le reste du bac de plantes ? (Astuce : les plantes sont toutes séparées par une longueur de 100 pixels) '
      2-3 Artist Functions 13_instruction: "Voici quatre fonctions. Utilise les comme bon te semble à l'intérieur d'une ou plusieurs boucles pour faire des images que tu pourras partager avec tes amis. Appuie sur Démarrer pour voir un exemple."
      2-3 Artist Functions 2_instruction: Les fonctions te permettent de définir de nouveaux blocs ! Nous avons déplacé les blocs permettant de dessiner un carré dans une fonction appelée « dessiner un carré ». Peux-tu utiliser la fonction « dessiner un carré » pour créer les verres ? Les carrés sont espacés de 75 pixels.
      2-3 Artist Functions 3_instruction: Modifie la fonction pour dessiner un carré de 115 pixels de côté et dessine les plus grands verres. Les carrés sont maintenant espacés de 45 pixels.
      2-3 Artist Functions 4_instruction: Utilise le bloc « répéter » pour dessiner ces 3 carrés.
      2-3 Artist Functions 7_instruction: "Utilise la fonction « dessiner une maison » pour dessiner les deux maisons à l'aide de deux paramètres différents. (Astuce : la première maison fait 100 pixels.)"
      2-3 Artist Functions 9_instruction: "Voici une fonction pour le flocon de neige. Expérimente la pour créer une scène d'hiver ! Il s'agit d'un niveau de jeu libre, donc il n'y a aucun puzzle à résoudre. Amuse toi !"
      2-3 Artist Loops 1_instruction: "Peux-tu tracer un hexagone avec des côtés de 100 pixels de long pour terminer la cellule ? N'oublie pas, cela signifie que tu devras seulement tourner de 60 degrés !"
      2-3 Artist Loops 10_instruction: "Qu'arrive-t-il à la conception, lorsque nous faisons notre dernier pas deux fois moins long ?"
      2-3 Artist Loops 11_instruction: "Maintenant mettons une *autre* boucle autour de l'ensemble de notre création !  N'oublie pas d'ajouter un angle à la fin de la boucle externe."
      2-3 Artist Loops 2_instruction: Maintenant, utilise un bloc répéter pour que la cellule devienne une coquille.
      2-3 Artist Loops 4_instruction: "Veux-tu voir ce qu'il se passe lorsque nous répétons cette forme encore et encore à l'aide d'une boucle ?"
      2-3 Artist Loops 5_instruction: Maintenant faisons un petit changement à la boucle et voyons comment cela change notre image.
      2-3 Artist Loops 6_instruction: "Ajoute un déplacement et un tour supplémentaire à l'intérieur de la boucle et vois l'évolution de ton dessin."
      2-3 Artist Loops 7_instruction: "Nous pouvons utiliser les boucles pour faire toutes sortes de polygones.  Peux-tu créer un losange à l'intérieur de cet hexagone ?"
      2-3 Artist Loops 8_instruction: "Mettons les deux éléments à l'intérieur d'une boucle."
      2-3 Artist Loops 9_instruction: "Nous allons boucler sur les mêmes éléments, mais maintenant nous allons ajouter quelques distance entre eux. \\r Utilise le même code que précédemment, mais ajoute un pas en avant à la fin de la boucle externe."
      2-3 Artist Loops New 1_instruction: Dessinons la tête de ce robot ! Peux-tu faire un carré de 100 pixels de côté ?
      2-3 Artist Loops New 10_instruction: Maintenant connectons ensemble plusieurs V, en les dessinant dans une boucle.
      2-3 Artist Loops New 11_instruction: Cette fois nous allons le dessiner 24 fois. Ajoute un virage à gauche de 30 degrés à ce code et mets le tout dans un bloc Répéter.
      2-3 Artist Loops New 12_instruction: |
        Dessine un losange avec des côtés de 100 pixels.
        
      2-3 Artist Loops New 13_instruction: Maintenant dessine le losange 3 fois dans une boucle.
      2-3 Artist Loops New 14_instruction: Maintenant nous allons dessiner le losange 10 fois mais en pivotant de 90 degrés entre chaque losange.
      2-3 Artist Loops New 15_instruction: "Dessine quelque chose d'amusant."
      2-3 Artist Loops New 2_instruction: Voici une partie du code que tu as utilisé pour dessiner ce carré. Que se passe-t-il si tu utilises le bloc Répéter pour exécuter ce code 4 fois ?
      2-3 Artist Loops New 9_instruction: Pour terminer la flèche, dessine un simple V dont les deux parties font 50 pixels de long.
      2-3 Artist Match Hex Pic_instruction: "Correspondances : Aide à terminer l'hexagone."
      2-3 Artist Match Rho Pic_instruction: 'Correspondances : Termine le code manquant.'
      2-3 Artist Match Sq Pic_instruction: 'Correspondances : Complète le code manquant'
      2-3 Artist Match Tri pic_instruction: 'Correspondances : Renseigne le code manquant.'
      2-3 Artist Nested Loops 1_instruction: "Tu as utilisé des boucles pour dessiner des formes avant, mais savais-tu que tu peux mettre une boucle à l'intérieur d'une autre boucle ? \\r \nFais boucler tout ce bloc de code 3 fois pour dessiner le motif."
      2-3 Artist Nested Loops 10_instruction: Fais boucler ce code 12 fois pour compléter le motif.
      2-3 Artist Nested Loops 11_instruction: Fais boucler ce code 4 fois pour compléter le motif, en tournant de 90 degrés après chaque cercle.
      2-3 Artist Nested Loops 12_instruction: Fais boucler ce code 12 fois pour compléter les boucles.
      2-3 Artist Nested Loops 2_instruction: Maintenant fais boucler le triangle 6 fois. Après chaque triangle, tu devras tourner de 60 degrés avant de dessiner le suivant.
      2-3 Artist Nested Loops 3_instruction: Tu auras besoin de boucler le triangle 12 fois pour dessiner ce motif. Divise le nombre de degrés dans un cercle (360) par le nombre de formes que tu dessines (12) pour découvrir de combien est-ce que tu devras tourner après chaque forme.
      2-3 Artist Nested Loops 4_instruction: 'Fais boucler ce losange 12 fois pour dessiner une fleur. Conseil : les 12 losanges sont juste comme les 12 triangles, que tu as fait - de combien est-ce que tu devras tourner après chaque forme ?'
      2-3 Artist Nested Loops 5_instruction: Remplis les fenêtres de ce bâtiment avec une boucle imbriquée. Les fenêtres mesurent 20 pixels de longueur et sont séparées de 20 pixels.
      2-3 Artist Nested Loops 6_instruction: "Ce dinosaure a 8 pointes sur sa queue ; chaque pointe mesure 30 pixels. Fais boucler le triangle 8 fois, mais n'oublie pas d'avancer après chacun d'eux."
      2-3 Artist Nested Loops 7_instruction: "Fais boucler ce triangle 10 fois pour dessiner le soleil. Tu devras te déplacer et tourner après chaque triangle. Tu peux déterminer l'angle de rotation en divisant le nombre de degrés dans un cercle par le nombre de formes qui composent ton soleil."
      2-3 Artist Nested Loops 8_instruction: "Maintenant nous allons ajouter quelques herbes à notre image. Les touffes d'herbe sont séparées de 50 pixels."
      2-3 Artist Nested Loops 9_instruction: Nous allons terminer ce dessin en ajoutant une fleur. Fais boucler le losange 12 fois pour dessiner ta fleur.
      2-3 Artist Nested Loops Free Play_instruction: Activité libre, dessine quelque chose de cool avec des boucles imbriquées.
      2-3 Bee Conditionals 1_instruction: Salut ! Je suis une abeille. Aide moi à récolter le nectar de la fleur.
      2-3 Bee Conditionals 10_instruction: "Les fleurs violettes peuvent avoir 1 ou 0 nectar. Veille à ne pas butiner une fleur violette si celle-ci n'en possède pas.\\r\n"
      2-3 Bee Conditionals 11_instruction: Butine sur les fleurs qui ont du nectar.
      2-3 Bee Conditionals 12_instruction: Utilise une boucle pour vérifier et récolter le nectar de toutes ces fleurs.
      2-3 Bee Conditionals 13_instruction: |
        Récolte du nectar et produit du miel. Astuce : 
        que se passe-t-il si tu utilises la condition "si nectar" sur une fleur rouge ? Peux-tu compléter ceci avec une boucle ?
      2-3 Bee Conditionals 14_instruction: "Récolte le nectar et fais du miel. Veille à ne pas butiner de fleur violette si elle n'a pas de nectar."
      2-3 Bee Conditionals 15_instruction: Collecte le nectar des quatre fleurs.
      2-3 Bee Conditionals 2_instruction: Salut, je suis une abeille ! Aide moi à récolter tout le nectar des fleurs. Utilise une boucle.
      2-3 Bee Conditionals 3_instruction: Aide moi à récolter tout le nectar des fleurs et produire le miel. Utilise une boucle.
      2-3 Bee Conditionals 4_instruction: Aide moi à récolter tout le nectar des fleurs et produire tout le miel.
      2-3 Bee Conditionals 5_instruction: "Les fleurs violettes peuvent avoir 1 ou 0 nectar, mais tu ne sais pas lesquelles ! Veille à ne pas butiner de fleur violette si elle n'en a pas. Vérifie si le nectar est égal à 1 à l'aide du bloc « si »."
      2-3 Bee Conditionals 6_instruction: "Vérifie cette fleur avec un bloc « si » pour voir s'il y a du nectar disponible."
      2-3 Bee Conditionals 7_instruction: Butine chaque fleur qui a du nectar.
      2-3 Bee Conditionals 8_instruction: Ce champ possède des fleurs rouges et violettes. Les fleurs rouges ont une quantité connue de nectar, mais la quantité de nectar de la fleur violette est inconnu. Récolte tout le nectar.
      2-3 Bee Conditionals 9_instruction: Récolte tout le nectar de chaque fleur.
      2-3 Bee Conditionals Assessment 1_instruction: "Évaluation : Récolte tout le nectar. Veille à ne pas butiner de fleur violette si elle n'a pas de nectar."
      2-3 Bee Debugging 1_instruction: Ces blocs sont vraiment casse-pieds. Corrige la ou les erreur(s) afin de récolter tout le nectar et produire tout le miel.
      2-3 Bee Debugging 10_instruction: Ces blocs sont vraiment casse-pieds. Corrige la ou les erreur(s) afin de récolter tout le nectar et produire tout le miel.
      2-3 Bee Debugging 2_instruction: Ces blocs sont vraiment casse-pieds. Corrige la ou les erreur(s) afin de récolter tout le nectar et produire tout le miel.
      2-3 Bee Debugging 3_instruction: Ces blocs sont vraiment casse-pieds. Corrige la ou les erreur(s) afin de récolter tout le nectar et produire tout le miel.
      2-3 Bee Debugging 4_instruction: Ces blocs sont vraiment casse-pieds. Corrige la ou les erreur(s) afin de récolter tout le nectar et produire tout le miel.
      2-3 Bee Debugging 5_instruction: Ces blocs sont vraiment casse-pieds. Corrige la ou les erreur(s) afin de récolter tout le nectar et produire tout le miel. Tu peux maintenant utiliser exécuter et étape.
      2-3 Bee Debugging 6_instruction: "Ces blocs sont vraiment casse-pieds. Corrige la ou les erreur(s) afin de recueillir l'ensemble du nectar et faire tout le miel. "
      2-3 Bee Debugging 7_instruction: Ces blocs sont vraiment casse-pieds. Corrige la ou les erreur(s) afin de récolter tout le nectar et produire tout le miel.
      2-3 Bee Debugging 8_instruction: Ces blocs sont vraiment casse-pieds. Corrige la ou les erreur(s) afin de récolter tout le nectar et produire tout le miel.
      2-3 Bee Debugging 9_instruction: Ces blocs sont vraiment casse-pieds. Corrige la ou les erreur(s) afin de récolter tout le nectar et produire tout le miel.
      2-3 Bee Debugging Assessment 1_instruction: 'Évaluation : Ces blocs sont vraiment casse-pieds. Corrige la ou les erreur(s) afin de récolter tout le nectar et produire tout le miel.'
      2-3 Bee Functions 1_instruction: Les fonctions sont des blocs de code qui effectuent une tâche. Utilise la fonction « obtenir 2 nectars » pour récolter le nectar de chaque fleur.
      2-3 Bee Functions 10_instruction: 'Les fleurs violettes peuvent avoir 1 ou 0 nectar.  Crée une fonction qui récolte du nectar seulement sur les fleurs violettes qui en ont.'
      2-3 Bee Functions 2_instruction: Les fonctions sont des blocs de code qui effectuent une tâche. Utilise la fonction « obtenir 5 » pour récolter 5 nectars à la fois. Veille aussi à utiliser une boucle pour obtenir un nombre de blocs idéal.
      2-3 Bee Functions 3_instruction: Récolte tout le nectar de chaque fleur.
      2-3 Bee Functions 4_instruction: "La fonction « déplacer et obtenir le nectar » (move and get nectar) déplace l'abeille, récolte le nectar et renvoie l'abeille là où elle a commencé. Utilise la fonction pour récolter tout le nectar."
      2-3 Bee Functions 5_instruction: |
        Il y a maintenant plus de nectar dans les fleurs. 
        Modifie la fonction donnée afin qu'elle recueille 4 nectars et utilise-la pour recueillir l'ensemble du nectar des fleurs.
      2-3 Bee Functions 6_instruction: Maintenant, utilise la même fonction pour récolter le nectar des trois fleurs.
      2-3 Bee Functions 7_instruction: Les fleurs sont maintenant plus loin. Modifie la fonction donnée et utilise la pour récolter tout le nectar des fleurs.
      2-3 Bee Functions 8_instruction: "Crée ta propre fonction qui récolte 7 nectars, se déplace vers l'avant et produit 7 miels. Utilise cette fonction pour récolter du nectar sur chaque fleur et faire du miel à chaque nid d'abeille."
      2-3 Bee Functions 9_instruction: "Créer ta propre fonction qui descend un chemin, récolte du nectar, produit du miel, puis renvoie l'abeille vers le haut du chemin."
      2-3 Bee Functions Assessment 1_instruction: 'Évaluation : Utilise la fonction donnée pour récolter le nectar de chaque fleur.'
      2-3 Bee Functions Assessment 2_instruction: 'Évaluation : Crée une fonction pour produire 3 miels à la fois.'
      2-3 Bee Loops 1_instruction: 'Chaque fleur contient une unité de nectar. Récolte le nectar de chacune des fleurs. '
      2-3 Bee Loops 10_instruction: |-
        Peux-tu utiliser une boucle "tant que" à l'intérieur de deux autres boucles pour récolter tout le nectar ?
      2-3 Bee Loops 11_instruction: 'Utilise des boucles "Tant que" pour récolter tous le nectar des fleurs dans ce terrain.'
      2-3 Bee Loops 12_instruction: 'Utilise des boucles "Tant que" pour récolter tous le nectar des fleurs dans ce terrain.'
      2-3 Bee Loops 13_instruction: 'Évaluation : Utiliser le bloc "répéter" pour récolter tout le nectar.'
      2-3 Bee Loops 1A_instruction: "Salut, je suis une abeille. Peux-tu m'aider à récolter le nectar de ces fleurs ? "
      2-3 Bee Loops 2_instruction: Utilise une boucle pour récolter le nectar et produire du miel.
      2-3 Bee Loops 2A_instruction: Peux-tu faire la même action plus facilement avec une boucle ?
      2-3 Bee Loops 3_instruction: "Récolte le nectar de chaque fleur et produit du miel dans chaque nid d'abeille."
      2-3 Bee Loops 3A_instruction: Peux-tu utiliser une boucle pour collecter tout ce nectar ?
      2-3 Bee Loops 3B_instruction: 'Maintenant, utilise un nouveau bloc "répéter" pour collecter tout le nectar et produire tout le miel.'
      2-3 Bee Loops 4_instruction: Utilise une boucle semblable au dernier puzzle, mais rajoute un tour dedans.
      2-3 Bee Loops 4A_instruction: "Que se passe-t-il si tu fais répéter cette séquence 3 fois ? N'oublie pas de produire le miel à la fin !"
      2-3 Bee Loops 5_instruction: Utilise une boucle pour descendre les marches et récolter le nectar.
      2-3 Bee Loops 6_instruction: "Utilise une boucle pour récolter le nectar de chaque fleur et produire du miel dans chaque nid d'abeille."
      2-3 Bee Loops 7_instruction: Mets ces blocs dans une boucle pour récolter le nectar de chaque fleur.
      2-3 Bee Loops 8_instruction: |-
        Ces fleurs ont une quantité inconnue de nectar. Utilise la boucle "tant qu'il y a du nectar" pour récolter l'ensemble du nectar. Cette boucle s'exécutera tant que la condition est vraie, dans ce cas Nectar > 0.
      2-3 Bee Loops 9_instruction: |-
        La boucle "Tant que" peut exécuter la même action qu'une instruction "Si" dans une boucle. Ajoute une boucle "Tant que" à ce code pour effectuer la même tâche.
      2-3 Bee Loops Assessment 1_instruction: 'Évaluation - Utilise une boucle "Tant que" pour récolter tout le nectar de cette fleur.'
      2-3 Maze 1_instruction: "Peux-tu m'aider à attraper le vilain cochon ? Empile un ensemble de blocs « avancer » et appuie sur « Démarrer ». "
      2-3 Maze 10_instruction: "Guide-moi jusqu'à cette maudite créature verte ! (Fais attention aux explosifs…)"
      2-3 Maze 11_instruction: "Amène-moi à la fleur, j'ai faim ! Combien de fois dois-tu répéter un bloc ?"
      2-3 Maze 12 (copy 1)_instruction: "Peux-tu remplacer la réponse précédente avec seulement deux blocs ? (Astuce : crée une boucle à l'aide d'un bloc « répéter N fois ».)"
      2-3 Maze 12 (copy 2)_instruction: "Peux-tu remplacer la réponse précédente avec seulement deux blocs ? (Astuce : crée une boucle à l'aide d'un bloc « répéter N fois ».)"
      2-3 Maze 12 (old)_instruction: |-
        Emmène moi jusqu'au cochon, en utilisant cette fois le bloc "Répéter plusieurs fois" !
      2-3 Maze 12_instruction: |
        Peux-tu remplacer ces 5 blocs avec seulement 2 blocs ?
        (Astuce : tu dois créer une boucle avec le bloc "répéter plusieurs fois" pour passer au niveau suivant)
      2-3 Maze 13 (old)_instruction: |-
        Emmène moi jusqu'au cochon, en utilisant cette fois le bloc "Répéter jusqu'à" !
      2-3 Maze 13_instruction: "Emmène moi jusqu'au cochon en utilisant seulement deux blocs."
      2-3 Maze 14 (old)_instruction: |-
        Emmène moi jusqu'au cochon en utilisant le bloc "Répéter jusqu'à" !
      2-3 Maze 14_instruction: |-
        Emmène-moi jusqu'au tournesol ! (où diable est ce bloc "Répéter plusieurs fois" lorsqu'on a besoin de lui ?)
      2-3 Maze 15 (old)_instruction: |-
        Emmène moi jusqu'au cochon en utilisant le bloc "Répéter jusqu'à" !
      2-3 Maze 15_instruction: "Utilise deux boucles pour aller jusqu'au cochon en utilisant moins de blocs."
      2-3 Maze 16 (old)_instruction: |-
        Emmène moi jusqu'au cochon en utilisant le bloc "Répéter jusqu'à" !
      2-3 Maze 16 before_instruction: "Emmène-moi jusqu'au cochon."
      2-3 Maze 16_instruction: "Emmène moi jusqu'au tournesol. Fais tourner la séquence en boucle !"
      2-3 Maze 2_instruction: "Ce cochon m'agace. Aide moi à l'attraper !"
      2-3 Maze 3_instruction: "Suis le chemin et conduis moi jusqu'au vilain cochon. Évite la TNT ou les plumes vont voler!"
      2-3 Maze 4_instruction: "Guide-moi jusqu'à cette maudite créature verte ! (Fais attention aux explosifs…)"
      2-3 Maze 5_instruction: "Guide-moi jusqu'à cette maudite créature verte ! (Fais attention aux explosifs…)"
      2-3 Maze 6_instruction: "Reste calme et aide moi a trouver ce vilain cochon. Autrement je pourrais m'énerver!"
      2-3 Maze 7_instruction: "Guide-moi jusqu'à cette maudite créature verte ! (Fais attention aux explosifs…)"
      2-3 Maze 8_instruction: "Amène moi jusqu'au cochon !"
      2-3 Maze 9_instruction: "Guide-moi jusqu'à cette maudite créature verte ! (Fais attention aux explosifs…)"
      2-3 Maze Loops 1_instruction: "Peux-tu m'amener au cochon en utilisant 5 blocs?"
      2-3 Maze Loops 17_instruction: "Amène moi jusqu'au tournesol !"
      2-3 Maze Loops 18_instruction: "Amène moi jusqu'au tournesol !"
      2-3 Maze Loops 19_instruction: "Amène moi jusqu'au tournesol !"
      2-3 Maze Loops 20_instruction: "Amène moi jusqu'au tournesol !"
      2-3 Maze Loops 21_instruction: "Amène moi jusqu'au tournesol !"
      2-3 Maze Loops Assessment 1_instruction: "Évaluation : amène moi jusqu'au tournesol en utilisant seulement 5 blocs !"
      2-3 Maze sq1_instruction: |
        This pig is ruffling my feathers.  Help me find
        him!
      2-3 Maze sq10_instruction: "Emmène moi jusqu'au cochon ! Quels blocs sont répétés ?"
      2-3 Maze sq10v2_instruction: "Emmène moi jusqu'au cochon ! Quels blocs sont répétés ?"
      2-3 maze sq11_instruction: "Emmène moi jusqu'au cochon ! Quels blocs sont répétés ?"
      2-3 maze sq12_instruction: 'Peux-tu remplacer la réponse par une boucle en utilisant un bloc "répéter" ?'
      2-3 maze sq13_instruction: |
        Cher humain. Moi zombie. Dois... aller... au tournesol.
        Crée boucle avec bloc "répéter jusqu'à".
      2-3 maze sq14_instruction: Peux-tu rejoindre le tournesol en utilisant uniquement quatre blocs ?
      2-3 maze sq15_instruction: Peux-tu rejoindre le tournesol en utilisant seulement cinq blocs ?
      2-3 maze sq16_instruction: "Ok, c'est similaire mais légèrement différent. Peux-tu le faire en seulement cinq blocs ?"
      2-3 Maze sq2_instruction: 'Suis le chemin et amène moi à ce stupide cochon.  Évite la TNT ou les plumes vont voler !'
      2-3 Maze sq3_instruction: "Guide-moi jusqu'à cette maudite créature verte ! (Fais attention aux explosifs…)"
      2-3 Maze sq4_instruction: "Garde ton calme et aide-moi à trouver le méchant cochon. Dans le cas contraire, je pourrais m'énerver !"
      2-3 Maze sq5_instruction: "Amène moi jusqu'au cochon ! Combien de fois dois-tu répéter un bloc ?"
      2-3 Maze sq6_instruction: "Peux-tu remplacer la réponse précédente avec seulement deux blocs ? (Astuce : crée une boucle à l'aide d'un bloc « répéter plusieurs fois ».)"
      2-3 Maze sq7_instruction: "Emmène moi jusqu'à l'intrus vert en utilisant seulement trois blocs."
      2-3 Maze sq8_instruction: |-
        Emmène moi jusqu'au cochon ! (Mais où est ce bloc "répéter" quand j'en ai besoin ?)
      2-3 Maze sq9_instruction: Crée des boucles pour rejoindre le cochon en utilisant moins de blocs.
      2-3_instruction: |
        Purple flowers may have either 1 or 0 nectar. Be careful
        not to collect nectar from a purple flower if it doesn't have any.
      2-3level1_instruction: "Aide l'oiseau à attraper le vilain cochon en le déplaçant vers l'avant."
      4-5 Artist 1_instruction: 'Aide-moi à finir de dessiner ma boîte. (Chaque ligne est longue de 300 pixels.) '
      4-5 Artist 10_instruction: 'Appuie sur "Exécuter" pour tester ton code. Puis, répète-le assez de fois pour finir le dessin. Les couleurs seront différentes à chaque fois.'
      4-5 Artist 11_instruction: Complète les lignes vertes. Les lignes font 300 pixels de longueur et sont séparées par 15 pixels.
      4-5 Artist 2_instruction: Peux-tu répéter ce code pour compléter le carré ?
      4-5 Artist 3.5_instruction: |-
        OK, essaie de deviner ce qui se passe quand tu exécutes ce code (ou appuie sur "Exécuter" pour l'essayer). Puis, répète-le assez de fois pour finir le dessin. Les couleurs seront (probablement) différentes chaque fois.
      4-5 Artist 3_instruction: |
        Ce parterre de fleurs rectangulaire a un périmètre de 600.
        Le côté le plus long a une longueur de 200. Dessine le rectangle.
      4-5 Artist 4_instruction: "Combien de degrés y'a-t-il dans un cercle ? Crée une boucle avec les blocs pour créer un cercle de couleurs."
      4-5 Artist 5_instruction: Quel angle utilises-tu ?
      4-5 Artist 6_instruction: Ce triangle équilatéral a des angles de 60 degrés chacun. Chaque côté fait 200 pixels. Complète le dessin.
      4-5 Artist 7_instruction: "Ce triangle rectangle a des angles de 30, 60 et 90 degrés. La longueur du côté penché (l'hypoténuse) est le double de la hauteur de 100 pixels. Complète le dessin."
      4-5 Artist 8_instruction: Sur un terrain de football, la ligne médiane du terrain est perpendiculaire aux lignes de touche. Ce terrain a un périmètre de 800 pixels et une longueur de 240 pixels. Quelle est sa largeur ? Trace les limites du terrain et la ligne médiane.
      4-5 Artist 9_instruction: "Dessine l'autre moitié pour que le dessin soit symétrique. Les triangles sont équilatéraux et mesurent 50 pixels de long."
      4-5 Artist Assessment 1_instruction: 'Consigne : Utilise une boucle pour dessiner le triangle équilatéral. Chaque côté fait 300 pixels.'
      4-5 Artist For Loops 1_instruction: 'Mets les nombres de 1 à 10 dans les blocs "largeur" et exécute le code.'
      4-5 Artist For Loops 11_instruction: |-
        Complète la boucle "pour" pour qu'elle compte 0, 20, 40, 60, 80... 200.
      4-5 Artist For Loops 12_instruction: "Que se passe-t-il si on échange les nombres de départ et d'arrivée ? Complète le bloc de la boucle for pour qu'il compte 200, 180, 160, 140, 120...0. "
      4-5 Artist For Loops 13_instruction: 'Cette conception a commencé sans une boucle "Pour" et prend trop de blocs !  Utilise un bloc "Pour" pour finir la spirale. Astuce : la longueur de la dernière ligne est de 250 pixels.'
      4-5 Artist For Loops 14_instruction: "Quelqu'un a commencé le code, mais a réalisé qu'il devait y avoir un moyen plus rapide! Utilise un bloc «Pour» pour remplacer les blocs et complète la spirale triangulaire (Indice: la longueur de la dernière ligne est 300 pixels."
      4-5 Artist For Loops 15_instruction: "Quelqu'un a commencé le code, mais a réalisé qu'il devait y avoir un moyen plus rapide! Utilise un bloc «Pour» pour remplacer les blocs et complète la spirale hexagonale (Indice: la longueur de la dernière ligne est 200 pixels."
      4-5 Artist For Loops 2_instruction: |
        This is a "for" block. Instead of typing
        1,2,3... 10, the "for" block can repeat the blocks inside it and count the
        numbers for you. Place the number 10 into the "to" section of the "for"
        block.
      4-5 Artist For Loops 3_instruction: Comment peut-on compter de 1 à 50? Édite le bloc «pour».
      4-5 Artist For Loops 4_instruction: "Complète le bloc «pour» pour qu'il compte de 1 à 10 par bonds de 1."
      4-5 Artist For Loops 6_instruction: Dessine des carrés avec des côtés de 50, 60, 70, 80 et 90 pixels. Tu devras utiliser la fonction «dessiner un carré» cinq fois.
      4-5 Artist For Loops 7_instruction: 'Dessine les mêmes carrés, mais utilise un bloc «compter avec» pour changer les tailles. Place le bloc «compteur» dans la fonction «dessiner une carré». Indice: Il est dans la catégorie Variables.'
      4-5 Artist For Loops 8_instruction: Peux-tu compléter le programme en plaçant des blocs dans le bloc «pour» qui compte de 10 à 200 par bonds de 10 ? Tu peux trouver le bloc «pour» dans la catégorie Boucles.
      4-5 Artist For Loops 9_instruction: Ces cercles sont de taille 5, 10, 15, 20, 25, 30, et 35. Dessine les cercles en utilisant un bloc «pour».
      4-5 Artist Free Draw 1_instruction: Dessin libre! Dessine tout ce que tu souhaites créer.
      4-5 Artist Functions 1_instruction: Utiliser une boucle de répétition pour dessiner ce triangle.
      4-5 Artist Functions 10a_instruction: Place ce code dans la fonction «Dessiner un flocon» et remplace le 50 par le paramètre «taille». La fonction est déjà appelée pour faire un flocon de neige de 100 pixels.
      4-5 Artist Functions 10b_instruction: 'Utilise la fonction « dessiner un flocon de neige » pour créer différentes tailles de flocons. Indice: le premier flocon a une largeur de 25 et les flocons suivants ont le double de la taille du précédent.'
      4-5 Artist Functions 11_instruction: "Cette fonction « dessiner un hexagone » utilise la fonction « dessiner un triangle ». Complète la fonction de l'hexagone. (Indice: Un hexagone a 6 côtés de 100 pixels chacun)"
      4-5 Artist Functions 12_instruction: "Complète la fonction « dessiner des vagues ». Chaque vague est faite d'une vague supérieure et d'une vague inférieure. Indice: Dessine 5 vagues bleues."
      4-5 Artist Functions 13 Free play_instruction: Voici des fonctions pour dessiner des planètes, des étoiles, des fusées et des robots. Utilise-les comme tu veux pour créer des images que tu peux partager avec tes amis.
      4-5 Artist Functions 14 Free play_instruction: "Ici, nous te fournissons plusieurs fonctions. Utilise-les comme tu veux à l'intérieur d'une ou plusieurs boucles pour créer des images que tu peux partager avec tes amis. Clique sur « Démarrer » pour voir un exemple."
      4-5 Artist Functions 15 Assessment_instruction: |
        Évaluation: Utilise la fonction « dessiner un carré » pour créer les carrés. Les carrés ont des tailles de 50, 100 et 150
        pixels.
      4-5 Artist Functions 2a_instruction: Maintenant, place ces blocs dans une nouvelle fonction nommée « dessiner un petit triangle » et appelle-la.
      4-5 Artist Functions 2b_instruction: Maintenant, crée une fonction nommée « dessiner un petit triangle » en utilisant les blocs fournis.
      4-5 Artist Functions 3_instruction: 'Maintenant, crée les fonction « dessiner un triangle moyen » et « dessiner un grand triangle ». La fonction « dessiner un petit triangle » a déjà été créée pour toi. Les triangles ont des longueurs de côté de 50 (petit), 100 (moyen) et 150 (grand). '
      4-5 Artist Functions 4_instruction: "Cette nouvelle fonction « dessiner un triangle » a un paramètre et peut faire le travail des trois fonctions précédentes. Dessine les mêmes triangles à l'aide de cette nouvelle fonction."
      4-5 Artist Functions 5_instruction: Peux-tu changer la fonction « dessiner un triangle » par une fonction de « dessiner un carré » afin de modifier le dessin ?
      4-5 Artist Functions 6_instruction: 'Utilise les fonctions « dessiner un carré » et « dessiner un triangle » pour dessiner une maison. (Indice : les côtés du carré mesurent 200 pixels)'
      4-5 Artist Functions 6b_instruction: "Ajoutant les fonctions « dessiner un carré » et « dessiner un triangle » ainsi que d'autres blocs à la fonction « dessiner une maison » et appelle cette fonction afin de dessiner une maison."
      4-5 Artist Functions 7_instruction: Utilise la fonction « dessiner une maison » pour dessiner des maisons de 100 pixels et 50 pixels. Les deux maisons sont séparées par 50 pixels.
      4-5 Artist Functions 8_instruction: La fonction « dessiner une fleur » a un paramètre qui permet de définir la hauteur de la tige. Règle-le à 200 pour voir ce qui se passe.
      4-5 Artist Functions 9_instruction: Dessine ces 3 fleurs. La première a une hauteur de 100 et les suivantes ont toujours une hauteur 50 pixels plus élevée que la précédente. Il y a 100 pixels entre chaque fleurs.
      4-5 Artist Patterns 1_instruction: "Peux-tu dessiner ce carré à l'aide d'une boucle ? Chaque côté mesure 20 pixels."
      4-5 Artist Patterns 10_instruction: "Ce code dessine deux rangées d'hexagones - répète le tout 4 fois pour dessiner un nid d'abeille. Indice : Tu dois revenir en arrière de 120 pixels dans la boucle externe pour éviter que l'artiste ne dessine hors de l'écran."
      4-5 Artist Patterns 11_instruction: "Combien de fois dois-tu répéter la boucle pour dessiner un demi-cercle? Indice: s'il y a 360 degrés dans un cercle et que chaque tour de boucle avance de 3 degrés, combien de fois dois-tu répéter la boucle pour dessiner un cercle complet?"
      4-5 Artist Patterns 12_instruction: "Si tu copies cette boucle et tourne à gauche plutôt qu'à droite, que se passe-t-il ? Peux-tu répéter ceci pour dessiner cette vague ?"
      4-5 Artist Patterns 13_instruction: "Essayons maintenant de répéter cette boucle quatre fois pour créer ce cadre d'image. Attention aux coins - tu ne peux pas simplement tourner de 90 degrés! Si répéter une rotation de 3 degrés 60 fois produit un demi-cercle, lequel de ces blocs de code fera un quart de tour pour les coins?"
      4-5 Artist Patterns 2_instruction: "Si tu places ta boucle de carré à l'intérieur d'une autre boucle, on appelle ça une boucle imbriquée. Que faut-il ajouter à ta boucle externe pour s'assurer que les 15 carrés soit alignés côte à côte ?"
      4-5 Artist Patterns 3_instruction: "Maintenant allons un niveau plus profond ! Nous avons imbriqué ce bloc de code dans une autre boucle, mais tu dois replacer l'artiste à la bonne place pour dessiner la ligne suivante. Lequel de ces blocs peux-tu placer à la fin de la boucle extene pour dessiner la grille entière ?"
      4-5 Artist Patterns 4_instruction: Ce diamant a des côtés de 50 pixels et des angles de 120 et 60 degrés. Utilise une boucle pour le dessiner.
      4-5 Artist Patterns 5.5_instruction: Combien de fois dois-tu répéter ce bloc pour dessiner la grille de diamants complète ?
      4-5 Artist Patterns 5_instruction: Nous allons répéter cela pour faire une rangée de 6 diamants. Remarque que nous avons changé notre code de diamant pour faire 3 répétitions plutôt que 2. Pourquoi pense-tu que nous avons fait cela ?
      4-5 Artist Patterns 6_instruction: Combien de fois dois-tu répéter ce bloc pour dessiner la grille de diamants complète ?
      4-5 Artist Patterns 7_instruction: "Nous allons modifier le code du dernier puzzle pour faire un motif plus complexe. Observe comment les diamants se chevauchent maintenant. Essaie de changer le premier « saut en arrière » de 100 à 50 (réduction de moitié). De combien l'artiste doit-il se déplacer dans le deuxième « saut en arrière » maintenant ?"
      4-5 Artist Patterns 8_instruction: Utilise une boucle pour dessiner cet hexagone avec des côtés de 40 pixels et des angles de 60 degrés.
      4-5 Artist Patterns 9.5_instruction: "Nous allons boucler ce code pour dessiner deux rangées d'hexagones. Observe comment notre deuxième rangée est décalée vers la droite."
      4-5 Artist Patterns 9_instruction: "Répète maintenant ce code 3 fois pour dessiner la ligne entière. Rappelle toi, chaque hexagone a 80 pixels de large de l'ultime point gauche à celle droite."
      4-5 Artist Patterns Free Play_instruction: 'Jeux libre- essaie de dessiner un modèle de ton choix!'
      4-5 Bee Conditionals - FC Test_instruction: "L'abeille veut seulement du nectar maintenant. Tous les objets ne sont pas des fleurs, donc vérifie sous chaque nuage pour voir si une fleur s'y cache. Si c'est le cas, alors tu peux recueillir son nectar."
      4-5 Bee Conditionals 1 (copy 1)_instruction: |
        The bee can't tell if this is
        a flower or a honeycomb. Gather nectar only from flowers, but first check
        if it is a flower or a honeycomb.
      4-5 Bee Conditionals 1_instruction: "L'abeille ne peut pas dire si c'est une fleur ou un nid d'abeilles. Ne recueille le nectar qu'à partir de fleurs, mais vérifie d'abord si c'est une fleur ou un nid d'abeilles."
      4-5 Bee Conditionals 2 (copy 1)_instruction: |
        The bee only wants nectar right
        now. Remember, not all objects are flowers, so check to gather nectar only
        at flowers.
      4-5 Bee Conditionals 2_instruction: "L'abeille veut du nectar dès maintenant. N'oublie pas, tous les objets ne sont pas des fleurs, donc vérifie pour ne recueillir le nectar que sur les fleurs."
      4-5 Bee Conditionals 3_instruction: "Maintenant l'abeille veut juste faire du miel. Vérifier pour le faire dans les nids d'abeille justement."
      4-5 Bee Conditionals 4 (copy 1)_instruction: |
        The unknown object is either
        a flower or a honeycomb. Use the if/else block to collect nectar if it is
        a flower, else to make honey (because it is a honeycomb).
      4-5 Bee Conditionals 4_instruction: "L'objet inconnu est soit une fleur ou un nid d'abeille. Utilise le bloc si/sinon pour récupérer le nectar si (if) c'est une fleur, sinon (else) pour fabriquer le miel (parce que c'est un nid d'abeille)."
      4-5 Bee Conditionals 5_instruction: |-
        Il pourrait y avoir une fleur ou un nid d'abeille sous ces nuages-là. Utilise le bloc "si/sinon" pour récupérer le nectar si (if) il y a une fleur, sinon (else) pour fabriquer du miel (parce qu'il y a un nid d'abeille).
      4-5 Bee Conditionals 6 (copy 1)_instruction: |
        This purple flower may have either
        3, 2, or 1 nectar. Here an if-else block is combined with another if-else
        block to create an if, else-if, else block. Complete the solution to collect
        the unknown amount of nectar.
      4-5 Bee Conditionals 6_instruction: 'Cette fleur-là pourrait contenir soit 3, 2, ou 1 nectar. Ici un bloc "if-else" (si-sinon) sera combiné avec un autre bloc "si-sinon" pour créer un bloc "si, sinon-si, sinon". Trouve la solution pour récupérer la quantité inconnue de nectar.'
      4-5 Bee Conditionals 7_instruction: "N'oublie pas que les fleurs violettes peuvent avoir 1, 2 ou 3 doses de nectar. Remplis la fonction de « vérifier la fleur violette » et utilise-la pour recueillir le nectar de toutes les fleurs."
      4-5 Bee Conditionals 8_instruction: "Écris dans la fonction « vérifier fleur et faire miel » (check flower make honey). Ta fonction doit vérifier combien de nectar contient la fleur violette, le recueillir, aller de l'avant et faire du miel."
      4-5 Bee Conditionals Assessment 1_instruction: |
        Evaluation: ce code est erroné.
        Complète la fonction "get nectar or make honey" (récupérer du nectar ou fabriquer du miel"), puis appelle-la pour récupérer tout le nectar et le miel. N'oublie pas que les fleurs violettes peuvent contenir soit 3, 2, ou 1 nectars.
      4-5 Bee Debugging 1_instruction: 'Ces blocs-là me gênent.  Vous pouvez les réparer?'
      4-5 Bee Debugging 10_instruction: Trouve les erreurs et répare-les.
      4-5 Bee Debugging 11_instruction: Est-ce que ça compte comme il faut?
      4-5 Bee Debugging 2_instruction: "Aide l'abeille à récupérer le nectar et fabriquer du miel."
      4-5 Bee Debugging 3_instruction: Trouve les erreurs et répare-les.
      4-5 Bee Debugging 4_instruction: 'Ces blocs-là ne marchent pas.  Quel est le motif?'
      4-5 Bee Debugging 5_instruction: 'Quelque chose ne marche pas  içi...'
      4-5 Bee Debugging 6_instruction: La fleur violette contient une quantité inconnue de nectar. Répare les blocs pour récupérer tout le nectar de la fleur.
      4-5 Bee Debugging 7_instruction: La fonction manque quelque chose...
      4-5 Bee Debugging 8_instruction: "Cette fonction fonctionne bien, mais elle n'est pas utilisée correctement."
      4-5 Bee Debugging 9_instruction: "Pourquoi l'abeille ne fait-elle pas assez de miel?"
      4-5 Bee Debugging Assessment 1_instruction: 'Evaluation: Répare le code.'
      4-5 Bee Nested Loops 1_instruction: Utilise une boucle pour récupérer tout le nectar.
      4-5 Bee Nested Loops 2_instruction: |
        Récupère tout le nectar de chaque fleur.
        Utilise un boucle imbriquée. 
      4-5 Bee Nested Loops 3_instruction: Récupère tout le nectar en mettant le code de démarrage dans une boucle imbriquée.
      4-5 Bee Nested Loops 4_instruction: "Récupère tout le nectar de chaque fleur et fais du miel dans chaque nid d'abeille. Utilise une boucle imbriquée. "
      4-5 Bee Nested Loops 5_instruction: Récupère tout le nectar en créant une boucle imbriquée.
      4-5 Bee Nested Loops 6_instruction: Recueille tout le nectar.
      4-5 Bee Nested Loops 7_instruction: Mets cette boucle dans une autre boucle pour créer une boucle imbriquée et recueillir tout le nectar des fleurs.
      4-5 Bee Nested Loops 8_instruction: 'Récolte le nectar de ces fleurs en imbriquant une boucle "tant que". Remplace le bloc qui est répété plusieurs fois par un bloc dans une boucle "tant que". '
      4-5 Bee Nested Loops 9_instruction: |-
        Récolte tout le nectar de ces fleurs en imbriquant une boucle "tant que" à l'intérieur d'une répétition.
      4-5 Bee Nested Loops Assessment 1_instruction: 'Évaluation - Récolte tout le nectar et fais tout le miel en utilisant des boucles.'
      4-5 Bee Nested Loops Rows_instruction: Récolte le nectar de chaque rangée de fleurs! Utilise une boucle imbriquée.
      4-5 Maze 1 (copy 1)_instruction: Chère personne. Moi zombie. Devoir...atteindre...tournesol.
      4-5 Maze 1_instruction: Chère personne. Moi zombie. Devoir...atteindre...tournesol.
      4-5 Maze 10_instruction: Peux-tu rejoindre le tournesol en utilisant uniquement quatre blocs ?
      4-5 Maze 11_instruction: Peux-tu aller au tournesol en utilisant uniquement six blocs?
      4-5 Maze 12_instruction: "OK, cette fois c'est un peu différent. Peux-tu y arriver en six blocs uniquement?"
      4-5 Maze 13_instruction: "Amène moi jusqu'au cochon !"
      4-5 Maze 14_instruction: "Amène-moi au cochon! Utilise le bloc répéter jusqu'à."
      4-5 Maze 2 (copy 1)_instruction: Amène le zombie vers le tournesol, mais évite le gobeur!
      4-5 Maze 2_instruction: Amène le zombie vers le tournesol, mais évite le gobeur!
      4-5 Maze 3 (copy 1)_instruction: Devoir...atteindre...tournesol.
      4-5 Maze 3_instruction: Devoir...atteindre...tournesol.
      4-5 Maze 4 (copy 1)_instruction: "Essaie d'utiliser un bloc de répétition pour utiliser moins de blocs..."
      4-5 Maze 4_instruction: "Essaie d'utiliser un bloc de répétition pour utiliser moins de blocs..."
      4-5 Maze 5 (copy 1)_instruction: Peux-tu résoudre cette énigme en utilisant le moins de blocs possible?
      4-5 Maze 5_instruction: Peux-tu résoudre cette énigme en utilisant le moins de blocs possible?
      4-5 Maze 6 (copy 1)_instruction: Peux-tu résoudre cette énigme en utilisant le moins de blocs possible?
      4-5 Maze 6_instruction: Peux-tu résoudre cette énigme en utilisant le moins de blocs possible?
      4-5 Maze 7_instruction: Chère personne. Moi zombie. Devoir...atteindre...tournesol.
      4-5 Maze 8_instruction: Utilise le bloc de répétition pour amener le zombie au tournesol. (Évite les Gobeurs!)
      4-5 Maze 9_instruction: |-
        Crée une boucle avec le bloc "répéter jusqu'à".
      4-5 Maze Assessment 1_instruction: 'Évaluation: rejoins le tournesol.'
      4-5 Maze Conditionals 1_instruction: |-
        Utilise le bloc "répéter jusqu'à" pour amener le zombie au tournesol.
      4-5 Maze Conditionals 10_instruction: "Peux-tu ajouter seulement 3 blocs pour m'aider à traverser un labyrinthe plus complexe? Si tu réussis, je pourrai marcher le long de n'importe quel chemin sinueux, peu importe sa longueur."
      4-5 Maze Conditionals 2_instruction: |-
        Utilise le bloc "répéter jusqu'à" pour amener le zombie au tournesol.
      4-5 Maze Conditionals 3_instruction: |-
        Utilise le bloc "si" pour me faire décider quand je dois tourner. Astuce: tu n'as besoin que d'un seul bloc supplémentaire, mais apprends comment nous avons fait ici pour pouvoir le faire toi-même la prochaine fois.
      4-5 Maze Conditionals 4_instruction: |-
        OK, cette fois c'est comme pour la dernière énigme, mais tu dois te rappeler comment tu as utilisé les blocs "si" et "répéter" ensemble.
      4-5 Maze Conditionals 5_instruction: |-
        Moi vouloir tournesol! Utilise un bloc "si" pour m'y amener avec le plus petit nombre de blocs possible.
      4-5 Maze Conditionals 6_instruction: |-
        Moi vouloir tournesol! Utilise un bloc "si" pour m'y amener avec le plus petit nombre de blocs possible.
      4-5 Maze Conditionals 7_instruction: "OK, refais-le encore une fois pour t'exercer - ce n'est pas très différent, mais attention aux Gobeurs!"
      4-5 Maze Conditionals 8_instruction: |-
        Le bloc "Si-sinon" vérifie une condition et puis fait une chose OU une autre. Pour m'amener au tournesol essaie d'utiliser ce nouveau bloc.
      4-5 Maze Conditionals 9_instruction: 'Encore un exercice avec le bloc "si-sinon", peux-tu y arriver du premier coup?'
      4-5 Maze Conditionals Assessment 1_instruction: |-
        Utilise un bloc "répéter jusqu'à" et un bloc "si-sinon" pour m'amener au tournesol avec le plus petit nombre de blocs possible.
      4-5 Nested Loops 1_instruction: 'Complète le code pour dessiner ces triangles. Le premier a été fait pour toi. Astuce: 3 triangles en une rotation de 360 degrés.'
      4-5 Nested Loops 10_instruction: "Dessine la dernière rangée d'étoile sur ce drapeau en arrangeant en boucle les blocs fournis. Les étoiles sont espacées de 50 pixels, mais rappelle-toi que les étoiles elles-mêmes font 30 pixels de large."
      4-5 Nested Loops 11_instruction: Peux-tu dessiner les 10 carrés de ce trottoir en utilisant une boucle imbriquée? Chaque carré fait 30 pixels de côté.
      4-5 Nested Loops 12_instruction: Peux-tu dessiner ces 36 triangles en utilisant une boucle imbriquée?
      4-5 Nested Loops 2_instruction: 'Maintenant, insère cette boucle dans une autre boucle pour dessiner 10 triangles. On appelle cela une boucle imbriquée. Astuce: les 10 triangles forment une rotation de 360 degrés.  '
      4-5 Nested Loops 3_instruction: "Crée un soleil en insérant le code fourni dans une autre boucle. On appelle cela une boucle imbriquée.\\r\n"
      4-5 Nested Loops 5_instruction: Insère le code fourni dans une boucle pour créer un moulin à vent.
      4-5 Nested Loops 6_instruction: Peux-tu dessiner un hexagone en insérant le code du triangle dans une boucle?
      4-5 Nested Loops 7_instruction: 'Répète ce dessin 10 fois. De combien dois-tu tourner à chaque fois que la boucle est effectuée? (Astuce: combien fait 360 divisé par 10?)'
      4-5 Nested Loops 8_instruction: 'Répète ce dessin 6 fois. De combien dois-tu tourner à chaque fois que la boucle est effectuée? (Astuce: combien fait 360 divisé par 6?)'
      4-5 Nested Loops 9_instruction: "Dessine les dents dans la bouche de l'alligator !"
      4-5 Nested Loops Assessment 1_instruction: Utilise une boucle imbriquée pour compléter le dessin.
      4-5 While Loops 1_instruction: 'Déplace-moi vers le trou et remplis-le avec deux pelletées de terre, en utilisant le bloc "remplir".'
      4-5 While Loops 2_instruction: 'Déplace-moi vers le tas de terre et enlève-le en 5 coups de pelle, en utilisant le bloc "supprimer".'
      4-5 While Loops 3_instruction: 'Déplace-moi vers le tas et enlève-le entièrement, ensuite déplace-moi vers le trou et remplis-le entièrement. Astuce: utilise le moins de blocs possible.'
      4-5 While Loops 4_instruction: |-
        Oh, j'ai trouvé un trou vraiment très profond! Je ne sais pas combien de pelletées de terre sont nécessaires à le remplir. Peux-tu écrire un programme qui remplit le trou jusqu'à ce qu'il soit à la hauteur du sol? Astuce: essaie d'utiliser la boucle "tant que" cette fois-ci.
      4-5 While Loops 5_instruction: "Oh, maintenant il y a deux trous profonds! Peux-tu écrire un programme qui les remplisse tout deux jusqu'à la hauteur du sol?"
      4-5 While Loops 6_instruction: "Oh, en voilà un gros tas de terre! Peux-tu écrire un programme qui enlève toute la terre jusqu'au niveau du sol?"
      4-5 While Loops 7_instruction: "Oh, maintenant il y a trois tas de terre! Peux-tu écrire un programme qui enlève chacun d'eux jusqu'au niveau du sol?"
      4-5 While Loops 8_instruction: ' Voilà un trou vraiment profond et un gros tas de terre. Combien de pelletées de terre doivent être déplacées pour égaliser le sol? Astuce: utilise la boucle "tant que" pour les deux.'
      4-5 While Loops Assessment 1_instruction: Voilà beaucoup de trous et de tas. Aide-moi à déplacer la terre pour rendre le sol plat.
      AlgPD DR Free Play_instruction: Create a function based on your own word problem.
      AllTheThings Applab - Turtle move with button_instruction: |
        Add a button that
        moves the turtle when clicked.  (Click to see full instructions)
      allthethings data blocks test_instruction: |
        Please sign in to test applab levels
        (By design, applab levels only work if signed in. Normally, we make people
        sign in, but this is only enforceable for a whole script and would be annoying
        to do for the allthethings script).
      allthethings design mode elements_instruction: |
        Please sign in to test applab
        levels (By design, applab levels only work if signed in. Normally, we make
        people sign in, but this is only enforceable for a whole script and would
        be annoying to do for the allthethings script).
      allthethings_moviebot_instruction: |
        This level cloned from "U3 Digital Assistant
        Target"
      allthethings_template_backed1_instruction: |
        Backed by a template #1. Please
        sign in to test applab levels (By design, applab levels only work if signed
        in. Normally, we make people sign in, but this is only enforceable for a whole
        script and would be annoying to do for the allthethings script). 
      allthethings_template_backed2_instruction: |
        Backed by a template #2. Please
        sign in to test applab levels (By design, applab levels only work if signed
        in. Normally, we make people sign in, but this is only enforceable for a whole
        script and would be annoying to do for the allthethings script).
      App Lab test_instruction: test
      Applab allthethings onRecordEvent_instruction: |
        Please sign in to test applab
        levels (By design, applab levels only work if signed in. Normally, we make
        people sign in, but this is only enforceable for a whole script and would
        be annoying to do for the allthethings script).
      Applab test_instruction: This level is submittable. For testing only!
      AppLab_test02_instruction: |
        One sentence summary of the activity. Click to
        view full instructions.
      Artist - Nested Loops 1_instruction: |
        Complete the code to draw these triangles.  The
        first one is done for you.  Hint:  3 triangles in a 360 degree rotation.
      Artist - Nested Loops 10_instruction: |
        Draw the last row of stars on this flag
        by looping the provided blocks. The stars are 50 pixels apart, but remember
        that the stars themselves are 30 pixels wide.
      Artist - Nested Loops 11_instruction: |
        Can you draw these 10 squares of this
        sidewalk using a nested loop? Each square is 30 pixels.
      Artist - Nested Loops 12_instruction: |
        Can you draw these 36 triangles using
        a nested loop?
      Artist - Nested Loops 2_instruction: |
        Now nest this loop inside another loop
        to draw 10 triangles.  This is called a nested loop.  Hint: All 10 triangles
        complete a 360 degree rotation.  
      Artist - Nested Loops 3_instruction: "Create a sun by nesting the starter code\nin another loop. This is called a nested loop.\\r\n"
      Artist - Nested Loops 5_instruction: Loop the given code to create a windmill.
      Artist - Nested Loops 6_instruction: |
        Can you draw a hexagon by looping the
        triangle code?
      Artist - Nested Loops 7_instruction: |
        Loop this design 10 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 10?)
      Artist - Nested Loops 8_instruction: |
        Loop this design 6 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 6?)
      Artist - Nested Loops 9_instruction: "Draw the teeth in the alligator's mouth!"
      Artist - Nested Loops Assessment 1_instruction: Utilise une boucle imbriquée pour compléter le dessin.
      Auto Open Function Editor_instruction: |-
        Tu peux appeler des fonctions à partir d'autres fonctions ! En utilisant ta fonction "Forme" comme base, crée trois formes de maison, chacune 20 pixels plus grande que la précédente en commençant à 50 pixels de longueur. Utiliser une boucle avec compteur sera probablement utile. 
      Bee Recommended Blocks test_instruction: "Les fleurs violettes peuvent avoir 1 ou 0 nectar, mais tu ne sais pas lesquelles ! Veille à ne pas butiner de fleur violette si elle n'en a pas. Vérifie si le nectar est égal à 1 à l'aide du bloc « si »."
      Big Game Animation 1 (copy 1)_instruction: |
        Now that you've learned to write
        simple linear functions, let's work on using them to add some movement to
        our game. Click play to see what your game can currently do (not much!), update
        any variables you like, and then click finish to move on.
      Big Game Animation 1_instruction: |
        Now that you've learned to write simple
        linear functions, let's work on using them to add some movement to our game.
        Click "Run" to see what your game can currently do (not much!), update any
        variables you like, and then click finish to move on.
      Big Game Animation 2 (copy 1)_instruction: |
        The function 'update-target'
        function takes the target's current x value, and returns an updated value.
        Complete the 'update-target' function so that it adds to the x value each
        time it is called. The more you add to x, the faster the target will go.
      Big Game Animation 2_instruction: |
        The update-target function takes the target's
        current x value, and returns an updated value. Complete the update-target
        function so that it adds to the x value each time it is called. The more you
        add to x, the faster the target will go.
      Big Game Animation 3_instruction: |
        The update-danger function should work just
        like update-target, except that the danger should move from the right side
        over towards the left. Complete update-danger to make the danger fly across
        the screen.
      Big Game Animation 4_instruction: |
        At this point in your game, your danger
        should run across the screen from right to left, and your target should run
        across from left to right. They don't ever come back on screen once they've
        left, but we'll take care of that later. Take a minute to make sure your
        game is working like you want it to, and then click "Finish" to move on.
      Big Game Booleans 1_instruction: |
        When you last worked on your game we got
        our target and danger sprites to fly across the screen, but they never come
        back. Click "Run" to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Booleans 2_instruction: |
        Go to the Functions section of the toolbox
        and complete the safe-left? function so that it returns true if the sprite's
        x coordinate is greater than -50. If you're successful you should see the
        Danger go off the left side and then return on the right side.
      Big Game Booleans 3_instruction: |
        Now that you've got safe-left?, let's fill
        in safe-right? - it should take in a sprite's x coordinate and return true
        if that coordinate is less than 450. Once your safe-right? is complete you
        should see the Target go off the right side of the screen and return on the
        left.
      Big Game Booleans 4_instruction: |
        Complete the onscreen? function so that it
        checks whether both safe-left? and safe-right? are true.
      Big Game Booleans 5_instruction: |
        At this point your Danger should run across
        the screen from right to left, your Target should run across from left to
        right, and they should both return to the opposite side, repeatedly. Take
        a minute to make sure your game is working like you want it to, and then click
        "Finish" to move on.
      Big Game Collision 1 (copy 1)_instruction: |
        When you last worked on your game
        we got our target and danger sprites to fly across the screen, but they never
        come back. Click run to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Collision 1_instruction: |
        At this point you've programmed a video
        game with a moving Target and Danger, both of which return to the screen once
        they've left, and a Player that responds to keyboard input. Click "Run"
        to see how your game is currently working, and then we'll dig into the final
        missing piece - collision detection!
      Big Game Collision 2_instruction: |
        To move the player up and down, we'll need
        to use a conditional block to figure out which key is pressed and respond
        accordingly. Computers read keypresses as numeric key codes - the up arrow
        is 38 and the down arrow is 40. You can lookup other key codes in your student
        workbook. Edit the 'update-player' function so that if moves the player
        up when the up arrow is pressed, or down when the down arrow is pressed.
      Big Game Collision 3_instruction: |
        Use the Distance Formula, so the distance
        function returns the distance between the player's center coordinates (px,
        py) and another sprite's center coordinates (cx, cy).
      Big Game Collision 4_instruction: |
        Complete the collide? function so that it
        returns true if the distance between two points is less than 100 pixels apart.
      Big Game Complete_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Final_instruction: |
        You made it! At this point your game should be
        fully functioning, take some time to enjoy your new game and make any final
        tweaks to it. When you're happy with the final product, click Finish and
        you'll have an opportunity to share a link to your game. Good work!
      Big Game Player 1_instruction: |
        We're getting really close to a finished game!
        Last time you worked on your game, you used booleans to make your Target and
        Danger return to the screen once they've left. Click Run to see how your
        game looks right now, and then we'll get to making your Player move up and
        down.
      Big Game Player 2_instruction: |
        Edit the update-player function so the player
        moves up when the up arrow (keycode 38) is pressed, and moves down (keycode
        40) when the down arrow is pressed.
      Big Game Testing_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Vars 1 (copy 1)_instruction: |
        Let's get started on your Big Game!
        Here you'll see a whole bunch of placeholder code that you'll eventually
        replace with your own, but for now we're only going to worry about defining
        variables. Click "Run" to see what the game looks like with the default
        values.
      Big Game Vars 1_instruction: |
        Let's get started on your Big Game! Here you'll
        see a whole bunch of placeholder code that you'll eventually replace with
        your own, but for now we're only going to worry about defining variables.
        Click "Run" to see what the game looks like with the default values.
      Big Game Vars 2 (copy 1)_instruction: |
        The first step to making this game your
        own is to give it a good Title. Click edit on the 'title' and 'subtitle'
        variables and change them to something new.
      Big Game Vars 2_instruction: |
        The first step to making this game your own is
        to give it a good Title. Click edit on the title and subtitle variables and
        change them to something new.
      Big Game Vars 3 (copy 1)_instruction: |
        Now let's set the background for your
        new game. Edit the 'bg' variable and select a new background Image from
        the dropdown.
      Big Game Vars 3_instruction: |
        Now let's set the background for your new game.
        Edit the bg variable and select a new background Image from the dropdown.
      Big Game Vars 4 (copy 1)_instruction: |
        Awesome, now you can update the variables
        for your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click 'finish'
        when you're done.
      Big Game Vars 4_instruction: |
        Awesome! Now you can update the variables for
        your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click "Finish"
        when you're done.
      Brad Spooky House Copy_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      Brad Spooky House_instruction: |
        Freeplay: Here are the functions you've written,
        and some more for you to play with. Draw something awesome! Play with the
        pen width to see how different your drawings look!
      Building a Foundation Assessment_instruction: |
        Build a three level pyramid,
        there are no other directions, so just play with the pieces until you get
        it!
      Busy Bee 2_instruction: Cette abeille a beaucoup de travail à faire ! As-tu remarqué des modèles que tu pourrais utiliser pour simplifier ton code ?
      Busy Bee_instruction: Cette abeille a beaucoup de travail à faire ! As-tu remarqué des modèles que tu pourrais utiliser pour simplifier ton code ?
      C3-Farmer While Loops 1_instruction: |
        Move me to the hole and fill it with
        two shovelfuls of dirt, using the "fill" block.
      C3-Farmer While Loops 2_instruction: |
        Move me to the pile of dirt and remove
        it with 5 shovel scoops, using the 'remove' block.
      C3-Farmer While Loops 3_instruction: |
        Move me to the pile and remove all of
        it, then move to the hole and fill it completely.  Hint:  Use as few blocks
        as possible.
      C3-Farmer While Loops 4_instruction: |
        Wow, I found a really deep hole! I don't
        know how many shovelfuls of dirt it needs.  Can you write a program that fills
        it until the ground is even?  Hint:  Try using the while loop this time.
      C3-Farmer While Loops 5_instruction: |
        Wow, now there are two deep holes! Can
        you write a program that fills them both until the ground is even?
      C3-Farmer While Loops 6_instruction: |
        Wow, now there is a large pile of dirt!
        Can you write a program that removes all of it so the ground is even?
      C3-Farmer While Loops 7_instruction: |
        Wow, now there are three piles of dirt!
        Can you write a program that removes each of them until the ground is even?
      C3-Farmer While Loops 8_instruction: |2
         There is a really deep hole and a really
        large pile of dirt.  How many shovelfuls of dirt need to be moved around to
        make the ground flat?  Hint: Use the while loop for both.
      C3-Farmer While Loops Assessment 1_instruction: |
        There are a lot of holes and
        piles.  Help me to fill and remove them to make the ground flat.
      Calc Circles of Eval .1_instruction: |
        You’ll be writing a kind of code called
        Evaluation Blocks, because each block of code evaluates to a single value.
        Change the ??? in this code so that the block evaluates to 5.
      Calc Circles of Eval .2_instruction: |
        This Evaluation Block is a multiplication
        function which takes two numbers and returns the product of those numbers.
        Edit this block so that it multiplies 2 * 5
      Calc Circles of Eval .3_instruction: |
        Here's a function for addition which
        takes two numbers and returns their sum. Use this Addition Block to add 3
        + 6.
      Calc Circles of Eval .4_instruction: |
        Here we've nested an Addition Block
        inside a Multiplication Block. Complete this code so it multiplies 3 by (4
        + 1)
      Calc Circles of Eval 1 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 1_instruction: |
        Every mathematical operator (+, -, *,
        /, and so on) can be represented by an Evaluation Block in code. Change the
        Evaluation Block to match the expression.
      Calc Circles of Eval 2 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 2_instruction: |
        Use a Multiplication Block to complete
        this code.
      Calc Circles of Eval 3_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 4_instruction: |
        This code is missing a couple of Evaluation
        Blocks - make sure you put everything in the right order.
      Calc Circles of Eval 5_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 6_instruction: |
        Complete the Evaluation Blocks to match
        this expression.
      Calc Circles of Eval 7_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 8_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 9_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval Free Play_instruction: |
        Free Play: Try using the Evaluation
        Blocks to write some equations of your own. How does nesting the blocks in
        different ways impact their evaluation?
      Calc Define Funcs 1 (copy 1)_instruction: |
        Let's look at some more algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 1_instruction: |
        Let's look at some more traditional algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 2_instruction: |
        Write a function f that takes a parameter
        x and returns x - 10. Test your function using f(15).
      Calc Define Funcs 3_instruction: |
        We don't have to call our function f every
        time; create a function called times-ten that should take a parameter x and
        return x * 10. Once you've created the function, run times-ten(50).
      Calc Define Funcs 4_instruction: |
        Write a function called half that takes a
        number x and returns half that number. Once you've written the function,
        use it to calculate half(21)
      Calc Define Funcs 5 - multiply 1_instruction: |
        Oh no! We lost our multiply
        block! We'll have to create a function to multiply for us. To start off,
        write a function "f" that takes a parameter "x" and returns x*5. Test
        your function using f(3).
      Calc Design Recipe 1_instruction: |
        Let's use the Design Recipe to create a
        function called cube - this function should take in a Number and return that
        number to the power of 3. Make sure to write two example cases! When you're
        done, use your new function to calculate cube(7).
      Calc Design Recipe 2_instruction: "Your school is holding a bake sale, and\nyou need to track the cost of making each cookie, the money paid, and the\ntotal profit. Cookies cost $0.25 each to make, and sell for $1.50/cookie.\\r\nWrite\nthe function cost, which takes in the number of cookies you intend to sell,\nand returns the cost of making those cookies."
      Calc Design Recipe 3_instruction: |
        Write the function sales which takes in
        the number of cookies sold, and produces the amount of money customers spent
        to buy those cookies (each cookie is sold at $1.50).
      Calc Design Recipe 4_instruction: |
        Using the two functions we just wrote, write
        the function profit, which takes in the number of cookies you sold, and gives
        you back the total profit you make from selling your cookies, accounting for
        the cost of baking them.
      Calc Free Play_instruction: |
        Free Play: Write functions and algorithms of your
        own design!
      Calc Rocket 1 (copy 1)_instruction: "In the last puzzle you wrote a contract\nfor the function \"rocket-height\" that states it has a range of Number, domain\nof Number, and should return the height of the rocket traveling at 15 m/s\nafter a given number of seconds. Let's write an example case now for the\nheight of the rocket at 3 seconds.\\r\n\\r\n\\r\n\\r\n  \\r\n\\r\n"
      Calc Rocket 1_instruction: |
        In the last puzzle you wrote a contract for the
        function rocket-height that states it has a range of Number, domain of Number,
        and should return the height of the rocket traveling at 15 m/s after a given
        number of seconds. Let's write an example case now for the height of the
        rocket at 3 seconds.
      Calc Rocket 2_instruction: |
        Great, let's do one more example before writing
        the function - what should the rocket height be after 30 seconds?
      Calc Vars 1.1_instruction: |
        Here we've set the age variable to 17 years. Can
        you write an expression that calculates age in days?
      Calc Vars 1_instruction: |
        Variables allow us to name values so that we can
        easily refer to them repeatedly throughout our programs. Here's a variable
        called age. Set its value to your age and click run.
      Calc Vars 2 (copy 1)_instruction: |
        Here we've set the "age" variable to
        17 - can you write an expression that calculates "age" in months?
      Calc Vars 2.1_instruction: |
        Here's a new variable called age-in-months. Use
        the variable age to set age-in-months.
      Calc Vars 2_instruction: |
        Can you write an expression that calculates age in
        months?
      Calc Vars 3 (copy 1)_instruction: |
        Can you add to this code so that it calculates
        how many hours there are in "age" years?
      Calc Vars 3_instruction: |
        Can you add to this code so that it uses the "age"
        variable to calculate age in hours?
      Calc Vars 4_instruction: |
        We can also set variables by using other variables.
        Let's say you have a brother who is two years younger than you - can you
        set a new variable "brother-age" using your "age" variable?
      Code Studio Puzzle Challenge 1 - Artist_instruction: |
        Draw the line. It is
        200 pixels long. 
      Code Studio Puzzle Challenge 1 Artist1_instruction: |
        Draw the line. It is 200
        pixels long. 
      Code Studio Puzzle Challenge 10 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get all of the nectar.
      Code Studio Puzzle Challenge 10 - Bee_instruction: |
        Move the Bee to the flower
        and get all of the nectar.
      Code Studio Puzzle Challenge 10b - Bee_instruction: |
        Move the Bee to the flowers
        and get all of the nectar at each.
      Code Studio Puzzle Challenge 11 - Artist_instruction: |
        Draw this line by using
        the variable "length". Each line segment is 75 pixels long.
      Code Studio Puzzle Challenge 11b - Artist_instruction: |
        Draw a square by using
        the variable length provided.
      Code Studio Puzzle Challenge 12 - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 12a - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 13 - Artist_instruction: |
        This is just like a
        "for" loop. Complete the code to draw six lines that grow from 50, 60, 70,
        80, 90, to 100 pixels long. 
      Code Studio Puzzle Challenge 14 - Artist_instruction: |
        This is just like a
        "for" loop. Complete the loop to draw 4 squares that grow from 80, 100,
        120, to 140 pixels. 
      Code Studio Puzzle Challenge 2 - Artist_instruction: |
        Now add a turn and another
        line. The lines are 200 pixels long.
      Code Studio Puzzle Challenge 3 - Artist_instruction: |
        Draw the square. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 4 - Artist_instruction: |
        Draw the octagon. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 5 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get the nectar.
      Code Studio Puzzle Challenge 5 - Bee_instruction: |
        Flowers contain a specific
        amount of nectar. Move the Bee to the flower and collect nectar with the get
        nectar block.
      Code Studio Puzzle Challenge 6 - Bee_instruction: "Les nids d'abeille peuvent contenir une certaine quantité de miel. Prends du nectar sur la fleur et fabrique du miel."
      Code Studio Puzzle Challenge 7 - Bee_instruction: "Déplace l'abeille vers la fleur, et prends le nectar."
      Code Studio Puzzle Challenge 8 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge 9 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge Artist Screencast (copy 1)_instruction: |
        Draw
        the line. Each segment is 100 pixels long. 
      Code Studio Puzzle Challenge Artist Screencast 2_instruction: |
        Complete the
        code to draw the line. Each segment is 100 pixels long. 
      Code Studio Puzzle Challenge Artist Screencast_instruction: |
        Draw the line.
        Each segment is 100 pixels long. 
      Code Studio Puzzle Challenge Bee Screencast_instruction: |
        Move the Bee to the
        flowers and get all of the nectar.
      Code Studio Puzzle Challenge Square - Artist_instruction: |
        Draw a square by
        using the variable length provided.
      Code Studio Puzzle Challenge Var - Artist_instruction: |
        Draw a line by using
        a variable "length" set to 180.
      Course 2 Bee Loops 1_instruction: "Bonjour! Je suis une abeille. Peux-tu m'aider à collecter le nectar de ces fleurs ? "
      Course 2 Bee Loops 13_instruction: |
        Assessment: Use the repeat block to collect
        all of the nectar.
      Course 2 Bee Loops 2_instruction: |
        Can you do the same task more easily with
        a loop?
      Course 2 Bee Loops 3_instruction: |
        Now use the new repeat block to collect
        all of the nectar and make all of the honey.
      Course 2 Bee Loops 3__instruction: |
        Can you use a loop to collect all that
        nectar?
      Course 2 Bee Loops 4_instruction: |
        What happens if you loop this sequence 3
        times? Don't forget to make the honey at the end!
      Course 2 Maze Loops 1_instruction: "Peux-tu m'amener au cochon en utilisant 5 blocs?"
      Course 4 2_instruction: "L'abeille veut du nectar dès maintenant. N'oublie pas, tous les objets ne sont pas des fleurs, donc vérifie pour ne recueillir le nectar que sur les fleurs."
      Course 4 Artist 1_instruction: 'Aide-moi à finir de dessiner ma boîte. (Chaque ligne fait 200 pixels de long) '
      Course 4 Artist 10_instruction: "C'est l'heure de jouer! Amuse-toi à dessiner ce que tu souhaites. "
      Course 4 Artist 11_instruction: |
        Maintenant à toi de relever un défi !  Voici un modèle qui
        utilise uniquement les blocs que l'on t'a déjà été montré.  Peux-tu trouver un moyen
        de le recréer?  N'hésitez pas à tester par essai-erreur. Il n'est pas nécessaire de
        réussir du premier coup.  Tu veux voir plus de conseils?  Clique ici!
      Course 4 Artist 12_instruction: "Tu veux revoir les suggestions de design ou les conseils ? Clique ici !\\r\n\\r\nSinon, fais ton propre design !"
      Course 4 Artist 13_instruction: 'Encore envie de jouer ?  Voici une page vierge où tu peux créer tout ce que tu veux !'
      Course 4 Artist 2_instruction: Peux-tu mettre dans une boucle ce code-ci pour dessiner le carré en gris?
      Course 4 Artist 20_instruction: 'Encore envie de jouer ?  Voici une page vierge où tu peux créer tout ce que tu veux !'
      Course 4 Artist 3_instruction: 'Bon, essaye de comprendre ce qui arrivera si tu fais fonctionner ce code (ou appuie sur "Démarrer" pour essayer). Ensuite, répète-le suffisamment de fois pour terminer le dessin.'
      Course 4 Artist 4_instruction: 'Combien y-a-t-il de degrés dans un cercle ? Remplis le bloc "répéter" avec ce numéro pour créer un cercle de couleurs.'
      Course 4 Artist 5_instruction: "Dessine l'autre moitié de cette conception pour la rendre symétrique. Les triangles sont équilatéraux et sont de 50 pixels de côté."
      Course 4 Artist 6_instruction: |
        Complète le code pour dessiner ces triangles-là.
        Indice: 3 triangles dans une rotation de 360 degrés?
      Course 4 Artist 7_instruction: "Ensuite emboîte cette boucle dans une autre boucle pour dessiner 10 triangles. Cela s'appelle une boucle imbriquée. Indice: les 10 triangles font au total une rotation de 360 degrés.  "
      Course 4 Artist 8_instruction: Dessine ce soleil en faisant une boucle de tout ce bloc de code 12 fois.
      Course 4 Artist 8a_instruction: "Tu te souviens de cette forme?  Maintenant, nous allons\nte laisser la construire sans te donner de blocs au départ! \\r\nIndice: Il y a\n3 triangles dans la rotation de 360 degrés... combien de fois 3 va dans\n360?"
      Course 4 Artist 9_instruction: 'Fais boucler de modèle 10 fois et veille à tourner entre chaque forme tracée. Voici un indice pour savoir de combien tourner : Combien fait 360 divisé par 10 ?'
      Course 4 Artist Binary 1_instruction: "Voici une fonction qui prend en paramètre une chaîne binaire avec des '1' et des '0' et demande à l'artiste d'avancer de gauche à droite, et de haut en bas, en remplissant la case quand il voit un '1' et en sautant la case quand il voit un '0'. Exécute ce code pour voir comment l'artiste utilise le binaire pour dessiner ce modèle."
      Course 4 Artist Binary 1a_instruction: "Voici une fonction qui prend en paramètre une chaîne binaire avec des '1' et des '0' et demande à l'artiste d'avancer de gauche à droite, et de haut en bas, en remplissant la case quand il voit un '1' et en sautant la case quand il voit un '0'. Exécute ce code pour voir comment l'artiste utilise le binaire pour dessiner ce modèle."
      Course 4 Artist Binary 2_instruction: Laquelle de ces chaînes binaires pourrais-tu utiliser 8 fois en boucle pour dessiner cette image ?
      Course 4 Artist Binary 3_instruction: Peux-tu dessiner ce modèle en bouclant sur une chaîne binaire à trois chiffres ?
      Course 4 Artist Binary 4_instruction: "Chaque séquence binaire représente une ligne de cette image. Peux tu les remettre dans l'ordre pour dessiner un visage souriant au lieu d'un visage fâché ?"
      Course 4 Artist Binary 5_instruction: Quelle suite binaire de 6 chiffres répétée 11 fois va dessiner cette image ?
      Course 4 Artist Binary 6_instruction: Quelle est la chaîne binaire la plus courte qui, répétée plusieurs fois, va dessiner cette image ?
      Course 4 Artist Binary 7_instruction: Finis ce dessin.
      Course 4 Artist Binary Free Play 2_instruction: 'Jeu libre : Pour dessiner, voici une canevas de plus haute résolution - 16 bits par 16 bits !'
      Course 4 Artist Binary Free Play 2a_instruction: "Voici une toile de résolution plus élevée pour dessiner sur - 16 pixels par 16 pixels! \\r \\r \nEst-ce que tu vois ce qu'il se passe lorsque tu commences à faire preuve de créativité avec les bits ?"
      Course 4 Artist Binary Free Play 2b_instruction: Clique ici pour avoir des conseils.
      Course 4 Artist Binary Free Play_instruction: 'Jeu libre : dessine ce que tu veux avec les binaires !'
      Course 4 Artist Binary pre1_instruction: "Le binaire est une façon de représenter des informations en utilisant seulement deux valeurs.  Ici, nous allons utiliser les valeurs « éteint» (représenté par le chiffre 0) et « allumé» (représenté par le numéro 1).  \\r \n\\r \nNous t'avons fourni une grille de \"pixels\" que tu peux parcourir pour faire des dessins en allumant seulement certains carrés.  Peux-tu faire dessiner à l'artiste « 01010101 » en binaire sur la première rangée ?"
      Course 4 Artist Binary ryan_instruction: "Le binaire est une façon de représenter des informations en utilisant seulement deux valeurs.  Ici, nous allons utiliser les valeurs « éteint» (représenté par le chiffre 0) et « allumé» (représenté par le numéro 1).  \\r \n\\r \nNous t'avons fourni une grille de \"pixels\" que tu peux parcourir pour faire des dessins en allumant seulement certains carrés.  Peux-tu faire dessiner à l'artiste « 01010101 » en binaire sur la première rangée ?"
      Course 4 Artist For  Functions 10_instruction: 'Plus difficile, peux-tu dessiner une étoile en utilisant la fonction "Tracer une ligne de carrés" ? Bonne chance !'
      Course 4 Artist For  Functions 11_instruction: 'Plus difficile, peux-tu dessiner une étoile en utilisant la fonction "Tracer une ligne de carrés" ? Bonne chance !'
      Course 4 Artist For Loops 1_instruction: 'Dessine ce triangle qui a des côtés de 50 pixels. Astuce : Utilise le bloc "Répéter".'
      Course 4 Artist For Loops 10_instruction: Jeu Libre ! Amuse toi à dessiner ce que tu veux avec les blocs que tu as appris à utiliser.
      Course 4 Artist For Loops 11_instruction: "Tu te souviens quand nous avons utilisé une variable pour contrôler le nombre de côtés dans une forme ? Ce modèle commence par un triangle et rajoute un côté à la fois jusqu'à dessiner un décagone (10 côtés). Chaque côté doit mesurer 100 pixels de long. Astuce : 360 divisé par le nombre de côtés de la forme est le nombre de degré que tu dois utiliser pour tourner à chaque fois."
      Course 4 Artist For Loops 11a_instruction: "Nous allons tout mettre ensemble!  Avec\nta connaissance des boucles « Pour » et le « compteur », crée ce dessin où\nchaque forme possède deux côtés de plus que la précédente.  Assure-toi que chaque côté fait\n10 fois la longueur du nombre de côtés du polygone.\\r\n\\r\nTrès peu\nde code t'a été donné."
      Course 4 Artist For Loops 12_instruction: "Ça avait l'air assez cool, mais maintenant je voudrais dessiner chaque forme à côté de la précédente. Cette fois chaque côté est de 20 pixels. Utilise un bloc de saut pour sauter en avant de 40 pixels après chaque forme. "
      Course 4 Artist For Loops 13_instruction: "Hmmm, ces formes grossissent à chaque fois ! N'as pas déjà résolu ce problème avec des variables ? Comment pouvons-nous utiliser la variable de compteur pour rendre les parties plus petits quand nous en avons de plus en plus ? Au lieu d'avancer sur une longueur fixe, essaie de te déplacer de (100 / compteur) pixels vers l'avant."
      Course 4 Artist For Loops 14_instruction: Si tu tournes un peu plus ou un peu moins que la normale pour dessiner une forme, tu vas créer un effet plus structuré. Essaie de tourner de 89 degrés pour créer cette spirale carrée tordue.
      Course 4 Artist For Loops 15_instruction: 'Jeu libre : Essaie de dessiner en utilisant les boucles. Nous avons ajouté quelques variables génériques à utiliser aussi.'
      Course 4 Artist For Loops 2_instruction: |-
        J'ai programmé le dessin d'un triangle à l'intérieur d'une boucle qui compte de 10 en 10, à partir de 50 jusqu'à 100. Regarde comment j'ai fait et ensuite appuie sur "Exécuter" quand tu es prêt à voir mon programme en action. 
      Course 4 Artist For Loops 3_instruction: Le triangle le plus petit fait 20 pixels de côté, le plus grand 200 pixels. Chaque triangle est 20 pixels plus grand que le précédent. Met à jour la boucle pour dessiner ces triangles.
      Course 4 Artist For Loops 4_instruction: |
        Utilise une boucle pour dessiner ces carrés.
        Le premier fait 50 pixels de côté, le plus grand fait 300 pixels de côté et chaque carré est 25 pixels plus grand que le précédent. Je t'ai donné pratiquement toute la programmation dont tu auras besoin sauf pour un bloc. Lequel ?
      Course 4 Artist For Loops 5_instruction: 'Bon travail avec le dernier puzzle ! Utilisons ce bloc de variable "compteur" encore pour dessiner ce dessin cool. '
      Course 4 Artist For Loops 6_instruction: "Jeu libre! Essaie d'utiliser une boucle pour dessiner une suite de formes grandissantes de ton choix."
      Course 4 Artist For Loops 6a_instruction: Effectue trois petits changements dans le code du niveau précédent pour y arriver !
      Course 4 Artist For Loops 7_instruction: 'Que se passe-il si tu enlèves le "Répète 3 fois" de cette algorithme, en gardant les blocs "bouge" et "tourne" dans la boucle ? Dans ce triangle en spirale, chaque côté a 20 pixels de plus que le précédent.'
      Course 4 Artist For Loops 8_instruction: La plus petite ligne des spirales carrées est de 10, la plus grande de 200 et chaque ligne est 10 pixels plus grande que la précédente. Peux-tu compléter les blocs manquants pour terminer cette magnifique image ?
      Course 4 Artist For Loops 8a_instruction: La plus petite ligne des spirales carrées est de 10, la plus grande de 200 et chaque ligne est 10 pixels plus grande que la précédente. Peux-tu compléter les blocs manquants pour terminer cette magnifique image ?
      Course 4 Artist For Loops 9_instruction: "Sais-tu dessiner une spirale ? Avance d'1 pixel à la fois, de 1 à 75."
      Course 4 Artist For Loops Challenge_instruction: "Sais-tu comment\nutiliser tout ce que tu as appris afin de créer cette image?\\r\n\\r\nBesoin d'un conseil? Clique ici."
      Course 4 Artist For Loops inspire_instruction: "À toi de jouer : Tu sais maintenant tout ce que tu dois savoir pour faire un modèle comme ceci ! Si cette photo t'inspire, essaye d'en faire une similaire. Sinon, crée ce que tu veux.\\r\n\\r\nBesoin d'un conseil? Clique ici."
      Course 4 Artist Functions 1_instruction: Peux-tu dessiner un carré qui a 100 pixels de côté en utilisant une boucle ?
      Course 4 Artist Functions 10_instruction: "De quel bloc as-tu besoin d'ajouter pour que le triangle soit sur le dessus du carré ?"
      Course 4 Artist Functions 11_instruction: 'Regarde ce code qui dessine un cube - peux-tu le déplacer dans une fonction appelée "Dessine un cube"'
      Course 4 Artist Functions 12.1_instruction: 'Créons une fonction appelée "dessiner un octogone 20" qui dessine un octogone où chaque côté fait 20 pixels de long.'
      Course 4 Artist Functions 12_instruction: Fais boucler la fonction carré pour dessiner une ligne
      Course 4 Artist Functions 13.1_instruction: "Maintenant, créons une fonction appelée « sauter en haut à droite » qui déplace l'artiste en au haut à droite de l'octogone que tu viens de dessiner, afin de terminer ce modèle. \\r \n\\r \nAstuce : pour te déplacer jusqu'à l'angle supérieur droit, essaye de sauter dans un modèle qui fait juste 3/8 de l'octogone."
      Course 4 Artist Functions 13_instruction: "Nous avons une nouvelle fonction appelée « tracer une ligne de carrés ». N'hésite pas à jeter un oeil à l'intérieur du bloc de cette fonction pour voir comment nous l'avons construite. Clique sur « Exécuter » lorsque tu es prêt pour la prochaine énigme."
      Course 4 Artist Functions 14.1_instruction: "Maintenant, créons une fonction appelée « sauter en haut à droite » qui déplace l'artiste en au haut à droite de l'octogone que tu viens de dessiner, afin de terminer ce modèle."
      Course 4 Artist Functions 14_instruction: "Tu te débrouilles bien ! Allons utiliser ta nouvelle fonction « Tracer une forme carré » pour dessiner une forme carrée. N'oublie pas que chaque carré fait 40 pixels de longueur."
      Course 4 Artist Functions 15_instruction: "Corsons un peu les choses, peux-tu dessiner une forme d'étoile à l'aide de la fonction « tracer une ligne de carrés » ? Bonne chance ! Remarque : tu devrais peut-être tourner de 144 degrés"
      Course 4 Artist Functions 2_instruction: 'Peux-tu dessiner 3 carrés avec 20 pixels de distance entre chaque carré ? Astuce : chaque carré a une taille de 100 pixels'
      Course 4 Artist Functions 3_instruction: "En utilisant le bloc fonction \"dessiner un carré\" , peux-tu faire ce dessin ? Les carrés sont espacés de 120 pixels. \\r\n"
      Course 4 Artist Functions 4_instruction: |-
        Es-tu prêt à créer ton propre bloc ? Clique sur le bloc "Fonctions" dans la boîte à outils, appelle la "dessiner un triangle" et crée ton triangle comme tu l'as fait avant, avec les blocs "action" et "boucle". Clique ensuite sur "enregitrer et fermer" dans le coin droit. Astuce : cree un triangle qui est long de 100 pixels. Bonne chance !
      Course 4 Artist Functions 5 OLD_instruction: "Essayons d'utiliser nos deux fonctions pour dessiner une maison -que devons-nous corriger pour dessiner correctement la maison ?"
      Course 4 Artist Functions 5_instruction: "En utilisant le bloc fonction \"dessiner un carré\" , peux-tu faire ce dessin ? Les carrés sont espacés de 120 pixels. \\r\n"
      Course 4 Artist Functions 6_instruction: "De quel bloc as-tu besoin d'ajouter pour que le triangle soit sur le dessus du carré ?"
      Course 4 Artist Functions 7_instruction: Peux-tu dessiner une ligne de carrés en utilisant une fonction Carré ? Chaque carré a 40 pixels de longueur.
      Course 4 Artist Functions 8_instruction: "As-tu compris l'utilisation des blocs de fonction ? Modifions ce carré afin qu'il ait une taille de 200 pixels. Astuce : clique sur « modifier » pour modifier la taille dans l'éditeur de la fonction « dessiner un carré ». N'oublie pas de cliquer sur « enregistrer et fermer » pour sortir de l'éditeur de fonction. "
      Course 4 Artist Functions 9_instruction: "Nous t'avons donné presque tout le code pour créer une fonction. Cependant, il semble manquer quelque chose. Peux-tu terminer ce bloc fonction ?"
      Course 4 Artist Functions challenge_instruction: Clique ici pour revoir les astuces.
      Course 4 Artist Functions Inspiration_instruction: Clique ici pour revoir les astuces.
      Course 4 Artist Functions inspire_instruction: "Appuies ici pour voir l'image d'inspiration de nouveau."
      Course 4 Artist Inspire_instruction: "Tu veux un deuxième coup d'oeil au\nmodèle ou à des conseils?  Clique ici!\\r\n\\r\nSinon, fabrique ton propre dessin !"
      Course 4 Artist Params 1_instruction: Nous allons éditer une fonction qui dessine un carré de côté 50 pixels
      Course 4 Artist Params 10_instruction: |-
        Tu peux appeler des fonctions à partir d'autres fonctions ! En utilisant ta fonction "Forme" comme base, crée trois formes de maison, chacune 20 pixels plus grande que la précédente en commençant à 50 pixels de longueur. Utiliser une boucle avec compteur sera probablement utile. 
      Course 4 Artist Params 11_instruction: |
        How about a function called "pinwheel"
        that takes three parameters - "sides," "length" and "repeat." You can
        calculate how much to turn after each shape using the same math you used to
        figure out the turns for a shape of "sides". Can you recreate this picture?
        Here's a tip each shape is 100 pixel's in length.
      Course 4 Artist Params 12_instruction: Utilise ta fonction « pinwheel » pour dessiner chacune de ces formes. La longueur du côté de chaque image est 50.
      Course 4 Artist Params 13_instruction: 'Jeu libre : Voici les fonctions que tu as écrit et même un peu plus, pour que tu puisses jouer. Dessine quelque chose de génial !'
      Course 4 Artist Params 2_instruction: |
        That triangle function would be a whole
        lot more useful if it could draw triangles of different sizes. I've added
        a parameter for line length, but it doesn't do anything yet. Can you update
        the function so it uses the "length" parameter when it draws each side?
        The triangle sizes are 150 pixels, 75 pixels and 25 pixels.
      Course 4 Artist Params 3_instruction: 'Génial, peux-tu dessiner chacun de ces triangles avec cette nouvelle fonction ? Le premier est 25 pixels de long, la seconde est de 50, et le troisième est de 75. '
      Course 4 Artist Params 4_instruction: Peux-tu ajouter une nouvelle fonction appelée Carré ? Elle devrait également prendre un paramètre de longueur,comme la fonction Triangle. Cette fois dessine 3 carrés de 25, 50 et 75 pixels de longueur, distant de 100 pixels.
      Course 4 Artist Params 5_instruction: |
        Utilise tes deux nouvelles fonctions pour dessiner cette image. 
        Pour te faciliter la tâche, utilise une boucle avec un paramètre « compteur ».
        
      Course 4 Artist Params 6_instruction: |
        Editons la fonction "dessine une forme".
        Elle a déjà un paramètre "longueur". Maintenant, éditons la fonction pour ajouter un paramètre "côtés". Souviens-toi que l'angle d'une forme donnée est 360 divisé par le nombre de côtés qu'elle a. Suggestion: les longueurs pour chaque forme sont: pour le triangle 100 pixels, l'hexagone 25 pixels et le carré 50 pixels.   
      Course 4 Artist Params 7_instruction: |-
        Peux-tu dessiner ces formes en remplissant le "???"? Le carré et le triangle a une taille de 100 pixels et l'hexagone une taille de 75 pixels. 
      Course 4 Artist Params 8_instruction: |
        Peux-tu découvrir comment dessiner cette forme? Voici un indice, crée une nouvelle fonction avec 6 côtés appelé hexagone.
        
      Course 4 Artist Params 9_instruction: |-
        Te souviens-tu quand nous avons utilisé le compteur de boucle mais avons retiré une boucle à l'intérieur? Amusons-nous et utilisons la fonction "dessine une forme" avec les paramètres "côtés" et "formes". Peux-tu recréer ces formes? Le compteur du carré doit être 5/100/5, celui du triangle 10/100/10 et celui de l'hexagone 2/100/2.
      Course 4 Artist Var 9_instruction: |-
        Voici l'algorithme pour dessiner un triangle, modifie-le pour quil utilise la variable "côtés". Remplace le numéro 3 avec la variable "côtés". Indice: souviens-toi d'utiliser le bloc "set sides to".
      Course 4 Artist Vars 1_instruction: "Peux-tu m'aider à dessiner un triangle? Chaque côté fait 100 pixels."
      Course 4 Artist Vars 10_instruction: |-
        Voici un algorithme qui dessine un triangle à partir de triangles plus petits. Peux-tu le modifier pour qu'il utilise la variable "côtés" pour dessiner chaque triangle? Parcours le code, et à chaque fois que tu vois le nombre 3, remplace le avec ta variable "côtés". Souviens-toi d'utiliser le bloc "set sides".
      Course 4 Artist Vars 11_instruction: 'Voici le même algorithme que celui que nous avons créé pour le dernier puzzle - quelle valeur dois-tu attribuer à la variable "côtés" pour dessiner cette image de carrés?'
      Course 4 Artist Vars 12_instruction: "Maintenant affectons la variable « côtés » à la valeur 5. Plus nous ajoutons de côtés à cet algorithme, plus le motif global devient grand ! Nous allons ajouter une nouvelle variable appelée « longueur » et l'utiliser partout où tu utilises un « avancer ». Affecte la variable « longueur » à 75 pour cette forme."
      Course 4 Artist Vars 13_instruction: "Quand une forme a beaucoup de côtés, chaque côté doit être plus court si tu veux que toute la forme rentre dans l'écran.\n\\r\nNous allons recréer l'algorithme pour cette forme incroyable, mais au lieu de régler manuellement la variable « longueur », nous allons utiliser un bloc math avec la variable \"côtés\" à l'intérieur pour s'assurer que chaque forme s'adapte correctement. Le périmètre de chaque polygone est de 300 pixels.\\r\nBesoin de quelques conseils ?  Clique ici."
      Course 4 Artist Vars 14_instruction: 'Jeu gratuit: vérifie-le, maintenant ton algorithme est niché dans ue boucle de plus. Essaie de changer le variables de tes variables pour dessiner de jolis modèles.'
      Course 4 Artist Vars 2_instruction: 'Au lieu de « avancer de 100 », le bloc « avancer » fait maintenant référence à la variable "longueur". Peux-tu affecter « longueur » à 150 pour dessiner ce nouveau triangle ?'
      Course 4 Artist Vars 3_instruction: |-
        Voici une boucle qui dessine un carré, mais quelque chose manque. Peux-tu la corriger pour qu'elle utilise la variable "longueur" pour déterminer la longueur de chaque côté? 
      Course 4 Artist Vars 4_instruction: |-
        Maintenant je veux faire un rectangle qui soit deux fois plus grand que large. Nous avons une variable appelée "largeur' qui est fixée à 100. Peux-tu utiliser le bloc de math pour compléter le code?
      Course 4 Artist Vars 5_instruction: 'Utilise la variable "côtés" pour contrôler combien de fois la boucle se répète.'
      Course 4 Artist Vars 6_instruction: |-
        Hmmm, j'ai essayé de changer la variable "côtés" du code du dernier puzzle à 4, mais il dessine encore un triangle. Peux-tu utiliser la variable "côtés" (ainsi qu'un bloc de math) pour t'assurer que j'obtienne le quantité correcte? Indice: 360 divisé par le nombre de côtés te donnera le nombre de degrés à tourner.
      Course 4 Artist Vars 7_instruction: |-
        Peux-tu modifier la variable "côtés" pour m'aider à dessiner cet hexagon?
      Course 4 Artist Vars 8_instruction: |-
        Jeu gratuit: Fais des essais avec le nombre de côtés que cette forme . Peux-tu changer l'algorithme pour que la taille totale de la forme reste la même, quel que soit le nombre côtés? Indice: Tu devras peut-être utiliser ton bloc de math (360 divisé par "côtés" à deux endroits cette fois) 
      Course 4 Artist Vars 9_instruction: |-
        Modifie cet algorithme afin qu'il utilise la variable "côtés" au lieu d'un nombre fixe pour dessiner un triangle. Remplace le nombre 3 avec la variable "côtés", et utilise le block "set sides to".
      Course 4 Bee 1_instruction: "L'abeille ne peut pas dire si c'est une fleur ou un nid d'abeilles. Vérifie d'abord si c'est une fleur ou un nid d'abeilles, puis recueille le nectar si c'est une fleur. "
      Course 4 Bee 2_instruction: "Vérifie chaque objet pour voir si c'est une fleur. Si c'est le cas, butine... sinon, tu peux l'ignorer !"
      Course 4 Bee 3_instruction: "L'objet inconnu est soit une fleur soit un nid d'abeille. Utilise le bloc si/sinon pour collecter le nectar si c'est une fleur, sinon pour faire du miel (parce qu'alors ce serait un nid d'abeille)."
      Course 4 Bee 4_instruction: La fleur violette peut avoir soit 3, 2, ou 1 nectar. Ici un bloc si-sinon est combiné avec un autre bloc si-sinon pour créer un bloc si, sinon-si, sinon. Complète la solution pour collecter la quantité inconnue de nectar.
      Course 4 Bee 5_instruction: Cette fleur violette peut avoir 3, 2 ou 1 nectar. Ajoute un bloc si-sinon pour créer un bloc si, sinon-si, sinon. Complète la solution pour récolter la quantité inconnue de nectar.
      Course 4 Bee 6_instruction: Cette fleur violette peut avoir 3, 2 ou 1 nectar. Créer un blog si, sinon-si, sinon permettant de recueillir la quantité inconnue de nectar.
      Course 4 Bee 7_instruction: "Utilise tout ce que tu as appris jusqu'ici pour recueillir tout le nectar. La fleur violette peut avoir 3, 2 ou 1 nectar."
      Course 4 Bee For Loops 1_instruction: Utilise une boucle pour collecter le nectar de chaque fleur.
      Course 4 Bee For Loops 10_instruction: "Si ta boucle est dégressive, l'incrémentation est soustraite de la variable counter à chaque boucle. Que devrait être ton incrémentation pour collecter 9, ensuite 6 et enfin 3 nectars?"
      Course 4 Bee For Loops 11_instruction: "Qu'est-ce qui ne va pas dans cette boucle ? Essaye de la réparer afin que toutes les abeilles récupèrent le nectar."
      Course 4 Bee For Loops 2_instruction: |-
        Voici un nouveau genre de boucle, appelé la boucle "for". Cette boucle particulière comptera de 1 à 5, de 1 en 1, et exécutera le contenu de la boucle à chaque compte. Aide l'abeille à récolter le nectar.
      Course 4 Bee For Loops 3_instruction: Tu peux résoudre ce puzzle en utilisant une boucle pour compter de 1 à 3, de 1 en 1. Maintenant, récoltons du nectar!
      Course 4 Bee For Loops 4_instruction: "Récolte tout le nectar de ces fleurs. Je me demande s'il y a un moyen plus facile de le faire..."
      Course 4 Bee For Loops 5_instruction: |-
        Ah, la boucle for rend cette tâche beaucoup plus facile! En utilisant la variable "counter" de la boucle for pour répéter le bloc "get nectar" le même nombre de fois que la boucle. Wow! Ca fait beaucoup de boucle. Tout le code dont tu as besoin est là, regarde comment c'est organisé et clique sur Démarrer pour voir comment ça fonctionne. 
      Course 4 Bee For Loops 6_instruction: 'Tu peux aussi utiliser une boucle "for" pour décompter. Essaye de rassembler ce nectar en décomptant de 5 à 1, de 1 en 1.'
      Course 4 Bee For Loops 7_instruction: 'Utilise la variable "counter" de la boucle for pour contrôler la distance à laquelle tu bouges horizontalement.'
      Course 4 Bee For Loops 8_instruction: Peux-tu utiliser la variable de la boucle pour contrôler le mouvement et la collecte de nectar?
      Course 4 Bee For Loops 9_instruction: |-
        Le dernier nombre de ta boucle for est appelé l'"incrémentation", et chaque fois que la boucle est lancée la variable counter varie de l'incrémentation. Essaie de récolter ces fleurs en utilisant une incrémentation de 2.
      Course 4 Bee Loops 5 NEW_instruction: Met ces blocs dans une boucle afin de recueillir le nectar de chaque fleur.
      Course 4 Bee Loops 5a NEW_instruction: |
        Maintenant, utilise des boucles pour aider l'abeille recueillir
        tout le nectar sur son chemin vers le nid d'abeilles avec aussi peu de blocs que possible.  Quand
        tu y arrives, n'oublie pas de faire du miel !
      Course 4 Bee Params 1_instruction: |
        Utilise la fonction "collecte 3 le nectar" qui fait tourner, se déplacer pour collecter le nectar et revenir à son point de départ.
        Ecrit une séquence pour collecter tout le nectar en utilisant "collecte 3 le nectar".
      Course 4 Bee Params 2_instruction: |-
        Modifie la fonction "collecte 3 nectar" pour qu'elle me fasse tourner à droite des fleurs au lieu d'à gauche.
      Course 4 Bee Params 3 (copy 1)_instruction: |-
        Maintenant il y a des fleurs des deux côtés ! Peut-être que tu peux utiliser un paramètre pour que la fonction marche pour les fleurs de n'importe quel côté. J'ai ajouté un paramètre appelé "direction" à la fonction. Si le paramètre est égal à 0, je tourne à gauche, si c'est égal à 1, je tourne à droite.
      Course 4 Bee Params 3_instruction: |-
        Il y a maintenant des fleurs des deux côtés ! J'ai rajouté un paramètre appelé "direction " à la fonction. Utilise les variables "gauche " et "droite" pour contrôler la direction. Remplis le reste de la définition de la fonction et clique "enregistrer et fermer"
      Course 4 Bee Params 4 (copy 1)_instruction: "Essaie d'utiliser ta nouvelle fonction pour collecter toutes les fleurs. Rappelle-toi, 0 = gauche et 1 = droite."
      Course 4 Bee Params 4 - Two WhenRun_instruction: "Essaie d'utiliser ta nouvelle fonction pour collecter toutes les fleurs. Rappelle toi d'utiliser les variables gauche et droite."
      Course 4 Bee Params 4 backup_instruction: |-
        Est-ce que cela ne serait pas bien si nous pouvions collecter tous ces nectars avec une seule fonction ? Essaie d'ajouter un npiveau paramètre à ta fonction appelé "nectars" pour contrôler le volume de nectar à collecter. Tu voudras probablement renommer la fonction aussi ! 
      Course 4 Bee Params 4_instruction: "Essaie d'utiliser ta nouvelle fonction pour collecter toutes les fleurs. Rappelle-toi que tu dois utiliser les variables gauche et droite."
      Course 4 Bee Params 5_instruction: 'Commençons à zéro -peux-tu créer une nouvelle fonction appelée "collecte 5 nectar" avec un paramètre de direction ?'
      Course 4 Bee Params 6 (copy 1)_instruction: "Essaie d'utiliser ta nouvelle fonction pour collecter tout ce nectar. "
      Course 4 Bee Params 6_instruction: |
        Est-ce que cela ne serait pas bien de collecter tous ces nectars avec une seule fonction ? Essaie d'ajouter un nouveau paramètre appelé "nectars" à ta fonction pour contrôler la quantité de nectar à collecter. 
        Tu voudras probablement renommer la fonction aussi !
      Course 4 Bee Params 7 (copy 1)_instruction: "Essaie d'utiliser ta nouvelle fonction pour collecter tout ce nectar. "
      Course 4 Bee Params 7_instruction: "Essaie d'utiliser ta nouvelle fonction pour collecter tout ce nectar."
      Course 4 Bee Params 8 Clone 2_instruction: "Oh non, il faut aussi s'occuper du miel ! Comment peux-tu modifier la fonction pour soit récolter du nectar, soit produire du miel."
      Course 4 Bee Params 8 clone 3_instruction: "Oh non, il faut aussi s'occuper du miel ! Comment peux-tu modifier la fonction pour soit récolter du nectar, soit produire du miel."
      Course 4 Bee Params 8 Clone_instruction: "Oh non, il faut aussi s'occuper du miel ! Comment peux-tu modifier la fonction pour soit récolter du nectar, soit produire du miel."
      Course 4 Bee Params 8 new_instruction: "Oh non, il faut aussi s'occuper du miel ! Comment peux-tu modifier la fonction pour soit récolter du nectar, soit produire du miel."
      Course 4 Bee Params 8_instruction: "Oh non, il faut aussi s'occuper du miel ! Comment peux-tu mettre à jour la fonction pour soit collecter du nectar soit faire du miel."
      Course 4 Bee Params Ex_instruction: "Essaie d'utiliser ta nouvelle fonction pour collecter tout ce nectar."
      Course 4 Binary 1_instruction: Voilà une fonction qui utilise une suite binaire de 1 et de 0 et donne comme instructions au fermier de se déplacer de gauche à droite, du haut vers le bas et de retourner les carrés ou il y a un zéro. Exécute le code fourni pour voir comment le fermier utilise le binaire pour dessiner une image.
      Course 4 Binary 2_instruction: 'Quelle suite binaire pourrais-tu répéter 8 fois pour dessiner cette image ? Astuce : le chiffre "1" remplit un trou.'
      Course 4 Binary 3_instruction: " Peux-tu dessiner ce motif avec une boucle d'une seule suite binaire ?"
      Course 4 Binary 5 (copy 1)_instruction: Quelle chaîne binaire, répétée 10 fois, dessinera cette image ?
      Course 4 Binary 5_instruction: Quelle chaîne binaire, répétée 10 fois, dessinera cette image ?
      Course 4 Binary 6 (copy 1)_instruction: Quelle chaîne binaire, répétée 10 fois, dessinera cette image ?
      Course 4 Binary 6_instruction: Quelle chaîne binaire, répétée 10 fois, dessinera cette image ?
      Course 4 Binary 7_instruction: Quelle chaîne binaire, répétée 10 fois, dessinera cette image ?
      Course 4 Binary 8_instruction: "Tu peux compléter la plus grande partie de cette image en répétant un nombre binaire de 5 bits - ensuite, tu auras besoin d'un nombre de 4 bits pour compléter le coin en bas à droite."
      Course 4 EC 1a_instruction: "Pas de règle. Pas d'indice. Juste le Challenge !"
      Course 4 EC 1b_instruction: "Pas de règle. Pas d'indice. Juste le Challenge !"
      Course 4 EC 2a_instruction: "** Challenge extrême : ** pas de règle. Pas d'indice. Juste le Challenge !"
      Course 4 EC 2b_instruction: "** Challenge extrême : ** pas de règle. Pas d'indice. Juste le Challenge !"
      Course 4 EC 2c_instruction: "** Challenge extrême : ** pas de règle. Pas d'indice. Juste le Challenge !"
      Course 4 EC 3_instruction: 'Utilise ce que tu as appris dans le niveau précédent pour dessiner une image comme celle là. Remarque : Le code devient plus simple si tu incorpores des paramètres. '
      Course 4 EC 3a_instruction: "Challenge extrême : Pas de règle. Pas d'indice. Juste le Challenge !"
      Course 4 Maze 1_instruction: "Amène angry bird jusqu'au cochon !"
      Course 4 Maze 2_instruction: Évite la TNT!
      Course 4 Maze 3_instruction: "Programme angry bird pour quail arrive jusqu'au cochon. "
      Course 4 Maze 4_instruction: "Essaie d'utiliser un bloc de répétition pour utiliser moins de blocs..."
      Course 4 Maze 5_instruction: Peux-tu résoudre cette énigme en utilisant le moins de blocs possible?
      Course 4 Maze 6_instruction: Peux-tu résoudre cette énigme en utilisant le moins de blocs possible?
      Course 4 Play Lab For Loops 2_instruction: Cette fois-ci, essayons de compter les nombres impairs de 1 à 100.
      Course 4 Play Lab Params 1_instruction: |
        Voilà une fonction appelée "Saute"
        qui fera sauter ton personnage principal de 100 pixels. Utilise la fonction "Saute" pour récupérer tous les drapeaux.
      Course 4 Play Lab Params 10_instruction: |
        Nous avons rajouté une dernière fonction pour toi. Programme ton jeu pour appeler la fonction "niveau supérieur" si "points_joueur">10. Joue au jeu et dépasse le niveau 4 pour passer au puzzle suivant.
        
      Course 4 Play Lab Params 2_instruction: |-
        Nous avons maintenant des drapeaux qui sont trop haut pour le saut actuel ! Ajoutons un paramètre à notre fonction "Saute" appelé "Hauteur". La flèche vers le haut fera sauter de 200 pixels mais la flèche vers le bas fera sauter de 100 pixels.Clique sur "Editer" dans la fonction "Saute" et met là à jour pour qu'elle utilise le paramètre hauteur au lieu de juste sauter de 100 pixels.
      Course 4 Play Lab Params 3_instruction: |-
        Rajoutons un autre paramètre à la fonction "Sauter" pour pouvoir l'utiliser avec d'autres acteurs. Chaque acteur est représenté par un numéro, à partir de 1. Editer la fonction "Sauter" pour que la définition de la fonction inclue le paramètre "acteur". 
      Course 4 Play Lab Params 4_instruction: |
        Voilà une fonction appelée "patrouille".
        Edite-la pour déplacer le chat de 400 pixels vers le haut puis 400 pixels vers le bas.
      Course 4 Play Lab Params 5_instruction: 'Renseigne les données du paramètres "acteur" pour que nous puissions appeler la fonction "patrouille" pour chaque acteur. Rappelle toi, les acteurs ont les numéros 1, 2 et 3.'
      Course 4 Play Lab Params 6_instruction: "Ajoute un autre paramètre intitulé « vitesse » à la fonction « patrouiller ». Essaye d'utiliser un bloc « régler la vitesse » avec le nouveau paramètre « vitesse » pour aider les pingouins à obtenir les deux drapeaux avant que les autres lutins n'en obtienne un seul."
      Course 4 Play Lab Params 7_instruction: "Amusons nous ! Regarde le code fourni pour voir si tu peux comprendre ce que fait chaque bloc. \\r\n\\r\nQuand\ntu as terminé, utilise les touches de direction pour contrôler le chien et collecter tous les drapeaux."
      Course 4 Play Lab Params 8_instruction: |-
        Utilise un bloc "si touché" pour renvoyer le chien en haut à gauche s'il touche un des personnages.
      Course 4 Play Lab Params 9_instruction: "Voici notre jeu à un stade plus précoce, mais la plupart du code est masqué. Il existe une nouvelle fonction « marquer_points ». \\r\n \\r\nModifie la fonction afin qu'un paramètre \"points\" soit ajouté à la variable \"score_joueur\". \\r\n\\r\nLa variable \"score_joueur\" devrait augmenter chaque fois que Dog touche Chat et diminuer chaque fois que Cat touche Dog. \\r\n\\r\nRemarque : lorsque tu as terminé, clique sur \" Démarrer \" pour jouer.  Lorsque Dog inscrit 6 points, tu passeras au puzzle suivant. "
      Course 4 Play Lab Vars 1_instruction: Pas besoin de coder, appuie simplement sur « exécuter » pour jouer au jeu ! Dans ce jeu, tu es le chien qui tente de récolter plus de drapeaux que le chat. Utilise la flèche vers le bas pour contrôler le chien. Appuie sur « Terminer » lorsque tu as terminé de jouer.
      Course 4 Play Lab Vars 2_instruction: "Cette course n'était pas très juste ! Changez la variable « dog_speed » pour t'assurer que tu peux collecter plus de drapeaux que le chat. Le premier à récolter 10 drapeaux gagne !"
      Course 4 Play Lab Vars 3_instruction: Voici un nouveau type de jeu ! Utilise les flèches gauche et droite pour te déplacer et la flèche haut pour sauter. Essaie de récolter tous les drapeaux.
      Course 4 Play Lab Vars 4_instruction: 'Maintenant, nous utilisons une variable appelée « hauteur » pour contrôler à quelle hauteur le chien peut sauter. Mets à jour la variable « hauteur » pour que le chien puisse sauter assez haut pour atteindre tous les drapeaux. Astuce : les nouveaux drapeaux ont 200 pixels de haut.'
      Course 4 Play Lab Vars 5_instruction: "Nous allons construire un jeu ! Tout d'abord nous aurons besoin d'un score. Le bloc de « régler les points à » permet de régler le score à 10. "
      Course 4 Play Lab Vars 6 (copy 1)_instruction: |-
        Chouette, maintenant nous avons notre variable de score, mais comment allons-nous la rendre utile ? Et si on ajoutait des points à la variable de pointage à chaque fois que tu frappes l'ennemi avec une boule de feu ? Utilise l'événement « quand acteur 2 touche quoi que ce soit » pour déclencher une mise à jour de ton score lorsque tes boules de feu frappent le chat. Tu peux incrémenter le pointage en définissant "points = points +1". Augmente ton pointage jusqu'à 10 (1 point à la fois !) pour passer le niveau.
      Course 4 Play Lab Vars 6_instruction: |
        Dans notre jeu, comment comptons-nous les points ?
        Ajoute 1 à la variable "points" chaque fois que le chien touche le chat avec une boule de feu. Utilise l'évènement "quand le personnage 2 touche quelque chose" pour déclencher une mise à jour de ton score. Tu peux incrémenter ta variable en paramétrant "points = points +1."
        Amène ton score jusqu'à 10 (un à la fois !) pour changer de niveau.
      Course 4 Play Lab Vars 7_instruction: "Très bien, maintenant, assurons-nous que ce jeu n'est pas trop facile - chaque fois que le chien (personnage 1) est touché par une boule de feu, tu perds un point. Commence par 10 points pour que ce ne soit pas trop difficile. Laisse ton score retomber de 10 à 0 pour changer de niveau."
      Course 4 Play Lab Vars 8 (copy 1)_instruction: |
        Ok, une dernière chose pour ce jeu - paramètrons le pour que le joueur puisse gagner (ou perdre). Utilise une boucle "toujours" pour vérifier le score - si le score est toujours supérieur à 10, fais disparaître l'ennemi. Si le score est toujours à 0, fais disparaître le joueur.
        Clique sur "Finir" quand le jeu se déroule comme tu veux.
      Course 4 Play Lab Vars 8_instruction: |
        Paramètrons le pour que le chien puisse gagner (ou perdre). Utilise une boucle "toujours" pour vérifier le score - si le score est toujours supérieur à 10, fais disparaître l'ennemi (le chat). Si le score est toujours à 0, fais disparaître le joueur (le chien).
        Clique sur "Finir" quand le jeu se déroule comme tu veux.
      Course 4 Play Lab Vars 9_instruction: "Jeu libre ! Voilà toutes les variables avec lesquelles nous avons joué jusqu'à maintenant, avec d'autre variables que tu peux utiliser. Crée un jeu ou une histoire qui utilise ces variables. Astuce : descend pour voir toutes les commandes dans l'espace de travail."
      Course 4 Play Lab Vars_instruction: |-
        Très bien, une dernière chose pour ce jeu - paramètrons le pour que le joueur puisse gagner (ou perdre). Utilise une boucle "toujours" pour vérifier le score - si le score est toujours supérieur à 10, fais disparaître l'ennemi. Si le score est toujours à 0, fais disparaître le joueur.
      Course 4 Play Labs For Loops 1_instruction: 'Fais parler le chien à chaque nombre de 1 à 100. Utilise une boucle et le bloc "compteur" pour faire parler la variable chaque fois que la boucle est exécutée.'
      Course 4 Play Labs For Loops 2_instruction: Cette fois-ci, essayons de compter les nombres impairs de 1 à 100.
      Course 4 Play Labs For Loops 3_instruction: Si on compte avec de grands nombres, on arrive à un chiffre plus grand dans le même laps de temps. Essaie de faire compter le chien de 10 en 10, de 10 à 1000.
      Course 4 Play Labs For Loops 4_instruction: "Changer l'incrément peut être utile, mais nous comptons toujours linéairement (chaque nombre est à la même distance du précédent). Que se passerait-il si je comptais de façon exponentielle ? Sans modifier les paramètres dans cette boucle, peux-tu compter 1, 4, 9, 16, 25... (compteur au carré) ?"
      Course 4 Play Labs For Loops 4a_instruction: "Maintenant , mélangeons les variables\nde l'Etape 7 avec ta variable \"compteur\" pour faire apparaître la magie. \\r\n\\r\nDans\nce puzzle, le chien va compter de 0 à 1000 en utilisant \"incrément\". Définis la variable \"incrément\" de 10 au début de ton code pour voir ce qui se passe."
      Course 4 Play Labs For Loops 5_instruction: |-
        À l'étape précédente, nous avons créé un compteur qui prend le carré de chaque nombre. Essaie de remplacer "compteur ^ 2" par "counter ^ 3" pour prendre le cube de chaque nombre (1, 8, 27, 64, 125, 216, 343...)
      Course 4 Play Labs For Loops 5a_instruction: "Dans ce puzzle, le chien va être ton \nchronométreur.\\r\n\\r\nLe chien va compter de 0 à 30 en utilisant \"incrément\". La variable \"incrément\" va commencer avec la valeur de 1.\\r\n\\r\nPeux-tu faire en sorte que chaque\nfois que tu cliques sur le chien, l'incrément augmente de 2? Clique sur la flèche \"avancer\" pour exécuter la boucle \"pour\".\\r\n\\r\nExécute la boucle quelques fois, en appuyant sur le chien avant\nchacune."
      Course 4 Play Labs For Loops 6_instruction: |-
        Tu te souviens qu'un nombre premier est un nombre entier qui n'est divisible que par lui-même. Utilise la fonction "est_nombrepremier" pour enoncer seulement les nombres premiers de 1 à 100.
      Course 4 Play Labs For Loops 6a_instruction: "Le chien va quand même chronométrer en comptant\navec notre \"boucle pour\" en utilisant l' \"incrément\", mais cette fois, on va ajouter Le Magicien à l'intérieur du mix. Peux-tu changer le code pour que cet \"incrément\" aille en haut de deux chaque fois que tu appuies sur Le Magicien?\\r\n\\r\nFais attention! Le Magicien bouge rapidement!"
      Course 4 Play Labs For Loops 7_instruction: "Pourrais-tu utiliser une boucle « Répéter » pour m'aider à dire la séquence 1, 4, 7, 10, 13, 16, 19, 22, 25 ?"
      Course 4 Play Labs For Loops 7a_instruction: "C'est maintenant qu'on arrive quelque part! Et\nsi on commençait à compter combien de fois on peut cliquer sur Le Magicien avant que le chien arrive à 30?  \\r\n\\r\nContinue d'ajouter les blocs au Magicien pour que chaque fois qu'il est cliqué, la variable \"cliqué\" augmente de un. Tu peux ignorer \"incrément\" pour l'instant.\\r\n\\r\nDog va commencer à compter lorsque tu cliqueras sur \"Exécuter\"."
      Course 4 Play Labs For Loops 8_instruction: Quelle boucle « Répéter » me ferais dire 19, 27, 35, 43, 51 ?
      Course 4 Play Labs For Loops 8a_instruction: "Pour terminer notre jeu, nous avons besoin de ramener la variable « incrément» ! Rattachons le au niveau de jeu. \\r \n\\r \n1) Conserve le nombre de fois où le magicien est cliqué. \\r\n2) Si le magicien est cliqué au moins 10 fois avant que le chien compte jusqu'à 30, augmente « incrément » de 1 et recommence. \\r\n3) Si le magicien n'est pas cliqué au moins 10 fois, le jeu est fini."
      Course 4 SCF 1_instruction: "Utilise les fonctions proposées pour dessiner quatre rangées d'hexagones. Tu remarques que nos lignes paires sont décalées vers la droite ?"
      Course 4 SCF 1a_instruction: Peux-tu trouver comment récolter tout ce nectar en utilisant le moins de blocs possible ?
      Course 4 SCF 1b_instruction: Peux-tu trouver comment récolter tout ce nectar en utilisant le moins de blocs possible ?
      Course 4 SCF 2_instruction: 'Utilise ce que tu as appris dans le niveau précédent pour dessiner une image comme celle là. Remarque : Le code devient plus simple si tu incorpores des paramètres. '
      Course 4 SCF 3 Fail 1_instruction: Peux-tu trouver comment ...
      Course 4 SCF 3 Fail 2_instruction: Peux-tu trouver comment ...
      Course 4 SCF 3_instruction: 'Utilise ce que tu as appris dans le niveau précédent pour dessiner une image comme celle là. Remarque : Le code devient plus simple si tu incorpores des paramètres. '
      Course 4 SCFL 1_instruction: Résous ce puzzle en utilisant le moins de blocs possible.
      Course 4 SCFL 1a_instruction: Peux-tu emmener Skrat à son gland en utilisant le moins de blocs possible ?
      Course 4 SCFL 1b_instruction: Peux-tu emmener Skrat à son gland en utilisant le moins de blocs possible ?
      Course 4 SCFL 2_instruction: Résous ce puzzle en utilisant le moins de blocs possible.
      Course 4 SCFL 3_instruction: Peux-tu trouver comment recréer ce dessin ?
      Course 4 SCFL 4_instruction: Peux-tu trouver comment recréer ce dessin ?
      Course 4 SCFL 5_instruction: Peux-tu trouver comment recréer ce dessin ?
      Course 4 SCFL 6_instruction: Peux-tu trouver comment récréer ce dessin avec une seule boucle ?
      Course 4 SCFL 7_instruction: "L'Artiste veut attraper quelques vagues ! Peux-tu trouver comment recréer ce dessin ?"
      Course 4 SCFP 1_instruction: "Crée une fonction avec des paramètres qui permettent à l'Artiste de sauter vers l'avant ou l'arrière de x pixels, et aussi vers le haut ou le bas de y pixels (en utilisant les nombres positifs et négatifs)."
      Course 4 SCV 1_instruction: Clique ici pour revoir les instructions.
      Course 4 SCV 2_instruction: Clique ici pour revoir les instructions.
      Course 4 SCV 3_instruction: "Maintenant on joue à chat !  Touche le chat pour marquer 2 points. Touche le pingouin pour marquer 3 points.  Cumule 10 points pour gagner ! \\r\nMais attention lorsque le chat et le pingouin se touchent, ils enlèvent des points. \\r\n \\r\nAjoute les blocs nécessaires pour faire fonctionner ce jeu tel qu'expliqué.  Comment feras-tu en sorte que le chien se déplace dans toutes les directions en utilisant les touches fléchées ?  Comment feras-tu pour ajouter des points lorsque le chien touche le chat ou le pingouin ?  Comment soustrairas tu les points quand le chat et le pingouin se touchent ?"
      Course 4 SCV 4_instruction: Résous ce puzzle en utilisant le moins de blocs possible.
      Course 4 SCV 5_instruction: Résous ce puzzle en utilisant le moins de blocs possible.
      Course 4 SCV 6_instruction: Clique ici pour revoir les instructions.
      Course 4 SCVP 1_instruction: "Crée une fonction avec des paramètres qui permettent à l'Artiste de sauter vers l'avant ou l'arrière de x pixels, et aussi vers le haut ou le bas de y pixels (en utilisant les nombres positifs et négatifs)."
      Course 4 Variables Assessment_instruction: Peux-tu créer cette image en utilisant une variable pour les côtés ? Chaque ligne doit faire 50 pixels de long.
      Course1BeePuzzle12_instruction: Get three nectars and then make two honey
      Course1MazeAssessment1_instruction: "This is a test!\\r\nMove one way, then\nanother to get me to the pig"
      Course1MazeAssessment2_instruction: "This is a test!\\r\nMove one way, then\nanother to get me to the pig."
      CSP Data Unit - Counting Multiple Things_instruction: "If you can count one\nthing you can count multiple things\\r\n\\r\nFind out how many people like something\nother than dogs and cats\\r\n\\r\nCount dogs\\r\nCount cats\\r\nCount total\\r\nDo\nthe math\\r\n\\r\nblank/ blank toal\\r\n\\r\nCan also use this to find percents\nfrom this\\r\n\\r\nx% are dog lovers"
      CSP Data Unit -Counting Records - Easy Way_instruction: "ReadRecords with specific\ncriteria \\r\nfind the length of an array\\r\n"
      CSP Data Unit -Counting Records - Hard Way_instruction: "\\r\n1. ReadRecords\nfor all records\\r\n2. Way to loop through and count\\r\n"
      CSP U4 - JSON Object Intro - Bad Way_instruction: |
        Trigger both the keyboard
        and mouse event and examine the event objects displayed in the console. Why
        might an object be the best way to store this information? (Click to see full
        instructions)
      CSP U4 - JSON Object Intro - Good Way_instruction: |
        Create an object with at
        least 5 values including at least one string and one number. (Click to see
        full instructions) 
      CSP U4 - Objects - createObject_instruction: |
        Create an object with at least
        5 values including at least one string and one number. (Click to see full
        instructions) 
      drawings!_instruction: |
        Draw the equilateral triangle - all the sides are the
        same!
      ECSPD Binary Odometer_instruction: |
        This is another resource you could use
        with your students.
      Eval Booleans 1_instruction: |
        Boolean operators (like >, <, =) allow us to
        compare different values, returning either true or false. Click "Run" to
        see how this expression evaluates.
      Eval Booleans 2_instruction: |
        Can you set the values so that this expression
        evaluates as true?
      Eval Booleans 3_instruction: |
        The string-length function returns the number
        of characters in a string (including spaces!) - make this code evaluate to
        true.
      Eval Booleans 4_instruction: |
        Here's an Evaluation Block called AND - it returns
        true if both of its parameters are true, otherwise it returns false. Edit
        the x variable so that this expression returns true.
      Eval Booleans 5_instruction: |
        This OR block returns true if either of its parameters
        is true. Otherwise, if both parameters are false it will return false. Set
        the y variable to a value that will cause this expression to return false.
      Eval Booleans 6_instruction: |
        Here's one more boolean block called NOT. This
        block flips true to false, or false to true. If you wrap this block of code
        in a NOT block, it should return true (because we are asking if the two expressions
        do NOT produce equal values).
      Eval Booleans Free Play_instruction: |
        Free Play: Try out some creations of
        your own using Booleans.
      Eval Booleans_instruction: |
        Booleans allow us to compare different values,
        returning "true" if the are equal, or "false" if they are not. What do
        you think this code will evaluate to?
      Eval Cond 1_instruction: |
        The cond block checks the boolean expressions in
        the left column, and as soon as it finds one that returns "true" it runs
        the corresponding code on the right. If none of the expressions evaluate to
        "true," it runs the bottom block. Update the "temperature" variable so
        that this block returns "It's just right."
      Eval Cond 2 (copy 1)_instruction: |
        This condition returns a different shape
        based on the value of the "sides" variable - change the value of "sides"
        so that the conditional returns a triangle.
      Eval Cond 2_instruction: |
        This condition returns a different shape based on
        the value of the "sides" variable - change the value of "sides" so that
        the conditional returns a triangle.
      Eval Cond 3 (copy 1)_instruction: |
        Can you write a conditional that checks
        the variable "age" and returns "Old enough to vote and drive" if age >
        17, "Old enough to drive" if age is > 15, and "Can't drive or vote" if
        neither conditions is true. Hint: The first condition to return "true" wins
        - make sure you put your conditions in the right order.
      Eval Cond 3_instruction: |
        Can you write a conditional that checks the variable
        "age" and returns "Old enough to vote and drive" if age > 17, "Old enough
        to drive" if age is > 15, and "Can't drive or vote" if neither conditions
        is true. Hint: The first condition to return "true" wins - make sure you
        put your conditions in the right order.
      Eval Cond 4_instruction: |
        We can use the string=? function to make conditionals
        that respond to text input. Here's a function called green shape that takes
        a string for the type of shape. Complete the conditions so that the correct
        solid green shape is returned when the function is run with "circle", "triangle",
        "square", or "rectangle".
      Eval Cond 5_instruction: |
        Here's a similar function red shape with an additional
        variable for size. Complete the conditionals so the correct solid red image
        of a given size is drawn for "circle", "triangle", and "star".
      Eval Cond 6_instruction: "Write a function called food-critic, which takes\nin the name of a food and produces a String that says how you feel about that\nfood. For example, (food-critic “pizza”) might evaluate to “delicious”, but\n(food-critic “rotten eggs”) might evaluate to “gross!”. Choose at least two\nfoods to review, but you can you write more if you like!  Don’t forget to\nadd an “else” clause!\\r\nOne example - and part of the definition -  has already\nbeen done for you!"
      Eval Cond 7_instruction: "Free Play: Write a function called green-shape, which\ntakes in the name of a shape and produces a solid green shape. Your function\nshould work with at least “circle”, “star” and “rectangle”, but you can add\nother shapes if you like. You can choose the size of each shape. Don’t forget\nto add an “else” clause!\\r\nOne example - and part of the definition -  has\nalready been done for you!\\r\n"
      Eval Cond 8_instruction: "Free Play: Suppose you want to own a car at 21, or\nhave your own business by 30. Write a function called life-goals, which takes\nin an age and produces a string that describes your life goals by then. Don’t\nforget to add an “else” clause!\\r\n"
      Eval Contracts 1_instruction: |
        Use the "star" function to produce a red star
        with a 60 pixel radius
      Eval Contracts 10A_instruction: |
        Alright let's complete this puzzle with a
        Green Square that is 175 pixels in size.
      Eval Contracts 11A_instruction: |
        Can you complete this puzzle to read "Hello
        World" in the banner?
      Eval Contracts 2_instruction: |
        Check out the "rotate" function - can you
        use it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts 3_instruction: |
        Try using the "text" function to write this
        teal text at size 40.
      Eval Contracts 4 A_instruction: |
        The "scale" function returns an image that
        is scaled either larger or smaller than the input image. Try scaling this
        circle by a factor of 10 - how is the resulting image different than if you'd
        just made a circle of that size in the first place?
      Eval Contracts 4_instruction: |
        The scale function returns an image that is
        either larger or smaller than the input image. Try scaling this circle by
        a factor of 10. How is the returned image different than if you'd just made
        a circle of that size in the first place?
      Eval Contracts 8A_instruction: |
        Can you complete this puzzle? The big-triangle
        is 200 pixels in size and purple?
      Eval Contracts A_instruction: |
        Use the star function to produce a solid red
        star with a 60 pixel radius
      Eval Contracts C_instruction: |
        Check out the rotate function - can you use
        it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts E_instruction: |
        Try using the text function to write "Hello,
        world!" in teal at size 40.
      Eval Contracts shrink_instruction: |
        Can you complete this image using the "shrink"
        function block? The radius is 20. 
      Eval Define Funcs 1_instruction: |
        Here's a new function called green-triangle
        that takes a single Number for size and produces a green triangle. Use the
        new function to create a 125 pixel green triangle.
      Eval Define Funcs 2_instruction: |
        Let's look inside that green-triangle function
        to see how it works. Can you modify it so that the green-triangle function
        always draws outlined green triangles?
      Eval Define Funcs 3_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Define Funcs 4_instruction: |
        Create a new function called aqua-star that
        has a Domain of a single Number for radius and returns an aqua star of the
        given radius. Run your new function with a radius of 75.
      Eval Define Funcs 5_instruction: |
        Let's use that aqua-star function to make
        a row of different sized stars. From left to right, the stars should have
        radii of 25, 50, and 75.
      Eval Define Funcs Test_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Defining Vars Free Play 1_instruction: |
        Free Play: We've provided a function
        that fills your screen with my-image. Change my-image to see what patterns
        you can make.
      Eval Design Recipe .1_instruction: |
        Here's a Design Recipe for a function
        called square-circle with domain Number String and range Image. Click Edit
        to write the function definition (you will see two examples provided).
      Eval Design Recipe 1 (copy 1)_instruction: |
        We're going to write a function
        that draws a solid rectangle of any color that is twice wide as it is high.
        Start with an example - draw a solid green rectangle that has a height on
        100 pixels.
      Eval Design Recipe 1_instruction: |
        Alright, now given the Contract wide-rect:
        Number String -> Image, write an example - draw a solid green rectangle that
        has a height of 100 pixels.
      Eval Design Recipe 2 (copy 1)_instruction: |
        Let's do one more example before
        writing the function definition - this time draw a solid red rectangle with
        a height of 75 pixels.
      Eval Design Recipe 2_instruction: |
        Let's do one more example before writing
        the function definition - this time draw a solid red rectangle with a height
        of 75 pixels.
      Eval Design Recipe 3_instruction: |
        The Design Recipe for wide-rect already
        has a contract and one example. Can you write a second example and then complete
        the definition? The wide-rect function should produce a rectangle of given
        color that is twice as wide as it is high.
      Eval Design Recipe 4_instruction: |
        Use the Design Recipe to create a function
        starburst. When given a number of points and an outer radius, starburst returns
        a yellow radial star with given points, and an inner radius that is half the
        outer radius.
      Eval Design Recipe 5_instruction: |
        Using the Design Recipe, write a function
        striped-flag that takes two colors and produces a flag that is 250 pixels
        wide, 150 pixels tall, with three even horizontal stripes of given colors,
        in the order color2, color1, color2.
      Eval Design Recipe 6_instruction: |
        Write a function large-polygon that should
        output a solid polygon of given sides and color that takes up most of the
        window, regardless of the number of sides. To make sure that the polygon doesn't
        get too large as you increase the number of sides, side length should be inversely
        proportional to side number, with a length of (800/sides).
      Eval Design Recipe Free Play_instruction: |
        Free Play: Use the Design Recipe
        to create some functions of your own design
      Eval Free Play_instruction: 'Free Play: Make art with code!'
      Eval Strings Images .1_instruction: |
        So far we've only dealt with a single
        type of data, Numbers. Another type of data is a String, which is any combination
        of letters, numbers, or other characters wrapped in quotation marks. Run the
        String "Hello, world!" and see what happens.
      Eval Strings Images .2_instruction: |
        The string-append function takes two Strings
        and returns a single combined String. Add a String "Universe" to the second
        argument of string-append.
      Eval Strings Images 1_instruction: |
        The third type of data we're going to
        use is an Image. This star function takes in a Number and two Strings, and
        it evaluates to an Image. Use this function to make a solid red star with
        radius of 100.
      Eval Strings Images 2_instruction: |
        Free Play: Every Evaluation Block is color-coded
        to let you know which data type it returns and which types it needs for its
        parameters. The last parameter of the triangle function takes a String that
        controls its color - try some different colors to see what works.
      Eval Strings Images 3_instruction: |
        Some functions can only take a specific
        set of Strings, such as the second argument of this circle function, which
        controls its style. Draw this orange outline circle using the special String
        block with a dropdown to make sure you only use valid styles.
      Eval Strings Images 4_instruction: |
        Try using the rectangle block to draw this
        solid, red rectangle - it is 175 pixels wide and 100 pixels tall.
      Eval Strings Images 5_instruction: |
        Try using this new Evaluation Block called
        overlay to place a 100 pixel white triangle on top of a 200 pixel red circle.
      Eval Strings Images 6_instruction: |
        Use the overlay block to place a 75 pixel
        radius yellow star on top of a 150 pixel long blue square.
      Eval Strings Images 7_instruction: |
        The offset block lets you move an image
        relative to where it would normally be placed. Use this block to offset the
        square by 100 pixels on the y-axis.
      Eval Strings Images 8_instruction: |
        Here's a different kind of star block
        - it's called radial-star and it allows you to draw stars with any number
        of points! Use it to create a 7 point solid orange star with an inner radius
        of 75 pixels and an outer radius of 175 pixels.
      Eval Strings Images Free Play_instruction: |
        Free Play: Explore the blocks available
        to create something interesting. Make sure to share your favorite creations.
      Farmer for Authored Hint testing_instruction: |
        Wow, I found a really deep hole!
        I don't know how many shovelfuls of dirt it needs.  Can you write a program
        that fills it until the ground is even?  Hint:  Try using the while loop this
        time.
      Frequency Analysis_instruction: Test
      frozen circle function in circle_instruction: Maintenant, nous allons créer 20 cercles superposés, en tournant de 18 degrés entre chaque cercle.
      frozen circle function with parameter_instruction: "Voici un bloc « Créer un cercle » qui peut faire des cercles de différentes tailles. Peux-tu l'utiliser pour créer un petit cercle de taille 5 et un plus grand cercle de taille 10 ?"
      frozen circle function_instruction: "Utilise le nouveau bloc « Créer un cercle » pour créer 10 cercles superposés. N'oublie pas d'aller vers l'avant entre les cercles."
      frozen circle_instruction: "Un cercle est une forme spéciale. Peux-tu trouver par quel nombre remplacer le point d'interrogation pour dessiner un cercle ?"
      frozen cross rotate dense_instruction: "Nous allons le répéter 90 fois ! Combien de fois 90 rentre dans 360 ? Indice : C'est un très petit nombre."
      frozen cross rotate_instruction: Maintenant, essaie de le répéter 10 fois. De combien de degrés dois-tu tourner entre chaque ligne ?
      frozen cross_instruction: "Place un bloc « Répéter » autour de ces commandes pour créer un signe plus. As-tu remarqué que Elsa peut se déplacer vers l'avant et vers l'arrière ?"
      frozen diamond mini snowflake_instruction: Savais-tu que chaque flocon de neige a une forme différente ? Nous allons créer un nouveau flocon de neige en utilisant le bloc « Répéter » pour répéter un parallélogramme 4 fois, en tournant à droite de 90 degrés entre chaque parallélogramme.
      frozen diamond snowflake_instruction: "Maintenant, nous allons créer un nouveau flocon de neige en utilisant le bloc « Répéter » pour répéter un parallélogramme 10 fois, en tournant à droite par 36 degrés entre chacun d'eux."
      frozen diamond_instruction: |-
        Utilise un "Répéter" autour de ces blocs pour créer un parallélogramme. C'est comme un rectangle, mais les angles sont différents. Celui-ci a des angles de 60 degrés et 120 degrés au lieu d'avoir tous les angles à 90 degrés.
      frozen freeplay_instruction: "Tu es officiellement devenu un maître de l'art ! Crée un paradis d'hiver."
      frozen line_instruction: "Salut ! Je suis Elsa d'Arendelle. Aide-moi à créer une ligne."
      frozen perpendicular_instruction: Maintenant, voyons si nous pouvons créer deux lignes qui ont un angle de 90 degrés entre elles. Tu devras utiliser le bloc « Tourner » ainsi que le bloc « Avancer ».
      frozen snowflake branch_instruction: "Essaie d'utiliser le bloc « Créer une branche de flocon de neige » pour créer trois branches, qui commencent à former un vrai flocon de neige."
      frozen snowflake full_instruction: Maintenant, répétons ceci 8 fois pour faire un beau flocon de neige !
      frozen snowflower_instruction: Des motifs de de neige complexes peuvent être créés avec des formes très simples. Peux-tu créer un motif en répétant 5 cercles de taille 5 et 5 cercles de taille 10 ?
      frozen square iterative_instruction: "On dirait que nous sommes à mi-chemin d'avoir un carré. Essayons de combiner 4 lignes pour créer un carré."
      frozen square loop 3x_instruction: Essayons de créer trois carrés, en tournant après chaque carré. Tu dois tourner de 120 degrés avant chaque nouveau carré.
      frozen square loop_instruction: "Salut, je suis Anna dArendelle ! Nous allons faire un carré avec le bloc « Répéter », ce qui nécessitera moins de blocs. Combien de fois (???) est-ce que le bloc « Répéter » devrait répéter les blocs qu'il contient pour faire un carré ?"
      frozen square snowflake_instruction: Peux-tu créer un flocon de neige en utilisant le bloc « Répéter » pour faire un carré 10 fois et le bloc « Tourner » pour tourner de 36 degrés entre chaque carré ?
      Infinity_catch_instruction: 'Peux-tu aider Elsa ("acteur 2") à rattraper Anna en utilisant les touches de direction ?'
      Infinity_finale_instruction: Crée ce que tu veux et partage-le !
      Infinity_move_collide_instruction: 'Hiro est « acteur 1".  Déplace le vers Baymax et émets un signal sonore quand ils se touchent.'
      Infinity_move_directions_instruction: 'Baymax est « acteur 2".  Ajoute des blocs de déplacement puis déplace Baymax en utilisant les flèches.  Fais-lui toucher les deux autres personnages.'
      Infinity_move_right_instruction: 'Hiro est « acteur 1".  Utilise le bloc avancer pour déplacer vers la droite afin de toucher Baymax.'
      Infinity_repeat_instruction: Utilise un bloc « répéter pour toujours » pour faire monter et descendre Anna de 400 pixels.
      Infinity_say_instruction: "Fais dire à Anna « Hi there. » en utilisant le bloc 'Dire'."
      Infinity_shoot_instruction: 'Baymax est « acteur 2".  Fait lancer une fusée par Baymax vers Hiro.'
      Infinity_shoot_directions_instruction: 'Hiro est « acteur 3".  Fais jeter un projectile par Hiro à chacun des quatre personnages.  Attends une seconde entre chaque lancer.'
      Infinity_test_instruction: This is a test Infinity level.
      Infinity_touch_faster_instruction: Touche encore plus de flocons de neige !
      Infinity_touch_four_instruction: Déplace Anna en haut, en bas à gauche et à droite pour toucher chacun des quatre flocons de neige.
      Infinity_touch_score_instruction: 'Fais marquer un point par Anna quand elle touche un flocon de neige.  Puis clique sur « Exécuter » et dirige-la pour toucher une fois chaque flocon de neige.'
      jessie-test_instruction: Lots of instructions
      Just for Testing_instruction: Test instructions
      K-1 Artist 1 Assessment 1_instruction: Dessine une courte ligne vers le haut et une longue ligne vers la droite !
      K-1 artist 1 level 10_instruction: Dessine la ligne pointillée en utilisant les blocs de saut et de dessin
      K-1 artist 1 level 9_instruction: Dessine en utilisant trois lignes
      K-1 Artist Loops 1_instruction: "Trace cette ligne en allant vers l'est 4 fois."
      K-1 Artist Loops 2_instruction: "Peux-tu dessiner la même ligne à l'aide d'une boucle ?"
      K-1 Artist Loops 3_instruction: Peux-tu mettre ces blocs dans une boucle pour dessiner 6 lignes ?
      K-1 Artist Loops 4_instruction: Une boucle pourrait-elle nous aider à dessiner la partie supérieure de ce château ?
      K-1 Artist Loops 5_instruction: "Qu'est-ce que tu pourrais répéter 4 fois pour dessiner ces escaliers ?"
      K-1 Artist Loops 6_instruction: "Nous avons maintenant besoin de deux boucles : une pour monter l'escalier et une autre pour descendre."
      K-1 Artist Loops 7_instruction: Peux-tu terminer ce motif avec deux boucles ?
      K-1 Artist Loops 8_instruction: Cet escalier a des marches plus longues.
      K-1 Artist Loops 9_instruction: 'Évaluation : Utilise une boucle pour dessiner les escaliers'
      K-1 Artist Loops Free Play_instruction: "Jeu libre, dessine quelque chose d'amusant !"
      K-1 Artist1 1_instruction: "Dessine le pied de l'homme avec une seule ligne"
      K-1 Artist1 10_instruction: Dessine et Saute pour faire le chemin en pointillés menant au Trésor X
      K-1 Artist1 2_instruction: Dessine les moustaches sur le chat avec deux lignes !
      K-1 Artist1 3_instruction: "Dessine deux lignes vers l'est et deux lignes vers le nord pour finir la maison !"
      K-1 Artist1 4_instruction: Trace des lignes vers le haut, horizontalement et vers le bas pour compléter le château !
      K-1 Artist1 5.5_instruction: "Termine la troisième tour du château à l'aide de lignes courtes"
      K-1 Artist1 5_instruction: Dessine la tige de cette fleur avec deux lignes !
      K-1 Artist1 6_instruction: "Fini l'image en utilisant un bloc de saut !"
      K-1 Artist1 7_instruction: Utilise le bloc de saut pour te déplacer sans dessiner. Saute vers le haut et dessine une ligne.
      K-1 Artist1 8_instruction: Dessine la ligne pointillée en utilisant les blocs de saut et de dessin
      K-1 Artist1 9_instruction: Dessine et Saute pour créer la ligne pointillée
      K-1 Artist1 Assessment 1_instruction: Dessine les lignes courtes et longues !
      K-1 Artist1 Assessment 2_instruction: Dessine les courtes lignes pointillées !
      K-1 Artist2 1_instruction: Dessine un carré sous le triangle.
      K-1 Artist2 2_instruction: Saute et dessine un carré à côté de la maison.
      K-1 Artist2 3_instruction: "Dessine un carré au-dessus de l'autre carré"
      K-1 Artist2 4_instruction: Dessine un rectangle pour terminer le pont.
      K-1 Artist2 5_instruction: Dessine un rectangle pour compléter les supports de pont
      K-1 Artist2 6_instruction: Dessine deux carrés pour faire un rectangle !
      K-1 Artist2 Assessment1_instruction: "Évaluation : Dessine un carré à côté de l'autre carré."
      K-1 Artist2 Free Draw_instruction: Dessine ce que tu veux!
      K-1 Artist2_7_instruction: Dessine un rectangle pour donner un tiroir supérieur à la commode !
      K-1 Bee 1_instruction: "Déplace moi jusqu'à la fleur, récolte le nectar, puis déplace moi jusqu'à la ruche et fabrique du miel"
      K-1 Bee 10_instruction: Récolte quatre nectars et fabrique ensuite deux miels !
      K-1 Bee 11.5_instruction: Récolte quatre nectars pour faire quatre miels !
      K-1 Bee 11_instruction: Récolte trois nectars et fabrique un miel
      K-1 Bee 12_instruction: Récolte trois nectars et fabrique ensuite deux miels !
      K-1 Bee 13_instruction: Récolte trois nectars et fabrique un miel!
      K-1 Bee 14_instruction: "Emmène-moi au nectar, récolte-le, emmène-moi à l'alvéole et fais du miel"
      K-1 Bee 15_instruction: Récolte deux nectars pour fabriquer deux miels !
      K-1 Bee 2_instruction: "Déplace moi jusqu'à la fleur, récolte le nectar, puis déplace moi jusqu'à la ruche et fabrique du miel"
      K-1 Bee 3_instruction: "Déplace moi jusqu'à la fleur, récolte le nectar, puis déplace moi jusqu'à la ruche et fabrique du miel"
      K-1 Bee 4_instruction: Récolte deux nectars et fabrique ensuite deux miels !
      K-1 Bee 5_instruction: Récolte trois nectars et fais ensuite trois miels !
      K-1 Bee 6_instruction: Récolte deux nectars et fabrique ensuite deux miels !
      K-1 Bee 7_instruction: Récolte trois nectars et fabrique ensuite deux miels !
      K-1 Bee 8_instruction: Récolte deux nectars et fabrique ensuite deux miels !
      K-1 Bee 9_instruction: Récolte deux nectars et fabrique ensuite deux miels !
      K-1 Bee Assessment 1_instruction: Récolte du nectar pour faire du miel !
      K-1 Bee Assessment 2_instruction: Récolte du nectar pour faire du miel !
      K-1 Bee Loops 1_instruction: Récolte le nectar pour faire du miel !
      K-1 Bee Loops 10_instruction: Utilise des boucles pour obtenir le nectar, faire du miel et te déplacer !
      K-1 Bee Loops 11_instruction: 'Évaluation : Utilise des boucles pour obtenir le nectar et le miel !'
      K-1 Bee Loops 12_instruction: 'Évaluation : Utilise des boucles pour obtenir le nectar, faire du miel et te déplacer !'
      K-1 Bee Loops 2_instruction: Utilise une boucle pour te déplacer, récolter le nectar et faire du miel !
      K-1 Bee Loops 3_instruction: Utilise des boucles pour récolter le nectar et faire du miel !
      K-1 Bee Loops 4_instruction: Utilise des boucles pour récolter le nectar, faire du miel et te déplacer !
      K-1 Bee Loops 5_instruction: Utilise des boucles pour obtenir le nectar et le miel !
      K-1 Bee Loops 6_instruction: Utilise des boucles pour obtenir le nectar, faire du miel et te déplacer !
      K-1 Bee Loops 7_instruction: Utilise des boucles pour récolter le nectar et faire du miel !
      K-1 Bee Loops 8_instruction: Utilise des boucles pour récolter le nectar et faire du miel !
      K-1 Bee Loops 9_instruction: Utilise des boucles pour obtenir le nectar, faire du miel et te déplacer !
      K-1 Bee Loops Assessment 1_instruction: Récolte du nectar pour faire du miel et utilise des boucles pour te déplacer !
      K-1 Bee Loops Assessment 2_instruction: Récolte du nectar pour faire du miel en utilisant des boucles !
      K-1 Bee Puzzle 12_instruction: Get three nectars and then make two honey
      K-1 Building a Foundation Assessment_instruction: "Construis une pyramide à trois niveaux. Il n'y a pas d'autres directives, joue simplement avec les pièces jusqu'à ce que tu l'obtiennes !"
      k-1 maze 1_instruction: "Peux-tu me faire bouger vers l'Ouest pour rejoindre le cochon ?"
      K-1 Maze 10_instruction: "Fais le tour de la TNT pour m'amener au cochon ! "
      K-1 Maze 11_instruction: "Trace le chemin pour m'emmener au cochon stupide. Évite la TNT, sinon mes plumes vont s'envoler ! Indice : Le cochon est au sud de moi."
      K-1 Maze 2_instruction: "Déplace-moi vers l'est pour que je rejoigne le cochon !"
      K-1 Maze 3_instruction: Déplace-moi vers le sud pour que je rejoigne le cochon !
      K-1 Maze 4_instruction: Déplace-moi vers le nord pour que je rejoigne le cochon !
      K-1 Maze 5_instruction: "Déplace-moi vers l'est pour que je rejoigne le cochon !"
      K-1 Maze 6_instruction: "Déplace-moi dans une direction, puis dans une autre direction afin de m'amener au cochon !"
      K-1 Maze 7_instruction: "Déplace-moi dans une direction, puis dans une autre direction afin de m'amener au cochon !"
      K-1 Maze 8_instruction: "Déplace-moi dans une direction, puis dans une autre direction afin de m'amener au cochon !"
      K-1 Maze 9_instruction: "Déplace-moi dans une direction, puis dans une autre direction afin de m'amener au cochon !"
      K-1 Maze Assessment 1_instruction: 'Évaluation -- Amène-moi au cochon !'
      K-1 Maze Assessment 12_instruction: "Niveau d'évaluation"
      K-1 Maze Assessment 13_instruction: "Niveau d'évaluation"
      K-1 Maze Assessment 2_instruction: 'Évaluation -- Amène-moi au cochon !'
      K-1 maze debug 1_instruction: "Modifie le code pour m'amener au cochon !"
      K-1 maze debug 10_instruction: "Débogue ce niveau en réorganisant et en ajoutant des blocs afin de m'amener au cochon !"
      K-1 maze debug 11_instruction: "Ceci est un test! \\r Débogue ce niveau en réorganisant et en ajoutant des blocs afin de m'amener au cochon"
      K-1 maze debug 2_instruction: "Trouve ce qui nous manque, puis ajoute des blocs pour m'amener au cochon !"
      K-1 maze debug 3_instruction: "Trouve ce qui nous manque, puis RETIRE des blocs pour m'amener au cochon !"
      K-1 maze debug 4_instruction: "Observe ces blocs et corrige-les ! Je pense que ces blocs m'amènent dans la mauvaise direction."
      K-1 maze debug 5_instruction: "Débogue ce niveau en réorganisant et en ajoutant des blocs afin de m'amener au cochon !"
      K-1 maze debug 6_instruction: "Débogue ce niveau en réorganisant et en ajoutant des blocs afin de m'amener au cochon !"
      K-1 maze debug 7_instruction: "Débogue ce niveau en réorganisant et en ajoutant des blocs afin de m'amener au cochon !"
      K-1 maze debug 8_instruction: "Débogue ce niveau en réorganisant et en ajoutant des blocs afin de m'amener au cochon !"
      K-1 maze debug 9_instruction: "Débogue ce niveau en réorganisant et en ajoutant des blocs afin de m'amener au cochon !"
      K-1 Maze debug Assessment 1_instruction: "Évaluation -- Débogue ce niveau en réorganisant et en ajoutant des blocs afin de m'amener au cochon !"
      K-1 Maze Loops 1_instruction: "Amène moi jusqu'au cochon !"
      K-1 Maze Loops 10_instruction: Amène-moi au cochon ! Utilise la boucle.
      K-1 Maze Loops 11_instruction: Amène-moi au cochon ! Utilise la boucle.
      K-1 Maze Loops 12_instruction: Amène-moi au cochon ! Utilise la boucle.
      K-1 Maze Loops 2_instruction: "Utilise le bloc Répéter pour m'amener au cochon !"
      K-1 Maze Loops 3_instruction: Amène-moi au cochon ! Utilise la boucle.
      K-1 Maze Loops 4_instruction: "Amène moi jusqu'au cochon !"
      K-1 Maze Loops 5_instruction: Amène-moi au cochon ! Utilise la boucle.
      K-1 Maze Loops 6_instruction: Amène-moi au cochon ! Utilise la boucle.
      K-1 Maze Loops 7_instruction: Amène-moi au cochon ! Utilise la boucle.
      K-1 Maze Loops 8_instruction: Amène-moi au cochon ! Utilise la boucle.
      K-1 Maze Loops 9_instruction: "Amène moi jusqu'au cochon !"
      K-1 Maze Loops Assessment 1_instruction: "Évaluation -- Utilise des boucles pour m'amener au cochon !"
      K-1 Maze Loops Assessment 2_instruction: "Évaluation -- Utilise des boucles pour m'amener au cochon !"
      K-1 Maze Multi 14_instruction: "Niveau d'évaluation"
      K-1 Maze Multi 15_instruction: "Niveau d'évaluation"
      K-1 Maze Sequence Assessment 1_instruction: "Ceci est un test ! \\r Déplace-moi dans une direction, puis dans une autre direction pour m'amener au cochon"
      K-1 Maze Sequence Assessment 2_instruction: "Ceci est un test ! \\r Déplace-moi dans une direction, puis dans une autre direction pour m'amener au cochon."
      kikiTesting_instruction: ".\\r\n .\\r\n.\\r\n.\\r\n.\\r\n.\\r\n\\r\n.\\r\n\\r\n"
      love_spring_1_instruction: |
        Let's celebrate Spring!  We have put some seeds
        in the ground to prepare for the season's flowers.  Can you cover them up
        so that the birds don't eat them?
      love_spring_2_instruction: |
        Our flowers are in full bloom!  Now we need the
        bee to grab nectar from each one so he can make plenty of honey back at his
        hive!
      love_spring_3_instruction: "Figure out how to change this code so that Robin\nchooses a number between 1 and 20.  \\r\n\\r\nWhen you're ready, press \"Run\"\nand play until you guess Robin's number!"
      Luigi's Pizza 1_instruction: |
        Welcome to Luigi's Pizza! To order a pizza,
        type the name of a topping into the cost function, and we'll return the price
        of that pizza. Try ordering a pepperoni pizza to start.
      Luigi's Pizza 2 (copy 1)_instruction: |
        Right now there are only four choices
        available at Luigi's pizza - let's fix that! Add a couple of new toppings
        to the conditional block in the "cost" function. Once you've added your
        toppings, test out the function to make sure it works.
      Luigi's Pizza 2_instruction: |
        Right now there are only four choices available
        at Luigi's pizza - let's fix that! Add a couple of new toppings to the conditional
        block in the cost function. Once you've added your toppings, test out the
        function to make sure it works.
      Luigi's Pizza 3 (copy 1)_instruction: |
        That's better, everyone loves more
        variety in their pizza toppings! But you still can't please everyone, and
        folks are coming in to order toppings that Luigi doesn't have. Instead of
        saying no to those people, could you update the "else" clause so that we
        charge them a premium for toppings that we don't normally offer?
      Luigi's Pizza 3_instruction: |
        That's better, everyone loves more variety in
        their pizza toppings! But you still can't please everyone, and folks are
        coming in to order toppings that Luigi doesn't have. Instead of saying no
        to those people, could you update the else clause so that we charge them a
        premium for toppings that we don't normally offer? Let's charge $10,000
        for a topping we don't carry.
      Luigi's Pizza 4_instruction: |
        Free Play: What can you do to make Luigi's cost
        function even more useful?
      MSM Big Game Empty_instruction: |
        All variables and functions are currently
        empty stubs. Each puzzle progression will be focused on defining and handful
        of them, and therefore adding functionality.
      MSM Big Game Vars 1 (copy 1)_instruction: |
        In the Variables toolbox you'll
        see several variables that define how your game characters look, move, and
        interact
      MSM Big Game Vars 1_instruction: |
        In the Variables toolbox you'll see several
        variables that define how your game characters look, move, and interact
      MSM Big Game Vars Backup_instruction: |
        In the Variables toolbox you'll see
        several variables that define how your game characters look, move, and interact
      MSM Defining Vars 1 (copy 1)_instruction: |
        Write a program that produces a
        50 pixel solid green triangle.
      MSM Defining Vars 1_instruction: |
        Write a program that produces a 50 pixel
        solid green triangle.
      MSM Defining Vars 2 (copy 1)_instruction: |
        If we wanted to make fifty green
        triangles, it would be a pain to repeat that block of code 50 times. Let's
        create a variable called "my-shape" and put the code for a 50 pixel solid
        green triangle inside.
      MSM Defining Vars 2_instruction: |
        If we wanted to make fifty green triangles,
        it would be a pain to repeat that block of code 50 times. Let's create a
        variable called my-shape and put the code for a 50 pixel solid green triangle
        inside.
      MSM Defining Vars 3 (copy 1)_instruction: |
        Take your "my-shape" variable
        and use it with this provided code to draw two identical green triangles.
      MSM Defining Vars 3_instruction: |
        Take your my-shape variable and use it with
        this provided code to draw two identical green triangles that are 50 pixels
        in size.
      MSM Defining Vars 4_instruction: |
        Edit your my-shape variable so that it draws
        75 pixel solid red stars.
      MSM Play Lab Butterfly 1_instruction: |
        Help Sam stay on the screen so that
        you can always see at least a little piece of him. Using the arrow keys, see
        how far Sam can go to the left while still staying onscreen. You’ll find that
        Sam is onscreen as long as his x-coordinate is greater than -50. Then, fill
        in the code to make Sam stay on the screen.
      MSM Play Lab Butterfly 2_instruction: |
        Now make Sam stay on the right side
        of the screen. You'll have to experiment to see how far he can go and still
        be partially visible on the screen.
      MSM Play Lab Butterfly 3_instruction: |
        Now, combine your work to make Sam stay
        on both sides of the screen.
      MSM Play Lab Game 2_instruction: |
        Variables can also be used to control the
        speed of players in a game. Set the player speed and the enemy speed and see
        how the movement changes. Speed can be between 2 and 12.
      NetSim Standalone Automatic DNS_instruction: |
        In this version of the Internet
        Simulator, a Domain Name System (DNS) is provided for you and knows the IP
        addresses of all connected computers. Send a message in the form GET [hostname]
        to the DNS service at address <yourRouterNumber>.15 to get a student's address.
      NetSim Standalone Broadcast_instruction: "In this version of the Internet Simulator,\nyou can connect to up to 5 other people in a room. When you send messages\nin the room, everyone receives them. What are some of the challenges of this\nsystem, and how might you solve them?\\r\n"
      NetSim Standalone Classroom Routers_instruction: |
        In this version of the Internet
        Simulator, everyone connects to a router and has a specific address. To send
        messages, you have to address your message to the specific address of the
        recipient, and the router will take care of delivering it to the right computer.
        If there are other routers created in your class, ask for the address of one
        of your classmates and send them a message! View the Log Router to see the
        path the messages have taken through the network.
      NetSim Standalone Freeplay_instruction: |
        In this configuration, most of the
        options are turned on, and you can play with them. Have fun!
      NetSim Standalone Manual DNS_instruction: |
        In this version of the simulator
        you can't see the other students' addresses.  Instead, one of you must act
        as a name service, to help share addresses with each other.
      NetSim Standalone Packets TCP_instruction: |
        Messages on the Internet can take
        many paths to get to their destination, and sometimes along the way the message
        gets dropped. In this version of the Internet Simulator, there is a 10% chance
        of a packet being dropped, multiple packets may take different paths to the
        destination, and the default max packet size is set to 6 additional characters.
        
      NetSim Standalone Routers Addresses_instruction: "For this activity, connect\nto a router with the others in your group. Important note: The router will\nonly properly route messages where the first 4 bits are the To: address and\nthe second 4 bits are the From: address.\\r\n\\r\n[TODO: NetSim needs to support\nhierarchical addresses. For now, level is set up for 4 bit to and from addresses]"
      NetSim Standalone SendAB_instruction: |
        You and your partner share a single
        wire that can only be in state A or state B. You can set the wire to either
        state at any time, and you can read the state of the wire at any time. Can
        you figure out a way to effectively communicate with just this system?
      NetSim Standalone Sending Numbers Ascii_instruction: |
        Now that you've transmitted
        information represented as decimal numbers, you can map those numbers to text
        characters to send text-based information back and forth. With a text-based
        protocol, you can easily represent and communicate all kinds of information.
        
      NetSim Standalone Sending Numbers_instruction: |
        You and your partner can now
        reliably send messages back and forth without extra coordination! While you're
        always sending bits back and forth, you can also represent those bits as decimal
        numbers. What kinds of information can you represent with this system? 
      NetSim_AddressingMessages_instruction: |
        In this version of the simulator, you
        will connect to a Router instead of directly to another student. Enter an
        address in the "To" box to send a message to another student.
      NetSim_AutomaticDNS_instruction: |
        In this version of the simulator a DNS service
        is provided for you. Send a message in the form GET [hostname] to the DNS
        service at address 15 to get a student's address.
      NetSim_ManualDNS_instruction: |
        In this version of the simulator you can't
        see the other students' addresses.  Instead, one of you must act as a name
        service, to help share addresses with each other.
      NetSim_SendAB_instruction: |
        Connect to another student.  Each of you can set
        the value of the wire between you to "A" or "B".  See if you can send
        a complete message!
      NetSim_SendAscii_instruction: |
        In this version of the simulator, you can send
        numbers or ASCII characters to one another, one bit at a time.
      NetSim_SendBits_instruction: |
        Connect to another student.  You can now set
        your wire to "0" or "1".  Send a message to your partner!
      NetSim_SendingABTest_instruction: |
        This is Sarah's test of making a netsim
        level
      NetSim_SendNumbers_instruction: |
        In this version of the simulator, you can
        view the decimal representations of the binary you are sending.
      NetSim_Superuser_instruction: You have loaded NetSim in superuser mode.
      NetSim_Variant1_instruction: |
        NetSim: Variant 1 allows students to manually
        work out the timing of sending bits back and forth.
      NetSim_Variant2_instruction: |
        NetSim: Variant 2: Students connect directly
        to one another and send entire packets back and forth, exploring systems of
        encoding data.
      NetSim_Variant3_instruction: |
        NetSim: Variant 3: Connects groups of 2-6 students
        with a router, and explores issues in routing and DNS
      New Artist Project_instruction: Dessine quelque chose de génial ! Ton code est enregistré comme un projet et tu peux y revenir à tout moment.
      NEW Course 4 Artist Functions 1_instruction: Peux-tu dessiner un carré de 100 pixels de côté en utilisant une boucle ?
      NEW Course 4 Artist Functions 10.1_instruction: Utilise les fonctions du puzzle précédents pour dessiner ce modèle.
      NEW Course 4 Artist Functions 10_instruction: 'Clique sur "edit" pour remplir les blocs dans la définition de la fonction pour dessiner un carré de 40 pixels.'
      NEW Course 4 Artist Functions 11_instruction: |-
        Nous avons une nouvelle fonction appelée "dessine une ligne de carrés". N'hésite pas à regarder à l'intérieur du bloc de la fonction pour voir comment elle est construite. Clique sur "Exécuter" quand tu es prêt pour le prochain puzzle.
      NEW Course 4 Artist Functions 12_instruction: 'Utilise la fonction "dessine une ligne de carrés" du dernier puzzle pour dessiner ce modèle."'
      NEW Course 4 Artist Functions 13_instruction: "Peux-tu dessiner une étoile à l'aide de la fonction « tracer une ligne de carrés » ? Remarque : tu devras peut-être te déplacer de 60 pixels et tourner de 144 degrés"
      NEW Course 4 Artist Functions 14_instruction: 'Temps de jeu gratuit! '
      NEW Course 4 Artist Functions 2_instruction: 'Peux-tu dessiner 3 carrés avec 20 pixels de distance entre chaque carré ? Astuce : chaque carré a une taille de 100 pixels'
      NEW Course 4 Artist Functions 3_instruction: |-
        Voici un nouveau type de bloc. Il s'appelle un "bloc de fonction". Clique sur "Exécuter" pour voir ce qu'il peut faire. 
      NEW Course 4 Artist Functions 4_instruction: 'Utilise la fonction "dessiner un carré" pour dessiner ce modèle. Remarque: Tu devras utiliser un bloc "tourner à droite de 120 degrés" après chaque carré.'
      NEW Course 4 Artist Functions 5_instruction: |-
        Comment le bloc "dessiner un carré" a-t-il su quelles commandes exécuter ? Clique sur "edit" dans le bloc de fonction "dessiner un carré". Les blocs dans l'éditeur de fonction sont la définition qui composent "dessiner un carré". Lorsque tu as terminé, clique sur "Enregistrer et fermer" et ensuite "Démarrer."
      NEW Course 4 Artist Functions 6_instruction: "Utilise le bloc de fonction \"dessiner un carré\", peux-tu dessiner cette image? Conseil: chaque carré est espacé de 20 pixels. \\r\n"
      NEW Course 4 Artist Functions 7_instruction: |-
        Tu sais maintenant bien utiliser les blocs fonctions ? Modifions la taille du carré pour qu'elle soit de 200 pixels. Astuce : clique sur "éditer" pour changer la taille dans l'éditeur de la fonction "dessine un carré". N'oublie pas de cliquer sur "Enregistrer et fermer" pour sortir de l'éditeur de fonction. 
      NEW Course 4 Artist Functions 8_instruction: Nous t’avons donné la plupart du code pour créer une fonction. Cependant, on dirait qu’il manque quelque chose. Peux-tu modifier la fonction pour dessiner le triangle ?
      NEW Course 4 Artist Functions 9_instruction: Quel bloc dois-tu ajouter pour que le triangle soit placé au-dessus du carré?
      NEW Course 4 Artist Functions inspire_instruction: "Appuies ici pour voir l'image d'inspiration de nouveau."
      New Course 4 Artist Functions Level 4_instruction: 'Sers-toi de la fonction "draw a square" pour dessiner ce motif.'
      NEW Course 4 Artist Params 1_instruction: Nous allons définir cette fonction pour dessiner un carré de 50 pixels côté. Clique sur « modifier » pour commencer.
      NEW Course 4 Artist Params 10_instruction: 'Crée un bloc fonction "dessine un hexagone" avec le paramètre "longueur". Astuce : cet hexagone a des côtés de 100 pixels. '
      NEW Course 4 Artist Params 11_instruction: 'Sais-tu comment dessiner cette forme ? Edite la fonction pour utiliser le paramètre "côtés".'
      NEW Course 4 Artist Params 12_instruction: Peux-tu compléter ce dessin ? Toutes les formes ont un côté de 100 pixels de long.
      NEW Course 4 Artist Params 12a_instruction: |
        Cette image est similaire à la dernière.
        Peux-tu utiliser une "boucle pour" avec ta fonction pour faire ce design?
      NEW Course 4 Artist Params 13_instruction: |-
        Editons la fonction "dessine une forme". Elle a déjà un paramètre "longueur". Editons-la pour rajouter un paramètre "côtés". N'oublie pas que l'angle de rotation pour une forme donnée est de 360 divisé par le nombre de côtés de la forme. Astuce : les longueurs pour chaque forme sont : 100 pixels pour le triangle, 25 pixels pour l'hexagone et 50 pixels pour le carré.
      NEW Course 4 Artist Params 14_instruction: 'Peux-tu refaire ces formes ? Déplace le paramètre "longueur" dans la définition de la fonction. '
      NEW Course 4 Artist Params 15_instruction: "Jeu libre : Voilà les fonctions que tu as écrites ainsi que d'autres pour que tu t'amuses avec. Dessine un truc génial !"
      NEW Course 4 Artist Params 2_instruction: 'Crée une fonction "dessine un triangle de 50 pixels de côté" en partant du début'
      NEW Course 4 Artist Params 3_instruction: "Maintenant, utilisons la fonction du dernier puzzle pour dessiner 3 triangles sur la même ligne. Astuce : les triangles ont espacés de 50 pixels.\\r\n"
      NEW Course 4 Artist Params 4_instruction: |-
        As-tu remarqué quelque chose de différent dans ces blocs fonction ? Clique sur "exécuter" pour voir ce qu'il se passe.
      NEW Course 4 Artist Params 5_instruction: 'Met le bon chiffre à la place des ??? du paramètre "longueur". Astuce : le pentagone a des côtés de 100 pixels de long. '
      NEW Course 4 Artist Params 6_instruction: |-
        Met les bons chiffres à la place des ??? du paramètre "longueur". Astuce : le pentagone a des côtés de 100 pixels de long. Le carré et le triangle, 100 pixels et l'hexagone, 75 pixels.
      NEW Course 4 Artist Params 7_instruction: 'Peux-tu compléter ce dessin ? Astuce : chaque triangle est 25 pixels plus grand que le dernier. Le premier triangle a une taille de 25 pixels.'
      NEW Course 4 Artist Params 8_instruction: 'Peux-tu dessiner chacun de ces triangles avec cette nouvelle fonction ? Le premier a une taille de 25 pixels, le second de 50 et le troisième de 75. Astuce : commence en cliquant dans le bloc fonction sur "éditer".'
      NEW Course 4 Artist Params 9_instruction: 'Clique sur "Editer" pour compléter la définition de la fonction "dessine un carré" et rajoute un paramètre. Elle devra contenir le paramètre "longueur", comme pour le triangle. Cette fois, dessine 3 carrés : 25, 50 et 75 pixels de côté, chacun espacé de 100 pixels.'
      NEW Course 4 Artist Params inspire_instruction: "Jeu libre d'inspiration : tu sais maintenant tout ce que tu dois savoir pour faire une figure comme ça ! Si cette photo t'inspire, essaye de faire quelque chose de similaire. Sinon, crée quelque chose qui t'es propre. \\r\n\\r\nTu veux savoir comment notre figure d'inspiration a été faite ? "
      NEW Course 4 Artist Vars 1.5_instruction: 'Regarde ce code, peux-tu voir comment les blocs "définir la longueur" et "longueur" travaillent ensemble ? Clique sur "exécuter" pour les voir en action. '
      NEW Course 4 Artist Vars 12_instruction: "Modifie cet algorithme afin qu'il utilise la variable « côtés » au lieu d'un nombre fixe pour dessiner un pentagone. Remplace le nombre 5 avec la variable « côtés » et utilise le bloc « paramétrer côtés »."
      NEW Course 4 Artist Vars 2.5_instruction: 'Regarde ce code, peux-tu voir comment les blocs "définir la longueur" et "longueur" travaillent ensemble ? Clique sur "exécuter" pour les voir en action. '
      NEW Course 4 Artist Vars 2_instruction: 'Fais glisser un bloc numérique sur le bloc « paramètre la longueur » pour dessiner un ensemble de triangles de 50 pixels. '
      NEW Course 4 Artist Vars 4 5_instruction: 'Excellent travail sur le dernier puzzle, recommençons ce super design avec un hexagone  de 60 pixels.'
      NEW Course 4 Artist Vars 4_instruction: Essayons encore mais cette fois-ci avec des hexagones de 60 pixels.
      NEW Course 4 Artist Vars 6_instruction: |-
        Peux-tu m'aider à dessiner ce super motif en laissant tomber le bloc variable "longueur" aux bons endroits ?
      NEW Course 4 Bee For Loops 1_instruction: Utilise une boucle pour collecter le nectar de chaque fleur.
      NEW Course 4 Bee For Loops 10_instruction: 'Utilise la variable "counter" de la boucle for pour contrôler la distance à laquelle tu bouges horizontalement.'
      NEW Course 4 Bee For Loops 10a_instruction: |
        Prêt pour un défi? Prends ce que 
        tu as appris à propos des boucles et essayes de résoudre ce problème. Rappelles-toi: Tu pourrais exécuter ta solutions plusieurs fois avant de te rendre compte de toutes les étapes.
      NEW Course 4 Bee For Loops 11_instruction: Peux-tu utiliser la variable de boucle pour contrôler le mouvement et la collecte de nectar ?
      NEW Course 4 Bee For Loops 2_instruction: "Ecris le code qui permettra à l'abeille de  recueillir tout le nectar. Regarde le nombre de blocs dont tu auras besoin pour ce puzzle ! (nous verrons une solution plus simple dans le prochain puzzle.)"
      NEW Course 4 Bee For Loops 3_instruction: 'Ah, grâce à la boucle, tout est plus facile ! Tout le code dont tu as besoin est là, regardons comment il a été construit et ensuite cliquons sur "Executer" pour voir le résultat. '
      NEW Course 4 Bee For Loops 4 4_instruction: "Peux-tu aider l'abeille à collecter le reste du miel en utilisant cette boucle ? "
      NEW Course 4 Bee For Loops 4_instruction: "Remplace les ??? dans la boucle avec la plus grande quantité de nectar l'abeille doit collecter. "
      NEW Course 4 Bee For Loops 5 5_instruction: "Es-tu maintenany super familier avec la boucle ? Aidons l'abeille à récupérer le reste du nectar."
      NEW Course 4 Bee For Loops 5_instruction: 'Tu peux aussi utiliser une boucle "for" pour décompter. Essaye de rassembler ce nectar en décomptant de 5 à 1, de 1 en 1.'
      NEW Course 4 Bee For Loops 6_instruction: "Le dernier chiffre de ta boucle est appelé l'incrément et chaque fois que la boucle est exécutée, le compteur de variable est augmenté de ce chiffre. Essaie de collecter ces fleurs en utilisant un incrément de 2."
      NEW Course 4 Bee For Loops 7_instruction: "Maintenant, nous allons combiner la variable « compteur » avec un bloc math ! Comment peux-tu utiliser la variable « compteur » pour naviguer dans ce jardin en utilisant le moins de blocs possibles ? Que dois-tu faire pour collecter les 3, 6, 9, 12, 15 nectar cette fois ? Le secret est dans la variable « compteur »! \\r\n\\r\nN'oubliez pas : Si ta boucle va en augmentant, l'incrément est ajouté à ta variable \"compteur\" à chaque boucle."
      NEW Course 4 Bee For Loops 8_instruction: "Tu as compris !\nQuel devrait être l'incrément pour récolter 3, 6, 9, 12, 15 nectar ?\\r\nConseil : Combien dois-tu ajouter à chaque nombre pour obtenir le suivant ?"
      NEW Course 4 Bee For Loops 9_instruction: "Si ta boucle compte à l'envers, l'incrément est soustrait de ta variable de compteur à chaque boucle. Quelle serait ton incrément pour récolter 15, puis 12, puis 9, 6, 3 nectar ?"
      NEW Course 4 Bee For Loops 95_instruction: 'Jete un oeil à chaque partie de la boucle "for" que tu viens de créer.  Peux-tu comprendre quels numéros tu dois doubler pour résoudre cette énigme ? Pourquoi ça marche ?'
      NEW Course 4 Play Lab Params 11_instruction: "C'est l'heure de la récréation ! Amuse-toi avec tous les blocs de ta boîte à outils. "
      NEW Course 4 Play Lab Params 5 5_instruction: "Essayons à nouveau mais avec moins d'aide. Que dois-tu modifier cette fois-ci pour faire patrouiller les personnages ?"
      NEW Course 4 Play Lab Vars 4 5_instruction: |-
        "Que penses-tu que ce code va faire ? Appuies sur "Démarrer" pour voir ce qu'il se passe."
      NEW Course 4 Play Labs For Loops 7a_instruction: "En utilisant ce que tu as appris jusqu'ici, peux-tu faire en sorte que le dinosaure fasse un pas en avant chaque fois que le pingouin compte ?"
      NEW Course 4 Play Labs For Loops 8 Free Play_instruction: "C'est l'heure de la récréation ! Amuse toi avec tous les blocs de ta boîte à outils. "
      NEW Course 4 Play Labs For Loops 8a_instruction: |-
        Défi : Comment utiliser la boucle "for" pour que chaque acteur vienne donner son numéro d'acteur, puis disparaisse de l'écran ? 
      New Play Lab Project_instruction: Crée ta propre histoire ou jeu ! Ton code est enregistré dans un projet afin que tu puisses y revenir à tout moment.
      Ninjacat Demo B (copy 1)_instruction: "\\r\nLet’s begin by exploring a simple\nvideogame, and then figuring out how it works. You can use the arrow keys\nto move the ninja left, right and jump - try to catch the unicorn and avoid\nthe dragon!\\r\n\\r\n\\r\n\\r\n  \\r\n\\r\n"
      Ninjacat Demo B_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      Ninjacat Demo No Animate_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      October15 bat_instruction: "Freeplay: Here are some functions to play with.  Can\nyou draw a bat?\\r\n"
      October15 ghost 1_instruction: |
        Give the ghost eyes, using the "draw a circle"
        function.
      October15 JoL 1_instruction: |
        Program the artist to design a face for your
        jack-o-lantern!
      October15 pumpkin 1_instruction: |
        Finish this jack-o-lantern by drawing the
        eyes and nose in any style you would like.
      October15 stars 1_instruction: |
        Use loops and the "random integer" block
        to fill the night sky with stars of different shapes and sizes.
      Overworld Avoid Monsters_instruction: 'Un conseil : évitez les Creepers. Slalomez prudemment pour atteindre votre maison indemne.'
      Overworld Chop Tree_instruction: |-
        Le bois est une ressource très importante qui permet de fabriquer beaucoup de choses. Atteignez l'arbre et utilisez la commande "détruire un bloc" pour le couper.
      Overworld Chop Trees_instruction: Nous devons construire une maison avant que le Soleil se couche. Pour cela, il faut beaucoup de bois. Coupez les 3 arbres.
      Overworld Free Play 20x20_instruction: Bravo, vous avez réussi tous nos casse-tête ! Maintenant, à vous de miner, de construire et de créer tout ce qui vous passe par la tête en appliquant ce que vous avez appris.
      Overworld Free Play_instruction: Vous êtes libre de jouer avec cet environnement. À vous de choisir ce que vous voulez construire.
      Overworld House Frame - A_instruction: Nous allons construire notre propre maison ! Cet endroit semble approprié. Construis le pourtour sur les blocs de terre.
      Overworld House Frame - C_instruction: Nous allons construire notre propre maison ! Cet endroit semble approprié. Construis le pourtour sur les blocs de terre.
      Overworld House Frame B_instruction: "Un mur est terminé, nous allons construire le reste de la maison en suivant ton plan d'étage ! Tu vas devoir te répéter beaucoup ici."
      Overworld House Frame B2_instruction: "Un mur est terminé, nous allons construire le reste de la maison en suivant ton plan d'étage ! Tu vas devoir te répéter beaucoup ici."
      Overworld House Frame C_instruction: "Un mur est terminé, nous allons construire le reste de la maison en suivant ton plan d'étage ! Tu vas devoir te répéter beaucoup ici."
      Overworld House Frame Chosen_instruction: Construis le reste de ta maison à partir des matériaux que tu souhaites. La commande « répéter » sera utile.
      Overworld House Frame_instruction: "Construisons notre maison ! Cet endroit a l'air parfait. Bâtissez des fondations sur les blocs de terre."
      Overworld Minecart Track_instruction: Vous revoilà à la surface avec des ressources souterraines en quantité. Nous allons maintenant construire une piste le long du chemin de terre qui part de votre maison. Commençons par déblayer la voie. Suivez le chemin et dégagez les arbres.
      Overworld Move to Sheep_instruction: 'Ajoutez une 2e commande "avancer" pour atteindre le mouton.'
      Overworld Place Wall_instruction: 'Toutes les maisons commencent par un mur. Construisez la première partie de votre maison en insérant les commandes "placer" et "avancer" dans la boucle de répétition.'
      Overworld Plant Crops_instruction: "Il est toujours utile de prévoir à l'avance. Plantez des cultures sur les deux rives pour ne pas manquer de nourriture par la suite."
      Overworld Powered Minecart_instruction: "Bravo ! Vous avez récolté des ressources en abondance et construit une maison modeste. À présent, posez des rails depuis le bord de la carte jusqu'à la porte de votre maison."
      Overworld Shear Sheep_instruction: |-
        C'est l'heure de la tonte ! Utilisez la commande "tondre" pour récupérer la laine des deux moutons.
      PDAlg 13-16 Sam Extension Puzzle_instruction: |
        Add a second parameter to "onscreen?"
        for Sam's y coordinate and update the function so it keeps him safe on all
        four sides.
      PDAlg 17-20 Luigi Extension Puzzle_instruction: |
        Without modifying your existing
        "cost" function, create a new "coupon" function that takes a pizza topping
        and coupon code and returns the cost of a pizza with that topping. If the
        coupon code is correct (you get to decide what it is), apply a 30% discount
        to the pizza.
      PDAlg 8-12 ex dr 1_instruction: |
        The definition in this Design Recipe doesn't
        match both examples. Test each example to see which is failing, and then fix
        the definition to match.
      PDAlg 8-12 ex dr 2_instruction: |
        This student has created two examples for
        the function "apples" but something's not quite right. How would you direct
        this student to correct their mistake?
      PDAlg 8-12 Rocket Height Puzzle_instruction: |
        Let's write a "rocket-height"
        function with simple acceleration. Write a function that ensures the rocket
        is at 15 meters at 1 second, 45 meters at 2 seconds, 95 at 3 seconds, and
        165 at 4 seconds.
      PDAlg Big Game History_instruction: |
        Now that you've played through a Big
        Game level you should see a new entry in your history. Click the Version History
        button and you should see at least one version. Each time you go back to a
        Big Game level you'll get a new record in your version history that you can
        revert back to.
      PDAlg Big Game Remix_instruction: "Here's your Big Game as you last left it.\nTry clicking the Remix button to spin off a new remix of your project.\\r\n\\r\nAny\nchanges you make after you click Remix will be saved on your new remix and\nnot on your main Big Game."
      PDAlg Design Recipe Delete_instruction: |
        Click the delete button to get rid
        of this function, then try creating and deleting a few of your own.
      PDAlg Design Recipe Examples_instruction: |
        The definition in this Design Recipe
        doesn't match both examples. Test each example to see which is failing, and
        then fix the definition to match.
      PDAlg Design Recipe Required_instruction: |
        Complete the Design Recipe for the
        "eggs" function, making sure to create and test your examples.
      PDAlg Updates Cond_instruction: |
        When you went to PD in the summer, the Conditional
        block that you were introduced to was black and allowed any data type to be
        used. This proved to be confusing, given that every other function we've
        seen always produces the same type of data. To help make conditionals clearer
        and more consistent we've replaced the single black block with a separate
        block for each data type.
      PDAlg Updates Errors_instruction: |
        Run the provided program and use the error
        messages to try and track down the bugs.
      PDAlg Updates Space_instruction: |
        Making use of limited programming space (especially
        on small screens) is challenging with a block based language. To help with
        this we've added a few features. Experiment with this provided code to see
        how the space can be manipulated to deal with larger programs.
      PDK5 Conditionals 1_instruction: |
        Purple flowers may have either 1 or 0 nectar,
        but you don't know which one! Be careful not to collect nectar from a purple
        flower if it doesn't have any. Check if the nectar is equal to 1 by using
        the if block.
      PDK5 Conditionals 2_instruction: |
        Try this puzzle that uses conditionals and
        loops together. Use the "if" block to decide when to turn. Hint: you only
        need one more block to complete this puzzle. 
      PDK5 Events 1_instruction: |
        So far all of the programs we've written are executed
        in order from top to bottom. In this puzzle, we'll use "Events" to respond
        to an action on demand. Make the octopus say "Hello" only when you click
        on the Octopus. 
      PDK5 Functions 1_instruction: |
        Hello. Me zombie artist. Me love drawing! Help
        me draw the square glasses.  Hint:  the bridge between the glasses is 25 pixels
        shorter than the square length.
      PDK5 Functions 2_instruction: Les fonctions te permettent de définir de nouveaux blocs ! Nous avons déplacé les blocs permettant de dessiner un carré dans une fonction appelée « dessiner un carré ». Peux-tu utiliser la fonction « dessiner un carré » pour créer les verres ? Les carrés sont espacés de 75 pixels.
      PDK5 Loops 1_instruction: |
        Instead of using 5 "move forward" blocks, use
        the "repeat" block with a "move forward" block inside of it. In computer
        science, this is called a "loop." 
      PDK5 Loops 3_instruction: |
        Here's another puzzle to practice loops. What happens
        if you use the repeat block to run the code already provided on the workspace
        4 times?
      Pixelation - Lesson 14 - Fix bit offset v.2_instruction: |
        Something happened
        to the bits in this image! Find the error and fix it! Hint: a few extra bits
        were added. You should only need to remove some bits.
      Pixelation - Lesson 14 - Fix bit offset_instruction: |
        A single extra bit was
        inserted into the stream of bits that make up the C of the Code.org logo.
        That extra bit bumps all of the other bits down the line which makes the logo
        look messed up. Hunt down the extra bit and remove it to fix the Code.org
        logo.
      Pixelation - Lesson 14 - Fix the error_instruction: |
        Something happened to
        the bits in this image!  Find error and fix it!  Hint: a few extra bits were
        added.  You should only need to remove some bits.
      Pixelation - Lesson 14 - Make the Letter A_instruction: |
        Make a 3x5 letter
        'A'. The widget is setup with the incorrect dimensions. Your first task
        is to set the second byte to the 8-bit binary code for 5: 0000 0101. Then
        start entering pixel data.
      Pixelation - Lesson 14 - Make your own B and W Image_instruction: |
        Now make
        your own image! We've started you off with a 10x10 canvas but you can make
        it whatever size you want. Happy pixeling!
      Pixelation - Lesson 14 - Make your own B&W Image_instruction: |
        Now make your
        own image! We've started you off with a 10x10 canvas but you can make it
        whatever size you want.  Happy pixeling!
      Pixelation - Lesson 15 - Color Free Play_instruction: |
        Requirements: The icon
        must be 16x16 pixels. You must use the Pixelation Widget to encode the bits
        of color information. The image must be encoded with at least 12 bits per
        pixel.
      Pixelation - Lesson 15 - Color Shades 4x4_instruction: |
        We start you out with
        the 4x4 image Maddie created in the video. Your task is to fill a 4x4 grid
        with colors using 12-bits per pixel. Here are the requirements: Row 1 - fill
        with shades of red. Row 2 - shades of green. Row 3 - shades of blue. Row 4
        - shades of gray.
      Pixelation - Lesson 15 - Color Shades_instruction: |
        We start you out with the
        row of shades of red that Maddie created in the video. Experiment with 6-bit
        color by filling in the bottom row of the image with shades of a different
        color. Here is an example with some shades of blue. Try your own color!
      Pixelation - Lesson 15 - Complete 3-bit color_instruction: |
        We start you with
        the 4x2 image Maddie was creating, but we've left out the last two squares.
        Finish off the image by figuring out which two colors are missing and encode
        them.
      Pixelation 2_instruction: |
        Something happened to the bits in this image!  Find
        error and fix it!
      Pixelation 4x4 Empty_instruction: |
        The width and height are now encoded in
        the pixel data. Can you figure out how to adjust the dimensions?
      Pixelation Bee_instruction: |
        This larger image of a bee encodes color with
        12 bits per pixel, but viewing in hex makes it easier to see the color of
        each pixel. If you switch to binary mode - hold on to your hat - it's a lot
        of bits. Here's another mind-blowing thing to try: slide the bits per pixel
        up to 24 bits per pixel. What happens? Can you explain this behavior?
      Pixelation Flappy_instruction: |
        Here is a bigger image at 9 bits per pixel.
        With 9 bits per pixel you can express 512 different colors. Click through
        to see the next image which is even more sophisticated, but easier to understand.
      Play Lab Rocket 1_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second... press "Run" to see how this word problem looks as an animation.
      Play Lab Rocket 2_instruction: |
        We've started the Design Recipe for rocket-height
        using the contract and examples you just wrote. Complete the function definition
        for rocket-height and run your animation.
      Play Lab Rocket 2B_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second. Using the Design Recipe, write a function called rocket-height
        that takes in a number of  seconds that have passed since the rocket took
        off, and produces the height of the rocket at that time.
      Play Lab Rocket 3_instruction: |
        Awesome, now can you update that function so
        that our rocket moves more quickly? Make sure to update the purpose statement,
        examples, and function definition to launch a rocket at 40 meters per second.
      Play Lab Rocket 4 (copy 1)_instruction: |
        Real rockets start off slowly and
        gain speed over time - let's make ours do the same! Write an exponential
        function that describes a rocket that travels at "seconds" squared meters
        per second.
      Play Lab Rocket 4_instruction: |
        Real rockets start off slowly and gain speed
        over time - so let's add some simple acceleration to ours! Can you write
        a function that describes a rocket that is at 10 meters at 1 second, 40 meters
        at 2 seconds, 90 meters at 3 seconds, 160 at 4 seconds and so on?
      Play Lab Rocket 5_instruction: |
        Much better, but let's write one more function
        with simple acceleration. This time the rocket should be 15 meters at 1 second,
        45 meters at 2 seconds, 95 at 3 seconds, and 165 at 4 seconds.
      Play Lab Rocket Free Play_instruction: |
        Free Play: Experiment with your rocket-height
        function to make the rocket fly in different ways. Click "Finish" when you
        are done.
      Poorva-test_instruction: |
        Here are regular instructions for a level. There
        is nothing fancy going on here.
      Quantum Bee - Ryan_instruction: |
        These clouds are bugging me! Some of the clouds
        have flowers inside, and some don't. I should check each cloud, and only
        get nectar from the flowers.
      Quantum Bee_instruction: "Les fleurs violettes peuvent avoir 1 ou 0 nectar, mais tu ne sais pas lesquelles ! Veille à ne pas butiner de fleur violette si elle n'en a pas. Vérifie si le nectar est égal à 1 à l'aide du bloc « si »."
      Ryan - 4-5 Bee Conditionals 2_instruction: "L'abeille veut seulement du nectar maintenant. Tous les objets ne sont pas des fleurs, donc vérifie sous chaque nuage pour voir si une fleur s'y cache. Si c'est le cas, alors tu peux recueillir son nectar."
      Ryan - Bee Conditionals_instruction: "L'abeille veut seulement du nectar maintenant. Tous les objets ne sont pas des fleurs, donc vérifie sous chaque nuage pour voir si une fleur s'y cache. Si c'est le cas, alors tu peux récolter son nectar."
      Ryan Test Locked Blocks_instruction: |
        Voilà une fonction appelée "patrouille".
        Edite-la pour déplacer le chat de 400 pixels vers le haut puis 400 pixels vers le bas.
      Ryan's clone of C4S15P10_instruction: "We've added one last function for you.\n\\r\n\\r\nUse an \"if\" statement to program your game to call the \"level_up\"\nfunction only when \"player_score\" becomes greater than a certain number.\\r\n\\r\nFor\nexample: \"player_score\" > 6\\r\n\\r\nPlay the game, and make it past level\n4 to move to the next puzzle. "
      Sam the Butterfly 1 (copy 1)_instruction: |
        This butterfly is named Sam, and
        the game area is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels
        tall! As you can see, Sam is free to walk around the yard, and the coordinates
        at the top of the screen update to tell you his location. Use the arrow keys
        to move sam around his yard. Help Sam collect all of the flags to move on.
      Sam the Butterfly 1_instruction: |
        This bat is named Sam, and the game area
        is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels tall! As you can
        see, Sam is free to walk around the yard, and the coordinates at the top of
        the screen update to tell you his location. Click "Run" and then use the
        arrow keys to move Sam around his yard, making note of Sam's coordinates
        at different locations. Click "Finish" when you're ready to move on.
      Sam the Butterfly 2_instruction: |
        Sam's mom wants to make sure that she can
        always see at least a bit of him, so lets write some functions that help make
        sure he doesn't go too far out of the yard. Here's a function called safe-left?
        - it should take a Number for its domain that represents Sam's x-coordinates
        and return true if he's completely visible on screen. If your function works,
        Sam shouldn't be able to leave the yard from the left side.
      Sam the Butterfly 3_instruction: |
        In the last puzzle we kept Sam from leaving
        on the left, now let's do the same thing on the right. Complete the safe-right?
        function to make sure Sam can't go off the right side of the screen.
      Sam the Butterfly 4_instruction: |
        Huh, we can keep Sam from leaving on the
        left, or we can keep him from leaving on the right, but how can we keep him
        safe from leaving both directions? Try using the and block to program the
        function on-screen? to check if Sam is safe-left? and safe-right?
      Sam the Butterfly 5_instruction: |
        Free Play: Awesome, we've kept Sam safe
        on the left and right! Use this free play stage to experiment with your functions
        and further improve onscreen?
      Sam the Butterfly 6_instruction: |
        We've added a new parameter "y" to the
        "on-screen?" function. Update the function so that it checks that "safe-left?"
        AND "safe-right?" AND "safe-up?" are all true. When you've fixed the
        function, try going out of the yard from the left, right, and top sides.
      Sam the Butterfly 7_instruction: |
        Only one last direction to worry about! Create
        a "safe-down?" function and update the "on-screen?" function so that it
        checks up, down, left, and right.
      Sam the Butterfly Complete_instruction: |
        Only one last direction to worry about!
        Create a "safe-down?" function and update the "on-screen?" function so
        that it checks up, down, left, and right.
      scrat 16 (copy 1)_instruction: |
        Acorn! Acorn! Acorn! Use an "if" block to
        get me there with the fewest number of blocks.
      scrat 16_instruction: "Gland ! Gland ! Gland ! Utilise un bloc « si » pour m'y amener avec le moins de blocs possible."
      scrat 17 (copy 1)_instruction: |
        Ok, let's do that again for practice - this
        isn't very different, but watch out for the <insert obstacle name for Scrat>!
      scrat 17_instruction: "OK, nous allons le refaire encore une fois pour s'entrainer - ce n'est pas très différent, mais attention au mur !"
      scrat 18 (copy 1)_instruction: |
        The "If-else" blocks checks a condition,
        and then does one thing OR another. To get me to the acorn try to use this
        new block.
      scrat 18_instruction: "Les blocs « si-sinon » vérifient une condition et suivant le résultat, font une chose ou l'autre. Pour m'amener au gland, essaie d'utiliser ce nouveau bloc."
      scrat 19 (copy 1)_instruction: |
        One more practice of the "if-else" block,
        can you get it right on your first try?
      scrat 19_instruction: 'Un exercice de plus avec le bloc "si-sinon". Peux-tu y arriver du premier coup ?'
      scrat 20_instruction: "Peux-tu ajouter seulement 3 blocs pour m'aider à résoudre un labyrinthe encore plus compliqué ? Si tu le fais bien, je peux suivre n'importe quelle chemin sinueux, peu importe sa longueur. Fais-vite ! La glace fond !"
      SpecialFrozenLevel_instruction: "Tu es officiellement devenu un maître de l'art ! Crée un paradis hivernal."
      Standalone_Artist_1_instruction: "Bienvenue à l'artiste ! Tout d'abord, nous allons essayer de faire un simple carré à l'aide du bloc tourner à droite et du bloc déplacer vers l'avant. Chaque côté doit être de 100 pixels de long."
      Standalone_Artist_2_instruction: Dessiner ce diamant avec des angles de 120 et 60 degrés et des côtés de longueur 150 pixels.
      Standalone_Artist_3_instruction: Peux-tu dessiner cet hexagone avec des côtés de 100 pixels et des angles à 60 degrés ?
      Standalone_Artist_4_instruction: 'Maintenant tu as un nouveau bloc pour jouer : la boucle. Celle-ci répète un ensemble de commandes. Que se passe-t-il si tu fais boucler ces commandes 6 fois ?'
      Standalone_Artist_5.5_instruction: 'Remarque comment nous avons simplifié le code du diamant en le transformant en une boucle. Tu peux répéter en boucle cette même séquence 12 fois pour dessiner la fleur. Astuce: Tu devras tourner de 30 degrés après ta boucle diamant afin de ne pas continuer à dessiner sur le même diamant.'
      Standalone_Artist_5_instruction: Combien de fois faut-il boucler ce diamant pour dessiner la fleur ?
      Standalone_Artist_6_instruction: "Fait boucler ce code d'hexagone 6 fois pour créer ce dessin. De combien de degrés devras-tu tourner à chaque fois ? Astuce : divise le nombre de degrés dans un cercle par le nombre d’itérations."
      Standalone_Artist_7_instruction: "Une fonction est un autre outil de programmation qui permet d'éviter de se répéter. Cette fonction dessine une fleur. Tu peux ainsi l'utiliser chaque fois que tu souhaites dessiner une fleur. Utilise là, ainsi que le nouveau bloc 'saut' pour dessiner cette fleur. Astuce : Les fleurs sont séparées de 150 pixels"
      Standalone_Artist_8_instruction: "Voici une fonction appelée « Dessiner une forme » que nous avons programmée pour dessiner des hexagones. Exécute le code pour voir ce qu'il fait, puis joue avec la fonction pour voir ce qui se passe. Peux-tu la faire dessiner des carrés, des triangles ou des octogones?"
      Standalone_Artist_9_instruction: "Maintenant, vas-y, fais l'image que tu souhaites ! Tu as même une fonction vide et tu peux lui faire faire ce que tu veux !"
      Standalone_Artist_v2_instruction: "Bienvenue à l'artiste ! Tout d'abord, nous allons essayer de faire un simple carré à l'aide du bloc tourner à droite et du bloc déplacer vers l'avant. Chaque côté doit être de 100 pixels de long."
      template test_instruction: "what's up"
      Test Play Lab_instruction: This is a test play lab level.
      test_sarah_instruction: hi hi
      Text Compression 1_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      Total Artist Clone Me_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      U1L10 NetSim numbers with decimal_instruction: |
        Invent and test a protocol
        for encoding and sending text messages. Your protocol must include the letters
        a-z, spaces, and common punctuation marks. You may add additional characters
        if you wish. See the worksheet handed out by your teacher for more detailed
        instructions!
      U1L11 NetSim numbers with Ascii_instruction: |
        Work with a partner or in a small
        team to develop a protocol that allows you to send formatted text. See the
        worksheet handed out by your teacher for more detailed instructions!
      U1L13 Text Compression_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      U1L4 NetSim SendAB_instruction: |
        Develop, document, and test a protocol that
        allows you to use Internet Simulator to relay a message. See the worksheet
        for more detailed instructions.  
      U1L8 NetSim numbers no decimal_instruction: Default instructions
      U1L8 NetSim numbers with decimal_instruction: |
        With your partner, develop a
        protocol or set of rules for communicating a drawing using only bits. See
        the worksheet handed out by your teacher for more detailed instructions!
      U2 frequency caesar_instruction: Consignes
      U2 frequency random sub_instruction: Consignes
      U2 vigenere cipher_instruction: Consignes
      U2 Vigenere_instruction: Test
      U2L04 - NetSim Routers with Addresses_instruction: |
        Send messages with your
        classmates (Click to see full instructions)
      U2L05 - NetSim - Packets and Building TCP_instruction: "Develop a Protocol\nfor Reliably Sending a Message.\\r\n\\r\nConstraints:\\r\n- Packets may contain\nonly 6 characters\\r\n- Packets may drop with small probability\\r\n- Packets\nmay not arrive in order"
      U2L10 NetSim Automatic DNS_instruction: |
        In this version of the Internet Simulator,
        a Domain Name System (DNS) is provided for you and knows the IP addresses
        of all connected computers. Send a message in the form GET [hostname] to the
        DNS service at address <yourRouterNumber>.15 to get a student's address.
      U2L10 NetSim Manual DNS_instruction: |
        In this version of the simulator you
        can't see the other students' addresses.  Instead, one of you must act as
        a name service, to help share addresses with each other.
      U2L14 frequency random_instruction: Test
      U2L2 NetSim Hub Mode_instruction: "Now use the Internet Simulator to send the\nbattleship moves. For setup, join a Room with your group, and add ships to\nyour paper board for each opponent. When playing, all communication must be\ndone through the tool, so no talking, but have fun!\\r\n"
      U2L3 NetSim Hub Mode_instruction: |
        Use the Internet Simulator to test out your
        group's binary communication protocol for battleship. How short can you make
        the message and response?
      U2L4 NetSim Routers Addresses_instruction: "For this activity, connect to a\nrouter with the others in your group. Important note: The router will only\nproperly route messages where the first 4 bits are the To: address and the\nsecond 4 bits are the From: address.\\r\n\\r\n[TODO: NetSim needs to support\nhierarchical addresses. For now, level is set up for 4 bit to and from addresses]"
      U2L5 NetSim Classroom Internet_instruction: "For this activity, connect to\na router with the others in your group. The Internet Simulator now provides\na place for you to put the To and From addresses, so you don't have to type\nout the bits manually.\\r\n\\r\n"
      U2L7 NetSim Need for Packets_instruction: |
        Transfer your favicon to a partner
        across a network in which the larger a packet grows, the more likely it is
        to be dropped.
      U3 - Arrays - appendItem_instruction: |
        Create an array of odd numbers 1-11
        by using appendItem. (Click to see full instructions)
      U3 - Arrays - assignment_instruction: |
        Use indexes to change the values in
        this array from 1 to 0. (Click to see full instructions)
      U3 - Arrays - assignment2_instruction: |
        Calculate the sum of three values stored
        in an array. (Click to see full instructions)
      U3 - Arrays - assignment3_instruction: |
        Increase the value of each value in
        the randomly generated array by 1. (Click to see full instructions)
      U3 - Arrays - createFirstArray_instruction: |
        Create an array of the even numbers
        from 0 to 10 and display its contents with console.log. (Click to see full
        instructions)
      U3 - Arrays - Demo App_instruction: |
        Use the "My Favorite Things" app. How
        might this app be making use of an array? (Click to see full instructions)
      U3 - Arrays - expressionsAsIndexes_instruction: |
        Write a program that displays
        a randomly chosen color from the array. (Click to see full instructions)
      U3 - Arrays - favThings addItem_instruction: |
        Write code that allows a user
        to add their own favorite things to the list. (Click to see full instructions)
      U3 - Arrays - favThings bounds_instruction: |
        Add if statements to your event
        handlers that prevent the global index from going out of bounds. (Click to
        see full instructions)
      U3 - Arrays - favThings Counting Variable_instruction: |
        Create a global variable
        for the current index and use it to display the first item in the array. (Click
        to see full instructions)
      U3 - Arrays - favThings createArray_instruction: |
        Create an array of words
        describing your favorite things. (Click to see full instructions)
      U3 - Arrays - favThings firstOutput_instruction: |
        Use setText to display the
        first item in the array. (Click to see full instructions)
      U3 - Arrays - favThings giveIDs_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - favThings keepPlaying_instruction: |
        Make any other improvements
        you want! (Click to see full instructions)
      U3 - Arrays - favThings Next_instruction: |
        Write code that allows the user
        to move forward through your list by clicking the "Next" button. (Click
        to see full instructions)
      U3 - Arrays - favThings Prev_instruction: |
        Write code that allows the user
        to move backward through your list by clicking the "Last" button. (Click
        to see full instructions)
      U3 - Arrays - favThings template_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - globalVariableIndex_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - indexPractice_instruction: |
        Write the contents of the array to
        the screen in numerical order. (Click to see full instructions)
      U3 - Arrays - insertingItems_instruction: |
        Insert items into an array to form
        a complete sentence. (Click to see full instructions)
      U3 - Arrays - insertionErrors_instruction: |
        Run each command that references
        indexes that are out of bounds and observe the results. (Click to see full
        instructions)
      U3 - Arrays - introIndex_instruction: |
        Display the first and last element in
        the array. Display the number 5 from the array. (Click to see full instructions)
      U3 - Arrays - length_instruction: |
        Use list.length to determine the length
        of each array. (Click to see full instructions)
      U3 - Arrays - lengthMinus1_instruction: |
        Use list.length - 1 to log the last
        item in the array to the console. (Click to see full instructions)
      U3 - Arrays - remove_instruction: |
        Remove items from an array to form a complete
        sentence. (Click to see full instructions)
      U3 - Arrays - stringsInArrays_instruction: |
        Write a sentence word by word by
        adding strings to an array. (Click to see full instructions)
      U3 - Canvas - 200dots_instruction: |
        Add a loop to your program that draws 200
        dots on your canvas. (Click to see full instructions)
      U3 - Canvas - appendToArray_instruction: |
        Create an array to store each event
        parameter. Append each event parameter to this array within your event handler.
        (Click to see full instructions)
      U3 - Canvas - changeToMouseMove_instruction: |
        Change your program so that dots
        are drawn at the location of the mouse as the user moves the mouse on the
        canvas. (Click to see full instructions)
      U3 - Canvas - clickToAdd_instruction: |
        Change your program so that dots are
        added to the canvas when the user clicks on it. (Click to see full instructions)
      U3 - Canvas - delete_instruction: |
        Create a button that deletes the drawing
        by clearing the canvas and removing all stored values. (Click to see full
        instructions)
      U3 - Canvas - draw at click point_instruction: |
        Change your program so that
        dots are drawn at the location of the mouse click. (Click to see full instructions)
      U3 - Canvas - freePlay_instruction: |
        Extend the functionality of one of the
        effects, or create an entirely new one of your own. (Click to see full instructions)
      U3 - Canvas - introCanvas_instruction: |
        Add a canvas to your app and set it
        to be the active canvas. Then add a large dot to your canvas. (Click to see
        full instructions)
      U3 - Canvas - movementFunction fix Orig_instruction: |
        Modify the "Original"
        button event handler so that it takes the movement of the mouse into account.
        (Click to see full instructions)
      U3 - Canvas - movementFunction_instruction: |
        Write a function that takes the
        movement of the mouse as input and generates a line width as output. (Click
        to see full instructions)
      U3 - Canvas - One Dot sprayPaint_instruction: |
        Write code that redraws your
        image using a dot whose x and y locations use offsetX and offsetY with a small
        random value added. (Click to see full instructions)
      U3 - Canvas - redrawOriginal_instruction: |
        Write a function that processes
        your array, redrawing the dots as they originally appeared. (Click to see
        full instructions)
      U3 - Canvas - redrawRandom_instruction: |
        Set up a button and event handler
        for the random function. (Click to see full instructions)
      U3 - Canvas - redrawRandom2_instruction: |
        Write a function that processes your
        array, redrawing every dot with a random size. (Click to see full instructions)
      U3 - Canvas - shiftKey_instruction: |
        Add an if statement to your event handler
        so dots are only drawn when the shift key is pressed. (Click to see full instructions)
      U3 - Canvas - sketch_instruction: |
        Write code that redraws your image using
        a sketch effect. (Click to see full instructions)
      U3 - Canvas - sprayPaint_instruction: |
        Update the spray paint code so that
        it redraws your image using multiple random dots instead of using a nested
        for loop. (Click to see full instructions)
      U3 - Canvas - transparentDots_instruction: |
        Change the colors of your dots
        so they have a fully transparent stroke and partially transparent fill. (Click
        to see full instructions)
      U3 - Canvas - usingOffsetXY_instruction: |
        Add a console.log command inside
        the function of your event handler. Use it to display the event parameter.
        Click on the screen to see the contents of the event parameter (Click to see
        full instructions)
      U3 - Conditional Basics - 6_instruction: |
        Add a setText after the if statement
        to "Nope. Guess again." (Click to see full instructions)
      U3 - Conditionals - Combine AND and OR_instruction: |
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instrucitons.
      U3 - Conditionals - Combine AND OR and NOT_instruction: |
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instructions.)
      U3 - Conditionals - Combine AND OR Simple_instruction: |
        Write an if statement
        that uses AND and OR to display "Sleep in!" if it's the weekend and the
        user is a teenager. (Click to see full instructions.
      U3 - Conditionals - intoOr_instruction: |
        Add 2 if statements that use the OR
        operator. (Click to see full instructions)
      U3 - Conditionals - introAND_instruction: |
        Add 2 if statements that use the
        OR operator. (Click to see full instructions)
      U3 - Conditionals - Simple AND_instruction: |
        Write an if statement that uses
        AND to display "You are a teenager." if the user enters an age between 13
        and 19. (Click to see full instructions)
      U3 - Conditionals - Simple OR_instruction: |
        Write an if statement that uses
        OR to display "It's the weekend!" if the user enters a weekend day at the
        prompt. (Click to see full instructions)
      U3 - Design Mode - Console Log_instruction: |
        Update the ID names and `console.log`
        messages to match the correct button. (Click to see full instructions.)
      U3 - Design Mode - Layers and Delete_instruction: |
        Fix the layout of the bullseye
        game. (Click to see full instructions)
      U3 - Design Mode - Multi Screens 2_instruction: |
        Make a 2 screen app which
        can switch back and forth between a black screen and a white screen using
        buttons. (Click to see detailed instructions.)
      U3 - Design Mode - Multi Screens_instruction: |
        Make a 2 screen app with a black
        screen and a white screen. (Click to see detailed instructions)
      U3 - Design Mode - Other Events_instruction: |
        Delete the button and make the
        image move to a random location when you click on it. (click to see detailed
        instructions)
      U3 - Design Mode - WTF Console Log_instruction: |
        Add a 3 console.log messages
        and test them out. (Click to see full instructions.)
      U3 - Design Mode -Recreate Beyond Buttons_instruction: |
        Recreate the game from
        the "Chaser Game" with a Welcome Screen and Game Over Screen. (Click to
        see full instructions.)
      U3 - Design Mode 1_instruction: |
        Add a large red button to your screen using
        Design Mode. (Click for full instructions.)
      U3 - Dice - Dropdown and Score_instruction: |
        Add guess and score to the Dice
        Game (Click to see full instructions)
      U3 - Dice - Dropdown with Strings_instruction: |
        Add a dropdown for difficulty
        level that prints the difficulty level in the console. (Click to see full
        instructions)
      U3 - Dice - If_instruction: |
        Show different die images for the random number
        generated. (Click to see full instructions)
      U3 - Dice - Nested_instruction: |
        Use nested if statements to make the scoring
        different for the different game levels. (Click to see full instructions)
      U3 - High Low - Debug_instruction: |
        Debug the order of the conditionals so
        that it will actually tell the user when their guess is close. (Click to see
        full instructions)
      U3 - High Low - Dropdown_instruction: |
        Add a dropdown for their guess instead
        of promptNum (Click to see full instructions)
      U3 - High Low - Else if_instruction: |
        Add an else-if statement in order to
        tell the user if their guess is high or low instead of just wrong. (Click
        to see full instructions)
      U3 - High Low - Else_instruction: "Add an else statement so that the program\nwill tell the user when they are right and when they are wrong. (Click to\nsee full instructions)\\r\n"
      U3 - High Low - If_instruction: |
        Add code to the if statement that indicates
        the user guessed the secret number. (Click to see full instructions)
      U3 - Keys - Add Image URLs_instruction: |
        Add image URLs to your array. Replace
        the text area with an image and setText with setImageURL. Then test your app!
        (Click to see full instructions)
      U3 - Keys - Buttons and Keys_instruction: |
        Have the program respond the same
        way for both clicking images on the screen and hitting the up and down keys
        on the keyboard. (Click to see full instructions)
      U3 - Keys - Demo App_instruction: |
        Play with the image scroller. Press the
        left and right arrows to progress through the images.
      U3 - Keys - Final Image Scroller_instruction: |
        Update the image scroller to
        respond to buttons and key presses. (Click to see full instructions)
      U3 - Keys - Functions_instruction: |
        Write doUpArrow and doDownArrow functions
        and call the functions instead of duplicating the code. (Click to see full
        instructions)
      U3 - Keys - Key Up and Down_instruction: |
        Try out the keyup and keydown events
        to see how they are different from keypress. (Click to see full instructions)
      U3 - Keys - Multiple Keys_instruction: |
        Play a different sound when the down
        arrow is pressed. (Click to see full instructions)
      U3 - Keys - Practice Adding Images with URL_instruction: |
        Add image URLs to
        your image array. Test out the add button. Style your image scroller. (Click
        to see full instructions)
      U3 - Keys - Words to Images_instruction: |
        Add image URLs to your image array.
        Test out the add button. Style your image scroller. (Click to see full instructions)
      U3 - Loops -  9 Part 2_instruction: |
        Change the boolean expression for the
        while loop so that it will roll until both dice are greater than 3. (Click
        to see full instructions)
      U3 - Loops -  Complex Condition_instruction: |
        Change the boolean expression
        for the while loop so that it will stop when both dice are greater than or
        equal to 5. (Click to see full instructions)
      U3 - Loops - 1_instruction: |
        Change the condition for the while loop to check
        if the variable num is less than 90. (Click to see full instructions)
      U3 - Loops - 10_instruction: |
        Write a program that simulates the rolling of
        two dice. Roll the dice repeatedly until the sum of the dice is either 7 or
        11.
      U3 - Loops - 11_instruction: |
        Fix the condition so that it keeps rolling the
        die as long as the value is not a 2 or a 3 instead of rolling infinitely.
        (Click to see full instructions)
      U3 - Loops - 12_instruction: |
        Change the code so that it prints the string
        "Hi" 5 times. (Click to see full instructions)
      U3 - Loops - 13_instruction: |
        Update the code to count up by 3 instead of 1.
        (Click to see full instructions)
      U3 - Loops - 14_instruction: |
        Change the loop condition to prevent the infinite
        loop and stop counting once the count is past 30. (Click to see full instructions)
      U3 - Loops - 15_instruction: |
        Count the number of times the sum of the dice
        is 12. (Click to see full instructions)
      U3 - Loops - 16_instruction: |
        Find out how many times you have to roll to get
        the sum of 7 100 times (Click to see full instructions)
      U3 - Loops - 2_instruction: |
        Try creating an infinite loop using !=, > and
        <. (Click to see full instructions)
      U3 - Loops - 3_instruction: |
        Change the if statement to a while loop so the
        program will run until it rolls a 6. (Click to see full instructions)
      U3 - Loops - 4_instruction: |2
         Use the Debug Commands to make a list of all
        the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - 5_instruction: |
        Add code inside the while loop which will update
        the variable num so that the condition will eventually become false. (Click
        to see full instructions)
      U3 - Loops - 6_instruction: |
        Fix the problem so the loop will run at least
        once. Change the initial value of num to a dummy value such as -1. (Click
        to see full instructions)
      U3 - Loops - 7_instruction: |
        Without adding any lines of code, reorder the
        code so that it prints all the values of num. (Click to see full instructions)
      U3 - Loops - 8_instruction: |
        Debug which number is not getting printed and
        add a write statement to display that value. (Click to see full instructions)
      U3 - Loops - 9_instruction: |2
         Modify the condition so that it keeps rolling
        as long as both are less than 3. (Click to see full instructions)
      U3 - Loops - Continue_instruction: |2
         Use the Debug Commands to to make a list
        of all the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - minus = operator_instruction: |
        Update the code to use the -= operator
        to count from 30 down to 0 by 3's. (Click to see full instructions)
      U3 - Loops - Minus Minus_instruction: |
        Change the code to count down from 10
        to 1. (Click to see full instructions)
      U3 - Loops - plus and minus = operator_instruction: |
        Update the code to use
        the += operator. (Click to see full instructions)
      U3 - Loops - Plus Plus_instruction: |
        Change the code to use count++ instead
        of count = count + 1.  (Click to see full instructions)
      U3 - Loops - Typing in Console_instruction: |
        Use console to check the ending
        value of num. (Click to see full instructions)
      U3 - Loops And Arrays - Add 5_instruction: |
        Add 5 to all the values in an array
        (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 1_instruction: |
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 2_instruction: |
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Counting Times_instruction: |
        Count the number of times
        5 appears in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Divid by 2_instruction: |
        Divide every value in the
        array by 2. (Click to see full instructions)
      U3 - Loops And Arrays - Find Max_instruction: |
        Design a function that displays
        the smallest number in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Find Min_instruction: |
        Complete the findMinVal function
        to find and display the smallest value in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Functions that Return Value_instruction: |
        Call findMin
        within the console.log statement to calculate the minimum of two values.  (Click
        to see full instructions)
      U3 - Loops And Arrays - General Search Param_instruction: |
        Add a second parameter
        to the search function for the value to search for.  (Click to see full instructions)
      U3 - Loops And Arrays - Intro For Loop_instruction: |
        Add a for loop with a
        console.log inside and test out the 3 pieces of the for loop. (Click to see
        full instructions)
      U3 - Loops And Arrays - Linear Search_instruction: |
        Visit every element in
        the array and display "true" if the value is a 5, and "false" otherwise.
        (Click to see full instructions)
      U3 - Loops And Arrays - Loop Array If_instruction: |
        Use an if statement to
        only display the values in the array that are greater than 5. (Click to see
        full instructions)
      U3 - Loops And Arrays - Make it a Function - add list parameter_instruction: |
        Create
        a function that takes a list parameter and prints if the list contains a 5.
        (Click to see full instructions)
      U3 - Loops And Arrays - Make it a Function_instruction: |
        Move the code that
        searches the list for a 5 into a function called "search". (Click to see
        full instructions)
      U3 - Loops And Arrays - Multiple Returns_instruction: |
        Test out the return
        values of the findMax function.  (Click to see full instructions)
      U3 - Loops And Arrays - Print Array_instruction: |
        Use a for loop to print out
        all the values in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Printing Single True_instruction: |
        Process the array
        and display a single "true" if the array contains a 5 or a single "false"
        if it does not.  (Click to see full instructions)
      U3 - Loops And Arrays - Return Index_instruction: |
        Make the search function
        return the index of the search value in the array. (Click to see full instructions)
      U3 - Loops And Arrays - Return Value_instruction: |
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Loops And Arrays - Search and Remove_instruction: |
        Search for 5 in the
        array and remove it from the array. (Click to see full instructions)
      U3 - Loops And Arrays - Search with Boolean Var_instruction: |
        Make a boolean
        variable to use as a flag to keep track of whether there is a 5 in the array.
        (Click to see full instructions)
      U3 - Loops And Arrays - useFindMin_instruction: |
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Movie Bot - Multiple If Sequences_instruction: |
        Add another set of if,
        else if, and else statements inside the question if statement to check for
        keywords for movie ratings (G, PG, PG-13, and R). (Click to see full instructions)
      U3 - Movie Bot - Nested Motivation_instruction: |
        Add a separate set of if statements
        to check for a "?" in the input. (Click to see full instructions)
      U3 - Movie Bot - toLowerCase_instruction: |
        Use the toLowerCase command to change
        all user input into lowercase letters after they enter it. (Click to see full
        instructions)
      U3 - Movie Bot - When Multiple If Statements_instruction: |
        Add an if and else-if
        statement that checks for please and thank you. (Click to see full instructions)
      U3 - Practice Create Performance Task_instruction: |
        Design and implement your
        practice Create Performance Task. (Click to see full instructions)
      U3 - Read Record - 1.2_instruction: "Console.log the records returned by a\ncall to readRecords. (Click to see full instructions)\\r\n"
      U3 - Read Record - 1.5_instruction: "Console.log the records returned by a\ncall to readRecords. (Click to see full instructions)\\r\n"
      U3 - Read Record - 1.6_instruction: "Console.log the records returned by a\ncall to readRecords. (Click to see full instructions)\\r\n"
      U3 - Read Record - 1_instruction: "Console.log the records returned by a call\nto readRecords. (Click to see full instructions)\\r\n"
      U3 - Read Record - 2_instruction: "Change the table name so that the records\nare read from the new table.(Click to see full instructions)\\r\n"
      U3 - Read Record - 3_instruction: "Change the name of the table in a readRecords\ncommand to read from a table that does not exist. (Click to see full instructions)\\r\n"
      U3 - Read Record - 4.1_instruction: "Print out each record return from the\nreadRecords call individually. (Click to see full instructions)\\r\n"
      U3 - Read Record - 4_instruction: "Print out each record return from the readRecords\ncall individually. (Click to see full instructions)\\r\n"
      U3 - Read Record - 5 and half_instruction: "Print out the name of each movie\nin the records return from the readRecords call. (Click to see full instructions)\\r\n"
      U3 - Read Record - 5_instruction: "Print out the name of each movie in the\nrecords return from the readRecords call. (Click to see full instructions)\\r\n"
      U3 - Return Values - constrainTurtle_instruction: |
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Return Values - debuggingConstrain_instruction: |
        Correct the error in
        constrain so that it returns the appropriate value.  (Click to see full instructions)
      U3 - Return Values - debuggingMaxVal_instruction: |
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - debuggingReturns_instruction: |
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - increase1_instruction: |
        Call the increase function within
        moveForward, write, and console.log.  (Click to see full instructions)
      U3 - Return Values - increase2_instruction: |
        Change the increase function to
        return 3 times the input value. (Click to see full instructions)
      U3 - Return Values - min1_instruction: |
        Test out the return values of the findMax
        function.  (Click to see full instructions)
      U3 - Return Values - useFindMin_instruction: |
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - useMinVal_instruction: |
        Call minVal within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - wrapTurtle_instruction: |
        Write wrap in this simple app
        to let the turtle "wrap" to the other side of the screen when it goes off.  (Click
        to see full instructions)
      U3 - Return Values - writeMaxVal_instruction: |
        Write the function maxVal and
        then use it within the console.log statement to calculate the maximum of two
        values.  (Click to see full instructions)
      U3 - Search Terms - 1_instruction: "Create an array of all the movies made\nin 2008 and print it out. (Click to see full instructions)\\r\n"
      U3 - Search Terms - 2_instruction: "Print out all the movies with year 2008\nusing the readRecords search terms. (Click to see full instructions)\\r\n"
      U3 - Search Terms - 3_instruction: "Print whether or not there are movies matching\nthe search criteria (Click to see full instructions)\\r\n"
      U3 - Search Terms - 4_instruction: "Print whether or not there are movies matching\nthe search criteria (Click to see full instructions)\\r\n"
      U3 - Search Terms - 5_instruction: "Print out the cities that are in California\nor have a population of 2,000,000. (Click to see full instructions)\\r\n"
      U3 - Search Terms - 6_instruction: "Print out the cities that are in California\nor have a population of 2,000,000. (Click to see full instructions)\\r\n"
      U3 - Simulation - 1_instruction: |
        Use a while loop to "flip a coin 10 times"
        and write the values to the screen. (Click to see full instructions)
      U3 - Simulation - 2.1_instruction: |
        Change your looping condition so the simulation
        runs until there are 5 heads flipped. (Click to see full instructions)
      U3 - Simulation - 2.5_instruction: |
        Run your simulation to get the full 10,000
        heads! How long did it take? (Click to see full instructions)
      U3 - Simulation - 2_instruction: |
        Keep track of how many heads (1's) your
        program generates and print the results to the screen. (Click to see full
        instructions)
      U3 - Simulation - 3_instruction: "Add functionality that counts how many heads\nin a row are flipped. (Click to see full instructions)\\r\n"
      U3 - Simulation - 4_instruction: |
        Update your while loop's condition so the
        the coin flips until there are three heads in a row. (Click to see full instructions)
      U3 - Simulation - 5_instruction: |
        Change your while loop to run until you get
        a streak of 12 heads. How many flips did it take? (Click to see full instructions)
      U3 - Simulation - 6_instruction: |
        Keep adding to your simulation. What do you
        want to explore next? (Click to see full instructions)
      U3 - Simulation - App_instruction: |
        Change your code to run the full simulation
        with 10,000 coins. What was your longest streak of heads? (Click to see full
        instructions)
      U3 - Simulation - Template_instruction: |
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3 - User Input - Save getText To Variable_instruction: |
        Save the age and name
        of the user in variables (Click to see full instructions)
      U3 - User Input - Saving After Input_instruction: |
        Save the age of the user
        in a variable using getText() (Click to see full instructions)
      U3 - User Input and String -  Concat_instruction: |
        Output a message about age
        in a Text Area (Click to see full instructions)
      U3 - Variables - Clicker Game_instruction: |
        Create your improved Chaser-Game
        here. (Click to see full instructions)
      U3 - Variables - Debug Scope_instruction: |
        Why isn't the value of foo changing
        correctly? Make a guess. (Click to see full instructions)
      U3 - Variables - Debugging with Turtle_instruction: |
        Use your new debugging
        techniques to get the code to run correctly (Click to see full instructions)
      U3 - Variables - Decrement_instruction: |
        Decrement the value of the variable.
        (Click to see full instructions)
      U3 - Variables - Identify Variables_instruction: |
        Identify the values printing
        in the terminal with console.log statements. (Click to see full instructions)
      U3 - Variables - Increment_instruction: |
        Use the console.log debugging technique
        to see what is happening in this example. Add another variable and increment
        its value. (Click to see full instructions)
      U3 - Variables - Incrementing Variables_instruction: |
        Create a repeat loop
        for the repeated code and use increment to recreate the original program with
        less lines of code! (Click to see full instructions)
      U3 - Variables - Read Using Turtle_instruction: |
        Create a second set of variables
        for x and y position. Move turtle to that new location. (Click to see full
        instructions)
      U3 - Variables - Reassigning Variables with Console.log_instruction: |
        Add another
        reassignment statement at the end of the code to change the value of the variable
        at second time. (Click to see full instructions)
      U3 - Variables - Set to Expression with Other Variables and Turtle_instruction: |
        (click
        to see full instructions)
      U3 - Variables - Set to Expression with Other Variables_instruction: |
        Write
        an expression that calculates the player's total score and stores it in the
        totalScore variable. The calculation is: the player's points times lives
        divided by the total time. (click to see full instructions)
      U3 - Variables - Set to Expression with Turtle_instruction: |
        (click to see
        full)
      U3 - Variables - Set to Expression_instruction: |
        Test out the new expressions.
        (Click to see full instructions)
      U3 Digital Assistant Design_instruction: |
        Pick a topic for your Digital Assistant
        and create the basic layout with a text input and text area. (Click to show
        full instructions)
      U3 Digital Assistant Set Text_instruction: |
        Have your digital assistant repeat
        back what the user types and include a canned response. (Click to see full
        instructions)
      U3 Digital Assistant Target - Mehal_instruction: |
        Try out a demo of the Digital
        Assistant!
      U3 Digital Assistant Target_instruction: Try out a demo of the Digital Assistant!
      U3 Digital Assistant Template_instruction: This is a project template!
      U3 Digital_instruction: |
        Choose a specialization topic for your digital assistant.
        Create a basic digital assistant that takes the user's input and displays
        back a default response.
      U3 full clicker demo_instruction: 'Clicker game - Try it out!'
      U3 mehal's clone_instruction: Try out a demo of the Digital Assistant!
      U3- Variables - Assign Random For Turtle Draw_instruction: |
        Try writing the
        same code in text mode.
      U3- Variables - Changing the Value_instruction: |
        Update the value of 'turnAmount'
        before each moveForward so the turtle turns a different amount each time.
        (Click to see full instructions)
      U3- Variables - Create And Assign_instruction: |
        On one line add a variable
        called "lives" and assign it the value 3. Print it to the console. (Click
        to see full instructions)
      U3- Variables - Text Mode_instruction: |
        1. Switch to text mode and type instructions;
        2. drag blocks out into text mode; 3. experiment with code completion
      U3-Design Mode-ID and Event Handler_instruction: |
        Add an event handler for
        the button using the "Insert and show" link in the Design Mode Events tab.
        (Click to see full instructions).
      U3-Design Mode-ID_instruction: |
        Using the Design Mode Events change the button
        ID and update the code to match. (Click to see detail instructions).
      U3-Design Mode-Image_instruction: |
        Recreate the "Chaser Game" from the last
        lesson using Design Mode. (Click to see full instructions.)
      U313 drag Two Buttons_instruction: |
        Run a program with two buttons that have
        the same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U313 eventsDetails_instruction: |
        Run a program with two buttons that have the
        same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U313 Two Buttons with Ids_instruction: |
        Predict what will happen. Once you've
        made a prediction, run the code to see what happens. (Click to see full instructions)
      U3L03 - draw rect function_instruction: "Write a function called drawRectangle().\\r\n(Click\nto see full instructions)"
      U3L03 - draw step_instruction: |
        Write the drawStep function. (Click to see
        full instructions)
      U3L03 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.  GIF: U3L3-ProceduresChooseOne.png
      U3L03 Creating Procedures 1_instruction: |
        Write the turnAround() function and
        use it to make the turtle move as depicted. see: U3L03-turnAndDown.gif
      U3L03 Define and use turnAround_instruction: |
        Define a function called turnAround.
        Call the function and then move the turtle forward. (Click to see full instructions)
      U3L03 define turnRight and draw a rectangle_instruction: |
        Define a function
        called right() that turns the turtle to the right. Then use this function
        to draw a rectangle, as shown below. (Click to see full instructions)
      U3L03 Draw a T using turnAround_instruction: |
        Draw a plus sign using the provided
        version of turnAround().  (Click to see full instructions)
      U3L03 draw diamond_instruction: |
        Create a function called drawDiamond() that
        makes use of your previous work to draw the complete diamond. (Click to see
        full instructions)
      U3L03 Three Steps_instruction: |
        Define a function called drawSide() which draws
        three steps and moves the turtle to prepare for the next side (Click to see
        full instructions)
      U3L04 - 3 by 3 with functions_instruction: |
        Make the 3x3 square as efficiently
        as you can. (Click to see full instructions)
      U3L04 - snowflake_instruction: |
        Create the design by breaking it down into
        layers of functions. (Click to see full instructions)
      U3L04 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.
      U3L04 diamond solution_instruction: |
        Study this solution to the drawDiamond
        problem.  Notice that the whole program starts by calling drawDiamond() at
        the top.  The program then follows a chain of function calls.  You can trace
        what's happening in the code to see the functions reused.  It's also easy
        to read because the function names describe the expected behavior.
      U3L05_3x3GridEfficiencyChallenge_instruction: |
        Let's revisit the 3x3 grid
        problem you did a few lessons ago.  This time the challenge is to program
        the solution "as efficiently as possible."  Now that you know how to write
        functions, it should be easier to break the problem down, and your code should
        be easier to read and debug.  See the rubric for more details about requirements
        and expectations.
      U3L05_draw3x3GridEfficiently_instruction: |
        Draw a 3x3 grid above and to the
        right of the turtle. Try to do so with the fewest number of commands possible.
        NOTE: This is a very challenging problem.  You may need to play with it for
        a while and tweak it.  You might also consider using pencil and paper to sketch
        your ideas.
      U3L06 - moveForwardwithParams_instruction: |
        Use a single command to move the
        turtle to the edge of the screen. (Click to see full instructions)
      U3L06 Challenge 1 triangle_instruction: |
        Use the parameterized versions of
        the turtle commands to create a triangle with sides 100 pixels long. (Click
        to see full instructions)
      U3L06 Challenge 2 purple square_instruction: |
        Read the documentation for penColor()
        and penWidth() before using them to draw the blue square.
      U3L06 Challenge 3 fill pink_instruction: |
        Fill in the background of the screen
        with your favorite color. (Click to see full instructions)
      U3L06 Challenge 4 bullseye_instruction: |
        Create the bullseye using hexadecimal
        colors and dot(). (Click to see full instructions)
      U3L06 Challenge 5 overlapping circles_instruction: |
        This image is created just
        using dot() and penColor() but, how are we going to get those circles to be
        transparent?  If you haven't gotten the hint yet: check out the documentation!
      U3L06 Challenge 6 squiggles_instruction: |
        Read the documentation for the "arcLeft"
        and "arcRight" commands and then draw the squiggles as shown. 
      U3L06 Challenge 7 smiley face_instruction: |
        Use turnTo() and moveTo() to help
        draw a smiley face. (Click to see full instructions)
      U3L06 Challenge 8 make your own_instruction: |
        Create a drawing of your own.
        (Click to see full instructions)
      U3L07 - allSeaGrass_instruction: |
        Add 50 pieces of seagrass to the image by
        writing drawAllSeagrass with a loop. (Click to see full instructions)
      U3L07 - bubbles_instruction: |
        Add 200 bubbles to the image by writing drawAllBubbles
        with a loop. (Click to see full instructions)
      U3L07 - callingFunctionsInLoops_instruction: |
        Call the function within the
        loop to complete the figure. (Click to see full instructions)
      U3L07 - createTriangleParam_instruction: |
        Define a function that accepts a
        parameter to match the function calls and complete the image. (Click to see
        full instructions)
      U3L07 - fish_instruction: |
        Add 15 fish to the image by writing drawAllFish
        with a loop. (Click to see full instructions)
      U3L07 - Free Play Loops and Random_instruction: |
        Free Play! Use what you learned
        from loops and random to make your own little scene. Have fun.
      U3L07 - introSquare_instruction: |
        Use a loop to draw a square. (Click to see
        full instructions)
      U3L07 - loopsWithRandom_instruction: |
        Increase the number of iterations to
        fill the screen with white. (Click to see full instructions)
      U3L07 - randomDots1_instruction: |
        Increase the number of iterations to fully
        fill the screen with random dots. (Click to see full instructions)
      U3L07 - randomSquare_instruction: |
        Draw the figure using a loop. (Click to
        see full instructions)
      U3L07 - seaGrass_instruction: |
        Add a parameter to drawSeagrass that controls
        the number of waves in the grass. (Click to see full instructions)
      U3L07 - seaStar_instruction: |
        Add 5 sea stars to the image by writing drawAllSeaStars
        with a loop. (Click to see full instructions)
      U3L07 - Starry Night Starter Code_instruction: |
        You are going to use loops
        and random numbers to generate an image of starry night sky similar to one
        shown here.  We have given you some starter code to generate the ground and
        sky (just two giant dots), you will add code to this project to make the stars,
        grass, and moon.  All of the effects are clever applications of turtle dots,
        lines, and colors.  To get started, follow the series of steps suggested in
        the accompanying worksheet. 
      U3L07 - sunBeams_instruction: |
        Add 100 sunbeams to the image by writing drawAllSunbeams
        with a loop. (Click to see full instructions)
      U3L07 - topDownDesign_instruction: |
        Get comfortable with the structure of this
        program, then move on to the next exercise. (Click to see full instructions)
      U3L08 - createTwoParamTriangle_instruction: |
        Define a function called drawTriangle()
        that accepts two parameters to set the size and width of the triangle. (Click
        to see full instructions)
      U3L08 - digitalScene_instruction: |
        Create the functions you were assigned as
        part of your digital scene. (Click to see full instructions)
      U3L08 - drawSquaresWithParams_instruction: |
        Write drawSmallSquare() to draw
        a 25px square. (Click to see full instructions)
      U3L08 - drawSquareWithParam - for video_instruction: |
        Use drawSquare() to recreate
        the image of both squares, this time using parameters. (Click to see full
        instructions)
      U3L08 - drawSquareWithParam_instruction: |
        Use drawSquare() to recreate the
        image of both squares, this time using parameters. (Click to see full instructions)
      U3L08 - Enchantment Under the Sea_instruction: |
        You have been provided with
        starter code for an “Under the Sea” scene which includes three functions,
        one each for the starfish, sea grass, and fish. Create versions of these functions
        which accept parameters to allow you to add more variation to your scene.  The
        student worksheet provides more details and guidance.
      U3L08 - fish_instruction: |
        Add a parameter to drawFish that changes the size
        of the fish drawn. (Click to see full instructions)
      U3L08 - freePlay_instruction: |
        Keep adding to your image by making more calls
        to your new functions with parameters. (Click to see full instructions)
      U3L08 - individualCode_instruction: |
        Create the functions you were assigned
        as part of your digital scene. (Click to see full instructions)
      U3L08 - introUnderTheSea_instruction: |
        Add an extra fish, starfish, and piece
        of sea grass to the image. Look at, but don't change, the functions that
        create them. (Click to see full instructions)
      U3L08 - multiParamFish_instruction: |
        Add three parameters to your drawFish
        function to accept red, green and blue values to make your fish different
        colors. (Click to see full instructions)
      U3L08 - multipleLayersofParams_instruction: |
        Call drawPlusSign() to complete
        the image. (Click to see full instructions)
      U3L08 - paramsToStarfish_instruction: |
        Add a parameter to drawStarfish that
        changes the size of the starfish drawn. (Click to see full instructions)
      U3L08 - randomInput_instruction: |
        Use the randomNumber() blocks to test the
        functions you designed with random input. (Click to see full instructions)
      U3L08 - seaGrass_instruction: |
        Add a parameter to drawSeagrass that changes
        the size of the piece of seagrass drawn. (Click to see full instructions)
      U3L08 - squareTwoParams_instruction: |
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L08 - starFish_instruction: |
        Add an extra fish, starfish, and piece of sea
        grass to the image. Look at, but don't change, the functions that create
        them. (Click to see full instructions)
      U3L08 - triangleTwoParams_instruction: |
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L1 - Simulation - Template_instruction: |
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3L12 Chaser Template_instruction: This is a project template!
      U3L13 - Button with ID_instruction: |
        Drag a button out onto the screen and
        set its text to "Go forth!".  Run the program to make sure you can see the
        button.
      U3L13 - Debug Id plus logic problem_instruction: "The last problem was an example\nof syntax error.  App Lab did not understand which object it should be listening\nto for a \"click\" event so it showed an error message in the console to let\nyou know.  Another kind of error is a logical error - the program is valid,\nbut it's not doing what you want it to do.\\r\n\\r\nThis program has 2 errors.\nA (tricky) syntax error and logical error.  Find them, fix them, and make\nthe program work as expected."
      U3L13 - Debug Id Problem_instruction: |
        Improve the button by choosing a descriptive
        and meaningful ID. (Click to see full instructions)
      U3L13 - Debugging 1_instruction: |
        Debug the program by verifying your IDs are
        being referenced properly. (Click to see full instructions)
      U3L13 - Debugging 2_instruction: |
        Debug the program by properly ordering your
        button commands and event handlers. (Click to see full instructions)
      U3L13 - Debugging 3_instruction: |
        Debug the program by fixing the logical error
        within the program. (Click to see full instructions)
      U3L13 - Project_instruction: |
        Create your multi-screen app. (Click to see full
        instructions.)
      U3L13 - Turtle Driver Project_instruction: |
        Create a "turtle driver" that
        includes buttons to move the turtle forward and turn it left and right. (Click
        to see full instructions)
      U3L13 - Turtle move with button_instruction: |
        Add a button that moves the turtle
        when clicked.  (Click to see full instructions)
      U3L13 eventsDetails_instruction: |
        Add an event handler to the button to move
        the turtle forward. (Click to see full instructions)
      U3L14 - Assigning Random Value_instruction: |
        Write a program that simulates
        the rolling of two dice and reports their individual values as well as the
        sum. (click to see full instructions)
      U3L14 - concatenate simple_instruction: |
        Modify the write statement on line
        3 to combine text and variables together to make the app display a single
        line of text that shows the player's lives and score. (click to see full
        instructions)
      U3L14 - Mini Calculator embed_instruction: |
        You will be prompted for two numbers,
        one right after the other.  See what happens.  Enter different numbers until
        you get the idea.
      U3L14 - moving memory challenge1_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge2_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge3_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge4_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge5_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge6_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - Unfortunate Events Free Play_instruction: |
        Follow the "Unfortunate
        Events" Worksheet and enter your code here to experiment.  We've pre-loaded
        the code you need to start.
      U3L14 - User Input Division calculator_instruction: |
        Write a program that acts
        as a simple calculator. (click to see full instructions)
      U3L14 - Variable ReAssignment pt2_instruction: |
        Trace the code and predict
        what you think will be printed to the console. Then add a console.log statement
        at the end of the program to see the last value of someNum to see if your
        full prediction is correct. (click to see full Instructions)
      U3L15 - add code to make count down work_instruction: |
        Write code to make the
        down arrow work as expected. (Click to see full instructions)
      U3L15 - Add reset button to UpDown app_instruction: |
        Add code so that clicking
        the start over button will reset the game and send you back to the main screen.
        (Click to see full instructions)
      U3L15 - clicker update score_instruction: |
        Add code to update the score when
        the apple is clicked. (Click to see full instructions)
      U3L15 - count upDown bug forget to set text_instruction: |
        Find the bug in the
        program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug logic error wrong update_instruction: |
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug var not created globally_instruction: |
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - Debug forget to update var on reset in UpDown app_instruction: |
        Run
        the app, and click the up or down button until you get to the gameOverScreen.
        Click 'Start Over' and try the app again. Find and fix the issue in the
        code. (Click to see full instructions)
      U3L15 - Debug if never triggers in UpDown app_instruction: |
        Run the app and
        use the up and down arrows to try to hit the gameOverScreen. You can't! Find
        and fix the issue in the code. (Click to see full instructions)
      U3L15 - Debugging Simple If-statements =v==_instruction: |
        Run the app, and
        click the up button. Then restart and run it again, and click the down button.
        Find and fix the issue in the code. (Click to see full instructions)
      U3L15 - DEMO up down count practice app_instruction: |
        Try out the demo app
        (Click to see full instructions)
      U3L15 - global var example count up_instruction: |
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L15 - mini clicker update score_instruction: |
        Add code to update the score
        when the apple is clicked. (Click to see full instructions)
      U3L15 - practice with setText_instruction: |
        Use setText to complete the click
        event handler for the down arrow. (Click to see full instructions)
      U3L15 - Simple If-statements in UpDown App_instruction: |
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L15 - variable scoping problem debugging_instruction: |
        See if you can figure
        out why the code is no longer working. (Click to see full instructions)
      U3L15 click add lives_instruction: |
        Add lives to the clicker game that decrement
        by 1 when the background image is clicked (Click to see full instructions)
      U3L15 full clicker app_instruction: |
        Complete your clicker game! (Click to
        see full instructions)
      U3L16 - challenge say hi app_instruction: |
        Write a greeting to the user when
        they hit 'enter' in the text input, using the 'change' event. (Click to
        see full instructions)
      U3L16 - chaserApp_instruction: |
        Create your own "Chaser Game." (Click to
        see full instructions)
      U3L16 - chooseImages_instruction: |
        Replace the image in your application with
        one of your own. (Click to see full instructions)
      U3L16 - doubleQuotes_instruction: |
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - hideAndShow_instruction: |
        Introducing textInput, getText and write.  First
        run the starter code several times.  Try to change what's written to the
        screen when the button is clicked. Then use getText to write to the screen
        what the user entered in the text box. GIF: U3L16 - useGetText.gif
      U3L16 - hideAndShowPractice_instruction: |
        You are given some starting code
        that puts an image and two buttons on the screen.  The image is initially
        hidden. Add two new event handlers: one for each button, that when clicked
        hide and show the image.
      U3L16 - image and text labels_instruction: |
        Introducing the setPosition command!  Replace
        the moveTo in the button-click event handler to use setPosition to move the
        button itself to a random location when it's clicked.
      U3L16 - images and text labels_instruction: |
        Introducing objects other than
        buttons! - textLabels and images.  First try replacing your button with a
        textLabel.  Will the text respond to events just like the button?  Try connecting
        an event handler to it.  We've started you out with code similar to the result
        of the last level, you can copy your code from that level into here if you
        prefer. 
      U3L16 - images_instruction: |
        Introducing Images.  Try replacing the textLabel
        with an image..  Will the image respond to events just like the button?  Try
        connecting an event handler to it.  We've started you out with code similar
        to the result of the last level, you can copy your code from that level into
        here if you prefer. 
      U3L16 - intro getText_instruction: |
        Add an event handler to the Submit button
        so that when the button is clicked it will display the name entered in the
        text box to the console.  Use getText to get the value out of the text box.
        (Click to see full instructions)
      U3L16 - introSetPosition_instruction: |
        Move the buttons to the bottom of the
        screen. (Click to see full instructions)
      U3L16 - introStrings_instruction: |
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - nameAgeTemplate_instruction: |
        Add an Text Input box for the name and
        age. (Click to see full instructions)
      U3L16 - newEventTypes_instruction: |
        Experiment with different event types and
        select the one that you think is best. (Click to see full instructions)
      U3L16 - outputWithTextArea_instruction: |
        Output a message to the 'textArea'
        (Click to see full instructions)
      U3L16 - projectTemplate_instruction: |
        Create your own "Chaser App". (Click
        to see full instructions)
      U3L16 - quick double click_instruction: |
        Mini-Project.  The Quick Double-Click
        game.  In this simple game an object (an image) moves around, or pops up randomly
        on the screen, as the user clicks it.  The goal of our game will be to try
        to double-click the object before it moves.  Part of the challenge (and fun)
        here is creating this app from scratch.  You can look back at your previous
        work for examples, but it's fun to create something from scratch, too.  Try
        it!  For more details see the Activity guide for this lesson.
      U3L16 - setPosition to move button_instruction: |
        Introducing the setPosition
        command! Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      U3L16 - setPositionMoveButton_instruction: Use setPositon to moveButton
      U3L16 - setupMoveToRandom_instruction: |
        Modify the code so that the turtle
        moves to a random screen location when the button is clicked. (Click to see
        full instructions)
      U3L16 - singleSetPosition_instruction: |
        Move the button to the middle of the
        screen. (Click to see full instructions)
      U3L16 - stringsVsNumbers_instruction: |
        Run the program to see how strings and
        numbers behave with different arithmetic operators. (Click to see full instructions)
      U3L16 - text labels_instruction: |
        Use the textLabel command to replace the
        button in your program with a text label. (Click to see full instructions)
      U3L16 - textInput getText write_instruction: |
        Add an Text Input box for the
        name and age. (Click to see full instructions)
      U3L16 - toUpper_instruction: |
        Make the name of the user appear in uppercase
        (Click to see full instructions)
      U3L16 - use images_instruction: |
        Use the image command to replace the text
        label in your program with an image. (Click to see full instructions)
      U3L16 Mad Lib Clear Input_instruction: |
        Clear the user's previous text when
        the Play Again button is clicked (Click to see full instructions) 
      U3L16 Mad Lib Demo_instruction: 'Mad Libs Demo - Try it out!'
      U3L16 Mad Lib getText_instruction: |
        Before setting the text area with your
        Mad Libs outline, get the user's text and incorporate their responses. (Click
        to see full instructions) 
      U3L16 Mad Lib setText_instruction: |
        When the Next button is clicked, set the
        text area to have the main outline of your How-to Mad Libs (without the user's
        input). (Click to see full instructions) 
      U3L16 Mad Lib Student Setup_instruction: |
        Back to Mad Libs: To get started,
        set up the two screens for your Mad Libs app (Click to show full instructions)
      U3L16 Mad Lib toUpper_instruction: |
        Apply the toUpperCase and toLowerCase string
        functions to the user's text. (Click to see full instructions) 
      U3L17 - getAndSetKeyValue_instruction: |
        Create an image like app. (Click to
        see full instructions)
      U3L17 - getKeyValue_instruction: |
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introCallbacks_instruction: |
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introKeyValue_instruction: |
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - readKeyValue_instruction: |
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - setKeyValue_instruction: |
        Create and update your key value pairs using
        setKeyValue. (Click to see full instructions)
      U3L17 - twoSetKeyValue_instruction: |
        Run the program several times to observe
        how often setKeyValue commands arrive out of order. (Click to see full instructions)
      U3L18 comparison operators_instruction: |
        Use console.log to print out the different
        boolean expressions below to see what information they return. (Click to see
        full instructions)
      U3L18 comparison operators_for_video_instruction: |
        Use `console.log` to print
        out the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      U3L19 - Clicker Game Freeplay Area_instruction: |
        Use this App Lab area to improve
        your clicker game.  You should start by copy/pasting the code from your old
        game here.  We're showing a more full set of blocks in the toolbox - some
        of the things you might not have used yet.  Feel free to explore then and
        experiment if you want to.  Everything else you need should be shown.  Have
        fun!
      U3L19 - Debugging with consoleLog_instruction: |
        Add console.log() statements
        to find out the value of a and b after the first reassignment statement a
        = b; (Click to see full instructions)
      U3L19 - DEMO up down count practice app_instruction: |
        Try out the demo app
        (Click to see full instructions)
      U3L19 - do concatenate string with var_instruction: "We've given you a piece\nof code from the previous screen.  Try changing the value assigned to foo\nto see the string change. \\r\nDo this: \\r\n1. Try changing the value assigned\nto foo to see the string change. \\r\n2. By only modifying the lines of code\nthat were given to you, try to get the output to say: “The value of foo is:\n9.  And isn’t that fine.” \\r\n"
      U3L19 - fix the var name syntax error v2_instruction: |
        Fix the error and get
        it to print the value of both variables (Click to see full instructions)
      U3L19 - fix the var name syntax error_instruction: |
        Fix the error and get it
        to print the value of both variables (Click to see full instructions)
      U3L19 - global var example count up_instruction: |
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L19 - practice with setText_instruction: |
        Add another button that changes
        the text to the value of a new variable. (Click to see full instructions)
      U3L19 - Simple If-statements in UpDown App_instruction: |
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L19 - Target Clicker App_instruction: |
        Investigate the new elements of the
        'chaser-game'
      U3L19 - test reassignment of two vars_instruction: |
        Predict the value of a
        and b. Add console.log statements to find out the actual value of a and b.
        (Click for full instructions)
      U3L19 - three basic ops of variables_instruction: |
        Add another variable called
        "lives" and set the value to 3. Print the value of the variable to the console.
        (Click to see full instructions)
      U3L19 - try out console log_instruction: "Try out console.log.  Do this: replace\nthe statement write(\"foo is: \" + foo) with console.log(\"foo is: \" + foo).  Run\nthe program and you should see the output show up in the console area below\nthe workspace.  Then try adding a few more console.log statements.  Display\nsome text.  Make another variable and display that.  \\r\nThe app screen will\nbe blank -- that's the point.  With console.log you can test output behind\nthe scenes in a way the user cannot see.  \\r\n\\r\n\\r\nGIF: U3L19-useconsolelog.gif"
      U3L19 - up down count practice app_instruction: |
        Set up the down button to
        decrease the value of count by 1 each time it is clicked. (Click to see full
        instructions)
      U3L19 - updating variables pt1_instruction: |
        This app is only SLIGHTLY different
        from the previous one, but much more dynamic.  See if you can figure out how
        and why the count is going up.  Once you've figured it out then you should
        be able to DO THIS: add a button to the app that when clicked makes the count
        go down, and updates the label.  When you're done the app should work as
        shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - variable reassignment challenge pt2_instruction: |
        Make a prediction
        about the ending values of a, b, and c. Then use console.log to check your
        understanding (Click to see full instructions)
      U3L19 - variable reassignment part 1_instruction: |
        Predict the value of a and
        b. Add console.log statements to find out the actual value of a and b. (Click
        for full instructions)
      U3L19 - variable scope problem 2_instruction: |
        What is happening with foo?
        Play with the level to try to figure it out. (Click to see full instructions)
      U3L19 - variable scoping problem debugging_instruction: |
        See if you can figure
        out why the code is no longer work. (Click to see full instructions)
      U3L19 - write var and string with same name v2_instruction: |
        Fix the code so
        that the values of both variables print to the console. (Click to see full
        instructions)
      U3L19 - write var and string with same name_instruction: |
        Fix the code so that
        the value of both variables prints to the console. (Click to see full instructions)
      U3L2 Using Simple Commands (no tooltips)_instruction: |
        Draw a 1x1 square above
        and to the left of the turtle's starting position. Click to see full instructions.
      U3L2 Using Simple Commands_instruction: |
        Draw a 1x1 square above and to the
        left of the turtle's starting position. Click to see full instructions.
      U3L23 Chatbot Conditionals 1_instruction: |
        Add if, else if, and else statements
        to detect the movie genres Comedy, Romance, Action, and Horror. (Click to
        see full instructions)
      U3L23 Chatbot Intro 1a_instruction: |
        Store the user's input inside a variable
        and log it to the console.
      U3L23 Chatbot Intro 2_instruction: |
        Use string concatenation to store the user's
        input and assistant's answer into the conversation variable using the format
        "User: <input><bot name>: <default response>" . Log the conversation to
        the console.
      U3L23 Chatbot Intro 2a_instruction: |
        Display the conversation onto the "text_area"
        element. Optional: clear the user's input after every "change" event.
      U3L23 Chatbot Intro 3_instruction: |
        Add newline characters "\
        " to separate
        the user's input and the computer's response.
      U3L23 Chatbot Intro 4_instruction: |
        Use this level to make your chatbot look
        and work better!
      U3L23 Chatbot Intro_instruction: |
        Choose a specialization topic for your digital
        assistant. Create a basic digital assistant that takes the user's input and
        displays back a default response.
      U3L23 Digital Assistant 1_instruction: |
        Set the text_area element to display
        the user's input from the text_input element.
      U3L23 Digital Assistant 2_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 3_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 4_instruction: |
        Display the user's input and the digital
        assistant's response on different lines.
      U3L23 Digital Assistant 5_instruction: |
        Start the user's command with the
        phrase "User:" and the digital assistant's response with the phrase "Bot:"
      U3L23 Digital Assistant 6_instruction: |
        When the user hits Run, display the
        text "I'm a generic digital assistant. Ask me anything!"
      U3L24 Basic String Parsing 1_instruction: |
        Use the function "userInput.indexOf(<food>)"
        to check if the strings "pizza" or "soup" are anywhere in the user's
        response.
      U3L24 Chatbot Basic Conditionals_instruction: |
        Check out the project description
        for instructions. (Click to see full instructions.)
      U3L24 Chatbot Conditionals 2_instruction: |
        Adjust the "if" block to make
        the bot respond "I don't know that color." if the user types anything besides
        "blue"
      U3L24 Chatbot Conditionals 3_instruction: |
        Adjust the "if/else" block to
        make the bot respond to the colors blue, red, and green, and to two additional
        colors.
      U3L24 Chatbot Keyword Record_instruction: |
        Use the next level to record your
        digital assistant's keywords/phrases.
      U3L24 Chatbot Nested Conditionals_instruction: |
        Add a chained conditional with
        at least 3 "else if" statements to your personal assistant.
      U3L24 introIncludes_instruction: |
        Practice using the includes command. (Click
        to see full instructions)
      U3L24 Nested Conditionals 1_instruction: |
        Change all of the boolean expressions
        to use includes instead of ==. (Click to see full instructions)
      U3L24 Nested Conditionals 2_instruction: |
        Nest your movie genre if statements
        inside the if statements to check for a ? in the input. 
      U3L24 Nested Conditionals Bugs 2_instruction: |
        Fix the problem with the code
        so that all the conditions can be reached. (Click to see full instructions)
      U3L24 Nested Conditionals Bugs 3_instruction: |
        Fix the bugs that still exist
        in this program. Prove that the program works correctly.
      U3L24 Nested Conditionals Bugs_instruction: |
        Expose the bugs in this problem
        by typing inputs into the user-input box. Track which inputs cause unexpected
        outputs.
      U3L25 - drag out key event_instruction: |
        Set up an event handler to respond
        to keypress events, and display event.key in the console. Hit keys on the
        keyboard to see what happens. (Click to see full instructions)
      U3L25 - play sound when up key_instruction: |
        Change the code so the sound will
        only play when the up arrow is pressed. (Click to see full instructions)
      U3L25 Chatbot Strings_instruction: |
        1. Adjust your digital assistant to evaluate
        inputs the same way whether the inputs are capitalized or lowercase. 2. If
        a user asks "What is <phrase>?", where <phrase> is an input your digital
        assistant does not recognize, make your digital assistant respond "I don't
        know what <phrase> is."
      U3L25 String Parsing 1_instruction: |
        Given the string "Wisdom begins with
        wonder." what is the index of the following characters W, t, w, ., d, and
        k? Confirm your expectation using the string.indexOf() function.
      U3L25 String Parsing 2_instruction: |
        Use str.length to find the length of the
        strings “Hello World”, “Computer science rocks!", and “I promise to do my
        homework every day.”
      U3L25 String Parsing 3_instruction: |
        Write a password length checker that writes
        “yes” to the console if a string has a length greater than 10, or “no” if
        it is less than or equal to 10.  Test your function using two strings, one
        that will satisfy each conditional option.
      U3L25 String Parsing 4_instruction: |
        You are given the string "Wisdom begins
        with wonder." Use the string.substring(begin, end) function to print "begin"
        and "nder" to the console.
      U3L25 String Parsing 5_instruction: "Fill in the function, findBeginNder()\nto get the strings \"begin\" and \"nder\" from a sentence no matter where\nin the sentence they exist.\\r\nPrint the strings and their index to the console.\n"
      U3L25 String Parsing 6_instruction: |
        Write a function that takes a name (first
        last) and reorders it (last, first).
      U3L25 String Parsing 7_instruction: |
        You are given the string “The earth has
        music for those who listen.” Manipulate it using the functions str.toUpperCase()
        and str.toLowerCase().
      U3L26 AND operator_instruction: |
        Update the genre and rating if statements
        to give only one movie suggestion at a time. (Click to see full instructions)
      U3L26 Chatbot Compound Conditionals_instruction: |
        Update your digital assistant
        to include at least one each of AND, OR, and NOT
      U3L26 Chatbot Final_instruction: |
        Update your digital assistant to include
        at least one each of AND, OR, and NOT
      U3L26 Compound Logic_instruction: |
        Write a conditional statement that detects
        if a command contains all the phrases "2000" "animated" and "G-rated."
        If all these phrases are detected, make Movie Bot respond "The top grossing
        animated and G-rated film in the 2000 decade was Finding Nemo."
      U3L26 NOT operator_instruction: |
        Write a conditional statement that detects
        if a command does not contain the phrase "bad." If "bad" is not detected,
        make Movie Bot respond normally. Otherwise, make Movie Bot respond "Sorry,
        I don't know about bad movies." 
      U3L26 OR operator_instruction: |
        Update the if statement to use an OR to check
        for a "?" as well as who, what, where, when, why, how in the user input.
        (Click to see full instructions)
      U3L27 Chatbot Final_instruction: |
        Make your digital assistant awesome and when
        you are finished, ask one of your classmates to test it for you using the
        activity guide. As you add features to your digital assistant, track them
        on the next level.
      U3L2_Turtle3by3Grid_instruction: |
        Draw a 3x3 grid to the front and right of
        the turtle as efficiently as possible. The turtle should end at its original
        location, facing its original direction. (Click to see full instructions)
      U3L2_TurtleSquare_right_instruction: |
        Draw a square to the front and to the
        right of the starting location. (Click to show full instructions)
      U4 - add createRecord to contacts App_instruction: |
        Add code to your contacts
        app so that newly-added contacts are saved in a table. (Click to see full
        instructions)
      U4 - Add Row By Hand_instruction: |
        Add a new record to your table in the Data
        Viewer. (Click to see full instructions)
      U4 - Charts - drawChartFromRecords 1_instruction: |
        Use the drawChartFromRecords
        block to create a scatter plot from the table in the database. (Click to see
        full instructions)
      U4 - Charts - drawChartFromRecords Options 1_instruction: |
        Add a title to your
        chart and change the colors of your lines using the options parameter of drawChartFromRecords.
        (Click to see full instructions)
      U4 - Charts - drawChartFromRecords Options 2_instruction: |
        Look through the
        drawChartFromRecords API and choose some more options to customize. (Click
        to see full instructions)
      U4 - Charts - drawChartsFromRecords 1_instruction: |
        Add screen element, pull
        out drawCharts block, run the program!
      U4 - Charts - Export Data_instruction: |
        Export the data from the “ages” table
        as a CSV file, then remix this app and import the CSV file. (Click to see
        full instructions)
      U4 - Charts - Import Data 1_instruction: |
        Download the CSV file we’ve provided,
        and then use the data viewer to import the data from the file into the “mytable”
        table. (Click to see full instructions)
      U4 - Charts - Import Data 2_instruction: |
        Call readRecords on “mytable” and
        print each record to the console. (Click to see full instructions)
      U4 - Charts - Line Chart 1_instruction: |
        Create a line chart showing the change
        in popularity of “#tbt” over time. (Click to see full instructions)
      U4 - Charts - Line Chart 2_instruction: |
        Add a second line to your chart to
        show the change in popularity of both “#tbt” and “#nofilter” at the same time.
        (Click to see full instructions)
      U4 - Charts - Line Chart Template_instruction: This is a template.
      U4 - Charts - Remixing Apps with Data_instruction: |
        Run this app and see what
        it prints to the console. Then remix the app and run the remixed version to
        see what happened to the data. (Click to see full instructions)
      U4 - Charts - Scatter Chart_instruction: |
        Create a scatter plot of the “rottenTomatoes”
        table, using the new table and column names. (Click to see full instructions)
      U4 - CreateRecord - 1_instruction: |
        Add a createRecord command and run the
        program. (Click to see full instructions)
      U4 - CreateRecord - 2.5_instruction: |
        Change the table name in createRecord
        then check the Data Viewer to see the new table. (Click to see  full instructions)
      U4 - CreateRecord - 2_instruction: |
        Change the name from "Alice" to something
        else in the createRecord command.  Run the program and use the Data Viewer
        to see the changes to your table. (Click to see full instructions)
      U4 - CreateRecord - 3_instruction: |
        Use createRecord to add the song object
        as a record to a table. (Click to see full instructions)
      U4 - CreateRecord - 4_instruction: |
        Run the program. Verify the song object
        was added to the database. Note the callback function now displays the copy
        of the record sent back back by the database. (Click to see full instructions)
      U4 - CreateRecord - 5_instruction: |
        Add a property to the JavaScript object,
        then run the program.  View the data table and see how changing the object
        affects the data table. (Click to see full instructions)
      U4 - debug column names are case sensitive_instruction: |
        Change song.title
        to song.Title (capital T).  And run the program.  Check the data table  (Click
        to see full instructions)
      U4 - deleteRecords 0_instruction: |
        Use the deleteRecord command with default
        values. Verify the record was deleted. (Click for full instructions).
      U4 - deleteRecords 1_instruction: |
        Find the id of "Little Bunny Foo Foo"
        in the data table "mySongs".  Use the deleteRecord command to delete it.  See
        what happens when you try to delete an ID a second time. (Click for full Instructions).
      U4 - deleteRecords 2 delete object_instruction: |
        Use the song object to delete
        multiple objects in the database by changing only the "id" property. (Click
        for full Instructions).
      U4 - deleteRecords 2_instruction: |
        Using the data viewer, find the id of a
        a record you want to delete. Use the deleteRecord command to delete it. (Click
        for full instructions).
      U4 - Edit Data Table by Hand_instruction: |
        View the data table and click edit
        next to each row.  Add the artists names for each song by hand. (Click to
        see full instructions)
      U4 - Exploring Data Tools - Template_instruction: |
        Use createRecord to add
        the song object as a record to a table. (Click to see full instructions)
      U4 - fix contacts by hand in data table_instruction: |
        Use the data viewer to
        add rows to the data table.  Add the original hard-coded contacts from your
        app to the database. (Click to see full instructions)
      U4 - last stage test adding contcts_instruction: |
        Confirm that new contacts
        you add are saved to the database.  Verify that after restarting your app,
        the contacts you added no longer show in the app, but still exist in the database.
        (Click to see full instructions)
      U4 - Objects - accessingPropertiesInArray_instruction: |
        Access the properties
        of the objects stored in an array. (Click to see full instructions)
      U4 - Objects - arraysOfObjects_instruction: |
        Create an array called "students"
        and add all 5 student objects to the array. (Click to see full instructions)
      U4 - Objects - createContactObject_instruction: |
        Construct a new object from
        the user inputs, and append it to your array. (Click to see full instructions)
      U4 - Objects - createContactsData_instruction: |
        Add values to the three contact
        objects provided in the starter code. (Click to see full instructions)
      U4 - Objects - createDotNotation_instruction: |
        Create a student Object yourself.
        Add properties to your object one at a time using dot notation. (Click to
        see full instructions)
      U4 - Objects - createObject_instruction: |
        Create an object with at least 3
        properties and display it in the Debug Console. (Click to see full instructions)
        
      U4 - Objects - dotNotation_instruction: |
        Use dot notation to display individual
        properties of the object. (Click to see full instructions)
      U4 - Objects - eventHandlersToSwitchScreen_instruction: |
        Attach event handlers
        to the "Add Contact" and "Go Back" buttons that allow the user to switch
        screens. (Click to see full instructions)
      U4 - Objects - eventParameter_instruction: |
        Trigger both the keyboard and mouse
        event and examine the event objects displayed in the console. Why might an
        object be the best way to store this information? (Click to see full instructions)
      U4 - Objects - exemplarContactsApp_instruction: |
        Use the Contacts app and then
        add a contact of your own. (Click to see full instructions)
      U4 - Objects - loopingArray_instruction: |
        Loop over your array of students
        and print the name of every students. (Click to see full instructions)
      U4 - Objects - loopingArray2_instruction: |
        Loop over your array of students
        and print the name and grade of every student. (Click to see full instructions)
      U4 - Objects - loopingCompoundConditions_instruction: |
        Loop over the array
        of students and display the information of students who are present and in
        the 11th grade. (Click to see full instructions)
      U4 - Objects - loopingConditions_instruction: |
        Loop over your array of student
        objects and display the names of every student who is present in class. (Click
        to see full instructions)
      U4 - Objects - pullValues_instruction: |
        Create an event handler for the "Save
        Contact" button that displays the contents of the 4 text input fields in
        the console. (Click to see full instructions)
      U4 - Objects - readStarterCode_instruction: |
        Familiarize yourself with the
        starter code and UI elements provided. (Click to see full instructions)
      U4 - Objects - resetIndexAndShow_instruction: |
        Add code to your event handler
        for the "Save Contact" button so that when a new contact is added, the inputs
        are cleared, the screen is switched, and the correct contact is shown. (Click
        to see full instructions)
      U4 - Objects - showContact1_instruction: |
        Add code to the showCurrentContact
        function to show the name of the contact stored at the currentIndex of your
        array. (Click to see full instructions)
      U4 - Objects - showContact2_instruction: |
        Add the phone number and birthday
        text to your text area. (Click to see full instructions)
      U4 - Objects - showContact3_instruction: |
        Display the image information for
        each contact. (Click to see full instructions)
      U4 - Objects - showSampleImage_instruction: |
        Attach an event handler to the
        image URL text input so that the user can confirm their image will work as
        expected. (Click to see full instructions)
      U4 - Objects - writeWrap_instruction: |
        Use the wrap function to prevent currentIndex
        from leaving the bounds of your array. (Click to see full instructions)
      U4 - Read Record - 1.2_instruction: "Place a console.log command below the\nreadRecords command. (Click to see full instructions)\\r\n"
      U4 - Read Record - 1.3_instruction: "Add a console.log command inside the callback\nfunction. (Click to see full instructions)\\r\n"
      U4 - Read Record - 1_instruction: "Use console.log to display the records returned\nby a call to readRecords. (Click to see full instructions)\\r\n"
      U4 - Read Record - 2_instruction: "Change the table name so that the records\nare read from the new table. (Click to see full instructions)\\r\n"
      U4 - Read Record - 3_instruction: "Change the name of the table in a readRecords\ncommand to read from a table that does not exist. (Click to see full instructions)\\r\n"
      U4 - Read Record - 4.1_instruction: "Use indexes and dot notation to reference\nvalues in the response from the database. (Click to see full instructions)\\r\n"
      U4 - Read Record - 4_instruction: "Print out each record return from the readRecords\ncall individually. (Click to see full instructions)\\r\n"
      U4 - Read Record - 5_instruction: "Using a for loop, display the title of each\nmovie in your database. (Click to see full instructions)\\r\n"
      U4 - Read Record - part 1 - template_instruction: "Use console.log to display\nthe records returned by a call to readRecords. (Click to see full instructions)\\r\n"
      U4 - ReadRecords - Contacts App 1_instruction: |
        Use readRecords to copy the
        data in your database into your "contacts" global variable and call showCurrentContact.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 2_instruction: |
        Create a function called refreshLocalData.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 3_instruction: |
        Add a call to "refreshLocalData"
        to the callback function of the createRecord you use to add a new contact
        to your database. (Click to see full instructions)
      U4 - ReadRecords - Contacts App 4_instruction: |
        Create a "Delete" button.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 5 make delete work_instruction: |
        Create an
        event handler for the "Delete" button you created. (Click to see full instructions)
      U4L02 - Objects - createObject_instruction: |
        Create an object with at least
        5 values including at least one string and one number. (Click to see full
        instructions) 
      U4L02 - Objects - eventParameter_instruction: |
        Trigger both the keyboard and
        mouse event and examine the event objects displayed in the console. Why might
        an object be the best way to store this information? (Click to see full instructions)
      U4L02 - Objects - Template1_instruction: Template
      U4L06 Data Storage 1_instruction: "Fill in your name instead of \"Enter Your\nName\", run the app and click the button. Run it multiple times with different\nnames! Watch the console and use the ‘View Data” button to see how the table\nis updated. As you play around make sure you can explain the purpose of each\nof the circled parts of the diagram.\\r\n\\r\n"
      U4L06 Data Storage 2_instruction: "The app is a continuation of the previous\none we started. Add a text label to collect the users name and use that as\nthe data input for the record.\\r\n\\r\nRun the app and click the button multiple\ntimes and see what happens. Is there a problem you notice? "
      U4L06 Data Storage 3_instruction: |
        We want to improve the user experience.
        Once they have submitted their data for storage, it would be nice to clear
        the textbox.  Update your app to clear the textbox after the data is stored.
      U4L06 Data Storage 4_instruction: |
        Add a label and drop down box, to your app
        and save the data to your JSON object and add it to your table. Make sure
        to reset the dropdown after the data is stored.
      U4L06 Data Storage 5_instruction: |
        Add a couple radio buttons or checkboxes
        to our app. Then find a way to collect the data from those. 
      U4L06 Data Storage 6_instruction: |2
         Use one of the getTime() and getUserId()
        blocks to collect additional data. 
      U4L06 Data Storage 7_instruction: |
        Add a second screen to the sample app we
        have been building to capture an image from a user. Return to screen 1 after
        the JSON object has been stored in the table.
      U4L15 Read Data 1_instruction: |
        Run the level and see what happens. Then edit
        the code to make it print a different column of information.
      U4L15 Read Data 2_instruction: "Student should create a sentence which puts\ntogether all the pieces from a record.\\r\n\\r\n<<Name>> is <<Age>> years old\nand like <<Food>>"
      U4L15 Read Data 3_instruction: "Print the sentence using the first JSON object\nin the array\\r\n\\r\n"
      U4L15 Read Data 4_instruction: "\\r\nUse a random record from the list of records\nto display your sentence."
      U6 - Final Project - Project Level_instruction: |
        Build your final project here.
        (Click to see full instructions)
      U6 - updateRecord - Callback Success Parameter_instruction: |
        Add an if-else
        block inside the callback function for updateRecord. (Click to see full instructions)
      U6 - updateRecord - Contacts - Edit event handler_instruction: |
        Write event
        handlers for the Edit Contacts UI elements. (Click to see full instructions)
      U6 - updateRecord - Contacts - Edit UI_instruction: |
        Set up the UI elements
        needed to edit contacts. (Click to see full instructions)
      U6 - updateRecord - Contacts - Save edited contact_instruction: |
        Use updateRecord
        to store the user's edits in the database. (Click to see full instructions)
      U6 - updateRecord - Default Block_instruction: |
        Use updateRecord to change
        the record for "Eye of the Tiger." (Click to see full instructions)
      U6 - updateRecord - Update Nonexistent Record_instruction: |
        Force updateRecord
        to fail by changing the ID of songToUpdate. (Click to see full instructions)
      Underground Avoiding Lava_instruction: 'Il y a de la lave sous certains de ces blocs, que vous devrez recouvrir pour pouvoir avancer. Pour cela, il faut utiliser une commande "si". Ajoutez une commande "avancer" au bon endroit pour miner ces blocs.'
      Underground If Statements_instruction: 'Ça commence à se corser : minez 3 blocs de redstone sans tomber dans la lave. Utilisez une commande "si" pour placer de la pierre taillée sur les blocs de lave que vous rencontrez.'
      Underground Iron_instruction: "Conseil d'ami : évitez de marcher dans la lave en fusion. Placez des blocs de pierre taillée pour créer un pont, puis minez au moins deux des blocs de fer."
      Underground Mine in a Circle_instruction: "Trouvez un moyen d'extraire 5 blocs de diamant et 7 de redstone ! Essayez d'utiliser une commande de répétition dans une commande de répétition pour marcher en carré."
      Underground Mining Coal_instruction: Les ressources les plus précieuses sont en sous-sol, mais il fait sombre là-dessous. Placez au moins 2 torches et minez au moins 2 blocs de charbon.
      Underground Test Level_instruction: "Récolte l'ensemble des minéraux !"
      Vigenere_instruction: Test
      XML Scratchpad_instruction: Using this test level to grab xml for unit tests
