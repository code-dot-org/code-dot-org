fr:
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Bienvenue à ta première heure de code! Plongeons dans ton premier avant-goût de la programmation.
      2:
        image: notes/hoc1_2.jpg
        text: Nous allons utiliser Blockly, un langage de programmation visuel où tu déplaces des blocs pour écrire le code.
      3:
        image: notes/hoc1_3.jpg
        text: Généralement, on écrit le code, mais Blockly est un langage visuel. Chaque bloc correspond à une ligne de code.
      4:
        image: notes/hoc1_4.jpg
        text: "Vous allez apprendre les bases de l'informatique, des concepts utilisés partout : de la création d'applications jusqu'au contrôle du véhicule qui s'est posé sur Mars."
      5:
        image: notes/hoc1_5.jpg
        text: "Un programme est un ensemble d'instructions que ton ordinateur suit."
      6:
        image: notes/hoc1_6.jpg
        text: "Le but de ton premier programme est de guider un Angry Bird dans un labyrinthe afin d'attraper un Cochon Vert."
      7:
        image: notes/hoc1_7.jpg
        text: Sur le côté gauche il y a le labyrinthe où ton programme est exécuté. Les instructions pour chaque puzzle se trouvent sous le labyrinthe.
      8:
        image: notes/hoc1_8.jpg
        text: La boîte à outils du milieu a les commandes pour les Angry Birds. Tu vas utiliser celles-ci pour construire ton code.
      9:
        image: notes/hoc1_9.jpg
        text: Sur la droite il y a ton espace de travail où tu déposeras les blocs de la boîte à outils pour construire ton programme. Pour supprimer un bloc, déplace-le vers la poubelle dans le coin.
      10:
        image: notes/hoc1_10.jpg
        text: "Chaque bloc est une seule instruction. Si tu fais glisser un bloc « avancer » dans ton espace de travail et appuies sur « Exécuter le programme », l'oiseau se déplacera d'une case sur le labyrinthe."
      11:
        image: notes/hoc1_11.jpg
        text: "Pour faire plusieurs actions, vous pouvez faire glisser les blocs sur votre espace de travail et les attacher les uns aux autres. L'oiseau exécutera toutes les commandes de haut en bas."
      12:
        image: notes/hoc1_12.jpg
        text: 'Si tu exécutes un programme et tu veux le corriger et réessayer, appuie sur le bouton " Réessayer".'
      13:
        image: notes/hoc1_13.jpg
        text: Allons attraper ces cochons!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: "Salut, je suis JR ! Chaque équipe de voitures de course a besoin d'informaticiens pour gagner. Ils analysent les données de la voiture pour la faire aller plus vite."
      2:
        image: notes/stage5_2.jpg
        text: Dans ces puzzles, tu sera un artiste qui dessine une ligne derrière eux partout où ils vont.
      3:
        image: notes/stage5_3.jpg
        text: |-
          Ce bloc dit ''avances de 100 pixels." Les pixels sont en fait des points minuscules sur ton écran.
      4:
        image: notes/stage5_4.jpg
        text: Ce bloc dit « tourner à droite de 90 degrés. », cela fera tourner votre artiste du même angle que le bloc « tourner » dans les puzzles de labyrinthe.
      5:
        image: notes/stage5_5.jpg
        text: "Clique sur la flèche dans l'un de ces blocs pour changer le nombre de pas en avant ou de virages que l'artiste fera.  Joue un peu avec pour t'habituer à ces nouveaux blocs."
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: "Salut, je m'appelle Paola ! Dans ces puzzles, tu es un agriculteur qui doit complètement niveler son terrain avant de commencer à planter."
      2:
        image: notes/stage9_2.jpg
        text: "Tu dois l'aider à enlever tous les tas de terre et remplir tous les trous."
      3:
        image: notes/stage9_3.jpg
        text: "Les nouveaux blocs enlèvent une pelletée de terre d'une pile et remplissent un trou avec une pelletée de terre."
      4:
        image: notes/stage9_4.jpg
        text: Les tas et les trous sont de tailles différentes, donc tu devras dire à ton fermier combien de pelletées il doit utiliser.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: "Salut, je suis Katie! Une des choses les plus excitantes à propos de l'informatique est qu'un programme informatique peut être interactif."
      2:
        image: notes/flappy02.jpg
        text: "Chaque fois que quelqu'un clique ou appuie ou tape sur un ordinateur ou un téléphone, ça génère un EVENEMENT, et il y a un code qui décide quoi faire quand un EVENEMENT a lieu."
      3:
        image: notes/flappy03.jpg
        text: |-
          Par exemple, tu pourrais avoir un GESTIONNAIRE d'EVENEMENTS qui dit "quand la souris est cliquée, joue un son" 
      4:
        image: notes/flappy04.jpg
        text: "Tu as déjà entendu parler du jeu FlappyBird? En utilisant les gestionnaires d'Evénements, nous allons apprendre à programmer notre propre version personnalisée de FlappyBird!"
      5:
        image: notes/flappy05.jpg
        text: "Le code que tu vas écrire implique de glisser et déposer des blocs qui représentent des commandes pour l'ordinateur. Sous le capot, chacun de ces blocs est représenté par du code réel."
      6:
        image: notes/flappy06.jpg
        text: |-
          Si tu regardes au l'espace de travail, il y a quelques blocs verts qui sont déjà déposés - ce sont des "gestionnaires d'événements" 
      7:
        image: notes/flappy07.jpg
        text: |-
          Si tu veux que l'oiseau BATTE DES AILES quand tu CLIQUES sur la souris, tu peux faire ça en attachant le bloc " BATTRE DES AILES" au gestionnaire d'événements approprié, et maintenant dans ton jeu chaque fois que tu cliques sur la souris, l'oiseau va battre des ailes.
      8:
        image: notes/flappy08.jpg
        text: "Dans chaque puzzle de cette activité, nous allons introduire des nouveaux types d'événements sous la forme de blocs verts sur l'espace de travail, et tu peux décider quel est le bloc approprié à ajouter en réponse à ces événements."
      9:
        image: notes/flappy09.jpg
        text: 'Quand tu vois une flèche déroulante comme ça, cela veut dire que tu peux changer les paramètres - comme par exemple, quel son jouer quand flappy touche le sol.'
      10:
        image: notes/flappy10.jpg
        text: Dans le puzzle final, tu seras capable de créer ton propre jeu et de le partager avec tes amis. Amuse toi bien !
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: "Salut, je m'appelle Mark! Apprenons un peu plus sur les boucles. En utilisant les boucles, tu peux dire à un ordinateur de répéter chaque série d'actions une ou plusieurs fois, jusqu'à des milliers ou même des milliards de fois."
      2:
        image: notes/hoc2_2.jpg
        text: "Dans ce puzzle, nous voulons faire bouger l'oiseau vers l'avant de 5 places pour arriver au cochon."
      3:
        image: notes/hoc2_3.jpg
        text: 'Nous pouvons nous aider en utilisant le nouveau bloc "répéter".'
      4:
        image: notes/hoc2_4.jpg
        text: |-
          Au lieu d'utiliser 5 blocs de type "avancer"...
      5:
        image: notes/hoc2_5.jpg
        text: |-
          Nous pouvons mettre le bloc "avancer" à l'intérieur du bloc "répéter" et écrire un nombre dans le bloc pour lui dire combien de fois il doit répéter.
      6:
        image: notes/hoc2_6.jpg
        text: |-
          Et ceci est important: tu peux mettre plus d'une commande à l'intérieur d'un bloc " répéter " .
      7:
        image: notes/hoc2_7.jpg
        text: 'Amuse-toi en utilisant ton nouveau bloc "répéter"!'
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: |-
          Salut, je m'appelle Chris. Avant de me joindre à Miami Heat, j'ai été à Georgia Tech pour étudier l'informatique. Essayons notre nouveau bloc, le bloc "répéter jusqu'à".
      2:
        image: notes/hoc3_2.jpg
        text: "Et si on ne sait pas de quelle distance l'oiseau doit se déplacer pour arriver au cochon?"
      3:
        image: notes/hoc3_3.jpg
        text: |-
          Si nous mettons un bloc "avancer" à l'intérieur d'un bloc " répéter jusqu'à", l'oiseau va avancer JUSQU'À ce qu'il atteigne le cochon (ou qu'il se cogne sur un mur).
      4:
        image: notes/hoc3_4.jpg
        text: |-
          Et ceci est important: comme avant, on peut mettre plusieurs blocs à l'intérieur du bloc "répéter jusqu'à", et ils seront tous répétés.
    if:
      1:
        image: notes/hoc4_1.jpg
        text: |-
          Salut, je m'appelle Bill ! Nous allons apprendre un nouveau concept fondamental : les instructions "Si". C'est ainsi que les ordinateurs prennent des décisions.
      2:
        image: notes/hoc4_2.jpg
        text: |-
          Toi aussi tu utilises les instructions "si" chaque jour. Avant d'aller dehors chaque matin, tu te dis SI il pleut dehors, je dois porter mon imperméable.
      3:
        image: notes/hoc4_3.jpg
        text: "Nous pouvons dire au zombie d'aller vérifier SI il y a un chemin à gauche, et SI il en trouve un, il peut tourner dans cette direction."
      4:
        image: notes/hoc4_4.jpg
        text: |-
          Afin  d'écrire le code pour ceci, déposons un bloc "si" et mettons-y un bloc "tourner à gauche" à l'intérieur.
      5:
        image: notes/hoc4_5.jpg
        text: |-
          Maintenant, si nous mettons un bloc "avancer" au-dessus et englober le tout d'un bloc "répéter", chaque fois que le zombie bouge, il va vérifier si il y a un chemin à gaucher et tourner. La commande "répéter" est critique, pour vérifier si on peut tourner à chaque étape.
      6:
        image: notes/hoc4_6.jpg
        text: |-
          Les instructions "Si" sont vraiment importantes dans l'informatique. Un des premiers programmes que j'ai écrit était un jeu d'OXO, et il y avait une instruction Si qui disait SI l'autre personne est sur le point de gagner, bloque la case qui va le faire gagner.
      7:
        image: notes/hoc4_7.jpg
        text: 'Amuse-toi à utiliser le bloc "si"!'
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: "Salut, je m'appelle Saloni. J'utilise l'informatique pour aider à résoudre des problèmes en santé et médecine. Apprenons un peu sur le bloc « si sinon ». Il ressemble au bloc « si », mais il a une partie à la fin qui dit « sinon »."
      2:
        image: notes/hoc5_2.jpg
        text: |-
          Si je mets un bloc "avancer plus" dans l'emplacement nommé "faire" et un bloc "tourner à gauche" dans l'emplacement nommé "autre", le zombie choisira une de ces 2 options. SI il y a un chemin le zombie avancera, SINON (il n'y a donc pas de chemin) le zombie tournera à gauche.
      3:
        image: notes/hoc5_3.jpg
        text: |-
          Comme pour le bloc "si", nous pouvons utiliser des blocs "si sinon" à l'intérieur de blocs de "répétition", afin que le zombie continue à se déplacer et que le bloc "si sinon" permette de vérifier s'il y a un endroit vers lequel se tourner.
      4:
        image: notes/hoc5_4.jpg
        text: Maintenant, ramène ces zombies à leur place!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: "Une expressions si-sinon est une décision entre deux choses. Voyons comment nous pouvons utiliser les expressions si-sinon avec notre copain Scrat l'écureuil."
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: |-
          Ce bloc est identique au bloc "si", mais il comporte une partie supplémentaire nommée "sinon". Si l'on pose un bloc "avancer" dans la partie "faire" et un bloc "tourne à gauche" dans la partie "sinon", cela signifie que l'écureuil Scrat va avancer s'il a un chemin devant lui. S'il n'a pas de chemin devant lui, Scrat va tourner à gauche.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: |-
          Il s'agit de prendre une décision et de faire une des deux actions en fonction de cette décision. Et comme pour les blocs "si", vous pouvez utiliser des blocs "si-sinon" à l'intérieur des blocs "répéter".
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: "Maintenant, aidons Scrat l'écureuil à obtenir ce gland !"
    function:
      1:
        image: notes/stage13_1.jpg
        text: "Salut, je m'appelle Brina, une ingénieure à Instagram. Une fonction est un ensemble de lignes de code que vous souhaitez utiliser plusieurs fois. Ainsi, plutôt que de ré-écrire le même code plusieurs fois, vous pouvez simplement utiliser un bloc."
      2:
        image: notes/stage13_2.jpg
        text: Nous allons apprendre comment définir des fonctions. Les définitions de fonctions ont une étoile dans le coin. Le nom de la fonction est écrit sur la ligne du haut.
      3:
        image: notes/stage13_3.jpg
        text: |-
          Les blocs qui vont dans la définition nous disent ce que la fonction fait. Ainsi cette définition de fonction s'appelle "remplir 5 fois" et est composée d'un bloc "répéter" et d'un bloc "remplir.
      4:
        image: notes/stage13_4.jpg
        text: |-
          La définition se trouve sur l'espace de travail mais notre fermier ne démarrera pas la fonction tant que nous ne sortirons pas le bloc de fonction "remplir 5" de la catégorie fonctions.
      5:
        image: notes/stage13_5.jpg
        text: Amusons-nous avec les fonctions!
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: |-
          Hi, I'm Makinde! Let's learn about the "while block."
      2:
        image: notes/stage9_6.jpg
        text: |-
          Le bloc "tant que" exécute les actions qui se trouvent à l'intérieur de celui-ci TANT QUE la condition énoncée au dessus reste VRAIE.
      3:
        image: notes/stage9_7.jpg
        text: "Par exemple, si la fermière se tient sur une pile, elle continuera à enlever 1 pelletée TANT QU'il reste une pile sous elle."
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: "Salut, je m'appelle Trina, et je travaille pour Pixar. J'ai travaillé sur un tas de films, y compris Shrek."
      2:
        image: notes/stage11_2.jpg
        text: Ceci est notre nouvelle boucle « compteur ». Cette boucle répète des actions plusieurs fois, et vous pouvez légèrement changer les actions à chaque fois.
      3:
        image: notes/stage11_3.jpg
        text: "Dans cet exemple, notre boucle « compteur » dit « compter avec un compteur de 50 à 90 par pas de 10 » et à l'intérieur, nous avons notre bloc « dessiner un carré ». Déplace le bloc « compteur » de la section « Variables » à l'emplacement de « longueur »."
      4:
        image: notes/stage11_4.jpg
        text: "Cela signifie que notre artiste va dessiner un carré qui a des côtés de 50 pixels de longueur, puis y ajouter 10 et dessiner un carré de côté de 60 pixels de longueur. Puis il va continuer d'ajouter 10 et dessiner des carrés jusqu'à ce qu'il atteigne 90. Ainsi nous aurons des carrés de 50, 60, 70, 80 et 90."
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: "Salut, je m'appelle Janete, et je suis ingénieur chez Zynga."
      2:
        image: notes/stage15_2.jpg
        text: Que faudrait-il faire pour dessiner un ensemble de triangles de différentes tailles ?
      3:
        image: notes/stage15_3.jpg
        text: Nous pouvons écrire tout ce code à la main, ou bien utiliser une fonction avec des paramètres.
      4:
        image: notes/stage15_4.jpg
        text: "Pour ce faire, clique sur l'étoile bleue dans la définition de la fonction « dessiner un triangle ». Ensuite déplace le bloc « nom d'entrée » vers le bloc « entrée »."
      5:
        image: notes/stage15_5.jpg
        text: "Ensuite, si tu écris « longueur » à l'endroit où se trouve « x » et presse « ENTREE », cela créera, pour ta fonction, un paramètre d'entrée de la longueur."
      6:
        image: notes/stage15_6.jpg
        text: |-
          Clique ensuite sur l'étoile. Maintenant clique sur la catégorie variables et déplace le bloc "longueur" dans le bloc "avancer" de ta définition de fonction. Finalement, déplace le vieux bloc nombre à l'extérieur.
      7:
        image: notes/stage15_7.jpg
        text: |-
          Pour utiliser ta fonction avec des paramètres, clique sur la catégorie fonctions et déplace ta fonction "dessine un triangle de longueur" vers l'extérieur.
      8:
        image: notes/stage15_8.jpg
        text: Tu peux maintenant utiliser le bloc mathématique pour saisir différents nombres et dessiner des triangles de différentes tailles.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: "Félicitations! Avec le dernier puzzle que tu viens de résoudre, tu viens juste d'écrire un code qui dit à N'IMPORTE QUEL robot où trouver son chemin entre un labyrinthe sans ramifications ou un tunnel de n'importe quelle longueur, qu'il soit un zombie, un oiseau, un rover de Mars, ou même une voiture qui se conduit toute seule."
      2:
        image: notes/hoc6_2.jpg
        text: "Les concepts fondamentaux que tu as utilisés sont au coeur de chaque programme ou application que tu utiliseras. Nous avons appris les boucles Répéter, Répéter jusqu'à, ainsi que les énoncés Si et Si Sinon."
      3:
        image: notes/hoc6_3.jpg
        text: "Si tu as aimé ta première heure de code, visite code.org pour continuer ton éducation en informatique! Une fois que tu auras complété 20 heures de cours, tu auras maîtrisé les bases de la programmation, et tu pourras commencer à apprendre comment écrire des applications pour téléphones, des instructions de robot, des jeux...  C'est toi qui choisis."
      4:
        image: notes/hoc6_4.jpg
        text: "La technologie change tout ce que nous faisons et peu importe qu'on soit jeune ou pas: programmer est amusant, c'est un processus créatif, et n'importe qui peut l'apprendre !"
    20_wrapup:
      1:
        image: notes/bird.png
        text: Montrer les notes à venir bientôt !
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: "Bonjour, je suis Lyndsey. Je modélise, joue et écris mes propres applications. Utilisons du code pour rassembler Anna et Elsa tandis qu'elles explorent la magie et la beauté de la glace."
      2:
        image: notes/frozen1_2.jpg
        text: Tu vas créer des flocons de neige et des motifs en patinant, et créer un monde magique hivernal que tu pourras partager ensuite avec tes amis.
      3:
        image: notes/frozen1_3.jpg
        text: "Durant l'heure qui vient, tu vas appendre les bases du code. Habituellement la programmation est textuelle, mais nous allons utiliser Blocky, qui utilise des blocs que tu peux glisser et déposer pour écrire des programmes. C'est de cette façon que les étudiants apprennent les bases à l'université. Sous le capot, tu crées toujours code."
      4:
        image: notes/frozen1_4.jpg
        text: "Un programme est un ensemble d'instructions qui disent à une ordinateur quoi faire. Construisons un code, ou un programme, qui va aider Elsa à créer une simple ligne. Nous l'utiliserons plus tard pour créer des motifs plus complexes."
      5:
        image: notes/frozen1_5.jpg
        text: Ton écran est divié en trois parties. Sur la gauche, on trouve la surface de glace sur laquelle tu vas exécuter ton programme. Les instructions pour chaque niveau sont écrites juste en dessous de cette surface.
      6:
        image: notes/frozen1_6.jpg
        text: "La zone du milieu est la boîte à outils, et chacun de ces blocs est une action qu'Elsa et Anna peuvent faire."
      7:
        image: notes/frozen1_7.jpg
        text: |-
          L'espace blanc sur la droite est appelé l'espace de travail, et c'est ici que nous allons construire notre programme. Pour se déplacer autour de la surface de glace, tu vas utiliser le bloc "avancer".
      8:
        image: notes/frozen1_8.jpg
        text: |-
          Ici, le bloc "avancer' dit "avance de 100 pixels". Quand tu appuies sur "Run" que ce passe-t-il ? Elsa se déplace en avant sur une certaine distance sur l'écran, 100 pixels en fait ! Les pixels sont, en gros, de minuscules carrés sur ton écran d'ordinateur.
      9:
        image: notes/frozen1_9.jpg
        text: |-
          L'autre bloc que nous avons dans cette épreuve dit "tourne à droite de 90 degrés". Et quand nous utilisons ce bloc "Tourne à droite", cela fait tourner Elsa d'un certain angle. Tu peux jouer avec pour voir de combien tu veux qu'Elsa tourne. Cet angle est mesuré à partir du chemin qui se trouve en face d'Elsa. Ainsi, ceci est un tour à 90 degrés. Et ceci un tour à 120 degrés.
      10:
        image: notes/frozen1_10.jpg
        text: "N'oubliez pas, vous pouvez modifier le nombre de pixels et de degrés en cliquant sur les flèches sur le côté."
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: "Salut, je suis Paola ! Les ordinateurs sont vraiment bons pour faire des actions répétitives. Tu peux compter jusqu'à 10, 20 ou 100. Mais un ordinateur peut compter jusqu'à 1 milliard ou 1 billion. Il ne s'ennuiera pas et ça ne lui prendra que quelques secondes. Que ce soit pour compter, dessiner, ou faire n'importe quoi, les ordinateurs peuvent répéter des choses des centaines, ou même des milliards de fois."
      2:
        image: notes/frozen2_2.jpg
        text: "En programmation, nous appelons ceci une boucle. Une boucle est ce que l'on utilise pour répéter son code maintes et maintes fois. Pour l'épreuve suivante, ton but est d'aider Anna à créer un carré avec le bloc « Répéter »."
      3:
        image: notes/frozen2_3.jpg
        text: "Tous les blocs de code que tu places à l'intérieur du bloc « Répéter » seront répétés les uns après les autres, autant de fois que tu le souhaites."
      4:
        image: notes/frozen2_4.jpg
        text: |-
          Pour dessiner un carré, tu peux utiliser le bloc "avancer" et "tourner à droite" quatre fois. Mais la façon la plus simple est de dire à l'ordinateur "avance" et "tourne à droite de 90 degrés" une seule fois, et de lui dire ensuite de répéter ce groupe d'actions quatre fois. Pous cela, tu dois placer le bloc "avancer" et "tourner à droite" à l'intérieur d'un bloc "Répéter".
      5:
        image: notes/frozen2_5.jpg
        text: |-
          Souviens-toi, tu peux utiliser le nombre que tu veux dans le bloc "Répéter" , et cela va répéter l'intérieur du bloc autant de fois que tu as choisi.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: "Salut, je suis Chris Bosh. Je suis un joueur de basket-ball professionnel, et j'ai codé au lycée."
      2:
        image: notes/frozen3_2.jpg
        text: "Un des concepts les plus importants en informatique est la manière de définir des nouvelles commandes. La plupart des ordinateurs n'ont qu'une centaine de commande ou de mots. Et en fait, l'art et la magie consiste à définir tes propres nouveaux mots à partir de ces premières briques."
      3:
        image: notes/frozen3_3.jpg
        text: "Une fois que tu as appris à un ordinateur comment faire une action une fois en utilisant cette suite de commandes, tu peux donner un nom à cette action pour qu'elle soit plus facile à répéter ensuite. Quand tu définis ta propre commande et lui donne un nom, on appelle ça une fonction."
      4:
        image: notes/frozen3_4.jpg
        text: "Salut, je suis Jess. Lorsque tu programmeras avec des blocs, tu pourras utiliser des fonctions au lieu de reproduire un ensemble d'actions plusieurs fois. Un exemple de fonction est le code que tu as écrit pour faire un carré."
      5:
        image: notes/frozen3_5.jpg
        text: 'Tu peux définir ceci comme une fonction "créer un carré".'
      6:
        image: notes/frozen3_6.jpg
        text: Tu as maintenant un nouveau bloc que tu peux utiliser plusieurs fois pour créer plusieurs carrés.
      7:
        image: notes/frozen3_7.jpg
        text: "Beaucoup de formes simples peuvent être utilisées pour créer des motifs plus complexes. Dans l'épreuve suivante, le code que tu as écrit récemment pour faire un cercle est à ta disposition en tant que nouvelle fonction capable de faire des cercles de différentes tailles. Peux-tu l'utiliser pour aider Elsa à créer des motifs beaux et complexes dans la neige?"
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: Nous allons créer des jeux avec le Labo. Les bons jeux ont une histoire, et chaque histoire a des acteurs. Nous allons apprendre comment faire parler, bouger et intéragir des acteurs tels que des sorcières, des extra-terrestres, et animaux. À la fin de cette leçon, tu pourras créer un jeu à partir de rien et le partager avec tes amis.
      2:
        image: notes/playlab_intro_2.png
        text: "Votre écran se divise en trois parties. A la gauche, se trouve l'espace de jeu où le programme va s'exécuter. Les instructions pour chaque niveau sont écrites en dessous."
      3:
        image: notes/playlab_intro_3.png
        text: "La zone centrale est la boîte à outils, et chacun de ces blocs est un bout de code. L'espace sur la droite est appelé l'espace de travail et c'est ici que nous allons construire notre programme."
      4:
        image: notes/playlab_intro_4.png
        text: |-
          Pour commencer, tu devras relier tes blocs au bloc "lors du lancement". Tu peux relier plusieurs blocs ensemble en les glissant jusqu'à ce que tu voies la ligne jaune, et il s'emboiteront alors ensemble.
      5:
        image: notes/playlab_intro_5.png
        text: "Dans ce premier puzzle, notre acteur est un manchot et nous allons lui faire dire « Bonjour » en faisant glisser le bloc « dire », en l'accrochant au bloc « lors du lancement » , et en tapant « Bonjour ». Nous pouvons aussi faire bouger le manchot en utilisant les blocs « aller à droite » et « aller à gauche ». Une fois tes blocs en place, appuie sur « Démarrer » pour voir ce que tu as programmé."
      6:
        image: notes/playlab_intro_6.png
        text: Commençons, et à la fin tu seras capable de créer ton propre jeu avec toutes sortes de joueurs qui peuvent interagir, devenir content ou triste, gagner des points, ou jeter des boules de feu, ou même disparaître. tout dépend de toi et du jeu que tu souhaites faire.
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: "À présent, nous allons apprendre une chose que tous les programmeurs de jeu utilisent. On appelle ça des événements. Un événement dit à ton programme d'écouter lorsque quelque chose se produit. Quand cette chose arrive, il effectue une action."
      2:
        image: notes/playlab_events_2.png
        text: "Quelques exemples d'évènements sont l'écoute des clics de souris, une touche fléchée, ou une pression sur l'écran."
      3:
        image: notes/playlab_events_3.png
        text: |-
          Ici, nous allons faire en sorte que le robot de l'espace salue les terriens quand on clique sur lui. Nous lui dirons d'utiliser le bloc "quand tu es cliqué" et d'y attacher le bloc "dire". Quand le joueur clique sur le robot de l'espace, tout ce qui est attaché à cet évènement "quand tu es cliqué" sera exécuté. Qu'en dit ton extra-terrestre ?
      4:
        image: notes/playlab_events_4.png
        text: 'Il y a aussi des blocs "quand flèche ...". Si tu les relies à des blocs "se déplacer", tu peux commencer à déplacer tes acteurs vers le haut, le bas, la droite ou la gauche. Petit à petit, ton jeu devient plus interactif.'
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: |-
          Voici le bloc "répète à l'infini". Tout ce qui se trouve dans ce bloc sera effectué sans arrêt tout au long du jeu.
      2:
        image: notes/playlab_repeat_forever_2.png
        text: |-
          Si tu veux qu'un acteur fasse quelque chose de manière répétée, sans que le joueur ait à faire quoi que ce soit, nous allons placer cela dans le bloc "répète à l'infini".
      3:
        image: notes/playlab_repeat_forever_3.png
        text: "Dans la prochaine épreuve notre but est d'aider le magicien à patrouiller le long des frontières du royaume, à gauche et à droite en continu. En apprenant comment fonctionne les commandes de répétition, tu gagneras énormément de temps quand tu feras ton propre jeu."
    C1_artist_intro:
      1:
        image: notes/C1_artist_intro_1.png
        text: "Ce sont des blocs de dessin. Utilisez le bon bloc pour déplacer l'artiste là où il doit se rendre pour repasser les lignes grises."
      2:
        image: notes/C1_artist_intro_2.png
        text: "Ce sont des blocs de saut. Lorsque tu utilises ces blocs, ton artiste se déplace sans dessiner, alors utilise-les pour sauter jusqu'à la prochaine ligne grise."
    C1_bee_level_intro:
      1:
        image: notes/C1_bee_level_intro_1.png
        text: |-
          Abeilles ne sont-elles pas super cool ? Dans cette prochaine série d'énigmes, votre objectif est d'aider l'abeille a aller jusqu'aux fleurs et a prendre le nectar des fleurs puis le ramener jusqu'à la ruche des abeilles. Vous devrez utiliser les blocs "prendre le nectar" et « faire le miel » pour cet exercice.
      2:
        image: notes/C1_bee_level_intro_2.png
        text: "Chaque fleur possède un nombre différent de nectars: 1, 2, 3 ou plus. Nous connaissons le nombre de nectar dans les fleurs rouges par le petit nombre écrit dans le coin. Donc n'oubliez pas d'obtenir tout le nectar de la fleur avant d'avancer. En outre, chaque nid d'abeilles contient autant de miel que nécessaire : 1, 2, 3 ou plus. Donc n'oubliez pas de récolter autant de miel que le nid d'abeille peut contenir."
      3:
        image: notes/C1_bee_level_intro_3.png
        text: "Si vous êtes en mesure d'obtenir tout le nectar et faire tout le miel, vous avez réussi et vous passez au prochain niveau. Dans le cas contraire, vous devrez recommencer ce puzzle. Jouez un certain temps et vous allez voir ce qu'on ressent à « être (jeu de mot avec bee = abeille)» un programmeur !"
    C1_bee_loops:
      1:
        image: notes/C1_bee_loops_1.png
        text: "Une boucle est une répétition de l'activité. Donc, aller dans une ruche et l'inspecter, regarder un cadre, puis je le remettre, donc je répète cette même activité plusieurs fois. Il existe donc une boucle autour, qui fait la même activité plusieurs fois."
      2:
        image: notes/C1_bee_loops_2.png
        text: |-
          Dans ce niveau, nous voulons que l'abeille de récolte trois nectars de la fleur. Au lieu d'utiliser trois blocs "obtenir le nectar", vous allez utiliser le bloc de répéter pour obtenir nectar trois fois. Cliquez sur « Exécuter» et voir si vous avez juste. Sympa !
    C1_bigevent_unplugged:
      1:
        image: notes/C1_bigevent_unplugged_1.png
        text: "Cette leçon est appelé le grand événement. Il est tout au sujet de la façon dont nous pouvons contrôler nos programmes et de réellement changer la façon dont un programme fonctionne directement en utilisant les événements, comme la poussée d'un bouton ou un clic de souris."
      2:
        image: notes/C1_bigevent_unplugged_2.png
        text: "Pour cette leçon, vous allez contrôler une télécommande de papier. C'est comme un jeu vidéo réelles."
      3:
        image: notes/C1_bigevent_unplugged_3.png
        text: "Un événement est une action qui provoque quelque chose se passe. C'est comme quand vous cliquez sur le bouton sur une souris et charge une page Web. C'est un événement. Quand vous touchez votre écran sur une tablette pour faire défiler, c'est aussi un événement. Événements sont un excellent moyen de laisser l'utilisateur direct votre programme chaque fois qu'ils ont besoin ou que vous voulez."
      4:
        image: notes/C1_bigevent_unplugged_4.png
        text: "Nous devons anticiper. Nous nous sentons affamés et nous allons dans le réfrigérateur. Nous entendons le facteur venez il met notre courrier dans la boîte aux lettres et ensuite, nous allons obtenir notre courrier. Ceux type d'action qui sont comme les événements : pousser un bouton ou déplacer un joystick. Il existe quelque chose qui se passe nous déclenche une envie de faire quelque chose."
      5:
        image: notes/C1_bigevent_unplugged_5.png
        text: "Dans les jeux vidéo, il y a un événement appelé « Update » et il arrive 30 ou 60 fois par seconde. Pour les programmeurs de jeux vidéo c'est presque plus important comme un événement que les boutons ou le joystick."
      6:
        image: notes/C1_bigevent_unplugged_6.png
        text: |
          L'évènement principal qu'on attend, c'est que la case de mise à jour soit cochée. Ensuite on va vérifier la manette de jeu dans la case. 
          Donc on dit, "Est-ce que quelqu'un a poussé le bouton dans ce cadre? Oui ou non?"
          Sans les évènements, le joueur ne pourrait pas bouger, il ne pourrait pas sauter, il ne pourrait pas contrôer ce qui se passe. Le jeu vidéo ne pourrait rien animer.
    C1_building_foundation:
      1:
        image: notes/C1_building_foundation_1.jpg
        text: "Dans la sculpture de sable, il faut que tu saches que l'échec fait partie du programme. Mais si tu persistes, le jeu deviendra de mieux en mieux et de plus en plus excitant pour toi. La persistance, c'est la clé de ce jeu. Accroche-toi, tu vas adorer ça."
      2:
        image: notes/C1_building_foundation_2.jpg
        text: "Cette leçon s'appelle Comment Construire Une Fondation. Dans cette leçon, on va travailler sur une tâche qui est vraiment difficile. Tu vas devoir trouver une façon de construire une structure au moins aussi haute que l'une de ces tasses, et il faut qu'elle soit assez solide pour qu'elle puisse soutenir le poids d'un livre."
      3:
        image: notes/C1_building_foundation_3.jpg
        text: "Il est possible que souvent ta création ne marche pas. Tu vas sûrement passer par des moments où tu te sentiras frûstré(e) et où tu voudras laisser tomber. Il y aura peut-êre beaucoup de ces moments-là. Mais si tu continue d'essayer, si tu donnes et redonnes ton meilleur effort, alors c'est sûr que tu y arriveras bientôt."
      4:
        image: notes/C1_building_foundation_4.jpg
        text: "La persistance, c'est de s'accrocher au moment où on a vraiment envie de laisser tomber. Si tu veux créer quelque chose de nouveau et de différent, il va forcément y avoir beaucoup d'échecs sur ton chemin."
      5:
        image: notes/C1_building_foundation_5.jpg
        text: "Pour réussir à être persistant, il faut choisir de continuer et d'apprendre par ses erreurs au lieu de laisser tomber parce qu'on se sent frustré. La frustration, en fait, ça veut dire qu'il va se passer quelque chose de fantastique au prochain tournant. Donc, ne laisse pas tomber avant d'y arriver ! Youhou !"
    C1_getting_loopy:
      1:
        image: notes/C1_getting_loopy_1.png
        text: "Bonjour, je m'appelle Miral Kotb et je suis le créateur d'Illuminate. Dans mon travail, il y a quelque chose que nous utilisons pour les danses et pour les programmations de costumes. Et cette chose, c'est une boucle ! Les boucles servent àrépéter des évènements encore et encore."
      2:
        image: notes/C1_getting_loopy_2.png
        text: "Quand on répète quelque chose plusieurs fois, comme par exemple mes mouvements pour que le hula hoop continue de tourner, on fait ce qui s'appelle une boucle. Ceci est une boucle. Ceci est une boucle. Et ceci est une boucle."
      3:
        image: notes/C1_getting_loopy_3.png
        text: "Aujourd'hui, on va faire une boum. On va créer des boucles avec une nouvelle danse: l'itération. On va en apprendre plus sur les boucles en utilisant une danse. Tu vas apprendre une paire de pas faciles, et les répéter encore et encore pour compléter la danse."
      4:
        image: notes/C1_getting_loopy_4.png
        text: "Voici les pas que tu dois apprendre. Frappe dans tes mains. Mets tes mains derrière ta tête. Mets tes mains sur tes hanches. Lève ta main gauche. Lève ta main droite. C'est facile, non ? Tu vas découvrir que tu peux raccourcir tes instructions en mettant certains pas de danse en boucle."
      5:
        image: notes/C1_getting_loopy_5.png
        text: "On utilise vraiment des boucles dans notre danse. Les danseurs portent des ordinateurs, et ils sont tous sur le même réseau. Je pourrais mettre les lumières en boucle sur les mêmes danseurs encore et encore. Dans la boucle, je pourrais mettre une itération dans laquelle je dirais que je veux que les six danseurs passent en boucle encore et encore et ensuite, dans la boucle elle-même, je vais augmenter la vitesse de la lumière. Et tout ça se crée avec des boucles. Les boucles sont importantes dans la programmation parce qu'elles rendent notre travail plus simple et plus court."
    C1_happy_maps_unplugged:
      1:
        image: notes/C1_happy_maps_unplugged_1.png
        text: "Cette leçon s'appelle Les Joyeuses Cartes. Aujourd'hui nous allons aider notre petit copain poilu, Flurb, à arriver près de ses fruits."
      2:
        image: notes/C1_happy_maps_unplugged_2.png
        text: "Fais aller ton Flurb vers tes fruits. Pour cela, tu vas devoir comprendre de quel côté le Flurb doit aller et diriger ses flèches. Pour que le Flurb arrive à la pomme, dans quelle direction doit-il aller ? Pointe-le dans la bonne direction pour qu'il monte."
      3:
        image: notes/C1_happy_maps_unplugged_3.png
        text: "Pour qu'il y aille, tu dois encercler la direction dans laquelle il doit aller."
      4:
        image: notes/C1_happy_maps_unplugged_4.png
        text: "Crée ton algorithme on collant des flèches à côté de la carte que tu essaies de décoder. Le deuxième algorithme sera le même sauf qu'il descendra."
      5:
        image: notes/C1_happy_maps_unplugged_5.png
        text: "C'est comme de programmer avec du papier. Et voilà !"
    C1_maze_debugging:
      1:
        image: notes/C1_maze_debugging_1.png
        text: "Débugger, c'est trouver et résoudre des problèmes. Il y a beaucoup de façons de débugger des problèmes. L'une des plus simples consiste à avancer instruction par instruction jusqu'à ce que tu trouves le moment où quelque chose cloche. Ici, j'essaie de faire un salto arrière sur la poutre, mais je n'arrête pas de tomber."
      2:
        image: notes/C1_maze_debugging_2.png
        text: "Je suis repassé sur chaque étape pas à pas et j'ai réalisé où était mon erreur. Je ne positionnais pas mes mains correctement sur la poutre. Alors j'ai essayé un autre salto arrière sur la poutre avec ma nouvelle position pour les mains et j'ai réussi. J'étais vraiment contente d'avoir débogué mon salto arrière."
      3:
        image: notes/C1_maze_debugging_3.png
        text: "Pour apprendre le débogage, nous commençons avec un ensemble de blocs déjà sur l'espace de travail. Tu remarqueras que ces blocs ne te permettent pas d'atteindre l'objectif. Nous avons besoin de déboguer la solution et corriger. Qu'est ce qui n'a pas fonctionné ? Tu remarqueras que devais continuer à aller vers l'Ouest d'une cas de plus."
      4:
        image: notes/C1_maze_debugging_4.png
        text: |-
          Nous allons résoudre ce problème en ajoutant un autre bloc à l'ouest et en appuyant sur "Démarrer" pour voir si tu as réussi. Yeah, tu l'as eu !
    C1_maze_intro_sequencing:
      1:
        image: notes/C1_maze_intro_sequencing_1.png
        text: "Pour ce puzzle, vous devez amener déplacer l'oiseau jusqu'au cochon. Regardez le puzzle pour voir quel direction prendre."
      2:
        image: notes/C1_maze_intro_sequencing_2.png
        text: "Tu dois faire glisser les blocs de la boîte à outils vers l'espace de travail. Assure-toi que c'est sous le bloc « quand l'exécution commence » et lorsque tu penses que tu as la bonne solution, alors tu peux cliquez sur « Démarrer» et regarder l'oiseau aller jusqu'au cochon."
    C1_maze_loops:
      1:
        image: notes/C1_maze_loops_1.png
        text: "Les ordinateurs sont vraiment doués pour répéter des actions. En tant que personne, tu t'ennuierais beaucoup si tu devais faire la même chose beaucoup de fois d'affilée. Mais un ordinateur peut faire la même chose des millions ou même des milliards de fois sans s'ennuyer et réussir à le faire très bien."
      2:
        image: notes/C1_maze_loops_2.png
        text: "Ainsi, par exemple, si je voulais souhaiter à tout le monde sur Facebook un joyeux anniversaire en leur envoyant un email, cela pourrait me prendre plus d'un siècle pour écrire tous ces mails à tout le monde. Mais avec seulement quelques lignes de code, je peux avoir un système pour envoyer un email à tout le monde sur Facebook pour leur souhaiter un joyeux anniversaire."
      3:
        image: notes/C1_maze_loops_3.png
        text: "Pour que l'oiseau aille jusqu’au cochon à ce niveau... plutôt que de faire glisser trois blocs Nord vers l'espace de travail, tu utiliseras le bloc « répéter ». Fais glisser le bloc « répéter » sur l'espace de travail et entre le numéro 3. Ensuite, fais glisser le bloc « déplacer vers le Nord » dans le bloc « répéter » et cliquez sur « Démarrer» pour voir si c'est bon. Félicitations, tu as réussi !"
    C1_moveitmoveit_unplugged:
      1:
        image: notes/C1_moveitmoveit_unplugged_1.png
        text: "Cette leçon est appelée bouge-le, bouge-le. Ensemble, nous allons écrire un programme pour déplacer nos amis, de la rose des vents jusqu'au smiley."
      2:
        image: notes/C1_moveitmoveit_unplugged_2.png
        text: Mais le smiley est tête en bas et une seule personne sait comment y aller. Commençons ce programme.
      3:
        image: notes/C1_moveitmoveit_unplugged_3.png
        text: "Un programme est un algorithme qui a été en codé de façon à pouvoir être exécuté par une machine. La plupart d'entre nous voient un programme comme quelque chose que l'on écrit pour un ordinateur. Les programmes sont parfaits pour cela, mais ils sont également utiles à d'autres endroits. Tu peux programmer ton propre jeu ou même programmer un robot qui pourra faire des choses pour toi."
    C1_going_places_safely:
      1:
        image: notes/C1_going_places_safely_1.png
        text: |-
          Mon nom est Jérémie. Salut ! J'ai 7 ans. J'aime jouer sur l'ordinateur de ma maman mais je demande toujours d'abord la permission. "Maman, je peux aller sur l'ordinateur ? Bien sûr mon chéri !"
      2:
        image: notes/C1_going_places_safely_2.png
        text: "J'aime l'ordinateur de ma maman parce que je peux aller sur internet. Internet c'est un peu comme ton voisinage. Tu peux visiter des endroits supers, parler à la famille et aux amis et tu peux apprendre plein de choses nouvelles."
      3:
        image: notes/C1_going_places_safely_3.png
        text: "Hier, j'ai visité un zoo près de ma maison. J'ai vu un bébé zèbre. J'ai pris une photo et j'ai changé la couleur des rayures, puis ajouté un chapeau et je l'ai ajouté à ma collection d'animaux farfelus. Génial ! Plus tard, je suis allé très très loin. J'ai visité le Kenya. C'est un pays en Afrique. Plein de zèbres y vivent."
      4:
        image: notes/C1_going_places_safely_4.png
        text: |-
          Parfois sur Internet, je parle à des gens que je connais, comme ma grand-mère, qui vit dans un autre état. Salut Mamie! Elle me fait des cookies qu'elle m'enverra pour mon anniversaire. "Miam, j'aimerais que l'odeur passe par Internet !". Je peux parler à beaucoup de gens par Internet, comme mon cousin, mais je ne parle qu'aux gens que je connais.
      5:
        image: notes/C1_going_places_safely_5.png
        text: "Ce que j'aime le plus sur Internet, c'est que je peux jouer à des jeux amusants. Gagné ! J'aime aussi dessiner et créer de nouvelles choses et les partager avec mes amis. Cool ! Parfois, je visite des sites où j'apprends de nouvelles choses, mais je reste toujours sur les sites qui sont bien pour moi. Oh, des dinosaures !"
      6:
        image: notes/C1_going_places_safely_6.png
        text: "Internet est un lieu très amusant. Mais comme quand tu traverse une rue dans ton quartier, tu dois être prudent quand tu es connecté. Voici trois règles à retenir. Règle numéro 1 : Demande toujours à tes parents d'abord. Règle numéro 2 : Ne parle qu'aux gens que tu connais. Règle numéro 3 : Reste aux endroits qui sont adaptés pour toi."
      7:
        image: notes/C1_going_places_safely_7.png
        text: "Wouah, c'était amusant ! Heure du dîner. Je me déconnecte maintenant. Je suis impatient de me reconnecter pour voir où je peux aller après."
    C1_pair_programming:
      1:
        image: notes/C1_pair_programming_1.png
        text: "Aujourd'hui, nous allons en savoir plus sur la programmation en binôme. Dans la programmation en binôme, tu travailles en équipe. Pourquoi deux personnes devraient utiliser un seul ordinateur ? Parce que deux têtes valent mieux qu'une. Dans la programmation en binôme, toi et ton partenaire allez vous asseoir ensemble devant le même ordinateur et vous allez travailler sur le même projet."
      2:
        image: notes/C1_pair_programming_2.png
        text: "En pair programming, une personne est le pilote, et l'autre est le navigateur, comme dans une voiture. Le pilote est celui qui interagit avec l'ordinateur. Le navigateur l'aide en répondant à ses questions et en relevant d'éventuels problèmes ou erreurs."
      3:
        image: notes/C1_pair_programming_3.png
        text: "La communication est la clé du succès du pair programming. Pas d'insultes, soyez respectueux et ne jouez pas au chef : personne n'aime avoir un deuxième pilote. Vous et votre pilote devez toujours vous parler. Le pilote peut expliquer ce qu'il ou elle fait, et le navigateur peut aider en suggérant quoi faire ensuite."
      4:
        image: notes/C1_pair_programming_4.png
        text: "Le copilote devrait réfléchir à la situation dans son ensemble et le chauffeur se concentre sur les détails. Les deux rôles sont importants. La programmation à deux est principalement un travail d'équipe."
    C1_planting_seed:
      1:
        image: notes/C1_planting_seed_1.png
        text: "Cette leçon s'appelle planter une graine et elle va nous aider à comprendre les algorithmes. Les algorithmes sont des instructions spécifiques qui expliquent l'ordre dans lequel il faut faire quelque chose. Même certains gestes quotidiens comme manger son petit déjeuner ou se brosser les dents sont des algorithmes qui nécessitent plusieurs petites étapes afin d'aller jusqu'au bout de la tâche."
      2:
        image: notes/C1_planting_seed_2.png
        text: "Les ordinateurs peuvent être très intelligents mais ils ne peuvent te comprendre que si tu leur dis exactement ce que tu veux étape par étape. Ce qui est génial avec les algorithmes c'est que si tu suis les instructions dans l'ordre, tu peux faire quelque chose que tu n'aurez pas su faire avant. C'est comme suivre une recette."
      3:
        image: notes/C1_planting_seed_3.png
        text: "Aujourd'hui nous allons planter nos propres graines à l'aide d'un algorithme. Crée ton propre algorithme en découpant les images. Sélectionne les images qui montrent les différentes étapes pour planter une graine et remets les dans le bon ordre."
      4:
        image: notes/C1_planting_seed_4.png
        text: "Maintenant, il est temps de voir si ton algorithme fonctionne. Suis les étapes de l'algorithme avec beaucoup d'attention. Sont-elles dans le bon ordre ? As-tu réussi à planter une graine en suivant l'algorithme ? C'est comme de la programmation avec des photos !"
      5:
        image: notes/C1_planting_seed_5.png
        text: "Lorsque l'on fait du chocolat, il y a plusieurs étapes importantes dans le processus. Et chacune de ces grandes étapes a son lot de petites étapes. Et il y a différentes recettes, ou algorithmes, en fonction du goût que nous voulons donner au chocolat. Chaque étape est importante, même la plus petite. C'est pourquoi, si une seule étape manque, les autres ne peuvent fonctionner. Il est vraiment important de créer des algorithmes que d'autres peuvent comprendre. C'est pourquoi chaque étape doit être écrite, de façon à ce que le résultat soit le même quelque soit la personne qui le crée."
    C1_playlab_storytelling:
      1:
        image: notes/C1_playlab_storytelling_1.png
        text: "Il est temps de faire preuve de créativité et d'utiliser tes compétences en codage pour raconter une histoire. Ton histoire intégrera des acteurs, et tu seras en mesure de les faire parler mais aussi d'interagir entre eux. Commence à réfléchir quel type d'histoire tu veux raconter."
      2:
        image: notes/C1_playlab_storytelling_2.png
        text: |-
          Le chat a toujours eu peur du chien, mais que se passerait il si le chat se rendait compte que le chien essayait juste d'être gentil ? Le bloc "quand l'exécution commence" démarre tout. Le bloc "Déplacer" fera bouger ton personnage et le bloc "Parler" lui fera dire tout ce que tu tapes.
      3:
        image: notes/C1_playlab_storytelling_3.png
        text: 'Ceci est le bloc "quand les acteurs se touchent" que tu peux connecter aux autres blocs.'
      4:
        image: notes/C1_playlab_storytelling_4.png
        text: |-
          J'ai fait venir le chien pour lui faire dire "Bonjour" mais alors le chat a eu peur et s'est enfui. "Ahh", s'il y avait eu plus de temps, cela aura été une fin heureuse. La fin!
    C1_spelling_bee_intro:
      1:
        image: notes/C1_spelling_bee_intro_1.png
        text: "Voici le niveau de l'abeille qui épelle. Utilise les pièces du puzzle pour déplacer l'abeille. Lorsqu'elle se déplace, elle récupérera les lettre pour composer un mot."
      2:
        image: notes/C1_spelling_bee_intro_2.png
        text: Si vous pouvez épeler ce mot, ils sera présent dans la zone au-dessous. Mais attention abeille ! Déplacer dans la mauvaise direction ajoutera des lettres que vous ne voulez pas.
    C1_zuck_repeat_loop:
      1:
        image: notes/C1_zuck_repeat_loop_1.png
        text: "Les ordinateurs sont vraiment doués pour répéter des actions. En tant que personne, tu t'ennuierais beaucoup si tu devais faire la même chose beaucoup de fois d'affilée. Mais un ordinateur peut faire la même chose des millions ou même des milliards de fois sans s'ennuyer et réussir à le faire très bien."
      2:
        image: notes/C1_zuck_repeat_loop_2.png
        text: "Ainsi, par exemple, si je voulais souhaiter à tout le monde sur Facebook un joyeux anniversaire en leur envoyant un email, cela pourrait me prendre plus d'un siècle pour écrire tous ces mails à tout le monde. Mais avec seulement quelques lignes de code, je peux avoir un système pour envoyer un email à tout le monde sur Facebook pour leur souhaiter un joyeux anniversaire."
      3:
        image: notes/C1_zuck_repeat_loop_3.png
        text: |-
          Dans cet exemple, ton objectif est de déplacer l'oiseau jusqu'au cochon. Maintenant, nous allons pouvoir utiliser le bloc de répétition pour le faire très facilement. Tu peux soit donner à l'ordinateur un ordre "avancer" cinq fois afin de faire avancer l'oiseau d'une étape à chaque fois vers le cochon, ou tu peux juste demander à l'ordinateur d'avancer une seule fois, puis de lui demander de le répéter cinq fois, cela donnera le même résultat.
      4:
        image: notes/C1_zuck_repeat_loop_4.png
        text: |-
          Pour faire cela, tu dois déplacer la commande "avancer" et la mettre à l'intérieur du bloc répéter. Alors, tu peux cliquer dessus pour indiquer au bloc répéter de combien de pas tu veux avancer.
      5:
        image: notes/C1_zuck_repeat_loop_5.png
        text: "Encore une chose, tu peux mettre autant de commandes que tu le souhaites à l'intérieur du bloc répéter. Ainsi, dans cet exemple, tu lui dit d'avancer et de tourner à gauche, ce qu'il fera cinq fois. Amuse-toi !"
    C2_artist_intro:
      1:
        image: notes/C2_artist_intro_1.png
        text: "Tu ne serais même pas qualifié pour la course si tu n'avais pas les gens qui sont compétents en informatique en raison de la quantité de données collectées par les voitures et la nécessité d'être en mesure d'avoir des gens capable d'écrire des programmes pour savoir comment continuer à être performant."
      2:
        image: notes/C2_artist_intro_2.png
        text: Dans ces puzzles, tu seras un artiste qui utilise un crayon pour dessiner différentes formes. Partout où ton artiste va, il dessine une ligne derrière lui.
      3:
        image: notes/C2_artist_intro_3.png
        text: |-
          Pour te déplacer sur la zone de dessin, tu vas utiliser le bloc "avancer plus". Ici le bloc "avancer plus" signifie un déplacement vers l'avant de 100 pixels. Que se passe-t-il lorsque l'on appuie sur "Démarrer" ? L'artiste avance d'une certaine distance et cette distance est de 100 pixels. Les pixels sont simplement de très petits carrés sur l'écran de ton ordinateur.
      4:
        image: notes/C2_artist_intro_4.png
        text: |-
          L'autre bloc que nous avons dans ce puzzle est "tourner à droite de 90 degrés". Et quand nous l'utilisons, cela fait tourner notre Artiste d'un certain angle. Tu peux donc faire varier cet angle selon la rotation souhaitée pour l'Artiste. Il s'agit d'un virage à 90 degrés.
      5:
        image: notes/C2_artist_intro_5.png
        text: "Et il s'agit d'un virage de 120 degrés. Et n'oublie pas, tu peux modifier ces valeurs en cliquant sur les flèches à côté du nombre de pixels et de degrés. Amuses toi bien à dessiner avec ton artiste !"
    C2_bee_conditionals:
      1:
        image: notes/C2_bee_conditionals_1.png
        text: "Il s'agit du bloc conditionnel. Il dit que SI il y a du nectar ou du miel qui est inférieur, égal ou supérieur à un certain nombre, ALORS faire quelque chose."
      2:
        image: notes/C2_bee_conditionals_2.png
        text: "Cela est utile lorsque nous ne savons pas combien de nectar ou miel est à obtenir, comme nous le voyons ici avec ce point d'interrogation."
      3:
        image: notes/C2_bee_conditionals_3.png
        text: "Dans cet exemple, nous allons dire SI la fleur pourpre a du nectar supérieur à 0, prendre du nectar. Ce qui dira à notre abeille de continuer à prendre du nectar tant qu'il y en a. Tadam !"
    C2_binary_bracelets:
      1:
        image: notes/C2_binary_bracelets_1.png
        text: "C'est la leçon sur les bracelets binaires. Nous allons coder nos initiales sur un bracelet que nous pourrons porter et montrer à tous nos amis !"
      2:
        image: notes/C2_binary_bracelets_2.png
        text: "Le binaire est une façon de représenter des informations à l'aide de seulement deux valeurs. Parfois les gens imaginent cela uniquement comme des 1 et des 0. Mais tu peux te représenter le binaire comme une combinaisons d'ouvert ou fermé, haut ou bas, dedans ou dehors ou vraiment tout ensemble de contraires."
      3:
        image: notes/C2_binary_bracelets_3.png
        text: "Salut, je suis Orion et je programme des robots ici à Play-im. Tous les ordinateurs et cerveaux des robots sont constituées de petites portes électroniques à leur niveau le plus fondamental. Lorsque la porte est ouverte, l'électricité peut circuler, et lorsqu'elle est fermée, l'électricité ne circule pas."
      4:
        image: notes/C2_binary_bracelets_4.png
        text: "Les yeux sont un exemple de binaire sur le robot. Les yeux du robot sont des LEDs et celles-ci sont des lumières qui sont soit allumées soit éteintes. C'est un système binaire, l'un ou l'autre. Nous pouvons utiliser les lumières pour représenter des nombres binaires. Si nous avons un ensemble de robots, nous pouvons dire que le premier robot est à la place 1 et le second robot est à la 2, le troisième robot est à la 3 et ainsi de suite. Voilà comment représenter un nombre binaire. Les robots vont le faire avec leurs yeux binaire et compter pour vous."
    C2_conditionals_with_cards:
      1:
        image: notes/C2_conditionals_with_cards_1.png
        text: "Cette leçon s'appelle instructions conditionnelles avec les cartes. Chaque jour tu prends des décisions fondées sur ce que tu vois et entends."
      2:
        image: notes/C2_conditionals_with_cards_2.png
        text: "Je veux marcher vers le parc, mais tout d'abord, je dois décider si je devrais prendre un parapluie ou non. Donc je regarde par la fenêtre. Si c'est nuageux, je vais prendre mon parapluie. Sinon, je vais prendre des lunettes de soleil. Je pense que je ferais mieux de prendre le parapluie. Ce que je vois et entends détermine ce que je prends pour le parc."
      3:
        image: notes/C2_conditionals_with_cards_3.png
        text: "Les instructions conditionnelles sont utilisées dans les jeux aussi. Aujourd'hui, nous allons nous exercer à l'utilisation d'instructions conditionnelles avec un jeu de cartes. Dans ce jeu, la carte que j'ai dessiné détermine ce que mes amis vont faire. Si je tire un sept, tout le monde applaudit. Sinon, tout le monde dit « Waouw». Essayons-le ! « Waouw» « merci»"
      4:
        image: notes/C2_conditionals_with_cards_4.png
        text: "Je parie que tu peux faire des jeux qui sont encore plus marrants avec les instructions conditionnelles. Fais un essai ! Les instructions conditionnelles sont ce qui donne l'impression que les ordinateurs sont intelligents. Un programme informatique qui contient des instructions conditionnelles peut réagir à l'utilisateur et modifier sa façon d'agir."
      5:
        image: notes/C2_conditionals_with_cards_5.png
        text: "Pense à ton jeu vidéo préféré. Gagnes-tu plus de points pour certaines actions que d'autres ? Cela se produit car l'ordinateur utilise des instructions conditionnelles. C'est la façon dont un ordinateur prend une décision. Que dirais-tu si, lorsque tu touches la cible, tu gagnes dix points. Sinon, tu en perds trois. Quand on sait comment fonctionnent les instructions conditionnelles, on peut créer toutes sortes de jeux passionnants."
    C2_artist_debugging:
      1:
        image: notes/C2_artist_debugging_1.png
        text: Ici nous avons déjà quelques blocs positionnés dans notre espace de travail. Mais il y a quelque chose qui cloche.
      2:
        image: notes/C2_artist_debugging_2.png
        text: "Débogue ce code en ralentissant la vitesse et en regardant ce qu'il se passe pour chaque bloc pas à pas."
      3:
        image: notes/C2_artist_debugging_3.png
        text: Ah, il y a un problème ! Les moustaches du chat font 75 pixels de long, pas 25.
    C2_bee_debugging:
      1:
        image: notes/C2_bee_debugging_1.png
        text: "As-tu déjà entendu parler de débogage de programme ? Il s'agit d'un moyen pour comprendre ce qui ne fonctionne pas. Lorsque tu débogues du code, tu identifies et supprimes les erreurs."
      2:
        image: notes/C2_bee_debugging_2.png
        text: |-
          Ici, tu démarres avec quelques blocs déjà positionnés dans l'espace de travail. Nous allons utiliser le bouton "Étape" pour parcourir les blocs, pas à pas, pour voir si c'est la bonne solution et où nous devrions corriger.
      3:
        image: notes/C2_bee_debugging_3.png
        text: |-
          On dirait que notre problème est là ! Nous avons besoin d'un bloc "avancer plus" supplémentaire. Le bouton "Étape" nous aide à déboguer notre problème en identifiant où est l'erreur et ainsi corriger.
    C2_digital_footprint:
      1:
        image: notes/C2_digital_footprint_1.png
        text: Tu as un chapeau sur ta tête et ton cerveau te dira où tu es, de penser que tu es au zoo et de saluer untel et untel ! Utilise ta tête lorsque tu es connecté pour garder ce qui te concerne dans ton cerveau et pour savoir comment être en sécurité, comment faire pour garder un espace de vie privée dans ta vie ! De la tête au pied, fais une pause et réfléchis. Des pieds au nez, fais une pause et pense connecté !
      2:
        image: notes/C2_digital_footprint_2.png
        text: "Utilise ton cœur pour croître et grandir et pour être resplendissant et pour avoir un amour, dire à quelqu'un que vous serez sien ! Utilise ton cœur quand tu es connecté, sent ce qui est juste et toujours aimable et montre du respect à tes amis, pour être juste et agréable sur Internet. De la tête au pieds, fait une pause et réfléchis. De vos pieds jusqu'à votre nez, Des pieds au nez, fais une pause et pense connecté !"
      3:
        image: notes/C2_digital_footprint_3.png
        text: "Utilise tes bras pour câliner ton animal de compagnie, pour empêcher tes vêtements de se mouiller et pour porter ta chemise préférée et pour t'aider à voler et faire croire. Utilise tes bras lorsque tu es en ligne, pour prendre le temps de faire une pause et de laisser la technologie et de te trouver un arbre pour grimper. De la tête au pieds, fait une pause et réfléchis. De vos pieds jusqu'à votre nez, Des pieds au nez, fais une pause et pense connecté !"
      4:
        image: notes/C2_digital_footprint_4.png
        text: "Utilise ton intestin pour mettre la nourriture et pour écouter son grognement d'humeur, de faire un bruit de ventre et de sentir le gaz dans les boissons gazeuses. Utilise ton instinct quand tu es en ligne, pour savoir surveiller certains signes et laisse le te montrer le chemin et te dire quand ce n'est pas bon. De la tête au pieds, fait une pause et réfléchis. De vos pieds jusqu'à votre nez, Des pieds au nez, fais une pause et pense connecté !"
      5:
        image: notes/C2_digital_footprint_5.png
        text: Donc pense avec ta tête et ressent avec ton coeur, équilibre avec tes bras, écoute ton instinct, en ligne. Utilisez tes jambes pour courir et lancer et pour sauter et rebondir sur un bâton sauteur, pour danser autour du bloc et à ignorer tes chaussettes qui sentent mauvais. Utilise tes jambes lorsque tu es en ligne, pour résister aux intimidateurs qui franchissent la ligne et ne pas oublier de se tenir debout, être gentil avec les créatures grandes et petites.
      6:
        image: notes/C2_digital_footprint_6.png
        text: "De la tête au pieds, fait une pause et réfléchis. De vos pieds jusqu'à votre nez, Des pieds au nez, fais une pause et pense connecté ! Alors pense avec ta tête et ressent avec ton coeur, équilibre avec tes bras, écouter ton instinct, debout avec tes jambes. De la tête au pieds, fait une pause et réfléchis. De vos pieds jusqu'à votre nez, Des pieds au nez, fais une pause et pense connecté !"
    C2_digital_footprint_v2:
      1:
        image: notes/C2_digital_footprint_v2_1.png
        text: "Chaque fois que tu vas sur Internet, tu laisses une trace qui peut être consultée, copiée, partagée, diffusée et qui est permanente. Quel genre d'empreinte numérique laisses-tu ? Quel genre d'empreinte numérique veux-tu laisser ?"
    C2_graph_paper:
      1:
        image: notes/C2_graph_paper_1.png
        text: "Cette leçon s'appelle « Programmation sur papier quadrillé » et tout tourne autour des algorithmes. Aujourd'hui, nous allons apprendre à écrire des programmes qui montrent comment recréer de simples images noir et blanc, juste en dessinant des flèches à la main."
      2:
        image: notes/C2_graph_paper_2.png
        text: "Un algorithme est une liste de consignes permettant de réaliser une tâche. Nous allons suivre cet ensemble de consignes destinées à faire un bol. Les algorithmes sont vraiment utiles quand tu as besoin que quelqu'un d'autre comprenne comment faire quelque chose."
      3:
        image: notes/C2_graph_paper_3.png
        text: Si tu écris un algorithme pour un ordinateur, tu dois le découper en toutes petites étapes. Donc termine cette ligne et passe à la suivante, puis la suivante et tu as terminé.
      4:
        image: notes/C2_graph_paper_4.png
        text: "J'utilise des algorithmes dans mon travail. Si j'écris toutes les étapes, je peux recréer la même chose à nouveau, ou je peux enseigner à quelqu'un d'autre comment le faire. Mets du verre dans le four, fusionne le, suis le reste des instructions pour faire le bol. Les algorithmes te donnent une feuille de route pour obtenir quelque chose."
    C2_artist_loops:
      1:
        image: notes/C2_artist_loops_1.png
        text: "Ici nous allons utiliser le bloc de répéter pour nous aider à économiser des étapes lorsque nous programmons notre Artiste. Il y a déjà quelques blocs sur l'espace de travail mais ils sont juste là pour démarrer."
      2:
        image: notes/C2_artist_loops_2.png
        text: "Pour faire boucler 4 fois ces blocs pour dessiner le carré complet, nous devons juste choisir le bloc répéter et mettre les blocs avancer plus et tourner à l'intérieur du bloc de répéter. Lorsque l'on clique sur Démarrer, l'artiste répète ces étapes quatre fois pour compléter le carré."
    C2_bee_loops:
      1:
        image: notes/C2_bee_loops_1.png
        text: "Une boucle est une répétition d'activités. Pour inspecter une ruche, je regarde un cadre, puis je le remets. Je répète cette même activité plusieurs fois. Et donc je boucle en répétant la même activité plusieurs fois."
      2:
        image: notes/C2_bee_loops_2.png
        text: "C'est le bloc répéter. Quelque soit ce que vous y mettez à l'intérieur, le bloc répéter va répéter ces actions le nombre de fois que tu lui as demandé. Par exemple, dans ce niveau, plutôt que de choisir les blocs avancer plus et prendre du nectar trois fois, on va juste les faire glisser une fois chacun et répétez l'action trois fois. Ça rend les choses plus facile !"
    C2_maze_intro:
      1:
        image: notes/C2_maze_intro_1.png
        text: "Habituellement la programmation est faite en texte, mais nous allons utiliser Blockly qui utilise des blocs visuels que tu glisses et déposes pour écrire des programmes. Sous le capot, tu crées toujours du code. Pour commencer, nous allons créer du code pour un programme qui aidera Angry Bird à se déplacer dans un labyrinthe pour se rendre jusqu'aux porcs maléfiques qui ont volé ses œufs."
      2:
        image: notes/C2_maze_intro_2.png
        text: "Blockly est divisé en trois parties principales. Sur la gauche se trouve le labyrinthe de l'oiseau, où ton programme va s'exécuter. Les consignes pour chaque puzzle sont écrites sous le labyrinthe. Cette zone centrale est la boîte à outils et chacun de ces blocs est une commande que l'oiseau peut comprendre. L'espace blanc sur la droite est appelé l'espace de travail et c'est là où nous allons construire notre programme."
      3:
        image: notes/C2_maze_intro_3.png
        text: |-
          Si je fais glisser le bloc "avancer plus" dans notre espace de travail et que je cliques sur "Démarrer", que se passe-t-il ? L'oiseau se déplace vers l'avant d'une case sur la grille. Et si je veux que l'oiseau fasse quelque chose après qu'il se soit déplacé d'un case vers l'avant ? Je peux ajouter un autre bloc à notre programme.
      4:
        image: notes/C2_maze_intro_4.png
        text: |-
          Je vais choisir le bloc « tourner à droite » et je vais le faire glisser sous mon bloc "avancer plus" jusqu'à ce que la flèche jaune apparaisse. Puis je vais le déposer et les deux blocs vont s'emboîter. Lorsque j'appuie sur « Démarrer» à nouveau, l'oiseau va exécuter les commandes qui sont empilées de haut en bas sur notre espace de travail.
      5:
        image: notes/C2_maze_intro_5.png
        text: |-
          Si jamais tu veux supprimer un bloc, il te suffit de le retirer de la pile et de le glisser vers la poubelle. Après avoir cliqué sur "Démarrer", tu peux toujours cliquer sur le bouton "Réinitialiser" pour ramener l'oiseau au début. Maintenant, allons nous occuper de ces cochons !
    C2_paper_airplanes:
      1:
        image: notes/C2_paper_airplanes_1.png
        text: |-
          Cette leçon s'appelle "Les algorithmes dans le monde réel". Les algorithmes décrivent des choses que les gens font tous les jours. Recettes de biscuit et notices pour construire un abri à oiseaux sont tous deux des algorithmes de la vie de tous les jours.
      2:
        image: notes/C2_paper_airplanes_2.png
        text: "Aujourd'hui nous allons faire, créer et tester un algorithme pour un avion en papier. Mais tout d'abord, nous devons découper ce grand projet en petites étapes faciles à suivre. Pour faire un avion en papier, nous avons besoin de décider quelles sont les étapes à réaliser et dans quel ordre."
      3:
        image: notes/C2_paper_airplanes_3.png
        text: "Tu vas créer ton algorithme en découpant les photos. Ensuite, tu vas sélectionner les 6 photos qui montrent les étapes nécessaires pour faire un avion en papier et organiser ces images dans le bon ordre. Lorsque tu as tout dans l'ordre, tu échangeras ton algorithme avec un autre élève pour tester l'algorithme et voir s'il fonctionne. Un algorithme bien conçu est super important pour faire le meilleur avion de papier."
      4:
        image: notes/C2_paper_airplanes_4.png
        text: "Lorsque l'on fait du chocolat, il y a plusieurs étapes importantes dans le processus. Et chacune de ces grandes étapes a son lot de petites étapes. Et il y a différentes recettes, ou algorithmes, en fonction du goût que nous voulons donner au chocolat. Chaque étape est importante, même la plus petite. C'est pourquoi, si une seule étape manque, les autres ne peuvent fonctionner. Il est vraiment important de créer des algorithmes que d'autres peuvent comprendre. C'est pourquoi chaque étape doit être écrite, de façon à ce que le résultat soit le même quelque soit la personne qui le crée."
    C2_playlab_createastory:
      1:
        image: notes/C2_playlab_createastory_1.png
        text: "Jusqu'ici, tu as fait une animation ou une histoire qui se rejoue à l'identique à chaque fois que tu l'exécutes. A présent, tu vas faire un jeu intéractif auquel tu peux véritablement jouer."
      2:
        image: notes/C2_playlab_createastory_2.png
        text: |-
          Voici le bloc "si une flèche est utilisée" et le bloc "déplacer l'acteur". Tu peux utiliser ces blocs ensemble pour déplacer l'acteur avec les touches de flèches.
    C2_relay_programming:
      1:
        image: notes/C2_relay_programming_1.png
        text: "Aujourd'hui, nous allons faire de la programmation en relais. Il s'agit de programmer sous pression et de déboguer les erreurs qui se produisent parfois lorsque on travaille très rapidement ou en équipes. Nous utiliserons la programmation sur papier quadrillé pour simuler le codage, et des courses en relais pour simuler un temps limite."
      2:
        image: notes/C2_relay_programming_2.png
        text: "Avec la programmation en relais, les équipes feront la course pour terminer un programme sur papier quadrillé. Tu devras vérifier le travail de ton coéquipier, ou le déboguer, le réparer s'il y a une erreur, ajouter ta flèche et exécuter en arrière et marquer votre coéquipier."
      3:
        image: notes/C2_relay_programming_3.png
        text: "Les programmeurs utilisent beaucoup le débogage pour rechercher et résoudre des problèmes dans leurs algorithmes ou leur code. Il y a beaucoup de façons de déboguer des problèmes. L'une des plus facile est d'avancer pas à pas jusqu'à ce que tu trouves où il y a un problème, puis de le corriger."
      4:
        image: notes/C2_relay_programming_4.png
        text: "Ici, j'essaie de faire un saut arrière sur la poutre, mais je n'arrête pas de tomber. Je suis repassé sur chaque étape pas à pas et j'ai réalisé où était mon erreur. Je ne positionnais pas mes mains correctement sur la poutre. Alors j'ai essayé un autre salto arrière sur la poutre avec ma nouvelle position pour les mains et j'ai réussi. J'étais vraiment contente d'avoir débogué mon salto arrière. On a trouvé ! Déboguer, c'est trouver et résoudre des problèmes. Joli, bon travail !"
    C2_zuck_repeat_loop:
      1:
        image: notes/C2_zuck_repeat_loop_1.png
        text: "Les ordinateurs sont vraiment doués pour répéter des actions. En tant que personne, tu t'ennuierais beaucoup si tu devais faire la même chose beaucoup de fois d'affilée. Mais un ordinateur peut faire la même chose des millions ou même des milliards de fois sans s'ennuyer et réussir à le faire très bien."
      2:
        image: notes/C2_zuck_repeat_loop_2.png
        text: "Ainsi, par exemple, si je voulais souhaiter à tout le monde sur Facebook un joyeux anniversaire en leur envoyant un email, cela pourrait me prendre plus d'un siècle pour écrire tous ces mails à tout le monde. Mais avec seulement quelques lignes de code, je peux avoir un système pour envoyer un email à tout le monde sur Facebook pour leur souhaiter un joyeux anniversaire. Voilà donc ce que sont les boucles, pourquoi elles sont utiles et c'est quelque chose que les ordinateurs font très bien."
      3:
        image: notes/C2_zuck_repeat_loop_3.png
        text: "Dans cet exemple, ton but va être de déplacer l'oiseau pour attraper le cochon. Maintenant, nous allons être en mesure d'utiliser le bloc « Répéter » et donc déplacer l'oiseau très facilement. Tu peux aussi le faire en donnant à l'ordinateur la commande « avancer plus » cinq fois afin de faire avancer l'oiseau case par case vers le cochon."
      4:
        image: notes/C2_zuck_repeat_loop_4.png
        text: |-
          Ou tu peux juste dire à l'ordinateur d'« avancer plus » une fois et puis lui dire de « répéter » cela 5 fois, et le résultat sera le même. Pour ce faire, tu fais glisser ta commande "avancer plus", et puis tu le mets dans le bloc « répéter ». Ensuite tu peux cliquer dessus et lui dire combien de fois tu veux répéter le bloc pour lui dire combien d'étapes tu veux le faire avancer.
      5:
        image: notes/C2_zuck_repeat_loop_5.png
        text: |-
          Maintenant une dernière chose : tu peux mettre autant de commandes que tu le souhaites à l'intérieur du bloc « répéter ». Donc dans cet exemple, tu dis d'"avancer plus" et de tourner à gauche, ce qu'il fera cinq fois. Allez, bon travail et amuse-toi bien !
    C3_artist_functions:
      1:
        image: notes/C3_artist_functions_1.png
        text: "Une des choses géniales dans la programmation informatique est qu'une fois qu'on a appris à un ordinateur comment faire une action, vous pouvez appeler cette fonction à nouveau. Vous lui donnez un nom puis vous pouvez l'appeler. C'est vraiment comme si on pouvait agrandir le langage."
      2:
        image: notes/C3_artist_functions_2.png
        text: |-
          Dans le programme que nous avons construit, nous avons appris comment tracer un carré en se déplaçant et en tournant quatre fois. Nous pouvons créer cette fonction et lui donner un nom, comme "dessiner un carré", ainsi à chaque fois que nous voulons le faire, nous avons juste à dire "dessiner un carré", l'ordinateur va revenir en arrière pour appeler la fonction et donc son code. Il le fera pour nous. Nous avons ajouté ce concept dans notre langage de programmation.
    C3_artist_intro:
      1:
        image: notes/C3_artist_intro_1.png
        text: "Tu ne serais même pas qualifié pour la course si tu n'avais pas les gens qui sont compétents en informatique en raison de la quantité de données collectées par les voitures et la nécessité d'être en mesure d'avoir des gens capable d'écrire des programmes pour savoir comment continuer à être performant."
      2:
        image: notes/C3_artist_intro_2.png
        text: Dans ces puzzles, tu seras un artiste qui utilise un crayon pour dessiner différentes formes. Partout où ton artiste va, il dessine une ligne derrière lui.
      3:
        image: notes/C3_artist_intro_3.png
        text: |-
          Pour te déplacer sur la zone de dessin, tu vas utiliser le bloc "avancer plus". Ici le bloc "avancer plus" signifie un déplacement vers l'avant de 100 pixels. Que se passe-t-il lorsque l'on appuie sur "Démarrer" ? L'artiste avance d'une certaine distance et cette distance est de 100 pixels. Les pixels sont simplement de très petits carrés sur l'écran de ton ordinateur.
      4:
        image: notes/C3_artist_intro_4.png
        text: |-
          L'autre bloc que nous avons dans ce puzzle est "tourner à droite de 90 degrés". Et quand nous l'utilisons, cela fait tourner notre Artiste d'un certain angle. Tu peux donc faire varier cet angle selon la rotation souhaitée pour l'Artiste. Il s'agit d'un virage à 90 degrés.
      5:
        image: notes/C3_artist_intro_5.png
        text: "Et il s'agit d'un virage de 120 degrés. Et n'oublie pas, tu peux modifier ces valeurs en cliquant sur les flèches à côté du nombre de pixels et de degrés. Amuses toi bien à dessiner avec ton artiste !"
    C3_artist_nested_loops:
      1:
        image: notes/C3_artist_nested_loops_1.png
        text: "Quand tu mets une boucle à l'intérieur d'une autre boucle, on appelle cela une boucle imbriquée. Par exemple, ici, nous avons déjà le code pour dessiner un triangle de 100 pixels de côtés en utilisant le bloc de répétition calé sur trois, une fois pour chaque côté du triangle."
      2:
        image: notes/C3_artist_nested_loops_2.png
        text: Mais nous voulons dessiner six triangles. Pour faire cela, nous allons prendre cette boucle et la placer dans un autre bloc de répétition. Plutôt cool!
    C3_bee_conditionals:
      1:
        image: notes/C3_bee_conditionals_1.png
        text: "Il s'agit du bloc conditionnel. Il dit que SI il y a du nectar ou du miel qui est inférieur, égal ou supérieur à un certain nombre, ALORS faire quelque chose."
      2:
        image: notes/C3_bee_conditionals_2.png
        text: "Cela est utile lorsque nous ne savons pas combien de nectar ou miel est à obtenir, comme nous le voyons ici avec ce point d'interrogation."
      3:
        image: notes/C3_bee_conditionals_3.png
        text: "Dans cet exemple, nous allons dire SI la fleur pourpre a du nectar supérieur à 0, prendre du nectar. Ce qui dira à notre abeille de continuer à prendre du nectar tant qu'il y en a. Tadam !"
    C3_debugging_bee:
      1:
        image: notes/C3_debugging_bee_1.png
        text: "As-tu déjà entendu parler de débogage de programme ? Il s'agit d'un moyen pour comprendre ce qui ne fonctionne pas. Lorsque tu débogues du code, tu identifies et supprimes les erreurs."
      2:
        image: notes/C3_debugging_bee_2.png
        text: |-
          Ici, tu démarres avec quelques blocs déjà positionnés dans l'espace de travail. Nous allons utiliser le bouton "Étape" pour parcourir les blocs, pas à pas, pour voir si c'est la bonne solution et où nous devrions corriger.
      3:
        image: notes/C3_debugging_bee_3.png
        text: |-
          On dirait que notre problème est là ! Nous avons besoin d'un bloc "avancer plus" supplémentaire. Le bouton "Étape" nous aide à déboguer notre problème en identifiant où est l'erreur et ainsi corriger.
    C3_bee_functions:
      1:
        image: notes/C3_bee_functions_1.png
        text: "Un des concept les plus importants en informatique est la façon de créer de nouvelle commandes, comment ajouter vos propres mots dans un langage informatique. La plupart des langages informatiques ont seulement une centaine de mots ou de commandes. L'art et la magie sont dans la définition de vos propres nouveaux mots de ces blocs de construction."
      2:
        image: notes/C3_bee_functions_2.png
        text: |-
          On fait ça tout le temps en sport. Par exemple, au basketball, tu commences par apprendre à dribbler, à faire un double-pas, à faire des rebonds. Une fois que tu as appris ces gestes de base, tu apprends de nouveaux mouvements et tu assembles ces éléments, comme pour un "pick and roll" ou un "give and go". A partir de là tu peux ensuite faire des enchaînements plus complexes. Une fois que tu as appris cet enchaînement et que tu lui donne un nom, chaque membre de l'équipe saura comment le faire.
      3:
        image: notes/C3_bee_functions_3.png
        text: "De la même manière, une fois que tu as appris à un ordinateur comment faire une action une fois en utilisant ces successions de commandes, tu peux inventer ton propre nom pour cette action afin qu'il soit facile de la répéter plus tard. Quand tu définis ta propre commande et que tu lui donnes un nom, on appelle cela une fonction. A présent nous allons utiliser les fonctions pour aider l'abeille."
      4:
        image: notes/C3_bee_functions_4.png
        text: |-
          Dans cet exemple, notre fonction s'appelle "obtenir 2 nectars", ce bloc vert juste ici. Nous savons ce que "obtenir 2 nectars" fait en regardant cette boite grise qui est la définition de la fonction. Si on regarde à l'intérieur, "obtenir 2 nectars" consistera à obtenir un nectar et ensuite obtenir à nouveau du nectar. Il faut toujours regarder ce qu'il y a dans la boite grise pour savoir ce que ces blocs de fonction verts peuvent faire.
    C3_bee_nested_loops:
      1:
        image: notes/C3_bee_nested_loops_1.png
        text: "Maintenant nous allons utiliser les boucles imbriquées avec l'abeille. On nous donne un morceau de code pour démarrer, qui dit à l'abeille d'avancer, de récupérer du nectar trois fois, et ensuite de tourner à droite. Prenons ce morceau de code et mettons le dans un autre bloc répéter, et réglons le nombre de répétitions sur trois. Terminé !"
    C3_bounce:
      1:
        image: notes/C3_bounce_1.png
        text: Tu vas maintenant créer ton propre jeu de casse-brique, que tu pourras partager avec tes amis. Tellement génial !
      2:
        image: notes/C3_bounce_2.png
        text: Pour démarrer, nous devons lier les commandes de la palette aux touches fléchées de notre clavier.
      3:
        image: notes/C3_bounce_3.png
        text: 'Nous pouvons le faire en liant le bloc "quand flèche à gauche" au bloc "déplacer vers la gauche", et le bloc "quand flèche à droite" au bloc "déplacer vers la droite". Fais un essai et tu vas programme ton propre jeu de casse-brique en moins de deux !'
    C3_computational_thinking:
      1:
        image: notes/C3_computational_thinking_1.png
        text: "Cette leçon est une pensée computationnelle. Il arrive parfois qu'apprendre un jeu puisse être difficile, n'est-ce pas ? Au début cela peut vous paraître vraiment confus et la plupart du temps, il n'y a personne pour vous apprendre les règles, vous êtes donc livré à comprendre par vous-même."
      2:
        image: notes/C3_computational_thinking_2.png
        text: "La bonne nouvelle est que vous pouvez améliorer vos capacités de déduction lorsque vous connaissez quelques astuces de pensée. Ces astuces sont des moyens uniques pour examiner et résoudre les problèmes. Dans cette leçon, vous apprendrez environ quatre astuces et les pratiquerez avec vos amis pour comprendre les règles d'un jeu."
      3:
        image: notes/C3_computational_thinking_3.png
        text: "Lorsque vous décomposez un gros problème en de plus petites pièces, vous utilisez votre cerveau. Une fois que nous avons décomposé ce gros problème en plusieurs petits problèmes, nous pouvons aller de l'avant vers le prochain tour, que nous appellerons le filtrage par motif."
      4:
        image: notes/C3_computational_thinking_4.png
        text: "C'est alors que nous recherchons des similitudes entre les choses. Une fois que j'ai trouvé les choses qui sont les mêmes, je peux comprendre quelles choses sont différentes. Lorsque je supprime ces différences, cela s'appelle l'abstraction."
      5:
        image: notes/C3_computational_thinking_5.png
        text: "Une fois que j'ai pu déterminer les étapes pour résoudre un problème, je peux mettre ces étapes dans un ordre spécifique appelé algorithme pour que n'importe qui puisse utiliser mes directions pour résoudre ce problème. Nous allons utiliser ces étapes afin de déterminer comment jouer au jeu sans règles. À la fin du jeu, vous serez en mesure de jouer à quelque chose qui ressemble à ça!"
    C3_crowdsourcing:
      1:
        image: notes/C3_crowdsourcing_1.png
        text: "Cette leçon est appelée crowdsourcing. Dans cette leçon vous utiliserez un jeu de cartes afin d'apprendre à quel point les choses peuvent être plus simples en groupe que tout seul. Prenez quelques amis et faites quelque chose de fabuleux. Le crowdsourcing est fait pour obtenir de l'aide d'un grand groupe de personnes pour finir une tâche plus rapidement."
      2:
        image: notes/C3_crowdsourcing_2.png
        text: "En informatique, nous utilisons tout le temps le crowdsourcing. Des milliers d'amateurs et de professionnels lient ensembles leurs ordinateurs pour chercher parmi des milliards et des milliards d’éléments d'informations. Afin de trouver des choses comme le prochain nombre premier de Marsenne ou bien mêmes des possibles communications aliens."
      3:
        image: notes/C3_crowdsourcing_3.png
        text: "Lorsque vous regardez un film, chaque seconde de ce film est composée de 24 images individuelles, nous les appelons frames. Chacune de ces images a besoin d'être créée, rendue et mise ensemble. Mon équipe et moi même, nous sommes tous développeur de logiciel. Nous travaillons tous ensemble afin de créer un élément du logiciel qui pourra à son tour créer une image, et donc créer l'image finale que vous voyez à l'écran. C'est un outil que les artistes et autres développeurs peuvent utiliser dans le cadre de leur travail d'équipe et dans le processus dans lequel ils seront capables de créer les images que vous voyez à l'écran."
      4:
        image: notes/C3_crowdsourcing_4.png
        text: "Par exemple, dans le monde de Némo, lorsque Crush et Squiz et tous leurs amis sont en train de nager à travers le Courant Est-Australien. Vous voyez de l'eau couler, vous voyez les couleurs des tortues, vous voyez les formes des poissons. Toutes ces choses là sont générées grâce aux mathématiques et aux programmes informatiques que nous écrivons, et que nous donnons après aux artistes. Une fois en leur possession ils s'en servent pour créer l'image finale, faire la mise au point et le rendre magnifique et marrant à regarder."
    C3_dice_race:
      1:
        image: notes/C3_dice_race_1.png
        text: "Cette leçon est appelée course de dés. Quasiment tout le monde aime jouer aux jeux vidéo. Mais vous êtes-vous déjà demandé comment les programmeurs de jeux transforment les étapes d'un jeu en un programme ? La première étape dans la création d'un jeu vidéo et dans la résolution d'un problème réside dans la réflexion et la planification."
      2:
        image: notes/C3_dice_race_2.png
        text: |
          Le processus de réflexion lors de la résolution de problèmes produit un algorithme, qui est un programme pas à pas pour résoudre un problème ou finir une tâche.
          Dans ce cours, vous allez créer un algorythme pour un jeu de course se jouant aux dés. Ensuite, vous demanderez à vos amis de vérifier votre programme pour voir s'ils arrivent à suivre les étapes du jeu.
          Une fois que le programmeur est sûr que ses étapes sont les bonnes, il faut traduire l'algorithme dans un programme écrit avec un language que l'ordinateur peut comprendre.
      3:
        image: notes/C3_dice_race_3.png
        text: "Quasiment tout ce que nous faisons chaque jour requiert un algorithme, une liste d'étapes que vous pouvez suivre pour finir une tâche. Les choses comme se préparer pour aller à l'école ou bien planifier une sortie avec des amis ou même préparer un repas. Pour terminer chacune de ces tâches, vous allez avoir besoin de les répartir en de plus petites étapes et parfois ces étapes doivent être dans un ordre spécifique."
      4:
        image: notes/C3_dice_race_4.png
        text: "Imaginez que vous êtes en train de faire un sandwich. Peu importe quel ingrédient vous sortirez en premier. Mais vous ne pouvez pas étaler le beurre de cacahuètes avant d'avoir ouvert le pot. Les ordinateurs ont besoin d'algorithmes et de programmes pour comprendre les choses les plus simples auxquelles nous n'avons même pas besoin de penser pour les faire."
      5:
        image: notes/C3_dice_race_5.png
        text: "Un algorithme est le raisonnement qui sous-tend ce qui doit se produire alors que le programme est l'instruction donnée à l'ordinateur pour y arriver. Un algorithme doit être traduit en un programme pour qu'un ordinateur puisse l'exécuter. Décomposer une tâche en étapes (appelées algorithme) peut présenter une certaine difficulté. Mais comme toute nouvelle compétence, ça devient plus facile et plus facile avec la pratique."
    C3_farmer_while:
      1:
        image: notes/C3_farmer_while_1.png
        text: "Alors que les boucles sont relativement similaires à ce que vous faites tous les jours dans votre vie. Imaginez que vous êtes en train de nettoyer votre voiture, vous continuerez à la laver jusqu'à qu'elle soit propre. Tant qu'elle ne l'est pas, vous continuerez à la laver. Vous évaluez ce genre de choses tout le temps."
      2:
        image: notes/C3_farmer_while_2.png
        text: |
          Nous avons un nouveau look pour dépanner votre fermier. C'est un bloc "While" (Pendant). C'est assez simple en fait : Tant que l'affirmation en haut est vraie, on fait quelque chose.
          Par exemple, tant qu'il y a un tas, donne un coup de pelle. Allez-y et faites un essai avec votre fermier.
    C3_functional_suncatchers:
      1:
        image: notes/C3_functional_suncatchers_1.png
        text: |-
          Leçon "attrape-soleil". Vous pourrez créer ces jolis attrapes-soleil à l'aide de fonctions. Il y a plusieurs étapes dans la création d'un attrape-soleil. Vous devrez répéter certaines étapes pluseurs fois.
      2:
        image: notes/C3_functional_suncatchers_2.png
        text: "La première étape pour simplifier le processus de fabrication d'un attrape-soleil consiste à déterminer ce que nous devons répéter maintes et maintes fois. Nous pouvons regrouper ces étapes dans ce qu'on appelle une fonction."
      3:
        image: notes/C3_functional_suncatchers_3.png
        text: |
          Mais il faut plus que suivre des étapes précises pour créer un beau vitrail.
          Parfois, nous voulons faire preuve de créativité et changer la couleur des perles que nous utilisons. Nous pouvons faire chaque attrape-soleil unique si on utilise des perles de couleur différentes.
      4:
        image: notes/C3_functional_suncatchers_4.png
        text: Votre attrape-soleil sera vraiment vôtre quand vous apprendrez à penser les perles comme variables qui est un mot qui signifie un espace réservé pour les informations qui peuvent changer. Amusez-vous à créer de beaux attrapes-soleil utilisant des fonctions et variables !
    C3_internet:
      1:
        image: notes/C3_internet_1.png
        text: "Cette leçon concerne internet. L'internet est très utilisé et semblable à une route très fréquentée. Comme les voitures, les messages filent pour rendre à leur destination. Les messages passent par internet très rapidement."
      2:
        image: notes/C3_internet_2.png
        text: "Agir sur le fonctionne de l'internet vous aidera à comprendre ce qui se passe lorsque vous utilisez l'internet. Vous apprendrez comment des messages vont de votre ordinateur à votre site préféré ou d'un ami à une boîte de courrier électronique. Tout comme il est plus facile de naviguer dans les routes à grand trafic lorsque vous connaissez les routes et pouvez lire les signes, naviguer sur internet n'est pas si compliqué quand on sait ce qui se passe dans les coulisses."
      3:
        image: notes/C3_internet_3.png
        text: "Envoyer des messages sur Internet, c'est un peu comme envoyer des messages par la poste, mais avec quelques différences. Je suis ici à google.com. L'adresse IP de ce site Web est ce nombre. Tu peux considérer une adresse IP comme une adresse de retour par la poste. Imaginons que je veuille envoyer un message par la poste à quelqu'un qui est dans le bureau là-bas. Est-ce que tu vois l'URL et l'adresse IP sur la porte? J'ai écrit ce message et cliqué sur envoyer."
      4:
        image: notes/C3_internet_4.png
        text: |-
          Contrairement à la poste, internet découpe les messages pour pouvoir les transmettre plus facilement. Ces éléments sont appelés "paquets". Les paquets constituant le message sont remis un par un à l'adresse du destinataire. Ces paquets sont alors rassemblées dans le bon ordre pour que le destinataire puisse lire le message correctement. Il y'a bien sûr beaucoup plus à apprendre sur le fonctionnement d'Internet, mais ceci constitue un bon début. Tu es bien parti pour devenir un utilisateur compétent d'internet . N'oublie pas d'expliquer à ta famille et à tes amis ce que tu as appris!
      5:
        image: notes/C3_internet_5.png
        text: "Mon nom est Amanda Camp et je suis ingénieur logiciel chez Google. Mon équipe travaille sur un serveur qui stocke les profils et les contacts. Dans mon travail, nous réfléchissons beaucoup à la manière d'envoyer les contacts à d'autres appareils, comme ton téléphone. La plupart des gens ont beaucoup de contacts, disons 1000 et nous ne voulons pas envoyer tous ces contacts à la fois à votre téléphone car cela constituerait un message trop long. De même que l'internet décompose des messages volumineux en paquets, nous utilisons un concept appelé pagination qui nous permet d'envoyer à votre téléphone les contacts 100 par 100. Votre téléphone répond à chaque message pour nous demander les 100 prochains contacts."
      6:
        image: notes/C3_internet_6.png
        text: "La chose la plus excitante sur logiciel est le fait qu'il peut affecter le monde entier. J'ai d'abord appris à programmer quand j'étais à dix-neuf ans. Je pense que j'étais déjà un étudiant en deuxième année ou un junior College. Le premier programme que je me souviens de l'écriture est quelque chose qui converti Celsius en Fahrenheit. J'aime la programmation parce que j'aime aider les gens. Je peux écrire des programmes chez Google qu'aide les personnes dans le monde entier et c'est vraiment ahurissant et passionnant."
    C3_maze_conditionals:
      1:
        image: notes/C3_maze_conditionals_1.png
        text: |-
          Les gens prennent des décisions tous les jours. Par exemple, avant de sortir, vous exécutez une instruction conditionnelle (if-si) qui dit que "si il pleut, j'ai besoin de prendre ma veste". Les ordinateurs ont ceci d'incroyable que, une fois que vous décidez d'une réponse systématique à ce genre d'instruction, ils peuvent les exécuter avec fiabilité et à une vitesse incroyable. Un programme d'ordinateur est constitué d'un peu de maths et de quelques instructions conditionnelles pour prendre des décisions.
      2:
        image: notes/C3_maze_conditionals_2.png
        text: |-
          Le bloc "si" (if) aide les zombies à prendre une décision. Il vérifie quelque chose. Par exemple, utilisons le bloc qui dit s'il existe un chemin vers la gauche, et ajoutons une commande pour tourner à gauche à l'intérieur. Nous disons au zombie de vérifier autour de lui s'il y a un chemin sur la gauche et si oui, de prendre ce virage.
      3:
        image: notes/C3_maze_conditionals_3.png
        text: |-
          Ensuite, nous utilisons le bloc "avancer" à l'intérieur de cette boucle pour qu'il puisse continuer à avancer tant qu'il veut juste aller tout droit. Puis quand il rencontre un virage, le bloc "if" lui dit de tourner à gauche. Vous pouvez voir que si nous faisons cela, si nous prenons le virage vers la gauche et si dans le cas contraire nous avançons, notre objectif sera atteint.
      4:
        image: notes/C3_maze_conditionals_4.png
        text: |-
          C'est un exemple d'utilisation d'instruction conditionnelle, qui constitue un concept fondamental en programmation informatique. J'ai utilisé des instructions conditionnelles pour dire : "ok, si l'autre personne est sur le point de gagner, bloque cette position.". Amusez-vous en apprenant à utiliser des instructions conditionnelles, elles constituent un concept-clé.
    C3_maze_level_4:
      1:
        image: notes/C3_maze_level_4_1.png
        text: |-
          Dans cet exemple, votre but est de conduire le zombie au tournesol. Nous pourrions utiliser cinq blocs "avancer" ou nous pourrions dire à l'ordinateur "avancer" et répéter cinq fois à l'aide du bloc "répéter".
      2:
        image: notes/C3_maze_level_4_2.png
        text: |-
          Cela fait gagner du temps et facilite beaucoup les choses. Pour l'utiliser, il suffit de placer le bloc "avancer" à l'intérieur du bloc "répéter". Clickez sur run et le zombie avancera cinq fois pou atteindre le délicieux tournesol .
    C3_playlab_create_game:
      1:
        image: notes/C3_playlab_create_game_1.png
        text: "Jusqu'ici, tu as fait une animation ou une histoire qui se rejoue à l'identique à chaque fois que tu l'exécutes. A présent, tu vas faire un jeu intéractif auquel tu peux véritablement jouer."
      2:
        image: notes/C3_playlab_create_game_2.png
        text: |-
          Voici le bloc "si une flèche est utilisée" et le bloc "déplacer l'acteur". Tu peux utiliser ces blocs ensemble pour déplacer l'acteur avec les touches de flèches.
    C3_songwriting_with_parameters:
      1:
        image: notes/C3_songwriting_with_parameters_1.png
        text: "C'est la leçon d'écriture de chanson. La musique ressemble beaucoup à un programme informatique. Les notes écrites et les mots disent au chanteur exactement quoi faire. Certains morceaux de musique sont utilisés maintes et maintes fois."
      2:
        image: notes/C3_songwriting_with_parameters_2.png
        text: |-
          Dans un morceau de musique, nous parlons de refrain. Dans un programme d'ordinateur, les parties du programme qui sont utilisées à plusieurs reprises sont nommées "fonction". Quand dans le texte d'une chanson vous lisez "refrain", est ce que vous chantez le mot "refrain" ? Non, vous regardez en haut de la page pour trouver le texte du refrain.
      3:
        image: notes/C3_songwriting_with_parameters_3.png
        text: "Dans cette leçon, vous apprendrez une stupide petite chanson appelée little bunny foo foo. La chanson a un refrain que vous allez chanter à maintes reprises. Une fonction est un morceau de code que vous pouvez appeler et utiliser à maintes reprises. Il rend la programmation plus facile et plus efficace car vous n'avez pas à réécrire les étapes de votre fonction maintes et maintes fois. Vous pouvez les écrire juste une fois !"
    C4_bee_conditional:
      1:
        image: notes/C4_bee_conditional_1.png
        text: |-
          Voici le bloc conditionnel. Il dit : "si vous êtes à la fleur ou au nid d'abeilles, alors faites quelque chose". Cela est utile lorsque nous ne savons pas quelle quantité de miel ou nectar obtenir comme nous le voyons ici avec ce point d'interrogation.
      2:
        image: notes/C4_bee_conditional_2.png
        text: |-
          Dans cet exemple, nous allons dire, "si c'est une fleur, obtenir tout le nectar disponible" et ensuite en utiliser un autre pour dire : "si c'est un nid d'abeilles, faire du miel". Ta-dah !
    C4_conditionals:
      1:
        image: notes/C4_conditionals_1.png
        text: "Nous avons un nouveau bloc qui est appelé le bloc if/else. Il s'agit d'une instruction conditionnelle, tout comme le bloc if, que vous avez utilisé précédemment dans les casse-têtes. Mais il y a maintenant une nouvelle partie en bas qui dit autre chose. Le bloc if/else permet à l'abeille de choisir entre deux séries d'actions. Si l'abeille est à une fleur, l'abeille va faire l'ensemble des actions que vous mettez dans le premier bloc où il est dit do (faire). Si l'abeille n'est pas à une fleur, l'abeille va faire l'ensemble des actions que vous mettez dans le bloc introduit par else (sinon)."
      2:
        image: notes/C4_conditionals_2.png
        text: |-
          Les instructions conditionnelles permettent aux ordinateurs de prendre des décisions. Les humains mettent en place les conditions qui indiquent à l'ordinateur "si cette situation se présente, faire ceci". Else signifie simplement "dans le cas contraire, faire cela". La partie supérieure de notre bloc if/else dit "si c'est une fleur". Mais la partie supérieure de notre bloc pourrait dire d' autres choses, comme "si le nectar est égal à 2" ou "s'il y a un chemin devant", et notre bloc se comporterait de la même manière. C'est à dire que si l'instruction dans la partie supérieure est vraie l'ordinateur éxécutera la première série d'actions. Mais si la déclaration en haut est fausse, il fera le deuxième ensemble d'actions.
    C4_for_loops:
      1:
        image: notes/C4_for_loops_1.png
        text: "Quand tu utilises un bloc répéter pour créer une boucle dans ton code, comment l'ordinateur sait-il quand le code a été répété suffisamment de fois ? Le bloc répéter cache en fait un morceau de code plus compliqué, appelé une boucle pour, qui compte depuis une valeur de départ jusqu'à une valeur de fin avec un pas spécifique."
      2:
        image: notes/C4_for_loops_2.png
        text: "Par exemple, un bloc répéter trois fois compte de 1 à 3 par pas de 1. Chaque fois qu'il compte, il déroule le code dans la boucle. La boucle pour sait combien de fois elle a été exécutée en utilisant une variable compteur, qui est mise à la valeur de départ au début de la boucle, et à laquelle on ajoute le pas à chaque fois que la boucle est exécutée. Dès que la variable compteur est plus grande que la valeur de fin, la boucle s'arrête."
      3:
        image: notes/C4_for_loops_3.png
        text: |-
          L'avantage d'utiliser une vraie boucle 'pour' à la place du bloc répéter est que tu peux vraiment voir la variable compteur et l'utiliser dans ta boucle. Par exemple, si j'ai une série de fleurs, et que la première a un nectar, la seconde a deux nectars et la troisième en a trois, je peux utiliser la boucle pour dire à l'abeille de collecter "compteur" nectars à chaque fois, ce qui fait un à la première fleur, deux à la seconde et trois à la troisième.
      4:
        image: notes/C4_for_loops_4.png
        text: "Dans une boucle 'pour', tu peux également incrémenter le compteur par un pas différent de un à chaque fois. Tu peux compter par 2, par 4, ou même par un nombre qui change à chaque itération."
    C4_for_loops_bee:
      1:
        image: notes/C4_for_loops_bee_1.png
        text: "Quand tu utilises un bloc répéter pour créer une boucle dans ton code, comment l'ordinateur sait-il quand le code a été répété suffisamment de fois ? Le bloc répéter cache en fait un morceau de code plus compliqué, appelé une boucle pour, qui compte depuis une valeur de départ jusqu'à une valeur de fin avec un pas spécifique."
      2:
        image: notes/C4_for_loops_bee_2.png
        text: "Par exemple, un bloc répéter trois fois compte de 1 à 3 par pas de 1. Chaque fois qu'il compte, il déroule le code dans la boucle. La boucle pour sait combien de fois elle a été exécutée en utilisant une variable compteur, qui est mise à la valeur de départ au début de la boucle, et à laquelle on ajoute le pas à chaque fois que la boucle est exécutée. Dès que la variable compteur est plus grande que la valeur de fin, la boucle s'arrête."
      3:
        image: notes/C4_for_loops_bee_3.png
        text: |-
          L'avantage d'utiliser une vraie boucle 'pour' à la place du bloc répéter est que tu peux vraiment voir la variable compteur et l'utiliser dans ta boucle. Par exemple, si j'ai une série de fleurs, et que la première a un nectar, la seconde a deux nectars et la troisième en a trois, je peux utiliser la boucle pour dire à l'abeille de collecter "compteur" nectars à chaque fois, ce qui fait un à la première fleur, deux à la seconde et trois à la troisième.
      4:
        image: notes/C4_for_loops_bee_4.png
        text: "Dans une boucle 'pour', tu peux également incrémenter le compteur par un pas différent de un à chaque fois. Tu peux compter par 2, par 4, ou même par un nombre qui change à chaque itération."
    C4_for_loops_no_bee:
      1:
        image: notes/C4_for_loops_no_bee_1.png
        text: "Quand tu utilises un bloc répéter pour créer une boucle dans ton code, comment l'ordinateur sait-il quand le code a été répété suffisamment de fois ? Le bloc répéter cache en fait un morceau de code plus compliqué, appelé une boucle pour, qui compte depuis une valeur de départ jusqu'à une valeur de fin avec un pas spécifique."
      2:
        image: notes/C4_for_loops_no_bee_2.png
        text: "Par exemple, un bloc 'répète 3' compte de 1 à 3 de 1 en 1. A chaque fois qu'il compte 1, il exécute le code dans la boucle. La boucle 'for' sait combien de fois elle a été exécutée grâce à une variable compteur. Elle est initialisé à la valeur de départ avant d'entrer dans la boucle et est incrémentée à chaque fois que la boucle est exécutée. Dès que la variable compteur dépasse la valeur de fin, la boucle s'arrête. L'avantage d'utiliser une vrai boucle plutôt qu'un bloc 'répéter' est que tu peux voir la variable compteur et l'utiliser dans ta boucle."
    C4_function_create:
      1:
        image: notes/C4_function_create_1.png
        text: "Maintenant que tu as modifié les blocs de fonction, il est temps d'en créer de nouveau, en partant de rien. Tu peux voir que la boite à outils a une catégorie appelée 'fonctions'. Si tu cliques dessus, tu verras un bouton orange appelé 'Créer une fonction'. Si tu cliques dessus, tu verras apparaître l'éditeur de fonctions que tu as déjà utilisé quand tu modifiais des blocs de fonction."
      2:
        image: notes/C4_function_create_2.png
        text: "Comme précédemment, vous avez commencé par nommer votre fonction et écrire une description de ce qu'elle est censé faire. Par exemple, elle va dessiner un carré ou dessiner un triangle. Ensuite, faites glisser les blocs de la boite à outils vers l'espace de travail blanc en dessous. Pensez bien à glisser ces blocs dans le bloc vert qui entoure la fonction."
      3:
        image: notes/C4_function_create_3.png
        text: |-
          Une fois terminé, clique sur enregistrer et quitter. Cette opération te ramène à l'espace de travail de puzzle principal. La nouvelle fonction que tu as créée apparaît comme un bloc vert dans la catégorie "fonction" de ta boîte à outils. Fais le glisser dans l'espace de travail principal et utilise-le comme n'importe quel autre bloc pour résoudre l'énigme.
    C4_function_edit:
      1:
        image: notes/C4_function_edit_1.png
        text: "Une des choses géniales dans la programmation informatique est qu'une fois qu'on a appris à un ordinateur comment faire une action, vous pouvez appeler cette fonction à nouveau. Vous lui donnez un nom puis vous pouvez l'appeler. C'est vraiment comme si on pouvait agrandir le langage."
      2:
        image: notes/C4_function_edit_2.png
        text: "Dans le programme que nous construisons, nous avons appris comment tracer un carré en se déplaçant et en tournant quatre fois. Nous pouvons prendre cette fonction et lui donner un nom comme 'tracer un carré'. Ainsi, chaque fois que nous voudrons dessiner un carré, nous aurons juste à dire : 'tracer un carré'. L'ordinateur reprendra la main, invoquera cette fonction, ce code, et fera le travail pour nous. Nous avons ajouté ce concept dans notre langage de programmation."
      3:
        image: notes/C4_function_edit_3.png
        text: "Dans ce puzzle, nous avons déjà crée une fonction 'tracer un carré' pour toi. Tu la trouveras dans la boite à outils. C'est un bloc vert. Ce que tu va devoir faire, c'est d'écrire le même code que celui que tu viens juste d'écrire pour dessiner un carré et de le mettre dans cette fonction. Pour faire cela, Clique sur l'option 'éditer' du bloc vert 'tracer un carré'. Cela va ouvrir l'éditeur de fonction. L'éditeur de fonction a trois parties. Un endroit où tu nommes ta fonction. Le nom apparaîtra sur le bloc vert avant cette fonction. Ensuite, écris une courte description de ce que la fonction est censé faire."
      4:
        image: notes/C4_function_edit_4.png
        text: |-
          Dans ce cas, il s'agit de dessiner un carré. L'espace blanc ci-dessous c'est l'espace de travail, qui fonctionne exactement comme l' espace de travail que vous avez déjà utilisé. Glissez et déposez les blocs de la boîte à outils dans cet espace de travail. N'oubliez pas de mettre les blocs qui créent un carré à l'intérieur du bloc vert qui encapsule le code de la fonction. Une fois que vous avez terminé, cliquez sur "enregistrer et quitter", ce qui vous ramène à l'espace de travail principal du puzzle. Désormais, vous pouvez utiliser le Bloc fonction "dessiner un carré" comme n'importe quel autre bloc pour terminer le puzzle.
    C4_function_parameters:
      1:
        image: notes/C4_function_parameters_1.png
        text: "Voila une fonction qui dessine des carrés de 50 pixels de côté. C'est bien, mais si en fait je veux dessiner un carré de 50 pixels de côté et un autre carré de 100 pixels de côté ? Nous ne devrions pas avoir a créer deux fonctions distinctes qui font presque la même chose. A la place, nous pouvons utiliser une seule fonction avec un paramètre."
      2:
        image: notes/C4_function_parameters_2.png
        text: |-
          Les paramètres permettent de transmettre à une fonction des valeurs qui sont utilisées à l'intérieur de la fonction comme des variables. Nous allons ajouter un paramètre "longueur" à cette fonction, pour créer des carrés de différentes tailles. Dans l'éditeur de fonction, vous pouvez modifier le nom et la description comme précédemment, mais vous pouvez également ajouter un paramètre. Écrivez le nom du paramètre dans l'emplacement idoine, puis cliquez sur" Ajouter un paramètre". Cela va créer un bloc rouge avec le nom du paramètre que vous venez de créer. Maintenant, vous pouvez utiliser ce paramètre pour modifier le bloc d'instructions "avancer de 100" afin qu'il devienne "avancer de la valeur de longueur".
      3:
        image: notes/C4_function_parameters_3.png
        text: "Clique sur 'Enregistrer et Fermer' et glisse ton nouveau bloc 'Créer un carré' depuis la catégorie 'Fonctions' de ta boite à outils. Tu remarqueras qu'il y a un espace vide à côté de 'Longueur' parce que la fonction veut savoir quelle valeur donner au paramètre 'Longueur'. Glisse un bloc nombre depuis la catégorie 'Math' et dépose le dans cet espace. Tu comprends maintenant comment créer des carrés de taille différente ? Alors vas-y, essaye !"
    C4_intro:
      1:
        image: notes/C4_intro_1.png
        text: "Habituellement la programmation est faite en texte, mais nous allons utiliser Blockly qui utilise des blocs visuels que tu glisses et déposes pour écrire des programmes. Sous le capot, tu crées toujours du code. Pour commencer, nous allons créer du code pour un programme qui aidera Angry Bird à se déplacer dans un labyrinthe pour se rendre jusqu'aux porcs maléfiques qui ont volé ses œufs."
      2:
        image: notes/C4_intro_2.png
        text: "Blockly est divisé en trois parties principales. Sur la gauche se trouve le labyrinthe de l'oiseau, où ton programme va s'exécuter. Les consignes pour chaque puzzle sont écrites sous le labyrinthe. Cette zone centrale est la boîte à outils et chacun de ces blocs est une commande que l'oiseau peut comprendre. L'espace blanc sur la droite est appelé l'espace de travail et c'est là où nous allons construire notre programme."
      3:
        image: notes/C4_intro_3.png
        text: |-
          Si je fais glisser le bloc "avancer plus" dans notre espace de travail et que je cliques sur "Démarrer", que se passe-t-il ? L'oiseau se déplace vers l'avant d'une case sur la grille. Et si je veux que l'oiseau fasse quelque chose après qu'il se soit déplacé d'un case vers l'avant ? Je peux ajouter un autre bloc à notre programme.
      4:
        image: notes/C4_intro_4.png
        text: "Je vais choisir un bloc 'tourne à droite' et je vais le glisser sous mon bloc 'déplace toi' jusqu'à ce que la flèche jaune apparaisse. Je vais le lâcher et les deux blocs vont s'accrocher ensemble. Lorsque j'appuierais sur 'Exécuter', l'oiseau jouera les commandes qui sont empilées dans notre espace de travail, du haut vers le bas."
      5:
        image: notes/C4_intro_5.png
        text: |-
          Si jamais tu veux supprimer un bloc, il te suffit de le retirer de la pile et de le glisser vers la poubelle. Après avoir cliqué sur "Démarrer", tu peux toujours cliquer sur le bouton "Réinitialiser" pour ramener l'oiseau au début. Maintenant, allons nous occuper de ces cochons !
    C4_math_artist:
      1:
        image: notes/C4_math_artist_1.png
        text: "Si je veux dessiner un rectangle de 50 pixels de haut et qui soit deux fois plus large que haut, comment devrais-je programmer l'ordinateur pour qu'il le fasse ? Et bien je pourrais dire au dessinateur de monter de 50 pixels, de tourner à droite, d'aller à 100 pixels et de refaire ça dans l'autre sens mais là, c'est moi qui calcule pour l'ordinateur."
      2:
        image: notes/C4_math_artist_2.png
        text: "Multiplier cinquante par deux de tête n'est peut-être pas si compliqué, mais les ordinateurs sont vraiment bons pour les maths, alors nous devons leur laisser les calculs autant que possible. Si j'avais juste utilisé une variable appelée hauteur à la place, alors j'aurais pu facilement changer la hauteur pour cinquante, et ensuite changer mon algorithme pour qu'il dise à l'artiste de monter de la hauteur, de tourner à droite, et ensuite d'avancer de hauteur fois 2, ce qui nous donne un rectangle deux fois plus large que haut."
    C4_unplugged_algorithms:
      1:
        image: notes/C4_unplugged_algorithms_1.png
        text: "Cette leçon s'appelle Algorithmes Tangram. Un Tangram est un puzzle de sept pièces qui peuvent être assemblées pour créer d'autres formes. Tu va devoir utiliser un algorithme pour expliquer à ton partenaire comment assembler le puzzle."
      2:
        image: notes/C4_unplugged_algorithms_2.png
        text: "Un algorithme est juste une liste d'étape que tu peux exécuter pour terminer une tâche. Nous les utilisons tous les jours, par exemple en faisant une liste de course ou une recette de cuisine. Si ton algorithme est trop simple, il peut y avoir plusieurs interprétations et celui qui va l’exécuter peut ne pas obtenir exactement le résultat que tu attendais. Si tu veux être sûr que tout le monde obtiennent exactement la même chose, alors ton algorithme doit être très détaillé et précis."
      3:
        image: notes/C4_unplugged_algorithms_3.png
        text: "J'utilise un algorithme aujourd'hui pour terminer un tableau. Je voulais essayer de peindre quelques loups, mais je ne suis pas le meilleur des peintres. Heureusement pour les gens comme moi, il y a la peinture au numéro. Il y a quarante couleurs et le tableau comporte des petits chiffres et lettres qui disent de quelle couleur peindre chaque section. La peinture par numéro me dit exactement quelle couleur utiliser et où."
      4:
        image: notes/C4_unplugged_algorithms_4.png
        text: "C'est très détaillé, alors je peux suivre les instructions et le tableau aura l'air génial. C'est un bon algorithme. Si les instructions n’étaient pas assez précises, mes loups ne seraient pas aussi beaux. Quand tu veux vraiment que quelque chose ressemble exactement à ce que tu a prévu, c'est mieux d'être extrêmement précis."
    C4_unplugged_binary:
      1:
        image: notes/C4_unplugged_binary_1.png
        text: |-
          Dans chaque équipe, la personne qui instruit et qui tient le papier, doit comprendre quel sera leur symbole "On" et quel sera leur symbole "Off". En binaire, c'est un genre d'alphabet, mais avec deux lettres. C'est comme si l'alphabet n'était constitué que des lettres A et B, mais à la place c'est 0 et 1.
      2:
        image: notes/C4_unplugged_binary_2.png
        text: |-
          La manière la plus courante d'utiliser le binaire, c'est dans une instruction de type "if". C'est une chose classique dans la programmation. Le programme s'exécute et dit : Si ceci est vrai, alors fait cela. Ou, si ce n'est pas vrai, fais autre chose. Mais que se passe-t-il quand on veut faire quelque chose d'un peu plus compliqué ? Plutôt qu'une instruction if, on voudra travailler avec quelque chose comme une image, ou un son dans un ordinateur.
      3:
        image: notes/C4_unplugged_binary_3.png
        text: "Un ordinateur ne connait que le binaire, mais une image, ce n'est pas binaire, ce n'est pas des zéros et des uns, alors comment faire ? Voilà un exemple : tu as cette magnifique image. Maintenant, une image est en gros une forme d'information. Toutes les informations peuvent être encodées en binaire, d'une manière ou d'une autre, il suffit de trouver comment."
      4:
        image: notes/C4_unplugged_binary_4.png
        text: "Imagine que l'on mette une grille sur ce panda, et que pour chaque carré, on décide s'il est plus noir ou plus blanc. Et ensuite, on le colore de cette manière. Maintenant, chaque cellule de la grille est soit noir, soit blanc, et les carrés noirs, on dit que c'est zéro (chiffre binaire) et les carré blancs, un, l'autre chiffre binaire. A la fin, il ne te reste que des zéros et des uns. C'est comme ça que tu représentes cette image en binaire."
    C4_unplugged_forloops:
      1:
        image: notes/C4_unplugged_forloops_1.png
        text: "Cette leçon est ici pour le plaisir de la boucle. Dans cette leçon, nous utiliserons une ligne de nombre pour jouer à un jeu de dé. Chaque joueur devra assigner trois fois une valeur de départ, une valeur d'arrêt, et notre intervalle. Durant chaque tour, on entoure sa valeur de départ, et toutes les valeurs qui ont le même nombre d'étapes que notre valeur d'intervalle. On arrête d'entourer quand on obtient notre valeur d'arrêt. La personne avec le plus grand score gagne !"
      2:
        image: notes/C4_unplugged_forloops_2.png
        text: Les boucles peuvent être utilisées dans de nombreuses situations et si vous deveniez météorologue, vous utiliseriez des boucles tout le temps. Salut, je suis Becky. Je travaille chez EverPower Renewables comme météorologue vent. Je prévois la vitesse du vent pour la région de la Columbia River Gorge où la société possède des parcs éoliens.
      3:
        image: notes/C4_unplugged_forloops_3.png
        text: "Nous essayons de comprendre la quantité de vent qu'il va y avoir pour que nous sachions combien d'électricité va être produite. Nous donnons cette information en temps réel aux traders d'énergie. Ils achètent et vendent l'électricité suivant les informations qu'on leur donne pour être sûrs que le réseau électrique est équilibré, que vos lumières restent allumées, et que la quantité d'énergie obtenue à partir des parcs soit maximisée."
      4:
        image: notes/C4_unplugged_forloops_4.png
        text: "Nous sommes au centre de contrôle nation d'EverPower Renewables à Portland et c'est ici que les informations arrivent en provenance de toutes nos fermes à travers le pays. Même les ordinateurs les plus puissants aujourd'hui ne peuvent pas simuler l'atmosphère dans le monde. Dans les modèles de prévision par ordinateur, nous avons ce que nous appelons une grille. Chaque point de la grille est une latitude, longitude. Nous devons calculer la physique et essayer de déterminer la vitesse du vent, la température, la pression, ce genre de choses."
      5:
        image: notes/C4_unplugged_forloops_5.png
        text: "Comme ce sont plutôt de grosses grilles et que nous faisons ça dans beaucoup de points nous sommes en boucle sur ces choses des millions et des millions de fois. Tout ce que je fais je vais l'utiliser pour des boucles. Voici par exemple une boucle juste là. Quand vous prévoyez le vent, il y a tellement de paramètres différents qu'il serait impossible pour un humain de s'asseoir et de faire tous ces calculs. Il y a tellement d'aspects différents à tout ce qui va affecter le vent que nous avons besoin d'un modèle informatique pour le prévoir."
    C4_unplugged_madlibs:
      1:
        image: notes/C4_unplugged_madlibs_1.png
        text: "Dans cette leçon, nous allons jouer à remplir les blancs dans l'histoire. Vous avez un modèle que vous pouvez compléter pour créer des histoires similaires qui ont des différences très amusantes."
      2:
        image: notes/C4_unplugged_madlibs_2.png
        text: "Dans cette leçon, nous avons également appris comment faire un modèle abstrait à partir de deux histoires qui ont déjà été créées. L'abstraction est l'art de supprimer les différences et les détails pour que l'on puisse voir comment une solution pourrait marcher pour de nombreux problèmes. C'est très utile en informatique parce que ça nous permet de créer des fonctions qui peuvent être utiles dans différentes situations."
    C4_unplugged_parameters:
      1:
        image: notes/C4_unplugged_parameters_1.png
        text: "Cette leçon s'appelle écrire une chanson à paramètres. Nous allons écrire des chansons maintenant. Parfois, le refrain est juste légèrement différent à chaque fois que tu le chantes. Te souviens-tu de la ferme du vieux MacDonald ? Le refrain est légèrement différent pour chaque animal. Et dans cette ferme, il y a une vache, hiya hiya ho. Le petit changement dans chaque refrain peut être exprimé en utilisant ce que nous appelons des paramètres."
      2:
        image: notes/C4_unplugged_parameters_2.png
        text: "Parfois, une fonction a besoin d'un paramètre. Un paramètre est une information supplémentaire que tu peux passer à une fonction pour la personnaliser pour un besoin spécifique. Quand tu fais des coupes de glaces avec tes amis, tu utilises un procédé similaire à la paramétrisation dans un programme informatique."
      3:
        image: notes/C4_unplugged_parameters_3.png
        text: "La boule de glace vanille sera peut être la même pour toutes les coupes de glace, mais quand tu demandes à tes amis quelles garnitures ils veulent, tu peux obtenir beaucoup de combinaisons différentes. Garniture est le nom de la fonction, et chaque type de garniture est un paramètre. Les fonctions et les paramètres s'associent pour créer de super programmes informatiques, et de bonnes coupes de glaces également."
    C4_unplugged_variables:
      1:
        image: notes/C4_unplugged_variables_1.png
        text: "Cette leçon s'appelle variables dans des enveloppes. Nous allons apprendre comment nous pouvons construire des phrases quand il nous manque encore des éléments d'information. La plupart d'entre nous sont déjà familier avec l'idée de combler un vide. Nous le faisons lorsque nous mettons notre nom sur nos devoirs. Parfois, il n'y a plus d'un mot qui doit être rempli et dans ce cas, nous donnons ce vide une étiquette afin que nous sachions quel élément d'information va où plus précisement."
      2:
        image: notes/C4_unplugged_variables_2.png
        text: "Les variables sont des espaces réservés pour les éléments d'information qui peuvent changer. En utilisant une variable pour les informations manquantes, nous pouvons continuer à travailler sur tout ce qui nous faisaient et laisser quelqu'un d'autre à compléter les informations manquantes par la suite. Dans le logiciel, nous utilisons beaucoup les variables. Nous utilisons les variables comme marque substitutive pour les nom, adresse e-mail et même username. De cette façon, nous pouvons faire le programme savoir où ces détails seront affiche quand l'utilisateur renseigne les. Nous utilisons les variables tout le temps dans notre travail."
      3:
        image: notes/C4_unplugged_variables_3.png
        text: "A n'importe quel moment ou vous devez stocker un élément d'information pour plus tard, nous utilisons évidement une variable. Disons que nous avons besoin de compter le nombre de fois où que l'utilisateur a tweeter. Chaque fois que l'utilisateur tweets, nous allons ajouter un à ce nombre et chaque fois que l'utilisateur supprime un tweet, nous allons réduire ce nombre par un. Chaque fois que nous avons besoin de savoir combien de fois que l'utilisateur a tweeter, nous regarderons seulement cette variable."
    C4_variables_artist:
      1:
        image: notes/C4_variables_artist_1.png
        text: "Une variable est un conteneur, dans que vous pouvez stocker une valeur. Lorsque vous utilisez cette variable dans un algorithme, il ouvre le conteneur et se penche sur la valeur à l'intérieur. Cela vous permet d'écrire des algorithmes intelligents qui se comportent différemment en fonction de la valeur stockée dans la variable."
      2:
        image: notes/C4_variables_artist_2.png
        text: "Par exemple, si vous vouliez écrire un algorithme permettant de dire joyeux anniversaire, vous l'utiliserez 10 fois ! pour mon petit frère, c'est très bien maintenant, mais quand je le lance l'année prochaine je voudrais lui dire, joyeux anniversaire, vous l’exécuterez une 11 fois ! Je pourrais créer une variable appelée âge pour stocker l'âge de mon frère et écrire mon algorithme pour dire joyeux anniversaire, vous avez « âge » à la place. Parce que la variable peut changer, chaque année je peux mettre à jour la variable « âge » égale à « âge » plus 1."
      3:
        image: notes/C4_variables_artist_3.png
        text: "Dans ce puzzle, nous allons utiliser une variable qui définit la longueur de la ligne de que notre artiste dessine. Par la suite dans notre code, le bloc avant déménagement se penchera sur cette variable de longueur pour voir quelle valeur vous avez mis à l'interieur."
    C4_variables_playlab:
      1:
        image: notes/C4_variables_playlab_1.png
        text: "Une variable est un conteneur, dans que vous pouvez stocker une valeur. Lorsque vous utilisez cette variable dans un algorithme, il ouvre le conteneur et se penche sur la valeur présente à l'intérieur. Cela vous permet d'écrire des algorithmes intelligents qui se comportent différemment en fonction de la valeur stockée dans la variable."
      2:
        image: notes/C4_variables_playlab_2.png
        text: "Maintenant, vous allez essayer le playlab où vous trouverez différents jeux et vous pouvez modifier les valeurs des variables comme la vitesse, hauteur, score, afin de changer le jeu. Vous n'aurez pas à changer l'algorithme du jeu pour changer comment il se joue, juste la variable."
      3:
        image: notes/C4_variables_playlab_3.png
        text: "Dans mon travail pour Kindle et sur des rayons x pour les livres, nous appliquons des variables de différentes manières. Une façon que vous pouvez utiliser une variable consiste à stocker les numéros de page d'un livre. Un utilisateur peut augmenter et diminuer la taille de la police sur une page. Basé sur la taille de la police, le nombre de pages dans le livre peut changer. Nous pouvons ajuster il en mémorisant le nombre de pages dans la variable."
    infinity_playlab_events:
      1:
        image: notes/infinity_playlab_events_1.png
        text: "À présent, nous allons apprendre une chose que tous les programmeurs de jeu utilisent tous les jours. On appelle ça des événements. Un événement dit à ton programme d'écouter lorsque quelque chose se produit. Quand cette chose arrive, il effectue une action. Quelques exemples d'évènements sont l'écoute des clics de souris, une touche fléchée, ou un effleurement de l'écran."
      2:
        image: notes/infinity_playlab_events_2.png
        text: "Ici, nous allons faire déplacer Baymax jusqu'à ce qu'il rencontre Hiro et descendre jusqu'à toucher Rapunzel lorsque le joueur utilise le haut/bas touches de direction ou les touches haut/bas. Nous allons utiliser le bloc de flèche et attacher l'acteur de déplacer vers le haut de bloc, donc lorsque le joueur appuie sur la touche flèche haut, tout attaché au « quand flèche vers le haut » est exécuté. Nous ferons la même chose pour faire les Baymax à se déplacer vers le bas. Étape par étape votre jeu devient plus interactif."
    infinity_playlab_intro:
      1:
        image: notes/infinity_playlab_intro_1.png
        text: "Alors à quelle niveau vous êtes ? débutant. J'ai été en Cm2 quand j'ai appris à programmer. J'ai eu mon premier ordinateur quand j'étais en sixième. Ce qui m'excite c'est être en mesure de résoudre les problèmes du peuple. Vous pouvez vous exprimer, vous pouvez construire des choses à partir d'une idée."
      2:
        image: notes/infinity_playlab_intro_2.png
        text: "L'informatique est la base pour beaucoup de choses que les professionnels et étudiants du Collège vont faire pour les vingt ou trente prochaines années. J'aime la programmation parce que j'aime aider les gens. J'ai l'occasion de construire quelque chose qui va rendre la vie plus facile. Je pense que c'est la chose la plus proche qu'il faut une superpuissance. La mise en route est la partie la plus importante. Je suis un débutant moi-même et je veux que l'on apprenne ensemble."
      3:
        image: notes/infinity_playlab_intro_3.png
        text: "Mon nom est John Vechey, je suis l'un des co-fondateurs de PopCap Games. Nous faisons des jeux comme Bejeweled, les Plants vs Zombies et Peggle. Beaucoup de jeux ne sont pas parfait comment votre code, ce n'est pas comment parfait votre art , il s'agit de ce que ça fait et combien c'est amusement. Vous ne pouvez obtenir de sens en l'essayant, en le fabriquant, en apprenant et en adaptant mais vos compétences seront la seul chose qui va faire des jeux."
      4:
        image: notes/infinity_playlab_intro_4.png
        text: "As-tu un jeu vidéo favori ? Eh bien, nous allons mettre un pied devant l'autre tout comme si on utilisait l'aire de jeux. Les bons jeux ont une histoire et chaque histoire a ses acteurs. Ils font des choses comme parler, bouger et interagir les uns avec les autres. Peut-être même que les points de score peuvent être basés sur les règles du jeu. Aujourd'hui nous allons apprendre comment faire toutes ces choses, une par une, avec des personnages de Disney, comme Anna, Elsa, Hiro, Baymax et Raiponce. Nous allons créer un jeu à partir de rien qui pourra être partagé et joué sur un téléphone."
      5:
        image: notes/infinity_playlab_intro_5.png
        text: "Ton écran est divisé en trois parties principales. Sur la gauche se trouve l'espace de jeu, où le programme s'exécutera. Les consignes pour chaque niveau sont écrites sous l'espace de jeu. Cette zone centrale est la boîte à outils et chacun de ces blocs est une portion de code. L'espace blanc à droite est appelé l'espace de travail et c'est là où nous allons construire notre programme."
      6:
        image: notes/infinity_playlab_intro_6.png
        text: |-
          Pour commencer, vous allez avoir besoin de mettre vos blocs au bloc orange "lors du lancement". Vous pouvez mettre plusieurs blocs ensemble en les emportant dehors jusqu’à que vous voyez la ligne jaune, et puis ils se fusionneront. Dans ce premier puzzle, Hiro est le personnage 1 et Baymax le personnage 2. Nous allons avoir besoin de déplacer Hiro pour qu'il rejoigne Baymax en déplaçant le bloc "avancer à droite" dehors et en le mettant avec le bloc "lors du lancement". Une fois que vous avez mis les blocs en place appuyez sur le bouton "Exécuter" pour voir ce que vous avez programmé.
      7:
        image: notes/infinity_playlab_intro_7.png
        text: "Commence et d'ici la fin, tu seras en mesure de créer ton propre jeu avec ces acteurs talentueux qui peuvent interagir, marquer des points, lancer des microbots, des cerises, des casseroles, des étincelles et de la glace... et se faire disparaître l'un l'autre. Ça ne dépend que de toi !"
    infinity_playlab_repeat_forever:
      1:
        image: notes/infinity_playlab_repeat_forever_1.png
        text: "Peux-tu imaginer avoir à répéter quelque chose à l'infini ? Avec un peu de chance, tu n'auras jamais à le faire parce que les ordinateurs sont vraiment bon pour répéter les choses. Ça, c'est le bloc de répétition à l'infini. Tout ce qui se trouve dans ce bloc se déroulera dans le jeu pour toujours."
      2:
        image: notes/infinity_playlab_repeat_forever_2.png
        text: |-
          Donc si nous voulons qu'un acteur fasse quelque chose à plusieurs reprises sans que le joueur ai besoin de faire quoi que ce soit, nous allons mettre les blocs à l'intérieur du bloc "répéter a l'infini". Dans ce puzzle prochain, notre objectif est d'aider Anna à monter et descendre en permanence. Apprendre comment fonctionnent les commandes répéter vous permettra d'économiser énormément de temps plus tard, lorsque vous construisez votre propre jeu.
    tutorial_puzzle_challenge:
      1:
        image: notes/tutorial_puzzle_challenge_1.png
        text: "Que veux-tu devenir quand tu seras grande, Olivia ? Une astronaute. Est-ce que tu sais ce qu'est un programmateur informatique ? Euh, non. Attends, quoi ? Je ne suis pas vraiment comment te l'expliquer, la programmation informatique est assez simple. C'est une suite d'instructions comme une recette de cuisine, tu dois les suivre à la lettre pour obtenir le résultat final que tu recherches."
      2:
        image: notes/tutorial_puzzle_challenge_2.png
        text: |-
          Je peux changer le nombre de pixels, la longueur de la ligne, à l'aide de cette liste déroulante. Quelle longueur était-ce déja ? Vous pouvez voir les instructions à nouveau en regardant sous le bouton "executer". Ici j'ai utilisé le bloc avant déménagement et je vais sélectionner 100 pixels. Je peux supprimer un bloc en le faisant glisser dans la boîte à outils ou la poubelle. Allons le remettre en place.
      3:
        image: notes/tutorial_puzzle_challenge_3.png
        text: |-
          Exécutez le code en appuyant sur Exécuter. Eh bien, cela ne fonctionne pas ! Je vais appuyer sur "reset" et comprendre ce qui est mauvais. Vous pouvez essayer un puzzle autant de fois que vous souhaitez et les sauter et y revenir. Il suffit d'essayer de votre mieux et n'abandonnez pas. Nous allons ajouter un autre bloc "avancer". Cela ne fonctionne toujours pas. Je peux placer un bloc entre autres blocs.
      4:
        image: notes/tutorial_puzzle_challenge_4.png
        text: |-
          Prends un bloc "Tourner" et place-le entre les deux "avancer". Tourne à gauche à 45 degrés. Execute-le à nouveau. Réinitialise, exécute, génial! Voici un autre puzzle. Parfois on te donne le début d'un code que tu dois completer. Ici, tu dois ajouter les longueurs et degrés qui correspondent.
      5:
        image: notes/tutorial_puzzle_challenge_5.png
        text: "Parfois, il arrive de gâcher le code de démarrage. Que-est ce que tu fais dans ce cas là? Tu peux appuyer sur Recommencer et reprendre dès le début. Je vais glisser ce bloc de chiffre dans les différentes zones de pixel. Sélectionné 100 pour pixels, 45 pour degrés et encore 100 pour pixels. Super! Voici l'abeille de Code studio, j'ai besoin de déplacer l'abeille dans chaque fleur et récupérer le nectar."
      6:
        image: notes/tutorial_puzzle_challenge_6.png
        text: |-
          La première fleur est à 3 cases de distance donc j'ai besoin d'avancer trois fois. 1, 2, 3. Ensuite un "Obtenir nectar", puis un autre "Obtenir nectar". Tiens! Ça n'a pas marché! Je mets donc un autre "Avancer" être les "Obtenir nectar" et je l'exécute à nouveau. Trop bien, ça marche! Tu viens d'apprendre comment utiliser les puzzles d'artiste et abeille de Code Studio. Bon courage sur le challenge puzzle de Code Studio.
    unplug1:
      1:
        image: notes/unplug1_1.png
        text: "Que-veux tu devenir quand tu seras grande, Olivia? Euh, une astronaute! Est-ce que tu sais ce qu'est un programmeur? Ouiiii, euh, non. Qu'est-ce que quoi? Je ne sais pas trop comment l'expliquer. Le programmation est très simple. C'est une liste d'instructions, comme une recette. Tu dois suivre chaque instruction étape par étape pour obtenir le résultat final que tu veux."
      2:
        image: notes/unplug1_2.png
        text: "L'informatique est un moyen d'avoir un impact sur le monde. Ça peut être des vidéos de musique, ça peut être des jeux, reconnaitre si quelqu'un est lié à quelqu'un d'autre. Trouver les amis des gens. Tu peux faire plein de choses étranges qui peuvent en réalité sauver des vies. Il faut être motivé(e) je pense. Pour moi, c'est comme un pinceau. Je pense que la bonne programmation n'est pas si différente de l'art."
      3:
        image: notes/unplug1_3.png
        text: "Quand j'ai enfin appris un peu de programmation, ce mûr blanc s'est transformé en un tas de portes et quand tu ouvre ces portes tu trouves un couloir rempli avec plein de portes. La programmation est amusante et simple. tu peux fair ce que ton esprit désire. Finalement, tu commences à ouvrir assez de portes et ça commence à s'éclairer. Pour moi, un programme terminé est comme un bâtiment rempli de lumière. Tous les coins sont illuminés. Le nombre de personnes qui peuvent être touchées par ce que tu fais est avec qui tu peux interagir est quelque chose que le monde n'a jamais vu auparavant."
      4:
        image: notes/unplug1_4.png
        text: "Notre premier cours de cette série est sur le sujet de l'informatique, ce que fait un informaticien et comment tu peux devenir plus responsable dans ton utilisation de la technologie. C'est un cours important mais il y aura beaucoup de texte. A la fin, tu pourras créer ton propre encodage en utilisant tes initiales. C'est une activité amusante et très enrichissante car le binaire est l'une de ces choses qui semble très technique, mais une fois que tu l'as compris c'est comme si tu parlais une langue secrete."
    unplug2:
      1:
        image: notes/unplug2_1.png
        text: "Le cours sur la pensée informatique est destiné à t'apprendre comment prendre un problème gros et difficile et le décomposer en plusieurs problèmes plus simples. L'objectif de ce cours es d'écrire une liste d'instructions que quelqu'un peut suivre à fin de dessiner l'un des monstres inclus dans le plan du cours."
      2:
        image: notes/unplug2_2.png
        text: 'Les étudiants feront des groupes et écriront des instructions. Ils vont ensuite échanger avec un autre groupe qui devra dessiner le monstre. Les groupes écriront les instructions en utilisant les quatre étapes de la pensée informatique : decomposition, repérer les motifs, abstraction et algorithmes.'
      3:
        image: notes/unplug2_3.png
        text: |-
          Tout d'abord, les groupes von decomposer la tâche, ce qui veut dire mettre en place une stratégie de jeu. Ensuite, ils vont repérer les similitudes entre tous les monstres du catalogue. Quand ils trouvent une difference entre les monstres, ces details vont devenir abstraits ou seront supprimés. Par example, un monstre du catalogue a les yeux veritas et un autre a les yeux spritem. Les deux ont des yeux donc on peut écrire une ligne qui dit "le monstre a x yeux".
      4:
        image: notes/unplug2_4.png
        text: "Les étudiants vont donc écrire une liste d'instructions, appelée un algorithme, qui indique quel style doit avoir chaque partie du corps du monstre. Cette liste d'instructions sera donnée à d'autres étudiants qui vont recréer leur propre monstre."
    unplug3:
      1:
        image: notes/unplug3_1.png
        text: In graph paper programming, we help explain how coding works by trying to help people recreate drawings using only arrows and scribbles. One person is given a small drawing on graph paper and they need to go through using only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug3_2.png
        text: 'In this activity, the only symbols you can use are these: move one square forward, one square backward, move one square up, move one square down, change to next color, and fill in your square with color. Once we have that coded up, we can hand it off to another person who can read the code and try and recreate the picture.'
    unplug4:
      1:
        image: notes/unplug4_1.png
        text: In graph paper programming, we help explain how coding works by trying to help people recreate drawings using only arrows and scribbles. One person is given a small drawing on graph paper and they need to go through using only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug4_2.png
        text: "Dans la seconde moitié de l'activité, nous demandons aux élèves de combien de façons différentes, ils peuvent plier un morceau de papier pour créer seize rectangles identiques. Puis vous allez discuter comment plusieurs solutions peuvent conduire au même résultat final et pourquoi certaines solutions sont meilleures dans certaines situations."
    unplug5:
      1:
        image: notes/unplug5_1.png
        text: In graph paper programming, we help explain how coding works by trying to help people recreate drawings using only arrows and scribbles. One person is given a small drawing on graph paper and they need to go through using only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug5_2.png
        text: "Dans la seconde moitié de l'activité, nous demandons aux élèves de combien de façons différentes, ils peuvent plier un morceau de papier pour créer seize rectangles identiques. Puis vous allez discuter comment plusieurs solutions peuvent conduire au même résultat final et pourquoi certaines solutions sont meilleures dans certaines situations."
    unplug6:
      1:
        image: notes/unplug6_1.png
        text: "This activity is called coding with cards and it's great for any age. Like you learned with the if statements in earlier lessons,  during Blockly, if statements have a piece about them you have to evaluate to find out if it's true or false. That's the conditional and it can be used in lots of different ways."
      2:
        image: notes/unplug6_2.png
        text: We take advantage of that by creating programs on paper that you run using a random draw of playing cards. You might have an if statement that says something like if the card you draw is greater than 8, you get a point. Otherwise, your opponent gets a point. You can make it as simple or as complicated as you feel comfortable.
    unplug7:
      1:
        image: notes/unplug7_1.png
        text: "You know how when you look up the lyrics for a song and they define the chorus at the very beginning and then for the rest of the song, they just refer you back to the chorus? That's how you call a function."
      2:
        image: notes/unplug7_2.png
        text: "In this lesson, we define the chorus at the beginning of our song and then we sing through our song and go back and we notice that the class doesn't sing the word chorus, they automatically go up to the top where we define the chorus and sing through that. We use that as a great introduction to how to understand what a program is doing when it defines and calls a function."
      3:
        image: notes/unplug7_3.png
        text: "We use familiar songs including Old Macdonald to talk about how a chorus is called over and over and how sometimes a chorus can change. When you have a song like Old Macdonald, where certain words change, that's a great place to introduce the idea of parameters. Passing certain words through so that you can send extra information to your function. Once we're sure everybody gets it, you can take your own familiar songs and break them up yourself. See if you can figure it out together."
    unplug8:
      1:
        image: notes/unplug8_1.png
        text: Our lesson on abstraction uses the familiar concept of madlibs, where you basically insert a blank in a story that can be filled with lots of different words. We take that idea, challenge kids to come up with their own words for their own stories, and really explain the concept of abstraction.
      2:
        image: notes/unplug8_2.png
        text: "It's all about functions and how you can have a function, like in Old Macdonald, where you have a structure for your chorus but you have something little that changes and you abstract out that little thing that changes and you can fill it in with your own word every time through. But sometimes you have three words that change and so you fill those in with three parameters, that's still pretty helpful."
      3:
        image: notes/unplug8_3.png
        text: "You can have one function that handles lots of different problems. Lots of times people will write separate functions for all those problems, not realizing there's only one little difference. If they could just find a way to handle that one little difference, they could just reuse one function over and over again, instead of having 14 different functions."
    unplug9:
      1:
        image: notes/unplug9_1.png
        text: Relay programming is an extremely fun lesson that gets across way more than computer science. Sometimes everybody is getting a little bit antsy and you want to get them up on their feet. This is a great way to add some excitement to computer science.
      2:
        image: notes/unplug9_2.png
        text: You break everyone up into two groups where they stand in a line and run relay style. The first person in each group runs to the other side of the room where you have a graph paper drawing and a blank piece of paper waiting for them. They write down the first step to creating that image, run back to their line, tag the next player who goes back up to write the next step.
      3:
        image: notes/unplug9_3.png
        text: "This is a great way to get across the idea of debugging, needing to proofread your own work, and needing to check the work of the people done before you. You'll quickly understand how important it is that you be careful in your coding when a whole team is depending on you."
    unplug10:
      1:
        image: notes/unplug10_1.png
        text: "This activity explains in an easy-to-understand way how the internet works. We explain all the terminology you'll need in simple terms so that students can simulate transmitting messages, like an email."
      2:
        image: notes/unplug10_2.png
        text: "Students will transmit messages while pretending to be one of three transmission methods. Wireless internet, DSL or fiber optic. The students who represent wi-fi will have to wear the message they're transmitting on their head because wifi is the most likely to drop some information."
      3:
        image: notes/unplug10_3.png
        text: "The students pretending to be DSL or cable will carry the message on the back of their hand, where they're slightly less likely to drop information. And the students representing fiber optic will get to carry them with both hands. This activity is a great way to understand something that many of us use every day."
    unplug11:
      1:
        image: notes/unplug11_1.png
        text: "So now it's time to step back and take a birds eye view of everything you've done in these past nineteen lessons. This is a great time to call out to students that what they've just done is a huge achievement. They've learned more over these lessons than most adults know about computer science."
      2:
        image: notes/unplug11_2.png
        text: "Discuss as a class or in small groups about their favorite lessons. Once you take a look back at everything you've learned, this is where your students' creativity can shine. Split them into groups and have them create an unplugged lesson of their own. Assign each group a key concept, like functions or algorithms and have lots of craft materials on hand for them to use. Have each group present their new unplugged activity or even set aside another day to do a few of the student created activities."
      3:
        image: notes/unplug11_3.png
        text: Tout le monde ici à a Code.org, nous espérons que vous avez eu une tonne de joie lors de ce cours. Et si votre rêve est de créer la meilleure nouvelle application, utiliser la programmation pour aider à guérir les maladies, ou vous voulez juste être un programmateur stellaire, ce cours a été la première étape dans la réalisation de ses rêves.
    starwars_intro:
      1:
        image: notes/starwars_intro_1.JPG
        text: "Bonjour, je suis Kathleen Kennedy, et je suis la productrice de Star Wars : Le Réveil de la Force. Aujourd'hui, tu travailleras avec une de nos stars, BB-8. BB-8 est un droïde sphérique. Tout ce qu'il fait et tous ses mouvements sont contrôlés par un logiciel. L'informatique a un impact sur tous les secteurs, du marketing à la santé en passant par le cinéma. En fait, des centaines d'ingénieurs informaticiens ont travaillé ensemble pour faire un film comme Le Réveil de la Force."
      2:
        image: notes/starwars_intro_2.JPG
        text: "Bonjour je suis Rachel Rose, je suis ingénieur R&D senior chez ILM, et je dirige l'équipe d’animation et de développement de créatures. Dans Le Réveil de la Force, je suis chargée d'aider les artistes à développer des mouvements pour les parties du personnage qui bougent et qui permettent de rendre le personnage très crédible dans une galaxie très lointaine."
      3:
        image: notes/starwars_intro_3.JPG
        text: "Dans l'heure qui vient, nous allons construire notre propre jeu Star Wars. Nous t'enseignerons les concepts de base de la programmation. Habituellement la programmation est textuelle, mais nous allons utiliser ici des blocs pour écrire des programmes en les glissant et en les déposant. Sous le capot, tu crées toujours code. Après avoir vu les bases avec des blocs, nous allons basculer vers du JavaScript, un des langages de programmation les plus populaires sur le web."
      4:
        image: notes/starwars_intro_4.JPG
        text: "Pour commencer, nous allons travailler avec Rey pour programmer BB-8 pour qu'il marche et ramasse toutes les pièces de ferraille. Ton écran est divisé en trois parties. Sur la gauche se trouve l'espace de jeu Star Wars, où le code s'exécutera. Les instructions pour chaque niveau sont rédigées sous l'espace de jeu."
      5:
        image: notes/starwars_intro_5.JPG
        text: La zone du milieu est la boîte à outils, et chacun de ces blocs est une action que BB-8 peut comprendre.
      6:
        image: notes/starwars_intro_6.JPG
        text: "L'espace blanc à droite est appelé l'espace de travail et c'est là que nous allons construire notre programme."
      7:
        image: notes/starwars_intro_7.JPG
        text: "Si je fais glisser le bloc moveLeft(); dans notre espace de travail et que je clique sur Démarrer, que se passe-t-il ? BB-8 se déplace à gauche d'un bloc sur la grille."
      8:
        image: notes/starwars_intro_8.JPG
        text: "Et si je veux que BB-8 fasse quelque chose après le bloc moveLeft(); ? Je peux ajouter un autre bloc à notre programme. Je vais choisir le bloc moveUp(); et je vais le glisser sous mon bloc moveLeft(); jusqu'à voir la surbrillance. Puis je le lâche et les deux blocs s'assemblent."
      9:
        image: notes/starwars_intro_9.JPG
        text: "Lorsque j'appuie de nouveau sur Démarrer, BB-8 exécute les commandes qui sont empilées de haut en bas dans notre espace de travail. Si jamais tu veux supprimer un bloc, il suffit de le retirer de la pile et de le glisser dans la boîte à outils."
      10:
        image: notes/starwars_intro_10.JPG
        text: Après avoir cliqué sur Démarrer, tu peux toujours cliquer le bouton Réinitialiser pour faire revenir BB-8 au début. Et maintenant, en avant!
    starwars_typing:
      1:
        image: notes/starwars_typing_1.JPG
        text: "Dans les blocs que nous utilisons se trouvent des commandes JavaScript. JavaScript est le langage de programmation plus utilisé par les développeurs professionnels de nos jours. Les blocs sont une excellente façon de commencer l'apprentissage du code et, en fait, les meilleures universités comme Harvard et Berkeley commencent à enseigner de cette façon. Mais une fois que l'on a appris les bases, les ingénieurs écrivent du code en tapant parce que cela leur permet d'aller plus vite."
      2:
        image: notes/starwars_typing_2.JPG
        text: "Nous pouvons taper des centaines de commandes sans avoir à les trouver dans la boîte à outils ou faites-les glisser vers. Vous apprendrez la dactylographie, c'est peut être plus lent au début, mais nous vous souhaitons vous voir essayer."
      3:
        image: notes/starwars_typing_3.JPG
        text: "Dans le coin supérieur droit sur votre espace de travail, vous pouvez cliquer sur le bouton afficher le texte sur n'importe quel puzzle pour passer de blocs à taper le code sous forme de texte."
      4:
        image: notes/starwars_typing_4.JPG
        text: "In the next lesson, we'll start you out in typing mode. Here you can still drag the block from the toolbox or you can type the command name. As you start to type, you'll see names of possible commands show below where you're typing. Instead of typing the whole command name, you can select one of these to move faster. In my job, I use this auto-complete feature all the time when writing code."
      5:
        image: notes/starwars_typing_5.JPG
        text: "When you're typing code, the computer needs you to be very precise. You need to spell and capitalize the command name exactly correctly, including the parentheses and the semi-colon. Even with a small typing mistake, BB-8 cannot understand the code and won't be able to move."
      6:
        image: notes/starwars_typing_6.JPG
        text: When you make an error on the line, the editor highlights it for you so that you can try changing your text to fix it.
      7:
        image: notes/starwars_typing_7.JPG
        text: "Si tu es bloqué, tu peux toujours recommencer avec le bouton de Recommencer et tu peux basculer en mode bloc à tout moment en cliquant dans le coin supérieur droit. Ok, essayons de taper du texte ! Et si tu fais des erreurs, ne soit pas déçu. Aucun programmeur n'y arrive du premier coup."
    starwars_events:
      1:
        image: notes/starwars_events_1.JPG
        text: Bonjour, mon nom est Charita Carter et je suis Manager à Walt Disney Imagineering. Je suis chargée de diriger les équipes qui produisent effectivement les attractions que nos invités viennent essayer. Nous cherchons toujours des moyens pour améliorer cette expérience pour nos clients et la technologie est au cœur de cela.
      2:
        image: notes/starwars_events_2.JPG
        text: Félicitations, tu as réussi ! Tu as programmé BB-8. Maintenant, je pense que nous sommes prêts pour quelque chose de plus difficile. Allons-y. Maintenant que tu as appris les rudiments de la programmation, nous retournons dans le temps pour construire ton propre jeu, mettant en vedette R2-D2 et C3PO.
      3:
        image: notes/starwars_events_3.JPG
        text: "Pour faire un jeu, nous devons en apprendre plus sur quelque chose que les développeurs de jeu utilisent tous les jours: il s'agit des événements. Les évènements disent a ton programme d’écouter ou d’attendre que quelque chose arrive, et quand ça arrive, une action est exécutée."
      4:
        image: notes/starwars_events_4.JPG
        text: Some examples of events are listening for a mouse click, an arrow button or a tap on the screen.
      5:
        image: notes/starwars_events_5.JPG
        text: "Here we're going to make R2-D2 move up to deliver a message to a rebel pilot and then move down to the other rebel pilot. We'll use events to make him move. When the player uses the up/down arrow keys, or the up/down buttons."
      6:
        image: notes/starwars_events_6.JPG
        text: "We use the whenUp() event block and attach the goUp() block to it. When the player presses the up arrow key, the code attached to the whenUp() block is run. And we'll do the same thing to make R2-D2 move down."
      7:
        image: notes/starwars_events_7.JPG
        text: "To do this, we'll use a command called whenUp(). When you drag the command out of the toolbox, you'll see that it starts and ends with a curly bracket instead of a semi-colon. This gives us space to put other commands in the middle. Every command that we place inside these brackets will run when the player presses the up arrow."
      8:
        image: notes/starwars_events_8.JPG
        text: "We want R2-D2 to go up so let's put a goUp(); block inside the command. And we'll do the same thing to make R2-D2 go down."
      9:
        image: notes/starwars_events_9.JPG
        text: Now instead of writing all the code to control our droid in advance, we can let R2-D2 react to button press events that move him around the screen. Step by step, your game is getting more interactive.
    starwars_congrats:
      1:
        image: notes/starwars_congrats_1.JPG
        text: "Hi, my name is Alice and I run the product and engineering teams here at Code.org and I worked on this tutorial that you're playing through right now."
      2:
        image: notes/starwars_congrats_2.JPG
        text: "You just made it to the last level. Congratulations! You just learned everything you need to know to make your own Star Wars game. Now there are no more instructions, no puzzles to solve. You can make your own game and you choose how it works. One more thing, you've unlocked new sounds and new commands to do even more."
      3:
        image: notes/starwars_congrats_3.JPG
        text: '[students speaking] So we made a game basically where you get points when you get puffer pigs. The twist is everytime you get a puffer pig a storm trooper appears. Actually the whole screen is full of puffer pigs and then when you touch 10,000 of them, you win.'
      4:
        image: notes/starwars_congrats_4.JPG
        text: "[students speaking] We made a game where you can't lose and everything you kill gives you points. For my program, I reversed the keys so that whenever you click up, your character goes down and when you go right, your character goes left. It's really hard! Sometimes you just get an advantage, an unfair advantage if you're the developer of the game. Did I get it? Yay!"
      5:
        image: notes/starwars_congrats_5.JPG
        text: "When you're done making your game, choose share to get a link you can share with friends or play your game on your phone. Have fun!"
    starwars_blocks_intro:
      1:
        image: notes/starwars_blocks_intro_1.JPG
        text: "Bonjour, je suis Kathleen Kennedy, et je suis la productrice de Star Wars : Le Réveil de la Force. Aujourd'hui, tu travailleras avec une de nos stars, BB-8. BB-8 est un droïde sphérique. Tout ce qu'il fait et tous ses mouvements sont contrôlés par un logiciel. L'informatique a un impact sur tous les secteurs, du marketing à la santé en passant par le cinéma. En fait, des centaines d'ingénieurs informaticiens ont travaillé ensemble pour faire un film comme Le Réveil de la Force."
      2:
        image: notes/starwars_blocks_intro_2.JPG
        text: "Bonjour je suis Rachel Rose, je suis ingénieur R&D senior chez ILM, et je dirige l'équipe d’animation et de développement de créatures. Dans Le Réveil de la Force, je suis chargée d'aider les artistes à développer des mouvements pour les parties du personnage qui bougent et qui permettent de rendre le personnage très crédible dans une galaxie très lointaine."
      3:
        image: notes/starwars_blocks_intro_3.JPG
        text: "Dans l'heure qui vient, nous allons construire notre propre jeu Star Wars. Nous t'enseignerons les concepts de base de la programmation. Habituellement la programmation est textuelle, mais nous allons utiliser ici des blocs pour écrire des programmes en les glissant et en les déposant. Pour commencer, nous allons travailler avec Rey pour programmer BB-8 pour qu'il marche collecte toutes les pièces de ferraille."
      4:
        image: notes/starwars_blocks_intro_4.JPG
        text: "Ton écran est divisé en trois parties. Sur la gauche, on trouve l'espace de jeu Star Wars où ton code va s'exécuter. Les instructions pour chaque niveau sont écrites juste en dessous de cet espace de jeu."
      5:
        image: notes/starwars_blocks_intro_5.JPG
        text: La zone du milieu est la boîte à outils, et chacun de ces blocs est une action que BB-8 peut comprendre.
      6:
        image: notes/starwars_blocks_intro_6.JPG
        text: "L'espace blanc à droite est appelé l'espace de travail et c'est là que nous allons construire notre programme."
      7:
        image: notes/starwars_blocks_intro_7.JPG
        text: |-
          Si je fais glisser le bloc "déplacer vers la gauche" dans notre espace de travail et que je clique sur Démarrer, que se passe-t-il ? BB-8 se déplace à gauche d'un bloc sur la grille.
      8:
        image: notes/starwars_blocks_intro_8.JPG
        text: |-
          Et si je veux que BB-8 fasse quelque chose après le bloc "déplacer vers la gauche" ? Je peux ajouter un autre bloc à notre programme. Je vais choisir le bloc "déplacer vers le haut" et je vais le glisser sous mon bloc "déplacer vers la gauche" jusqu'à voir la surbrillance. Puis je le lâche et les deux blocs s'assemblent. Lorsque j'appuie de nouveau sur Démarrer, BB-8 exécute les commandes qui sont empilées de haut en bas dans notre espace de travail.
      9:
        image: notes/starwars_blocks_intro_9.JPG
        text: Si jamais tu veux supprimer un bloc, il suffit de le retirer de la pile et de le faire glisser dans la boîte à outils.
      10:
        image: notes/starwars_blocks_intro_10.JPG
        text: Après avoir cliqué sur Démarrer, tu peux toujours cliquer le bouton Réinitialiser pour faire revenir BB-8 au début. Et maintenant, en avant!
    starwars_blocks_events:
      1:
        image: notes/starwars_blocks_events_1.JPG
        text: Bonjour, mon nom est Charita Carter et je suis Manager à Walt Disney Imagineering. Je suis chargée de diriger les équipes qui produisent effectivement les attractions que nos invités viennent essayer. Nous cherchons toujours des moyens pour améliorer cette expérience pour nos clients et la technologie est au cœur de cela.
      2:
        image: notes/starwars_blocks_events_2.JPG
        text: Félicitations, tu as réussi ! Tu as programmé BB-8. Maintenant, je pense que nous sommes prêts pour quelque chose de plus difficile. Allons-y. Maintenant que tu as appris les rudiments de la programmation, nous retournons dans le temps pour construire ton propre jeu, mettant en vedette R2-D2 et C3PO.
      3:
        image: notes/starwars_blocks_events_3.JPG
        text: "Pour faire un jeu, nous devons en apprendre plus sur quelque chose que les développeurs de jeu utilisent tous les jours: il s'agit des événements. Les évènements disent a ton programme d’écouter ou d’attendre que quelque chose arrive, et quand ça arrive, une action est exécutée."
      4:
        image: notes/starwars_blocks_events_4.JPG
        text: Some examples of events are listening for a mouse click, an arrow button or a tap on the screen.
      5:
        image: notes/starwars_blocks_events_5.JPG
        text: "Here we're going to make R2-D2 move up to deliver a message to a rebel pilot and then move down to the other rebel pilot. We'll use events to make him move. When the player uses the up/down arrow keys, or the up/down buttons."
      6:
        image: notes/starwars_blocks_events_6.JPG
        text: "We use the whenUp() event block and attach the goUp() block to it. When the player presses the up arrow key, the code attached to the whenUp() block is run. And we'll do the same thing to make R2-D2 move down. Now instead of writing all the code to control our droid in advance, we can let R2-D2 react to button press events that move him around the screen."
      7:
        image: notes/starwars_blocks_events_7.JPG
        text: Étape par étape, ton jeu devient plus interactif.
    starwars_blocks_congrats:
      1:
        image: notes/starwars_blocks_congrats_1.JPG
        text: "Hi, my name is Alice and I run the product and engineering teams here at Code.org and I worked on this tutorial that you're playing through right now."
      2:
        image: notes/starwars_blocks_congrats_2.JPG
        text: "You just made it to the last level. Congratulations! You just learned everything you need to know to make your own Star Wars game. Now there are no more instructions, no puzzles to solve. You can make your own game and you choose how it works. One more thing, you've unlocked new sounds and new commands to do even more."
      3:
        image: notes/starwars_blocks_congrats_3.JPG
        text: '[students speaking] So we made a game basically where you get points when you get puffer pigs. The twist is everytime you get a puffer pig a storm trooper appears. Actually the whole screen is full of puffer pigs and then when you touch 10,000 of them, you win.'
      4:
        image: notes/starwars_blocks_congrats_4.JPG
        text: "[students speaking] We made a game where you can't lose and everything you kill gives you points. For my program, I reversed the keys so that whenever you click up, your character goes down and when you go right, your character goes left. It's really hard! Sometimes you just get an advantage, an unfair advantage if you're the developer of the game. Did I get it? Yay!"
      5:
        image: notes/starwars_blocks_congrats_5.JPG
        text: "When you're done making your game, choose share to get a link you can share with friends or play your game on your phone. Have fun!"
    mc_intro:
      1:
        image: notes/mc_intro_1.JPG
        text: "Mon nom est Jens Bergensten, mais tout le monde m'appelle Jeb. Je suis responsable développement pour Minecraft chez Mojang, à Stockholm. Je devais avoir 11-12 ans quand j'ai commencé à programmer : un ami de mon père m'avait dit que pour créer des jeux, il fallait apprendre à programmer. J'aime concevoir et comprendre l'architecture des jeux. C'est ce qui me plaît tant dans Minecraft."
      2:
        image: notes/mc_intro_2.JPG
        text: "Dans l'heure qui suit, vous allez apprendre les bases de l'informatique en programmant Alex ou Steve pour évoluer dans une simulation de monde Minecraft."
      3:
        image: notes/mc_intro_3.JPG
        text: 'La programmation se fait normalement par texte, mais nous allons utiliser du Blockly : un système de blocs à glisser-déposer pour écrire des programmes. En sous-main, vous allez créer du code JavaScript.'
      4:
        image: notes/mc_intro_4.JPG
        text: "Ces concepts sont ceux dont les codeurs se servent tous les jours, ce sont les fondations de l'informatique. Chez Mojang, nous nous en servons pour développer Minecraft."
      5:
        image: notes/mc_intro_5.JPG
        text: "Commençons par choisir un personnage. Je vais prendre Alex. On va coder un programme. Nous allons coder un programme pour l'aider à se déplacer à l'écran."
      6:
        image: notes/mc_intro_6.JPG
        text: "Votre écran est divisé en trois grandes sections. À gauche, l'aire de jeu Minecraft, où votre programme s'exécute. Les instructions de chaque niveau sont indiquées dessous."
      7:
        image: notes/mc_intro_7.JPG
        text: "Au milieu, la boîte à outils : chacun de ces blocs est une commande qui dirige les actions d'Alex."
      8:
        image: notes/mc_intro_8.JPG
        text: "L'espace blanc à droite est appelé espace de travail : c'est là que nous allons créer notre programme."
      9:
        image: notes/mc_intro_9.JPG
        text: |-
          Si j'y glisse le bloc "avancer plus" et que je clique sur Démarrer, Alex avance d'une case sur la grille.
      10:
        image: notes/mc_intro_10.JPG
        text: |-
          Pour lui faire faire quelque chose après avoir avancé d'une case, il suffit d'ajouter un autre bloc, par exemple "tourner à droite", et de le glisser sous mon bloc "avancer plus" jusqu'à ce que cette ligne orange apparaisse. Je n'ai plus qu'à le lâcher pour que les deux blocs se connectent. Quand je clique à nouveau sur Démarrer, Alex exécute les commandes répertoriées dans l'espace de travail, de haut en bas.
      11:
        image: notes/mc_intro_11.JPG
        text: Si vous avez besoin de supprimer un bloc, glissez-le de la pile vers la boîte à outils.
      12:
        image: notes/mc_intro_12.JPG
        text: "Pour annuler une modification et revenir au début du niveau, utilisez Recommencer en haut à droite de l'espace de travail. Encore une chose : vous voyez le petit triangle sur les blocs servant à tourner ? Ces triangles indiquent que vous pouvez choisir une autre possibilité. Sur ce, bon code !"
    mc_repeat:
      1:
        image: notes/mc_repeat_1.JPG
        text: Je suis Lydia Winters, directrice de marque chez Mojang qui a développé un certain Minecraft.
      2:
        image: notes/mc_repeat_2.JPG
        text: "Ce que je préfère dans Minecraft, c'est l'exploration. J'aime m'aventurer dans les grottes pour découvrir ce qu'elles contiennent. Moi qui ne suis pas codeuse, je suis très heureuse de suivre les cours Minecraft pour apprendre enfin un peu de code."
      3:
        image: notes/mc_repeat_3.JPG
        text: |-
          Le dernier niveau nécessitait pas mal de blocs "avancer plus". Ce serait plus simple d'indiquer à l'ordinateur d'avancer 4 ou 5 fois. Heureusement, les ordinateurs sont très forts pour répéter les commandes grâce aux boucles de répétition.
      4:
        image: notes/mc_repeat_4.JPG
        text: "Dans Minecraft, ces boucles servent notamment à placer tous les matériaux lors de la création d'un monde (il y en a des milliers). Elles ont aussi d'autres usages plus mineurs, par exemple pour animer les pieds d'Alex quand elle marche. Bref, c'est un puissant outil de programmation."
      5:
        image: notes/mc_repeat_5.JPG
        text: La nuit tombe. Dans les deux prochains niveaux, nous allons construire une maison pour nous abriter. Le bloc de répétition va nous mâcher le travail.
      6:
        image: notes/mc_repeat_6.JPG
        text: "Pour construire un mur de la maison, il suffit d'indiquer à Alex d'avancer et de placer des planches quatre fois ; ou lui dire d'avancer et de placer une planche, puis insérer cette commande dans le bloc de répétition pour l'effectuer plusieurs fois. Je clique sur le bloc de répétition et j'indique le nombre de fois qu'il doit exécuter cette action. Il ne reste plus qu'à construire la maison avant la nuit ! Amusez-vous bien."
    mc_if_statements:
      1:
        image: notes/mc_if_statements_1.JPG
        text: |-
          Nous allons maintenant découvrir les expressions "si", une étape fondamentale dans l'apprentissage de la programmation puisqu'elles aident un ordinateur à prendre des décisions.
      2:
        image: notes/mc_if_statements_2.JPG
        text: "Tous les ordinateurs les utilisent : quand je débloque mon téléphone, il exécute un code indiquant que SI j'ai saisi correctement le mot de passe, il faut débloquer le téléphone. SINON, un message d'erreur apparaît."
      3:
        image: notes/mc_if_statements_3.JPG
        text: |-
          Dans votre code, les expressions "si" indiquent à Steve et Alice de réagir à ce qu'ils voient dans le monde. Par exemple, s'il y a un rocher ou un arbre devant eux, ils peuvent tourner.
      4:
        image: notes/mc_if_statements_4.JPG
        text: "Ici, le but est de ne pas tomber dans la lave. Celle à l'écran est facile à prévoir. Mais que faire pour la lave qu'on ne voit pas, sous la pierre ?"
      5:
        image: notes/mc_if_statements_5.JPG
        text: |-
          Après avoir miné la pierre, il faut vérifier s'il y a de la lave à cet endroit avant d'avancer. S'il y en a, il faut d'abord placer une pierre devant notre personnage pour pouvoir avancer sans danger. Continuez à miner, et pensez à utiliser l'expression "si" pour prendre vos précautions.
    mc_congrats_share:
      1:
        image: notes/mc_congrats_share_1.JPG
        text: "Bravo! Vous avez appris les éléments fondamentaux de l'informatique."
      2:
        image: notes/mc_congrats_share_2.JPG
        text: "Vous pouvez maintenant utiliser ces blocs pour construire votre propre création. Plus besoin d'instructions ni de résoudre des casse-tête : vous pouvez créer ce que vous voulez. À vous de choisir."
      3:
        image: notes/mc_congrats_share_3.JPG
        text: "[élèves qui discutent] Là ça va être chouette. J'ai fait un L avec des torches. J'ai fait un A avec des planches en bouleau. Ça a marché ! On a créé une maison en laine !"
      4:
        image: notes/mc_congrats_share_4.JPG
        text: Une fois votre création terminée, choisissez Share (Partager) et envoyez le lien à vos amis. Amusez-vous bien !
    mc_congrats_no_share:
      1:
        image: notes/mc_congrats_no_share_1.JPG
        text: "Bravo! Vous avez appris les éléments fondamentaux de l'informatique."
      2:
        image: notes/mc_congrats_no_share_2.JPG
        text: "Vous pouvez maintenant utiliser ces blocs pour construire votre propre création. Plus besoin d'instructions ni de résoudre des casse-tête : vous pouvez créer ce que vous voulez. À vous de choisir."
      3:
        image: notes/mc_congrats_no_share_3.JPG
        text: "[élèves qui discutent] Là ça va être chouette. J'ai fait un L avec des torches. J'ai fait un A avec des planches en bouleau. Ça a marché ! On a créé une maison en laine !"
      4:
        image: notes/mc_congrats_no_share_4.JPG
        text: Vous pouvez créer ce que vous voulez. Amusez-vous bien !
    gumball_intro:
      1:
        image: notes/gumball_intro_1.JPG
        text: "Si tu aimerais faire ton propre jeu, c'est très simple. Tout ce dont tu auras besoin, c'est de quelques bases en programmation, et après tu pourras commencer à jouer à ton propre jeu."
      2:
        image: notes/gumball_intro_2.JPG
        text: "Do you have a favorite video game? We're going to take one step toward creating games just like that in PlayLab. Good games have a story and every story has actors. Actors that do things like speak, move and interact with each other. Maybe even score points based on the rules of the game. Today, we'll be learning how to do all these things one by one with fun actors and then build a game from scratch that can be shared and played on a phone."
      3:
        image: notes/gumball_intro_3.JPG
        text: "Today, we'll be learning how to do all these things one by one with fun actors and then build a game from scratch that can be shared and played on a phone."
      4:
        image: notes/gumball_intro_4.JPG
        text: "Ton écran se divise en trois parties. A la gauche, se trouve l'espace de jeu où le programme va s'exécuter. Les instructions pour chaque niveau sont écrites en dessous."
      5:
        image: notes/gumball_intro_5.JPG
        text: Cette zone centrale est la boîte à outils et chacun de ces blocs est un morceau de code.
      6:
        image: notes/gumball_intro_6.JPG
        text: "L'espace blanc à droite est appelé espace de travail : c'est là que nous allons créer notre programme."
      7:
        image: notes/gumball_intro_7.JPG
        text: |-
          Pour commencer, tu devras relier tes blocs au bloc "lors du lancement". Tu peux relier plusieurs blocs ensemble en les glissant jusqu'à ce que tu voies la ligne jaune, et il s'emboiteront alors ensemble.
      8:
        image: notes/gumball_intro_8.JPG
        text: |-
          In this first puzzle, we'll make the actors say something by linking the "say" block to the when run block and typing in your message. Once you have your blocks in place, hit the run button to see what you programmed.
      9:
        image: notes/gumball_intro_9.JPG
        text: "Commence, et d'ici à la fin, tu sera capable de créer ton propre jeu, avec toutes sortes de joueurs qui peuvent interagir, marquer des points, jeter des objets, et se faire disparaitre. Ça ne dépend que de toi !"
    gumball_events:
      1:
        image: notes/gumball_events_1.JPG
        text: "Maintenant nous allons apprendre quelque chose que tous les programmeurs de jeu utilisent tous les jours. On les appelle des événements. Un événement dit à ton programme d'écouter jusqu’à ce qu'il ce passe quelque chose, et quand ça arrive, le jeu exécute une action."
      2:
        image: notes/gumball_events_2.JPG
        text: "Des exemples d’événements sont l'écoute d'un clic de souris ou d'une touche flèche haut ou flèche bas, ou même une tape sur l'écran."
      3:
        image: notes/gumball_events_3.JPG
        text: |-
          Here, we're going to make the actor say something when the player clicks on it. We will use the when clicked block and attach the "say" block to it. When the player clicks, all the blocks attached to this block will be performed.
      4:
        image: notes/gumball_events_4.JPG
        text: There are also when arrow blocks. If you link move blocks to those, you can start to move your actors up, down, left, right, with the arrow keys. Little by little your game is getting more interactive.
    gumball_repeat:
      1:
        image: notes/gumball_repeat_1.JPG
        text: "Peux-tu imaginer si tu avais à répéter quelque chose à l'infini? Heureusement tu n'auras jamais à le faire car les ordinateurs sont vraiment bons à répéter les choses."
      2:
        image: notes/gumball_repeat_2.JPG
        text: "C'est le bloc 'répète à jamais'. Tout ce qui se trouve dans ce bloc se produira 'à jamais' dans le jeu. Si nous voulons qu'un élément fasse quelque chose de façon répétée, continuellement, sans que le joueur ai à intervenir, nous placerons ces blocs à l'intérieur du bloc 'répète à jamais'."
      3:
        image: notes/gumball_repeat_3.JPG
        text: "Dans ce puzzle, notre objectif est d'aider l'élément à faire un travail en continu. Apprendre à utiliser la commande 'répéter' te permettras de gagner énormément de temps plus tard quand tu construiras ton propre jeu."
    iceage_intro:
      1:
        image: notes/iceage_intro_1.JPG
        text: "Si tu aimerais faire ton propre jeu, c'est très simple. Tout ce dont tu auras besoin, c'est de quelques bases en programmation, et après tu pourras commencer à jouer à ton propre jeu."
      2:
        image: notes/iceage_intro_2.JPG
        text: "Do you have a favorite video game? We're going to take one step toward creating games just like that in PlayLab. Good games have a story and every story has actors. Actors that do things like speak, move and interact with each other. Maybe even score points based on the rules of the game. Today, we'll be learning how to do all these things one by one with fun actors and then build a game from scratch that can be shared and played on a phone."
      3:
        image: notes/iceage_intro_3.JPG
        text: "Today, we'll be learning how to do all these things one by one with fun actors and then build a game from scratch that can be shared and played on a phone."
      4:
        image: notes/iceage_intro_4.JPG
        text: "Ton écran se divise en trois parties. A la gauche, se trouve l'espace de jeu où le programme va s'exécuter. Les instructions pour chaque niveau sont écrites en dessous."
      5:
        image: notes/iceage_intro_5.JPG
        text: Cette zone centrale est la boîte à outils et chacun de ces blocs est un morceau de code.
      6:
        image: notes/iceage_intro_6.JPG
        text: "L'espace blanc à droite est appelé espace de travail : c'est là que nous allons créer notre programme."
      7:
        image: notes/iceage_intro_7.JPG
        text: |-
          Pour commencer, tu devras relier tes blocs au bloc "lors du lancement". Tu peux relier plusieurs blocs ensemble en les glissant jusqu'à ce que tu voies la ligne jaune, et il s'emboiteront alors ensemble.
      8:
        image: notes/iceage_intro_8.JPG
        text: |-
          In this first puzzle, we'll make the actors say something by linking the "say" block to the when run block and typing in your message. Once you have your blocks in place, hit the run button to see what you programmed.
      9:
        image: notes/iceage_intro_9.JPG
        text: "Commence, et d'ici à la fin, tu sera capable de créer ton propre jeu, avec toutes sortes de joueurs qui peuvent interagir, marquer des points, jeter des objets, et se faire disparaitre. Ça ne dépend que de toi !"
    iceage_events:
      1:
        image: notes/iceage_events_1.JPG
        text: "Maintenant nous allons apprendre quelque chose que tous les programmeurs de jeu utilisent tous les jours. On les appelle des événements. Un événement dit à ton programme d'écouter jusqu’à ce qu'il ce passe quelque chose, et quand ça arrive, le jeu exécute une action."
      2:
        image: notes/iceage_events_2.JPG
        text: "Des exemples d’événements sont l'écoute d'un clic de souris ou d'une touche flèche haut ou flèche bas, ou même une tape sur l'écran."
      3:
        image: notes/iceage_events_3.JPG
        text: |-
          Here, we're going to make the actor say something when the player clicks on it. We will use the when clicked block and attach the "say" block to it. When the player clicks, all the blocks attached to this block will be performed.
      4:
        image: notes/iceage_events_4.JPG
        text: There are also when arrow blocks. If you link move blocks to those, you can start to move your actors up, down, left, right, with the arrow keys. Little by little your game is getting more interactive.
    iceage_repeat:
      1:
        image: notes/iceage_repeat_1.JPG
        text: "Peux-tu imaginer si tu avais à répéter quelque chose à l'infini? Heureusement tu n'auras jamais à le faire car les ordinateurs sont vraiment bons à répéter les choses."
      2:
        image: notes/iceage_repeat_2.JPG
        text: "C'est le bloc 'répète à jamais'. Tout ce qui se trouve dans ce bloc se produira 'à jamais' dans le jeu. Si nous voulons qu'un élément fasse quelque chose de façon répétée, continuellement, sans que le joueur ai à intervenir, nous placerons ces blocs à l'intérieur du bloc 'répète à jamais'."
      3:
        image: notes/iceage_repeat_3.JPG
        text: "Dans ce puzzle, notre objectif est d'aider l'élément à faire un travail en continu. Apprendre à utiliser la commande 'répéter' te permettras de gagner énormément de temps plus tard quand tu construiras ton propre jeu."
