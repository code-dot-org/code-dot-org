ms:
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Selamat datang ke Satu Jam Kod pertama anda! Mari bersama merasai pengalaman programming pertama anda.
      2:
        image: notes/hoc1_2.jpg
        text: Kita akan menggunakan Blockly, bahasa programming visual di mana anda seret (drag) and lepas (drop) blok untuk menulis kod.
      3:
        image: notes/hoc1_3.jpg
        text: 'Kebanyakan kod ditaip, tetapi Blockly adalah visual. Setiap blok sepadan dengan baris kod "asal".'
      4:
        image: notes/hoc1_4.jpg
        text: Anda akan mempelajari asas sains komputer, konsep yang digunakan di mana jua daripada membuat aplikasi hingga mengawal rover Marikh.
      5:
        image: notes/hoc1_5.jpg
        text: Program ialah set arahan untuk diikuti oleh komputer anda.
      6:
        image: notes/hoc1_6.jpg
        text: Matlamat program pertama ini ialah supaya Angry Bird dapat melalui simpang siur untuk melanggar Green Pig.
      7:
        image: notes/hoc1_7.jpg
        text: Di sebelah kiri ialah Simpang Siur di program anda dimainkan. Arahan untuk setiap Susun Suai berada di bawah Simpang Siur.
      8:
        image: notes/hoc1_8.jpg
        text: Kotak peralatan di tengah mempunyai arahan untuk Angry Bird. Anda akan menggunakannya untuk membina kod.
      9:
        image: notes/hoc1_9.jpg
        text: Di sebelah kanan merupakan ruang kerja anda di mana anda akan menyeret (drag) blok dari kotak peralatan untuk membina program. Untuk membuang blok, seretkan ke dalam bakul sampah di sudut.
      10:
        image: notes/hoc1_10.jpg
        text: 'Setiap blok adalah satu arahan. Jika anda seret blok "maju kehadapan" ke ruang kerja anda dan tekan "Mainkan Program", burung itu akan bergerak satu ruang pada maze.'
      11:
        image: notes/hoc1_11.jpg
        text: To do more than one action, you can drag many blocks to your workspace and attach them together. The bird will do the commands from top to bottom.
      12:
        image: notes/hoc1_12.jpg
        text: 'Jika anda menjalankan aturcara dan ingin betulkan dan cuba lagi, tekan butang "Set Semula".'
      13:
        image: notes/hoc1_13.jpg
        text: Mari dapatkan pig itu!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Hai, saya JR! Setiap pasukan kereta lumba perlukan saintis komputer untuk menang. Mereka menganalisis data dari kereta untuk membuat ia bergerak lebih laju.
      2:
        image: notes/stage5_2.jpg
        text: Dalam susun suai ini, anda akan menjadi pelukis yang melukis garisan di mana dia berada.
      3:
        image: notes/stage5_3.jpg
        text: 'Blok ini menunjukkan "maju kehadapan 100 piksel." Piksel adalah titik-titik kecil di skrin anda.'
      4:
        image: notes/stage5_4.jpg
        text: 'Blok ini menunjukkan "belok kanan 90 darjah." Ini akan pusingkan pelukis anda dengan jumlah yang sama seperti blok "pusing" di dalam susun suai simpang siur.'
      5:
        image: notes/stage5_5.jpg
        text: Klik pada anak panah pada mana-mana blok untuk tukar jumlah gerakan pelukis ke hadapan atau pusing. Banyakkan mencuba untuk biasakan diri dengan blok-blok baru ini.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Hai, saya Paola! Dalam susun suai ini, anda adalah seorang pekebun yang perlu meratakan kebunnya untuk mula menanam tanaman.
      2:
        image: notes/stage9_2.jpg
        text: Bantu dia untuk membuang semua timbunan kotoran dan isikan semua lubang-lubang.
      3:
        image: notes/stage9_3.jpg
        text: Blok-blok baru membuang 1 sodok kotoran dari longgokan dan masukkan 1 sodok kotoran ke lubang.
      4:
        image: notes/stage9_4.jpg
        text: Timbunan dan lubang adalah berlainan saiz, jadi and perlu memberitahu pekebun itu berapa sodok untuk digunakan.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Hi, saya Katie! Salah satu daripada perkara yang paling menarik tentang sains komputer ialah program komputer boleh menjadi interaktif.
      2:
        image: notes/flappy02.jpg
        text: 'Bila ada sesiapa klik, tepuk atau taip  pada komputer atau telefon, ianya mengeluarkan ACARA dan terdapat kod yang menetukan apa yang perlu dilakukan apabilan ACARA berlaku.'
      3:
        image: notes/flappy03.jpg
        text: 'Contohya, anda boleh mempunyai PENGENDALI-ACARA yang mengatakan "apabila mause di klik, mainkan satu bunyi" '
      4:
        image: notes/flappy04.jpg
        text: 'Anda tahu tak permainan FlappyBird? Dengan menggunakan  pengendali ACARA, kita akan belajar untuk program kan FlappyBird buatan kita sendiri!'
      5:
        image: notes/flappy05.jpg
        text: Kod yang akan anda tulis melibatkan menyeret (drag) dan melepaskan (drop) blok yang mewakili arahan untuk komputer. Sebenarnya, setiap blok ini diwakili oleh kod yang sebenar.
      6:
        image: notes/flappy06.jpg
        text: 'Jika anda lihat di ruang kerja, ada beberapa blok hijau yang sudah di isi untuk anda - ini adalah pengendali "acara" '
      7:
        image: notes/flappy07.jpg
        text: 'Jika anda mahu burung untuk MENGEPAK apabila and klik pada tetikus, anda boleh berbuat demikian dengan melekatkan blok "MENGEPAK (FLAP)" pada pengendali acara yang sesuai, dan sekarang di dalam permainan anda bila sahaja anda klik pada tetikus burung itu akan mengepak.'
      8:
        image: notes/flappy08.jpg
        text: Dalam setiap aktiviti susun suai, kami akan memperkenalkan jenis acara yang baru sebagai blok hijau di ruang kerja, dan anda boleh tentukan blok yang sesuai untuk ditambah sebagai tindak balas kepada acara tersebut.
      9:
        image: notes/flappy09.jpg
        text: 'Bila anda lihat anak panah lepas bawah seperti ini, anda boleh tukarkan aturan - seperti bunyi apa yang perlu dimainkan bila flappy menyentuh tanah.'
      10:
        image: notes/flappy10.jpg
        text: Dalam susun suai yang terakhir, anda boleh mencipta permainan anda sendiri dan kongsikan bersama rakan-rakan. Selamat bergembira!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Hi, saya Mark! Mari belajar tentang pusingan. Menggunakan pusingan anda boleh memberitahu komputer untuk ulang mana-mana set tindakan berulang kali, beribu-ribu dan malah berbilion-bilion kali.
      2:
        image: notes/hoc2_2.jpg
        text: Dalam susun suai ini, kita mahu burung gerak kehadapan 5 ruang untuk dapat sampai ke khinzir.
      3:
        image: notes/hoc2_3.jpg
        text: 'Kita boleh gunakan blok "ulang"  yang baru untuk membantu kita.'
      4:
        image: notes/hoc2_4.jpg
        text: 'Daripada mengheret (drag) 5 blok "maju kehadapan"...'
      5:
        image: notes/hoc2_5.jpg
        text: 'Kita boleh letakkan blok "maju kehadapan" di dalam blok "ulang" dan tulis berapa banyak untuk di ulang.'
      6:
        image: notes/hoc2_6.jpg
        text: 'Ini adalah penting: anda boleh memasukan lebih dari satu arahan dalam blok "ulang".'
      7:
        image: notes/hoc2_7.jpg
        text: 'Berseronoklah dengan menggunakan blok "ulang" baru anda!'
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: 'Hi, saya Chris, sebelum menyertai Miami Heat, saya pergi ke Georgia Tech untuk belajar Sains Komputer. Mari cuba blok baru kita, blok "ulang hingga".'
      2:
        image: notes/hoc3_2.jpg
        text: Bagaimana jika kita tidak tahu sejauh mana burung itu perlu bergerak untuk dapat sampai kepada khinzir?
      3:
        image: notes/hoc3_3.jpg
        text: 'Jika kita letakkan "maju kehadapan" dalam blok "ulang hingga", burung itu akan bergerak ke depan HINGGA ia sampai ke khinzir (atau melanggar ke dinding).'
      4:
        image: notes/hoc3_4.jpg
        text: 'Ini adalah penting: seperti sebelum ini, kita boleh letakkan banyak blok ke dalam blok "ulang hingga" dan blok tersebut akan diulang.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'Hai, saya Bill! Mari belajar konsep asas baru: Penyata "Jika". Ini adalah bagaimana komputer membuat keputusan.'
      2:
        image: notes/hoc4_2.jpg
        text: 'Anda sendiri menggunakan penyata "Jika" setiap hari. Sebelum anda pergi ke luar setiap pagi, anda kata JIKA hujan di luar, saya perlu pakai jaket saya.'
      3:
        image: notes/hoc4_3.jpg
        text: Kita boleh memberitahu zombie untuk menyemak jika terdapat laluan ke kiri, dan jika dia jumpa laluan di sebelah kiri, kita boleh buatkan dia belok ke arah itu.
      4:
        image: notes/hoc4_4.jpg
        text: 'Untuk menulis kod ini, mari kita mengheret blok "Jika" dan letakkan blok "belok kiri" di dalamnya.'
      5:
        image: notes/hoc4_5.jpg
        text: 'Sekarang, jika kita letakkan blok "maju kehadapan" di atas dan satu blok "ulang" disekeliling semua, zombie akan mencari  jika terdapat laluan untuk ke kiri atau ke kanan setiap kali dia bergerak. Arahan "ulang" adalah penting untuk mencari belokan dalam setiap langkah.'
      6:
        image: notes/hoc4_6.jpg
        text: Penyata Jika adalah amat penting dalam sains komputer. Satu daripada program pertama yang saya tulis ialah permainan tic-tac-toe, dan terdapat penyata Jika yang menyatakan JIKA orang lain akan menang, halang tempat yang membolehkan mereka menang.
      7:
        image: notes/hoc4_7.jpg
        text: 'Berseronok menggunakan blok "Jika"!'
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: |-
          Hi, my name is Saloni. I use computer science to help solve problems in health and medicine. Let's learn about the "if else" block. It looks like the "if" block, but it has an extra part at the end that says "else".
      2:
        image: notes/hoc5_2.jpg
        text: |-
          If I put a "move forward" block in the spot where it says "do" and a "turn left" block where it says "else" that means that the zombie will choose between 2 options. IF there is a path ahead, the zombie will move forward, and OTHERWISE (there isn't a path ahead), the zombie will turn left.
      3:
        image: notes/hoc5_3.jpg
        text: |-
          Just like the "if" block, we can put "if else" blocks inside a "repeat" blocks so that the zombie keeps moving and the "if else" block will keep checking if there's somewhere to turn.
      4:
        image: notes/hoc5_4.jpg
        text: Now, get those zombies where they belong!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: "An if-else statement is a decision between two things. Let's see how we can use an if-else statement with our buddy Scrat the squirrel."
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: |-
          This block looks the same as the "if" block, but there's an extra part at the bottom that says "else". If I put a "move forward" block where it says "do" and a "turn left" block where it says "else", that means Scrat the squirrel will move forward if there's a path ahead. If there's not a path ahead, Scrat will turn left.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: |-
          It's making a decision and doing one of the two actions based on that decision. And just like "if" blocks, you can put "if-else" blocks inside "repeat" blocks.
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: "Now let's help Scrat the squirrel get that acorn!"
    function:
      1:
        image: notes/stage13_1.jpg
        text: Hi, saya Brina, seorang jurutera di Instagram. Fungsi adalah baris-baris kod tertentu yang anda ingin gunakan berulang-ulang kali, jadi dariapda menulis kod banyak kali, anda boleh menggunakan satu blok.
      2:
        image: notes/stage13_2.jpg
        text: Kita akan belajar bagaimana untuk menyebut fungsi. Sebutan fungsi mempunyai sebuah bintang di sudut. Nama fungsi tersebut ditulis di baris atas.
      3:
        image: notes/stage13_3.jpg
        text: 'Blok-blok yang ada di dalam penyebut memberitahu kita apa yang ia lakukan. Jadi penyebut fungsi ini dipanggil "isi 5" dan ia terdiri daripada sebuah blok "ulang" dan blok "isi".'
      4:
        image: notes/stage13_4.jpg
        text: 'Penetapan berada pada ruang kerja, tetapi peladang kita tidak mainkan fungsi sehingga kita leret (drag) blok fungsi "isi 5" kita dari kategori fungsi.'
      5:
        image: notes/stage13_5.jpg
        text: 'Jom kembalikan "fun" kembali pada "FUNgsi!" '
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'Hai, saya Makinde! Jom kita belajar tentang ini "blok apabila." '
      2:
        image: notes/stage9_6.jpg
        text: '"Blok apabila" akan buat apa sahaja yang anda masukkan SELAGI penyata di atas adalah BENAR.'
      3:
        image: notes/stage9_7.jpg
        text: Sebagai contoh, jika peladang berdiri di atas timbunan, dia akan terus membuang 1 sodok APABILA masih ada lagi timbunan di bawahnya.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: Hai, saya Trina, dan saya bekerja untuk Pixar. Saya telah bekerja untuk beberapa filem, termasuk Shrek.
      2:
        image: notes/stage11_2.jpg
        text: 'Ini pusingan "kaunter" yang baru. Ia akan melakukan tindakan berulang kali dan anda boleh buat tindakan berubah  sedikit pada setiap kali.'
      3:
        image: notes/stage11_3.jpg
        text: 'Dalam contoh ini, pusingan "kaunter" kita nyatakan "kira dengan kaunter dari 50 hingga 90 selang 10" dan di dalamnya, kita ada blok "lukis empat segi". Leret (drag) blok "kaunter" dari bahagian "pembolehubah" ke dalam bahagian "panjang".'
      4:
        image: notes/stage11_4.jpg
        text: Maksudnya, pelukis kita akan melukis segi empat dengan 50 piksel panjang sisi, kemudian ditambahkan 10 dan lukis segi empat dengan 60 piksel panjang sisi. Kemudian ia akan bertambah 10 dan lukisan empat segi sehingga mencapai 90. Dengan itu kita akan mempunyai segi empat dengan panjang sisi 50, 60, 70, 80 dan 90.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Hai, saya Janete, dan saya seorang jurutera di Zynga.
      2:
        image: notes/stage15_2.jpg
        text: Bagaimana jika kita ingin melukis beberapa Segitiga dan mempunyai panjang saiz yang berbeza?
      3:
        image: notes/stage15_3.jpg
        text: Kita boleh menulis semua kod itu dengan tangan atau kita boleh menggunakan fungsi dengan penetapan.
      4:
        image: notes/stage15_4.jpg
        text: 'Untuk buat ini, klik bintang biru pada tetapan fungsi "lukis segi tiga". Kemudian seret (drag) "nama input" ke dalam blok "input".'
      5:
        image: notes/stage15_5.jpg
        text: 'Kemudian jika anda menulis "panjang" di tempat yang di mana ia mengatakan "x" dan tekan "Enter" anda akan mewujudkan panjangn input untuk fungsi anda.'
      6:
        image: notes/stage15_6.jpg
        text: 'Kemudian klik pada bintang. Sekarang, anda mahu klik pada kategori pembolehubah dan seret (drag) blok "panjang" ke dalam blok "maju kehadapan" tetapan fungsi anda. Dan seret daripada blok nombor yang lama.'
      7:
        image: notes/stage15_7.jpg
        text: 'Untuk menggunakan fungsi anda dengan penetapan, klik pada kategori fungsi tersebut dan leret (drag) fungsi "lukis segi tiga dengan panjang".'
      8:
        image: notes/stage15_8.jpg
        text: Sekarang anda boleh gunakan blok matematik untuk memasukkan nombor yang berbeza untuk melukis segi tiga yang berbeza saiz.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: Tahniah! Dengan susun suai terakhir yang anda selesaikan, anda telah menulis kod yang boleh arahakan mana-mana robot bagaimana untuk mencari jalan melalui simpang siur atau terowong apa jua panjang, sama ada ia adalah zombie, burung, rover Marikh atau kereta pandu sendiri.
      2:
        image: notes/hoc6_2.jpg
        text: 'Konsep-konsep asas yang digunakan adalah jantung setiap program atau aplikasi yang anda akan pernah cuba.  Kita belajar tentang ulang pusingan, penyata ulang sehingga , penyata jika, dan penyata jika  lain.'
      3:
        image: notes/hoc6_3.jpg
        text: Jika anda suka Satu Jam Kod and yang pertama, lawati code.org untuk meneruskan pengajian anda dalam sains komputer! Setelah tamatkan 20 jam kursus, and akan menguasai asas programming, dan boleh mula belajar bagaimana menulis applikasi telefon, arahan robot, permainan, anda sebut saja.
      4:
        image: notes/hoc6_4.jpg
        text: |
          Teknoloji mengubah segalanya yang kita buat dan tidak kira jika anda tua atau muda:
          programming adalah menyeronokkan, kreatif dan sesiapa sahaj boleh belajar!
    20_wrapup:
      1:
        image: notes/bird.png
        text: Papar nota yang akan datang!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: "Hi, my name is Lyndsey. I model, act, and write my own apps. Let's use code to join Anna and Elsa as they explore the magic and beauty of ice."
      2:
        image: notes/frozen1_2.jpg
        text: "You'll create snowflakes and patterns as you ice skate and make a winter wonderland that you can then share with your friends."
      3:
        image: notes/frozen1_3.jpg
        text: "In the next hour, you're going to learn the basics of how to code. Traditional programming is usually in text, but we'll use Blockly, which uses visual blocks that you can drag and drop to write programs. This is how even university students learn the basics. Under the hood, you're still creating code."
      4:
        image: notes/frozen1_4.jpg
        text: "A program is a set of instructions that tells a computer what to do. Let's build a code, or a program, that will help Elsa create a simple line. We will use this later to create more complex patterns."
      5:
        image: notes/frozen1_5.jpg
        text: "Your screen is split into three main parts. On the left, is the ice surface where you'll run your program. The instructions for each level are written right below the surface."
      6:
        image: notes/frozen1_6.jpg
        text: This middle area is the toolbox, and each of these blocks is an action that Elsa and Anna can do.
      7:
        image: notes/frozen1_7.jpg
        text: |-
          The white space on the right is called the workspace, and this is where we'll build our program. To move around the ice surface, you'll use the "Move Forward" block.
      8:
        image: notes/frozen1_8.jpg
        text: 'Here, the "Move Forward" block says, "move forward by 100 pixels." When we press "Run", what happens? Elsa moves forward a certain amount on the screen, 100 pixels in fact! Pixels are basically very tiny squares on your computer screen.'
      9:
        image: notes/frozen1_9.jpg
        text: 'The other block we have in this puzzle says "turn right by 90 degrees." And when we use this "Turn Right" block, that makes Elsa turn a certain amount. You can play around with how far you want Elsa to turn. The angle is measured from the path ahead of Elsa. So, this is a 90 degree turn. And this is a 120 degree turn.'
      10:
        image: notes/frozen1_10.jpg
        text: Remember, you can change the number of pixels and degrees by clicking the arrows next to them.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: "Hi, I’m Paola! Computers are really good at repeating actions. You can count to 10, 20, or 100. But a computer can count to a billion or a trillion. It won't get bored and it will only take a few seconds. Whether it's counting, or drawing, or anything--computers can repeat things hundreds or even billions of times."
      2:
        image: notes/frozen2_2.jpg
        text: 'In programming, we call this a loop. A loop is how you repeat your code over and over again. For the next puzzle, your goal is to help Anna create a square with the "Repeat" block.'
      3:
        image: notes/frozen2_3.jpg
        text: 'Any blocks of code you put inside the "Repeat" block will be repeated in sequence, as many times as you want.'
      4:
        image: notes/frozen2_4.jpg
        text: 'To draw a square, you can use the "Move Forward" and "Turn Right" block 4 times. But the easier way is to tell the computer to "Move Forward" and "Turn Right by 90 degrees" once, and then tell it to repeat this pair of actions 4 times. To do that, you need to put the "Move Forward" and "Turn Right" block inside a "Repeat" block.'
      5:
        image: notes/frozen2_5.jpg
        text: |-
          Remember, you can change the number in the "Repeat" block to anything, and it will repeat what's inside the block that many times.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Hi, I’m Chris Bosh. I’m a professional basketball player, and I coded in college.
      2:
        image: notes/frozen3_2.jpg
        text: One of the most important concepts in computer science is how to define new commands. Most computer languages have only about 100 words or commands. And really, the art and magic is in defining your own new words out of these building blocks.
      3:
        image: notes/frozen3_3.jpg
        text: "Once you've taught a computer how to do an action once using this sequence of commands, you can make up your own name for that action so it's easy to repeat it later. When you define your own command and give it a name, that's called a function."
      4:
        image: notes/frozen3_4.jpg
        text: "Hi, I’m Jess. When programming with blocks, you would use functions if there are a set of actions you would like to use lots of times. For example, you've written code to create a square."
      5:
        image: notes/frozen3_5.jpg
        text: 'You can define this as a function called "create a square." '
      6:
        image: notes/frozen3_6.jpg
        text: Now you have a new block that you can use multiple times to create multiple squares.
      7:
        image: notes/frozen3_7.jpg
        text: A lot of simple shapes can be used to create more complex patterns. In the next puzzle, the code you recently wrote to make a circle is available to you as a new function that can make circles of different sizes. Can you use it to help Elsa create intricate and beautiful patterns in the snow?
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: "So far you've been making an animation or a story that does the exact same thing every time you run it. Now you can make an interactive game that you can actually play."
      2:
        image: notes/playlab_2.png
        text: |-
          There's the "when arrow" block and the "move actor" block. You can put these blocks together to move the actors around with the arrow keys.
      3:
        image: notes/playlab_3.png
        text: And there are some blocks that do stuff when actors collide or are clicked. Check them out and have fun!
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: "We're going to create games using Play Lab. Good games have a story, and every story has actors. We'll learn how to make our actors like witches, alinens, and animals speak, move, and interact with each other. By the end of this tutorial, you can build a game from scratch and share it with your friends."
      2:
        image: notes/playlab_intro_2.png
        text: Your screen is split into 3 main parts. On the left is the game space where your program will run. The instructions for each level are written below.
      3:
        image: notes/playlab_intro_3.png
        text: "The middle area is the toolbox, and each of these blocks is a piece of code. The white space on the right is called the workspace and this is where we'll build our program."
      4:
        image: notes/playlab_intro_4.png
        text: |-
          To start off, you'll need to link your blocks to the orange "when run" block. You can link multiple blocks together by dragging them out until you see the yellow line, and then they'll snap together.
      5:
        image: notes/playlab_intro_5.png
        text: |-
          In this first puzzle, our actor is a penguin and we'll be making it say "Hello!" by dragging the say block out, linking it to the when run block, and typing in "Hello." We can also make the penguin move by using the move right and move left blocks. Once you have your blocks in place, hit the run button to see what you've programmed.
      6:
        image: notes/playlab_intro_6.png
        text: "Get started and by the end, you'll be able to create your own game with all kinds of players that can interact, turn happy or sad, score points, or throw fireballs, or even vanish each other. It's all up to you and the game you want to make."
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: "Now, we're going to learn about something that all game programmers use everyday. They're called events. An event tells your program to listen for when something happens. When that thing happens, it performs an action."
      2:
        image: notes/playlab_events_2.png
        text: Some examples of events are listening for a mouse click, an arrow button, or a tap on the screen.
      3:
        image: notes/playlab_events_3.png
        text: |-
          Here, we're going to make the space bot greet the earthlings when a player clicks on him. We'll use the "when clicked" block and attach the "say" block to it. When the player clicks on the space bot, everything attached to this "when clicked" event block will be performed. What does your alien say?
      4:
        image: notes/playlab_events_4.png
        text: 'There are also "when arrow" blocks. If you link the "move" blocks to these, you can start to move your actors up, down, left, or right. Step by step, your game is getting more interactive.'
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: 'This is the "repeat forever" block. Anything inside this block will happen forever in the game.'
      2:
        image: notes/playlab_repeat_forever_2.png
        text: |-
          If we want an actor to do something repeatedly, without the player having to do anything, we'll put those blocks inside the "repeat forever" block.
      3:
        image: notes/playlab_repeat_forever_3.png
        text: In this next puzzle, our goal is to help the wizard patrol the boundaries of the kingdom, left and right continuously. Learning how the repeat commands works, will save you a ton of time later when you build your own game.
