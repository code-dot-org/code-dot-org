bg:
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Добре дошли в първия си час по програмиране! Нека да се потопим направо в първото си предизвикателство.
      2:
        image: notes/hoc1_2.jpg
        text: 'Ние ще  използваме Blockly. Това е визуален език за програмиране, където трябва само да плъзнете и пуснете блоковете за да напишете код.'
      3:
        image: notes/hoc1_3.jpg
        text: 'Кодът се пише, но Blockly е визуален език. Всеки блок, обаче, отговаря на един ред от "истински" код.'
      4:
        image: notes/hoc1_4.jpg
        text: Ще научите основите на компютърните науки, концепции, които се използват навсякъде дори за създаването на приложения за контролиране на марсоходът на Марс.
      5:
        image: notes/hoc1_5.jpg
        text: 'Програмата е набор от инструкции за вашия компютър, които  да следва.'
      6:
        image: notes/hoc1_6.jpg
        text: Целта на вашата първа програма е да посочите на ядосаната птица пътят, по който да достигне и удари зеленото прасе.
      7:
        image: notes/hoc1_7.jpg
        text: От лявата страна е лабиринтът, където се изпълнява вашата програма. Инструкциите за всеки пъзел са под лабиринта.
      8:
        image: notes/hoc1_8.jpg
        text: 'В средата на кутията с инструменти има команди за ядосаната птица. Използвайте ги,  за да изградите вашия код.'
      9:
        image: notes/hoc1_9.jpg
        text: Вдясно е вашата работна област, където ще можете да плъзгате блокове от кутията с инструменти. За да изтриете блок просто го плъзнете в кошчето.
      10:
        image: notes/hoc1_10.jpg
        text: 'Всеки блок е една инструкция. Ако плъзнете "продължи напред" блок във вашата работна област и натиснете "Старт", птицата ще се премести едно квадратче  напред в лабиринта.'
      11:
        image: notes/hoc1_11.jpg
        text: За да направите повече от едно действие, можете да плъзнете много блокове във вашата работна област и да ги прикрепите заедно. Птицата ще извърши командите отгоре надолу.
      12:
        image: notes/hoc1_12.jpg
        text: 'Ако стартирате програмата и искате да поправите кода си за да опитате отново, натиснете бутона "Начално състояние".'
      13:
        image: notes/hoc1_13.jpg
        text: Да вървим да хванем тези прасета!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: 'Здравейте аз съм младши! На всеки състезателен екип са му  необходими компютърни учени, за да спечели. Те анализират данни от колата за да може тя да се подобри.'
      2:
        image: notes/stage5_2.jpg
        text: В тези пъзели вие ще бъдете художник, който чертае линия зад себе си, където и да отиде.
      3:
        image: notes/stage5_3.jpg
        text: 'Този блок се казва "премества напред със 100 пиксела." Пикселите са много малки точки на вашия екран.'
      4:
        image: notes/stage5_4.jpg
        text: 'Този блок се казва, "завърта надясно на 90 градуса." Той ще завърти вашия художник във определената посока както "обърни" блоковете при ядосаните птици.'
      5:
        image: notes/stage5_5.jpg
        text: Кликнете върху стрелката в някой от тези блокове, за да промените броя на движенията на художника напред или при въртене. Поиграйте си с блоковете, за да се запознаете с техните възможности.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Здравейте аз съм Паола! В тези пъзели Вие сте фермер, който трябва да заравни нивата си за да започне засаждане на семена.
      2:
        image: notes/stage9_2.jpg
        text: Трябва да премахнете всички купчинки и запълните всички дупки.
      3:
        image: notes/stage9_3.jpg
        text: Новите блокове премахват една лопата мръсотия от купчината и запълват с една лопата дупката.
      4:
        image: notes/stage9_4.jpg
        text: Купчинките и дупките са с различни размери, така че вие трябва да кажете на фермера колко лопати да използва.
    flappy_intro:
      1:
        image: бележки/flappy01.jpg
        text: Здравейте, аз съм Кейти! Едно от най-вълнуващите неща в компютърните науки е, че компютърните програми може да бъдат интерактивни.
      2:
        image: бележки/flappy02.jpg
        text: 'Всеки път, когато някой кликне, докосне, или пише на компютър или на телефон - това действие създава СЪБИТИЕ, а определен програмен код (МАНИПУЛАТОР НА СЪБИТИЕ) решава какво да се случи, когато СЪБИТИЕТО възникне.'
      3:
        image: бележки/flappy03.jpg
        text: 'Например, може да използваш МАНИПУЛАТОР НА СЪБИТИЕ, който казва "при кликване с мишката, изпълни звук" '
      4:
        image: бележки/flappy04.jpg
        text: Чувал ли си за играта FlappyBird? С помощта на манипулатори на събития, ще се научим как да програмираме наша собствена версия на FlappyBird!
      5:
        image: бележки/flappy05.jpg
        text: Програмите, които ще създадеш, ще се състоят от блокове, които ще приплъзнеш и присъединиш. Тези блокове представляват команди за компютъра и зад всеки от тях стои истински програмен код.
      6:
        image: бележки/flappy06.jpg
        text: 'Ако огледаш работната площ (в дясната част на екрата), ще забележиш няколко зелени блока, които сме попълнили за теб - това са "манипулатори на събития".'
      7:
        image: бележки/flappy07.jpg
        text: 'Ако искаш птицата да ПЛЕСНЕ с крила при КЛИКВАНЕ с мишката, ще трябва да присъединиш блока "плесни с крила" към манипулатора на съответното събитие. Така всеки път, когато кликнеш с мишката по време на игра, птица ще плесне с криле.'
      8:
        image: бележки/flappy08.jpg
        text: При всеки пъзел от тази поредица, ние ще добавим нови събития като зелени блокове на работния плот, а ти ще решиш какви други блокове да добавиш в отговор на тези събития.
      9:
        image: бележки/flappy09.jpg
        text: 'Когато видиш стрелка за падащо меню като тази, това означава, че можеш да промениш настройките - като например какъв звук да се изпълни, когато птицата удари земята.'
      10:
        image: бележки/flappy10.jpg
        text: Във финалния пъзел ще успееш да създадеш своя собствена игра и да я споделиш със своите приятели. Забавлявай се!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Здравейте аз съм Марк! Нека да обясня какво представляват командите за повторения. Тези команди казват на компютъра да повтаря отново и отново набор от действия, хиляди или дори милиони пъти.
      2:
        image: notes/hoc2_2.jpg
        text: В този пъзел ние трябва да накараме птицата да се придвижи напред с 5 квадратчета, за да стигне до прасето.
      3:
        image: notes/hoc2_3.jpg
        text: Можем да използваме новите блокове за повторение за да си помогнем.
      4:
        image: notes/hoc2_4.jpg
        text: 'Вместо да плъзгаме 5 "върви напред" блокове...'
      5:
        image: notes/hoc2_5.jpg
        text: 'Ние ще поставим "върви напред" блока вътре в блока  за повторение и ще напишем число, за да кажем колко пъти да се повтори действието.'
      6:
        image: notes/hoc2_6.jpg
        text: 'това е важно: можете да поставите повече от една команда в блока за повторене.'
      7:
        image: notes/hoc2_7.jpg
        text: Насладете се на използването на вашия нов блок за повторение!
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: 'Здравейте аз съм Крис. Преди да постъпя в Маями Хийт, бях в Джорджия Tech за да уча компютърни науки. Нека опитаме нашия нов " повтаряй докато" блок.'
      2:
        image: notes/hoc3_2.jpg
        text: Какво става, ако ние не знаем колко далеч птицата трябва да се премести за да стигне до прасето?
      3:
        image: notes/hoc3_3.jpg
        text: 'Ако сложим "предвижи се напред" блок вътре в блока, "повтаряй докато", птицата ще продължи напред, докато достигне прасето (или ще се блъсне в стената).'
      4:
        image: notes/hoc3_4.jpg
        text: 'И това е важно: както преди, можем да сложим няколко блока вътре в блока, "повтори докато", и всички те ще бъдат повтаряни.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'Здравейте аз съм Бил! Нека да научим нова основна концепция: "Ако". С нея ние учим компютрите да вземат решения.'
      2:
        image: notes/hoc4_2.jpg
        text: 'Вие използвате "ако" концепцията всеки ден. Преди да отидете навън всяка сутрин, вие си казвате, ако навън вали, трябва да си взема яке.'
      3:
        image: notes/hoc4_3.jpg
        text: Ние можем да кажем на зомбито да провери дали има път наляво, и ако то открие път, да се придвижи в тази посока.
      4:
        image: notes/hoc4_4.jpg
        text: 'За да напишем код за това, нека да поставим "Ако" блок и в него да вмъкнем "Завий наляво".'
      5:
        image: notes/hoc4_5.jpg
        text: 'Сега ако сложим "върви напред" блок над него и блок за повторение около всичко, всеки път, когато зомбито се движи, то ще проверява дали има път наляво. Командата за повторение е от решаващо значение, за да проверите за завой на всяка стъпка.'
      6:
        image: notes/hoc4_6.jpg
        text: '"Ако" твърденията са много важни за компютърните науки. Една от първите програми, която съм написал е игра на кръстчета и нули, и съдържаше "ако" твърдение: ако другият човек е на път да победи, компютърът трябва да блокира мястото, което му позволило да спечели.'
      7:
        image: notes/hoc4_7.jpg
        text: 'Забавлявайте се с помощта на "Ако" блока!'
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: 'Здравейте моето име е Салони. Използвам компютърни науки, за да помогна за решаването на проблемите в здравеопазването и медицината. Нека да сe научим  да използваме "ако иначе" блока. Той изглежда като блокът "Ако", но има допълнителна част в края, която казва "иначе".'
      2:
        image: notes/hoc5_2.jpg
        text: 'Ако сложим блок за предвижване в мястото, където пише "ако"  и "завърти наляво" блок където пише "друго" това означава, че зомбито ще избира между две опции. Ако има път напред, зомбито ще се движи напред, или (ако липса такава възможност)- зомбито ще завие наляво.'
      3:
        image: notes/hoc5_3.jpg
        text: 'Точно като при "Ако" блока, можем да сложим "ако иначе" блокира вътре в блокове за повторение, така че зомбито ще продължава да се движи и "ако иначе" блокът ще прави проверка, ако има някъде да се завие.'
      4:
        image: notes/hoc5_4.jpg
        text: Сега, преведете зомбитата до местата, където те трябва да стигнат!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: '"Ако иначе" твърдението е решение между две неща. Нека видим как можем да използваме "ако иначе" с нашия приятел Scrat катерицата.'
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: 'Този блок изглежда по същия начин като "Ако" блока, но е добавена допълнителна част накрая, която казва "иначе". Ако поставите блок за движение, където се казва "ако" и блок за завиване наляво, където се казва "иначе", това означава, че Scrat катерицата ще се движи напред ако е има път напред. Ако няма път напред, Scrat ще завие наляво.'
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: 'Това е вземане на решение за правене на едно от двете действия въз основа на това решение. И точно като "Ако" блоковете, можете да поставите "Ако иначе" блоковете в  блокове за повторение.'
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: Сега, нека да помогнем на Scrat катерицата да вземе жълъда!
    function:
      1:
        image: notes/stage13_1.jpg
        text: Здравейте аз съм Брина, инженер от Instagram. Функция е няколко реда с код, които искаме да използваме отново и отново, така че вместо да повтаряме изписването на кода, ние използваме само един блок.
      2:
        image: notes/stage13_2.jpg
        text: Ще научите как да дефинирате функции. Дефинициите имат звезда в ъгъла на блока си. Името на функцията е написано на най-горния ред.
      3:
        image: notes/stage13_3.jpg
        text: 'Блоковете, които влизат вътре в дефиницията ни казват какво прави тя. Дефиницията, която ще използваме се нарича "запълни 5" и тя се състои от блок за повторение и блок за запълване.'
      4:
        image: notes/stage13_4.jpg
        text: 'Дефиницията се намира на работната област, но нашият фермер няма да изпълни функцията, докато ние не поставим блок за функция "запълва 5" от категорията функции.'
      5:
        image: notes/stage13_5.jpg
        text: 'Нека върнем "fun" обратно във "FUNкцията!" '
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'Здравейте аз съм Макинде! Нека да научим за "докато" блока.'
      2:
        image: notes/stage9_6.jpg
        text: '"Докато блокът" ще повтаря действие, докато се отчете, че действието е извършено.'
      3:
        image: notes/stage9_7.jpg
        text: Например ако фермерът е стъпил върху купчина, той ще продължи да я премахва с по 1 лопата, докато все още има купчина под него.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: Здравейте аз съм Трина, и работя за Pixar. Работила съм в няколко филми, включително и в Шрек.
      2:
        image: notes/stage11_2.jpg
        text: 'Това е нашият нов "брояч" за цикли. Той ще извършва действия отново и отново, а вие можете да направите така, че действията да се променят леко всеки път.'
      3:
        image: notes/stage11_3.jpg
        text: 'В този пример, нашият "брояч" на цикли  казва "ще броя с брояч от 50 до 90  през 10" и вътре в него, ние имаме нашият "начертай квадрат" блок. Плъзнете блока "брояч" от раздела "Променливи" в мястото за "дължина".'
      4:
        image: notes/stage11_4.jpg
        text: Това означава, че художникът ще начертае квадрат, който има 50 пиксела дължина на страните, тогава той ще добави 10, и ще начертае квадрат с дължина на страните 60 пиксела. Тогава ще продължи докато начертае квадрат със страни 90. Така ще имаме квадрати със страни 50, 60, 70, 80 и 90 пиксела.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Здравейте аз съм Джанет и съм инженер в Zynga.
      2:
        image: notes/stage15_2.jpg
        text: 'Как ще начертаете куп триъгълници  със различни размери на страните им?'
      3:
        image: notes/stage15_3.jpg
        text: Можем да напишем целия този код на ръка или можем да използваме функция с параметри.
      4:
        image: notes/stage15_4.jpg
        text: 'За да добавите параметър на функцията, щракнете върху синята звезда. След това плъзнете "въведете име" във "вмъкни" блока.'
      5:
        image: notes/stage15_5.jpg
        text: 'Тогава, ако  напишете "дължина" на мястото на "х" и натиснете "Enter", вие ще създадете нов параметър "дължина" за вашата функция.'
      6:
        image: notes/stage15_6.jpg
        text: 'След това кликнете върху звездата. Сега кликнете върху категорията "променливи" и плъзнете блок "дължина" в "премества напред" блок във вашата дефиниция на функция. Плъзнете стария блок за номер от външната страна.'
      7:
        image: notes/stage15_7.jpg
        text: 'За да използвате вашата функция с параметри, щракнете върху категорията функции и изберете "Начертай триъгълник с дължина" функция.'
      8:
        image: notes/stage15_8.jpg
        text: Сега можете да използвате математически блок за да въведете различни числа и да начертаете триъгълници с различни размери.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: Поздравления! С последната загадка, която разгадахте, вие просто написахте код, който може да каже на всеки робот как да си придвижи, без да се губи в лабиринта или тунела. Това можете да повторите и със зомбито, птицата, марсохода или дори самоуправляващ се автомобил.
      2:
        image: notes/hoc6_2.jpg
        text: 'Основните понятия, които използвахте са в основата на всяка програма или приложение, които сте ползвали. Изучихме циклите на "повтори няколко пъти" и "повторение, докато" и  командите "ако" и "ако / иначе".'
      3:
        image: notes/hoc6_3.jpg
        text: 'Ако ви харесва  първия час на кодиране, посетете code.org за да продължите образованието си в компютърните науки! След като завършите нашият 20 часов курс, вие ще сте усвоили основите на програмирането и може да се научите как да създавате програми за телефони, инструкции за роботи, игри, и др.'
      4:
        image: notes/hoc6_4.jpg
        text: 'Технологията променя всичко, което правим и няма значение, ако сте млад или стар: програмирането е забавно, това е творчество  и всеки може да се научи!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: Очаквайте скоро показването на бележки!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Здравейте моето име е Линдзи. Модел съм, създавам и пиша мои собствени приложения. Нека да използваме кода, за да се присъединим към Анна и Елза, докато те опознават магията и красотата на леда.
      2:
        image: notes/frozen1_2.jpg
        text: Вие ще създадете снежинки и десени от следите на зимните кънки и ще направите зимна приказка, която след това можете да споделите с приятелите си.
      3:
        image: notes/frozen1_3.jpg
        text: В следващия час ще се научите на основите на кодирането. Традиционното програмиране обикновено е текстово, но ние ще използваме Blockly, който използва визуални блокове, които можете да плъзнете и пуснете, за да пишете програми. Така дори студентите изучават основите. Под капака, Вие все още създавате код.
      4:
        image: notes/frozen1_4.jpg
        text: Програмата е набор от инструкции, които казват на компютъра какво да прави. Нека построим код, или програма, която ще помогне на Елза да създаде проста линия или отсечка. Ще използваме това по-късно, за да създадем по-сложни модели.
      5:
        image: notes/frozen1_5.jpg
        text: Екрана е разделен на три основни части. В ляво е повърхността на леда, където ще изпълнявате вашата програма. Инструкциите за всяко ниво са написани точно под повърхността.
      6:
        image: notes/frozen1_6.jpg
        text: Тази средна област е кутията с инструменти, и всеки от тези блокове е действие, което Елза и Анна могат да извършат.
      7:
        image: notes/frozen1_7.jpg
        text: Празно пространство вдясно се нарича работната област, и това е мястото, където ние ще изградим нашата програма. За да се местите по повърхността на леда, ще използвате блок за преметване.
      8:
        image: notes/frozen1_8.jpg
        text: 'Тук, блокът за преместване казва, "премества напред със 100 пиксела." Когато натиснете "Старт", какво се случва? Елза се придвижва напред на екрана, точно 100 пиксела в действителност! Пикселите са много малки квадратчета на екрана на компютъра.'
      9:
        image: notes/frozen1_9.jpg
        text: 'Друг блок, който имаме в този пъзел казва "завърти надясно на 90 градуса." И когато ние използваме този блок, караме Елза да се завърта на определени градуси. Можете да опитате блока и да  завъртите Елза на колкото искате градуси. Ъгълът се измерва от пътя пред Elsa. Така че това е завой на 90 градуса. И това е завой на 120 градуса.'
      10:
        image: notes/frozen1_10.jpg
        text: Не забравяйте, че можете да промените броя на пикселите и градусите чрез натискане на стрелките до тях.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: Здравейте аз съм Паола! Компютрите са наистина добри в повтарянето на действия. Можете да броите от 10, 20 или 100. Но един компютър може да брои до един милиард или трилиони. Той няма да се отегчи и ще му отнеме само няколко секунди. Дали това е броене, или чертеж, или нещо подобно--компютрите могат да повтарят неща стотици или дори милиарди пъти.
      2:
        image: notes/frozen2_2.jpg
        text: В програмирането, ние наричаме това цикъл. Цикъл е, когато се повтаря код отново и отново. За следващия пъзел целта ви е да помогнете на Анна да създаде квадрат с блок за повторение.
      3:
        image: notes/frozen2_3.jpg
        text: Всички блокове с код, които поставяте вътре в блока за повторение, ще се повтарят последователно, толкова пъти, колкото искате.
      4:
        image: notes/frozen2_4.jpg
        text: 'За да нарисувате квадрат, можете да използвате "премества напред" и "завърта надясно" блок 4 пъти. Но по-лесен начин е да кажете на компютъра да "премества напред" и "завърта надясно на 90 градуса" веднъж и след това той да повтаря тази двойка действия 4 пъти. За да направите това, трябва да поставите двойката действия в блок за повторение.'
      5:
        image: notes/frozen2_5.jpg
        text: 'Не забравяйте, че можете да промените номера в "Повтори" блока  и той ще  повтаря това, което е вътре в него много пъти.'
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Здравейте аз съм Крис Бош. Аз съм професионален баскетболист, и се учех да кодирам в колежа.
      2:
        image: notes/frozen3_2.jpg
        text: Едно от най-важните понятия по компютърни науки е как да се дефинират нови команди. Повечето компютърни езици имат само около 100 думи или команди. И наистина, изкуството и магията е в определянето на собствени нови думи, създадени на основата на тези градивни блокове.
      3:
        image: notes/frozen3_3.jpg
        text: След като сте научили компютъра как да направи едно действие, с помощта на тази последователност от команди, можете да дадете собствено име за това действие, така че е лесно да го повторите по-късно. Когато дефинирате своя собствена команда и й давате име, вие създавате функция.
      4:
        image: notes/frozen3_4.jpg
        text: Здравейте аз съм Джес. При програмирането с блокове, трябва да използвате функции за набор от действия, които искате да използвате много пъти. Например ако сте написали код, за да създадете квадрат.
      5:
        image: notes/frozen3_5.jpg
        text: 'Можете да дефинирате това като функция, наречена "чертае квадрат." '
      6:
        image: notes/frozen3_6.jpg
        text: Сега имате нов блок, който можете да използвате няколко пъти за да създадете няколко квадратчета.
      7:
        image: notes/frozen3_7.jpg
        text: 'Много от простите форми може да се използват за създаване на по-сложни модели. В следващия пъзел кода, който наскоро написахме да  направи един кръг е достъпен за вас като нова функция, която може да направи кръгове с различни размери. Можете ли да използвате това, за да помогнете на Елза да създаде сложен и красив модел в снега?'
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: Ние ще създаваме игри като използваме Игрална Лаборатория. Добрите игри имат история, а всяка история си има герои. Ще се научим как да караме нашите герои като вещици, извънземни и животни да говорят, да се движат и да комуникират едни с други. До края на този урок, ще можеш да създаваш игра от подръчни средства и ще я споделяш със твоите приятели.
      2:
        image: notes/playlab_intro_2.png
        text: Екрана е разделен на 3 основни части. Вляво е игралното поле, където вашата програма ще се изпълни. Инструкции за всяко ниво са дадени под него.
      3:
        image: notes/playlab_intro_3.png
        text: Средната зона е кутията с инструменти, и всеки от тези блокове е част от код. Празното пространство вдясно се нарича работната област и това е мястото, където ние ще изградим нашата програма.
      4:
        image: notes/playlab_intro_4.png
        text: 'За начало, присъединете вашите блокове към оранжевия "при стартиране" блок. Можете да свържете множество блокове заедно като ги приплъзнете един към друг, докато не видите жълтата линия; след това ги пуснете и те ще се присъединят заедно.'
      5:
        image: notes/playlab_intro_5.png
        text: 'В този първи пъзел, нашият актьор е пингвин и ние ще го накараме да казва "Здравей!" като плъзнем "казва" блок, и го свържем към "при стартиране"  блока. Ще напишем в него "Здравей." Ние можем да движим пингвина с помощта на блоковете за движение. След като сте поставили блоковете на място, натиснете бутона Старт, за да видите какво сте програмирали.'
      6:
        image: notes/playlab_intro_6.png
        text: Започнете и до края, ще можете да създадете своя собствена игра с всички видове герои, които могат да си взаимодействат, щастливи или тъжни, да печелят точки, или да хвърлят огнени топки, или дори да изчезват от полето. Това е всичко е за вас и играта, която искате да направите.
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: Време е да научим неща, които всички програмисти на игри използват всеки ден. Те се наричат манипулатори на събития. Манипулаторът на събитие казва на програмата ви да слуша за събитие, което може да се случи. Когато събитието се случи, програмата ви отговаря на събитието като извършва дадено действие.
      2:
        image: notes/playlab_events_2.png
        text: Някои примери на събития слушат за щракване с мишката, бутон със стрелка или натискане на екрана.
      3:
        image: notes/playlab_events_3.png
        text: 'Тук ние ще да се накараме космическия робот да каже "Поздрави, земляни!", когато играчът кликне върху него. Ние ще използваме "когато е кликнато върху" блок и "казва" блока, които ще прикрепим към "при стартиране" блока. Когато играчът кликне върху робота, всичко, прикрепено към "когато е кликнато върху" събитийния блок ще се извърши. Какво ли би казало вашето извънземно?'
      4:
        image: notes/playlab_events_4.png
        text: 'Има и "когато стрелка" блокове. Ако свържете блокове "премести" с тях, можете да движите актьорите нагоре, надолу, наляво, или надясно. Стъпка по стъпка играта става по-интерактивна.'
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: 'Това е "повтаря завинаги" блокът. Ако поставите друг блок вътре в него, той ще се повтаря завинаги в играта.'
      2:
        image: notes/playlab_repeat_forever_2.png
        text: 'Ако искаме актьора да  направи нещо няколко пъти, се налага да поставим тези блокове вътре в блока, "повтаря завинаги".'
      3:
        image: notes/playlab_repeat_forever_3.png
        text: 'В този пъзел нашата цел е да помогнем на магьосника да патрулира по границите на кралството, наляво и надясно. Научете как  работят командите за повторение, това ще ви спести един тон време по-късно, когато създавате своя собствена игра.'
    C1_artist_intro:
      1:
        image: notes/C1_artist_intro_1.png
        text: Това са блокове за чертане. Използвайте правилните, за да преместите художника, където нужно, за да потъмни сивите линии.
      2:
        image: notes/C1_artist_intro_2.png
        text: Това са блокове за скачане. Когато ги използвате, Вашият художник се премества, но без да рисува. Използвайте ги, за преминаване към следващата сива линия.
    C1_bee_level_intro:
      1:
        image: notes/C1_bee_level_intro_1.png
        text: 'Не са ли пчелите супер готини? В този набор от пъзели, целта Ви е да помогнете на пчелата да стигне до цветята и да получи нектар от тях, а след това да отлети до кошера и да направи мед. Трябва да използвате "вземи нектар" и "прави мед" блокове за това упражнение.'
      2:
        image: notes/C1_bee_level_intro_2.png
        text: 'Всяко цвете има различен брой нектар: 1, 2, 3 или повече. Ние знаем колко е нектара в червените цветя, изписан под тях. Така че не забравяйте да вземете всичкия нектар от цветето, преди да продължите напред. Също така, всяка пита може да поеме само: 1, 2, 3 или повече мед. Не забравяйте да направите толкова мед, колкото медената пита може да побере.'
      3:
        image: notes/C1_bee_level_intro_3.png
        text: 'Ако сте в състояние да получите всичкия нектар и направите всичкия мед, ще успеете да преминете към следващото ниво. В противен случай трябва да опитате този пъзел отново. Играйте известно време и вижте какво е чувството да си "пчела" програмист!'
    C1_bee_loops:
      1:
        image: notes/C1_bee_loops_1.png
        text: Цикълът е повторение на дейността. Така, когато трябва да свърша нещо, поглеждам рамката и това, което е сложено вътре, така аз ще го повтарям няколко пъти. Направете няколко цикъла, които извършват дейност няколко пъти.
      2:
        image: notes/C1_bee_loops_2.png
        text: 'В това ниво ние искаме пчелата да събере три нектара от цветето. Вместо да използвате три "вземи нектар" блокове, използвайте блок за повторение, за да получите нектар три пъти. Натиснете "Старт" и вижте дали нещата ще се получат. Хубаво!'
    C1_bigevent_unplugged:
      1:
        image: notes/C1_bigevent_unplugged_1.png
        text: Този урок се нарича голямото събитие. Тук става въпрос за това, как можем да контролираме нашите програми и всъщност променя начина, по който програмата се изпълнява с помощта на събития, като натискане на бутон или клик на мишката.
      2:
        image: notes/C1_bigevent_unplugged_2.png
        text: За този урок, Вие ще бъдете контролирани с хартиено дистанционно управление. Това е точно като жива видео игра.
      3:
        image: notes/C1_bigevent_unplugged_3.png
        text: Събитието е действие, което предизвиква нещо да се случи. Това е като, когато щракнете върху бутона на мишката и уеб страницата се зарежда. Това е събитие. Когато докоснете екрана на таблета, за да превъртите, това е събитие, също. Събитията са чудесен начин потребителя директно да си взаимодейства с Вашата програма всеки път.
      4:
        image: notes/C1_bigevent_unplugged_4.png
        text: 'Нещата се случват, когато ние ги предизвикаме. Ако се чувстваме гладни -отиваме до хладилника. Ние чуваме когато пощальонът дойде и ни остави писма в пощенската кутия и отиваме да ги вземем от там. Това е точно като събитията от натискане на бутон или преместване на джойстик. Те са нещо, което се случва и  кара да се направи нещо.'
      5:
        image: notes/C1_bigevent_unplugged_5.png
        text: 'Във видео игрите има събитие, което се нарича "Update". То се случва 30 или 60 пъти в секунда. За програмистите на видеоигри, това е почти толкова важно колкото събитието от бутоните или джойстика.'
      6:
        image: notes/C1_bigevent_unplugged_6.png
        text: 'Основното събитие, за което ще следим дали ще се случи, се нарича "Update". Ако се случи, ние ще проверим за движение с джойстика "Оо, дали някой не е тласнал джойстика? Да или не?" Без събития играчът не може да се движи, не може да скочи, а Вие не бихте могли да контролирате какво се случва, а видеоигрите нямаше да интересни.'
    C1_building_foundation:
      1:
        image: notes/C1_building_foundation_1.jpg
        text: В пясъчната скулптура, вие трябва да знаете, че провалът е част от програмата. Но ако продължите да опитвате, нещата ще се получават по-добре и по-вълнуващо. Постоянството е името на играта. Опитайте и ще се влюбите в него.
      2:
        image: notes/C1_building_foundation_2.jpg
        text: Този урок се нарича изграждане на основа. В този урок ние ще работим за решаване на трудна задача. Вие ще трябва да разберете как да се направите основа с определена височина, колкото чаша за кафе и да трябва да е достатъчно стабилна, за да задържи теглото на една книга.
      3:
        image: notes/C1_building_foundation_3.jpg
        text: Може да има моменти, в които нашите основи няма да издържат. Може да има моменти, в които ние ще сме на път да се откажем. Може да има много от тези моменти. Но ако ние продължаваме да се опитваме отново и отново, тогава ще успеем.
      4:
        image: notes/C1_building_foundation_4.jpg
        text: Постоянството е това, което ни спира да се откажем. Ако искате да създадете нещо ново и различно, по пътя ще има много неуспехи.
      5:
        image: notes/C1_building_foundation_5.jpg
        text: Номерът за постигане на устойчивост е да продължавате и да се учите от своите грешки и да не се отказвате, ако сте разочаровани. Wooo!
    C1_getting_loopy:
      1:
        image: notes/C1_getting_loopy_1.png
        text: Здравейте моето име е Miral Kotb и аз съм създател на Iluminate. В моята работа има нещо, което ние използваме в танците и програмирането на светещи костюми. И това са циклите! Циклите повтарят едно действие отново и отново.
      2:
        image: notes/C1_getting_loopy_2.png
        text: Когато се повтаря нещо няколко пъти, като моите действия да запазя обръча да се върти, аз използвам цикъл за това действие. Това е един цикъл. Това е един цикъл. И това е един цикъл.
      3:
        image: notes/C1_getting_loopy_3.png
        text: Днес ние ще имаме денс парти. Ние ще повтаряме и разучаваме нов танц. Повторение. Ние ще научим за циклите, които се използват в танците. Ще научим няколко лесни стъпки и ще ги повтаряме отново и отново до края на танца.
      4:
        image: notes/C1_getting_loopy_4.png
        text: Тук са стъпките, които трябва да научите. Ръкопляскане с ръцете. Поставете ръцете зад главата си. Поставете ръцете си на кръста. Вдигнете лявата ръка нагоре. Повдигнете дясната ръка. Доста лесно, нали? Вие ще откриете, че можете да съкратите указанията от поставянето на някои танцови стъпки в цикли.
      5:
        image: notes/C1_getting_loopy_5.png
        text: Ние действително използваме повторения в нашите танци. Танцьорите, както и компютрите, са свързани в мрежа. Аз може да повтарям светлините през дрехите на танцьорите отново и отново. В цикъла, в рамките на едно повторение, аз бих могъл да накарам едни и същи елементи да преминават през танцьорите отново и отново и след това, в рамките на цикъла, да поискам да увелича скоростта на светлината. И всичко това се създава чрез цикли. Циклите са важни за програмирането, защото те правят работата ни по-лесна.
    C1_happy_maps_unplugged:
      1:
        image: notes/C1_happy_maps_unplugged_1.png
        text: Този урок се нарича щастливи карти. Днес ние ще помогнем на нашия малък приятел Flurb се да си намери плодове.
      2:
        image: notes/C1_happy_maps_unplugged_2.png
        text: 'Накарай Flurb да отиде до плода. За да направите това трябва да разберете накъде Flurb трябва да отиде и да го упътвате със стрелките. Например: за да стигне Flurb до ябълката, в каква посока Flurb трябва да тръгне.'
      3:
        image: notes/C1_happy_maps_unplugged_3.png
        text: За да го заведете там, очертайте в кръг посоката, в която трябва да си отиде.
      4:
        image: notes/C1_happy_maps_unplugged_4.png
        text: Създайте свой алгоритъм като залепите стрелките до картата, която се опитвате да разрешите. Втората е подобна, но посоката ще е надолу.
      5:
        image: notes/C1_happy_maps_unplugged_5.png
        text: Това е като програмиране с хартия!
    C1_maze_debugging:
      1:
        image: notes/C1_maze_debugging_1.png
        text: Дебъгване е намиране и отстраняване на проблеми. Има много начини да се търсят проблеми. Един от най-лесните е да се движите стъпка по стъпка до там, където нещо се е объркало. Тук аз се опитвам да направя кълбо назад на греда, но без да падам.
      2:
        image: notes/C1_maze_debugging_2.png
        text: Аз преминах през всяка част стъпка по стъпка и разбрах къде е моята грешка. Аз не пускам ръцете си от гредата правилно. Така че, аз опитах друго кълбо назад на греда с моята нова позиция на ръцете и аз го направих. Бях наистина радостна, отстраних грешките си в правенето на кълбо назад.
      3:
        image: notes/C1_maze_debugging_3.png
        text: За да научим повече за отстраняване на грешките, ние ще започнем с набор от блокове вече в сцената. Ще забележите, че с тези блокове няма да се стигнете до целта. Ние трябва да ги проследите блоковете и да ги оправите. Какво се е объркало? Ще забележите, че имате нужда да продължите на запад с един блок повече.
      4:
        image: notes/C1_maze_debugging_4.png
        text: 'Нека да се определим това чрез добавяне на друг блок на запад и натиснете "Старт,, за да видим дали е правилно. Уау, направил си го!'
    C1_maze_intro_sequencing:
      1:
        image: notes/C1_maze_intro_sequencing_1.png
        text: За този пъзел трябва да доведете птицата до прасето. Погледнете пъзела и вижте какви посоки трябва да се поставят.
      2:
        image: notes/C1_maze_intro_sequencing_2.png
        text: 'Трябва да плъзнете блоковете от кутията с инструменти към работната област. Уверете се, че са под "при стартиране" блока и когато прецените, че сте готови с правилното решение - щракнете върху бутона "Старт" и вижте дали птица стига до прасето.'
    C1_maze_loops:
      1:
        image: notes/C1_maze_loops_1.png
        text: Едно от нещата, в които компютрите са наистина добри е повтарянето на команди. Като човек, за Вас е наистина скучно, ако трябва да направите едно и също нещо много и много пъти. Но компютърът може да прави едно и също нещо милиони или дори милиарди пъти и да не се отегчава, а дори ще изпълнява това винаги наистина добре.
      2:
        image: notes/C1_maze_loops_2.png
        text: 'Например, ако исках да пожелая на всички рожденици от Facebook "Честит рожден ден" като им изпратя имейл, това можеше да ми отнеме повече от век, ако пишех всички тези имейли по отделно. Но само с няколко линии код, може да имам система, която ще изпрати имейл до всички във Facebook, които имат рожден ден днес.'
      3:
        image: notes/C1_maze_loops_3.png
        text: 'За да придвижим птицата към прасето в това ниво..., вместо да плъзнете три "С" блокове към работната област, ще използвате "повтори" блок. Плъзнете "повтори" блок към работната област и въведете 3 на мястото на???. След това плъзнете С блок в "повтори" блока и натиснете "Старт. Честито! Готово!'
    C1_moveitmoveit_unplugged:
      1:
        image: notes/C1_moveitmoveit_unplugged_1.png
        text: Този урок се нарича премести го, премести го. Заедно, ние ще напишем програма, за да преведем съучениците си от компаса до усмихнатия емотикон.
      2:
        image: notes/C1_moveitmoveit_unplugged_2.png
        text: Но усмихнатия емотикон е с лицето надолу и само един човек знае как се стига до него. Нека да стартираме програмата.
      3:
        image: notes/C1_moveitmoveit_unplugged_3.png
        text: Програма е алгоритъм, който е кодиран в нещо, което може да се стартира от една машина. Повечето от нас мислят за програма като нещо, което пишем за компютър. Програми са наистина добри за това, но те също са полезни и в други места. Можете да направите своя собствена програма, игра или дори да програмирате робот да прави неща за Вас.
    C1_going_places_safely:
      1:
        image: notes/C1_going_places_safely_1.png
        text: 'Моето име е Джеремая. Здравей! Аз съм на седем години. Обичам да играя на компютъра на майка ми, но аз винаги първо я питам. "Мамо, може ли да отида на компютъра? Разбира се скъпи!"'
      2:
        image: notes/C1_going_places_safely_2.png
        text: Обичам компютъра на майка ми, защото мога да вляза в интернет. Интернет е като вашия квартал. Можете да посетите готини места, можете да говорите със семейство и приятели и можете да научите много нови неща.
      3:
        image: notes/C1_going_places_safely_3.png
        text: Вчера посетих една зоологическа градина, която е близо до къщата ми. Видях бебе зебра. Аз ѝ направих снимка и ѝ промених цвета на ивиците, след това добавих шапка и добавих снимката към моята колекция на чалнати животни. Жестоко! По-късно отидох на място, много далеч. Посетих Кения. Това е държава в Африка. Много зебри живеят там.
      4:
        image: notes/C1_going_places_safely_4.png
        text: 'Понякога в интернет аз говоря с хора, които познавам, като баба ми, която живее в друг град. Здравей, бабо! Тя ми прави "бисквитки", които ще ми изпрати за моя рожден ден. "Сладко, искам интернет да има миризмограф!" Мога да говоря с различни хора в интернет, като братовчед ми, но говоря само с хора, които познавам.'
      5:
        image: notes/C1_going_places_safely_5.png
        text: Това, което ми харесва най-много в Интернет е, че могат да се играят Забавни игри. Да събирам точки! Също така, обичам да рисувам и създавам нови неща и да ги споделям с приятелите си. Готино! Понякога посещавам уеб сайтове, където да науча нови неща, но винаги се придържам към уеб сайтове, които са подходящи за мен. Уау динозаври!
      6:
        image: notes/C1_going_places_safely_6.png
        text: 'Интернет е супер забавно място. Но точно както когато пресичате улица във вашия квартал, вие трябва да бъдете внимателни, когато сте онлайн. Това са три правила за запомняне. Правило №1: Винаги питам първо родителите си. Правило №2: Говорим само с хора, които познаваме. Правило №3: Да посещаваме места, които са точно за нашата възраст.'
      7:
        image: notes/C1_going_places_safely_7.png
        text: Уау, това беше забавно! Време е за вечеря. Аз излизам сега. Не мога да дочакам да влезна отново, за да видя къде ще ме заведе интернет следващия път.
    C1_pair_programming:
      1:
        image: notes/C1_pair_programming_1.png
        text: Днес, Вие ще научите за програмирането по двойки. Тук работите в екип. Защо двама души трябва да използват един компютър? Тъй като две глави мислят по-добре от една. В програмирането по двойки, Вие и вашият партньор ще седите заедно пред един компютър и двамата ще да работите върху един проект.
      2:
        image: notes/C1_pair_programming_2.png
        text: 'В програмирането по двойки едното лице е водачът и другият е навигатор, просто като да караш кола на рали. Водачът е пред компютъра и използва клавиатурата и мишката или сензорен екран и контролира основните действия на компютъра. Другият човек е навигатор. "Навигаторът" помага на водача, отговаряйки на въпроси му и посочва потенциални проблеми или грешки.'
      3:
        image: notes/C1_pair_programming_3.png
        text: Комуникацията е ключът към успешното програмиране по двойки. Без обиди! Трябва да сте съобразителни, да не бъдете деспотичен навигатор, защото никой не обича втори шофьор на задната седалка. Вие и вашият партньор винаги трябва да се говори. Водачът може да обясни какво тя или той има като идея. А навигаторът може да предложи какво да правят по-нататък.
      4:
        image: notes/C1_pair_programming_4.png
        text: 'Навигаторът трябва да се мисли за по- голямата картина, а водача се фокусира върху детайлите. Двете роли са важни. Програмирането по двойки е възможност да работите заедно като отбор.'
    C1_planting_seed:
      1:
        image: notes/C1_planting_seed_1.png
        text: Този урок се нарича засаждане на семена и това ще ни помогне да разберем алгоритмите. Те са специфични инструкции, които обясняват реда, в който да се направи нещо. Дори ежедневните неща като ядене на закуска или миене на зъби са алгоритми, които изискват малки стъпки, за да постигнете правилен резултат.
      2:
        image: notes/C1_planting_seed_2.png
        text: Компютрите могат да бъдат наистина умни, но те могат да ви разбират, ако им кажете точно какво искате стъпка по стъпка. Голямото нещо за алгоритмите е, че ако следвате инструкциите в правилния ред, можете да направите нещо, което не сте знаели как се прави преди време. Това е като рецепта.
      3:
        image: notes/C1_planting_seed_3.png
        text: Днес, ние ще посадим наши собствени семена, като за това ще използваме алгоритъм. Създайте свой собствен алгоритъм като изрежите снимките. Изберете снимките, които показват стъпките в засаждане на семена и подредете тези снимки в правилния ред.
      4:
        image: notes/C1_planting_seed_4.png
        text: Сега е време да видите дали вашият алгоритъм работи. Следвайте стъпките в алгоритъма много внимателно. Те в правилния ред ли са? Успяхте ли да засадите семенатакато следвахте алгоритъма? Това е като програмиране със снимки!
      5:
        image: notes/C1_planting_seed_5.png
        text: Когато искаме да направим шоколад, трябва да следваме много големи стъпки в този процес и всяка една от тези големи стъпки има набор от по-малки стъпки, а и има различни рецепти или алгоритми в зависимост от това какъв искаме шоколада да е на вкус. Всяка стъпка е важна, дори малките, така че без една стъпка, останалата част от тях не може да бъде завършена. Създаването на алгоритми, които другите могат да разберат е наистина важно. Ето защо, всяка стъпка трябва да бъде написана, така че без значение кой го прави, резултатът да е същият.
    C1_playlab_storytelling:
      1:
        image: notes/C1_playlab_storytelling_1.png
        text: Време е да бъдете креативни и да използвате уменията си, за да разкажете една история. Вашата история ще има актьори, а вие ще накарате тези участници да говорят и общуват помежду си. Започнахте ли да мислите какъв вид история искате да разкажете?
      2:
        image: notes/C1_playlab_storytelling_2.png
        text: 'Котката винаги се е страхувала от кучето, но ако котката прецени, че кучето се опитва да бъде мило с нея? "при стартиране" блока започва всичко. "Премества" блока ще премести вашия герой, а "казва" блока ще направи вашия герой да говори, каквото му пишете.'
      3:
        image: notes/C1_playlab_storytelling_3.png
        text: 'Това е "когато актьорите се докоснат" блок, който можете да свържете с други блокове.'
      4:
        image: notes/C1_playlab_storytelling_4.png
        text: 'Направих кучето да дойде и да каже "Здрасти", но тогава котката от страх избяга. "Ааа" Ако имаше повече време, щеше да е щастлив края. Край!'
    C1_spelling_bee_intro:
      1:
        image: notes/C1_spelling_bee_intro_1.png
        text: Това е нивото на правопис. Използвайте пъзел парчета, за да преместите пчелата. Докато се движи, тя ще събира букви за магията от думи.
      2:
        image: notes/C1_spelling_bee_intro_2.png
        text: Вижте, дали ще можете да изпишете думата, която ви е дадена в полето под сцената. Но бъдете внимателни! Преместването в грешна посока ще добави букви, които не са нужни.
    C1_zuck_repeat_loop:
      1:
        image: notes/C1_zuck_repeat_loop_1.png
        text: Едно от нещата, в които компютрите са наистина добри е повтарянето на команди. Като човек, за Вас е наистина скучно, ако трябва да направите едно и също нещо много и много пъти. Но компютърът може да прави едно и също нещо милиони или дори милиарди пъти и да не се отегчава, а дори ще изпълнява това винаги наистина добре.
      2:
        image: notes/C1_zuck_repeat_loop_2.png
        text: 'Например, ако исках да пожелая на всички рожденици от Facebook "Честит рожден ден" като им изпратя имейл, това можеше да ми отнеме повече от век, ако пишех всички тези имейли по отделно. Но само с няколко линии код, може да имам система, която ще изпрати имейл до всички във Facebook, които имат рожден ден днес.'
      3:
        image: notes/C1_zuck_repeat_loop_3.png
        text: В този пример Вашата цел ще бъде да преместите птицата, така че да хване прасето. Вече можем да използваме блок за повторение, за да може да направим това много по-лесно. Кажете на компютъра да върви стъпка напред веднъж а след това му кажете да я повтаря пет пъти.
      4:
        image: notes/C1_zuck_repeat_loop_4.png
        text: За да направите това, можете да плъзнете напред командата и след това да я сложите вътре в блок за повторение. После щракнете върху него и му кажете, колко пъти да повторя блока, за да се придвижи птицата небходимите стъпки напред.
      5:
        image: notes/C1_zuck_repeat_loop_5.png
        text: 'Още едно нещо - можете да поставите неоходимите команди вътре в блока за повторение. Така че в този пример, Вие трябва да се движите напред, да завиете наляво и това трябва да де направи пет пъти. Забавлявайте се!'
    C2_artist_intro:
      1:
        image: notes/C2_artist_intro_1.png
        text: Вие дори няма да се класирате за състезанието, ако не сте хора, които са вещи в компютърните науки, защото колите събират много данни и е необходимо да има хора, които да са в състояние да пишат програми, за да се разбере как да се подобри производителността.
      2:
        image: notes/C2_artist_intro_2.png
        text: В тези пъзели Вие ще бъдете художник, който използва молив за рисуване на различни форми. Където и да отива художникът, той ще нарисува линия зад себе си.
      3:
        image: notes/C2_artist_intro_3.png
        text: 'За да премествате около платното, ще използвате върви напред блок. Тук този ход придвижва напред със 100 пиксела. Когато натиснем "Старт", какво се случва? Художникът се движи напред определено разстояние, което е равно на 100 пиксела. Пикселите са много малки квадратчета на екрана на компютъра.'
      4:
        image: notes/C2_artist_intro_4.png
        text: Друг блок, който ще използваме в този пъзел, задава завой надясно на 90 градуса. И когато това е изпълнено, художникът се завърта на определени градуси. Така че, можете да пробвате докъде искате художникът да се завърта. Това е завой на 90 градуса.
      5:
        image: notes/C2_artist_intro_5.png
        text: А това е завой на 120 градуса. И не забравяйте, че можете да промените тези стойности чрез натискане на стрелките до номерата на пикселите и градусите. Насладете се на рисуването си с художника!
    C2_bee_conditionals:
      1:
        image: notes/C2_bee_conditionals_1.png
        text: Това е блок условие. Той казва, ако има нектар или мед, който е по-малък, равен или по-голям от посочения, тогава да се направи нещо.
      2:
        image: notes/C2_bee_conditionals_2.png
        text: Това е полезно, когато не знаем колко е нектара или меда, за да го вземем и виждаме само този въпросителен знак.
      3:
        image: notes/C2_bee_conditionals_3.png
        text: В този пример, ние ще трябва да кажем Ако лилавото цвете има нектар по-голям от 0, вземи нектар. Това ще кажем на нашата пчела, за да събираме нектар, докато има. TA-даа!
    C2_binary_bracelets:
      1:
        image: notes/C2_binary_bracelets_1.png
        text: Това е урок за бинарни гривни. Ние ще създадем код с нашите инициали на гривна, която можем да носим и показваме на всички наши приятели!
      2:
        image: notes/C2_binary_bracelets_2.png
        text: Binary е начин на представяне на информация, използвайки само две опции. Понякога хора мислят за това като само 1-ци и 0-ли. Но Вие може да си представите комбинациите от включено/изключено, нагоре/надолу и навън/навътре или всеки набор от противоположности.
      3:
        image: notes/C2_binary_bracelets_3.png
        text: Здравейте аз съм Орион и програмирам роботи тук в Play-im. Всички компютърни и роботски мозъци на базово ниво са малки електронни порти. Когато вратата е отворена, може свободно да преминава ток, а когато тя е затворена, електричество не преминава.
      4:
        image: notes/C2_binary_bracelets_4.png
        text: Пример за бинарност са очите на робота. Очите на робота са светодиоди и светят, те са включени или изключени. Това е бинарна система-едно нещо или друго. Можем да използваме осветлението, за да представяме двоични числа. Ако имаме набор от роботи, първият робот ще е на първо място, вторият робот на второ място и така нататък. Ето как вие можете да представите двоично число. Роботите ще го направят с очите си и ще преброят за вас.
    C2_conditionals_with_cards:
      1:
        image: notes/C2_conditionals_with_cards_1.png
        text: Този урок се нарича условия с карти. Всеки ден Вие взимате решения въз основа на това, което виждате и чувате.
      2:
        image: notes/C2_conditionals_with_cards_2.png
        text: Искам да отида в парка, но първо трябва да реша дали трябва да взема чадър или не. Така че, аз поглеждам през прозореца. Ако е облачно, ще взема моя чадър. Иначе ще си взема очила. Мисля, че ще взема чадър. Това, което виждате и чувате определя какво ще вземете в парка.
      3:
        image: notes/C2_conditionals_with_cards_3.png
        text: 'Условията се използват и в игрите. Днес ние започваме да се упражняваме в условията с игра на карти. В тази игра картата, която вадиш определя това, което моите приятели ще направят. Ако извадя седмица, всеки пляска. Иначе всеки казва "о." Нека да го опитате! "aw" "Наздраве"'
      4:
        image: notes/C2_conditionals_with_cards_4.png
        text: Обзалагам се, че можете да направите игри, които са още по-забавни с условията. Да пробваме! Условията са тези, които правят компютрите да изглеждат умни. Компютърна програма, която включва условия може да реагира на потребителя и промени курса си на действие.
      5:
        image: notes/C2_conditionals_with_cards_5.png
        text: Помислете за вашите любими видео игри. Вие печелите ли повече точки за някои действия, а за други по-малко? Това се случва, защото компютърът използва условия. Това е начина, по който компютърът прави решение. Какво ще кажете ако ударите целта, печелите десет точки. Иначе губите три. Когато знаете как условията работят, можете да създадете всички видове вълнуващи игри.
    C2_artist_debugging:
      1:
        image: notes/C2_artist_debugging_1.png
        text: Тук вече имаме някои блокове, поставени в работното място. Но нещо не е наред.
      2:
        image: notes/C2_artist_debugging_2.png
        text: 'Нека да проследим този код като забавим скоростта и гледаме как работи всеки блок - стъпка по стъпка.'
      3:
        image: notes/C2_artist_debugging_3.png
        text: О, там е проблемът! Котешките мустаци са 75 пиксела дълги, не 25.
    C2_bee_debugging:
      1:
        image: notes/C2_bee_debugging_1.png
        text: Чувал ли си някога за дебъгване на програма? Това е начина, по който да разбереш какво не работи. Когато поправяш код, ти идентифицираш и премахваш грешки.
      2:
        image: notes/C2_bee_debugging_2.png
        text: 'Тук, ние сме поставили няколко блока в работното поле. Ние ще да използваме "стъпка" бутона, за да проследим действието на блокове, стъпка по стъпка, за да разберем дали това е правилното решение и къде може да се наложи да го поправим.'
      3:
        image: notes/C2_bee_debugging_3.png
        text: 'Изглежда, че там е нашият проблем! Имаме нужда от още един "напред" блок. Бутона "стъпка" ни помага да поправим нашия проблем чрез откриване и поправяне на грешките.'
    C2_digital_footprint:
      1:
        image: notes/C2_digital_footprint_1.png
        text: На главата си поставете шапка и умът Ви ще Ви отведе в зоологическата градина и ще реши дали да кимате за Здравей на някого! Използвайте главата си, когато сте онлайн, за да запазите какво е Ваше вътре в ума си, за да бъдете в безопасност и така да си дадете лично пространство! От главата до пръстите на краката, спрете и помислете за това. От краката до носа спрете и помислете когато сте онлайн!
      2:
        image: notes/C2_digital_footprint_2.png
        text: Направете сърцето Ви да расте и расте, а след това да заблести и да стане страхотна валентинка, с която да кажете на някого че го обичате! Използвайте сърцето, когато сте онлайн, за да решите какво е правилно и винаги бъдете любезни и показвайте на вашите приятели уважение, бъдете справедливи и добри в интернет. От главата до пръстите на краката си, спете и помислете за това. От краката си до носа спрете и помислете онлайн!
      3:
        image: notes/C2_digital_footprint_3.png
        text: Използвате ръцете си за прегръдка на Вашия домашен любимец, но трябва да пазите дрехите си сухи и да носят любимите си ръкави и да ви помогне да летят и да повярват. Използвайте ръцете си, когато сте онлайн, за да си починете за определено време, оставете Вашите технологични играчки и се разходете сред природата. От главата до пръстите на краката пауза, мисля за това. От краката си до носа спрете и да мислете за онлайн!
      4:
        image: notes/C2_digital_footprint_4.png
        text: "Use your gut to store your food, and to listen to its growling mood, to make a belly flop, and to feel the gas in soda pop. Use your gut when you're online, to know to watch for certain signs, and to let it guide the way and tell you when it's not ok. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      5:
        image: notes/C2_digital_footprint_5.png
        text: "So think with your head, and feel with your heart, balance with your arms, listen to your gut, online. Use your legs to run and kick, and to jump and bounce on a pogo stick, and to dance around the block, and to skip along in your smelly socks. Use your legs when you're online, to stand up to bullies who cross the line, and remember to stand tall, be nice to creatures great and small."
      6:
        image: notes/C2_digital_footprint_6.png
        text: From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online! So think with your head, and feel with your heart, balance with your arms, listen to your gut, stand up with your legs. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!
    C2_digital_footprint_v2:
      1:
        image: notes/C2_digital_footprint_v2_1.png
        text: Всеки път, когато сте онлайн, ви оставяте отпечатък, който може да бъде открит, копиран, споделен, излъчен и е постоянен. Какъв вид дигитални отпечатъци оставяш ти? Какъв вид цифрови отпечатъци не трябва да оставяш?
    C2_graph_paper:
      1:
        image: notes/C2_graph_paper_1.png
        text: 'Този урок се нарича "Програмиране на милиметрова хартия" и става въпрос за алгоритми. Днес, ние ще се научим как да пишем програми, чрез които ще пресъздадем простички черно-бели изображения, използвайки само ръчно изписани стрели.'
      2:
        image: notes/C2_graph_paper_2.png
        text: Алгоритъм е списък с инструкции за изпълнение на задача. Ние ще следваме този набор от инструкции, за да направим купа. Алгоритмите са наистина полезни, когато трябва някой да разбере как да се направи нещо.
      3:
        image: notes/C2_graph_paper_3.png
        text: Ако пишем алгоритъм за компютър, трябва да го разделяме до много малки стъпки. Попълнете този ред и преминете към следващия, после следващия и ще го направите.
      4:
        image: notes/C2_graph_paper_4.png
        text: Аз използвам алгоритми в моята работа. Ако опиша всички стъпки ще мога да пресъздам същото парче отново, или мога да науча някой друг да го направи. Сложете стъклото в пещ, докато парчетата се слеят, следвайте останалата част от инструкциите, за да направите купа. Алгоритмите ще Ви дадат пътна карта, за да направите нещо.
    C2_artist_loops:
      1:
        image: notes/C2_artist_loops_1.png
        text: Тук, ние ще използваме блок за повторение, за да ни помогне да запишем стъпки, с които да програмиране художника. Вече имаме някои блокове, на нашата сцена, но те са само началото на кода, който ще напишем.
      2:
        image: notes/C2_artist_loops_2.png
        text: 'За да повторите тези блокове четири пъти и да нарисувате на целия квадрат, вие просто плъзнете блок за повторение и сложете "върви напред" и блок за обръщане вдясно вътре. Когато щракнете на Старт, художникът ще повтаря тези стъпки четири пъти, за да завърши квадрата.'
    C2_bee_loops:
      1:
        image: notes/C2_bee_loops_1.png
        text: Цикълът е повторение на дейността. Така, когато трябва да свърша нещо, поглеждам рамката и това, което е сложено вътре, така аз ще го повтарям няколко пъти. Направете няколко цикъла, които извършват дейност няколко пъти.
      2:
        image: notes/C2_bee_loops_2.png
        text: Това е блок за повторение. Каквото и да сложиш вътре в блока за повторение, той ще повтаря тези действия определен брой пъти, които вие определите. Например, в това ниво, е необходимо да се движите напред и да вземете нектар три пъти, ние обаче ще плъзнем един блок, а блокът за повторение ще го повтори три пъти. Това прави нещата лесни!
    C2_maze_intro:
      1:
        image: notes/C2_maze_intro_1.png
        text: Обикновено, програмирането се извършва с писане на текст, но ние ще използваме Blockly, който използва визуални блокове, които да плъзнете и пуснете, за да пишете програми. Под капака ние все още създаваме код. За да започнем, ние ще изградим код за програма, която ще помогне на ядосаната птица да се движи през лабиринта, за да стигне до злото прасе, което открадна яйцата ѝ.
      2:
        image: notes/C2_maze_intro_2.png
        text: Blockly е разделен на три основни части. В ляво е птичия лабиринт, където вашата програма ще се изпълни. Инструкции за всяко ниво са дадени под лабиринта. Тази средна област е кутията с инструменти и всеки от тези блокове е команда, която птицата може да разбере. Празното пространство отдясно се нарича работна област и това е мястото, където ние ще изградим нашата програма.
      3:
        image: notes/C2_maze_intro_3.png
        text: 'Ако плъзнете блок за движение в работно поле и натиснете "Старт", какво ще се случи? Птицата ще се придвижи напред една кутийка. Ако искам птица да направи нещо, след като тя се движи напред една кутия? Мога да добавя още един блок в нашата програма.'
      4:
        image: notes/C2_maze_intro_4.png
        text: 'Аз ще използвам "завърти надясно" блок и ще го плъзна под моя блок за движение, докато се появи жълта стрелка. Тогава, аз ще го пусна и двата блока ще се съединят заедно. Когато натисна "Старт" отново, птицата ще изпълнява командите, които са подредени от първата до последната в нашето работно поле.'
      5:
        image: notes/C2_maze_intro_5.png
        text: Ако някога искате да изтриете блок, просто го премахнете от съединените и го плъзнете в кошчето. След като натиснете Старт, винаги можете да натиснете бутона за нулиране, за да върнете птица обратно към началото. Сега, да хванем прасетата!
    C2_paper_airplanes:
      1:
        image: notes/C2_paper_airplanes_1.png
        text: Този урок се нарича Алгоритми от реалния живот. С алгоритми можем да опишем нещата, които хората правят всеки ден. Рецепта за бисквитки и указания за изграждане на къщичка за птици са пример за алгоритми от реалния живот.
      2:
        image: notes/C2_paper_airplanes_2.png
        text: Днес, ние ще направим и тестваме алгоритъм за хартиен самолет. Но първо, ще трябва да накъсаме този голям проект на лесни за следване малки стъпки. За направата на хартиен самолет, ние трябва да решим какви стъпки да предприемем и в какъв ред да ги следваме.
      3:
        image: notes/C2_paper_airplanes_3.png
        text: Вие ще създадете вашия алгоритъм като първо ще изрежете картинките. След това трябва да изберете 6, които показват необходимите стъпки, за да се направи хартиен самолет. Подредете тези картинки в правилния ред. След като сте подредили всико в правилния ред, ще трябва да размените алгоритмите си с други ученици от отбора, за да тествате алгоритъма и да видите дали той работи. Добре проектирания алгоритъм е супер важен за направата на най-добрия хартиен самолет.
      4:
        image: notes/C2_paper_airplanes_4.png
        text: Когато искаме да направим шоколад, трябва да следваме много големи стъпки в този процес и всяка една от тези големи стъпки има набор от по-малки стъпки. Има различни рецепти или алгоритми в зависимост от това какъв искаме да бъде шоколада на вкус. Всяка стъпка е важна, дори малките, така че без една стъпка, останалата част от тях не може да бъде завършена. Създаването на алгоритми, които другите могат да разберат е наистина важно. Ето защо, всяка стъпка трябва да бъде написана, така че без значение кой го прави, резултатът да е същият.
    C2_playlab_createastory:
      1:
        image: notes/C2_playlab_createastory_1.png
        text: Досега сте създавали анимация или история, която прави точно същото нещо всеки път, когато го стартирате. Сега можете да направите една интерактивна игра, която да играете.
      2:
        image: notes/C2_playlab_createastory_2.png
        text: 'Там е "когато стрелка" блок и блок "премести актьор". Можете да поставите тези блокове заедно, за да движите актьорите с клавишите със стрелки.'
    C2_relay_programming:
      1:
        image: notes/C2_relay_programming_1.png
        text: Днес ние ще правим щафетно програмиране. Става въпрос за програмиране под натиск и дебъгване на грешките, които понякога се случват когато работите наистина бързо или в отбор. Ние ще използваме програмиране на милиметрова хартия, за да симулираме кодиране и ще използваме щафетно състезание, за да симулирате наличие на краен срок.
      2:
        image: notes/C2_relay_programming_2.png
        text: В щафетното програмиране отборите ще се състезават, за да завършат програма на милиметрова хартия. Вие трябва да проверите работата на съотборника си и да поправите грешките ако има такива, да добавите нова стрелка и да се върнете и предадете щафетата на съотборник.
      3:
        image: notes/C2_relay_programming_3.png
        text: Програмистите използват много дебъгването за намиране и отстраняване на проблеми в техните алгоритми или код. Има много начини да се трасират проблемите. Един от най-лесните начини е да проследите стъпка по стъпка, докато намерите кога нещо се объркало, а след това го поправяте.
      4:
        image: notes/C2_relay_programming_4.png
        text: 'Тук аз  се опитвам да направя задно кълбо, но да падам. Ще премина през всяка част, стъпка по стъпка, за да осъзная къде е моята грешка. Моят треньор ми показа, че не поставям  ръцете си на гредата правилно. Така аз опитах отново задно кълбо на гредата, но с новата позиция на ръцете, и го заковах! Наистина се радвам, че отстраних грешките ми в обратното кълбо. Отстраняването на грешки е намиране и отстраняване на проблеми. Страхотно, добра работа!'
    C2_zuck_repeat_loop:
      1:
        image: notes/C2_zuck_repeat_loop_1.png
        text: Едно от нещата, в които компютрите са наистина добри е повтарянето на команди. Като хора, за нас е наистина скучно, ако трябва да направим едно и също нещо много, много пъти. Но компютърът може да прави едно и също нещо милиони или дори милиарди пъти и да не се отегчава, а дори ще изпълнява това винаги наистина добре.
      2:
        image: notes/C2_zuck_repeat_loop_2.png
        text: 'Така например, ако исках да пожелая на всички във Facebook "Честит рожден ден" като им изпратя имейл, може да ми отнеме повече от един век, ако пиша единичен имейл за всеки. Но със само с няколко линии код ще имам система, която да изпрати имейл до всички на Facebook, които да ги поздравяват за рождения ден. За това се използват циклите. Те са ценни и са нещо, което компютрите могат да правят много добре.'
      3:
        image: notes/C2_zuck_repeat_loop_3.png
        text: 'В този пример вашата цел ще бъде да преместите птицата, за да стигнете прасето.  Сега, ние ще използваме блок за повторение, за да може да направим кода много по- лесно. Или можете да направите това, като дадете на компютъра "върви напред" командата пет пъти, за да преместите птицата стъпка по стъпка към прасето.'
      4:
        image: notes/C2_zuck_repeat_loop_4.png
        text: 'Или можете просто да кажете на компютъра да "върви напред" веднъж, а след това да му кажете да го "повтори" 5 пъти, а той ще направи точно това. Така че, за тази цел можете да плъзнете вашата "върви напред" команда, а след това да я сложите вътре в блока "повтори". И можете да щракнете върху него и да въведете колко пъти искате да се повтаря командата и птицата да върви напред.'
      5:
        image: notes/C2_zuck_repeat_loop_5.png
        text: 'Сега, още нещо - можете да поставяте колкото искате команди вътре в блока, "повтори". Така че, в този пример вие ще кажете на птицата да върви напред и да се завърти наляво и да повтори тези команди 5 пъти. Добре! Добра работа и се забавлявайте!'
    C3_artist_functions:
      1:
        image: notes/C3_artist_functions_1.png
        text: Едно от големите неща в компютърното програмиране е, че след като сте казали на компютъра как да извърши едно действие, можете да извикате тази функция отново. Дайте ѝ име и след това можете да я извикате. Това е като разширяване на езика.
      2:
        image: notes/C3_artist_functions_2.png
        text: 'В програмата, която ние изградихме, се научихме как да нарисуваме квадрат чрез преместване и завъртане четири пъти. Ние може да вземем тази функция и да ѝ дадем име- "начертай квадрат", така че всеки път, когато искаме да направим квадрат ще извикваме тази функция, този код. Той ще направи за нас квадрат. Добавихме това понятие за нашия език за програмиране.'
    C3_artist_intro:
      1:
        image: notes/C3_artist_intro_1.png
        text: Вие дори няма да се класирате за състезанието, ако не сте хора, които са вещи в компютърните науки, защото колите събират много данни и е необходимо да има хора, които да са в състояние да пишат програми, за да се разбере как да се подобри производителността.
      2:
        image: notes/C3_artist_intro_2.png
        text: В тези пъзели Вие ще бъдете художник, който използва молив за рисуване на различни форми. Където и да отива художникът, той ще нарисува линия зад себе си.
      3:
        image: notes/C3_artist_intro_3.png
        text: 'За да премествате около платното, ще използвате върви напред блок. Тук този ход придвижва напред със 100 пиксела. Когато натиснем "Старт", какво се случва? Художникът се движи напред определено разстояние, което е равно на 100 пиксела. Пикселите са много малки квадратчета на екрана на компютъра.'
      4:
        image: notes/C3_artist_intro_4.png
        text: Друг блок, който ще използваме в този пъзел, задава завой надясно на 90 градуса. И когато това е изпълнено, художникът се завърта на определени градуси. Така че, можете да пробвате докъде искате художникът да се завърта. Това е завой на 90 градуса.
      5:
        image: notes/C3_artist_intro_5.png
        text: А това е завой на 120 градуса. И не забравяйте, че можете да промените тези стойности чрез натискане на стрелките до номерата на пикселите и градусите. Насладете се на рисуването си с художника!
    C3_artist_nested_loops:
      1:
        image: notes/C3_artist_nested_loops_1.png
        text: Когато поставите цикъл в друг цикъл, ние наричаме това вложен цикъл. За пример, тук ние сме дали кода на вече изготвения триъгълник със страни, дълги 100 пиксела, като използвате блок за повторение и го настроите на 3, по веднъж за всяка страна на триъгълника.
      2:
        image: notes/C3_artist_nested_loops_2.png
        text: Но ние искаме да начертаем шест триъгълника. За да направим това, трябва да вземем този цикъл и да го поставим в друг. Много готино!
    C3_bee_conditionals:
      1:
        image: notes/C3_bee_conditionals_1.png
        text: Това е блок условие. Той казва, ако има нектар или мед, който е по-малък, равен или по-голям от посочения, тогава да се направи нещо.
      2:
        image: notes/C3_bee_conditionals_2.png
        text: Това е полезно, когато не знаем колко е нектара или меда, за да го вземем и виждаме само този въпросителен знак.
      3:
        image: notes/C3_bee_conditionals_3.png
        text: В този пример, ние ще трябва да кажем Ако лилавото цвете има нектар по-голям от 0, вземи нектар. Това ще кажем на нашата пчела, за да събираме нектар, докато има. TA-даа!
    C3_debugging_bee:
      1:
        image: notes/C3_debugging_bee_1.png
        text: Чувал ли си някога за дебъгване на програма? Това е начина, по който да разбереш какво не работи. Когато поправяш код, ти идентифицираш и премахваш грешки.
      2:
        image: notes/C3_debugging_bee_2.png
        text: 'Тук, ние сме поставили няколко блока в работното поле. Ние ще да използваме "стъпка" бутона, за да проследим действието на блокове, стъпка по стъпка, за да разберем дали това е правилното решение и къде може да се наложи да го поправим.'
      3:
        image: notes/C3_debugging_bee_3.png
        text: 'Изглежда, че там е нашият проблем! Имаме нужда от още един "напред" блок. Бутона "стъпка" ни помага да поправим нашия проблем чрез откриване и поправяне на грешките.'
    C3_bee_functions:
      1:
        image: notes/C3_bee_functions_1.png
        text: Едно от най-важните понятия в информатиката е как да се дефинират нови команди, как да добавите свои собствени думи на компютърен език. Повечето компютърни езици имат само около сто думи или команди. Изкуството и магията е в определянето на собствени нови думи от тези градивни блокове.
      2:
        image: notes/C3_bee_functions_2.png
        text: Ние правим това през цялото време в спорта. Например, в баскетбола, започваме от обучение как да дриблираме, как да вкарваме кош, как да отскочим. След като сте научили тези наистина основни движения, можете да научите нови движения и да свържете заедно тези блокове, като хващане, завъртане или подаване и др.. След това можете да опитате да направите по-сложни ходове. Веднъж научите ли тези ходове и им дадете име, всички от отбора ще знаят как да ги направят.
      3:
        image: notes/C3_bee_functions_3.png
        text: По същия начин веднъж ти преподаваш на компютъра как да се направи едно действие с помощта на тези последователности от команди. Можете да дадете свое име за това действие, така че да е лесно да го повторите по-късно. Когато дефинирате своя собствена команда и ѝ дадете име, това се нарича функция. Сега, ние ще използваме функции, за да помогнем на пчела.
      4:
        image: notes/C3_bee_functions_4.png
        text: В този пример нашата функция се извиква, за да вземете 2 нектар, този зелен блок тук. Ние знаем как да получим 2 нектар като потърсим в тази сива кутия, която представлява дефиницията на функцията. Ако погледнем вътре има 2 команди вземи нектар. Винаги поглеждайте какво има вътре в сивото поле, така че да знаете какво могат да правят тези зелени функционални блокове.
    C3_bee_nested_loops:
      1:
        image: notes/C3_bee_nested_loops_1.png
        text: Сега ние ще да използваме вложени цикли с пчелата. Ние сме дали първоначален код, който казва на Пчелата да върви напред и да вземе нектар три пъти и след това завива надясно. Нека вземем това цяло парче код и да го поставим вътре в друг блок-цикъл, който да го повтаря три пъти. Готово!
    C3_bounce:
      1:
        image: notes/C3_bounce_1.png
        text: Вие ще създадете ваша собствена bounce игра, която ще можете да споделите с приятелите си! Колко готино!
      2:
        image: notes/C3_bounce_2.png
        text: За да започнете, трябва да се свържат контролите на платформата с клавишите със стрелки на клавиатурата.
      3:
        image: notes/C3_bounce_3.png
        text: 'Можем да направим това чрез свързване на "когато е натисната стрелка наляво" блок с "премести наляво" блока и "когато е натисната стрелка надясно" блока с "премести надясно". Отидете и си програмирайте собствена bounce игра за нула време!'
    C3_computational_thinking:
      1:
        image: notes/C3_computational_thinking_1.png
        text: Този урок е за изчислителното мислене. Понякога изучаването на нова игра може да бъде трудно, нали? Отначало може да изглежда наистина объркващо и понякога, няма кой да Ви научи на правилата, така че трябва да го разберете сами.
      2:
        image: notes/C3_computational_thinking_2.png
        text: Добрата новина е, че можете да станете по-добри когато подреждате нещата по своему, когато знаете няколко трика на мислене. Тези трикове са уникални начини за разглеждане и решаване на проблеми. В този урок ще научите за четири трика и как да ги практикувате с приятелите си, за да разберете правилата на играта.
      3:
        image: notes/C3_computational_thinking_3.png
        text: Когато разделяте голям проблем на по-малки парчета, използвате мозъка си да се разгадае големия проблем. След като ние разделим големия проблем на няколко по-малки проблема, ние може да преминем към следващия трик, който се нарича модел на съвпаденията.
      4:
        image: notes/C3_computational_thinking_4.png
        text: Това е, когато ние откриваме приликите между нещата. След като намерим нещата, които са едни и същи, можем да разберем какви неща са различни. Когато се премахнат тези различия, това се нарича абстракция.
      5:
        image: notes/C3_computational_thinking_5.png
        text: След като съм разбрал стъпките за решаване на проблема, мога да сложа тези стъпки в определен ред, наречен алгоритъм, така че всеки да може да използва указанията ми за решаване на този проблем. Ние ще използвате тези четири стъпки, за да разберем как да играем игра без правила. До края на играта ще можете да играете нещо, което изглежда като това!
    C3_crowdsourcing:
      1:
        image: notes/C3_crowdsourcing_1.png
        text: Този урок се нарича crowdsourcing. В този урок ще използваме тесте карти, за да научим колко по-лесно някои неща може да бъдат направени в група, а не да се опитваме да ги правим сами. Така че, вземете няколко приятели и направете нещо страхотно. Crowdsourcing е получаване на помощ от една голяма група от хора за да се довърши нещо по-бързо.
      2:
        image: notes/C3_crowdsourcing_2.png
        text: В компютърните науки ние използваме crowdsourcing през цялото време. Хиляди самодейци и професионалисти се свързват чрез компютрите си заедно, за да търсят в милиарди и милиарди парчета от информация. Търсенето на неща като следващото Marsenne едноцифрено число, или дори е възможно комуникация с извънземни.
      3:
        image: notes/C3_crowdsourcing_3.png
        text: Когато гледаме филм, всяка секунда от филма е 24 отделни снимки, които ние наричаме кадри. Така че, всяка една от тези снимки трябва да бъде създадена и поставена и пусната заедно с другите. Моят екип и аз, сме разработчици на софтуер. Ние всички работим заедно, за да се създадем парче от софтуер, който създава изображение, създава крайното изображение, които виждате на екрана. Това е инструмент, който артисти и други разработчици могат да използват като част от тяхната работа в екип и процеса, за да могат да създават изображения, които искат на екрана.
      4:
        image: notes/C3_crowdsourcing_4.png
        text: Например, в търсенето на Немо, когато Краш и Скърт и всичките им приятели плуват през източния австралийски риф. Вие виждате изображения на падаща вода, вие виждате цветовете на гърба на костенурка, виждате двете страни на рибата. Всички тези неща са генерирани чрез математически и компютърни програми, които сме написали. Ние след това ги даваме на художниците и те създават крайното изображение, украсяват го, за да изглежда красиво и забавно.
    C3_dice_race:
      1:
        image: notes/C3_dice_race_1.png
        text: Този урок се нарича сазтезание с зарове. Почти всеки обича да играе компютърни игри. Замисляли ли сте се за това как компютърни програмисти превращат стъпките на игра в една програма? Първата стъпка в създаване на компютърни игри и при решаването на всеки проблем изисква мислене и планиране.
      2:
        image: notes/C3_dice_race_2.png
        text: "The thinking step of problem solving produces an algorithm, which is a step by step plan for solving a problem or finishing a task. In this lesson, you'll create an algorithm for a dice race game. Then you'll ask your friends to try out your plan to see if they can follow the steps to play the game. After the programmer is sure the steps are correct, it's time to translate the algorithm into a program with language that the computer can understand."
      3:
        image: notes/C3_dice_race_3.png
        text: Почти всичко, което правим всеки ден изисква алгоритъм, списък от стъпки, който можете да следвате за да завършиет дадена задача. Помислете за оправянето за училище или планиране на забавен ден с вашите приятели или фиксиране на лека закуска. За да изпълните някоя от тези задачи, ще трябва да го раздобите на по-малки стъпки и понякога стъпките трябва да бъдат в определен ред.
      4:
        image: notes/C3_dice_race_4.png
        text: Помислете за правенето на един сандвич. Няма значение коя съставка сйставка извадите от шкафа първа. Но не може да намажете фъстъченото масло, докато не сте отворили буркана. Компютрите използват алгоритми и програми, за да им покажете какво да направя дори прости неща, които ние можем да направим и без да мислим за тях.
      5:
        image: notes/C3_dice_race_5.png
        text: An algorithm is the thinking behind what needs to happen while the program is the actual instructions given to the computer to make it happen. An algorithm has to be translated into a program before a computer can run it. Breaking a task into steps called an algorithm is sometimes difficult. But like any new skill, it gets easier and easier with practice.
    C3_farmer_while:
      1:
        image: notes/C3_farmer_while_1.png
        text: "While loops are pretty similar to what you do in everyday life. Imagine you are washing your car, you'll keep scrubbing until it's clean. While it's not clean, continue to scrub. You're evaluating these things all the time."
      2:
        image: notes/C3_farmer_while_2.png
        text: "We've got a new look to help your farmer out. It's called a while-block. It's pretty simple actually. While a statement at the top is true, do something. For example, while there's a pile move one hayful. Go ahead and give it a try with your farmer."
    C3_functional_suncatchers:
      1:
        image: notes/C3_functional_suncatchers_1.png
        text: "This lesson is functional suncatchers. You'll be creating these pretty suncatchers using functions. There are several steps in creating one of these suncatchers. Some of the steps you have to repeat many times."
      2:
        image: notes/C3_functional_suncatchers_2.png
        text: The first step in simplifying the process of making a suncatcher is figure out what we have to repeat over and over again. We can group these steps into what we call a function.
      3:
        image: notes/C3_functional_suncatchers_3.png
        text: "But there is more to creating a beautiful suncatcher than following precise steps. Sometimes we want to be creative and change the color of the beads we're using. We can make every suncatcher unique if we use different colored beads."
      4:
        image: notes/C3_functional_suncatchers_4.png
        text: Your suncatcher will be uniquely yours when you learn to think of the beads as variables which is a word that means a placeholder for information that can change. Have fun creating beautiful suncatchers using functions and variables!
    C3_internet:
      1:
        image: notes/C3_internet_1.png
        text: This lesson is all about the internet. The internet is a very busy place and similar to this busy road. Messages like cars are zooming along to get to their destinations. Messages move through the internet very quickly.
      2:
        image: notes/C3_internet_2.png
        text: "Acting out how the internet works will help you understand what's happening when you use the internet. You'll learn how messages get from your computer to a favorite website or from a friend to an email inbox. Just like it's easier to navigate busy roads when you know the roads and can read the signs, traveling the internet is not so complicated when you know what goes on behind the scenes."
      3:
        image: notes/C3_internet_3.png
        text: "Sending messages on the internet is a little bit like sending messages in the mail but with a few differences. I'm here at Google.com. The IP address for this website is this number. You can think of an IP address as your return address in the mail. Let's imagine that I want to send a message in the mail to someone in the office down the there. Do you see URL and the IP address on that door? I've written this message and hit send."
      4:
        image: notes/C3_internet_4.png
        text: "Unlike the Postal Service, the first thing that happens is that the internet breaks the message into smaller parts so it can be sent more easily. These small parts are called packets. Each packet of the message is delivered to the destination one at a time. These packets are all put together in the right order so that the receiver can read the message correctly. Of course, there are many more things to learn about how the internet works but this is a great start. You're on your way to becoming a savvy internet user! Be sure to tell your family and friends what you've learned!"
      5:
        image: notes/C3_internet_5.png
        text: "My name is Amanda Camp and I'm a software engineer at Google. I work on a team that works on a backend server that stores profiles and contacts. In my job, we think a lot about how contacts can be sent to other devices, such as your phone. Most people have a lot of contacts, you might have say, 1000 contacts and we don't want to send all of those contacts at once to your phone because it's too large of a message. Similar to the way the internet breaks large messages down into packets, we use a concept called paging where we might only send your phone 100 contacts at a time and let your phone respond to us and ask for the next 100."
      6:
        image: notes/C3_internet_6.png
        text: "The most exciting thing about software is the fact that it can impact the entire world. I first learned to program when I was about nineteen. I think I was already a sophomore or a junior in college. The first program I remember writing is something that converted Celsius to Fahrenheit. I like programming because I like helping people. I can write programs at Google that help people all over the world and that's really mind-boggling and exciting."
    C3_maze_conditionals:
      1:
        image: notes/C3_maze_conditionals_1.png
        text: "People make decisions everyday. For example, before you go outside, you have an if statement that says if it's raining, then I need to get my jacket. Computers are amazing once you decide those kinds of statements that they can reliably execute those things and unbelievable speed. A computer program really is a little bit of math and some if statements where the decision gets made."
      2:
        image: notes/C3_maze_conditionals_2.png
        text: "The if block helps the zombie make a decision. It checks something. For example, let's use the block that says if there's a path to the left, and put a turn left command inside it. We're telling the zombie to check its surroundings, see if there's a path on the left and if so, make that turn."
      3:
        image: notes/C3_maze_conditionals_3.png
        text: "Then we use the move forward block inside this repeat to get it to keep moving forward as long as it just wants to go straight. Then when there's a turn, the if block will tell it to make that turn to the left. You can see that if we do that, if we take the turn to the left and otherwise moving forward, we'll achieve our goal."
      4:
        image: notes/C3_maze_conditionals_4.png
        text: "It's an example of using an if statement which is really a fundamental concept in computer programming. One of the first things I learned was how to write a program that played tic-tac-toe. I had if statements to say, ok, if the other person is about to win, go ahead and block that spot. Have fun learning how to use if statements, it's a key concept."
    C3_maze_level_4:
      1:
        image: notes/C3_maze_level_4_1.png
        text: In this example, your goal is to get zombie to the sunflower. We could use five move forward blocks or we could tell the computer to move forward and repeat five times using the one repeat block.
      2:
        image: notes/C3_maze_level_4_2.png
        text: This saves time and makes it way easier. To use it, just put the move forward block inside the repeat block. Hit run and the zombie will move forward five times to the yummy sunflower.
    C3_playlab_create_game:
      1:
        image: notes/C3_playlab_create_game_1.png
        text: Досега сте създавали анимация или история, която прави точно същото нещо всеки път, когато го стартирате. Сега можете да направите една интерактивна игра, която да играете.
      2:
        image: notes/C3_playlab_create_game_2.png
        text: 'Там е "когато стрелка" блок и блок "премести актьор". Можете да поставите тези блокове заедно, за да движите актьорите с клавишите със стрелки.'
    C3_songwriting_with_parameters:
      1:
        image: notes/C3_songwriting_with_parameters_1.png
        text: This is the song writing lesson. Music is a lot like a computer program. The written notes and words tell the singer exactly what to do. Some parts of music are used over and over again.
      2:
        image: notes/C3_songwriting_with_parameters_2.png
        text: We call this the chorus. In a computer program, the parts of the program that are used over and over again are called functions. When you read song lyrics and it says the word chorus, do you sing the word chorus? No, you look at the top of the page to see what words make up the chorus.
      3:
        image: notes/C3_songwriting_with_parameters_3.png
        text: "In this lesson, you'll learn a silly little song called little bunny foo foo. The song has a chorus that you will sing several times over and over again. A function is a piece of code that you can call and use over and over again. It makes programming easier and more efficient so you don't have to write out the steps of your function over and over again. You can just write it once!"
    C4_bee_conditional:
      1:
        image: notes/C4_bee_conditional_1.png
        text: "This is the conditional block. It says if you're at the flower or the honeycomb, then do something. This is useful when we don't know how much honey or nectar to get as we see here with this question mark."
      2:
        image: notes/C4_bee_conditional_2.png
        text: "In this example, we're going to say, if it's a flower, get all the nectar and then use another one to say, if it's a honeycomb, make honey. Ta-dah!"
    C4_conditionals:
      1:
        image: notes/C4_conditionals_1.png
        text: "We have a new block that's called the if/else block. It's a conditional statement just like the if block you've used in the puzzles before. But now there's a new part at the bottom that says else. The if/else block lets the bee make a decision between two sets of actions. If the bee is at a flower, the bee will do the set of actions you put in the first part where it says do. If the bee is not at a flower, the bee will do the set of actions you put in the slot where it says else."
      2:
        image: notes/C4_conditionals_2.png
        text: "If statements are how computers are able to make decisions. Humans set up conditions for the computer that say if the computer is presented with a certain situation do this. Else, which just means otherwise, do that. The top of our if/else block says if at flower. But the top of our block could say other things, like if nectar equals 2 or if there's a path ahead, our block will behave in the same way. That if the statement at the top is true it will do the first set of actions. But if the statement at the top is false, it will do the second set of actions."
    C4_for_loops:
      1:
        image: notes/C4_for_loops_1.png
        text: "When you use a repeat block to loop your code, how does the computer know when it's repeated enough times? The repeat block is actually hiding a more sophisticated piece of code called a for loop which counts from a starting value up to an ending value by a specific increment."
      2:
        image: notes/C4_for_loops_2.png
        text: For example, a repeat three block counts from 1 to 3 by 1. Every time it counts, it runs the code inside the loop. The for loop knows how many times it has run by using a counter variable which is set to the starting value at the beginning of the loop and has the increment added to it each time the loop is run. As soon as the counter variable is greater than the ending value, the loop stops running.
      3:
        image: notes/C4_for_loops_3.png
        text: "The benefit of using a real for loop instead of the repeat block is that you can actually see the counter variable and use it in your loop. For example, if I have a series of flowers and the first one has one nectar, the second one has two nectars and the third one has three, I can use the for loop to tell the bee to collect 'counter' nectars each time, which would one at the first flower, two at the second and three at the third."
      4:
        image: notes/C4_for_loops_4.png
        text: Also in a for loop, you can increment the counter by a number other than one each time. You can potentially count by 2s, 4s or even an amount that changes every time through.
    C4_for_loops_bee:
      1:
        image: notes/C4_for_loops_bee_1.png
        text: "When you use a repeat block to loop your code, how does the computer know when it's repeated enough times? The repeat block is actually hiding a more sophisticated piece of code called a for loop which counts from a starting value up to an ending value by a specific increment."
      2:
        image: notes/C4_for_loops_bee_2.png
        text: For example, a repeat three block counts from 1 to 3 by 1. Every time it counts, it runs the code inside the loop. The for loop knows how many times it has run by using a counter variable which is set to the starting value at the beginning of the loop and has the increment added to it each time the loop is run. As soon as the counter variable is greater than the ending value, the loop stops running.
      3:
        image: notes/C4_for_loops_bee_3.png
        text: "The benefit of using a real for loop instead of the repeat block is that you can actually see the counter variable and use it in your loop. For example, if I have a series of flowers and the first one has one nectar, the second one has two nectars and the third one has three, I can use the for loop to tell the bee to collect 'counter' nectars each time, which would one at the first flower, two at the second and three at the third."
      4:
        image: notes/C4_for_loops_bee_4.png
        text: Also in a for loop, you can increment the counter by a number other than one each time. You can potentially count by 2s, 4s or even an amount that changes every time through.
    C4_for_loops_no_bee:
      1:
        image: notes/C4_for_loops_no_bee_1.png
        text: "When you use a repeat block to loop your code, how does the computer know when it's repeated enough times? The repeat block is actually hiding a more sophisticated piece of code called a for loop which counts from a starting value up to an ending value by a specific increment."
      2:
        image: notes/C4_for_loops_no_bee_2.png
        text: For example, a repeat three block counts from 1 to 3 by 1. Every time it counts, it runs the code inside the loop. The for loop knows how many times it has run by using a counter variable which is set to the starting value at the beginning of the loop and has the increment added to it each time the loop is run. As soon as the counter variable is greater than the ending value, the loop stops running. The benefit of using a real for loop instead of the repeat block is that you can actually see the counter variable and use it in your loop.
    C4_function_create:
      1:
        image: notes/C4_function_create_1.png
        text: "Now that you've edited function blocks, it's time to create a new function block from scratch. It's really simple. You'll see the toolbox has a category called functions. If you click on this, you'll see an orange button called create a function. Clicking on this brings up the function editor that you've already used to edit existing function blocks."
      2:
        image: notes/C4_function_create_2.png
        text: "Just like before, you started by naming your function, writing down a description for what the function is supposed to do. For instance, it's supposed to draw a square or draw a triangle and then drag blocks from the toolbox into the white work space below. Remember to drag these blocks inside the green wrapping block for the function."
      3:
        image: notes/C4_function_create_3.png
        text: "Once you're done, click on save and exit. This will take you back to the main puzzle work space. The new function you created will show up as a green block in the function category in your toolbox. Drag and drop this into the main work space and use it like any other block to solve the puzzle."
    C4_function_edit:
      1:
        image: notes/C4_function_edit_1.png
        text: Едно от големите неща в компютърното програмиране е, че след като сте казали на компютъра как да извърши едно действие, можете да извикате тази функция отново. Дайте ѝ име и след това можете да я извикате. Това е като разширяване на езика.
      2:
        image: notes/C4_function_edit_2.png
        text: "In the program we built, we learned how to draw a square by moving and turning four times. We can take that function and give it a name, draw a square so that any time we want to do that, we simply say draw a square and it will go back and invoke that function, that code and it will get done for us. We've added that concept to our programming language."
      3:
        image: notes/C4_function_edit_3.png
        text: "In this puzzle, we have already created a draw a square function for you. You'll see it in the toolbox as a green block. What you'll need to do is write the same code you wrote before to draw a square and put it in this function. To do that, click on the edit option in the green draw a square block. This will open up the function editor. The function editor has three parts. A place where you name your function. This will appear on the green block before that function. Then write out a short description of what your function is supposed to do."
      4:
        image: notes/C4_function_edit_4.png
        text: "In this case, it's supposed to draw a square. The white space below this is the work space and works just like the work space you've already been using. Drag and drop blocks from the toolbox into this work space. Remember to put the blocks that create a square inside the green wrapping block for the function. Once you're done, click on save and exit. This will take you back to the main puzzle work space. Now you can use the draw the square function block just like any other block to solve the puzzle."
    C4_function_parameters:
      1:
        image: notes/C4_function_parameters_1.png
        text: "Here's a function that draws a square with 50 pixel sides. That's great but what if I wanted to draw a square with sides 50 pixels and another square with sides of 100 pixels? We shouldn't have to make two separate functions that do almost the same thing. Instead, we can use one function with a parameter."
      2:
        image: notes/C4_function_parameters_2.png
        text: "Parameters allow us to pass values into a function that get used as variables inside the function. Let's try adding a parameter called like to this function so we can use it to create squares of different sizes. In the function editor, you can edit the name and description like before but now you can also add a parameter. Write the name of your parameter in the space and click Add Parameter. This will create a red block with the name of the parameter you just created. Now we can replace the move forward by 100 block with the parameter Length so it will move forward by Length."
      3:
        image: notes/C4_function_parameters_3.png
        text: "Click save and close and drag out your new create a square block from the functions category in the toolbox. You'll notice there's an empty space next to length because the function wants to know what value the parameter Length should have. Drag a number block from the Math category and place it in this space. See how you can use the function again and again with different lengths to make squares of different sizes? Try it for yourself!"
    C4_intro:
      1:
        image: notes/C4_intro_1.png
        text: Обикновено, програмирането се извършва с писане на текст, но ние ще използваме Blockly, който използва визуални блокове, които да плъзнете и пуснете, за да пишете програми. Под капака ние все още създаваме код. За да започнем, ние ще изградим код за програма, която ще помогне на ядосаната птица да се движи през лабиринта, за да стигне до злото прасе, което открадна яйцата ѝ.
      2:
        image: notes/C4_intro_2.png
        text: Blockly е разделен на три основни части. В ляво е птичия лабиринт, където вашата програма ще се изпълни. Инструкции за всяко ниво са дадени под лабиринта. Тази средна област е кутията с инструменти и всеки от тези блокове е команда, която птицата може да разбере. Празното пространство отдясно се нарича работна област и това е мястото, където ние ще изградим нашата програма.
      3:
        image: notes/C4_intro_3.png
        text: 'If I drag the move block to our work space and press "run", what happens? The bird moves forward one box on the grid. And what if I want the bird to do something after it moves forward one box? I can add another block to our program.'
      4:
        image: notes/C4_intro_4.png
        text: |-
          I'm going to choose the "turn right" block and I'll drag it under my move block until the yellow arrow appears. Then I'll drop it and the two blocks will snap together. When I press "run" again,  the bird will perform the commands that are stacked from top to bottom on our work space.
      5:
        image: notes/C4_intro_5.png
        text: Ако някога искате да изтриете блок, просто го премахнете от съединените и го плъзнете в кошчето. След като натиснете Старт, винаги можете да натиснете бутона за нулиране, за да върнете птица обратно към началото. Сега, да хванем прасетата!
    C4_math_artist:
      1:
        image: notes/C4_math_artist_1.png
        text: "If I want to draw a rectangle 50 pixels tall and that is twice as wide as it is tall, how would I program the computer to do that? Well, I could tell the artist to go up fifty, turn right, and then go over 100 and move the whole thing twice. But then I'm doing the math for the computer."
      2:
        image: notes/C4_math_artist_2.png
        text: Multiplying fifty by two in your head may not that hard but computers are really good at doing math so we should leave it to them whenever possible. If I just used a variable called height instead, then I could easily change height to fifty and then change my algorithm to tell the artist to go up by height, turn right and then go over by height times 2, which gives us a rectangle that is twice as wide as it is tall.
    C4_unplugged_algorithms:
      1:
        image: notes/C4_unplugged_algorithms_1.png
        text: "This lesson is called Tangram Algorithms. A tangram is a puzzle with seven pieces that can be put together to make other shapes. You'll be using an algorithm to explain to your partner how to put the puzzle together."
      2:
        image: notes/C4_unplugged_algorithms_2.png
        text: An algorithm is just a of list steps that you can take to complete a task. We use them every day with things like shopping lists and recipes. If you keep an algorithm simple, there are lots of ways to interpret it and whoever performs that algorithm might not get exactly what you wanted. If you want to make sure that everyone ends up with the exact same thing, then your algorithm will need to be detailed and very specific.
      3:
        image: notes/C4_unplugged_algorithms_3.png
        text: "I'm using an algorithm today to complete a painting. I wanted to try doing a painting of some wolves but I'm not the most amazing painter. Luckily for people by me, there is paint by numbers. There are forty colors and it has little letters and numbers that tell you which color to paint each section. Paint by numbers tells me exactly what color to use and where."
      4:
        image: notes/C4_unplugged_algorithms_4.png
        text: "It's very specific so I'm able to follow directions and the painting will come out looking awesome. It's a great algorithm. If the instructions weren't specific enough, my wolves wouldn't look as good. When you really want something to turn out exactly the way that you planned it, it's best to be extremely precise."
    C4_unplugged_binary:
      1:
        image: notes/C4_unplugged_binary_1.png
        text: "Each team, the person who's instructing that's the person who's holding the paper, has to figure out what their off symbol is going to be and what their on symbol is going to be. In binary, it's kind of like an alphabet with two letters. Like having A and B be your entire alphabet but you've got a 0 and a 1."
      2:
        image: notes/C4_unplugged_binary_2.png
        text: "The most common way you use binary is in an if statement. It's a classic thing from programming. The program runs along and it says if something is true, then do this. Or it's not true and you do something else. What if you want to do something maybe a little more complicated. Instead an if statement, you want to work with something like an image or a sound in a computer."
      3:
        image: notes/C4_unplugged_binary_3.png
        text: "A computer only knows binary but an image, it's not binary, it's not ones and zeros so how do you do that? Here's an example: You have this beautiful picture. Now a picture is basically a form of information. All information can be encoded in binary one way or another, you just have to figure out how to do it."
      4:
        image: notes/C4_unplugged_binary_4.png
        text: "You imagine that we're going to put a grid over this panda bear and for each square, we're going to decide whether that square is more black or more white. And then we're going to color it that way. Now each cell on the grid is either black or white and then the black squares we say those are zeros (binary digit) and the white squares are ones, the other binary digit. At the end, you're left with just a bunch of ones and zeros. That's how you represent this image in binary."
    C4_unplugged_forloops:
      1:
        image: notes/C4_unplugged_forloops_1.png
        text: "This lesson is called for loop fun. In this lesson, we'll use a number line to play a dice game. Each player will roll three times to assign a starting value, a stopping value, and our interval. During each turn, we circle our starting value, and every value that is the same number of steps forward as our interval value. We stop circling when we get to our stopping value. The person with the highest score wins!"
      2:
        image: notes/C4_unplugged_forloops_2.png
        text: "For loops can come in handy a lot of places and if you were to become a meteorologist, you would use for loops all the time. Hi, I'm Becky. I work at EverPower Renewables as a wind meteorologist. I forecast wind speeds for the Columbia River Gorge area where the company owns wind farms."
      3:
        image: notes/C4_unplugged_forloops_3.png
        text: "We're trying to understand how much wind is going to be there so that we know how much power is going to be outputted. We give that information to real time energy traders. They buy and sell power based on how much power we tell them is going to be there in order to make sure the power grid is balanced, your lights stay on, and that we maximize the amount of energy we get out of our farms."
      4:
        image: notes/C4_unplugged_forloops_4.png
        text: "We're at the national control center for EverPower Renewables here in Portland and this is where we have information coming in from all our farms across the country. Even the highest power computers today can't simulate the atmosphere everywhere. In computer forecasting models, we have what we call a grid. Each grid point is a latitude, longitude. We have to calculate the physics and try and figure out the wind speed, temperature,  pressure, that sort of thing."
      5:
        image: notes/C4_unplugged_forloops_5.png
        text: "Since these are fairly big grids and we're doing this in a lot of points we're looping over these things millions and millions of times. Everything I do I'll use for loops. Here for example is a for loop right there. When you're forecasting wind, there's so many different parameters that go into it it would be impossible for a human to sit down and do all those calculations. There's so many different aspects to what's going to be affecting what's happening to the wind that we need a computer model in order to forecast it."
    C4_unplugged_madlibs:
      1:
        image: notes/C4_unplugged_madlibs_1.png
        text: "In this lesson, we'll be playing with some fill in the blank stories. You have a template that you can fill in to create similar stories that have very amusing differences."
      2:
        image: notes/C4_unplugged_madlibs_2.png
        text: "In this lesson, we also learned how to make an abstracted template from two stories that have already been created. Abstraction is the art of removing differences and details so that you can see how one solution might work for many different problems. It's very helpful in computer science because it allows us to create functions that may be useful in several different situations."
    C4_unplugged_parameters:
      1:
        image: notes/C4_unplugged_parameters_1.png
        text: "This lesson is called songwriting with parameters. We're going to be writing some songs here. Sometimes the chorus is just a little bit different each time you sing it. Do you remember Old Macdonald Had a Farm? The chorus is slightly different for each animal. And on that farm, he had a cow, e-i-e-i-o. The small change in each chorus can be shown using something we call parameters."
      2:
        image: notes/C4_unplugged_parameters_2.png
        text: Sometimes a function needs a parameter. A parameter is an extra piece of information you can pass to a function to customize it for a special need. When you make ice cream sundaes with your friends, you are using a process similar to parameters in a computer program.
      3:
        image: notes/C4_unplugged_parameters_3.png
        text: "The disk of vanilla ice cream might be the same for every sundae but when you ask your friends which two toppings they'd like, you could get lots of different combinations. Topping is the function name but each type of topping is a parameter. Functions and parameters work together to make great computer programs and great sundaes too."
    C4_unplugged_variables:
      1:
        image: notes/C4_unplugged_variables_1.png
        text: "This lesson is called variables in envelopes. We're going to learn how we can build sentences when we're still missing pieces of information. Most of us are already familiar with the idea of filling in a blank. We do it when we're putting our name on our homework. Sometimes there's more than one word that needs to be filled out and in that case, we give that blank a label so that we know which piece of information goes where."
      2:
        image: notes/C4_unplugged_variables_2.png
        text: Variables are placeholders for pieces of information that can change. By using a variable for the missing information, we can continue working on whatever we were doing and let someone else fill in the missing information later. In software, we use variables a lot. We use variables as placeholders for name, email address, and even username. That way we can let the program know where those details will appear after the user fills them in. We use variables all the time in our work.
      3:
        image: notes/C4_unplugged_variables_3.png
        text: "Any time you need to store a piece of information for later, we use a variable. Let's say we need to count the number of times the user has tweeted. Every time that user tweets, we'll add one to that number and every time the user deletes a tweet, we'll decrease that number by one. Anytime we need to know how many times that user has tweeted, we'll just look at that variable."
    C4_variables_artist:
      1:
        image: notes/C4_variables_artist_1.png
        text: A variable is a container you can store a value in. When you use that variable in an algorithm, it opens up the container and looks at the value inside. This lets you write smarter algorithms that behave differently depending on the value stored in the variable.
      2:
        image: notes/C4_variables_artist_2.png
        text: "For example, if you wanted to write an algorithm to say Happy birthday, you're turning 10! to my little brother, that's great now but when I run it next year I'd want it to say, Happy birthday, you're turning 11! I could create a variable called age to store my brother's age and write my algorithm to say Happy birthday, you're turning 'age' instead. Because variable can change, every year I can update the variable 'age' to equal 'age' plus 1."
      3:
        image: notes/C4_variables_artist_3.png
        text: "In this puzzle, we're going to be using a variable that will set the length of the line our artist draws. Later on in our code, the move forward block will look at that length variable to see what value you've set it to."
    C4_variables_playlab:
      1:
        image: notes/C4_variables_playlab_1.png
        text: A variable is a container that you can store a value in. When you use that variable in an algorithm, it opens up the container and looks at the value inside. This lets you write smarter algorithms that behave differently depending on the value stored in the variable.
      2:
        image: notes/C4_variables_playlab_2.png
        text: "Now you're going to try playlab where you are given different games and you can change the values of variables like speed, height, score, in order to change the game. You won't have to change the algorithm of the game to change how it plays, just the variable."
      3:
        image: notes/C4_variables_playlab_3.png
        text: In my work for Kindle and on X-ray for books, we apply variables in many different ways. One way that you can use a variable is to store page numbers of a book. A user can increase and decrease the size of the font on a page. Based on the font size, the number of pages in the book can change. We can adjust it by storing the number of pages in the variable.
    infinity_playlab_events:
      1:
        image: notes/infinity_playlab_events_1.png
        text: "Now we're going to learn about something that all game programmers use everyday. They're called events. An event tells your program to listen for when something happens. And then when it does, it performs an action. Some examples of events are listening for a mouse click, an arrow button, or a tap on the screen."
      2:
        image: notes/infinity_playlab_events_2.png
        text: |-
          Here, we're going to make Baymax move up to touch Hiro and move down to touch Rapunzel when the player uses the up/down arrow keys or the up/down buttons. We'll use the when up arrow block and attach the move actor up block to it, so when the player presses the up arrow key, everything attached to the "when up arrow" block is run. We'll do the same thing to make Baymax move down. Step by step your game is getting more interactive.
    infinity_playlab_intro:
      1:
        image: notes/infinity_playlab_intro_1.png
        text: "So what grade are you in? Second. Tenth grade. First grade. I was in eighth grade when I learned to program. I got my first computer when I was in sixth grade. What gets me excited is being able to fix people's problems. You can express yourself, you can build things from an idea."
      2:
        image: notes/infinity_playlab_intro_2.png
        text: "Computer science is the basis for a lot of the things that college students and professionals will do for the next twenty or thirty years. I like programming because I like helping people. I get the opportunity to build something that's gonna make people's lives easier. I think it's the closest thing we have to a superpower. Getting started is the most important part. I'm a beginner myself and I want you to learn with me."
      3:
        image: notes/infinity_playlab_intro_3.png
        text: "I'm John Vechey, I'm one of the co-founders of PopCap Games. We make games like Plants vs. Zombies, Bejeweled, and Peggle. A lot about games isn't how perfect your code is, it's not how perfect your art is, it's about how does it feel and how much fun it is. You can only get that sense by trying it, by doing it, by learning and adapting and iterating your own skills of making games."
      4:
        image: notes/infinity_playlab_intro_4.png
        text: "Do you have a favorite video game? Well, we're going to take one step towards creating games just like that using Play Lab. Good games have a story and every story has actors. Actors do things like speak, move, and interact with each other. Maybe even score points based on the rules of the game. Today we'll be learning how to do all these things, one by one, with Disney's characters like Anna, Elsa, Hiro, Baymax, and Rapunzel. We'll build a game from scratch that can be shared and played on a phone."
      5:
        image: notes/infinity_playlab_intro_5.png
        text: "Your screen is split into three main parts. On the left is the gamespace, where your program will run. The instructions for each level are written below. This middle area is the toolbox, and each of these blocks is a piece of code. The white space on the right is called the workspace, and this is where we'll build our program."
      6:
        image: notes/infinity_playlab_intro_6.png
        text: |-
          To start off, you'll need to link your blocks to the orange "when run" block. You can link multiple blocks together by dragging them out until you see the yellow outline, and then they'll snap together. In this first puzzle, Hiro is Actor 1 and Baymax is Actor 2. We need to move Hiro to get to Baymax by dragging the "move right" block out and linking it to the "when run" block. Once you have your blocks in place, hit the "Run" button to see what you've programmed.
      7:
        image: notes/infinity_playlab_intro_7.png
        text: "Get started and by the end you'll be able to create your own game with these amazing actors that can interact, score points, throw microbots, cherries, saucepans, sparkles, and ice.. and vanish each other. It's all up to you!"
    infinity_playlab_repeat_forever:
      1:
        image: notes/infinity_playlab_repeat_forever_1.png
        text: "Can you imagine if you had to repeat something forever and ever? Hopefully you'll never have to because computers are really good at repeating things. This is the repeat forever block. Anything inside this block will happen forever in the game."
      2:
        image: notes/infinity_playlab_repeat_forever_2.png
        text: "So if we wanted an actor to do something repeatedly without the player having to do anything, we'll put those blocks inside the repeat forever block. In this next puzzle, our goal is to help Anna walk up and down continuously. Learning how the repeat commands work will save you a ton of time later when you build your own game."
    tutorial_puzzle_challenge:
      1:
        image: notes/tutorial_puzzle_challenge_1.png
        text: "What do you want to be when you grow up Olivia? An astronaut. Do you happen to know what a computer programmer is? Yeah um no. Ummm wait what? I'm not really sure how to explain it computer programming is pretty simple. It's a set of instructions like a recipe, you have to follow them step-by-step to get the end result you want."
      2:
        image: notes/tutorial_puzzle_challenge_2.png
        text: "I can change the number of pixels, the length of the line, using this dropdown. How long was it again? You can see the instructions again by looking under the run button. Here I used the move forward block and I'm going to select 100 pixels. I can delete a block by dragging it into the toolbox or the trash can. Let's put it back."
      3:
        image: notes/tutorial_puzzle_challenge_3.png
        text: "Run the code by pressing run. Well that didn't work! I'll press reset and figure out what's wrong. You can try a puzzle as many times as you'd like and skip puzzles and come back to them. Just make sure to try your best and don't give up. Let's add another move forward. That still didn't work. I can place a block between other blocks."
      4:
        image: notes/tutorial_puzzle_challenge_4.png
        text: "Let's take a turn block and place it in between the move forwards. Turn left 45 degrees. Let's run it again. Reset, run, awesome! Here's another puzzle. Sometimes you are given starter code to complete. Here I need to add the appropriate lengths and degrees."
      5:
        image: notes/tutorial_puzzle_challenge_5.png
        text: "You may sometimes accidentally trash the starter code. What do you do then? You can press clear puzzle and start all over again. I'm going to drag this number block into the different pixel areas. Select 100 for pixels, 45 for degrees and 100 for pixels again. Awesome! Here is the Code Studio bee. I need to move the bee to each flower and get nectar."
      6:
        image: notes/tutorial_puzzle_challenge_6.png
        text: "The first flower is three blocks away so I need three move forwards. 1, 2, 3. Then a get nectar, then another get nectar. Well that didn't work! I'll place another move forward between the get nectars and run it again. Yay, it works! You just learned how to use the Code Studio artist and bee puzzles. Good luck on the Code Studio puzzle challenge."
    unplug1:
      1:
        image: notes/unplug1_1.png
        text: "What do you want to be when you grow up Olivia? Umm, an astronaut! Do you happen to know what a computer programmer is? Yeahh, umm, no. Umm, what what? I'm not really sure how to explain it. Computer programming is pretty simple. It's a set of instructions, like a recipe. You have to follow them step by step to get the end result you want."
      2:
        image: notes/unplug1_2.png
        text: "Computer science is a way to impact the world. It can be music videos, it can be games, detect whether or not someone is related to someone else. Find you know, people's friends. You can do all sorts of other crazy things that actually save lives. You do have to have a drive I think. It is to me like a paintbrush. I think great programming is not all that dissimilar from great art."
      3:
        image: notes/unplug1_3.png
        text: When I finally learned a little bit of programming, that blank wall resolved into a bunch of doors and you open them and of course then you find behind them is another hallway filled with a bunch of doors. Programming is fun and easy. You can do anything your mind wants to do. Finally you start to open enough doors the light comes in. To me a finished program is like a structure filled with light. All the corners are illuminated. The number of people that you can touch and interact with is something the world has never seen before.
      4:
        image: notes/unplug1_4.png
        text: "Our first lesson in this series is all about what computer science is, what a computer scientist does and how you can be more responsible in your use of technology. It's a very important lesson but it is a little text-heavy. At the end, you get to make your very own customized encoding using your initials. It's a fun activity and it's very empowering because binary is one of those things that feels very technical but once you understand it, it's like you speak a secret language."
    unplug2:
      1:
        image: notes/unplug2_1.png
        text: The lesson on computational thinking is intended to teach you how to take a big difficult problem and break it down into several simpler problems. The goal of this lesson is to write a set of instructions that someone can follow to draw one of the monsters included in the lesson plan.
      2:
        image: notes/unplug2_2.png
        text: "Students will break into groups to write instructions and then they'll switch them with another group that will have to draw the monster. Groups will write instructions using the four steps of computational thinking: decomposition, pattern location, abstraction and algorithms."
      3:
        image: notes/unplug2_3.png
        text: "First groups will decompose the task which means make a game plan. Then they'll look for patterns between all the monsters in the catalog. When they come across differences between the monsters, they'll abstract or remove those details. For instance, one monster in the catalog has vegitas eyes and another has spritem eyes. But they both have eyes so we can write a line that says the monster has blank eyes."
      4:
        image: notes/unplug2_4.png
        text: "So students will be able to write a set of instructions, called an algorithm, that list the monsters' parts with blanks for what the styles should be. This is the set of instructions they'll pass to other students to recreate their very own monster."
    unplug3:
      1:
        image: notes/unplug3_1.png
        text: In graph paper programming, we help explain how coding works by trying to help people recreate drawings using only arrows and scribbles. One person is given a small drawing on graph paper and they need to go through using only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug3_2.png
        text: 'In this activity, the only symbols you can use are these: move one square forward, one square backward, move one square up, move one square down, change to next color, and fill in your square with color. Once we have that coded up, we can hand it off to another person who can read the code and try and recreate the picture.'
    unplug4:
      1:
        image: notes/unplug4_1.png
        text: In graph paper programming, we help explain how coding works by trying to help people recreate drawings using only arrows and scribbles. One person is given a small drawing on graph paper and they need to go through using only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug4_2.png
        text: "In the second half of the activity, we ask students how many different ways they can fold a piece of paper to create sixteen identical rectangles. Then you'll discuss how multiple solutions can lead to the same end result and why some solutions are better in certain situations."
    unplug5:
      1:
        image: notes/unplug5_1.png
        text: In graph paper programming, we help explain how coding works by trying to help people recreate drawings using only arrows and scribbles. One person is given a small drawing on graph paper and they need to go through using only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug5_2.png
        text: "In the second half of the activity, we ask students how many different ways they can fold a piece of paper to create sixteen identical rectangles. Then you'll discuss how multiple solutions can lead to the same end result and why some solutions are better in certain situations."
    unplug6:
      1:
        image: notes/unplug6_1.png
        text: "This activity is called coding with cards and it's great for any age. Like you learned with the if statements in earlier lessons,  during Blockly, if statements have a piece about them you have to evaluate to find out if it's true or false. That's the conditional and it can be used in lots of different ways."
      2:
        image: notes/unplug6_2.png
        text: We take advantage of that by creating programs on paper that you run using a random draw of playing cards. You might have an if statement that says something like if the card you draw is greater than 8, you get a point. Otherwise, your opponent gets a point. You can make it as simple or as complicated as you feel comfortable.
    unplug7:
      1:
        image: notes/unplug7_1.png
        text: "You know how when you look up the lyrics for a song and they define the chorus at the very beginning and then for the rest of the song, they just refer you back to the chorus? That's how you call a function."
      2:
        image: notes/unplug7_2.png
        text: "In this lesson, we define the chorus at the beginning of our song and then we sing through our song and go back and we notice that the class doesn't sing the word chorus, they automatically go up to the top where we define the chorus and sing through that. We use that as a great introduction to how to understand what a program is doing when it defines and calls a function."
      3:
        image: notes/unplug7_3.png
        text: "We use familiar songs including Old Macdonald to talk about how a chorus is called over and over and how sometimes a chorus can change. When you have a song like Old Macdonald, where certain words change, that's a great place to introduce the idea of parameters. Passing certain words through so that you can send extra information to your function. Once we're sure everybody gets it, you can take your own familiar songs and break them up yourself. See if you can figure it out together."
    unplug8:
      1:
        image: notes/unplug8_1.png
        text: Our lesson on abstraction uses the familiar concept of madlibs, where you basically insert a blank in a story that can be filled with lots of different words. We take that idea, challenge kids to come up with their own words for their own stories, and really explain the concept of abstraction.
      2:
        image: notes/unplug8_2.png
        text: "It's all about functions and how you can have a function, like in Old Macdonald, where you have a structure for your chorus but you have something little that changes and you abstract out that little thing that changes and you can fill it in with your own word every time through. But sometimes you have three words that change and so you fill those in with three parameters, that's still pretty helpful."
      3:
        image: notes/unplug8_3.png
        text: "You can have one function that handles lots of different problems. Lots of times people will write separate functions for all those problems, not realizing there's only one little difference. If they could just find a way to handle that one little difference, they could just reuse one function over and over again, instead of having 14 different functions."
    unplug9:
      1:
        image: notes/unplug9_1.png
        text: Relay programming is an extremely fun lesson that gets across way more than computer science. Sometimes everybody is getting a little bit antsy and you want to get them up on their feet. This is a great way to add some excitement to computer science.
      2:
        image: notes/unplug9_2.png
        text: You break everyone up into two groups where they stand in a line and run relay style. The first person in each group runs to the other side of the room where you have a graph paper drawing and a blank piece of paper waiting for them. They write down the first step to creating that image, run back to their line, tag the next player who goes back up to write the next step.
      3:
        image: notes/unplug9_3.png
        text: "This is a great way to get across the idea of debugging, needing to proofread your own work, and needing to check the work of the people done before you. You'll quickly understand how important it is that you be careful in your coding when a whole team is depending on you."
    unplug10:
      1:
        image: notes/unplug10_1.png
        text: "This activity explains in an easy-to-understand way how the internet works. We explain all the terminology you'll need in simple terms so that students can simulate transmitting messages, like an email."
      2:
        image: notes/unplug10_2.png
        text: "Students will transmit messages while pretending to be one of three transmission methods. Wireless internet, DSL or fiber optic. The students who represent wi-fi will have to wear the message they're transmitting on their head because wifi is the most likely to drop some information."
      3:
        image: notes/unplug10_3.png
        text: "The students pretending to be DSL or cable will carry the message on the back of their hand, where they're slightly less likely to drop information. And the students representing fiber optic will get to carry them with both hands. This activity is a great way to understand something that many of us use every day."
    unplug11:
      1:
        image: notes/unplug11_1.png
        text: "So now it's time to step back and take a birds eye view of everything you've done in these past nineteen lessons. This is a great time to call out to students that what they've just done is a huge achievement. They've learned more over these lessons than most adults know about computer science."
      2:
        image: notes/unplug11_2.png
        text: "Discuss as a class or in small groups about their favorite lessons. Once you take a look back at everything you've learned, this is where your students' creativity can shine. Split them into groups and have them create an unplugged lesson of their own. Assign each group a key concept, like functions or algorithms and have lots of craft materials on hand for them to use. Have each group present their new unplugged activity or even set aside another day to do a few of the student created activities."
      3:
        image: notes/unplug11_3.png
        text: "From everyone here at Code.org, we hope you've had a TON of fun during this course. And whether your dream is to create the best new app, use programming to help cure diseases, or you just want to be a stellar problem-solver, this course was the first step in achieving those dreams."
    starwars_intro:
      1:
        image: notes/starwars_intro_1.JPG
        text: 'Здравейте! Аз съм Катлийн Кенеди и съм продуцент на Междузвездни Войни: Силата се Пробужда. Днес ще работите с една от нашите звезди, ББ-8, който е сферичен дроид. Всичко, което прави и всяко негово движение се контролира от софтуер. Компютърните науки оказват влияние във всяка една сфера от маркетинг до медицина и филмово производство. Всъщност, хиляди инженери работят заедно, за да създадават филми като Силата се Пробужда.'
      2:
        image: notes/starwars_intro_2.JPG
        text: Здравейте, аз съм Рейчъл Роуз, глaвен инженер в отдела за Разработки в Ай Ел Ем. Аз ръководя групата за създаване на анимираните ефекти. В Силата се Пробужда отговарям за ефектите, които карат героя да извършва движения като че ли е наистина от далечно съзвездие.
      3:
        image: notes/starwars_intro_3.JPG
        text: 'В следващият час ще създадем наша собствена игра Междузвездни Войни, която ще ви научи на основните методи в програмирането. Обикновено програмирането представлява текст, но ние ще използваме блокове, за да можем да ги влачим и оставяме. Но въпреки това, вие създавате код. След като пробвате основните методи с блокове, ще преминем на JavaScript- един от най-известните езици за програмиране в интернет.'
      4:
        image: notes/starwars_intro_4.JPG
        text: За начало, ще работим с Рей, който ще програмира ББ-8 да ходи и събира скрап. Монитора е разделен на три части. Отляво е игровото пространство, където играта се извършва. Инструкциите са написани под него.
      5:
        image: notes/starwars_intro_5.JPG
        text: Пространството по средата е кутията с инструменти, и всеки блок е команда, която ББ-8 може да разбере.
      6:
        image: notes/starwars_intro_6.JPG
        text: Бялото пространство вдясно е работното поле, където ще създадем играта.
      7:
        image: notes/starwars_intro_7.JPG
        text: Какво ще стане, ако завлека блока moveLeft(); в работното пространство и натисна Старт? ББ-8 ще се премести наляво с една стъпка.
      8:
        image: notes/starwars_intro_8.JPG
        text: А ако поискам ББ-8 да направи още нещо след блока moveLeft();? Мога да добавя друг блок към нашата програма. Ще избера блока moveUp(); и ще го завлека под блока moveLeft(); докато очертанията не се появят. Тогава ще го пусна и двата блока ще се свържат.
      9:
        image: notes/starwars_intro_9.JPG
        text: Когато натисна Старт отново, ББ-8 ще изпълни командите отгоре до долу от работното пространство. Ако искате да изтриете блок, просто го извадете от работното поле и го завлечете обратно в кутията с инструментите.
      10:
        image: notes/starwars_intro_10.JPG
        text: 'След като натиснете Старт, винаги може да натиснете бутона "стартиране отначало", за да накарате ББ-8 да започне отново. Да започваме!'
    starwars_typing:
      1:
        image: notes/starwars_typing_1.JPG
        text: 'Вътре в блока ние изпозваме JavaScript. Това е един от най-използваните езици за програмиране. Блоковете са прекрасен начин за начинаещи да навлязат в програмирането, а дори някои университети като Харвард и Бъркли започнаха да въвеждат Блоково програмиране. Но веднъж научили основите, инженерите пишат кода, защото е по- бързо.'
      2:
        image: notes/starwars_typing_2.JPG
        text: Можем да напишем хиляди команди без да търсим и измъкваме от кутията с инструментите. Може в началото да сте по бавни в писането, но все пак пробвайте.
      3:
        image: notes/starwars_typing_3.JPG
        text: В горният десен ъгъл на работното пространство се намира бутона, с който преминавате от текстово в блоково програмиране.
      4:
        image: notes/starwars_typing_4.JPG
        text: 'Следващия урок ще започнем в текстови режим. Ще можете да избирате блокове или текстови команди. Възможни команди ще се появяват след като започнете да пишете, така вместо да изписвате цялата команда ще може да избирате и завършите по бързо. В моята работа използвам инструмента "завършване по подразбиране" когато пиша код.'
      5:
        image: notes/starwars_typing_5.JPG
        text: Когато пишете код, трябва да сте много внимателни. Нужно е да изписвате правилно командите, главните букви, включително скобите и двоеточието. Дори незначителни грешки могат да попречат на ББ-8 да разбере кода и няма да може да извърши действието.
      6:
        image: notes/starwars_typing_6.JPG
        text: Когато направите грешка редактора ще я подчертае, така че ще може да я поправите.
      7:
        image: notes/starwars_typing_7.JPG
        text: 'Ако се затрудните, винаги може да започнете отначало с бутона "стартиране отначало" и да изберете режим Блокове, като натиснете в горния десен ъгъл. Хайде да пробваме! Ако направите грешка не се отчайвайте. Всеки пробва по няколко пъти докато го направи правилно.'
    starwars_events:
      1:
        image: notes/starwars_events_1.JPG
        text: Здравейте, казвам се Шарита Картер. Аз съм главен творчески директор в Уолт Дисни, Отдел за Инженерно Моделиране. Отговарям за групата, която създава атракциите които нашите гости могат да пробват. Винаги се опитваме да подобрим и направим нашите атракции по впечатляващи за гостите ни, а технологиите са в основата на това.
      2:
        image: notes/starwars_events_2.JPG
        text: Поздравления! Вие програмирахте ББ-8. Мисля, че вече сте готови за нещо по сложно. След като научихте основите на програмирането, да се върнем във времето и направим собствена игра с участието на R2-D2 и C3PO.
      3:
        image: notes/starwars_events_3.JPG
        text: 'За да създадем игра, трябва да научим нещо което всеки програмист използва всекидневно: наричат се събития. Събитията казват на програмата да слуша или чака нещо да се случи и тогава да изпълни действието.'
      4:
        image: notes/starwars_events_4.JPG
        text: Примери за събития са слушане за щракване с мишката, натискане на бутона със стрелка или натискане на екрана.
      5:
        image: notes/starwars_events_5.JPG
        text: Ще накараме R2-D2 да се премести нагоре и после надолу, за да предаде съобщение до пилотите на бунтовниците. Ще използваме Събития, за да го накараме да се движи. Това ще се случва, когато играча използва стрелките нагоре/надолу или бутоните нагоре/надолу.
      6:
        image: notes/starwars_events_6.JPG
        text: Използваме whenUp() събитийния блок и ще добавим блок goUp(). Когато играчът натисне клавиша със стрелка нагоре кода от блока goUp() ще се извърши. Ще направим същото, за да преместим Р2-Д2 надолу.
      7:
        image: notes/starwars_events_7.JPG
        text: За да постигнем това, ще използваме командата whenUp(). Когато я извлечете от кутията с инструменти, ще видите че тя започва и завършва с кръгли скоби вместо с двоеточие. Това ни позволява да добавим команди по средата. Когато играчът натисне клавиша със стрелката нагоре, тези вмъкнати команди ще се изпълнят.
      8:
        image: notes/starwars_events_8.JPG
        text: Искаме Р2-Д2 да отиде нагоре, за това ще вмъкнем блока goUp(); в командата. Ще направим същото, за да накараме Р2-Д2 да отиде надолу.
      9:
        image: notes/starwars_events_9.JPG
        text: Вместо да пишем кода предварително, можем да направим Р2-Д2 да реагира на събитие, свързано с натискане, което ще го движи по монитора. Стъпка, по стъпка играта става по интерактивна.
    starwars_congrats:
      1:
        image: notes/starwars_congrats_1.JPG
        text: Здравейте, аз съм Алис и отговарям за инженерния отдел в Code.org, също работех върху ръководството, което сега използвате.
      2:
        image: notes/starwars_congrats_2.JPG
        text: Достигнахте до последното ниво. Поздравления! Вече научихте всичко, което трябва, за да направите собствена игра Междузвездни войни. Няма повече инструкции и пъзели за решаване. Може да направите собствена игра със собствени правила. Още нещо, отключихте нови звукове и команди, с които да подобрите играта.
      3:
        image: notes/starwars_congrats_3.JPG
        text: '[students speaking]Значи направихме игра, в която печелите точки като вземете пафър прасета. Уловката е, че всеки път когато вземете прасе се появява войник от империята. Постепенно целият екран ще се изпълни с прасета и като достигнат 10,000 печелите.'
      4:
        image: notes/starwars_congrats_4.JPG
        text: '[students speaking] Направихме игра, в която не можете да губите точки и всичко, което убиете, ще ви носи точки. В моята програма обърнах бутоните, когато натиснете нагоре, вашият герой отива надолу, когато натиснете надясно, той отива наляво. Трудно е! Понякога това е предимство, ако сте създателя на играта. Правилно ли го разбрах? Уау!'
      5:
        image: notes/starwars_congrats_5.JPG
        text: След като сте направили играта, изберете сподели, за да я споделите с приятели или да я играете на телефон. Забавлявайте се!
    starwars_blocks_intro:
      1:
        image: notes/starwars_blocks_intro_1.JPG
        text: 'Здравейте! Аз съм Катлийн Кенеди Продуцент на Междузвездни Войни: Силата се Пробужда. Днес ще работите с една от нашите звезди, ББ-8, който е сферичен дроид. Всичко което прави и всяко негово движение се контролира от софтуер. Компютърните науки оказват влияние във всяка една сфера от маркетинг до медицина и филмо-производство. Всъщност хиляди Инженери работят заедно за да създадават филми като Силата се Пробужда.'
      2:
        image: notes/starwars_blocks_intro_2.JPG
        text: Здравейте, Аз съм Рейчъл Роуз Глaвен Инженер в отдела за Разработки в Ай Ел Ем, аз ръководя групата за създаване на анимираните ефекти. В Силата се Пробужда аз отговарям за ефектите които карат героя да извършва движения като че ли е наистина от далечно съзвездие.
      3:
        image: notes/starwars_blocks_intro_3.JPG
        text: В следващият час ще създадем наша собствена игра Междузвездни Войни която ще ви научи на основните методи в Програмирането. Обикновенно програмирането представлява текст но ние ще използваме Блокове, за да можем да ги влачим и оставяме. За начало ще работим с Рей за да програмираме ББ-8 да върви и събира металните остатъци.
      4:
        image: notes/starwars_blocks_intro_4.JPG
        text: Екрана ви е разделен на три части. В ляво е пространствоте където кода на играта Междузвездни войни ще се извърши. Инструкциите за всяко ниво са написани под игровото пространство.
      5:
        image: notes/starwars_blocks_intro_5.JPG
        text: Пространството по средата е кутията с инструменти, и всеки блок е команда, която ББ-8 може да разбере.
      6:
        image: notes/starwars_blocks_intro_6.JPG
        text: Бялото пространство в дясно е работното пространство където ще създадем играта.
      7:
        image: notes/starwars_blocks_intro_7.JPG
        text: Какво ще стане ако завлечем блока ПреместиНаляво(); до работното пространство? ББ-8 ще се премести наляво по мрежата.
      8:
        image: notes/starwars_blocks_intro_8.JPG
        text: А ако искам ББ-8 да направи още нещо след като изпълни командата от блок ПреместиНаляво(); Мога да добавя блок. Ще избера блока ПреместиНагоре(); и ще го завлека под блока ПреместиНаляво(); докато не се появят очертанията. Тогава ще го пусна и двата ще се споят. ББ-8 ще испълни комадите по ред отгоре до долу.
      9:
        image: notes/starwars_blocks_intro_9.JPG
        text: Ако изкате да изтриете блок, просто го преместет от купчината и го завлечете обратно в кутията с инструменти.
      10:
        image: notes/starwars_blocks_intro_10.JPG
        text: След като натиснете Тръгни, винаги може да натиснете бутона върни обратно за да накарете ББ-8 да започне отначало. Да започваме!
    starwars_blocks_events:
      1:
        image: notes/starwars_blocks_events_1.JPG
        text: Здравейте, казвам се Шарита Картер. Аз съм главен творчески директор в Уолт Дисни, Отдел за Инженерно Моделиране. Отговарям за групата, която създава атракциите които нашите гости могат да пробват. Винаги се опитваме да подобрим и направим нашите атракции по впечатляващи за гостите ни, а технологиите са в основата на това.
      2:
        image: notes/starwars_blocks_events_2.JPG
        text: Поздравления! Вие програмирахте ББ-8. Мисля, че вече сте готови за нещо по сложно. След като научихте основите на програмирането, да се върнем във времето и направим собствена игра с участието на R2-D2 и C3PO.
      3:
        image: notes/starwars_blocks_events_3.JPG
        text: 'За да създадем игра, трябва да научим нещо което всеки програмист използва всекидневно: наричат се събития. Събитията казват на програмата да слуша или чака нещо да се случи и тогава да изпълни действието.'
      4:
        image: notes/starwars_blocks_events_4.JPG
        text: Примери за събития са слушане за щракване с мишката, натискане на бутона със стрелка или натискане на екрана.
      5:
        image: notes/starwars_blocks_events_5.JPG
        text: Ще накараме R2-D2 да се премести нагоре и после надолу, за да предаде съобщение до пилотите на бунтовниците. Ще използваме Събития, за да го накараме да се движи. Това ще се случва, когато играча използва стрелките нагоре/надолу или бутоните нагоре/надолу.
      6:
        image: notes/starwars_blocks_events_6.JPG
        text: Използваме блокът Събитие КогатоНагоре() с добавен блок ОтидиНагоре(). Когато играчът натисне клавиша със стрелка нагоре кода от блока КогатоНагоре() ще се извърши. Ще направим същото за да преместим Р2-Д2 надолу. Обаче, вместо да пишем кода предварително, да направим Р2-Д2 да реагира на бутона натисни събития който го движи из екрана.
      7:
        image: notes/starwars_blocks_events_7.JPG
        text: Стъпка по стъпка играта става по-интерактивна.
    starwars_blocks_congrats:
      1:
        image: notes/starwars_blocks_congrats_1.JPG
        text: Здравейте, аз съм Алис и отговарям за инженерния отдел в Code.org, също работех върху ръководството, което сега използвате.
      2:
        image: notes/starwars_blocks_congrats_2.JPG
        text: Достигнахте до последното ниво. Поздравления! Вече научихте всичко, което трябва, за да направите собствена игра Междузвездни войни. Няма повече инструкции и пъзели за решаване. Може да направите собствена игра със собствени правила. Още нещо, отключихте нови звукове и команди, с които да подобрите играта.
      3:
        image: notes/starwars_blocks_congrats_3.JPG
        text: '[students speaking]Значи направихме игра, в която печелите точки като вземете пафър прасета. Уловката е, че всеки път когато вземете прасе се появява войник от империята. Постепенно целият екран ще се изпълни с прасета и като достигнат 10,000 печелите.'
      4:
        image: notes/starwars_blocks_congrats_4.JPG
        text: '[students speaking] Направихме игра, в която не можете да губите точки и всичко, което убиете, ще ви носи точки. В моята програма обърнах бутоните, когато натиснете нагоре, вашият герой отива надолу, когато натиснете надясно, той отива наляво. Трудно е! Понякога това е предимство, ако сте създателя на играта. Правилно ли го разбрах? Уау!'
      5:
        image: notes/starwars_blocks_congrats_5.JPG
        text: След като сте направили играта, изберете сподели, за да я споделите с приятели или да я играете на телефон. Забавлявайте се!
    mc_intro:
      1:
        image: notes/mc_intro_1.JPG
        text: Казвам се Йенс Бергенстен, но съм по известен като Джеб. Аз съм главният разработчик в Minecraft, в студио Моянг в Стокхолм. Мисля, че бях единадесет или дванадесет годишен, когато започнах да програмирам защото изках да създавам игри. Един от приятелите на моя баща ми каза, че трябва да се науча да програмирам ако искам да правя игри. Така започнах. Обичам да проектирам структурата на играта. Това е нещото, което харесвам в Minecraft.
      2:
        image: notes/mc_intro_2.JPG
        text: В следващият час ще се запознаете с основите на компютърните науки като програмирате Алекс или Стив да преминат през симулираната част от света на Minecraft.
      3:
        image: notes/mc_intro_3.JPG
        text: Програмирането представлява текст, но ние ще използваме Blockly. Това е система от блокове, които може да влачите и пускате, за да напишете програмата. В действителност се използва Javascript код.
      4:
        image: notes/mc_intro_4.JPG
        text: Концепциите, които ще научите, са същите които програмистите използват всеки ден. Те са в основата на програмирането. В Моянг използваме същите концепции, за да накараме Minecraft да проработи.
      5:
        image: notes/mc_intro_5.JPG
        text: Преди да започнете, трябва да изберете герой. Аз ще избера Алекс. Хайде да напишем код за програма, която ще ѝ помогне да се мести по екрана.
      6:
        image: notes/mc_intro_6.JPG
        text: Вашият екран е разделен на три основни части. Вляво е Minecraft игровото пространство, където вашата програма ще се изпълни. Инструкции за всяко ниво са дадени под него.
      7:
        image: notes/mc_intro_7.JPG
        text: Тази средна област е кутията с инструменти, а всеки от тези блокове е команда, която насочва действията на Алекс.
      8:
        image: notes/mc_intro_8.JPG
        text: Бялото пространство вдясно, се нарича работно пространство и това е мястото, където ние ще изградим нашата програма.
      9:
        image: notes/mc_intro_9.JPG
        text: Какво ще стане ако завлечете блока moveForward(); в работното пространство и после натиснете Старт? Алекс ще се премести напред с едно място.
      10:
        image: notes/mc_intro_10.JPG
        text: А ако искаме тя да направи още нещо след като се премести напред? Трябва да добавим друг блок в програмата. Ще избера блока turnRight(); и ще го плъзна под блока moveForward(); докато не се появят оранжеви линии. Тогава ще го пусна и двата блока ще се споят. Като натисна Старт, Алекс ще изпълни командите, които са съединени, отгоре до долу.
      11:
        image: notes/mc_intro_11.JPG
        text: Ако някога искате да изтриете блок, просто го плъзнете обратно към кутията с инструменти.
      12:
        image: notes/mc_intro_12.JPG
        text: 'За да отмените промените и отидете обратно в началото на нивото, използвайте бутона Стартиране отначало в горния десен ъгъл. Още нещо: виждате ли малкият триъгълник на блока Завърти? Всеки път като видите триъгълник, означава че може да изберете друга опция. Хайде да започваме да кодираме!'
    mc_repeat:
      1:
        image: notes/mc_repeat_1.JPG
        text: Аз съм Лидия Уинтерс, Директор в Моянг, където направихме игра, наречена Minecraft.
      2:
        image: notes/mc_repeat_2.JPG
        text: Любимото ми нещо в Minecraft е опознаването. Обичам приключенията, защото мога да намеря нещо. Аз не съм програмист и съм много развълнувана да чета уроците на Minecraft и действително да науча някои програмни кодове.
      3:
        image: notes/mc_repeat_3.JPG
        text: Последното ниво се нуждае от много moveForward(); блокове. Ще бъде по-лесно, ако ние просто може да кажем на компютъра да изпълнява moveForward(); командата четири или пет пъти. За щастие, компютрите са наистина добри в повтарянето на команди чрез цикли.
      4:
        image: notes/mc_repeat_4.JPG
        text: Когато изграждаме Minecraft, ние използваме цикли за повторение, за да поставим всички първоначални материали за създаване на нов свят. Това са хиляди, хиляди блокове. Ние също използваме циклите по малко начини, например да накараме краката на Alex да се движат назад и напред, когато тя ходи. Циклите за повторение са мощна част от програмирането.
      5:
        image: notes/mc_repeat_5.JPG
        text: 'Спуска се нощ, така че в следващите няколко нива, ние ще си построим къща, за да сме в безопасност. Ние ще използваме блок за повторение, за да направим това много по- лесно.'
      6:
        image: notes/mc_repeat_6.JPG
        text: За да изградим стената на къщата ни, ще кажем на Alex да постави дъски четири пъти. Това става като се постави тази команда в блок за повторение, който да извърши действието многократно. Сега ние ще кликнем на блока за повторение и ще изберем колко пъти искаме той да извършва това действие. Сега, нека построим къщата ни преди да падне нощта! Забавлявайте се.
    mc_if_statements:
      1:
        image: notes/mc_if_statements_1.JPG
        text: 'Сега ще научите за "ако" отчетите. Те са основна част от обучението по програмиране. Те помагат компютърът да взима решения.'
      2:
        image: notes/mc_if_statements_2.JPG
        text: 'Всички компютри използват "ако" отчети, включително моя телефон. Например, когато аз отключвам телефона се изпълнява код, който казва, че ако въведете паролата правилно, тогава ще се отключи телефона. В противен случай ще се покаже съобщение за грешка.'
      3:
        image: notes/mc_if_statements_3.JPG
        text: 'Можете да използвате "ако" отчети в кода си, за да накарате Стив и Алис да реагират на това, което виждат в света. Например, ако има камък пред тях, да могат да се завъртят наляво. Или да завият надясно, ако има опасност да се блъснат в дърво.'
      4:
        image: notes/mc_if_statements_4.JPG
        text: В този случай, ние не искаме да паднем в лавата. Лесно е да проверяваме за лава. Можем да го видим на екрана. Но, ако лавата е скрита под камък?
      5:
        image: notes/mc_if_statements_5.JPG
        text: 'След като изкопаем камък, ние ще трябва да проверим дали има някаква лава на това място, преди да тръгнем напред. Ако има лава там, ние трябва да поставим камък пред нашия герой, преди да върви напред. По този начин, можем спокойно да преминем. Време е за повече добив! И не забравяйте да използвате "ако", за да следите пътя си.'
    mc_congrats_share:
      1:
        image: notes/mc_congrats_share_1.JPG
        text: Поздравления! Ти научи основните градивни елементи на компютърните науки.
      2:
        image: notes/mc_congrats_share_2.JPG
        text: Сега можете да използвате тези блокове, за да изградите своя собствена творба. Няма повече инструкции и пъзели за решаване. Можете да създадете всичко, което искате. Вие решавате.
      3:
        image: notes/mc_congrats_share_3.JPG
        text: '[ученически разговор] За да придобиете реална представа. Остригване. Направих L от факли. Направих А от брезови дъски. Работи, работи. Ние изградихме къща от вълна!'
      4:
        image: notes/mc_congrats_share_4.JPG
        text: 'Когато приключите, изберете "сподели", за да получите връзка за споделяне с вашите приятели. Забавлявайте се!'
    mc_congrats_no_share:
      1:
        image: notes/mc_congrats_no_share_1.JPG
        text: Поздравления! Ти научи основните градивни елементи на компютърните науки.
      2:
        image: notes/mc_congrats_no_share_2.JPG
        text: Сега можете да използвате тези блокове, за да изградите своя собствена творба. Няма повече инструкции и пъзели за решаване. Можете да създадете всичко, което искате. Вие решавате.
      3:
        image: notes/mc_congrats_no_share_3.JPG
        text: '[ученически разговор] За да придобиете реална представа. Остригване. Направих L от факли. Направих А от брезови дъски. Работи, работи. Ние изградихме къща от вълна!'
      4:
        image: notes/mc_congrats_no_share_4.JPG
        text: Можете да създадете каквото си искате. Забавлявайте се!
    gumball_intro:
      1:
        image: notes/gumball_intro_1.JPG
        text: "If you'd like to make your own game, it's really easy. All you need are just a few basics of programming and you can start playing a game that you created."
      2:
        image: notes/gumball_intro_2.JPG
        text: "Do you have a favorite video game? We're going to take one step toward creating games just like that in PlayLab. Good games have a story and every story has actors. Actors that do things like speak, move and interact with each other. Maybe even score points based on the rules of the game. Today, we'll be learning how to do all these things one by one with fun actors and then build a game from scratch that can be shared and played on a phone."
      3:
        image: notes/gumball_intro_3.JPG
        text: "Today, we'll be learning how to do all these things one by one with fun actors and then build a game from scratch that can be shared and played on a phone."
      4:
        image: notes/gumball_intro_4.JPG
        text: Your screen is split into three main parts. On the left is the gamespace where your program will run. The instructions for each level are written below.
      5:
        image: notes/gumball_intro_5.JPG
        text: This middle area is the tool box and each of these blocks is a piece of code.
      6:
        image: notes/gumball_intro_6.JPG
        text: Бялото пространство вдясно, се нарича работно пространство и това е мястото, където ние ще изградим нашата програма.
      7:
        image: notes/gumball_intro_7.JPG
        text: "To start off, you'll need to link your blocks to the orange when run block. You can link multiple blocks together by dragging them out until you see the yellow line and then they'll snap together."
      8:
        image: notes/gumball_intro_8.JPG
        text: |-
          In this first puzzle, we'll make the actors say something by linking the "say" block to the when run block and typing in your message. Once you have your blocks in place, hit the run button to see what you programmed.
      9:
        image: notes/gumball_intro_9.JPG
        text: "Get started and by the end you'll be able to create your own game with all kinds of players that can interact, score points, throw things, and vanish each other. It's all up to you!"
    gumball_events:
      1:
        image: notes/gumball_events_1.JPG
        text: "Now we're going to learn about something all game programmers use everyday. They're called events. An event tells your program to listen for when something happens and then when it does, the game performs an action."
      2:
        image: notes/gumball_events_2.JPG
        text: Some examples of events are listening for a mouse click or an up or down arrow key or even a tap on the screen.
      3:
        image: notes/gumball_events_3.JPG
        text: |-
          Here, we're going to make the actor say something when the player clicks on it. We will use the when clicked block and attach the "say" block to it. When the player clicks, all the blocks attached to this block will be performed.
      4:
        image: notes/gumball_events_4.JPG
        text: There are also when arrow blocks. If you link move blocks to those, you can start to move your actors up, down, left, right, with the arrow keys. Little by little your game is getting more interactive.
    gumball_repeat:
      1:
        image: notes/gumball_repeat_1.JPG
        text: Can you imagine if you had to repeat something forever and ever? Hopefully you never have to because computers are really good at repeating things.
      2:
        image: notes/gumball_repeat_2.JPG
        text: "This is the repeat forever block. Anything inside this block will happen forever in the game. If we want an actor to do something repeatedly without the player having to do anything, we'll put those blocks inside the repeat forever block."
      3:
        image: notes/gumball_repeat_3.JPG
        text: In this next puzzle, our goal is to help the actor do a job continuously. Learning how the repeat commands work will save you a ton of time later when you build your own game.
    iceage_intro:
      1:
        image: notes/iceage_intro_1.JPG
        text: "If you'd like to make your own game, it's really easy. All you need are just a few basics of programming and you can start playing a game that you created."
      2:
        image: notes/iceage_intro_2.JPG
        text: "Do you have a favorite video game? We're going to take one step toward creating games just like that in PlayLab. Good games have a story and every story has actors. Actors that do things like speak, move and interact with each other. Maybe even score points based on the rules of the game. Today, we'll be learning how to do all these things one by one with fun actors and then build a game from scratch that can be shared and played on a phone."
      3:
        image: notes/iceage_intro_3.JPG
        text: "Today, we'll be learning how to do all these things one by one with fun actors and then build a game from scratch that can be shared and played on a phone."
      4:
        image: notes/iceage_intro_4.JPG
        text: Your screen is split into three main parts. On the left is the gamespace where your program will run. The instructions for each level are written below.
      5:
        image: notes/iceage_intro_5.JPG
        text: This middle area is the tool box and each of these blocks is a piece of code.
      6:
        image: notes/iceage_intro_6.JPG
        text: Бялото пространство вдясно, се нарича работно пространство и това е мястото, където ние ще изградим нашата програма.
      7:
        image: notes/iceage_intro_7.JPG
        text: "To start off, you'll need to link your blocks to the orange when run block. You can link multiple blocks together by dragging them out until you see the yellow line and then they'll snap together."
      8:
        image: notes/iceage_intro_8.JPG
        text: |-
          In this first puzzle, we'll make the actors say something by linking the "say" block to the when run block and typing in your message. Once you have your blocks in place, hit the run button to see what you programmed.
      9:
        image: notes/iceage_intro_9.JPG
        text: "Get started and by the end you'll be able to create your own game with all kinds of players that can interact, score points, throw things, and vanish each other. It's all up to you!"
    iceage_events:
      1:
        image: notes/iceage_events_1.JPG
        text: "Now we're going to learn about something all game programmers use everyday. They're called events. An event tells your program to listen for when something happens and then when it does, the game performs an action."
      2:
        image: notes/iceage_events_2.JPG
        text: Some examples of events are listening for a mouse click or an up or down arrow key or even a tap on the screen.
      3:
        image: notes/iceage_events_3.JPG
        text: |-
          Here, we're going to make the actor say something when the player clicks on it. We will use the when clicked block and attach the "say" block to it. When the player clicks, all the blocks attached to this block will be performed.
      4:
        image: notes/iceage_events_4.JPG
        text: There are also when arrow blocks. If you link move blocks to those, you can start to move your actors up, down, left, right, with the arrow keys. Little by little your game is getting more interactive.
    iceage_repeat:
      1:
        image: notes/iceage_repeat_1.JPG
        text: Can you imagine if you had to repeat something forever and ever? Hopefully you never have to because computers are really good at repeating things.
      2:
        image: notes/iceage_repeat_2.JPG
        text: "This is the repeat forever block. Anything inside this block will happen forever in the game. If we want an actor to do something repeatedly without the player having to do anything, we'll put those blocks inside the repeat forever block."
      3:
        image: notes/iceage_repeat_3.JPG
        text: In this next puzzle, our goal is to help the actor do a job continuously. Learning how the repeat commands work will save you a ton of time later when you build your own game.
