zh-CN:
  data:
    authored_hints:
      2-3 Artist 1 new_authored_hint:
        2-3_Artist_1_new_a: 如果使用模块让我 '前进 100 像素'，我会自动画一条线。
        2-3_Artist_1_new_b: 怎么才能转弯呢？使用 '向右转 90 度' 模块。
      2-3 Artist 11_authored_hint:
        2-3_Artist_11_a: '遇到角度的问题了？你需要在转8次后，转向360度。360除以8是多少呢？ '
      2-3 Artist 12_authored_hint:
        2-3_Artist_12_a: 一个圆有360度，所以如果小艺术家在进行循环时每次转1度，为了画这个圆他就需要运行循环360次 。
      2-3 Artist 2 new_authored_hint:
        2-3_Artist_2_new_a: 看起来似乎这位小艺术家没有面向轨迹的方向。你能想出办法让他在画线前先转向吗？
      2-3 Artist 3new_authored_hint:
        2-3_Artist_3new_a: 什么是100-70？从故事的问题来看，这就是帽子所需的高度！
        2-3_Artist_3new_b: 看起来似乎这位小艺术家没有面向轨迹的方向。你能想出办法让他在画线前先转向吗？
      2-3 Artist 4_authored_hint:
        2-3_Artist_4_a: 要想完成这栋房子，我们唯一需要做的就是画个正方形。
      2-3 Artist 6_authored_hint:
        2-3_Artist_6_a: '为了制造那些小的角度，你需要每次转比上个正方形更*多*的角度。   '
        2-3_Artist_6_b: 既然我已经面向右边了。那么先往前走，再往左转来画三角形是最容易的。
        2-3_Artist_6_c: 三角形的每一条边都跟正方形一样长...100像素！
      2-3 Artist 7_authored_hint:
        2-3_Artist_7_a: 解决这个迷题最简单的方法是绘制完第一个正方形后，让小艺术家指向下方，再开始画第二个正方形。
      2-3 Artist 8_authored_hint:
        2-3_Artist_8_a: 如果你把 200 分成两份，每个方块需要多少像素宽？
      2-3 Artist 9 NEW_authored_hint:
        2-3_Artist_9_a: 这个菱形真的只是和边上的正方形一样。
      2-3 Artist 9 REPLACEMENT_authored_hint:
        step_size: 每一步是 100 像素宽和 100 像素高。
      2-3 Artist 9_authored_hint:
        2-3_Artist_9_a: 这块钻石真的只是一个旋转 了45 度的正方形。
        2-3_Artist_9_b: |-
          别忘了在开始画你的正方形前把小艺术家向左旋转45度！
          
          ![](https://images.code.org/47cc2474e533667101a2d73b98da204e-image-1467744539967.gif)
      2-3 Artist Debugging 10_authored_hint:
        2-3_Artist_Debugging_10_a: 记住，你想要让控制面板*宽*10个像素......所以一定要在更改的数量上**加**10 。
        2-3_Artist_Debugging_10_b: "**尝试和失误在这里是很正常的！**\n\n通过一次改变一个数字开始。\n\n那些数字是干什么用的？\n\n如果你彻底弄混了，只需单击\"重新开始\"，然后代码就会被重置。"
      2-3 Artist Debugging 2_authored_hint:
        2-3_Artist_Debugging_2_a: '提示︰ 每根胡须有 75 个像素长。'
      2-3 Artist Debugging 3_authored_hint:
        2-3_Artist_Debugging_3_a: 其中的一个转向角度太小，只有15度。
        2-3_Artist_Debugging_3_b: 如果程序运行得太快，看不清楚发生了什么，试着用滑块让它慢下来。
      2-3 Artist Debugging 7_authored_hint:
        2-3_Artist_Debugging_7_a: 如果你让小艺术家在他绘制第一条线后向后移动或跳，会发生什么？
      2-3 Artist Debugging 8_authored_hint:
        2-3_Artist_Debugging_8_a: |-
          我的形状重复了多少次？
          
          这个形状*应该*重复多少次？
          
          你可以在程序的哪里更改？
      2-3 Artist Debugging 9_authored_hint:
        2-3_Artist_Debugging_9_a: 小艺术家在开始绘图之前还要再向左边旋转60度！
        2-3_Artist_Debugging_9_b: 你不需要再添加一个模块来转整圈，只要在已有的“向左转”模块上添加60度就可以了！
      2-3 Artist Functions 1 a_authored_hint:
        2-3_Artist_Functions_1_a: 这些方块的每个边都有100个像素，这意味着你将不得不在绘制你的第二个正方形前向前移动175个像素。
        2-3_Artist_Functions_1_b: 制作你的眼镜时绘制重叠的线条是可以的。
      2-3 Artist Functions 1_authored_hint:
        2-3_Artist_Functions_1_a: 这些方块的每个边都有100个像素，这意味着你将不得不在绘制你的第二个正方形前向前移动175个像素。
        2-3_Artist_Functions_1_b: 制作你的眼镜时绘制重叠的线条是可以的。
      2-3 Artist Functions 11 a_authored_hint:
        2-3_Artist_Functions_11_a: 你不仅需要改变函数里的数字和长度，还要改变每条边之间转的角度。
      2-3 Artist Functions 11_authored_hint:
        2-3_Artist_Functions_11_a: 你不仅需要改变函数里的数字和长度，还要改变每条边之间转的角度。
      2-3 Artist Functions 12 a_authored_hint:
        2-3_Artist_Functions_12_a: 运行一次试试，看看你需要加点什么。
      2-3 Artist Functions 12_authored_hint:
        2-3_Artist_Functions_12_a: 运行一次试试，看看你需要加点什么。
      2-3 Artist Functions 2 a_authored_hint:
        2-3_Artist_Functions_2_a: |-
          你的程序应该：
          - 使用函数
          - 向前移动 100+75像素
          - 使用函数
      2-3 Artist Functions 2_authored_hint:
        2-3_Artist_Functions_2_a: |-
          你的程序应该：
          - 使用函数
          - 向前移动 100+75像素
          - 使用函数
      2-3 Artist Functions 3 a_authored_hint:
        2-3_Artist_Functions_3_a: "* * 115 + 45 = 160 * *"
      2-3 Artist Functions 3_authored_hint:
        2-3_Artist_Functions_3_a: "* * 115 + 45 = 160 * *"
      2-3 Artist Functions 4 a_authored_hint:
        2-3_Artist_Functions_4_a: 艺术家需要在每个方块之间旋转 120 度来完成这个设计。
      2-3 Artist Functions 4_authored_hint:
        2-3_Artist_Functions_4_a: 艺术家需要在每个方块之间旋转 120 度来完成这个设计。
      2-3 Artist Loops New 11_authored_hint:
        2-3_Artist_Loops_New_11_a: |-
          请记住最后一块拼图的代码是：
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat">
          <title name="TIMES">8</title>
          <statement name="DO">
          <block type="draw_colour" inline="true">
          <value name="COLOUR">
          <block type="colour_random"/>
          </value>
          <next>
          <block type="draw_turn_by_constant_dropdown">
          <title name="DIR">turnRight</title>
          <title name="VALUE" config="45,60,90,120,180">45</title>
          <next>
          <block type="draw_move_by_constant">
          <title name="DIR">moveForward</title>
          <title name="VALUE">50</title>
          <next>
          <block type="draw_turn_by_constant_dropdown">
          <title name="DIR">turnLeft</title>
          <title name="VALUE" config="45,60,90,120,180">90</title>
          <next>
          <block type="draw_move_by_constant">
          <title name="DIR">moveForward</title>
          <title name="VALUE">50</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </xml>
        2-3_Artist_Loops_New_11_b: 新的转向代码应该在循环的**最后**。
      2-3 Artist Loops New 12_authored_hint:
        2-3_Artist Loops_New_12_a: 在开始画菱形之前，小艺术家需要左转 60 度走上正确的路径。
        2-3_Artist Loops_New_12_b: 小艺术家向前走100像素之后，他将需要向右转120度来画出锐角。
        2-3_Artist Loops_New_12_c: 小艺术家只要向右转60度就能画出一个钝角。
      2-3 Artist Loops New 13_authored_hint:
        2-3_Artist_Loops_New_13_a: "在每个菱形结束时，小艺术家已经朝向右边开始了下一步。\n\n一位这样，我们不必在开始前再加一个“向左转”模块。"
        2-3_Artist_Loops_New_13_b: "画每个菱形的时候，小艺术家需要：\n- 移动\n- 向右转120度\n- 移动\n- 向右转60度\n\n然后重复上面的动作！"
      2-3 Artist Loops New 9_authored_hint:
        2-3_Artist_Loops_New_9_a: 小艺术家在开始画画之前，需要向右转45度。
        2-3_Artist_Loops_New_9_b: 这个V实际上是半个正方形。什么样的代码能画出半个正方形呢？
      2-3 Artist Nested Loops 1_authored_hint:
        2-3_Artist_Nested_Loops_1_a: 记得把所有灰色的模块都放到你的循环里。
      2-3 Artist Nested Loops 3_authored_hint:
        2-3_Artist_Nested_Loops_3_a: "需要知道角度吗？ \n**360/12 = 30**"
        2-3_Artist_Nested_Loops_3_b: 记得把所有灰色的代码和你的转向模块都放到一个循环里。
      2-3 Artist Nested Loops 4_authored_hint:
        2-3_Artist_Nested_Loops_3_a: "需要知道角度吗？ \n**360/12 = 30**"
      2-3 Artist Nested Loops 5_authored_hint:
        2-3_Artist_Nested_Loops_5_a: "试着用“向前跳”模块来从一个正方形的顶部到下一个正方形开始的地方。\n\n如果你的正方形有20像素高，且它们相隔20像素，你需要跳多远？"
      2-3 Artist Nested Loops 7_authored_hint:
        2-3_Artist_Nested_Loops_7_a: "每次循环时应该转多少度？\n\n306/10是多少？"
      2-3 Artist Nested Loops 9_authored_hint:
        2-3_Artist_Nested_Loops_9_a: |-
          需要帮忙找到正确的角度吗？
          
          **360 / 12 = 30**
      2-3 Bee Conditionals 14_authored_hint:
        2-3_Bee_Conditionals_14_a: 很难琢磨出怎么将方块置下吗？试着在红色花朵上重复紫色花朵的动作！
        2-3_Bee_Conditionals_14_b: 如果红色的花是紫色，你能想出如何用一个额外的“循环”来减少代码吗？
        2-3_Bee_Conditionals_14_c: "试着把它分成两个独立的块：\n\n\n![](https://images.code.org/895a52f3febff9edb83979f7861cf67a-image-1469640892331.png)\n\n1) 收集花蜜三次\n  - 向前移动五次\n  - 检查是否有花蜜。如果有，就收集。\n  - 向左转\n  \n2) 酿蜂蜜 \n  - 向前移动一次\n  - 酿两个蜂蜜"
      2-3 Bee Conditionals 15_authored_hint:
        2-3_Bee_Conditionals_15_a: '记住：紫色的花只有0个或1个花蜜，而且每次运行程序时都会发生变化。'
      2-3 Bee Conditionals 3_authored_hint:
        2-3_Bee_Conditionals_3_a: 如果用循环的话，代码会非常短。一个用来循环向前移动，另一个循环用来收集花蜜，还有一个来酿造蜂蜜。
      2-3 Bee Conditionals 6_authored_hint:
        2-3_Bee_Conditionals_6_a: '记住：紫色的花里的花蜜数量是0或者1，会在每次运行程序时变化。'
      2-3 Bee Debugging 1_authored_hint:
        2-3_Bee_Debugging_1_a: 当你找到并修复了不正确的模块，你是否发现可以用 ”重复“ 循环来简化的模式了吗？
      2-3 Bee Debugging 2_authored_hint:
        2-3_Bee_Debugging_2_a: 当你找到并修复了不正确的模块，你是否发现可以用 ”重复“ 循环来简化的模式了吗？
      2-3 Bee Debugging 4_authored_hint:
        2-3_Bee_Debugging_4_a: 蜜蜂是不是做了什么没有道理的事情？你更改那个模块后，会发生什么？
      2-3 Bee Functions 4_authored_hint:
        2-3_Bee_Functions_4_a: 你不一定要在循环中使用函数。试试用该函数移动，然后使用该函数再次移动。
      2-3 Bee Functions 6_authored_hint:
        2-3_Bee_Functions_6_a: 你不一定要在循环中使用函数。试试用该函数移动，然后使用该函数再次移动。
      2-3 Bee Functions 8_authored_hint:
        2-3_Bee_Functions_8_a: "如果这个关卡看上去很有挑战性，尝试一点一点创建你的函数。 \n\n添加一些模块试试看。继续添加，然后再尝试。很快，你就能成功了！\n\n ![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)"
      2-3 Bee Functions 9_authored_hint:
        2-3_Bee_Functions_8_a: "如果这个关卡看上去很有挑战性，尝试一点一点创建你的函数。 \n\n添加一些模块试试看。继续添加，然后再尝试。很快，你就能成功了！"
        2-3_Bee_Functions_8_b: |2
          别忘了把你的代码创建在绿色的函数模块中。
          
           ![](https://images.code.org/8fe1fae5caf4ede3a9c9bd9f26940cde-image-1467996837459.gif)
      2-3 Bee Loops 2_authored_hint:
        2-3_Bee_Loops_2_a: 在你的循环里应该有四个模块。
      2-3 Bee Loops 3_authored_hint:
        2-3_Bee_Loops_3_a: 在你的循环里应该有六个模块。
      2-3 Bee Loops 3B_authored_hint:
        2-3_Bee_Loops_3B_a: 你将需要两个不同的 ”重复“ 循环，一个接在另一个的后面。
      2-3 Bee Loops 4_authored_hint:
        2-3_Bee_Loops_4_a: 在你的循环里应该有五个模块。
      2-3 Bee Loops 4A_authored_hint:
        2-3_Bee_Loops_4A_a: 第一个动作将会是转向，而不是移动。
        2-3_Bee_Loops_4A_b: 你的最后一段程序可以编写在循环外的结尾处。
        2-3_Bee_Loops_4A_c: 如果你还不能发现循环，试着先用长的代码把它编出来，最后看能不能合并成一个 “重复” 循环。
      2-3 Bee Loops 5_authored_hint:
        2-3_Bee_Loops_5_a: 如果你不能马上发现该放进 “重复” 的模块，可以先编出每次移动之后再寻找规律。
      2-3 Bee Loops 6_authored_hint:
        2-3_Bee_Loops_6_a: 如果你不知道应该把什么放入 “重复” 循环，尝试一个接一个地拖出模块，看看你能不能找到一种规律。
        2-3_Bee_Loops_6_b: 当你完成时，在 “重复” 循环中应有6个模块。
      2-3 Bee Loops 7_authored_hint:
        2-3_Bee_Loops_7_a: 第一个动作将会是转向，而不是移动。
        2-3_Bee_Loops_7_b: '如果你开始还不能想象出这个循环，试着先用长的方法把它编出来，然后寻找一个规律。  '
      2-3 Maze 1_authored_hint:
        2-3_Maze_1_a: 要使用 “向前移动” 模块，将它从工具栏拖进工作区并将其连接到 “当运行时” 模块。
      2-3 Maze 16_authored_hint:
        2-3_Maze_16_a: 如果很难看到规律，尝试把它全编出来，然后看看什么东西重复了好几遍，并把它们放进循环。
        2-3_Maze_16_b: "要在 “重复” 循环内放置许多模块，只要将一个循环拖进工作区，然后把一开始程序所有的模块拖到里面。\n\n把它接回 “当运行时” 模块就完成了！"
      2-3 Maze 6_authored_hint:
        2-3_Maze_6_a: 有两种方法来解决这个难题 ！
      2-3 Maze Loops 17_authored_hint:
        2-3_Maze_Loops_17_a: 如果很难看到规律，尝试把它全编出来，然后看看什么东西重复了好几遍，并把它们放进循环。
        2-3_Maze_Loops_17_b: 初始的代码被删除了？点击“重新开始”来找回来吧！
      2-3 Maze Loops 18_authored_hint:
        2-3_Maze_Loops_18_a: 如果很难看到规律，尝试把它全编出来，然后看看什么东西重复了好几遍，并把它们放进循环。
      2-3 Maze Loops 19_authored_hint:
        2-3_Maze_Loops_19_a: 如果陷入了困境，试试先不用循环来写代码，然后再寻找规律。
        2-3_Maze_Loops_19_b: 将一个循环放入另一个循环中，这样可以帮助减少使用的代码模块数量。
      2-3 Maze Loops 20_authored_hint:
        2-3_Maze_Loops_20_a: 在迷宫里寻找楼梯一样的规律，来找到可以用循环的地方。
      2-3 Maze Loops 21_authored_hint:
        2-3_Maze_Loops_21_a: 如果你不能找到楼梯一样的规律，试试用手指挡上堵住的路。
      4-5 Artist 1_authored_hint:
        4-5_Artist_1_a: "![](https://images.code.org/e5a08f29a9c4e306de5553dafca9fb5d-image-1467913845542.gif)"
      4-5 Artist 11_authored_hint:
        4-5_Artist_11_a: 在你的循环里，确保小艺术家在画了每条线以后，向前向后跳。
      4-5 Artist 3_authored_hint:
        4-5_Artist_3_a: |-
          如果花床的周长是600像素，并且有两条边是200像素长，那么下面是如何计算两条短边的和：
          
          **600 - 200 - 200 = 200**
          
          这意味着两条短边的和是200像素。
          
          **200除以2是多少？**
        4-5_Artist_3_b: 如果你不能很快找到那里是重复循环，试着把整个代码写出来，并寻找其中的模式。
      4-5 Artist 4_authored_hint:
        4-5_Artist_4_a: "一个圆有360度！ \n\n你需要重复多少次（每次转1度），才能画好整个圆？"
      4-5 Artist 5_authored_hint:
        4-5_Artist_5_a: |-
          试错是一个非常棒的方法，但是你也能通过将90度分成3份来解决这个问题。
          
          **90 / 3 = _____**
      4-5 Artist 7_authored_hint:
        4-5_Artist_7_a: '哪个角度是最小的？小艺术家站的角度是多少？ '
      4-5 Artist 8_authored_hint:
        4-5_Artist_8_a: "每条长边是240像素。这意味着两条短边的和必须为：\n\n**800 - 240 - 240 = 320**\n\n**320/2** 是多少? "
        4-5_Artist_8_b: "此图像可以用2种方式来画！  \n- 画两个矩形为 **120** 长和 **160** 高，有一条边是重叠的。\n- 画一个矩形为 **240** 长和 **160** 高，然后在中间画一条线。"
      4-5 Artist 9_authored_hint:
        4-5_Artist_9_a: "当一个三角形是等边三角形时，所有边和所有角度都是一样的。\n"
        4-5_Artist_9_b: 你需要画三个同样大小的三角形。别忘了画完每个后跳到新的位置。
      4-5 Artist Assessment 1_authored_hint:
        4-5_Artist_Assessment_1_a: 你只需要画外面的三角形就能完成这一关。
      4-5 Artist Patterns 11_authored_hint:
        4-5_Artist_Patterns_11_a: 如果一个圆有360度，每次循环转3度，那么画完这半个圆需要循环多少次呢？
      4-5 Artist Patterns 2_authored_hint:
        4-5_Artist_Patterns_2_a: 注意，因为这个正方形是20像素长，你需要在开始下一个正方形之前跳20像素。
      4-5 Artist Patterns 3_authored_hint:
        4-5_Artist_Patterns_3_a: 每次你试验新的时候，要小心的拖拽出整块代码。
        4-5_Artist_Patterns_3_b: 如果你的代码变得太乱了，随时可以点击“重新开始”来从头再来一遍。
      4-5 Artist Patterns 5_authored_hint:
        4-5_Artist_Patterns_5_a: "现在，当小艺术家完成每个菱形后，他面对的方向和下一个要画的方向是相反的。"
      4-5 Bee Conditionals 4_authored_hint:
        remember_quantum: "**记住：**这一关在每次运行的时候都会变化。\n\n你需要用一个条件模块（“如果”或“如果/否则”）来完成这个挑战。"
      4-5 Bee Conditionals 5_authored_hint:
        remember_quantum: "**记住：**这一关在每次运行的时候都会变化。\n\n你需要用一个条件模块（“如果”或“如果/否则”）来完成这个挑战。"
      4-5 Bee Conditionals 6_authored_hint:
        4-5 Bee Conditionals 6_a: 你能只用工作区的模块来解决这个难题。它们应该是什么样的顺序呢？
        4-5 Bee Conditionals 6_b: 确保你检查了是否花朵有多于**0**份花蜜，且检查至少**3**次来通过这一关。
      4-5 Bee Debugging 1_authored_hint:
        4-5_Bee_Debugging_1_a: 如果你不知道哪里不对，试着运行一下看看哪里错了。
      4-5 Bee Nested Loops Rows_authored_hint:
        4-5_Bee_Nested_Loops_Rows_a: 试着将这一关当成一个长方形，这个蜜蜂需要向前移动，向左转好几次来走完这条路。
      4-5 Maze 10_authored_hint:
        4-5_Maze_10_a: |-
          如果你不能马上看出如何用循环来通过这一关，试着先用长一点的方法把代码写出来，然后再寻找规律。
          
          你应该将“重复”放在什么地方来缩短代码？
      4-5 Maze 4_authored_hint:
        4-5_Maze_4_a: 如果难以找到在哪里放循环，试着先将代码写出来，然后再找规律。
      4-5 Maze 5_authored_hint:
        4-5_Maze_5_a: 试着在每次需要“向前移动”两次的时候，用一个“重复”循环来替代。
        4-5_Maze_5_b: 你可以在一关中用多个“重复”循环。
      4-5 Maze 6_authored_hint:
        4-5_Maze_6_a: "试着先用手指画画路径。\n这是你能找到的最短路径么？"
      4-5 Maze 7_authored_hint:
        4-5_Maze_7_a: "**想让你的代码尽可能的少吗？**\n\n在你的模块里寻找规律。你能看见重复的代码么？试着用循环来代替它！"
      4-5 Nested Loops 12_authored_hint:
        4-5_Nested_Loops_12_a: "**360 / 36 = ?**"
      4-5 Nested Loops 2_authored_hint: [ ]
      4-5 Nested Loops 6_authored_hint:
        4-5_Nested_Loops_6_a: |-
          别忘了在里面的循环里转向。
          
          你需要在360度里画6个三角形。
          
          **360 / 6 = ?**
      4-5 Nested Loops 7_authored_hint:
        4-5_Nested_Loops_7_a: |-
          这个图案会在360度里循环10次。
      4-5 Nested Loops 8_authored_hint:
        4-5_Nested_Loops_8_a: |-
          你需要在360度里循环这个图形6次。
          
          **360 / 6 = ?**
      4-5 While Loops 8_authored_hint:
        4-5_While_Loops_8_a: 每个条目都需要它自己的“当”循环。
      AppLab Intro 3 - Change Screen Color_authored_hint: [ ]
      AppLab Intro 4 - Change Screen Color_authored_hint: [ ]
      AppLab Intro 5 - Change Screen Color_authored_hint: [ ]
      AppLab Intro 6 - Change Screen Color_authored_hint: [ ]
      AppLab Intro 7 - Change Screen Color_authored_hint: [ ]
      Artist Inspiration_authored_hint:
        brush_width: 我们在开始前，将画笔的宽度设为1，并将颜色设置为蓝色。
        double_loop: 试着将一个“计数循环”放到一个“重复”循环里。
        specifics: "画出这6个花瓣的“计数循环”，每次都会运行3到17次，然后移动到下一个位置。每个形状都应该是奇数条边。\n\n这个设置透明度的模块是用来在计数器变大时，将颜色变淡。"
        after: 当你画完每个“花瓣”后，确保在转60度前，往前移动了20像素。
        solution: |-
          **解决方案**
          
          
          ![Image of Solution Blocks](https://images.code.org/d85a18bd31a09f87b41a818fc8d6c1cc-image-1469641375258.png)
      Bergeron Robot Maze1_authored_hint:
        2-3_Maze_1_a: 要使用 “向前移动” 模块，将它从工具栏拖进工作区并将其连接到 “当运行时” 模块。
      Course 4 Artist 11_authored_hint:
        Course_4_Artist_11_a: '这半个六边形有一条**30像素长**的边，并且需要向右转**60度**。  '
        Course_4_Artist_11_b: '这2/3个三角形有一条**80像素长**的边，并且需要向右转**120度**。 '
      Course 4 Artist 12_authored_hint:
        Course_4_Artist_12_a: '每个重复的形状都是**半个六边形**的组合，跟着**2/3个三角形**。 '
        Course_4_Artist_12_b: '这个单元的形状几乎和上一关是一样的，只是半个六边形有点大。 '
        Course_4_Artist_12_c: "1) 最开始的三条线是60像素长，并且你需要转60度。\n2) 接下来的两条线是80像素长，你需要转120度。 "
        Course_4_Artist_12_d: |-
          **解决方案：**
          
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_picker">
          <title name="COLOUR">#843179</title>
          </block>
          </value>
          <next>
          <block type="controls_repeat">
          <title name="TIMES">6</title>
          <statement name="DO">
          <block type="controls_repeat">
          <title name="TIMES">3</title>
          <statement name="DO">
          <block type="draw_move_by_constant">
          <title name="DIR">moveForward</title>
          <title name="VALUE">60</title>
          <next>
          <block type="draw_turn_by_constant">
          <title name="DIR">turnRight</title>
          <title name="VALUE">60</title>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="draw_move_by_constant">
          <title name="DIR">moveForward</title>
          <title name="VALUE">80</title>
          <next>
          <block type="draw_turn_by_constant">
          <title name="DIR">turnRight</title>
          <title name="VALUE">120</title>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 Artist 6_authored_hint:
        Course_4_Artist_6_a: 旋转360度会有3个三角形... 360除以3等于多少呢？
      Course 4 Artist 7_authored_hint: [ ]
      Course 4 Artist 8a_authored_hint:
        Course_4_Artist_8a: |-
          需要帮忙弄清应该转多少度吗？
          
          转360度有3个三角形。
          
          360除以3是多少？
      Course 4 Artist 9_authored_hint:
        Course_4_Artist_9_a: "想知道转角是多大吗？\n\n360除以10等于多少呢？"
      Course 4 Artist Binary Free Play 2b_authored_hint:
        Course_4_Artist_Binary_Free_Play_2b_a: 这个程序使用了两个“计数循环”。其中一个从1数到8，另外一个从8数到1。
        Course_4_Artist_Binary_Free_Play_2b_b: 每个“计数循环”都重复3次。第一个绘制最左边的1，第二个绘制中间的0，第三个绘制右边的1。
        Course_4_Artist_Binary_Free_Play_2b_c: 在每个循环中，你要对'counter(计数器)'画1，对 `16-(2 x counter)`画0
        Course_4_Artist_Binary_Free_Play_2b_d: |-
          **解决方案：**
          
          
          ![solution](https://images.code.org/b282dd6324910b7d604e24182cbbccbb-image-1469641477135.png)
      Course 4 Artist For Loops 11_authored_hint:
        Course_4_Artist_For_Loops_11_a: "每个图型之后转角角度都会改变！ \n\n通过数学模块输入360度除以图形的边数而得到正确的转角角度。 "
      Course 4 Artist For Loops 11a_authored_hint:
        Course_4_Artist_For_Loops_11a_a: '360度除以图形的边数得出的结果即是你需要的转角角度。 '
        Course_4_Artist_For_Loops_11a_b: '每一次你需要移动的距离相当于目前边数的10倍。 '
      Course 4 Artist For Loops 3_authored_hint:
        Course_4_Artist_For_Loops_3_a: 若通过计数循环来实现移动，需确保使用“计数器”来作为移动距离。
      Course 4 Artist For Loops 4_authored_hint:
        Course_4_Artist_For_Loops_4_a: "**你需要的数字最小是多少？ \n最大是多少？ \n那每次增加多少？**\n\n这些都是你在使用计数循环之前需要思考的问题。"
      Course 4 Artist For Loops Challenge_authored_hint:
        Course_4_Artist_For_Loops_Challenge_a: 最大的形状有19条边，最小的只有两条。
        Course_4_Artist_For_Loops_Challenge_b: 计数循环每次增加2。
      Course 4 Artist For Loops Challenge_a_authored_hint:
        Course_4_Artist_For_Loops_Challenge_a: 最大的多边形有19条边。
        Course_4_Artist_For_Loops_Challenge_b: 每个多边形都还不完整，它们都比应有的少了一条边。
      Course 4 Artist For Loops inspire_authored_hint:
        Course_4_Artist_For_Loops_inspire_a: 这个代码的基础跟之前的挑战关卡的解决方案大体相同，只有些许变化。
        Course_4_Artist_For_Loops_inspire_b: 尝试一个计数循环，从3到10，增量为1。
        Course_4_Artist_For_Loops_inspire_c: 这个计数循环里有两个迭代循环，但是第二个循环是相反的方向。
        Course_4_Artist_For_Loops_inspire_d: "**解决方案：**  \n\n<xml>\n<block type=\"when_run\" deletable=\"false\" movable=\"false\">\n<next>\n<block type=\"controls_for_counter\" inline=\"true\" movable=\"false\">\n<mutation counter=\"counter\"></mutation>\n<value name=\"FROM\">\n<block type=\"math_number\">\n<title name=\"NUM\">3</title>\n</block>\n</value>\n<value name=\"TO\">\n<block type=\"math_number\">\n<title name=\"NUM\">10</title>\n</block>\n</value>\n<value name=\"BY\">\n<block type=\"math_number\">\n<title name=\"NUM\">1</title>\n</block>\n</value>\n<statement name=\"DO\">\n<block type=\"controls_repeat_ext\" inline=\"true\">\n<value name=\"TIMES\">\n<block type=\"math_arithmetic\" inline=\"true\">\n<title name=\"OP\">MINUS</title>\n<value name=\"A\">\n<block type=\"variables_get\">\n<title name=\"VAR\">counter</title>\n</block>\n</value>\n<value name=\"B\">\n<block type=\"math_number\">\n<title name=\"NUM\">1</title>\n</block>\n</value>\n</block>\n</value>\n<statement name=\"DO\">\n<block type=\"draw_move\" inline=\"true\">\n<title name=\"DIR\">moveForward</title>\n<value name=\"VALUE\">\n<block type=\"math_number\">\n<title name=\"NUM\">40</title>\n</block>\n</value>\n<next>\n<block type=\"draw_turn\" inline=\"true\">\n<title name=\"DIR\">turnRight</title>\n<value name=\"VALUE\">\n<block type=\"math_arithmetic\" inline=\"true\">\n<title name=\"OP\">DIVIDE</title>\n<value name=\"A\">\n<block type=\"math_number\">\n<title name=\"NUM\">360</title>\n</block>\n</value>\n<value name=\"B\">\n<block type=\"variables_get\">\n<title name=\"VAR\">counter</title>\n</block>\n</value>\n</block>\n</value>\n</block>\n</next>\n</block>\n</statement>\n<next>\n<block type=\"controls_repeat_ext\" inline=\"true\">\n<value name=\"TIMES\">\n<block type=\"math_arithmetic\" inline=\"true\">\n<title name=\"OP\">MINUS</title>\n<value name=\"A\">\n<block type=\"variables_get\">\n<title name=\"VAR\">counter</title>\n</block>\n</value>\n<value name=\"B\">\n<block type=\"math_number\">\n<title name=\"NUM\">1</title>\n</block>\n</value>\n</block>\n</value>\n<statement name=\"DO\">\n<block type=\"draw_move\" inline=\"true\">\n<title name=\"DIR\">moveForward</title>\n<value name=\"VALUE\">\n<block type=\"math_number\">\n<title name=\"NUM\">40</title>\n</block>\n</value>\n<next>\n<block type=\"draw_turn\" inline=\"true\">\n<title name=\"DIR\">turnLeft</title>\n<value name=\"VALUE\">\n<block type=\"math_arithmetic\" inline=\"true\">\n<title name=\"OP\">DIVIDE</title>\n<value name=\"A\">\n<block type=\"math_number\">\n<title name=\"NUM\">360</title>\n</block>\n</value>\n<value name=\"B\">\n<block type=\"variables_get\">\n<title name=\"VAR\">counter</title>\n</block>\n</value>\n</block>\n</value>\n</block>\n</next>\n</block>\n</statement>\n</block>\n</next>\n</block>\n</statement>\n</block>\n</next>\n</block>\n</xml>"
      Course 4 Artist Functions Inspiration_authored_hint:
        Course_4_Artist_Functions_Inspiration_a: 接着上一个关卡的程式继续编程，在重复循环里新增一个“向右转”三度的指令。
        Course_4_Artist_Functions_Inspiration_b: 尝试将转角度数大于90度，跳出重复循环，但仍在计数循环之内。
        Course_4_Artist_Functions_Inspiration_c: |-
          **解决方案：**
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">14</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_random"/>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="procedures_callnoreturn">
          <mutation name="draw a square 20"></mutation>
          <next>
          <block type="jump_by_constant">
          <title name="DIR">jumpForward</title>
          <title name="VALUE">20</title>
          <next>
          <block type="draw_turn_by_constant">
          <title name="DIR">turnRight</title>
          <title name="VALUE">3</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="draw_turn_by_constant">
          <title name="DIR">turnLeft</title>
          <title name="VALUE">100</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </xml>
      Course 4 Artist Functions challenge_authored_hint:
        Course_4_Artist_Functions_challenge_a: 理解如何使用函数的其中一点是弄清楚哪些函数是自己需要的，哪些是不需要的。
        Course_4_Artist_Functions_challenge_b: 使用一个计数循环，用其计数器所为内部嵌套的重复循环的变量。
        Course_4_Artist_Functions_challenge_c: 每次迭代，应该绘制一个方形，然后向前跳转。
        Course_4_Artist_Functions_challenge_d: 你需要在重复循环外，但仍要在计数循环内左转90度。
      Course 4 Artist Inspire_authored_hint:
        Course_4_Artist_Inspire_a: 当绘制完成一个方形后，在转向和绘制另一个方形之前，尝试先向前跳转半个边长的长度。
        Course_4_Artist_Inspire_b: 绘制方形后跳转，以上动作重复循环四次(每次循环中间需左转)，可以得到一个完整的类似风车图案。
        Course_4_Artist_Inspire_c: 每个风车也重复四次，每次右转度数为:**360度/边数**。
        Course_4_Artist_Inspire_d: |-
          **解决方案：**
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_picker">
          <title name="COLOUR">#843179</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">sides</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">200</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">360</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpForward</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">360</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">360</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 Artist Vars 13_authored_hint:
        Course_4_Artist_Vars_13_a: 你需要两个重复循环(一个循环嵌套在另外一个循环里)，两个循环重复的次数均为“边数”。
        Course_4_Artist_Vars_13_b: "内部嵌套重复循环绘制一个八边型(左转)。 \n\n然后，你需要在外部循环前行并右转。"
        Course_4_Artist_Vars_13_c: 如需在边数改变的同时保持图形的尺寸，可以使用数学模块将长度（像素为单位）除以边数。
      Course 4 Artist Vars 6_authored_hint:
        Course_4_Artist_Vars_6_a: 若要绘制一个正多边形，需每次转动**360/边数**度。
      Course 4 Artist Vars 8_authored_hint:
        Course_4_Artist_Vars_8_a: 如果你将起始长度除以边数，边长会随着边数的增加而缩短。
      Course 4 Bee Params 7_authored_hint:
        notice_pattern: '你发现花蜜变化的规律了吗？ '
        count_with_for: 请注意花蜜每一步都在增加。你需使用哪一个模块在增加计数的同时，实现重复循环呢？
      Course 4 Bee Params 8_authored_hint:
        Course_4_Bee_Params_8_a: 你可以在每次循环时查询蜂蜜和花蜜数量。如果任意一个没有的话，它的数量则为0。
      Course 4 Play Lab Params 2_authored_hint:
        Course_4_Play_Lab_Params_2_a: 你将需要在跳转函数上点击“编辑”并进行更新，以使用“高度”参数。
      Course 4 Play Lab Vars 2_authored_hint:
        Course_4_Play_Lab_Vars_2_a: 请确保将“小狗的速度”的数值设置为大于“小猫的速度”的数值。
      Course 4 Play Labs For Loops 2_authored_hint:
        Course_4_Play_Labs_For_Loops_2_a: '“计数”循环每次需要增加多少才能跳过偶数呢？'
      Course 4 Playlab For Loop Freeplay_authored_hint: [ ]
      Course 4 Playlab For Loops 4b_authored_hint:
        Course_4_Playlab_For_Loops_4b_a: 标志距离角色约330像素。
        Course_4_Playlab_For_Loops_4b_b: 在不同起点和终点的情况下，如何能让每一个角色经同样的次数各移动330像素呢？
        Course_4_Playlab_For_Loops_4b_c: 记住，只要角色到达标志所用的次数是相同的，那角色最后一步越过标志多大距离都不重要。
      Course 4 Playlab For Loops 5b_authored_hint:
        Course_4_Playlab_For_Loops_5b_a: 角色距离中心约175像素。
        Course_4_Playlab_For_Loops_5b_b: 记住，因为计数器不断变大，角色的下一步会比上一步长。
      Course 4 Playlab For Loops 6b_authored_hint: [ ]
      Course 4 SCF 1_authored_hint:
        Course_4_SCF_1_a: 每个六边形的边长都是40像素。
        Course_4_SCF_1_b: 每个六边形之间需平行跳转120像素。
        Course_4_SCF_1_c: "在你绘制第二排的六边形之前，你需要右转60度，然后向前跳转40像素。 \n\n一旦你到达正确的垂直位置，你需要再次转动小艺术家，向后跳转320像素。"
        Course_4_SCF_1_d: "在你绘制第三排的六边形之前，你需要右转60度，然后向前跳转40像素。 \n\n一旦你到达正确的垂直位置，你需要再次转动小艺术家，向后跳转440像素（比“向下/向前”函数多120像素）。 "
        Course_4_SCF_1_e: |-
          **解決方案：**
          
          <xml> <block type="when_run" deletable="false" movable="false"> <next> <block type="controls_repeat_ext" inline="true"> <value name="TIMES"> <block type="math_number"> <title name="NUM">2</title> </block> </value> <statement name="DO"> <block type="procedures_callnoreturn"> <mutation name="draw a line of hexagons"></mutation> <next> <block type="procedures_callnoreturn"> <mutation name="shift down/forward"></mutation> <next> <block type="procedures_callnoreturn"> <mutation name="draw a line of hexagons"></mutation> <next> <block type="procedures_callnoreturn"> <mutation name="shift down/backward"></mutation> </block> </next> </block> </next> </block> </next> </block> </statement> </block> </next> </block> <block type="procedures_defnoreturn"> <mutation></mutation> <title name="NAME">draw a hexagon</title> <statement name="STACK"> <block type="controls_repeat_ext" inline="true"> <value name="TIMES"> <block type="math_number"> <title name="NUM">6</title> </block> </value> <statement name="DO"> <block type="draw_move" inline="true"> <title name="DIR">moveForward</title> <value name="VALUE"> <block type="math_number"> <title name="NUM">40</title> </block> </value> <next> <block type="draw_turn" inline="true"> <title name="DIR">turnRight</title> <value name="VALUE"> <block type="math_number"> <title name="NUM">60</title> </block> </value> </block> </next> </block> </statement> </block> </statement> </block> <block type="procedures_defnoreturn"> <mutation></mutation> <title name="NAME">shift down/backward</title> <statement name="STACK"> <block type="draw_turn" inline="true"> <title name="DIR">turnRight</title> <value name="VALUE"> <block type="math_number"> <title name="NUM">60</title> </block> </value> <next> <block type="jump" inline="true"> <title name="DIR">jumpForward</title> <value name="VALUE"> <block type="math_number"> <title name="NUM">40</title> </block> </value> <next> <block type="draw_turn" inline="true"> <title name="DIR">turnLeft</title> <value name="VALUE"> <block type="math_number"> <title name="NUM">60</title> </block> </value> <next> <block type="jump" inline="true"> <title name="DIR">jumpBackward</title> <value name="VALUE"> <block type="math_number"> <title name="NUM">440</title> </block> </value> </block> </next> </block> </next> </block> </next> </block> </statement> </block> <block type="procedures_defnoreturn"> <mutation></mutation> <title name="NAME">draw a line of hexagons</title> <statement name="STACK"> <block type="controls_repeat_ext" inline="true"> <value name="TIMES"> <block type="math_number"> <title name="NUM">3</title> </block> </value> <statement name="DO"> <block type="procedures_callnoreturn"> <mutation name="draw a hexagon"></mutation> <next> <block type="jump" inline="true"> <title name="DIR">jumpForward</title> <value name="VALUE"> <block type="math_number"> <title name="NUM">120</title> </block> </value> </block> </next> </block> </statement> </block> </statement> </block> <block type="procedures_defnoreturn"> <mutation></mutation> <title name="NAME">shift down/forward</title> <statement name="STACK"> <block type="draw_turn" inline="true"> <title name="DIR">turnRight</title> <value name="VALUE"> <block type="math_number"> <title name="NUM">60</title> </block> </value> <next> <block type="jump" inline="true"> <title name="DIR">jumpForward</title> <value name="VALUE"> <block type="math_number"> <title name="NUM">40</title> </block> </value> <next> <block type="draw_turn" inline="true"> <title name="DIR">turnLeft</title> <value name="VALUE"> <block type="math_number"> <title name="NUM">60</title> </block> </value> <next> <block type="jump" inline="true"> <title name="DIR">jumpBackward</title> <value name="VALUE"> <block type="math_number"> <title name="NUM">320</title> </block> </value> </block> </next> </block> </next> </block> </next> </block> </statement> </block> </xml>
      Course 4 SCF 1a_authored_hint:
        Course_4_SCF_1a_a: 记得从第16阶段开始使用过的函数。
        Course_4_SCF_1a_b: "观察这条路径作为主要路线: \n\n![](https://images.code.org/1c3feab70af706409b3a05af4dc83c2e-image-1469726967858.png)"
        Course_4_SCF_1a_c: 您应该考虑使用计数循环。不是循环这些步骤，而是循环不同参数来调用函数。
        Course_4_SCF_1a_d: |-
          **解决方案**
          
          <xml>
          <block type="when_run" deletable="false" movable="false" uservisible="false" y="14">
          <next>
          <block type="variables_set" inline="false" uservisible="false">
          <title name="VAR">左</title>
          <value name="VALUE">
          <block type="math_number" uservisible="false">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false" uservisible="false">
          <title name="VAR">右</title>
          <value name="VALUE">
          <block type="math_number" uservisible="false">
          <title name="NUM">0</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">21</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          <next>
          <block type="maze_if">
          <title name="DIR">是否左边有路</title>
          <statement name="DO">
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="get nectar">
          <arg name="dir"></arg>
          <arg name="counter"></arg>
          </mutation>
          <value name="ARG0">
          <block type="variables_get">
          <title name="VAR">左</title>
          </block>
          </value>
          <value name="ARG1">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">向右转</title>
          <next>
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          <next>
          <block type="maze_turn">
          <title name="DIR">向左转</title>
          <next>
          <block type="maze_if">
          <title name="DIR">是否右边有路</title>
          <statement name="DO">
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="获得花蜜">
          <arg name="dir"></arg>
          <arg name="counter"></arg>
          </mutation>
          <value name="ARG0">
          <block type="variables_get">
          <title name="VAR">右</title>
          </block>
          </value>
          <value name="ARG1">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          <block type="procedures_defnoreturn" editable="false" usercreated="true">
          <mutation>
          <arg name="dir"></arg>
          <arg name="counter"></arg>
          </mutation>
          <title name="NAME">获得花蜜</title>
          <statement name="STACK">
          <block type="controls_if" inline="false">
          <mutation else="1"></mutation>
          <value name="IF0">
          <block type="logic_compare" inline="true" movable="false">
          <title name="OP">EQ</title>
          <value name="A">
          <block type="parameters_get">
          <title name="VAR">方向</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">左</title>
          </block>
          </value>
          </block>
          </value>
          <statement name="DO0">
          <block type="maze_turn">
          <title name="DIR">向左转</title>
          </block>
          </statement>
          <statement name="ELSE">
          <block type="maze_turn">
          <title name="DIR">向右转</title>
          </block>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          </block>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="parameters_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_nectar"></block>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">向后移动</title>
          </block>
          </statement>
          <next>
          <block type="controls_if" inline="false">
          <mutation else="1"></mutation>
          <value name="IF0">
          <block type="logic_compare" inline="true" movable="false">
          <title name="OP">EQ</title>
          <value name="A">
          <block type="parameters_get">
          <title name="VAR">方向</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">左</title>
          </block>
          </value>
          </block>
          </value>
          <statement name="DO0">
          <block type="maze_turn">
          <title name="DIR">向右转</title>
          </block>
          </statement>
          <statement name="ELSE">
          <block type="maze_turn">
          <title name="DIR">向左转</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </xml>
      Course 4 SCF 1b_authored_hint:
        Course_4_SCF_1b_a: "注意，所有蜂蜜位置的形状都是相似的。\n\n是个使用函数的好地方！"
        Course_4_SCF_1b_b: "看看一下这些怎么让蜜蜂移动的想法：\n![](https://images.code.org/996ab4a2de6048cbb99b84c56cc4ad61-image-1469726859769.png)"
        Course_4_SCF_1b_c: 你应该考虑使用计数循环来计算蜜蜂旅行的距离。
        Course_4_SCF_1b_d: |-
          ** 解决方案: ** 
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="procedures_callnoreturn">
          <mutation name="酿蜂蜜并向上来回"></mutation>
          <next>
          <block type="maze_turn">
          <title name="DIR">向左转</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">向右转</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          <block type="procedures_defnoreturn" editable="false" usercreated="true">
          <mutation></mutation>
          <title name="NAME">酿蜂蜜并向上来回</title>
          <statement name="STACK">
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          <next>
          <block type="maze_turn">
          <title name="DIR">向右转</title>
          <next>
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          <next>
          <block type="maze_honey">
          <next>
          <block type="maze_honey">
          <next>
          <block type="maze_move">
          <title name="DIR">向后移动</title>
          <next>
          <block type="maze_turn">
          <title name="DIR">向左转</title>
          <next>
          <block type="maze_move">
          <title name="DIR">向后移动</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </xml>
      Course 4 SCF 2_authored_hint:
        Course_4_SCF_2_a: 每个八边形的边长都是40像素。
        Course_4_SCF_2_b: 每个八边形之间需水平跳转136像素
        Course_4_SCF_2_c: "当你画第二行八边形的之前，你需要向右转45度并且向前跳转96像素。 \n\n一旦你达到正确的垂直位置，你需要再次向后转小艺术家并且跳408像素。 "
        Course_4_SCF_2_d: "请注意, 由于偶数行中的八角形较少, 因此不必再跳到后面, 就可以到达奇数行的起始位置。   \n\n这意味着您可以对所有行使用相同的函数。"
        Course_4_SCF_2_e: |-
          **解决方案：**
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="画八边形">
          <arg name="numOctagons"></arg>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <next>
          <block type="procedures_callnoreturn">
          <mutation name="向下切换"></mutation>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="画八边形">
          <arg name="numOctagons"></arg>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <next>
          <block type="procedures_callnoreturn">
          <mutation name="向下切换"></mutation>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="画八边形">
          <arg name="numOctagons"></arg>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          <block type="procedures_defnoreturn" editable="false">
          <mutation>
          <arg name="numOctagons"></arg>
          </mutation>
          <title name="NAME">画八边形</title>
          <statement name="STACK">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="parameters_get">
          <title name="VAR">numOctagons</title>
          </block>
          </value>
          <statement name="DO">
          <block type="procedures_callnoreturn">
          <mutation name="画一个八边形"></mutation>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">向前跳</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">136</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </statement>
          </block>
          <block type="procedures_defnoreturn" editable="false">
          <mutation></mutation>
          <title name="NAME">画一个八边形</title>
          <statement name="STACK">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">8</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">向前移动</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">40</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">向右转</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">45</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </statement>
          </block>
          <block type="procedures_defnoreturn" editable="false">
          <mutation></mutation>
          <title name="NAME">向下切换</title>
          <statement name="STACK">
          <block type="draw_turn" inline="true">
          <title name="DIR">向右转</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">45</title>
          </block>
          </value>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">向前跳</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">96</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">向左转</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">45</title>
          </block>
          </value>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">向后跳</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">408</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </xml>
      Course 4 SCF 3_authored_hint:
        Course_4_SCF_3_a: "![](https://images.code.org/9310e6352e85a8265b424c9d57ca28d1-image-1446239776339.gif)"
        Course_4_SCF_3_b: '这是一系列的八角形, 两侧是`counter`（计数器）像素长。 '
        Course_4_SCF_3_c: '每个八角形是从里面的一个`计数循环`, 从200到2，每次递减 2。 '
        Course_4_SCF_3_d: '在每次迭代结束时, 不要忘记转22.5 度的角度。 '
        Course_4_SCF_3_e: 每个八角形的颜色和钢笔的宽度都由 "计数器" 变量控制。
        Course_4_SCF_3_f: |-
          ** 解决方案: **
          
          
          <xml>
          <block type="procedures_defnoreturn" editable="false">
          <mutation>
          <arg name="length"></arg>
          </mutation>
          <title name="NAME">画一个八边形</title>
          <statement name="STACK">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">8</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">向前移动</title>
          <value name="VALUE">
          <block type="parameters_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">向右转</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">45</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </statement>
          </block>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">200</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_rgb" inline="false">
          <value name="RED">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MINUS</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </value>
          <value name="GREEN">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="BLUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MULTIPLY</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="画一个八边形">
          <arg name="length"></arg>
          </mutation>
          <value name="ARG0">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">向左转</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">22.5</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCFL 1_authored_hint:
        Course_4_SCFL_1_a: "看看这个移动选项:\n\n![] (https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png)"
        Course_4_SCFL_1_b: '试着用两个 "计数" 循环: 一个用于攀爬和抓取花蜜, 另一种用于攀爬和制作蜂蜜。'
        Course_4_SCFL_1_c: "注意，一个`计数循环`里需要几个普通的循环来重复`counter`（计数器）次数来增加楼梯图案。\n\n另一个`计数循环`循环只需要一个普通的循环来酿造`counter`（计数器）个蜂蜜。"
        Course_4_SCFL_1_d: |-
          **解决方案：**
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">向左转</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">向右转</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">向右转</title>
          <next>
          <block type="maze_turn">
          <title name="DIR">向右转</title>
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward">
          <next>
          <block type="maze_turn">
          <title name="DIR">向左转</title>
          <next>
          <block type="maze_moveForward">
          <next>
          <block type="maze_turn">
          <title name="DIR">向右转</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_honey"/>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCFL 1a_authored_hint:
        Course_4_SCFL_1a_a: 你需要用更少的模块来走完所有路程。
        Course_4_SCFL_1a_b: "看看这个移动的方法:  \n\n\n![](https://images.code.org/253d710ff7d1b494fe8fd20cfc92baaf-image-1469726263579.png)"
        Course_4_SCFL_1a_c: '`计数循环` 将帮助您执行相同的模式，但步骤数不断变化。请注意，所需步骤的数量从7开始，每次减1，直到 5。'
        Course_4_SCFL_1a_d: |-
          **解决方案：**
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">7</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCFL 1b_authored_hint:
        Course_4_SCFL_1b_a: 试试使用“计数循环”
        Course_4_SCFL_1b_b: "看看这个移动的方法:  \n\n\n![](https://images.code.org/1957633c453f4025a3fd6ce0e201398b-image-1469642319721.png)"
        Course_4_SCFL_1b_c: |-
          **解决方案：**
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCFL 2_authored_hint:
        Course_4_SCFL_2_a: "看看这个移动选项:\n\n![](https://images.code.org/a69c63a039031254097f19231dd7bf95-image-1469726483169.png)"
        Course_4_SCFL_2_b: 请注意, 在`计数循环` 的每次迭代中，在你停止与目标互动后，都有3个点。
        Course_4_SCFL_2_c: 在`计数循环`的每次迭代中, 每个对象的数字都与 `counter`（计数器）变量有某种关联。
        Course_4_SCFL_2_d: |-
          ** 解决方案: **
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward">
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="maze_moveForward">
          <next>
          <block type="maze_moveForward">
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MULTIPLY</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_honey"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="maze_moveForward">
          <next>
          <block type="maze_moveForward">
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_arithmetic" inline="true">
          <title name="OP">POWER</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCFL 3_authored_hint:
        Course_4_SCFL_3_a: '·笔宽度·是1。第一个正方形有50像素边, 每个正方形比前一个宽50像素。'
        Course_4_SCFL_3_b: 画笔上的不透明度始终是 `counter`/2 （计数器/2）。
        Course_4_SCFL_3_c: 在你画了每个正方形后, 别忘了向后跳, 转身, 再跳, 然后回头!
        Course_4_SCFL_3_d: |-
          ** 解决方案: **
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_picker">
          <title name="COLOUR">#0000cd</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">50</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">350</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">50</title>
          </block>
          </value>
          <statement name="DO">
          <block type="alpha" inline="true" id="alpha">
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpBackward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpBackward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCFL 4_authored_hint:
        Course_4_SCFL_4_a: 颜色的变化使用`用红色, 绿色, 蓝色设置颜色`模块。 红色一直设置为`counter`（计数器）的值。绿色一直为`255-counter`, 蓝色设置为常量255。
        Course_4_SCFL_4_b: 每一个形状是一个正方形，边长是`counter`（计数器）像素长，从5px 开始, 每次增加5像素，一直到200像素。
        Course_4_SCFL_4_c: 小艺术家在每个正方形之间旋转15度。
        Course_4_SCFL_4_d: |-
          ** 解决方案: **
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">200</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_rgb" inline="false">
          <value name="RED">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="GREEN">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MINUS</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </value>
          <value name="BLUE">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_turn_by_constant">
          <title name="DIR">turnRight</title>
          <title name="VALUE">90</title>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">15</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCFL 6_authored_hint:
        Course_4_SCFL_6_a: 使用`用红色，绿色和蓝色设置颜色`的模块。红色设为常量255，绿色一直是`counter`（计数器）的值，蓝色一直是`255-counter`。
        Course_4_SCFL_6_b: 这个代码比你想象的要简单得多。 只需在 `计数循环`中设置颜色，向前移动，然后转向。
        Course_4_SCFL_6_c: '`计数循环` 从5增加到250，每次增加2。 '
        Course_4_SCFL_6_d: |-
          ** 解决方案: **
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">250</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_rgb" inline="false">
          <value name="RED">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          <value name="GREEN">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="BLUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MINUS</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">80</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCFL 7_authored_hint:
        Course_4_SCFL_7_a: 颜色的变化使用`用红色, 绿色, 蓝色设置颜色`模块。 红色设置为`counter`（计数器）的值。绿色为`255-counter`, 蓝色设置为常量255。
        Course_4_SCFL_7_b: '此绘图使用了两个类似的`计数循环`。 一个以2为增量从5到200, 另一个以2为减量从200到5。 '
        Course_4_SCFL_7_c: 在每个`计数循环`中，在转向`360 / counter`之前，向前移动5像素。别忘了在你做之前，设置画笔宽度为`counter`！
        Course_4_SCFL_7_d: 你需要在两个`计数循环`之间左转225度。
        Course_4_SCFL_7_e: |-
          ** 解决方案: **
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="alpha" inline="true" id="alpha">
          <value name="VALUE">
          <block type="math_number_dropdown">
          <title name="NUM" config="100,90,80,70,60,50,40,30,20,10,0">20</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">200</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_rgb" inline="false">
          <value name="RED">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="GREEN">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MINUS</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </value>
          <value name="BLUE">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">360</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">225</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">200</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_rgb" inline="false">
          <value name="RED">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="GREEN">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MINUS</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </value>
          <value name="BLUE">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">360</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCV 1_authored_hint:
        Course_4_SCV_1_a: '变量是有帮助的, 因为您可以通过循环每次增加它们。 '
        Course_4_SCV_1_b: 这个谜题有一个循环来创建多边形, 一个循环来重复多边形`sides`（边）的次数，然后另一个循环在把5加到到`sides`（边）后重新计算。
        Course_4_SCV_1_c: 使用`sides`和`length`的变量使代码更干净, 因为您可以多次循环相同的代码, 而不是为每组数字创建一个新的副本。
        Course_4_SCV_1_d: |-
          ** 解决方案: **
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">500</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">sides</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">0</title>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_random"/>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">sides</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">360</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">360</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCV 2_authored_hint:
        Course_4_SCV_2_a: "完成的图片是由10朵 \"花\"组成:\n![](https://images.code.org/bac2a606dfa59c00409294499540267d-image-1469641972385.png)\n\n...这是由10 个这样的十边形组成:\n![](https://images.code.org/1e15f278c9c1606f90a2490ec3a94eb4-image-1469642051512.png)"
        Course_4_SCV_2_b: '此设计使用嵌套循环（有三层深）。所有循环运行`sides`（边数）次。 '
        Course_4_SCV_2_c: 艺术家在创建每个对角线时向左拐, 但在其他两个循环中向右转。
        Course_4_SCV_2_d: 为了防止你的10朵"花"画在同一个地方，确保在最外层的循环中，在转向`360/sides`度前，向前跳`length`/`sides`。
        Course_4_SCV_2_e: |-
          ** 解决方案: **
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">400</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">sides</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_picker">
          <title name="COLOUR">#ff0000</title>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">360</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">360</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpForward</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">360</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCV 3_authored_hint:
        Course_4_SCV_3_a: '当精灵碰到一起时，用数学模块来给`points` （分数）变量加上或减去分数。 '
        Course_4_SCV_3_b: 你可以用这个参数来改变每次按下方向键时，精灵移动得距离。
        Course_4_SCV_3_c: |-
          ** 解决方案: **
          
          <xml><block type="when_run"><next><block type="variables_set" inline="false"><title name="VAR">points</title><value name="VALUE"><block type="math_number"><title name="NUM">0</title></block></value></block></next></block><block type="studio_whenArrow"><title name="VALUE">up</title><next><block type="studio_moveDistanceParams" inline="true"><title name="SPRITE">0</title><title name="DIR">1</title><value name="DISTANCE"><block type="math_number"><title name="NUM">25</title></block></value></block></next></block><block type="studio_whenArrow"><title name="VALUE">down</title><next><block type="studio_moveDistanceParams" inline="true"><title name="SPRITE">0</title><title name="DIR">4</title><value name="DISTANCE"><block type="math_number"><title name="NUM">25</title></block></value></block></next></block><block type="studio_whenArrow"><title name="VALUE">left</title><next><block type="studio_moveDistanceParams" inline="true"><title name="SPRITE">0</title><title name="DIR">8</title><value name="DISTANCE"><block type="math_number"><title name="NUM">25</title></block></value></block></next></block><block type="studio_whenArrow"><title name="VALUE">right</title><next><block type="studio_moveDistanceParams" inline="true"><title name="SPRITE">0</title><title name="DIR">2</title><value name="DISTANCE"><block type="math_number"><title name="NUM">25</title></block></value></block></next></block><block type="studio_whenSpriteCollided"><title name="SPRITE1">0</title><title name="SPRITE2">1</title><next><block type="variables_set" inline="false"><title name="VAR">points</title><value name="VALUE"><block type="math_arithmetic" inline="true"><title name="OP">ADD</title><value name="A"><block type="variables_get"><title name="VAR">points</title></block></value><value name="B"><block type="math_number"><title name="NUM">2</title></block></value></block></value></block></next></block><block type="studio_whenSpriteCollided"><title name="SPRITE1">0</title><title name="SPRITE2">2</title><next><block type="variables_set" inline="false"><title name="VAR">points</title><value name="VALUE"><block type="math_arithmetic" inline="true"><title name="OP">ADD</title><value name="A"><block type="variables_get"><title name="VAR">points</title></block></value><value name="B"><block type="math_number"><title name="NUM">3</title></block></value></block></value></block></next></block>
          <block type="studio_whenSpriteCollided">
          <title name="SPRITE1">1</title>
          <title name="SPRITE2">2</title>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">points</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MINUS</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">points</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCV 4_authored_hint:
        Course_4_SCV_4_a: 这里的三个变量能帮你。 一个是花蜜的单位, 一个是蜂蜜的单位, 一个是蜜蜂每次迭代移动的距离。
        Course_4_SCV_4_b: '在你的主循环里使用三个循环会非常有帮助。 一个用于前进, 一个用于收集花蜜, 一个用于制作蜂蜜。 '
        Course_4_SCV_4_c: "看看这个移动的方法:  \n\n![](https://images.code.org/78f8fb83da67c5b80126555a362b8b20-image-1469641782259.png)"
        Course_4_SCV_4_d: |-
          ** 解决方案: **
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">honey</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">nectar</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">6</title>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MINUS</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">nectar</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">nectar</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          <next>
          <block type="maze_moveForward">
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">honey</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_honey"/>
          </statement>
          <next>
          <block type="maze_moveForward">
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">honey</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">honey</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">nectar</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MINUS</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">nectar</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCV 5_authored_hint:
        Course_4_SCV_5_a: |-
          看看这个移动的方法: 
          
          ![](https://images.code.org/7f6f09c55cf9552a91fc1d33f44a7315-image-1469641639330.png)
        Course_4_SCV_5_b: 每次循环后，会少两个花蜜，蜜蜂需要多制作一个蜂蜜。
        Course_4_SCV_5_c: 请注意, 在外层循环开始的地方，蜜蜂需要尽可能多的移动，直到下一朵花里有花蜜。
        Course_4_SCV_5_d: |-
          ** 解决方案: **
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">honey</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">nectar</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">nectar</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">nectar</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">honey</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_honey"/>
          </statement>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">honey</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">honey</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">nectar</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MINUS</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">nectar</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCV 6_authored_hint:
        Course_4_SCV_6_a: |-
          看看一个完整的形状看起来像什么
          
          ![](https://images.code.org/9e30d3a87186cefe730984feee195806-image-1469642178866.png)
        Course_4_SCV_6_b: '你会从创建8个变量中获益： red1, green1， blue1, red2, green2, blue2, length, 和sides。（变量分别表示红色1，绿色1，蓝色1，红色2，绿色2，蓝色2，长度和边数）'
        Course_4_SCV_6_c: 当锯齿是青色 (rgb = 0,175,200) 和紫色的 (rgb = 100, 50, 150) 时候，将每个形状的5边分成`length`/`sides`部分。
        Course_4_SCV_6_d: '先左转`360`/`sides`，再右转`360`/`sides`。 '
        Course_4_SCV_6_e: '程序的其余部分是非常标准的转动360的形状，但会有一半的图形是重叠的。因此，我们必须向右转`180`/`sides`，这意味着我们通常需要转动两倍次数（`sides`*`2` 次重复）。 '
        Course_4_SCV_6_f: |-
          ** 解决方案: **
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">red1</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">0</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">green1</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">175</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">blue1</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">200</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">red2</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">100</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">green2</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">50</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">blue2</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">150</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">70</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">sides</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MULTIPLY</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_rgb" inline="false">
          <value name="RED">
          <block type="variables_get">
          <title name="VAR">red1</title>
          </block>
          </value>
          <value name="GREEN">
          <block type="variables_get">
          <title name="VAR">green1</title>
          </block>
          </value>
          <value name="BLUE">
          <block type="variables_get">
          <title name="VAR">blue1</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">360</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_rgb" inline="false">
          <value name="RED">
          <block type="variables_get">
          <title name="VAR">red2</title>
          </block>
          </value>
          <value name="GREEN">
          <block type="variables_get">
          <title name="VAR">green2</title>
          </block>
          </value>
          <value name="BLUE">
          <block type="variables_get">
          <title name="VAR">blue2</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">360</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">360</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">180</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">sides</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      CourseF_PlayLab_vars2_authored_hint:
        Course_4_Play_Lab_Vars_2_a: 请确保将“小狗的速度”的数值设置为大于“小猫的速度”的数值。
      D_Frozen_nested3_authored_hint:
        courseD_artist_project3_a: 使用`转向`块上的下拉菜单选择您需要的角度!
        courseD_artist_project3_b: "尝试嵌套循环！\n\n使用您创建的代码绘制一行形状并将其嵌套在另一个循环中。在底部, 在外部循环结束之前, 添加一个让埃尔莎转过来的块。\n\n- 如果重复外循环5次，尝试72度\n- 如果重复外循环6次，尝试60度"
      D_Frozen_nested4_authored_hint:
        courseD_artist_project4_a: |
          这里是五角的雪花, 在三角形的雪花前旋转36度：
          
          
          <img src="https://images.code.org/2ba023db9404f948fab655bfa7923160-image-1495822526223.14.13.png" width="200px" />
          
          这里是一组带有正方形的六边形：
          
          <img src="https://images.code.org/4d77462f3d07df6f1f5f2dc25e5d2b70-image-1495822526224.15.08.png" width="200px" />
        courseD_artist_project4_b: 若要尝试此项, 请绘制第一个雪花, 然后转向, 然后绘制第二个雪花。
      D_Frozen_nested5_authored_hint:
        courseD_artist_project4_a: |
          将两个六边形4个三角形画成线：
          
          <img src="https://images.code.org/37ca9779bafd2ccc5cc801f82358008e-image-1495823683964.34.09.png" width="200px" />
      D_Frozen_nested6_authored_hint:
        courseD_artist_project1a_a: |
          这台阶使用76度转弯并且重复4次。 
          
          <img src="https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png" width="200px" />
        courseD_artist_project1a_b: 这些模式很像从其他关卡里的楼梯台阶, 但使用不同的角度。
      D_Frozen_nested7_authored_hint:
        courseD_artist_project2a_a: |
          这幅画是通过在`重复两次` 块内嵌套一个4个楼梯和一个`右转180度 `模块来制作的。 
          
          <img src="https://images.code.org/bb24f9acee8afed2e119c1e920cb43f6-image-1495834479042.16.27.png" width="200px" />
      D_Frozen_nested8_authored_hint:
        courseD_artist_project3a_a: 你可以选择不同的数量来旋转你的形状！转向18次，每次20度如何？
      D_Frozen_nested9_authored_hint:
        courseD_artist_project4a_a: |
          这里有两个不同长度的雪花, 在一个后接着画另一个。（在两者之间转30度）
          
          <img src="https://images.code.org/45dedb51d89d3e5d0a88fe65ecbd7d7b-image-1495833855890.22.39.png" width="200px" />
      Farmer for Authored Hint testing_authored_hint:
        first_hint: |-
          这是第一个提示。 
          
          它有*一些* ** 基本 **的 `markup`（标记）
        second_hint: |-
          这是第二个提示。它有一个图像。 
          
          ![](https://images.code.org/cab43107265a683a6216e18faab2353f-image-1452027548372.png)
        last_hint: 这是第三个也是最后的提示。它没有什么特别的。
      Farmer for TTS testing_authored_hint:
        first_hint: |-
          这是第一个提示。 
          
          它有*一些* ** 基本 **的 `markup`（标记）
        second_hint: |-
          这是第二个提示。它有一个图像。 
          
          ![](https://images.code.org/cab43107265a683a6216e18faab2353f-image-1452027548372.png)
        last_hint: 这是第三个也是最后的提示。它没有什么特别的。
      Function intro Ryan_authored_hint:
        Function_intro_Ryan_b: 如果您调用的函数正确, 这将是您要旅行的路径。
        Function_intro_Ryan_a: 您可以在程序中多次调用某一函数！尝试调用两次以解决该难题。
      Harvesting_authored_hint:
        pointer_harvester_test: 我可以用什么样的模块来检查并做出决定？
      Inspirational Artwork_authored_hint:
        brush_width: 我们在开始前，将画笔的宽度设为1，并将颜色设置为蓝色。
        double_loop: 试着将一个“计数循环”放到一个“重复”循环里。
        specifics: "画出这6个花瓣的“计数循环”，每次都会运行3到17次，然后移动到下一个位置。每个形状都应该是奇数条边。\n\n这个设置透明度的模块是用来在计数器变大时，将颜色变淡。"
        after: 当你画完每个“花瓣”后，确保在转60度前，往前移动了20像素。
        solution: |-
          **解决方案**
          
          
          ![Image of Solution Blocks](https://images.code.org/d85a18bd31a09f87b41a818fc8d6c1cc-image-1469641375258.png)
      InspirationalArtwork_authored_hint: [ ]
      InspirationalArtwork_2018_authored_hint: [ ]
      K2.0 sequence 1_authored_hint:
        K2.0_sequence_1_a: 该程序缺少1 个模块，您是否可以找出是哪个？
      K2.0 sequence 10_authored_hint:
        K2.0_sequence_10_a: 如果你有困难, 试着先写下一张纸上的步骤。
        K2.0_sequence_10_b: You will need three different kinds of arrows to solve this puzzle.
      K2.0 sequence 12_authored_hint:
        K2.0_sequence_12_a: If the pig isn't moving far enough, try adding another block.
      K2.0 sequence 2_authored_hint:
        K2.0_sequence_2_a: 其中一个模块把鸟移向了错误的方向。你能找出是哪块并用正确的模块来取代它吗？
      K2.0 sequence 3_authored_hint:
        K2.0_sequence_3_a: 如果遇到问题, 请尝试找出正确的路径, 然后删除不适合的模块。
      K2.0 sequence 4_authored_hint:
        K2.0_sequence_4_a: Use 2 different arrow blocks to solve this puzzle!
      K2.0 sequence 5_authored_hint:
        K2.0_sequence_5: 最终的代码应该有3个移动模块。
      K2.0 sequence 6_authored_hint:
        K2.0_sequence_6_a: 你需要添加1个模块来把鸟移到猪那。
        K2.0_sequence_6_b: 如果无法想出要怎么做，请试着在纸张上画出关卡，并用手指来找出要移动的方向。
      K2.0 sequence 7_authored_hint:
        K2.0_sequence_7_a: 如果你被卡住了, 试着在纸上画出图像, 看看鸟儿应该如何移动。
      K2.0 sequence 8_authored_hint:
        K2.0_sequence_8_a: 卡住了？请试着用手指来描绘鸟的路径。
      K2.0 sequence 9_authored_hint:
        K2.0_sequence_9_a: 如果你有困难, 试着先写下一张纸上的步骤。
        K2.0_sequence_9_b: You will need to go three different directions to solve this puzzle.
      K2.0 sequence FP_authored_hint:
        K2.0_sequence_FP_a: 如果对路径不明白，请使用手指来追踪鸟到猪的线路。
      K2.0 sequence pre_authored_hint:
        K2.0_sequence_pre_a: If you are having trouble getting the bird to move, make sure blocks are connected under `when run`.
      MC Agent Freeplay_authored_hint:
        MC_HOC_2017_13_Cole_a: 尝试让代理人建造一些桥梁，这样艾莉克斯和史蒂夫就可以在地图边缘以外的地区走动了。
      MC_HOC_2017_01_Cole_authored_hint:
        MC_HOC_2017_01_Cole_a: 使用方向键将玩家引入该房屋。在结束时位于橙色方形区域上即为获胜。
      MC_HOC_2017_01_RETRY_authored_hint:
        MC_HOC_2017_01_RETRY_a: 将一个"向前移动"方块从工具箱拖拽入工作区，并将其粘贴到"当运行时"方块下面的位置。
        MC_HOC_2017_01_RETRY_b: 别忘了点击"运行"来运行为代理人写的代码。
        MC_HOC_2017_01_RETRY_c: 一旦代理人运行完全部代码，您就可以使用方向键移动玩家了！
      MC_HOC_2017_02_Cole_authored_hint:
        MC_HOC_2017_02_Cole_a: 将代理人向前移动两个空格，使其站立在压力板上。这将为您的玩家打开门。
        MC_HOC_2017_02_Cole_b: |-
          按"运行"！ 
          
          即便您的代码并不正确，您仍然可以运行。一遍遍运行并重置您的代码，直至您找出问题所在。
        MC_HOC_2017_02_Cole_c: 一旦代理人将门打开，使用方向键将玩家移动至地图上！
        MC_HOC_2017_02_Cole_d: 确保代理人正在跟踪地图上的路径!
      MC_HOC_2017_02_Will_authored_hint:
        MC_HOC_2017_02_Cole_a: 将代理人向前移动两个空格，使其站立在压力板上。这将为您的玩家打开门。
        MC_HOC_2017_02_Cole_b: |-
          按"运行代理人"！ 
          即便您的代码并不正确，您仍然可以运行。一遍遍运行并重置您的代码，直至您找出问题所在。
        MC_HOC_2017_02_Cole_c: 一旦代理人将门打开，使用方向键将玩家移动至橙色方形区域上！
      MC_HOC_2017_03_Cole_authored_hint:
        MC_HOC_2017_03_Cole_a: 一旦您将代理人移动至压力板上，就可以使用方向键使玩家走至指南针处！
        MC_HOC_2017_03_Cole_b: 代码是不是感觉有点儿长？尝试使用"重复"循环，看看能不能设法将代码变短点儿！
      MC_HOC_2017_04POINT5_Cole_authored_hint:
        MC_HOC_2017_04POINT5_Cole_a: |-
          穿过这两块压力板会为玩家打开该路径。 
          
          ![](https://images.code.org/9760c20b83d191570858617f8522ddad-image-1507751553614.50.25.png)
      MC_HOC_2017_04POINT5_RYAN_authored_hint:
        MC_HOC_2017_04POINT5_RYAN_b: '使用"向右转"模块改变代理人的方向 '
        MC_HOC_2017_04POINT5_RYAN_a: 代理人只需要抵达第一块压力板即可使艾利克斯或者史蒂夫通过并抵达斧头。
      MC_HOC_2017_04_Cole_authored_hint:
        MC_HOC_2017_04_Cole_a: 代理人需要向前移动7次。您将如何使用"重复"循环来实现这一点？
        MC_HOC_2017_04_Cole_c: |-
          按"运行"！ 
          
          即便您的代码并不正确，您仍然可以运行。一遍遍运行并重置您的代码，直至您找出问题所在。
        MC_HOC_2017_04_Cole_b: 一旦代理人抵达了压力板，将为玩家打开门。
      MC_HOC_2017_05_Cole_authored_hint:
        MC_HOC_2017_05_Cole_a: 您是否知道您可以在一个循环中放置不止一条指令？尝试在某个"重复中"放置一块木板**并**向前移动来解决这一难题。
        MC_HOC_2017_05_Cole_b: 在你行走的时候，建一座桥来让代理人过河。
      MC_HOC_2017_05_Josh_authored_hint:
        MC_HOC_2017_05_Cole_a: 您是否知道您可以在一个循环中放置不止一条指令？尝试在某个"重复中"放置一块木板**并**向前移动来解决这一难题。
      MC_HOC_2017_06_Cole_authored_hint:
        MC_HOC_2017_06_Cole_a: 这个循环运行了多少次？它又*应该*运行多少次？
        MC_HOC_2017_06_Cole_b: '帮助代理人建立一座横跨水的桥梁 ！ '
      MC_HOC_2017_06_Josh_authored_hint:
        MC_HOC_2017_06_Cole_a: 尝试在某个"重复"循环中放置不止一条指令！
      MC_HOC_2017_07_Cole_authored_hint:
        MC_HOC_2017_07_Cole_c: 所有你需要代理人做的是清除到矿车的路径 。
        MC_HOC_2017_07_Cole_a: 为了解决该难题，您需要搞清楚"清空路径"函数的作用是什么，并在任何有需要的时候，使用工具箱中的绿色小"清空路径"方块调用它。
        MC_HOC_2017_07_Cole_b: 尝试将这些函数模块与工具箱中的其他模块混合，来帮助您解决该难题。
      MC_HOC_2017_08_RY_authored_hint:
        MC_HOC_2017_08_RY_a: |-
          按"运行代理人"！ 
          即便您的代码并不正确，您仍然可以运行。一遍遍运行并重置您的代码，直至您找出问题所在。
        MC_HOC_2017_08_RY_b: 有许多方法可以解决这一难题。接着尝试吧！
      MC_HOC_2017_08_Will_authored_hint:
        MC_HOC_2017_08_RY_a: |-
          按"运行代理人"！ 
          即便您的代码并不正确，您仍然可以运行。一遍遍运行并重置您的代码，直至您找出问题所在。
        MC_HOC_2017_08_RY_b: 有许多方法可以解决这一难题。接着尝试吧！
      MC_HOC_2017_10_Cole_authored_hint:
        MC_HOC_2017_10_Cole_a: 使用函数来更容易的解决难题。
      MC_HOC_2017_10_RETRY_authored_hint:
        MC_HOC_2017_10_Cole_b: 不知道去哪里？ 看看你是否能找到虚线!
        MC_HOC_2017_10_Cole_a: 使用函数来更容易的解决难题。
      MC_HOC_2017_13_Cole_authored_hint:
        MC_HOC_2017_13_Cole_a: 尝试让代理人建造一些桥梁，这样艾莉克斯和史蒂夫就可以在地图边缘以外的地区走动了。
      MC_HOC_2017_4.5v2_authored_hint:
        MC_HOC_2017_04POINT5_Cole_a: |-
          穿过这两块压力板会为玩家打开该路径。 
          
          ![](https://images.code.org/9760c20b83d191570858617f8522ddad-image-1507751553614.50.25.png)
      MC_HOC_2017_Ali_authored_hint:
        MC_HOC_2017_08_RY_a: |-
          按"运行"！ 
          
          即便您的代码并不正确，您仍然可以运行。一遍遍运行并重置您的代码，直至您找出问题所在。
        MC_HOC_2017_08_RY_b: 有许多方法可以解决这一难题。接着尝试吧！
        MC_HOC_2017_08_RY_c: 尝试沿着虚线, 找到通过熔岩的简单路径。
      MC_HOC_2017_FP10x10_authored_hint: [ ]
      MC_HOC_2017_FP10x10_RE_authored_hint: [ ]
      MC_HOC_2017_FP20x20_authored_hint:
        MC_HOC_2017_13_Cole_a: 尝试让代理人建造一些桥梁，这样艾莉克斯和史蒂夫就可以在地图边缘以外的地区走动了。
      MikeStar_authored_hint:
        hint1: Don't give up!
      MikeStarHard_authored_hint:
        hint1: Don't give up!
      MikeStarNested_authored_hint:
        hint1: Don't give up!
      NEW Course 4 Artist Functions 13_authored_hint:
        NEW_Course_4_Artist_Functions_13_a: 尝试编辑`draw a line of squares`（用正方形画一条线）的函数, 这样你就不必两次调用它。
        NEW_Course_4_Artist_Functions_13_c: 如果你要尝试用普通的线条而不是盒子来做星星, 你需要什么代码？
      NEW Course 4 Artist Functions 4_authored_hint:
        NEW_Course_4_Artist_Functions_4_a: 在每个正方形之后, 您必须使用`向右转120度`模块。
      NEW Course 4 Artist Functions 9_authored_hint:
        NEW_Course_4_Artist_Functions_9_a: 在添加任何块之前, 请尝试运行代码。  是什么使绘图看起来有点不对？
        NEW_Course_4_Artist_Functions_9_b: 如果你不能很好地发现哪里出了问题, 试着通过向左移动滑块来减慢艺术家的速度。
      NEW Course 4 Artist Params 11_authored_hint:
        NEW_Course_4_Artist_Params_11_a: 有多个需要由函数内的变量替换的数字。
      NEW Course 4 Artist Params 13_authored_hint:
        NEW_Course_4_Artist_Params_13_a: '为了保持形状的整体大小一致, 您需要将 * 周长* 除以边数。 '
      NEW Course 4 Artist Params 14_authored_hint:
        NEW_Course_4_Artist_Params_14_a: 可以运行该程序几次以找出使用不同的参数函数如何工作。
      NEW Course 4 Artist Params inspire_authored_hint:
        brush_width: 我们在开始前，将画笔的宽度设为1，并将颜色设置为蓝色。
        double_loop: 试着将一个“计数循环”放到一个“重复”循环里。
        specifics: "画出这6个花瓣的“计数循环”，每次都会运行3到17次，然后移动到下一个位置。每个形状都应该是奇数条边。\n\n这个设置透明度的模块是用来在计数器变大时，将颜色变淡。"
        after: 当你画完每个“花瓣”后，确保在转60度前，往前移动了20像素。
        solution: |-
          **解决方案**
          
          
          ![Image of Solution Blocks](https://images.code.org/d85a18bd31a09f87b41a818fc8d6c1cc-image-1469641375258.png)
      NEW Course 4 Bee For Loops 10a_authored_hint:
        NEW_Course_4_Bee_For_Loops_10a_a: 你能在需要走的步数和采花蜜的数量之间找到一个规律吗？
        NEW_Course_4_Bee_For_Loops_10a_b: You'll need to have 2 repeats, one will use a math block.
      NEW Course 4 Bee For Loops 7_authored_hint:
        NEW_Course_4_Bee_For_Loops_7_a: |-
          试着用计数器变量来做些数学。
          
          要得到和你需要收集的花蜜一样的数量，你需要对每朵花的计数器做什么？
      NEW Course 4 Bee For Loops 8_authored_hint:
        NEW_Course_4_Bee_For_Loops_8_a: "如果循环往上计数，那么每次运行运行时都会将增量加到计数器变量中。 \n\n你需要将什么加到每个数字，来得到下一个数字？"
      New Minecraft Hero Project_authored_hint:
        MC_HOC_2017_13_Cole_a: 尝试让代理人建造一些桥梁，这样艾莉克斯和史蒂夫就可以在地图边缘以外的地区走动了。
      Overworld Avoid Monsters_authored_hint:
        mc_8_a: 你可以走几条路径。哪一条最短？
        mc_8_b: 使用`重复`循环来简化代码。
        mc_8_c: 你的目标是进入屏幕顶部的房子入口。
      Overworld Avoid Monsters_2018_authored_hint:
        mc_8_a: 你可以走几条路径。哪一条最短？
        mc_8_b: 使用`重复`循环来简化代码。
        mc_8_c: 你的目标是进入屏幕顶部的房子入口。
      Overworld Chop Tree_authored_hint:
        mc_2_a: '你需要`向前移动`两次才能站在树前。'
        mc_2_b: '`摧毁方块`命令让你砍倒你前面的树。'
      Overworld Chop Tree_2018_authored_hint:
        mc_2_a: '你需要`向前移动`两次才能站在树前。'
        mc_2_b: '`摧毁方块`命令让你砍倒你前面的树。'
      Overworld Chop Trees_authored_hint:
        mc_4_a: '你可以按任何顺序砍伐树木。什么路径需要的模块最少？'
        mc_4_b: '`摧毁方块`命令让你砍倒你前面的树。'
      Overworld Chop Trees_2018_authored_hint:
        mc_4_a: '你可以按任何顺序砍伐树木。什么路径需要的模块最少？'
        mc_4_b: '`摧毁方块`命令让你砍倒你前面的树。'
      Overworld House Frame Chosen_authored_hint:
        mc_6_a: 单击`放置`模块上的箭头可选择要放置的位置。
        mc_6_b: 不要害怕犯错误! 即使你还没有解决这个关卡，运行代码, 看看会发生什么。
        mc_6_c: 您可以在一个`重复`循环中放置多个模块。
      Overworld House Frame Chosen_2018_authored_hint:
        mc_6_a: 单击`放置`模块上的箭头可选择要放置的位置。
        mc_6_b: 不要害怕犯错误! 即使你还没有解决这个关卡，运行代码, 看看会发生什么。
        mc_6_c: 您可以在一个`重复`循环中放置多个模块。
      Overworld Move to Sheep_authored_hint:
        mc_1_a: '`向前移动`模块位于工具箱的顶部。'
        mc_1_b: '确保把两个`向前移动`模块粘到`当运行时`模块下。'
      Overworld Move to Sheep_2018_authored_hint:
        mc_1_a: '`向前移动`模块位于工具箱的顶部。'
        mc_1_b: '确保把两个`向前移动`模块粘到`当运行时`模块下。'
      Overworld Place Wall_authored_hint:
        mc_5_a: 先使用`放置`模块, 然后是`移动`模块。
        mc_5_b: 让代码多次运行，要确保两个模块都在`重复`循环里。
        mc_5_c: 不要害怕犯错误! 即使你还没有解决这个关卡，运行代码, 看看会发生什么。
      Overworld Place Wall_2018_authored_hint:
        mc_5_a: 先使用`放置`模块, 然后是`移动`模块。
        mc_5_b: 让代码多次运行，要确保两个模块都在`重复`循环里。
        mc_5_c: 不要害怕犯错误! 即使你还没有解决这个关卡，运行代码, 看看会发生什么。
      Overworld Plant Crops_authored_hint:
        mc_7_a: 使用`种植作物`模块在你所站的地方种植庄稼。
        mc_7_b: 两条暗褐色的土地都需要用庄稼来填满。
        mc_7_c: 您可以在一个`重复`循环中放置多个模块。
      Overworld Plant Crops_2018_authored_hint:
        mc_7_a: 使用`种植作物`模块在你所站的地方种植庄稼。
        mc_7_b: 两条暗褐色的土地都需要用庄稼来填满。
        mc_7_c: 您可以在一个`重复`循环中放置多个模块。
      Overworld Powered Minecart_authored_hint:
        mc_13_a: 使用`放置铁轨`在您所站的广场上铺设铁轨。
        mc_13_b: 使用`重复`循环使代码更短。
      Overworld Powered Minecart_2018_authored_hint:
        mc_13_a: 使用`放置铁轨`在您所站的广场上铺设铁轨。
        mc_13_b: 使用`重复`循环使代码更短。
      Overworld Shear Sheep_authored_hint:
        mc_3_a: '`修剪`模块能修剪前面的羊。你面对着羊群吗？  '
        mc_3_b: '如果要更改你的朝向, 请使用`转向`模块。  '
        mc_3_c: '不要害怕犯错误! 即使你还没有解决这个关卡，运行代码, 看看会发生什么。'
      Overworld Shear Sheep_2018_authored_hint:
        mc_3_a: '`修剪`模块能修剪前面的羊。你面对着羊群吗？  '
        mc_3_b: '如果要更改你的朝向, 请使用`转向`模块。  '
        mc_3_c: '不要害怕犯错误! 即使你还没有解决这个关卡，运行代码, 看看会发生什么。'
      Pattern Bee 1_authored_hint:
        conditional_pointer: |-
          从思考这个部分开始: 每一个步骤有什么不同？你可以用什么样的模块来*决定*你是否在花或蜂窝上？ 
          
          ![](https://images.code.org/a4883ea91c2f879ca1bb281d7944ed87-image-1471477752512.48.07 PM.png)
        turn_at_honeycomb_pointer: 除了酿蜂蜜, 你有没有看到你必须在蜂窝做的不同的事？
      Planning Farmer_authored_hint:
        conditional_pointer: |-
          从思考这个部分开始: 每一个步骤有什么不同？你可以用什么样的模块来*决定*你是否在花或蜂窝上？ 
          
          ![](https://images.code.org/a4883ea91c2f879ca1bb281d7944ed87-image-1471477752512.48.07 PM.png)
        turn_at_honeycomb_pointer: 除了酿蜂蜜, 你有没有看到你必须在蜂窝做的不同的事？
      Quantum Bee - Ryan_authored_hint:
        test_hint: 这是一个测试提示。
      Test embedded K1 Blockly in instructions_authored_hint: [ ]
      Underground Avoiding Lava_authored_hint:
        mc_11_a: 所有的来检查和处理熔岩代码都有了。您需要做的就是添加一个模块来移动。
        mc_11_b: 你的`向前移动`命令要在`如果`语句的里面还是后面？
      Underground Avoiding Lava_2018_authored_hint:
        mc_11_a: 所有的来检查和处理熔岩代码都有了。您需要做的就是添加一个模块来移动。
        mc_11_b: 你的`向前移动`命令要在`如果`语句的里面还是后面？
      Underground If Statements_authored_hint:
        mc_12_a: 红色斑点就是你发现红石的地方。
        mc_12_b: 你是否可以使用`重复`循环使代码更短？
        mc_12_c: '使用`如果`语句来检查熔岩空间, 然后放置圆石。 '
      Underground If Statements_2018_authored_hint:
        mc_12_a: 红色斑点就是你发现红石的地方。
        mc_12_b: 你是否可以使用`重复`循环使代码更短？
        mc_12_c: '使用`如果`语句来检查熔岩空间, 然后放置圆石。 '
      Underground Iron_authored_hint:
        mc_10_a: 铁块是火炬背后有斑点的空间！你怎么去那里？
        mc_10_b: 当你站在熔岩的边缘时, 用`把圆石放在前面`来制造一条安全的道路。然后，你就可以走过去了！
        mc_10_c: 不要害怕犯错误! 即使你还没有解决这个关卡，运行代码, 看看会发生什么。
      Underground Iron_2018_authored_hint:
        mc_10_a: 铁块是火炬背后有斑点的空间！你怎么去那里？
        mc_10_b: 当你站在熔岩的边缘时, 用`把圆石放在前面`来制造一条安全的道路。然后，你就可以走过去了！
        mc_10_c: 不要害怕犯错误! 即使你还没有解决这个关卡，运行代码, 看看会发生什么。
      Underground Mining Coal_authored_hint:
        mc_9_a: 你正朝向正确的方向吗？用`摧毁方块`挖你前面的方块。
        mc_9_b: 墙上的黑色斑点是煤！使用`摧毁方块`来挖煤。
        mc_9_c: 用`放火把` 把火把放在你所站的地方。
      Underground Mining Coal_2018_authored_hint:
        mc_9_a: 你正朝向正确的方向吗？用`摧毁方块`挖你前面的方块。
        mc_9_b: 墙上的黑色斑点是煤！使用`摧毁方块`来挖煤。
        mc_9_c: 用`放火把` 把火把放在你所站的地方。
      Valentine_artist2_01_authored_hint:
        Valentine_artist2_01_a: 草的每一边长是30像素。请尝试使用梯阶状步骤模式。
        Valentine_artist2_01_b: '看到任何重复模式吗？你可以在循环内使用两个`向前移动`模块和两个不同的`转向`模块。 '
        Valentine_artist2_01_c: |-
          请尝试此循环
          <xml><block type="controls_repeat">
          <title name="TIMES">8</title>
          <statement name="DO">
          <block type="draw_move_by_constant">
          <title name="DIR">moveForward</title>
          <title name="VALUE">30</title>
          <next>
          <block type="draw_turn_by_constant">
          <title name="DIR">turnRight</title>
          <title name="VALUE">90</title>
          <next>
          <block type="draw_move_by_constant">
          <title name="DIR">moveForward</title>
          <title name="VALUE">30</title>
          <next>
          <block type="draw_turn_by_constant">
          <title name="DIR">turnLeft</title>
          <title name="VALUE">90</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block></xml>
      Valentine_artist_01_authored_hint:
        Valentine_artist_01_a: 艺术家需要朝哪个方向移动？艺术家需要面朝哪个方向来放置一个新的羊驼贴纸？
        Valentine_artist_01_b: 艺术家需要放置10张羊驼贴纸并在每个转角转90度。
      Valentine_playlab_01_authored_hint:
        Valentine_playlab_01_a: |-
          把`演员1 抛掉红心`模块放入`当点击演员1时`事件。
          
          请别忘了把`左`改为`下`！
        Valentine_playlab_01_b: 使用`向左移动演员1`模块，点击把它放在`当按左方向键时`事件下。
      aE1_authored_hint: [ ]
      aE2_authored_hint:
        aE2_a: 请注意, 由于餐巾的长度是20像素, 因此在你开始下一个循环之前需要跳20像素。
      aE3_authored_hint:
        aE3_a: 在从最后一个阶段运行** 嵌套循环 ** 之后，需要跳转到该行的开头。
        aE3_b: "别忘了在你开始新的一排形状之前让小艺术家向下移动！ \n\n要将艺术家移动下来，让他再次面对正确的方向, 请确保:\n- 转90度 (面对向下)\n- 跳转20像素 (到新行)\n- 转回90度 (再次面对右)"
        aE3_c: 当你完成后， ** 嵌套循环 ** 应该有三层重复。
        aE3_d: 如果你的代码变得太乱了，随时可以点击“重新开始”来从头再来一遍。
      aE3alternate_authored_hint:
        aE3alternate_a: 在从最后一个阶段运行** 嵌套循环 ** 之后，需要跳转到该行的开头。
        aE3alternate_b: "别忘了在你开始新的一排形状之前让小艺术家向下移动！ \n\n要将艺术家移动下来，让他再次面对正确的方向, 请确保:\n- 转90度 (面对向下)\n- 跳转20像素 (到新行)\n- 转回90度 (再次面对右)"
        aE3alternate_c: 当你完成后， ** 嵌套循环 ** 应该有三层重复。
        aE3alternate_d: 如果你的代码变得太乱了，随时可以点击“重新开始”来从头再来一遍。
      aE3alternateB_authored_hint:
        aE4alternateB_a: 在从最后一个阶段运行** 嵌套循环 ** 之后，需要跳转到该行的开头。
        aE4alternateB_b: "别忘了在你开始新的一排形状之前让小艺术家向下移动！ \n\n要将艺术家移动下来，让他再次面对正确的方向, 请确保:\n- 转90度 (面对向下)\n- 跳转20像素 (到新行)\n- 转回90度 (再次面对右)"
        aE4alternateB_c: 当你完成后， ** 嵌套循环 ** 应该有三层重复。
        aE4alternateB_d: 如果你的代码变得太乱了，随时可以点击“重新开始”来从头再来一遍。
      aE4_authored_hint:
        aE4_a: 在从最后一个阶段运行** 嵌套循环 ** 之后，需要跳转到该行的开头。
        aE4_b: "别忘了在你开始新的一排形状之前让小艺术家向下移动！ \n\n要将艺术家移动下来，让他再次面对正确的方向, 请确保:\n- 转90度 (面对向下)\n- 跳转20像素 (到新行)\n- 转回90度 (再次面对右)"
        aE4_c: 当你完成后， ** 嵌套循环 ** 应该有三层重复。
        aE4_d: 如果你的代码变得太乱了，随时可以点击“重新开始”来从头再来一遍。
      aE5_authored_hint: [ ]
      aE6_authored_hint:
        aE6_a: |-
          如果有180度的半圆，每次循环小艺术家转3度, 你需要多少次循环，来绘制一个半圆？ 
          
          **180 ÷ 3 = ?**
      aE7_authored_hint:
        aE7_a: 绘制一个圆的下半部分, 然后画一个圆的上半部，来做一个线段。
        aE7_b: 您将需要4部分来完成这个关卡。
      aE8_authored_hint:
        aE8_a: "要从线来画一个正方形，你需要：\n\n- 画线\n- 使用弯曲的角落\n\n重复这些步骤4次。"
      allHallows2017_authored_hint:
        allHallows2017_a: 小心! GT 可能会骑单车跟随着你并擦除你的线！
        allHallows2017_g: '萨拉说: "你冷吗？过来坐在角落里..。这是90度!"'
        allHallows2017_c: '约迪恩说: "不要停止! 继续进行!"'
        allHallows2017_d: '乔希说: "你将需要利用你的编码技巧来完成这个关卡!"'
        allHallows2017_e: '丹妮说: "我不擅长双关语。尝试使用重复模块!"'
        allHallows2017_b: '贝克说: "芝加哥的蜡笔只在*绿色的线*上划。"'
        allHallows2017_f: '艾米说: "你能做到！发散一下思维。“'
      artistDebugVideo1_authored_hint:
        courseA_artist_loops7_a: 想不出在哪里放此循环吗？请试着逐步写下代码并寻找规律模式。
      artistFunctionsVideo1_authored_hint: [ ]
      artistLoopsK2_authored_hint:
        artistLoopsK2_a: 如果希望循环重复4次以上, 你可以更改该模块顶部的数字。
      artistLoopsK2gradek_artist_loops3_authored_hint:
        artistLoopsK2_a: 如果希望循环重复4次以上, 你可以更改该模块顶部的数字。
      artistLoopsK3_authored_hint:
        artistLoopsK3_a: 尝试使用您所学过的重复块来完成这个关卡!
      artistLoopsK4_authored_hint:
        artistLoopsK4_a: 卡壳了? 请尝试运行代码以查看哪个块不正确。
      artistLoopsK5_authored_hint:
        artistLoopsK5_a: 所有4个起始的模块应该进入你的重复块, 以解决这个关卡。
      artistLoopsK6_authored_hint:
        artistLoopsK6_a: 请通过运行代码查看出现错误的地方。
      artistLoopsK7_authored_hint:
        artistLoopsK7_a: 所有你要过关需要的块都已经在你的工作区里！
      artistLoopsK8_authored_hint:
        artistLoopsK8_a: 请通过运行代码查看出现错误的地方。
      artistLoopsK9_authored_hint:
        artistLoopsK9_a: 这个挑战使用四个循环, 一个接一个!
      artistLoopsKA_authored_hint:
        artistLoopsKA_a: 使用向前跳模块来向前移动，并且不会画线。
      artistLoopsKB_authored_hint:
        artistLoopsKB_a: 您的循环中应该有3个模块来解决这个关卡。
      artistLoopsKFP_authored_hint: [ ]
      comment_intro_maze_2018_authored_hint:
        courseC_maze_programming4_a: 当其他人试图读取您的代码时，注释也很有用。
        courseC_maze_programming4_b: 当你更改方向时，增加一条注释 - 如果转向另一条路，会发生什么情况？
      conditionals_forvideo_harvester_authored_hint: [ ]
      course1_artist_loops_challenge1_authored_hint:
        courseA_artist_loops_challenge1_a: |+
          您可以使用这样的循环来创建墙壁和屋顶。尝试重复不同的块。 
          
          ![](https://images.code.org/1581a2f599b501103064fc9864aa964d-image-1491863694560.png)
          
          设计您自己的或单击
          ![](https://images.code.org/53090194cea5dbf35ce9e35205156f5d-image-1491864793265.png) for some ideas!
        courseA_artist_loops_challenge1_b: "![](https://images.code.org/34f3bae38f77f07eaf455188c0b008e5-image-1491864823946.png)"
        courseA_artist_loops_challenge1_c: "![](https://images.code.org/24b208839971803f3f6cd6ae41da56df-image-1491864839734.png)"
        courseA_artist_loops_challenge1_d: "![](https://images.code.org/d3ccefffa0cc77bdd4a597cdb49fc85e-image-1491864847347.png)"
      course1_artist_loops_challenge2_authored_hint:
        harvey_tictactoe: 您可以使用 "跳转" 模块移动到其他位置。
      course1_artist_loops_challenge3_authored_hint:
        courseA_artist_loops_challenge2_a: '像这样的块: <xml> <block type="simple_move_up_left"/></xml>将让您的艺术家在斜面上移动!'
        courseA_artist_loops_challenge2_b: 当你完成一个鸟舍后，`跳`到下一个!
        courseA_artist_loops_challenge2_c: 在这个挑战中, 您需要在循环中放很多模块。
      course1_artist_loops_challenge4_authored_hint:
        courseB_artist_loops_challenge1_a: '像这样的模块:  <xml> <block type="simple_move_up_right"/></xml> 将让您的艺术家在斜线上移动！'
        courseB_artist_loops_challenge1_b: 当你完成一个骰子, `跳`到下一个!
        courseB_artist_loops_challenge1_c: '您将需要`移动`或`跳过`一些相同的行两次。 '
      course1_collector_loops_challenge1_authored_hint:
        courseA_collector_loops_challenge1_a: 如果有问题, 请尝试更改每个循环中的数字。
        courseA_collector_loops_challenge1_b: 如果有什么事情只做一次，就不需要使用循环, 。
        courseA_collector_loops_challenge1_c: 有6块宝石在右侧的洞穴, 但你只需要移动和收集5次。你知道为什么吗？
      course1_collector_loops_challenge2_authored_hint:
        courseA_collector_loops_challenge2_b: "你只需要使用一个![](https://images.code.org/803e9ee8b5bc9311a26edf955cd3c03f-image-1491001702274.07.34 PM.png)模块来解决这个问题。\n\n"
        courseA_collector_loops_challenge2_a: |-
          在向南移动之前, 您可以再次在路径上移动。
          
          ![](https://images.code.org/88c28c76dbea70e20253083d22b5f5fd-image-1491001404225.01.21 PM.png)
      course1_collector_loops_challenge3_authored_hint:
        courseB_collector_loops_challenge1_b: |
          开始循环命令 ' 往南移动 ' 和 ' 得到宝藏 '。
          <xml>
          <block type="maze_moveSouth"/><next>
          <block type="collector_collect"/></next>
          </xml>
        courseB_collector_loops_challenge1_a: |
          北边的图案与南边的图案略有不同。
          <xml>
          <block type="collector_collect"/><next>
          <block type="maze_moveNorth"/></next>next>
          </xml>
        courseB_collector_loops_challenge1_c: "在每条路径之间两次向东移动。\n<xml>\n<block type=\"maze_moveEast\"/><next>\n<block type=\"maze_moveEast\"/></next>next>\n</xml>\n你能只用14块模块做到这个。单击以查看解决方案的更多提示。 \n"
        courseB_collector_loops_challenge1_d: |-
          试试这个！
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="maze_moveNorth"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      course1_collector_loops_challenge4_authored_hint:
        courseB_collector_loops_challenge2_a: 如果出了差错, 不要害怕重新开始。不要放弃!
        courseB_collector_loops_challenge2_b: |-
          如果你重复这个模式, 劳雷尔不会撞到洞穴底部的墙上! 
          
          <xml><block type="maze_moveEast">
          <next>
          <block type="collector_collect">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveSouth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
        courseB_collector_loops_challenge2_c: 尝试使用 "重复" 块收集最后一堆的宝藏!
        courseB_collector_loops_challenge2_d: |-
          尝试此解决方案：
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_simplified_dropdown">
          <title name="TIMES" config="3-10">4</title>
          <statement name="DO">
          <block type="maze_moveEast">
          <next>
          <block type="collector_collect">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveSouth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="controls_repeat_simplified_dropdown">
          <title name="TIMES" config="3-10">6</title>
          <statement name="DO">
          <block type="collector_collect"/>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      course1_maze_debugging_challenge1_authored_hint:
        courseA_maze_seq_challenge1_a: 如果你走得太远, 有些小路会通向 TNT（炸弹）。
      course1_maze_debugging_challenge2_authored_hint:
        courseB_maze_seq_challenge2_a: 您不需要添加或删除块来解决此关卡。
        courseB_maze_seq_challenge2_b: 重新排列模块并走中间路径。
      course1_maze_seq_challenge1_authored_hint:
        courseA_maze_seq_challenge2_a: 试着用手指数一下空格。记住不要数你开始的空间!
      course1_maze_seq_challenge2_authored_hint:
        courseB_maze_seq_challenge1_a: 这一次最短路径可能无法解决问题。
        courseB_maze_seq_challenge1_b: 尝试向西移动开始。
      course1_playlab_events_challenge1_authored_hint:
        courseA_playlab_events_challenge1_a: "当你点罗宾 的时候，让企鹅出现！\n<xml> \n\n<block type=\"studio_whenSpriteClicked\">\n<title name=\"SPRITE\">2</title>\n<next>\n<block type=\"studio_setSprite\">\n<title name=\"VALUE\">\"visible\"</title>\n<title name=\"SPRITE\">3</title>\n</block>\n</next>\n</block></xml>"
        courseA_playlab_events_challenge1_b: "当你点企鹅的时候让布出现！\n<xml> \n\n<block type=\"studio_whenSpriteClicked\">\n<title name=\"SPRITE\">3</title>\n<next>\n<block type=\"studio_setSprite\">\n<title name=\"VALUE\">\"visible\"</title>\n<title name=\"SPRITE\">4</title>\n</block>\n</next>\n</block></xml>"
        courseA_playlab_events_challenge1_c: "当你点布时让毛绒绒的怪物杰登出现！\n<xml> \n\n<block type=\"studio_whenSpriteClicked\">\n<title name=\"SPRITE\">4</title>\n<next>\n<block type=\"studio_setSprite\">\n<title name=\"VALUE\">\"visible\"</title>\n<title name=\"SPRITE\">5</title>\n</block>\n</next>\n</block></xml>"
        courseA_playlab_events_challenge1_d: "当你点怪物的时候让机器人史毕福出现！\n<xml> \n\n<block type=\"studio_whenSpriteClicked\">\n<title name=\"SPRITE\">5</title>\n<next>\n<block type=\"studio_setSprite\">\n<title name=\"VALUE\">\"visible\"</title>\n<title name=\"SPRITE\">6</title>\n</block>\n</next>\n</block></xml>"
        courseA_playlab_events_challenge1_e: "最后，当你点史毕福的时候让巫师温德尔出现！\n<xml> \n\n<block type=\"studio_whenSpriteClicked\">\n<title name=\"SPRITE\">6</title>\n<next>\n<block type=\"studio_setSprite\">\n<title name=\"VALUE\">\"visible\"</title>\n<title name=\"SPRITE\">7</title>\n</block>\n</next>\n</block></xml>"
      course1_playlab_events_challenge2_authored_hint:
        courseA_playlab_events_challenge2_a: "你可以让小鸟唱歌。\n<xml> \n<block type=\"studio_whenSpriteClicked\">\n<title name=\"SPRITE\">2</title>\n<next>\n\n<block type=\"studio_saySprite\">\n<title name=\"SPRITE\">2</title>\n<title name=\"TEXT\">吱喳</title>\n</block>\n</next>\n</block></xml>"
        courseA_playlab_events_challenge2_b: "你可以让机器人发出咕噜声。\n<xml>\n<block type=\"studio_whenSpriteClicked\">\n<title name=\"SPRITE\">6</title>\n<next>\n\n<block type=\"studio_playSound\">\n<title name=\"SOUND\">winpoint</title>\n</block>\n</next>\n\n</block></xml>"
        courseA_playlab_events_challenge2_c: |-
          你可以让生气的怪物咆哮。
          
          <xml> <block type="studio_whenSpriteClicked">
          <title name="SPRITE">5</title>
          <next>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">5</title>
          <title name="VALUE">2</title>
          <next>
          <block type="studio_saySprite">
          <title name="SPRITE">5</title>
          <title name="TEXT">Roar!</title>
          <next>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">5</title>
          <title name="VALUE">0</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
      course2_artist_nestedLoops_challenge1_authored_hint:
        courseD_artist_nestedLoops_challenge1_a: 首先, 创建一个嵌套循环, 来建立四个八角形。旋转45度来做八角形。跳, 然后每个转90度。
        courseD_artist_nestedLoops_challenge1_b: 添加代码在嵌套循环内绘制三角形。使用120度来转弯。
        courseD_artist_nestedLoops_challenge1_c: |-
          使用嵌套循环：
          - 重复8次
          - 绘制八角形
          - 绘制三角形
          - 向前跳50像素
          - 向右转90度
      course2_artist_nestedLoops_challenge2_authored_hint:
        courseD_artist_nestedLoops_challenge2_a: 要画一个正八边形, 艺术家需要转45度8次。
        courseD_artist_nestedLoops_challenge2_b: 要画正方形, 艺术家需要转动90度4次。
      course2_artist_prog_challenge1_authored_hint:
        courseC_artist_prog_challenge1_a: '矩形是200像素宽, 100 像素高。 '
      course2_artist_prog_challenge2_authored_hint:
        courseC_artist_prog_challenge2_a: "您可以将命令放在`重复`模块中, 将它们反复循环。试试看！\n<xml>\n\n<block type=\"controls_repeat\">\n<title name=\"TIMES\">6</title>\n<statement name=\"DO\">\n<block type=\"draw_move_by_constant_dropdown\">\n<title name=\"DIR\">moveForward</title>\n<title name=\"VALUE\" config=\"25,50,100,150,200,300\">25</title>\n<next>\n<block type=\"jump_by_constant_dropdown\">\n<title name=\"DIR\">jumpForward</title>\n<title name=\"VALUE\" config=\"25,50,100,150,200,300\">25</title>\n</block>\n</next>\n</block>\n</statement></block></xml>"
      course2_bee_conditionals_challenge1_authored_hint:
        courseD_bee_conditionals_challenge1_a: |-
          你能找到一条通向每一朵花和蜂窝的小路而不撞到任何树木吗？最好的路径是螺旋式。 
          
          ** 你可以在不向左拐的情况下解决这个问题。
        courseD_bee_conditionals_challenge1_b: 在这个关卡中, 每个空间都可以有一朵花, 一只蜂蜜梳子, 或者什么都没有。 这意味着你在每个正方形可以重复你的`如果/否则`条件。
      course2_bee_conditionals_challenge2_authored_hint:
        courseD_bee_conditionals_challenge1_b: |-
          就像`如果有花`模块, 里面的代码`当花蜜数量 > 0`，只在蜜蜂在花那里的时候运行。不同的是, 里面的代码会反复运行, 直到没有花蜜。 尝试此模式：
          
          <xml> <block type="bee_whileNectarAmount">
          <title name="ARG1">nectarRemaining</title>
          <title name="OP">&gt;</title>
          <title name="ARG2">0</title> <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          </block></xml>
      course2_collector_loops_challenge2_authored_hint:
        courseC_maze_loops_challenge2_a: 如果在每一个土堆上只有一个宝藏，原来的代码将很有效！
        courseC_maze_loops_challenge2_b: 使用循环，这样就不会用光`收集`模块！
      course2_collector_prog_challenge1_authored_hint:
        courseC_collector_prog_challenge1_a: 你可以更经常使用`收集`命令来收集额外的宝藏。
      course2_collector_prog_challenge2_authored_hint:
        courseC_collector_prog_challenge1_a: 你可以更经常使用`收集`命令来收集额外的宝藏。
      course2_harvester_loops_challenge1_authored_hint:
        courseC_harvester_loops_challenge1_a: 不用循环的是不可能成功的！
        courseC_harvester_loops_challenge1_b: 你可以随意多次重复`向前移动`和`采摘玉米`然后在每个角落`右转`。
        courseC_harvester_loops_challenge1_c: |-
          收集前四个玉米的最佳方法是在一个`重复`模块内再使用一个`重复`模块。你也可以在其余的关卡使用这个模式！
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="harvester_corn"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </statement>
          </block></next></block></xml>
      course2_harvester_loops_challenge2_authored_hint:
        courseC_harvester_loops_challenge2_a: 解决这个问题的一种方法看起来像是一个锯齿形。另一种方式看起来像一个螺旋！有很多不同的解决这个关卡的方案。请坚持下去!
        courseC_harvester_loops_challenge2_b: 你可以多次重复`前进`和`采摘莴苣`，然后在每个角落右转。
        courseC_harvester_loops_challenge2_c: |
          重复运用这个曲折的模式两次就可以只用20个模块来完成这个关卡！
          
          ![](https://images.code.org/26cfaf6fe4a275e266b51e9ef3711171-image-1493502306380.18.52 PM copy.png)
        courseC_harvester_loops_challenge2_d: |-
          这种螺旋模式只要18个模块的编码!
          
          ![](https://images.code.org/0bfc0a0ed6783fae908368a6e6d12c02-image-1493501358990.18.52 PM.png)
      course2_maze_loops_challenge1_authored_hint:
        courseC_maze_loops_challenge1_a: 把这条路看成是三个不同的部分。每一个都有一个你可以重复的模式。
        courseC_maze_loops_challenge1_b: 在每个`重复`模块之间, 您需要`向左转`或`向右转`, 以便斯奎特为下一个模式作好准备 。
        courseC_maze_loops_challenge1_c: |-
          如果你已经进行了这么多, 你只需要多次`向左拐` 然后`向前移动`，不要放弃!
          
          ![](https://images.code.org/7696c5c16b8ddf1d53436cdc7fb6346d-image-1494101728016.14.34 PM.png)
      course2_maze_programming_challenge1_authored_hint: [ ]
      course2_maze_programming_challenge2_authored_hint:
        courseC_maze_programming_challenge2_a: "* 如果你让我倒退, 要格外小心, 确认我转的方向正确!"
        courseC_maze_programming_challenge2_b: 最短的解决方案仅使用了5个模块，但它使用了`重复`模块！
      course2_maze_seq_challenge1_authored_hint:
        courseA_maze_seq_challenge2_a: 试着用手指数一下空格。记住不要数你开始的空间!
      course2_maze_seq_challenge2_authored_hint:
        courseB_maze_seq_challenge1_a: 这一次最短路径可能无法解决问题。
        courseB_maze_seq_challenge1_b: 尝试向西移动开始。
      course3_artist_concept_challenge1_authored_hint:
        courseE_artist_concept_challenge1_a: '这半个六边形有一条**30像素长**的边，并且需要向右转**60度**。  '
        courseE_artist_concept_challenge1_b: '这2/3个三角形有一条**80像素长**的边，并且需要向右转**120度**。 '
      course3_artist_functions_challenge1_authored_hint:
        courseE_artist_functions_challenge1_a: 如果再次调用该函数, 则可以在最后一个角创建相同的设计。你也可以随你所想`跳到`其他位置，或者将整个改成自己想要的样子！
      course3_artist_functions_challenge2_authored_hint:
        courseE_artist_functions_challenge1_a: "<xml>\n\n<block type=\"jump_to_xy\">\n<title name=\"XPOS\">350</title>\n<title name=\"YPOS\">200</title>\n</block>\n</xml>\n\n此`跳到`块允许您随时将僵尸艺术家移动到网格上的任何像素。它的工作原理是将他向右下角移动一定的像素。这总是从左上角开始计算，这意味着在命令运行*之前*，僵尸艺术家的位置无关紧要。\n\n![](https://images.code.org/b90fdddc778a27e199221271ce91307a-image-1496450976440.png)"
      course3_bee_debugging_challenge1_authored_hint:
        courseD_bee_debugging_challenge1_a: 为什么这个程序的前半部分工作？考虑一下为什么蜜蜂需要向后移动。蜜蜂每次在花上移动时采集多少花蜜？
        courseD_bee_debugging_challenge1_b: 在回来的路上, 让蜜蜂遵循同样的模式。蜜蜂每次在蜂窝上移动需要制作多少蜂蜜？
        courseD_bee_debugging_challenge1_c: |-
          当蜜蜂移到最下面一行，让它重复这些命令：
          
          * 重复2次:
          * 向前移动
          * 酿3个蜂蜜
          * 向后移动
      course3_bee_functions_challenge1_authored_hint:
        courseE_bee_functions_challenge1_a: "如果这个关卡看上去很有挑战性，尝试一点一点创建你的函数。 \n\n添加一些模块试试看。继续添加，然后再尝试。很快，你就能成功了！"
        courseE_bee_functions_challenge1_b: 请记住在绿色函数模块内部构建代码。
      course3_bee_functions_challenge2_authored_hint:
        courseE_bee_functions_challenge1_a: "如果这个关卡看上去很有挑战性，尝试一点一点创建你的函数。 \n\n添加一些模块试试看。继续添加，然后再尝试。很快，你就能成功了！"
        courseE_bee_functions_challenge1_b: 请记住在绿色函数模块内部构建代码。
      course3_bee_functions_challenge3_authored_hint:
        courseF_bee_functions_challenge1_a: 您可以使用工具框中的函数来帮助您。您可以调用另一个函数的定义内的函数!
      course3_bee_functions_challenge4_authored_hint:
        courseF_bee_functions_challenge2_a: |-
          如果右侧有路径, 则应执行以下操作:
          * 得到花蜜或酿蜂蜜。
          * 向右拐, 往侧面走。
          * 移动到侧边路径的末尾。
          * 向右拐。 
          
          如果重复上述操作两次, 您将准备好往下回到主路。 
          
          ** 只有当你想看到完整的解决方案时才点击另一个提示!
        courseF_bee_functions_challenge2_b: |-
          ** 解决方案: **
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_untilBlocked">
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_if">
          <title name="DIR">isPathRight</title>
          <statement name="DO">
          <block type="procedures_callnoreturn" id="function">
          <mutation name="move and check"/>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          <block type="procedures_defnoreturn" editable="false" usercreated="true">
          <mutation/>
          <title name="NAME">check nectar or honey</title>
          <statement name="STACK">
          <block type="bee_ifElseFlower">
          <title name="LOC">atFlower</title>
          <statement name="DO">
          <block type="bee_whileNectarAmount">
          <title name="ARG1">nectarRemaining</title>
          <title name="OP">&gt;</title>
          <title name="ARG2">0</title>
          <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          </block>
          </statement>
          <statement name="ELSE">
          <block type="bee_whileNectarAmount">
          <title name="ARG1">honeyAvailable</title>
          <title name="OP">&gt;</title>
          <title name="ARG2">0</title>
          <statement name="DO">
          <block type="maze_honey"/>
          </statement>
          </block>
          </statement>
          </block>
          </statement>
          </block>
          <block type="procedures_defnoreturn" deletable="false" movable="false" editable="false">
          <mutation/>
          <title name="NAME">move and check</title>
          <statement name="STACK">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="procedures_callnoreturn">
          <mutation name="check nectar or honey"/>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="maze_untilBlocked">
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </statement>
          </block>
          </xml>
      course3_collector_debugging_challenge2_authored_hint:
        courseD_collector_debugging_challenge2_a: "专注从每前两堆收集两个宝石开始。\n\n![](https://images.code.org/8493c16a5b913b91e28b36eb2b280b8c-image-1494775939149.25.04 AM copy.png)\n用这些模块。\n\n<xml>\n<block type=\"collector_collect\"></block>\n<block type=\"controls_repeat\" limit=\"2\">\n<title name=\"TIMES\">2</title>\n</block>\n<block type=\"maze_move\" x=\"175px\" y=\"17px\">\n<title name=\"DIR\">moveForward</title>\n\n</block>\n\n\n<block type=\"controls_repeat\" limit=\"2\" x=\"175px\" y=\"56px\">\n<title name=\"TIMES\">2</title>\n</block>\n\n\n\n</xml>"
        courseD_collector_debugging_challenge2_b: "接下来, 在此行中收集剩余的宝石。 \n\n![](https://images.code.org/22fff9fb20a50beaf4800aa022a5deb0-image-1494775944657.25.04 AM.png)\nAdd these blocks to your program.\n\n<xml><block type=\"maze_move\">\n<title name=\"DIR\">moveBackward</title>\n</block>\n<block type=\"controls_repeat\">\n<title name=\"TIMES\">4</title>\n<statement name=\"DO\">\n\n</statement>\n</block>\n</xml>"
        courseD_collector_debugging_challenge2_c: "最后, 收集剩余的宝藏。将这些块添加到程序中。\n\n<xml>\n<block type=\"maze_turn\">\n<title name=\"DIR\">turnRight</title>\n</block>\n<block type=\"controls_repeat\">\n<title name=\"TIMES\">4</title>\n<statement name=\"DO\">\n\n</statement>\n</block>\n\n</xml>"
        courseD_collector_debugging_challenge2_d: |-
          这里是这个关卡的完整解决方案。
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat">
          <title name="TIMES">4</title>
          <statement name="DO">
          <block type="controls_repeat">
          <title name="TIMES">4</title>
          <statement name="DO">
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="collector_collect"/>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_move">
          <title name="DIR">moveBackward</title>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </xml>
      course3_farmer_condLoops_challenge1_authored_hint:
        courseD_farmer_condLoops_challenge1_a: 在这个挑战中,`步进`按钮可能非常有用。
        courseD_farmer_condLoops_challenge1_b: 通常情况下, 如果你是在南瓜那里, 你只会`摘南瓜`。如果你在南瓜那里, 你还需要做什么？
      course3_farmer_condLoops_challenge2_authored_hint:
        courseD_farmer_condLoops_challenge2_a: 每种蔬菜在每个空间的数量各不相同。请使用 `当`循环。
      course3_farmer_until_challenge2_authored_hint: [ ]
      course3_maze_debugging_challenge1_authored_hint:
        courseC_maze_debugging_challenge1_a: 向左还是向右？由你决定!
        courseC_maze_debugging_challenge1_b: 斯奎特的路径是一个矩形！他每次都要以同样的方式转动！
        courseC_maze_debugging_challenge1_c: 如果被难住了, 可以随时重新开始, 或删除所有的代码, 找到自己的方法!
      course3_maze_debugging_challenge2_authored_hint:
        courseC_maze_debugging_challenge2_a: 解决这一问题的一个方法是在转角之间增加更多的步骤。
        courseC_maze_debugging_challenge2_b: 如果你被卡住了, 你可以随时重新开始, 或删除所有的代码, 找到自己的方法!
        courseC_maze_debugging_challenge2_c: |-
          这里有两条不同的路，你只使用`向前移动`和4个转向模块就行。如果你找到了一个方法来使用`重复`模块，可能会有更多！
          
          ![](https://images.code.org/8a4665671cda35fea1f629a5bcc39e26-image-1493502743154.48.05 PM.png)
      course3_maze_until_challenge1_authored_hint: [ ]
      course3_playLab_challenge1_authored_hint:
        courseE_playLab_challenge1_a: |-
          当玩家赢得比赛时, 你可以做一些事情：
          
          * 让恐龙消失。
          * 阻止松鼠
          * 让松鼠和骑士开心
          * 设置新的背景。
          * 让骑士感谢玩家的帮助。
          * 让所有的演员消失, 并显示一个 "你赢了！"的信息
        courseE_playLab_challenge1_b: |2
          当玩家输掉游戏时, 你可以做一些事情：
          
          * 让骑士消失。
          * 让松鼠伤心
          * 让恐龙说点什么
          * 设置新的背景。*
           让所有的演员消失, 并显示一个"游戏结束"的消息。
      course3_playlab_challenge2_authored_hint:
        courseE_playlab_challenge2_a: |-
          这个演员根据自己的心情知道该说什么。用女巫可能会说的话来试试。
          
          <xml><block type="studio_saySpriteParamsTime" inline="true">
          <value name="SPRITE">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TEXT">
          <block type="text">
          <title name="TEXT">Concentrate and ask again!</title>
          </block>
          </value>
          <value name="TIME">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          </block></xml>
        courseE_playlab_challenge2_b: "如果您在条件列表下再次调用`问一个问题`函数, 你就会感觉游戏重新开始了。\n\n<xml><block type=\"studio_saySpriteParamsTime\" inline=\"true\">\n\n<block type=\"procedures_callnoreturn\">\n<mutation name=\"Ask a question\"></mutation>\n</block></block></xml>"
        courseE_playlab_challenge2_c: "您将需要添加更多的条件声明, 以便让演员有更多的话要说。\n\n<xml><block type=\"studio_ifActorHasEmotionParams\" inline=\"true\">\n<title name=\"EMOTION\">2</title>\n<value name=\"SPRITE\">\n<block type=\"math_number\">\n<title name=\"NUM\">1</title>\n</block>\n</value>\n<statement name=\"DO\">\n<block type=\"studio_saySpriteParamsTime\" inline=\"true\">\n<value name=\"SPRITE\">\n<block type=\"math_number\">\n<title name=\"NUM\">1</title>\n</block>\n</value>\n<value name=\"TEXT\">\n<block type=\"text\">\n<title name=\"TEXT\">???</title>\n</block>\n</value>\n<value name=\"TIME\">\n<block type=\"math_number\">\n<title name=\"NUM\">2</title>\n</block>\n</value>\n</block>\n</statement></block></xml>\n\n不用于忘了在永远重复循环中改变演员要显示的情绪。你也可以随意设定心情！"
        courseE_playlab_challenge2_d: |-
          一旦您了解了与演员1相关的所有代码, 就可以尝试重写相同的代码，但这次是针对演员2的。
          
          不要忘记更改`显示标题屏幕`模块中的说明, 让他们是正确的。
        courseE_playlab_challenge2_e: |-
          当一切都完成了, 你应该能够点击任一演员得到多达8个不同的消息。还有可能进一步扩展吗？
          
          完成后，让一个朋友尝试你的应用程序。
      course4_artist_binary_challenge2_authored_hint:
        courseD_artist_binary_challenge2_a: |-
          我给你的最好的提示是, 如果开始变得非常混乱, 请按 `⟲重新开始`。 原来的程序中只有几行错误。如果一种方法失败了，请备份并重试。这里有解决方案!
      course4_artist_concept_challenge2_authored_hint:
        courseE_artist_concept_challenge2_a: 一旦你定义了一个函数, 你可以一次又一次地调用它 - 任何想用的地方或时机！
        courseE_artist_concept_challenge2_b: |-
          您可以使用以下命令跳转到画布上的不同位置：
          <xml> <block type="jump_to">
          <title name="VALUE">???</title>
          </block></xml>
      course4_artist_functions_challenge2_authored_hint:
        courseE_artist_functions_challenge1_a: "<xml>\n\n<block type=\"jump_to_xy\">\n<title name=\"XPOS\">350</title>\n<title name=\"YPOS\">200</title>\n</block>\n</xml>\n\n此`跳到`块允许您随时将僵尸艺术家移动到网格上的任何像素。它的工作原理是将他向右下角移动一定的像素。这总是从左上角开始计算，这意味着在命令运行*之前*，僵尸艺术家的位置无关紧要。\n\n![](https://images.code.org/b90fdddc778a27e199221271ce91307a-image-1496450976440.png)"
      course4_artist_fwp_challenge1_authored_hint: [ ]
      course4_artist_variables_challenge1_authored_hint:
        courseF_artist_variables_challenge1_a: 每条竖线的长度都是 "10"。每条水平线的长度应为 "长度"。
        courseF_artist_variables_challenge1_b: 您将希望把 "长度" 的值在循环中增加10 **两次**。
        courseF_artist_variables_challenge1_c: 要完成该模式, 您将需要向左两次, 右转两次, 并向前移动共四次。
        courseF_artist_variables_challenge1_d: |-
          这个谜题只用一个循环。没有变量的话，类似的路径可能只是一个锯齿形。
          
          ![](https://images.code.org/664fdd219502d004fb07886f834fa3d5-image-1496868743379.51.36 PM.png)
          
          如果您遇到麻烦, 请从创建此映像开始, 然后尝试查看可以使用变量更改水平线的长度。
        courseF_artist_variables_challenge1_e: |-
          这里是解决方案。
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">长度</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">18</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">向前移动</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">向右转</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">向前移动</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">长度</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">增加</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">向左转</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">向前移动</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">向左转</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">向前移动</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">长度</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">增加</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">向右转</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      course4_artist_variables_challenge2_authored_hint:
        courseF_artist_variables_challenge2_a: '变量是有帮助的, 因为您可以通过循环每次增加它们。 '
        courseF_artist_variables_challenge2_b: 这个谜题有一个循环来创建多边形, 一个循环来重复多边形`sides`（边）的次数，然后另一个循环在把5加到到`sides`（边）后重新计算。
        courseF_artist_variables_challenge2_c: 使用`sides`和`length`的变量使代码更干净, 因为您可以多次循环相同的代码, 而不是为每组数字创建一个新的副本。
        courseF_artist_variables_challenge2_d: |-
          ** 解决方案: **
          
          
          ![[Solution]](https://images.code.org/311b4a946cb8f3b4144b5075be6460a3-image-1469641878222.png)
      course4_bee_for_challenge1_authored_hint: [ ]
      course4_bee_fwp_challenge1_authored_hint:
        courseF_bee_fwp_challenge1_a: |-
          主程序应该类似于以下内容:
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <next>
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          <next>
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <next>
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          <next>
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">6</title>
          </block>
          </value>
          <next>
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          <next>
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
        courseF_bee_fwp_challenge1_b: |-
          看看在每个空间里有多少玉米可以收割。你看到计数器的图案了吗？`length`参数应用于设置 "计数循环" 中的最大值。 
          
          收割后别忘了让农夫走回主路!
        courseF_bee_fwp_challenge1_c: |-
          将 "计数循环" 放在函数中, 并将其设置为从 "1" 到 "长度" ，每次增加1。
          在这个循环中, 你应该前进, 捡起所有的玉米。
          
          <xml>
          <block type="controls_for" inline="true">
          <title name="VAR">计数器</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="parameters_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          </statement>
          </block></xml>
        courseF_bee_fwp_challenge1_d: |-
          在`计数循环`里，要`向前移动`, 然后`采花蜜` **计数器次数 **。
          在`计数循环`后, 你只需要1向后移动1** 长度次数 **。
          
          您可能需要多次阅读此提示才能理解它。在 **黑体** 的部分是一个你需要用到的关于如何使用两个`重复`循环的提示。
        courseF_bee_fwp_challenge1_e: |
          **解决方案：**
          
          <xml>
          <block type="procedures_defnoreturn" editable="false" usercreated="true">
          <mutation>
          <arg name="length"/>
          </mutation>
          <title name="NAME">捡起一行</title>
          <statement name="STACK">
          <block type="maze_turn">
          <title name="DIR">向左转</title>
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">计数器</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="parameters_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">计数器</title>
          </block>
          </value>
          <statement name="DO">
          <block type="harvester_corn"/>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="parameters_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">向后移动</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">向右转</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block></xml>
      course4_bee_fwp_challenge2_authored_hint:
        courseF_bee_fwp_challenge2_a: |2
          首先确保你明白这个函数是如何工作的。当农夫沿着每条小路向下移动时, 她只会尝试收集玉米。相反, 你怎么能让她查找3种蔬菜, 并只捡起她发现的那一种？
          
           将条件声明添加到函数中, 来查找玉米、南瓜和生菜。
        courseF_bee_fwp_challenge2_b: "你的`向前移动`模块是否没了？尝试在主程序中使用第二个`计数循环`。 \n\n** 注意: ** 请注意不要将代码中的`counter`与`counter2`混淆。"
        courseF_bee_fwp_challenge2_c: |-
          ** 您的函数应该是这个样的: **
          
          <xml><block type="procedures_defnoreturn" deletable="false" movable="false" editable="false" usercreated="true">
          <mutation>
          <arg name="length"/>
          </mutation>
          <title name="NAME">捡起一行</title>
          <statement name="STACK">
          <block type="maze_turn">
          <title name="DIR">向左转</title>
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">计数器</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="parameters_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">计数器</title>
          </block>
          </value>
          <statement name="DO">
          <block type="harvester_ifHasCrop">
          <title name="LOC">玉米</title>
          <statement name="DO">
          <block type="harvester_corn"/>
          </statement>
          <next>
          <block type="harvester_ifHasCrop">
          <title name="LOC">南瓜</title>
          <statement name="DO">
          <block type="harvester_pumpkin"/>
          </statement>
          <next>
          <block type="harvester_ifHasCrop">
          <title name="LOC">莴苣</title>
          <statement name="DO">
          <block type="harvester_lettuce"/>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="parameters_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">向后移动</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">向右转</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </xml>
        courseF_bee_fwp_challenge2_d: |
          ** 您的主要程序应该是这个样的: **
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">计数器2</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">6</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="variables_get">
          <title name="VAR">计数器2</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block></xml>
      course4_collector_nested_loops_challenge2_authored_hint:
        courseD_bee_nested_loops_challenge2_a: 不要忘记, 你可以`重复`一个单一的命令或较长的模式。你甚至可以`重复`一个`重复`模块!
        courseD_bee_nested_loops_challenge2_b: 要获得所有4个宝石, 首先使用一个循环离开中心。向左或向右转, 然后使用嵌套循环从第一堆宝藏移动到第二个。如果重复嵌套循环足够多次, 收集器将在 * 整个 * 洞周围移动!
        courseD_bee_nested_loops_challenge2_c: 到达所有宝藏的最短程序只使用一个`收集`块和两个转弯。
        courseD_bee_nested_loops_challenge2_d: |-
          ** 解决方案: *
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      course4_harvester_nested_loops_challenge1_authored_hint:
        courseD_harvester_nested_loops_challenge1_a: 您可能已经使用了一个循环来创建一个之字形图案。如果你记得那个算法, 可以加到这里。
      course4_playlab_variables_challenge1_authored_hint:
        courseF_playlab_variables_challenge1_a: |-
          您将需要工具箱里别的模块让演员说话。
          <xml><block type="studio_saySpriteParamsTime" inline="true">
          <value name="SPRITE">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TEXT">
          <block type="text">
          <title name="TEXT">敲、敲</title>
          </block>
          </value>
          <value name="TIME">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          </block></xml>
      course4_playlab_variables_challenge3_authored_hint:
        courseF_playlab_variables_challenge3_a: |-
          演员知道该说什么, 因为它检查了`运气`变量的当前值。 
          
          
          <xml><block type="variables_set" inline="false">
          <title name="VAR">运气</title>
          <value name="VALUE">
          <block type="text" movable="false">
          <title name="TEXT">专心，再问一次！</title>
          </block>
          </value>
          </block></xml>
        courseF_playlab_variables_challenge3_b: |-
          如果你在演员说了财宝后，再次调用`ask a question`（问一个问题）函数，感觉就像整个游戏重头再来了。
          <xml><block type="studio_saySpriteParamsTime" inline="true">
          <value name="SPRITE">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TEXT">
          <block type="variables_get">
          <title name="VAR">财宝</title>
          </block>
          </value>
          <value name="TIME">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <next>
          <block type="procedures_callnoreturn">
          <mutation name="问一个问题"/>
          </block></next></block></xml>
        courseF_playlab_variables_challenge3_c: "您将需要添加更多的条件声明, 以便让演员有更多的话要说。 \n\n\n<xml><block type=\"studio_ifActorHasEmotionParams\" inline=\"true\">\n<title name=\"EMOTION\">2</title>\n<value name=\"SPRITE\">\n<block type=\"math_number\">\n<title name=\"NUM\">1</title>\n</block>\n</value>\n<statement name=\"DO\">\n<block type=\"variables_set\" inline=\"false\">\n<title name=\"VAR\">运气</title>\n<value name=\"VALUE\">\n<block type=\"text\" movable=\"false\">\n<title name=\"TEXT\">???</title>\n</block>\n</value>\n</block>\n</statement></block></xml>\n\n不要忘记更改演员将在`一直重复`循环中显示的情绪。你也可以随意设定心情!"
        courseF_playlab_variables_challenge3_d: |-
          一旦您了解了与演员1相关的所有代码, 就可以尝试重写相同的代码，但这次是针对演员2的。
          
          不要忘记更改`问一个问题`函数中的指令, 让他们是正确的。
        courseF_playlab_variables_challenge3_e: |-
          当一切都完成了, 你应该能够点击任一演员得到多达8个不同的消息。还有可能进一步扩展吗？
          
          完成后，让一个朋友尝试你的应用程序。
      courseA_artist_loops10_authored_hint: [ ]
      courseA_artist_loops10_2018_authored_hint: [ ]
      courseA_artist_loops11_authored_hint: [ ]
      courseA_artist_loops11_2018_authored_hint: [ ]
      courseA_artist_loops11_predict2_authored_hint: [ ]
      courseA_artist_loops12_authored_hint: [ ]
      courseA_artist_loops12_2018_authored_hint: [ ]
      courseA_artist_loops2_authored_hint:
        courseA_artist_loops2_a: 无法想到怎样画线吗？请开始把模块添加到 <xml><block type="when_run"/></xml>模块看会发生什么。
        courseA_artist_loops2_b: 使用模块<xml><block type="simple_move_right"/></xml>来解决此关卡。
      courseA_artist_loops2_2018_authored_hint:
        courseA_artist_loops2_a: 无法想到怎样画线吗？请开始把模块添加到 <xml><block type="when_run"/></xml>模块看会发生什么。
        courseA_artist_loops2_b: 使用模块<xml><block type="simple_move_right"/></xml>来解决此关卡。
      courseA_artist_loops3_authored_hint:
        courseA_artist_loops3_a: 用手指慢慢地追踪程序, 看看是哪里出问题了。
        courseA_artist_loops3_b: |-
          您将使用这样的模块来解决这个关卡。
          
          ![](https://images.code.org/16a3ab2e639eacee18ee5405ed9966dc-image-1498670745551.24.49 AM.png)
      courseA_artist_loops3_2018_authored_hint:
        courseA_artist_loops3_a: 用手指慢慢地追踪程序, 看看是哪里出问题了。
        courseA_artist_loops3_b: |-
          您将使用这样的模块来解决这个关卡。
          
          ![](https://images.code.org/16a3ab2e639eacee18ee5405ed9966dc-image-1498670745551.24.49 AM.png)
      courseA_artist_loops4_authored_hint:
        courseA_artist_loops4_a: 如果希望循环重复4次以上, 你可以更改该模块顶部的数字。
        courseA_artist_loops4_b: |-
          由于只能使用一个<xml><block type="simple_move_right"/></xml>模块, 请尝试将其放入<block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="2-6">5</title></block>循环中。
      courseA_artist_loops4_2018_authored_hint:
        courseA_artist_loops4_a: 如果希望循环重复4次以上, 你可以更改该模块顶部的数字。
        courseA_artist_loops4_b: |-
          由于只能使用一个<xml><block type="simple_move_right"/></xml>模块, 请尝试将其放入<block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="2-6">5</title></block>循环中。
      courseA_artist_loops5_authored_hint:
        courseA_artist_loops5_a: 请试着使用你已经学到的<xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>模块知识来完成此关卡。
        courseA_artist_loops5_b: 如果希望循环重复4次以上, 你可以更改该模块顶部的数字。
        courseA_artist_loops5_c: "由于您只能使用一个 <xml><block type=\"simple_move_right\"/></xml>模块, 请尝试将其放在 <xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"3-10\">???</title></block></xml>循环中。"
      courseA_artist_loops5_2018_authored_hint:
        courseA_artist_loops5_a: 请试着使用你已经学到的<xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>模块知识来完成此关卡。
        courseA_artist_loops5_b: 如果希望循环重复4次以上, 你可以更改该模块顶部的数字。
        courseA_artist_loops5_c: "由于您只能使用一个 <xml><block type=\"simple_move_right\"/></xml>模块, 请尝试将其放在 <xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"3-10\">???</title></block></xml>循环中。"
      courseA_artist_loops6_authored_hint:
        courseA_artist_loops6_a: 无法想出如何制作山峰吗？请试着运行这些模块看它们每个是画什么的？
        courseA_artist_loops6_b: 您需要两个方向的两个模块来解决这个难题。
      courseA_artist_loops6_2018_authored_hint:
        courseA_artist_loops6_a: 无法想出如何制作山峰吗？请试着运行这些模块看它们每个是画什么的？
        courseA_artist_loops6_b: 您需要两个方向的两个模块来解决这个难题。
      courseA_artist_loops7_authored_hint:
        courseA_artist_loops7_a: 不知道在哪里放循环？尝试逐步把代码写下, 并寻找规律。
        courseA_artist_loops7_b: 先写一个波浪的代码, 然后再重复来画另外两个。
        courseA_artist_loops7_c: |-
          请记住, 可以在<xml><block type="controls_repeat">
          <title name="TIMES">???</title>
          </block></xml>循环中放置多个块。
      courseA_artist_loops7_2018_authored_hint:
        courseA_artist_loops7_a: 不知道在哪里放循环？尝试逐步把代码写下, 并寻找规律。
        courseA_artist_loops7_b: 先写一个波浪的代码, 然后再重复来画另外两个。
        courseA_artist_loops7_c: |-
          请记住, 可以在<xml><block type="controls_repeat">
          <title name="TIMES">???</title>
          </block></xml>循环中放置多个块。
      courseA_artist_loops7_forVideo_authored_hint:
        courseA_artist_loops7_a: 不知道在哪里放循环？尝试逐步把代码写下, 并寻找规律。
        courseA_artist_loops7_b: 先写一个波浪的代码, 然后再重复来画另外两个。
        courseA_artist_loops7_c: |-
          请记住, 可以在<xml><block type="controls_repeat">
          <title name="TIMES">???</title>
          </block></xml>循环中放置多个块。
      courseA_artist_loops8_authored_hint:
        courseA_artist_loops8_a: 请尝试运行代码看已经为你写了些什么。
        courseA_artist_loops8_b: 如何循环已经给你的代码？
        courseA_artist_loops8_c: "这个代码是做什么的？\n它应该做什么？\n那告诉你什么？"
      courseA_artist_loops8_2018_authored_hint:
        courseA_artist_loops8_a: 请尝试运行代码看已经为你写了些什么。
        courseA_artist_loops8_b: 如何循环已经给你的代码？
        courseA_artist_loops8_c: "这个代码是做什么的？\n它应该做什么？\n那告诉你什么？"
      courseA_artist_loops9_authored_hint:
        courseA_artist_loops9_a: 将另一个模块添加到已经给您的代码中来绘制其余的楼梯。
        courseA_artist_loops9_b: "您添加的模块应该在<xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"3-10\">5</title></block>\n</xml>循环的内部。"
        courseA_artist_loops9_c: 如果您无法确定将循环放在何处, 请尝试逐步编写代码并查找规律。
      courseA_artist_loops9_2018_authored_hint:
        courseA_artist_loops9_a: 将另一个模块添加到已经给您的代码中来绘制其余的楼梯。
        courseA_artist_loops9_b: "您添加的模块应该在<xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"3-10\">5</title></block>\n</xml>循环的内部。"
        courseA_artist_loops9_c: 如果您无法确定将循环放在何处, 请尝试逐步编写代码并查找规律。
      courseA_artist_loops_challenge1_authored_hint: [ ]
      courseA_artist_loops_challenge1_2018_authored_hint: [ ]
      courseA_artist_loops_challenge2_authored_hint:
        courseA_artist_loops_challenge2_a: 像这样的模块 <xml> <block type="simple_move_up_left"/></xml>会让你的艺术家在斜面上移动!
        courseA_artist_loops_challenge2_b: 当你完成一个鸟舍后，`跳`到下一个!
        courseA_artist_loops_challenge2_c: 在这个挑战中, 您需要在循环中放很多模块。
      courseA_artist_loops_challenge2a_authored_hint:
        courseA_artist_loops_challenge2_a: 像这样的模块 <xml> <block type="simple_move_up_left"/></xml>会让你的艺术家在斜面上移动!
        courseA_artist_loops_challenge2_b: 当您完成一个帐篷时，向上`跳跃`两次到达下一个!
        courseA_artist_loops_challenge2_c: 所有的模块都将需要在一个循环内才可以完成此关卡。
      courseA_artist_loops_challenge2a_2018_authored_hint:
        courseA_artist_loops_challenge2_a: 像这样的模块 <xml> <block type="simple_move_up_left"/></xml>会让你的艺术家在斜面上移动!
        courseA_artist_loops_challenge2_b: 当您完成一个帐篷时，向上`跳跃`两次到达下一个!
        courseA_artist_loops_challenge2_c: 所有的模块都将需要在一个循环内才可以完成此关卡。
      courseA_artist_loops_challenge3_authored_hint:
        harvey_tictactoe: 您可以使用 "跳转" 模块移动到其他位置。
      courseA_bee_seq1_authored_hint:
        courseA_bee_seq1_a: |-
          用这个模块来让蜜蜂一旦找到花，就采花蜜。
          <xml>
          <block type="maze_nectar"/>
          </xml>
      courseA_bee_seq10_authored_hint: [ ]
      courseA_bee_seq11_authored_hint: [ ]
      courseA_bee_seq12_authored_hint:
        courseA_bee_seq1_a: |-
          用这个模块来让蜜蜂一旦找到花，就采花蜜。
          <xml>
          <block type="maze_nectar"/>
          </xml>
      courseA_bee_seq13_authored_hint: [ ]
      courseA_bee_seq14_authored_hint: [ ]
      courseA_bee_seq2_authored_hint: [ ]
      courseA_bee_seq3_authored_hint: [ ]
      courseA_bee_seq4_authored_hint: [ ]
      courseA_bee_seq5_authored_hint: [ ]
      courseA_bee_seq6_authored_hint: [ ]
      courseA_bee_seq7_authored_hint: [ ]
      courseA_bee_seq8_authored_hint: [ ]
      courseA_bee_seq9_authored_hint: [ ]
      courseA_collector_loops1_authored_hint:
        courseA_collector_loops1_a: |-
          在你到了一个有宝藏的广场后, 用这个方块来把它捡起来。<xml> <block type="collector_collect"/></xml>
        courseA_collector_loops1_b: 一个简单的解决方案是向东移动两次, 然后得到宝藏。
      courseA_collector_loops10_authored_hint: [ ]
      courseA_collector_loops10_2018_authored_hint: [ ]
      courseA_collector_loops11_authored_hint: [ ]
      courseA_collector_loops11_2018_authored_hint: [ ]
      courseA_collector_loops11_predict2_authored_hint: [ ]
      courseA_collector_loops1_2018_authored_hint:
        courseA_collector_loops1_a: |-
          在你到了一个有宝藏的广场后, 用这个方块来把它捡起来。<xml> <block type="collector_collect"/></xml>
        courseA_collector_loops1_b: 一个简单的解决方案是向东移动两次, 然后得到宝藏。
      courseA_collector_loops2_authored_hint:
        courseA_collector_loops2_a: 在你收集财宝之前, 你必须先向前移动。
        courseA_collector_loops2_b: |-
          在你到了一个有宝藏的广场后, 用这个方块来把它捡起来。<xml> <block type="collector_collect"/></xml>
      courseA_collector_loops2_2018_authored_hint:
        courseA_collector_loops2_a: 在你收集财宝之前, 你必须先向前移动。
        courseA_collector_loops2_b: |-
          在你到了一个有宝藏的广场后, 用这个方块来把它捡起来。<xml> <block type="collector_collect"/></xml>
      courseA_collector_loops3_authored_hint:
        courseA_collector_loops3_a: "尝试使用 <xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"3-10\">???</title></block></xml>循环!"
        courseA_collector_loops3_b: 请记住, 您可以在 <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml> 循环中放置超过1个模块。
      courseA_collector_loops3_2018_authored_hint:
        courseA_collector_loops3_a: "尝试使用 <xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\" config=\"3-10\">???</title></block></xml>循环!"
        courseA_collector_loops3_b: 请记住, 您可以在 <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml> 循环中放置超过1个模块。
      courseA_collector_loops3_predict1_authored_hint: [ ]
      courseA_collector_loops4_authored_hint:
        courseA_collector_loops4_a: 要改变劳雷尔所走的距离, 请更改循环运行的次数。
        courseA_collector_loops4_b: 请别忘了罗瑞尔需要在她完成 <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>循环后走下去收集所有的宝藏！
      courseA_collector_loops4_2018_authored_hint:
        courseA_collector_loops4_a: 要改变劳雷尔所走的距离, 请更改循环运行的次数。
        courseA_collector_loops4_b: 请别忘了罗瑞尔需要在她完成 <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>循环后走下去收集所有的宝藏！
      courseA_collector_loops5_authored_hint:
        courseA_collector_loops5_a: 如果你不能马上找到答案，试着用一张纸来找出你需要的箭头并找到一个图案。
        courseA_collector_loops5_b: 试着把问题分成2部分, 然后侧身移动, 然后向下。
        courseA_collector_loops5_c: 您将开始使用 <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml> 循环, 来让劳雷尔向西移动并收集宝藏。
      courseA_collector_loops5_2018_authored_hint:
        courseA_collector_loops5_a: 如果你不能马上找到答案，试着用一张纸来找出你需要的箭头并找到一个图案。
        courseA_collector_loops5_b: 试着把问题分成2部分, 然后侧身移动, 然后向下。
        courseA_collector_loops5_c: 您将开始使用 <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml> 循环, 来让劳雷尔向西移动并收集宝藏。
      courseA_collector_loops6_authored_hint:
        courseA_collector_loops6_a: 搞不清楚那里有错？尝试运行代码多次，看看会发生什么。
        courseA_collector_loops6_b: 最短解决方案有 2 个<xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>循环, 一个接一个。
      courseA_collector_loops6_2018_authored_hint:
        courseA_collector_loops6_a: 搞不清楚那里有错？尝试运行代码多次，看看会发生什么。
        courseA_collector_loops6_b: 最短解决方案有 2 个<xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>循环, 一个接一个。
      courseA_collector_loops7_authored_hint:
        courseA_collector_loops7_a: 如果您不知道接下来会发生什么，请尝试运行代码以查看罗瑞尔结束的位置。
      courseA_collector_loops7_2018_authored_hint:
        courseA_collector_loops7_a: 如果您不知道接下来会发生什么，请尝试运行代码以查看罗瑞尔结束的位置。
      courseA_collector_loops8_authored_hint:
        courseA_collector_loops8_a: 如果您遇到此难题，请尝试在一张纸上写下所有的动作并寻找规律。
        courseA_collector_loops8_b: 尝试将这个谜题分解成3个单独的问题, 并为每一个编写循环。
        courseA_collector_loops8_c: 记住, 你可以一次写一段代码, 然后按 "运行" 来找出你需要去哪里。
      courseA_collector_loops8_2018_authored_hint:
        courseA_collector_loops8_a: 如果您遇到此难题，请尝试在一张纸上写下所有的动作并寻找规律。
        courseA_collector_loops8_b: 尝试将这个谜题分解成3个单独的问题, 并为每一个编写循环。
        courseA_collector_loops8_c: 记住, 你可以一次写一段代码, 然后按 "运行" 来找出你需要去哪里。
      courseA_collector_loops9_authored_hint:
        courseA_collector_loops9_a: '如果无法发现使用循环的最佳位置, 请尝试逐步对其进行编码, 并寻找规律。 '
        courseA_collector_loops9_b: 尝试将你的两个<xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>循环之一放入另一个循环中, 来让代码更短!
      courseA_collector_loops9_2018_authored_hint:
        courseA_collector_loops9_a: '如果无法发现使用循环的最佳位置, 请尝试逐步对其进行编码, 并寻找规律。 '
        courseA_collector_loops9_b: 尝试将你的两个<xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>循环之一放入另一个循环中, 来让代码更短!
      courseA_collector_loops_challenge1_authored_hint:
        courseA_collector_loops_challenge1_a: 如果有错误，请尝试更改每个循环中的数字。
        courseA_collector_loops_challenge1_b: 如果有什么事情只做一次，就不需要使用循环, 。
        courseA_collector_loops_challenge1_c: 当你开始的时候, 有6个宝石在洞穴的右侧, 但你只需要向南移动5次获得宝藏。你知道这是为什么吗？
        courseA_collector_loops_challenge1_d: |-
          开始程序不收集最后2宝石。尝试在末尾添加此代码: 
          <xml><block type="maze_moveEast">
          <next>
          <block type="collector_collect_simplified">
          <next>
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
      courseA_collector_loops_challenge1_2018_authored_hint:
        courseA_collector_loops_challenge1_a: 如果有错误，请尝试更改每个循环中的数字。
        courseA_collector_loops_challenge1_b: 如果有什么事情只做一次，就不需要使用循环, 。
        courseA_collector_loops_challenge1_c: 当你开始的时候, 有6个宝石在洞穴的右侧, 但你只需要向南移动5次获得宝藏。你知道这是为什么吗？
        courseA_collector_loops_challenge1_d: |-
          开始程序不收集最后2宝石。尝试在末尾添加此代码: 
          <xml><block type="maze_moveEast">
          <next>
          <block type="collector_collect_simplified">
          <next>
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
      courseA_collector_loops_challenge2_authored_hint:
        courseA_collector_loops_challenge2_b: 你只需要用一个模块来解决这个问题。
        courseA_collector_loops_challenge2_a: 在向南移动之前，您可以再次在路径上移动。
      courseA_collector_loops_challenge2kp_authored_hint:
        courseA_collector_loops_challenge2kp_b: 请尝试此路径以获得解决方案。
        courseA_collector_loops_challenge2kp_a: 你能用循环来解决这个关卡吗？
      courseA_collector_loops_challenge2kp_2018_authored_hint:
        courseA_collector_loops_challenge2kp_b: 请尝试此路径以获得解决方案。
        courseA_collector_loops_challenge2kp_a: 你能用循环来解决这个关卡吗？
      courseA_collector_preLoops1_authored_hint: [ ]
      courseA_collector_preLoops2_authored_hint: [ ]
      courseA_collector_preLoops3_authored_hint: [ ]
      courseA_collector_preLoops4_authored_hint:
        courseA_collector_preLoops4_a: "要拿到宝藏，粘贴两个![](https://images.code.org/2df8a25d7e96207f57d1a6b504950b70-image-1508906116743.34.37.png)模块和一个 ![](https://images.code.org/563c0deb5c51d43cdfa72d62dec3419d-image-1508904559201.05.30.png)模块到程序的底部, 然后单击 \"运行\"!\n\n"
      courseA_collector_preLoops5_authored_hint:
        courseA_collector_preLoops5_a: 哪怕只要得到一个宝石，你都需要去两个不同的方向！
      courseA_collector_preLoops6_authored_hint:
        courseA_collector_preLoops6_a: 您将需要使用两个![](https://images.code.org/563c0deb5c51d43cdfa72d62dec3419d-image-1508904559201.05.30.png) 模块来解决这个关卡。
      courseA_collector_preLoops7_authored_hint:
        courseA_collector_loops2_b: |-
          在你到了一个有宝藏的广场后, 用这个方块来把它捡起来。<xml> <block type="collector_collect"/></xml>
      courseA_forVideoTest_artist_authored_hint: [ ]
      courseA_harvester_forVideo_authored_hint:
        courseA_harvester_loops3_a: |-
          用一个像这样的`重复`模块来帮助你！
          <xml><block type="controls_repeat_simplified_dropdown">
          <title name="TIMES" config="2-10">3</title>
          </block></xml>
      courseA_harvester_loops1_authored_hint:
        courseA_harvester_loops1_a: |-
          一旦你移动到了某个玉米上，用这个模块来采摘它！
          <xml><block type="harvester_corn"/></xml>
      courseA_harvester_loops10_authored_hint: [ ]
      courseA_harvester_loops11_authored_hint: [ ]
      courseA_harvester_loops2_authored_hint:
        courseA_harvester_loops2_a: '代码会有**四个**`向西移动`模块和**四个**`采摘玉米`模块。 '
      courseA_harvester_loops3_authored_hint:
        courseA_harvester_loops3_a: |-
          用像这样的`重复`模块来帮助你！
          <xml><block type="controls_repeat_simplified_dropdown">
          <title name="TIMES" config="2-10">4</title>
          </block></xml>
        courseA_harvester_loops3_b: 要重复代码, 拖出一个`重复 `循环, 然后把它放在你想要的模块里面。
      courseA_harvester_loops4_authored_hint:
        courseA_harvester_loops4_a: 勇敢按下`运行`按钮，看看会发生什么！
        courseA_harvester_loops4_b: 有多少块玉米？你的代码重复了多少次？
      courseA_harvester_loops5_authored_hint:
        courseA_harvester_loops5_a: 如果你被难住了，试着分两部分来解决这个问题，一部分在拐角前，另一部分在拐角后。
        courseA_harvester_loops5_b: 最终的代码会有**一个**`重复`循环，**一个**`向南移动`模块和**一个**`向东`移动的模块。
        courseA_harvester_loops5_c: 通过这条路来采摘所有的玉米。
      courseA_harvester_loops5a_authored_hint:
        courseA_harvester_loops5a_a: 你需要一个`重复`循环连着另一个。
        courseA_harvester_loops5a_b: 一个循环要重复`向南移动`，另一个要重复`向东移动`。
        courseA_harvester_loops5a_c: 走这条路，先往一个方向走，再往另一个方向走。
      courseA_harvester_loops5b_authored_hint:
        courseA_harvester_loops5b_a: 点击`运行`看看会发生什么！
        courseA_harvester_loops5b_b: 你的循环重复了正确的次数吗？
        courseA_harvester_loops5b_c: 沿着这条路往一个方向移动，然后往另一个方向移动。
      courseA_harvester_loops6_authored_hint:
        courseA_harvester_loops6_a: 如果你被难住了，试着在纸上写下步骤, 寻找重复的规律。
        courseA_harvester_loops6_b: 想要采摘所有玉米就得走这条路。
      courseA_harvester_loops7_authored_hint:
        courseA_harvester_loops7_a: 你需要两个`重复`循环相连！
        courseA_harvester_loops7_b: 用两个循环来沿着这条路走。
      courseA_harvester_loops8_authored_hint: [ ]
      courseA_harvester_loops9_authored_hint:
        courseA_harvester_loops9_a: 将这一关分成三个不同部分，一部分到达第一个角落，一部分到达第二个角落，最后一部分到达终点。
        courseA_harvester_loops9_b: 在每个部分完成后，别害怕运行代码，看看会发生什么！
        courseA_harvester_loops9_c: 沿这条路来收获所有的玉米。
      courseA_harvester_seq1_authored_hint:
        courseA_harvester_seq1_a: |-
          用这个模块来让收割者一旦找到玉米，就采摘它！
          
          <xml>
          <block type="harvester_corn"/>
          </xml>
        courseA_harvester_seq1_b: |-
          收割者需要向东移动三次来采摘玉米，用这个模块：
          <xml>
          <block type="maze_moveEast"/>
          </xml>
      courseA_harvester_seq10_authored_hint:
        courseA_harvester_seq10_a: 被难住了？请试着先在一张纸上写下步骤。
        courseA_harvester_seq10_b: 你需要`向东移动`，然后`向北移动`。这样做两次。别忘了还要采摘所有的玉米！
        courseA_harvester_seq10_c: 试着用这条路捡起所有橡子。
      courseA_harvester_seq11_authored_hint: [ ]
      courseA_harvester_seq12_authored_hint: [ ]
      courseA_harvester_seq13_authored_hint:
        courseA_bee_seq1_a: |-
          用这个模块来让收割者到达玉米时，采摘它。
          
          <xml>
          <block type="maze_nectar"/>
          </xml>
      courseA_harvester_seq2_authored_hint:
        courseA_harvester_seq2_a: 别忘了用<xml><block type="harvester_corn"/></xml>来采摘玉米！
        courseA_harvester_seq2_b: 请试着在纸张上写下步骤来找到解决方法！
      courseA_harvester_seq3_authored_hint:
        courseA_harvester_seq3_a: |-
          还记得用这个模块吗？
          <xml><block type="harvester_corn"/></xml>
        courseA_harvester_seq3_b: 大声的说出这些步骤，来看看是否能帮你找到答案。
      courseA_harvester_seq4_authored_hint:
        courseA_harvester_seq4_a: 在收割者和玉米之间有多少空间？工作区里已经有多少个模块了？
        courseA_harvester_seq4_b: |-
          你需要用5次`向西移动`和一次`采摘玉米`模块：
          <xml><block type="harvester_corn"/></xml>
      courseA_harvester_seq5_authored_hint:
        courseA_harvester_seq5_a: 哪个模块将收割者移向了错误的路？
        courseA_harvester_seq5_b: 你需要去掉一个模块。
        courseA_harvester_seq5_c: |-
          将这个模块扔进垃圾箱！
          <xml><block type="maze_moveNorth"/></xml>
      courseA_harvester_seq6_authored_hint:
        courseA_harvester_seq6_a: 如果被难住了，试着大声的说出这些步骤。这会帮你找到正确的路径。
      courseA_harvester_seq7_authored_hint:
        courseA_harvester_seq7_a: 试着分两部分来解决这个问题，一部分在拐角前，另一部分在拐角后。
        courseA_harvester_seq7_b: 有困难了？这是收割者应该走的路。
      courseA_harvester_seq8_authored_hint: [ ]
      courseA_harvester_seq9_authored_hint:
        courseA_harvester_seq9_a: 运行代码几次来看看发生了什么。收割者在哪里停下来了？
        courseA_harvester_seq9_b: 别忘了采摘所有的玉米！你需要**3**个采摘玉米模块。
        courseA_harvester_seq9_c: 你应该用这条路来捡起所有橡子。
      courseA_maze_ramp2_2018_authored_hint:
        '1': |-
          你的代码应该会像这样：
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_ramp2a_2018_authored_hint:
        '1': 将`向东`模块附加到`当运行时`模块下面。
      courseA_maze_ramp3_2018_authored_hint:
        courseC_maze_programming3_a: "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\n若要从代码中间删除模块, 请将所有模块拖到工作区的右边，并先暂时放在那里。\n\n点击要删除的块，并将它拖回工具箱。\n\n最后，把其它模块放回它们应该在的地方。\n"
      courseA_maze_ramp3a_2018_authored_hint:
        '1': |
          你的代码应该会像这样：
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveNorth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_ramp4_2018_authored_hint:
        courseC_maze_programming4_a: You can turn right or left from the bird's point of view. If you are facing right, turning right will make you point downwards.
        courseC_maze_programming4_b: To follow the path, move forward and turn one way, then move again and turn the opposite way. Move forward one more time to reach the pig.
      courseA_maze_ramp4a_2018_authored_hint:
        '1': |-
          你的代码应该会像这样：
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveSouth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_ramp5_2018_authored_hint:
        courseC_maze_programming5_a: 尝试使用"步进"按钮来一行一行运行你的代码。你能想出下一步需要做什么吗？
        courseC_maze_programming5_b: 记住，转向是从鸟的角度来看的。
        courseC_maze_programming5_c: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseA_maze_ramp5a_2018_authored_hint:
        '1': |-
          你的代码应该会像这样：
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveWest">
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_seq1_authored_hint:
        courseA_maze_seq1_a: |-
          如果在让鸟移动时遇到问题, 请确保模块是被放置在<xml>
          <block type="when_run"/>
          </xml> 下面
        courseA_maze_seq1_b: |-
          这只鸟需要向西移动3次才能到达猪。请使用此模块: <xml> <block type="maze_moveWest"/> </xml>
      courseA_maze_seq10_authored_hint:
        courseA_maze_seq10_a: 如果你有困难, 试着先写下一张纸上的步骤。
        courseA_maze_seq10_b: 您将需要移动3 个方向来通过此关卡。
      courseA_maze_seq10_2018_authored_hint:
        courseA_maze_seq10_a: 如果你有困难, 试着先写下一张纸上的步骤。
        courseA_maze_seq10_b: 您将需要移动3 个方向来通过此关卡。
      courseA_maze_seq11_authored_hint: [ ]
      courseA_maze_seq11_2018_authored_hint: [ ]
      courseA_maze_seq12_authored_hint: [ ]
      courseA_maze_seq12_2018_authored_hint: [ ]
      courseA_maze_seq12_predict2_authored_hint: [ ]
      courseA_maze_seq13_authored_hint:
        courseA_maze_seq13_a: 如果对路径不明白，请使用手指来追踪鸟到猪的线路。
        courseA_maze_seq13_b: 不要害怕犯错误！尝试添加块并运行代码, 看看会发生什么。
        courseA_maze_seq13_c: |-
          这些 <xml><block type="maze_moveNorth"/></xml>
          <xml><block type="maze_moveEast"/></xml>块将帮助您离猪更近一步。
      courseA_maze_seq13_2018_authored_hint:
        courseA_maze_seq13_a: 如果对路径不明白，请使用手指来追踪鸟到猪的线路。
        courseA_maze_seq13_b: 不要害怕犯错误！尝试添加块并运行代码, 看看会发生什么。
        courseA_maze_seq13_c: |-
          这些 <xml><block type="maze_moveNorth"/></xml>
          <xml><block type="maze_moveEast"/></xml>块将帮助您离猪更近一步。
      courseA_maze_seq1_2018_authored_hint:
        courseA_maze_seq1_a: |-
          如果在让鸟移动时遇到问题, 请确保模块是被放置在<xml>
          <block type="when_run"/>
          </xml> 下面
        courseA_maze_seq1_b: |-
          这只鸟需要向西移动3次才能到达猪。请使用此模块: <xml> <block type="maze_moveWest"/> </xml>
      courseA_maze_seq2_authored_hint:
        courseA_maze_seq2_a: 该程序缺少1个模块，您是否可以找出是哪个？
        courseA_maze_seq2_b: 试着先运行代码, 看看鸟在哪里。你需要从那里去哪里？
      courseA_maze_seq2_2018_authored_hint:
        courseA_maze_seq2_a: 该程序缺少1个模块，您是否可以找出是哪个？
        courseA_maze_seq2_b: 试着先运行代码, 看看鸟在哪里。你需要从那里去哪里？
      courseA_maze_seq2_predict1_authored_hint: [ ]
      courseA_maze_seq3_authored_hint:
        courseA_maze_seq3_a: 其中一个模块把鸟移向了错误的方向。你能找出是哪块并用正确的模块来取代它吗？
        courseA_maze_seq3_b: 请尝试使用 "步进" 按钮查找程序出错的位置。这是第一步吗？第二步呢？
        courseA_maze_seq3_c: <xml><block type="maze_moveNorth"/></xml>模块似乎没有将鸟移动到正确的方向。你能用不同的模块替换它吗？
      courseA_maze_seq3_2018_authored_hint:
        courseA_maze_seq3_a: 其中一个模块把鸟移向了错误的方向。你能找出是哪块并用正确的模块来取代它吗？
        courseA_maze_seq3_b: 请尝试使用 "步进" 按钮查找程序出错的位置。这是第一步吗？第二步呢？
        courseA_maze_seq3_c: <xml><block type="maze_moveNorth"/></xml>模块似乎没有将鸟移动到正确的方向。你能用不同的模块替换它吗？
      courseA_maze_seq4_authored_hint:
        courseA_maze_seq4_a: 如果遇到问题, 请尝试找出正确的路径, 然后删除不适合的模块。
        courseA_maze_seq4_b: 请尝试用现有的运行代码。看有什么出错？您可以删除哪个模块？你怎么能修好它？
      courseA_maze_seq4_2018_authored_hint:
        courseA_maze_seq4_a: 如果遇到问题, 请尝试找出正确的路径, 然后删除不适合的模块。
        courseA_maze_seq4_b: 请尝试用现有的运行代码。看有什么出错？您可以删除哪个模块？你怎么能修好它？
      courseA_maze_seq4a_authored_hint:
        courseA_maze_seq4_a: 如果你遇到了麻烦, 试着用手指在地图上指出正确的移动路径。你的手指做了什么移动？
      courseA_maze_seq5_authored_hint:
        courseA_maze_seq5_a: 请试着在纸张上写下步骤来找到解决方法！
        courseA_maze_seq5_b: 您将需要指向两个方向的两个模块。
      courseA_maze_seq5_2018_authored_hint:
        '1': 请试着在纸张上写下步骤来找到解决方法！
        '2': |-
          你需要用这个模块：
          
          <xml><block type="maze_moveSouth"/></xml>
      courseA_maze_seq5a_2018_authored_hint:
        '1': 大声的说出这些步骤，来看看是否能帮你找到答案。
      courseA_maze_seq6_authored_hint:
        courseA_maze_seq6_a: 最终的代码应该有3个移动模块。
        courseA_maze_seq6_b: 如果你被难住了，试着分两部分来解决这个问题，一部分在拐角前，另一部分在拐角后。
      courseA_maze_seq6_2018_authored_hint:
        courseA_maze_seq6_a: 最终的代码应该有3个移动模块。
        courseA_maze_seq6_b: 如果你被难住了，试着分两部分来解决这个问题，一部分在拐角前，另一部分在拐角后。
      courseA_maze_seq7_authored_hint:
        courseA_maze_seq7_a: 你需要添加1个模块来把鸟移到猪那。
        courseA_maze_seq7_b: 如果无法想出要怎么做，请试着在纸张上画出关卡，并用手指来找出要移动的方向。
      courseA_maze_seq7_2018_authored_hint:
        courseA_maze_seq7_a: 你需要添加1个模块来把鸟移到猪那。
        courseA_maze_seq7_b: 如果无法想出要怎么做，请试着在纸张上画出关卡，并用手指来找出要移动的方向。
      courseA_maze_seq8_authored_hint:
        courseA_maze_seq8_a: 如果你被卡住了, 试着在纸上画出图像, 看看鸟儿应该如何移动。
      courseA_maze_seq8_2018_authored_hint:
        courseA_maze_seq8_a: 如果你被卡住了, 试着在纸上画出图像, 看看鸟儿应该如何移动。
      courseA_maze_seq9_authored_hint:
        courseA_maze_seq9_a: 卡住了？请试着用手指来描绘鸟的路径。
        courseA_maze_seq9_b: 如果您不确定要做什么, 请尝试按 "重新开始" 并运行代码来查看出错的地方。
        courseA_maze_seq9_c: 您将需要移动3个方向来解决这个关卡。
      courseA_maze_seq9_2018_authored_hint:
        courseA_maze_seq9_a: 卡住了？请试着用手指来描绘鸟的路径。
        courseA_maze_seq9_b: 如果您不确定要做什么, 请尝试按 "重新开始" 并运行代码来查看出错的地方。
        courseA_maze_seq9_c: 您将需要移动3个方向来解决这个关卡。
      courseA_maze_seq_challenge1_authored_hint:
        courseA_maze_seq_challenge1_a: 这个关卡有两个解决方法。
      courseA_maze_seq_challenge1_2018_authored_hint:
        courseA_maze_seq_challenge1_a: 这个关卡有两个解决方法。
      courseA_maze_seq_challenge2_authored_hint:
        courseA_maze_seq_challenge2_a: 试着用手指数一下空格。记住不要数你开始的空间!
      courseA_maze_seq_challenge2_2018_authored_hint:
        courseA_maze_seq_challenge2_a: 试着用手指数一下空格。记住不要数你开始的空间!
      courseA_playLab_events2_authored_hint:
        courseA_playLab_events2_a: 请找出可以让狗说些什么的模块。
        courseA_playLab_events2_b: |-
          这是你要解决这问题要用的代码：
          
          <xml>
          <block type="when_run" movable="false" deletable="false">
          <next>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">1</title>
          <title name="VALUE">你好。</title>
          </block>
          </next>
          </block>
          </xml>
      courseA_playLab_events2_2018_authored_hint:
        courseA_playLab_events2_a: 请找出可以让狗说些什么的模块。
        courseA_playLab_events2_b: |-
          这是你要解决这问题要用的代码：
          
          <xml>
          <block type="when_run" movable="false" deletable="false">
          <next>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">1</title>
          <title name="VALUE">你好。</title>
          </block>
          </next>
          </block>
          </xml>
      courseA_playLab_events3_authored_hint:
        courseA_playLab_events3_a: |-
          拖拽此模块<xml><block type="studio_move">
          <title name="SPRITE">1</title>
          <title name="DIR">8</title>
          </block></xml>并放在此模块的下面<xml><block type="studio_whenArrow">
          <title name="VALUE">左</title>
          </block></xml>
        courseA_playLab_events3_b: 请记住, 在您编写完程序后, 使用左箭头键将乔治移动到旗那里。当国旗变绿的时候就完成了.
      courseA_playLab_events3_2018_authored_hint:
        courseA_playLab_events3_a: |-
          拖拽此模块<xml><block type="studio_move">
          <title name="SPRITE">1</title>
          <title name="DIR">8</title>
          </block></xml>并放在此模块的下面<xml><block type="studio_whenArrow">
          <title name="VALUE">左</title>
          </block></xml>
        courseA_playLab_events3_b: 请记住, 在您编写完程序后, 使用左箭头键将乔治移动到旗那里。当国旗变绿的时候就完成了.
      courseA_playLab_events4_authored_hint:
        courseA_playLab_events4_a: |-
          这是您将要让乔治右移的事件模块：
          
          <xml><block type="studio_move">
          <title name="SPRITE">1</title>
          <title name="DIR">2</title>
          </block></xml>
        courseA_playLab_events4_b: |-
          这是您将要完成此关卡的代码：
          
          <xml><block type="studio_whenArrow">
          <title name="VALUE">right</title>
          <next>
          <block type="studio_move">
          <title name="SPRITE">1</title>
          <title name="DIR">2</title>
          </block></next></block></xml>
      courseA_playLab_events4_2018_authored_hint:
        courseA_playLab_events4_a: |-
          这是您将要让乔治右移的事件模块：
          
          <xml><block type="studio_move">
          <title name="SPRITE">1</title>
          <title name="DIR">2</title>
          </block></xml>
        courseA_playLab_events4_b: |-
          这是您将要完成此关卡的代码：
          
          <xml><block type="studio_whenArrow">
          <title name="VALUE">right</title>
          <next>
          <block type="studio_move">
          <title name="SPRITE">1</title>
          <title name="DIR">2</title>
          </block></next></block></xml>
      courseA_playLab_events5_authored_hint:
        courseA_playLab_events5_a: "这是您将要使用让乔治上下移动的事件模块：\n\n<xml><block type=\"studio_whenArrow\">\n    <title name=\"VALUE\">上</title>\n  </block></xml>\n和\n<xml><block type=\"studio_whenArrow\">\n    <title name=\"VALUE\">下</title>\n  </block></xml>"
        courseA_playLab_events5_b: |-
          您是否知道可以通过单击块中的图片并选择新的键来更改事件的方向键？ 
          
          ![](https://images.code.org/b010b6a8131689af53b33148753c15b4-image-1492639642316.gif)
      courseA_playLab_events5_2018_authored_hint:
        courseA_playLab_events5_a: "这是您将要使用让乔治上下移动的事件模块：\n\n<xml><block type=\"studio_whenArrow\">\n    <title name=\"VALUE\">上</title>\n  </block></xml>\n和\n<xml><block type=\"studio_whenArrow\">\n    <title name=\"VALUE\">下</title>\n  </block></xml>"
        courseA_playLab_events5_b: |-
          您是否知道可以通过单击块中的图片并选择新的键来更改事件的方向键？ 
          
          ![](https://images.code.org/b010b6a8131689af53b33148753c15b4-image-1492639642316.gif)
      courseA_playLab_events6_authored_hint:
        courseA_playLab_events6_a: |-
          这是您要使用在点击时让乔治做些事情的事件模块：
          
          <xml><block type="studio_whenSpriteClicked">
          <title name="SPRITE">1</title>
          </block></xml>
        courseA_playLab_events6_b: |-
          这是您要使用来改变背景的模块：
          
          <xml><block type="studio_setBackground">
          <title name="VALUE">random</title>
          </block></xml>
        courseA_playLab_events6_c: |-
          这是您要使用来播放随机声音的模块：
          
          <xml><block type="studio_playSound">
          <title name="SOUND">随机</title>
          </block></xml>
      courseA_playLab_events6_2018_authored_hint:
        courseA_playLab_events6_a: |-
          这是您要使用在点击时让乔治做些事情的事件模块：
          
          <xml><block type="studio_whenSpriteClicked">
          <title name="SPRITE">1</title>
          </block></xml>
        courseA_playLab_events6_b: |-
          这是您要使用来改变背景的模块：
          
          <xml><block type="studio_setBackground">
          <title name="VALUE">random</title>
          </block></xml>
        courseA_playLab_events6_c: |-
          这是您要使用来播放随机声音的模块：
          
          <xml><block type="studio_playSound">
          <title name="SOUND">随机</title>
          </block></xml>
      courseA_playLab_events7_authored_hint:
        courseA_playLab_events7_a: |-
          使用此块来控制当演员碰撞时会发生什么。 
          
          <xml><block type="studio_whenSpriteCollided">
          <title name="SPRITE1">1</title>
          <title name="SPRITE2">0</title>
          </block></xml>
      courseA_playLab_events7_2018_authored_hint:
        courseA_playLab_events7_a: |-
          使用此块来控制当演员碰撞时会发生什么。 
          
          <xml><block type="studio_whenSpriteCollided">
          <title name="SPRITE1">1</title>
          <title name="SPRITE2">0</title>
          </block></xml>
      courseA_playlab_challengeTemplate_authored_hint: [ ]
      courseA_playlab_events_challenge1_authored_hint:
        courseA_playlab_events_challenge1_a: "当你点罗宾 的时候，让企鹅出现！\n<xml> \n\n<block type=\"studio_whenSpriteClicked\">\n<title name=\"SPRITE\">2</title>\n<next>\n<block type=\"studio_setSprite\">\n<title name=\"VALUE\">\"visible\"</title>\n<title name=\"SPRITE\">3</title>\n</block>\n</next>\n</block></xml>"
        courseA_playlab_events_challenge1_b: "当你点企鹅的时候让布出现！\n<xml> \n\n<block type=\"studio_whenSpriteClicked\">\n<title name=\"SPRITE\">3</title>\n<next>\n<block type=\"studio_setSprite\">\n<title name=\"VALUE\">\"visible\"</title>\n<title name=\"SPRITE\">4</title>\n</block>\n</next>\n</block></xml>"
        courseA_playlab_events_challenge1_c: "当你点布时让毛绒绒的怪物杰登出现！\n<xml> \n\n<block type=\"studio_whenSpriteClicked\">\n<title name=\"SPRITE\">4</title>\n<next>\n<block type=\"studio_setSprite\">\n<title name=\"VALUE\">\"visible\"</title>\n<title name=\"SPRITE\">5</title>\n</block>\n</next>\n</block></xml>"
        courseA_playlab_events_challenge1_d: "当你点怪物的时候让机器人史毕福出现！\n<xml> \n\n<block type=\"studio_whenSpriteClicked\">\n<title name=\"SPRITE\">5</title>\n<next>\n<block type=\"studio_setSprite\">\n<title name=\"VALUE\">\"visible\"</title>\n<title name=\"SPRITE\">6</title>\n</block>\n</next>\n</block></xml>"
        courseA_playlab_events_challenge1_e: "最后，当你点史毕福的时候让巫师温德尔出现！\nxml> \n\n<block type=\"studio_whenSpriteClicked\">\n<title name=\"SPRITE\">6</title>\n<next>\n<block type=\"studio_setSprite\">\n<title name=\"VALUE\">\"visible\"</title>\n<title name=\"SPRITE\">7</title>\n</block>\n</next>\n</block></xml>"
      courseA_playlab_events_challenge1_2018_authored_hint:
        courseA_playlab_events_challenge1_a: "当你点罗宾 的时候，让企鹅出现！\n<xml> \n\n<block type=\"studio_whenSpriteClicked\">\n<title name=\"SPRITE\">2</title>\n<next>\n<block type=\"studio_setSprite\">\n<title name=\"VALUE\">\"visible\"</title>\n<title name=\"SPRITE\">3</title>\n</block>\n</next>\n</block></xml>"
        courseA_playlab_events_challenge1_b: "当你点企鹅的时候让布出现！\n<xml> \n\n<block type=\"studio_whenSpriteClicked\">\n<title name=\"SPRITE\">3</title>\n<next>\n<block type=\"studio_setSprite\">\n<title name=\"VALUE\">\"visible\"</title>\n<title name=\"SPRITE\">4</title>\n</block>\n</next>\n</block></xml>"
        courseA_playlab_events_challenge1_c: "当你点布时让毛绒绒的怪物杰登出现！\n<xml> \n\n<block type=\"studio_whenSpriteClicked\">\n<title name=\"SPRITE\">4</title>\n<next>\n<block type=\"studio_setSprite\">\n<title name=\"VALUE\">\"visible\"</title>\n<title name=\"SPRITE\">5</title>\n</block>\n</next>\n</block></xml>"
        courseA_playlab_events_challenge1_d: "当你点怪物的时候让机器人史毕福出现！\n<xml> \n\n<block type=\"studio_whenSpriteClicked\">\n<title name=\"SPRITE\">5</title>\n<next>\n<block type=\"studio_setSprite\">\n<title name=\"VALUE\">\"visible\"</title>\n<title name=\"SPRITE\">6</title>\n</block>\n</next>\n</block></xml>"
        courseA_playlab_events_challenge1_e: "最后，当你点史毕福的时候让巫师温德尔出现！\nxml> \n\n<block type=\"studio_whenSpriteClicked\">\n<title name=\"SPRITE\">6</title>\n<next>\n<block type=\"studio_setSprite\">\n<title name=\"VALUE\">\"visible\"</title>\n<title name=\"SPRITE\">7</title>\n</block>\n</next>\n</block></xml>"
      courseA_playlab_events_challenge1a_authored_hint:
        courseA_playlab_events_challenge1_a: "你可以让小鸟唱歌。\n<xml> \n<block type=\"studio_whenSpriteClicked\">\n<title name=\"SPRITE\">2</title>\n<next>\n\n<block type=\"studio_saySprite\">\n<title name=\"SPRITE\">2</title>\n<title name=\"TEXT\">吱喳</title>\n</block>\n</next>\n</block></xml>"
        courseA_playlab_events_challenge1_b: "你可以让机器人发出咕噜声。\n<xml>\n<block type=\"studio_whenSpriteClicked\">\n<title name=\"SPRITE\">6</title>\n<next>\n\n<block type=\"studio_playSound\">\n<title name=\"SOUND\">winpoint</title>\n</block>\n</next>\n\n</block></xml>"
        courseA_playlab_events_challenge1_c: |-
          你可以让生气的怪物咆哮。
          
          <xml> <block type="studio_whenSpriteClicked">
          <title name="SPRITE">5</title>
          <next>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">5</title>
          <title name="VALUE">2</title>
          <next>
          <block type="studio_saySprite">
          <title name="SPRITE">5</title>
          <title name="TEXT">Roar!</title>
          <next>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">5</title>
          <title name="VALUE">0</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
      courseA_playlab_events_challenge2_authored_hint:
        courseA_playlab_events_challenge2_a: "你可以让小鸟唱歌。\n<xml> \n<block type=\"studio_whenSpriteClicked\">\n<title name=\"SPRITE\">2</title>\n<next>\n\n<block type=\"studio_saySprite\">\n<title name=\"SPRITE\">2</title>\n<title name=\"TEXT\">吱喳</title>\n</block>\n</next>\n</block></xml>"
        courseA_playlab_events_challenge2_b: "你可以让机器人发出咕噜声。\n<xml>\n<block type=\"studio_whenSpriteClicked\">\n<title name=\"SPRITE\">6</title>\n<next>\n\n<block type=\"studio_playSound\">\n<title name=\"SOUND\">winpoint</title>\n</block>\n</next>\n\n</block></xml>"
        courseA_playlab_events_challenge2_c: |-
          你可以让生气的怪物咆哮。
          
          <xml> <block type="studio_whenSpriteClicked">
          <title name="SPRITE">5</title>
          <next>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">5</title>
          <title name="VALUE">2</title>
          <next>
          <block type="studio_saySprite">
          <title name="SPRITE">5</title>
          <title name="TEXT">Roar!</title>
          <next>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">5</title>
          <title name="VALUE">0</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
      courseA_playlab_events_challenge2_2018_authored_hint:
        courseA_playlab_events_challenge2_a: "你可以让小鸟唱歌。\n<xml> \n<block type=\"studio_whenSpriteClicked\">\n<title name=\"SPRITE\">2</title>\n<next>\n\n<block type=\"studio_saySprite\">\n<title name=\"SPRITE\">2</title>\n<title name=\"TEXT\">吱喳</title>\n</block>\n</next>\n</block></xml>"
        courseA_playlab_events_challenge2_b: "你可以让机器人发出咕噜声。\n<xml>\n<block type=\"studio_whenSpriteClicked\">\n<title name=\"SPRITE\">6</title>\n<next>\n\n<block type=\"studio_playSound\">\n<title name=\"SOUND\">winpoint</title>\n</block>\n</next>\n\n</block></xml>"
        courseA_playlab_events_challenge2_c: |-
          你可以让生气的怪物咆哮。
          
          <xml> <block type="studio_whenSpriteClicked">
          <title name="SPRITE">5</title>
          <next>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">5</title>
          <title name="VALUE">2</title>
          <next>
          <block type="studio_saySprite">
          <title name="SPRITE">5</title>
          <title name="TEXT">Roar!</title>
          <next>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">5</title>
          <title name="VALUE">0</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
      courseA_playlab_events_challengeClone_authored_hint:
        courseA_playlab_events_challenge1_a: "当你点罗宾 的时候，让企鹅出现！\n<xml> \n\n<block type=\"studio_whenSpriteClicked\">\n<title name=\"SPRITE\">2</title>\n<next>\n<block type=\"studio_setSprite\">\n<title name=\"VALUE\">\"visible\"</title>\n<title name=\"SPRITE\">3</title>\n</block>\n</next>\n</block></xml>"
        courseA_playlab_events_challenge1_b: "当你点企鹅的时候让布出现！\n<xml> \n\n<block type=\"studio_whenSpriteClicked\">\n<title name=\"SPRITE\">3</title>\n<next>\n<block type=\"studio_setSprite\">\n<title name=\"VALUE\">\"visible\"</title>\n<title name=\"SPRITE\">4</title>\n</block>\n</next>\n</block></xml>"
        courseA_playlab_events_challenge1_c: "当你点布时让毛绒绒的怪物杰登出现！\n<xml> \n\n<block type=\"studio_whenSpriteClicked\">\n<title name=\"SPRITE\">4</title>\n<next>\n<block type=\"studio_setSprite\">\n<title name=\"VALUE\">\"visible\"</title>\n<title name=\"SPRITE\">5</title>\n</block>\n</next>\n</block></xml>"
        courseA_playlab_events_challenge1_d: "当你点怪物的时候让机器人史毕福出现！\n<xml> \n\n<block type=\"studio_whenSpriteClicked\">\n<title name=\"SPRITE\">5</title>\n<next>\n<block type=\"studio_setSprite\">\n<title name=\"VALUE\">\"visible\"</title>\n<title name=\"SPRITE\">6</title>\n</block>\n</next>\n</block></xml>"
        courseA_playlab_events_challenge1_e: "最后，当你点史毕福的时候让巫师温德尔出现！\n<xml> \n\n<block type=\"studio_whenSpriteClicked\">\n<title name=\"SPRITE\">6</title>\n<next>\n<block type=\"studio_setSprite\">\n<title name=\"VALUE\">\"visible\"</title>\n<title name=\"SPRITE\">7</title>\n</block>\n</next>\n</block></xml>"
      courseA_toMakeLoopsVideo_Collector_authored_hint: [ ]
      courseB_Scrat_ramp1_2018_authored_hint:
        '1': 如果斯奎特做的和你想的不一样，确保两个模块都完全链接到了一起，然后再点击"运行"。
        '2': 别害怕犯错误！试试一些办法，如果不起作用，就试试别的办法！
      courseB_Scrat_ramp2_2018_authored_hint:
        '1': |-
          你的代码应该会像这样：
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_Scrat_ramp3a_2018_authored_hint:
        '1': |
          你的代码应该会像这样：
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveNorth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_Scrat_ramp4a_2018_authored_hint:
        '1': |-
          你的代码应该会像这样：
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveSouth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_Scrat_ramp5a_2018_authored_hint:
        '1': |-
          你的代码应该会像这样：
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveWest">
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_artist_loops10_authored_hint: [ ]
      courseB_artist_loops10_2018_authored_hint: [ ]
      courseB_artist_loops2_authored_hint:
        courseB_artist_loops2_a: 如果希望循环重复4次以上, 你可以更改该模块顶部的数字。
        courseB_artist_loops2_b: 尝试先运行代码, 看看艺术家最后会在那里。
      courseB_artist_loops2_2018_authored_hint:
        courseB_artist_loops2_a: 如果希望循环重复4次以上, 你可以更改该模块顶部的数字。
        courseB_artist_loops2_b: 尝试先运行代码, 看看艺术家最后会在那里。
      courseB_artist_loops3_authored_hint:
        courseB_artist_loops3_a: 记住使用一个`重复`循环来更好地编码！
        courseB_artist_loops3_b: 艺术家会想向南移动, 画出这条线。
      courseB_artist_loops3_2018_authored_hint:
        courseB_artist_loops3_a: 记住使用一个`重复`循环来更好地编码！
        courseB_artist_loops3_b: 艺术家会想向南移动, 画出这条线。
      courseB_artist_loops4_authored_hint:
        courseB_artist_loops4_a: 跳转模块允许您在不绘制直线的情况下向前移动。
        courseB_artist_loops4_b: 您将需要添加一个模块到重复循环内，以解决这个关卡。
        courseB_artist_loops4_c: 不要忘记更改循环重复的次数。
      courseB_artist_loops4_2018_authored_hint:
        courseB_artist_loops4_a: 跳转模块允许您在不绘制直线的情况下向前移动。
        courseB_artist_loops4_b: 您将需要添加一个模块到重复循环内，以解决这个关卡。
        courseB_artist_loops4_c: 不要忘记更改循环重复的次数。
      courseB_artist_loops5_authored_hint:
        courseB_artist_loops5_a: 拖出一个`重复`循环，然后把其他模块放在它里面。需要重复几次？
      courseB_artist_loops5_2018_authored_hint:
        courseB_artist_loops5_a: 拖出一个`重复`循环，然后把其他模块放在它里面。需要重复几次？
      courseB_artist_loops6_authored_hint:
        courseB_artist_loops6_b: 试着在一张纸上记下移动的路线, 并找出模式。
      courseB_artist_loops6_2018_authored_hint:
        courseB_artist_loops6_b: 试着在一张纸上记下移动的路线, 并找出模式。
      courseB_artist_loops7_authored_hint:
        courseB_artist_loops7_a: 这个挑战使用了**4**个循环，一个接一个！
        courseB_artist_loops7_b: |-
          请注意每个循环制作往不同方向上移动的楼梯模式。
        courseB_artist_loops7_c: "循环应该这样做：\n- 循环1\n- 向右\n- 向下\n\n- 循环2\n- 向右\n-向上\n\n- 循环3\n- 向左\n- 向上\n\n- 循环4\n- 向左\n- 向下"
      courseB_artist_loops7_2018_authored_hint:
        courseB_artist_loops7_a: 这个挑战使用了**4**个循环，一个接一个！
        courseB_artist_loops7_b: |-
          请注意每个循环制作往不同方向上移动的楼梯模式。
        courseB_artist_loops7_c: "循环应该这样做：\n- 循环1\n- 向右\n- 向下\n\n- 循环2\n- 向右\n-向上\n\n- 循环3\n- 向左\n- 向上\n\n- 循环4\n- 向左\n- 向下"
      courseB_artist_loops8_authored_hint:
        courseB_artist_loops8_a: 您需要重复模式多少次来制作楼梯？
        courseB_artist_loops8_b: 尝试运行给出的代码来查看它的执行。
      courseB_artist_loops8_2018_authored_hint:
        courseB_artist_loops8_a: 您需要重复模式多少次来制作楼梯？
        courseB_artist_loops8_b: 尝试运行给出的代码来查看它的执行。
      courseB_artist_loops8_predict1_authored_hint: [ ]
      courseB_artist_loops9_authored_hint:
        courseB_artist_loops9_a: 请记住, 跳跃模块可以用来移动, 而无需绘制直线。
        courseB_artist_loops9_b: 您将使用 W 模块来解决这个关卡。
        courseB_artist_loops9_c: 不知道在哪里放循环？尝试逐步把代码写下, 并寻找规律。
      courseB_artist_loops9_2018_authored_hint:
        courseB_artist_loops9_a: 请记住, 跳跃模块可以用来移动, 而无需绘制直线。
        courseB_artist_loops9_b: 您将使用 W 模块来解决这个关卡。
        courseB_artist_loops9_c: 不知道在哪里放循环？尝试逐步把代码写下, 并寻找规律。
      courseB_artist_loops_challenge1_authored_hint:
        courseB_artist_loops_challenge1_a: '像这样的模块:  <xml> <block type="simple_move_up_right"/></xml> 将让您的艺术家在斜线上移动！'
        courseB_artist_loops_challenge1_b: 当你完成一个骰子, `跳`到下一个!
        courseB_artist_loops_challenge1_c: '您将需要`移动`或`跳过`一些相同的行两次。 '
      courseB_artist_loops_challenge1_2018_authored_hint:
        courseB_artist_loops_challenge1_a: '像这样的模块:  <xml> <block type="simple_move_up_right"/></xml> 将让您的艺术家在斜线上移动！'
        courseB_artist_loops_challenge1_b: 当你完成一个骰子, `跳`到下一个!
        courseB_artist_loops_challenge1_c: '您将需要`移动`或`跳过`一些相同的行两次。 '
      courseB_artist_loops_challenge2_authored_hint:
        courseB_artist_loops_challenge2_a: 绘制 X 的代码已经给你了。所有你需要做的是重复 X 和`跳转`到下一个点。
        courseB_artist_loops_challenge2_b: 您可以使用 "跳转" 模块移动到其他位置。
      courseB_artist_loops_challenge2_2018_authored_hint:
        courseB_artist_loops_challenge2_a: 绘制 X 的代码已经给你了。所有你需要做的是重复 X 和`跳转`到下一个点。
        courseB_artist_loops_challenge2_b: 您可以使用 "跳转" 模块移动到其他位置。
      courseB_collector_loops1_authored_hint:
        courseB_collector_loops1_a: 当您站在上面时, <xml><block type="collector_collect_simplified"/></xml> 块可以用来拾取宝藏。
      courseB_collector_loops10_authored_hint:
        courseB_collector_loops10_a: 如果想不出在哪里放置`重复`循环，请逐步写下代码并寻找规律。
        courseB_collector_loops10_b: 试着在一张纸上写下移动的情况, 来寻找共同的模式。
      courseB_collector_loops10_2018_authored_hint:
        courseB_collector_loops10_a: 如果想不出在哪里放置`重复`循环，请逐步写下代码并寻找规律。
        courseB_collector_loops10_b: 试着在一张纸上写下移动的情况, 来寻找共同的模式。
      courseB_collector_loops1_2018_authored_hint:
        courseB_collector_loops1_a: 当您站在上面时, <xml><block type="collector_collect_simplified"/></xml> 块可以用来拾取宝藏。
      courseB_collector_loops2_authored_hint:
        courseB_collector_loops2_a: 在你收集财宝之前, 你必须先向前移动。
        courseB_collector_loops2_b: 当您到达有宝藏的地方时, 请使用 <xml><block type="collector_collect"/></xml>模块来拾取它。
      courseB_collector_loops2_2018_authored_hint:
        courseB_collector_loops2_a: 在你收集财宝之前, 你必须先向前移动。
        courseB_collector_loops2_b: 当您到达有宝藏的地方时, 请使用 <xml><block type="collector_collect"/></xml>模块来拾取它。
      courseB_collector_loops3_authored_hint:
        courseB_collector_prog3_a: 请试着使用一个 <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">5</title></block></xml>模块来收集宝藏。
        courseB_collector_prog3_b: 请记住, 您可以在重复循环中放置多个块。
      courseB_collector_loops3_2018_authored_hint:
        courseB_collector_prog3_a: 请试着使用一个 <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">5</title></block></xml>模块来收集宝藏。
        courseB_collector_prog3_b: 请记住, 您可以在重复循环中放置多个块。
      courseB_collector_loops3_predict1_authored_hint:
        courseB_collector_prog3_a: 请试着使用`重复`模块来收集你的金子。
      courseB_collector_loops4_authored_hint:
        courseB_collector_loops4_a: 请试着使用步进按钮来找出问题所在。
        courseB_collector_loops4_b: 要改变劳雷尔所走的距离, 请更改循环运行的次数。
        courseB_collector_loops4_c: 在完成了`重复`循环后，劳雷尔需要走下来, 并收集宝藏,!
      courseB_collector_loops4_2018_authored_hint:
        courseB_collector_loops4_a: 请试着使用步进按钮来找出问题所在。
        courseB_collector_loops4_b: 要改变劳雷尔所走的距离, 请更改循环运行的次数。
        courseB_collector_loops4_c: 在完成了`重复`循环后，劳雷尔需要走下来, 并收集宝藏,!
      courseB_collector_loops5_authored_hint:
        courseB_collector_loops5_a: 请使用一个以上的循环来完成任务。
        courseB_collector_loops5_b: 尝试运行代码几次, 看看会发生什么。
      courseB_collector_loops5_2018_authored_hint:
        courseB_collector_loops5_a: 请使用一个以上的循环来完成任务。
        courseB_collector_loops5_b: 尝试运行代码几次, 看看会发生什么。
      courseB_collector_loops6_authored_hint:
        courseB_collector_loops6_a: 无法找出哪里出错？请使用"步进"按钮来逐模块运行程序。
        courseB_collector_loops6_b: 通过单击 "3" 并选择其他数字, 可以更改重复循环运行的次数。
        courseB_collector_loops6_c: 您需使用 3次 ' 重复 ' 循环来解决这个关卡。
        courseB_collector_loops6_d: 如果你感到迷惑, 试着把这个关卡分成3块。
      courseB_collector_loops6_2018_authored_hint:
        courseB_collector_loops6_a: 无法找出哪里出错？请使用"步进"按钮来逐模块运行程序。
        courseB_collector_loops6_b: 通过单击 "3" 并选择其他数字, 可以更改重复循环运行的次数。
        courseB_collector_loops6_c: 您需使用 3次 ' 重复 ' 循环来解决这个关卡。
        courseB_collector_loops6_d: 如果你感到迷惑, 试着把这个关卡分成3块。
      courseB_collector_loops7_authored_hint:
        courseB_collector_loops7_a: 如果此关卡太难，请试着在纸张上把它画出来，看看怎么解决。
        courseB_collector_loops7_b: 你将需要3个重复循环来解决这个关卡, 最后不要忘记额外的宝藏!
      courseB_collector_loops7_2018_authored_hint:
        courseB_collector_loops7_a: 如果此关卡太难，请试着在纸张上把它画出来，看看怎么解决。
        courseB_collector_loops7_b: 你将需要3个重复循环来解决这个关卡, 最后不要忘记额外的宝藏!
      courseB_collector_loops8_authored_hint:
        courseB_collector_loops8_challenge_a: 如果无法想出在哪里放置重复循环，请逐步写下代码并寻找规律。
      courseB_collector_loops8_2018_authored_hint:
        courseB_collector_loops8_challenge_a: 如果无法想出在哪里放置重复循环，请逐步写下代码并寻找规律。
      courseB_collector_loops9_authored_hint:
        courseB_collector_loops9_a: '这看起来太难了吗？请把它分解成3个小问题，这样会感觉容易些。  '
        courseB_collector_loops9_b: 您将需要3个重复循环, 一个接一个, 来解决这个关卡。
      courseB_collector_loops9_2018_authored_hint:
        courseB_collector_loops9_a: '这看起来太难了吗？请把它分解成3个小问题，这样会感觉容易些。  '
        courseB_collector_loops9_b: 您将需要3个重复循环, 一个接一个, 来解决这个关卡。
      courseB_collector_loops_challenge1_authored_hint:
        courseB_collector_loops_challenge1_b: |
          从循环执行以下命令开始：
          
          <xml>
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"></block>
          </next>
          </block>
          </xml>
        courseB_collector_loops_challenge1_c: "在每条路径之间向东移动两次。\n<xml>\n<block type=\"maze_moveEast\"><next>\n<block type=\"maze_moveEast\"></block></next></block>\n</xml>\n你只能使用14个模块来实现。单击查看更多解决方案来得到更多提示。\n"
        courseB_collector_loops_challenge1_d: |-
          试试这个！
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="maze_moveNorth"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_collector_loops_challenge1_2018_authored_hint:
        courseB_collector_loops_challenge1_b: |
          从循环执行以下命令开始：
          
          <xml>
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"></block>
          </next>
          </block>
          </xml>
        courseB_collector_loops_challenge1_c: "在每条路径之间向东移动两次。\n<xml>\n<block type=\"maze_moveEast\"><next>\n<block type=\"maze_moveEast\"></block></next></block>\n</xml>\n你只能使用14个模块来实现。单击查看更多解决方案来得到更多提示。\n"
        courseB_collector_loops_challenge1_d: |-
          试试这个！
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="maze_moveNorth"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_collector_loops_challenge2_authored_hint:
        courseB_collector_loops_challenge2_a: 如果出了差错, 不要害怕重新开始。不要放弃!
        courseB_collector_loops_challenge2_b: |-
          如果你重复这个模式, 劳雷尔不会撞到洞穴底部的墙上! 
          
          <xml><block type="maze_moveEast">
          <next>
          <block type="collector_collect">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveSouth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
        courseB_collector_loops_challenge2_c: 尝试使用 "重复" 块收集最后一堆的宝藏!
        courseB_collector_loops_challenge2_d: |-
          尝试此解决方案：
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_simplified_dropdown">
          <title name="TIMES" config="3-10">4</title>
          <statement name="DO">
          <block type="maze_moveEast">
          <next>
          <block type="collector_collect">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveSouth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="controls_repeat_simplified_dropdown">
          <title name="TIMES" config="3-10">6</title>
          <statement name="DO">
          <block type="collector_collect"/>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_collector_loops_challenge2a_authored_hint:
        courseB_collector_loops_challenge2a_a: 如果出了问题，请试着调试它。不要放弃！
        courseB_collector_loops_challenge2a_b: 请看看此选项以通过迷宫。您是否看到了您可以重复的模式？
        courseB_collector_loops_challenge2a_c: 要收集所有的宝藏，要么需要添加2 个<xml> <block type="collector_collect"/></xml>模块到您的循环内，或者把此模块放到它自己的`重复`模块中。
      courseB_collector_loops_challenge2a_2018_authored_hint:
        courseB_collector_loops_challenge2a_a: 如果出了问题，请试着调试它。不要放弃！
        courseB_collector_loops_challenge2a_b: 请看看此选项以通过迷宫。您是否看到了您可以重复的模式？
        courseB_collector_loops_challenge2a_c: 要收集所有的宝藏，要么需要添加2 个<xml> <block type="collector_collect"/></xml>模块到您的循环内，或者把此模块放到它自己的`重复`模块中。
      courseB_collector_loops_challenge`_authored_hint:
        courseA_collector_loops_challenge2_b: "你只需要使用一个![](https://images.code.org/803e9ee8b5bc9311a26edf955cd3c03f-image-1491001702274.07.34 PM.png)模块来解决这个问题。\n\n"
        courseA_collector_loops_challenge2_a: |-
          在向南移动之前, 您可以再次在路径上移动。
          
          ![](https://images.code.org/88c28c76dbea70e20253083d22b5f5fd-image-1491001404225.01.21 PM.png)
      courseB_collector_prog3_authored_hint:
        courseB_collector_prog3_a: 请试着使用`重复`模块来收集您的金子。
      courseB_iceage_loops1_authored_hint:
        courseB_iceage_loops1_a: 小心破冰！斯奎特会掉下去的！
        courseB_iceage_loops1_b: |-
          你需要用这个模块：
          
          <xml><block type="maze_moveEast"/></xml>
      courseB_iceage_loops10_authored_hint:
        courseB_iceage_loops10_a: 小心破冰！斯奎特会掉到水里的！
        courseB_iceage_loops10_b: 试试大声说出步骤，或将它们写到纸上。找到什么规律了吗？
        courseB_iceage_loops10_c: 这是一个很长的迷宫！沿这条路走。
      courseB_iceage_loops2_authored_hint:
        courseB_iceage_loops2_a: 将这一关分成两部分，一个在角落前，另一个在角落后。
        courseB_iceage_loops2_b: 如果被难住了，试着大声说出步骤来。
        courseB_iceage_loops2_c: 修复这条路，来帮助斯奎特到达橡子。
      courseB_iceage_loops3_authored_hint:
        courseB_iceage_loops3_a: |-
          用这个新的模块！
          <xml><block type="controls_repeat_simplified_dropdown">
          <title name="TIMES" config="3-10">5</title>
          </block></xml>
        courseB_iceage_loops3_b: 要重复代码, 拖出一个`重复 `循环, 然后把它放在你想要的模块里面。
      courseB_iceage_loops4_authored_hint:
        courseB_iceage_loops4_a: 写下斯奎特要到达橡子的步骤。找到规律了吗？
        courseB_iceage_loops4_b: 别害怕运行你的代码，看看会发生什么！
        courseB_iceage_loops4_c: 这是斯奎特应该走的路。
      courseB_iceage_loops6_authored_hint:
        courseB_iceage_loops6_a: 最终的代码会有**三个**移动模块。
        courseB_iceage_loops6_b: 你只需要再添加**一个**循环！
        courseB_iceage_loops6_c: 最终的路应该像这样。
      courseB_iceage_loops7_authored_hint:
        courseB_iceage_loops7_a: 如果被难住了，试着在纸上写下步骤。找到规律了吗？
        courseB_iceage_loops7_b: 斯奎特想要拿到橡子就得走这条路。
      courseB_iceage_loops8_authored_hint:
        courseB_iceage_loops8_a: 这些移动模块正确吗？你还能改什么？
        courseB_iceage_loops8_b: 第一个循环应当重复**3**次，第二个应当重复**5**次，第三个循环应当重复**4**次，最后一个循环应当重复**4**次。
        courseB_iceage_loops8_c: 使用循环帮助斯奎特沿着这条路走。
      courseB_iceage_loops9_authored_hint:
        courseB_iceage_loops9_a: 有困难吗？试着将这一关分成更小的部分。别害怕运行你的代码！
        courseB_iceage_loops9_b: 最后的代码会有**4**个循环。
        courseB_iceage_loops9_c: 斯奎特应该沿着这条路去找橡子。
      courseB_maze_seq1_authored_hint:
        courseB_maze_seq1_a: 将模块连接到 <xml><block type="when_run"/></xml>模块以使鸟移动!
        courseB_maze_seq1_b: 拖动三个 <xml><block type="maze_moveSouth"/></xml>箭头并将它们连接到<xml><block type="when_run"/></xml>模块中, 以将您的鸟带到猪那里。
      courseB_maze_seq10_authored_hint:
        courseB_maze_seq10_a: 请试着先在一张纸上写下步骤。
        courseB_maze_seq10_b: 你需要在两个不同方向移动来够到猪。
      courseB_maze_seq10_2018_authored_hint: [ ]
      courseB_maze_seq10_predict1_authored_hint: [ ]
      courseB_maze_seq10_predict1_2018_authored_hint: [ ]
      courseB_maze_seq11_authored_hint:
        courseB_maze_seq11_a: 请试着先在一张纸上写下步骤。
        courseB_maze_seq11_b: '解开关卡的两个部分: 一个在拐角前, 一个在拐角后。'
      courseB_maze_seq11_2018_authored_hint: [ ]
      courseB_maze_seq1_2018_authored_hint:
        courseB_maze_seq1_a: 将模块连接到 <xml><block type="when_run"/></xml>模块以使鸟移动!
        courseB_maze_seq1_b: 拖动三个 <xml><block type="maze_moveSouth"/></xml>箭头并将它们连接到<xml><block type="when_run"/></xml>模块中, 以将您的鸟带到猪那里。
      courseB_maze_seq1_predict1_authored_hint: [ ]
      courseB_maze_seq1_predict1_2018_authored_hint: [ ]
      courseB_maze_seq2_authored_hint:
        courseB_maze_seq2_a: 该程序缺少1 个模块，您是否可以找出是哪个？
        courseB_maze_seq2_b: 尝试运行所给出的代码, 看看鸟下一步该做什么。
      courseB_maze_seq2_2018_authored_hint:
        courseB_maze_seq2_a: 该程序缺少1 个模块，您是否可以找出是哪个？
        courseB_maze_seq2_b: 尝试运行所给出的代码, 看看鸟下一步该做什么。
      courseB_maze_seq3_authored_hint:
        courseB_maze_seq3_a: 其中一个模块把鸟移向了错误的方向。你能找出是哪块并用正确的模块来取代它吗？
        courseB_maze_seq3_b: 请尝试使用 "步进" 按钮查找程序出错的位置。是第一步吗？还是第二步？
        courseB_maze_seq3_c: <xml><block type="maze_moveWest"/></xml>模块似乎没有将鸟移动到正确的方向。
      courseB_maze_seq3_2018_authored_hint:
        courseB_maze_seq3_a: 其中一个模块把鸟移向了错误的方向。你能找出是哪块并用正确的模块来取代它吗？
        courseB_maze_seq3_b: 请尝试使用 "步进" 按钮查找程序出错的位置。是第一步吗？还是第二步？
        courseB_maze_seq3_c: <xml><block type="maze_moveWest"/></xml>模块似乎没有将鸟移动到正确的方向。
      courseB_maze_seq4_authored_hint:
        courseB_maze_seq4_a: 试着一次加一条指令，直到到达猪那里。
        courseB_maze_seq4_b: 您需要使用 <xml><block type="maze_moveEast"/></xml>模块来解决此关卡。
      courseB_maze_seq4_2018_authored_hint:
        courseB_maze_seq4_a: 试着一次加一条指令，直到到达猪那里。
        courseB_maze_seq4_b: 您需要使用 <xml><block type="maze_moveEast"/></xml>模块来解决此关卡。
      courseB_maze_seq5_authored_hint:
        courseB_maze_seq5_a: 如果你被卡住了, 试着在纸上画出路径。
        courseB_maze_seq5_b: 有两种方法来解决这个难题！
        courseB_maze_seq5_c: 不知道怎么去找猪？ 尝试此路径。
      courseB_maze_seq5_2018_authored_hint:
        courseB_maze_seq5_a: 如果你被卡住了, 试着在纸上画出路径。
        courseB_maze_seq5_b: 有两种方法来解决这个难题！
        courseB_maze_seq5_c: 不知道怎么去找猪？ 尝试此路径。
      courseB_maze_seq6_authored_hint:
        courseB_maze_seq6_a: 最终的代码应该有3个移动模块。
        courseB_maze_seq6_b: 如果你被卡住了, 试着分成两个部分来解决关卡, 一个是侧面的路, 一条是从上到下的。
        courseB_maze_seq5_c: 有两种方法来解决这个难题！
        courseB_maze_seq5_d: 不知道怎么去找猪？尝试这条路!
      courseB_maze_seq6_2018_authored_hint:
        courseB_maze_seq6_a: 最终的代码应该有3个移动模块。
        courseB_maze_seq6_b: 如果你被卡住了, 试着分成两个部分来解决关卡, 一个是侧面的路, 一条是从上到下的。
        courseB_maze_seq5_c: 有两种方法来解决这个难题！
        courseB_maze_seq5_d: 不知道怎么去找猪？尝试这条路!
      courseB_maze_seq7_authored_hint:
        courseB_maze_seq7_a: 添加一个模块, 让鸟到猪那！
        courseB_maze_seq7_b: 尝试运行给你的代码, 看看你是什么结果。
        courseB_maze_seq7_c: 够不到猪吗？ 尝试这条路!
      courseB_maze_seq7_2018_authored_hint:
        courseB_maze_seq7_a: 添加一个模块, 让鸟到猪那！
        courseB_maze_seq7_b: 尝试运行给你的代码, 看看你是什么结果。
        courseB_maze_seq7_c: 够不到猪吗？ 尝试这条路!
      courseB_maze_seq8_authored_hint:
        courseB_maze_seq8_a: 试着一次添加一个模块, 直到你解开这个关卡。
        courseB_maze_seq8_b: 有两种方法来解决这个难题 ！
        courseB_maze_seq8_c: 不知道该走哪条路？尝试这条路!
      courseB_maze_seq8_2018_authored_hint:
        courseB_maze_seq8_a: 试着一次添加一个模块, 直到你解开这个关卡。
        courseB_maze_seq8_b: 有两种方法来解决这个难题 ！
        courseB_maze_seq8_c: 不知道该走哪条路？尝试这条路!
      courseB_maze_seq9_authored_hint:
        courseB_maze_seq9_a: 请试着先在一张纸上写下所有的步骤。
        courseB_maze_seq9_b: 每次生成一个模块，并在生成时进行测试。
        courseB_maze_seq9_c: 有两种方法来解决这个难题！
        courseB_maze_seq9_d: 卡住了? 尝试这条路!
      courseB_maze_seq9_2018_authored_hint:
        courseB_maze_seq9_a: 请试着先在一张纸上写下所有的步骤。
        courseB_maze_seq9_b: 每次生成一个模块，并在生成时进行测试。
        courseB_maze_seq9_c: 有两种方法来解决这个难题！
        courseB_maze_seq9_d: 卡住了? 尝试这条路!
      courseB_maze_seq9_challenge1_authored_hint: [ ]
      courseB_maze_seqCold_authored_hint:
        courseB_maze_seqCold_a: 卡住了？请试着用手指来描绘鸟的路径。
        courseB_maze_seqCold_b: 额外的模块需要加在最后一块之前![](https://images.code.org/145dfc20c086bc8fc265de47f3cfe4b0-image-1467848177684.35.51 PM.png )
      courseB_maze_seqOld_authored_hint:
        courseB_maze_seqOld_a: 如果你有困难, 试着先写下一张纸上的步骤。
      courseB_maze_seq_challenge1_authored_hint:
        courseB_maze_seq_challenge1_a: 这一次最短路径可能无法解决问题。
        courseB_maze_seq_challenge1_b: 请尝试使用 <xml><block type="maze_moveWest"/></xml> 模块来开始。
      courseB_maze_seq_challenge1_2018_authored_hint:
        courseB_maze_seq_challenge1_a: 这一次最短路径可能无法解决问题。
        courseB_maze_seq_challenge1_b: 请尝试使用 <xml><block type="maze_moveWest"/></xml> 模块来开始。
      courseB_maze_seq_challenge2_authored_hint:
        courseB_maze_seq_challenge2_a: 您不需要添加或删除块来解决此关卡。
        courseB_maze_seq_challenge2_b: 重新排列模块, 并采取楼梯模式的路径。
      courseB_maze_seq_challenge2_2018_authored_hint:
        courseB_maze_seq_challenge2_a: 您不需要添加或删除块来解决此关卡。
        courseB_maze_seq_challenge2_b: 重新排列模块, 并采取楼梯模式的路径。
      courseB_playlab_challenge1_Template_authored_hint: [ ]
      courseB_playlab_challenge1_Template_2018_authored_hint: [ ]
      courseB_playlab_events2_authored_hint:
        courseB_playlab_events2_a: |-
          这个模块能让黛西说些什么
          
          <xml>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">0</title>
          <title name="VALUE">你好。</title>
          </block>
          </xml>
      courseB_playlab_events2_2018_authored_hint:
        courseB_playlab_events2_a: |-
          这个模块能让黛西说些什么
          
          <xml>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">0</title>
          <title name="VALUE">你好。</title>
          </block>
          </xml>
      courseB_playlab_events3_authored_hint:
        courseB_playlab_events3_a: |-
          这是用来添加事件的模块：
          
          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">0</title>
          </block>
          </xml>
        courseB_playlab_events3_b: |-
          这是用来改变黛西心情的模块。
          
          <xml>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">0</title>
          <title name="VALUE">random</title>
          </block>
          </xml>
      courseB_playlab_events3_2018_authored_hint:
        courseB_playlab_events3_a: |-
          这是用来添加事件的模块：
          
          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">0</title>
          </block>
          </xml>
        courseB_playlab_events3_b: |-
          这是用来改变黛西心情的模块。
          
          <xml>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">0</title>
          <title name="VALUE">random</title>
          </block>
          </xml>
      courseB_playlab_events4_authored_hint:
        courseB_playlab_events4_a: |-
          这是控制左方向键的事件：
          
          <xml>
          <block type="studio_whenArrow">
          <title name="VALUE">left</title>
          </block>
          </xml>
        courseB_playlab_events4_b: |-
          这就是让骑士向左移动的模块。
          
          <xml>
          <block type="studio_move">
          <title name="SPRITE">1</title>
          <title name="DIR">8</title>
          </block>
          </xml>
      courseB_playlab_events4_2018_authored_hint:
        courseB_playlab_events4_a: |-
          这是控制左方向键的事件：
          
          <xml>
          <block type="studio_whenArrow">
          <title name="VALUE">left</title>
          </block>
          </xml>
        courseB_playlab_events4_b: |-
          这就是让骑士向左移动的模块。
          
          <xml>
          <block type="studio_move">
          <title name="SPRITE">1</title>
          <title name="DIR">8</title>
          </block>
          </xml>
      courseB_playlab_events5_authored_hint:
        courseB_playlab_events5_a: "这是控制右方向键的事件：\n\n<xml>\n  <block type=\"studio_whenArrow\">\n    <title name=\"VALUE\">right</title>\n  </block>\n  </xml>"
        courseB_playlab_events5_b: "这是让骑士逃跑的模块：\n\n<xml>\n<block type=\"studio_move\">\n    <title name=\"SPRITE\">1</title>\n    <title name=\"DIR\">2</title>\n  </block>\n</xml>"
      courseB_playlab_events5_2018_authored_hint:
        courseB_playlab_events5_a: "这是控制右方向键的事件：\n\n<xml>\n  <block type=\"studio_whenArrow\">\n    <title name=\"VALUE\">right</title>\n  </block>\n  </xml>"
        courseB_playlab_events5_b: "这是让骑士逃跑的模块：\n\n<xml>\n<block type=\"studio_move\">\n    <title name=\"SPRITE\">1</title>\n    <title name=\"DIR\">2</title>\n  </block>\n</xml>"
      courseB_playlab_events6_authored_hint:
        courseB_playlab_events6_a: |-
          你需要这些事件模块：
          
          <xml>
          <block type="studio_whenArrow" id="callMe">
          <title name="VALUE">up</title>
          </block>
          <block type="studio_whenArrow" id="callMe">
          <title name="VALUE">down</title>
          </block>
          </xml>
        courseB_playlab_events6_b: |-
          用绿色的"当 ___ 箭头按下" 块的下拉箭头来选择不同的方向。
          
          ![](https://images.code.org/b4c76f19fc2d2694c1f731e5f6e786b8-image-1501003990996.gif)
        courseB_playlab_events6_c: 得到所有的旗帜来通过!
      courseB_playlab_events6_2018_authored_hint:
        courseB_playlab_events6_a: |-
          你需要这些事件模块：
          
          <xml>
          <block type="studio_whenArrow" id="callMe">
          <title name="VALUE">up</title>
          </block>
          <block type="studio_whenArrow" id="callMe">
          <title name="VALUE">down</title>
          </block>
          </xml>
        courseB_playlab_events6_b: |-
          用绿色的"当 ___ 箭头按下" 块的下拉箭头来选择不同的方向。
          
          ![](https://images.code.org/b4c76f19fc2d2694c1f731e5f6e786b8-image-1501003990996.gif)
        courseB_playlab_events6_c: 得到所有的旗帜来通过!
      courseB_playlab_events7_authored_hint:
        courseB_playlab_events7_a: |-
          这是你要用到的事件模块：
          
          <xml>
          <block type="studio_whenSpriteCollided">
          <title name="SPRITE1">0</title>
          <title name="SPRITE2">1</title>
          </block>
          </xml>
        courseB_playlab_events7_b: |-
          这是用来播放一个声音的模块。
          
          <xml>
          <block type="studio_playSound">
          <title name="SOUND">slap</title>
          </block>
          </xml>
        courseB_playlab_events7_c: |-
          这是让骑士消失的模块。
          
          <xml>
          <block type="studio_vanish">
          <title name="SPRITE">1</title>
          </block>
          </xml>
      courseB_playlab_events7_2018_authored_hint:
        courseB_playlab_events7_a: |-
          这是你要用到的事件模块：
          
          <xml>
          <block type="studio_whenSpriteCollided">
          <title name="SPRITE1">0</title>
          <title name="SPRITE2">1</title>
          </block>
          </xml>
        courseB_playlab_events7_b: |-
          这是用来播放一个声音的模块。
          
          <xml>
          <block type="studio_playSound">
          <title name="SOUND">slap</title>
          </block>
          </xml>
        courseB_playlab_events7_c: |-
          这是让骑士消失的模块。
          
          <xml>
          <block type="studio_vanish">
          <title name="SPRITE">1</title>
          </block>
          </xml>
      courseB_playlab_eventsTemplate_authored_hint: [ ]
      courseB_playlab_eventsTemplate_2018_authored_hint: [ ]
      courseB_playlab_eventsToolbox_authored_hint:
        courseB_playlab_events7_a: |-
          这是会用到的的事件模块：
          
          ![](https://images.code.org/2ed42b3a3108c6affdfc866de57f2eec-image-1475624565390.42.18.png)
        courseB_playlab_events7_b: |-
          这是需要用来播放声音的模块。
          
          ![](https://images.code.org/58e9b9a146a4ca3a8eee25845110b805-image-1475624550269.42.00.png)
        courseB_playlab_events7_c: |-
          这是需要用来让骑士消失的模块：
          
          ![](https://images.code.org/f468611cbe51e1cb35531334f625395a-image-1475624478204.41.02.png)
      courseB_playlab_events_challenge1_authored_hint:
        courseB_playlab_events_challenge1_a: "当你按下`▼`时, 让其他动物向下移动。\n<xml>\n<block type=\"studio_whenArrow\" movable=\"false\">\n<title name=\"VALUE\">down</title>\n</block>\n</xml>"
        courseB_playlab_events_challenge1_b: |
          使用此块更改动物的速度：
          <xml>
          <block type="studio_setSpriteSpeed">
          <title name="SPRITE">0</title>
          <title name="VALUE">Studio.SpriteSpeed.NORMAL</title>
          </block></xml>
        courseB_playlab_events_challenge1_c: |-
          比赛结束后, 大家会怎么说？让他们交谈这次的活动: 
          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">2</title>
          <next>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">2</title>
          <title name="VALUE">啊哈！</title>
          </block>
          </next>
          </block>
          </xml>
      courseB_playlab_events_challenge1_2018_authored_hint:
        courseB_playlab_events_challenge1_a: "当你按下`▼`时, 让其他动物向下移动。\n<xml>\n<block type=\"studio_whenArrow\" movable=\"false\">\n<title name=\"VALUE\">down</title>\n</block>\n</xml>"
        courseB_playlab_events_challenge1_b: |
          使用此块更改动物的速度：
          <xml>
          <block type="studio_setSpriteSpeed">
          <title name="SPRITE">0</title>
          <title name="VALUE">Studio.SpriteSpeed.NORMAL</title>
          </block></xml>
        courseB_playlab_events_challenge1_c: |-
          比赛结束后, 大家会怎么说？让他们交谈这次的活动: 
          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">2</title>
          <next>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">2</title>
          <title name="VALUE">啊哈！</title>
          </block>
          </next>
          </block>
          </xml>
      courseB_playlab_events_challenge2_authored_hint:
        courseB_playlab_events_challenge2_a: 游戏中的每种动物都应该在被敲击时消失。它也应该在一两秒钟后回来！
        courseB_playlab_events_challenge2_b: |-
          使用其他事件模块使其他动物消失！
          
          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">1</title>
          </block>
          </xml>
        courseB_playlab_events_challenge2_c: |-
          当你点击动物时, 使用额外的命令来播放声音或得分。
          <xml>
          <block type="studio_playSound">
          <title name="SOUND">slap</title>
          </block>
          <block type="studio_changeScore"/></xml>
        courseB_playlab_events_challenge2_d: |-
          混合起来！
          
          使一些动物比其他给出更多的分数。使用不同的声音。改变动物的情绪!
      courseB_playlab_events_challenge2_2018_authored_hint:
        courseB_playlab_events_challenge2_a: 游戏中的每种动物都应该在被敲击时消失。它也应该在一两秒钟后回来！
        courseB_playlab_events_challenge2_b: |-
          使用其他事件模块使其他动物消失！
          
          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">1</title>
          </block>
          </xml>
        courseB_playlab_events_challenge2_c: |-
          当你点击动物时, 使用额外的命令来播放声音或得分。
          <xml>
          <block type="studio_playSound">
          <title name="SOUND">slap</title>
          </block>
          <block type="studio_changeScore"/></xml>
        courseB_playlab_events_challenge2_d: |-
          混合起来！
          
          使一些动物比其他给出更多的分数。使用不同的声音。改变动物的情绪!
      courseB_playlab_events_challenge2_embed_authored_hint:
        courseB_playlab_events_challenge2_a: 游戏中的每种动物都应该在被敲击时消失。它也应该在一两秒钟后回来！
        courseB_playlab_events_challenge2_b: |-
          使用其他事件模块使其他动物消失！
          
          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">1</title>
          </block>
          </xml>
        courseB_playlab_events_challenge2_c: |-
          当你点击动物时, 使用额外的命令来播放声音或得分。
          <xml>
          <block type="studio_playSound">
          <title name="SOUND">slap</title>
          </block>
          <block type="studio_changeScore"/></xml>
        courseB_playlab_events_challenge2_d: |-
          混合起来！
          
          使一些动物比其他给出更多的分数。使用不同的声音。改变动物的情绪!
      courseB_playlab_events_challenge2_template_authored_hint:
        courseB_playlab_events_challenge2_a: 游戏中的每种动物都应该在被敲击时消失。它也应该在一两秒钟后回来！
        courseB_playlab_events_challenge2_b: |-
          使用其他事件模块使其他动物消失！
          
          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">1</title>
          </block>
          </xml>
        courseB_playlab_events_challenge2_c: |-
          当你点击动物时, 使用额外的命令来播放声音或得分。
          <xml>
          <block type="studio_playSound">
          <title name="SOUND">slap</title>
          </block>
          <block type="studio_changeScore"/></xml>
        courseB_playlab_events_challenge2_d: |-
          混合起来！
          
          使一些动物比其他给出更多的分数。使用不同的声音。改变动物的情绪!
      courseB_playlab_events_challenge2_template_2018_authored_hint:
        courseB_playlab_events_challenge2_a: 游戏中的每种动物都应该在被敲击时消失。它也应该在一两秒钟后回来！
        courseB_playlab_events_challenge2_b: |-
          使用其他事件模块使其他动物消失！
          
          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">1</title>
          </block>
          </xml>
        courseB_playlab_events_challenge2_c: |-
          当你点击动物时, 使用额外的命令来播放声音或得分。
          <xml>
          <block type="studio_playSound">
          <title name="SOUND">slap</title>
          </block>
          <block type="studio_changeScore"/></xml>
        courseB_playlab_events_challenge2_d: |-
          混合起来！
          
          使一些动物比其他给出更多的分数。使用不同的声音。改变动物的情绪!
      courseB_scrat_forVideo_authored_hint: [ ]
      courseB_starWars_prog1_authored_hint:
        courseB_starWars_prog1_a: 尝试一次添加一个块, 然后单击 "运行" 以查看发生了什么。
        courseB_starWars_prog1_b: |
          你会想向东移动解决这个关卡。你要走多远？<xml><block type="studio_moveEast"/></xml>
      courseB_starWars_prog10_authored_hint: [ ]
      courseB_starWars_prog10_2018_authored_hint: [ ]
      courseB_starWars_prog11_authored_hint: [ ]
      courseB_starWars_prog11_2018_authored_hint: [ ]
      courseB_starWars_prog1_2018_authored_hint:
        courseB_starWars_prog1_a: 尝试一次添加一个块, 然后单击 "运行" 以查看发生了什么。
        courseB_starWars_prog1_b: |
          你会想向东移动解决这个关卡。你要走多远？<xml><block type="studio_moveEast"/></xml>
      courseB_starWars_prog2_authored_hint:
        courseB_starWars_prog2_a: 把这个问题分成两部分。得到一堆废铁, 然后弄清楚如何得到另一堆。
      courseB_starWars_prog2_2018_authored_hint:
        courseB_starWars_prog2_a: 把这个问题分成两部分。得到一堆废铁, 然后弄清楚如何得到另一堆。
      courseB_starWars_prog3_authored_hint:
        courseB_starWars_prog3_a: 您将需要移动3条路来解决这个关卡。
        courseB_starWars_prog3_b: 一次生成一段代码。运行它, 找出下步去哪里。
      courseB_starWars_prog3_2018_authored_hint:
        courseB_starWars_prog3_a: 您将需要移动3条路来解决这个关卡。
        courseB_starWars_prog3_b: 一次生成一段代码。运行它, 找出下步去哪里。
      courseB_starWars_prog4_authored_hint:
        courseB_starWars_prog4_a: 一次生成一段代码。运行它, 找出下步去哪里。
        courseB_starWars_prog4_b: |-
          尝试使用`重复`模块来缩短代码。
          <xml> <block type="controls_repeat_simplified">
          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog4_2018_authored_hint:
        courseB_starWars_prog4_a: 一次生成一段代码。运行它, 找出下步去哪里。
        courseB_starWars_prog4_b: |-
          尝试使用`重复`模块来缩短代码。
          <xml> <block type="controls_repeat_simplified">
          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog5_authored_hint:
        courseB_starWars_prog5_a: 这种模式是不是有点像最后一个关卡？
        courseB_starWars_prog5_b: BB-8 会在他翻滚的时候抓住废铁。
        courseB_starWars_prog5_c: 用你的手指追踪这个图案。在你移动的时候数一下金属碎片。
        courseB_starWars_prog5_da: |-
          看看如果你使用解决阶梯步进关卡一样的解决方案会如何:
          
          ![](https://images.code.org/866b4121069423bf03d92dcb8f2276af-image-1503709785988.09.24.png)
      courseB_starWars_prog5_2018_authored_hint:
        courseB_starWars_prog5_a: 这种模式是不是有点像最后一个关卡？
        courseB_starWars_prog5_b: BB-8 会在他翻滚的时候抓住废铁。
        courseB_starWars_prog5_c: 用你的手指追踪这个图案。在你移动的时候数一下金属碎片。
        courseB_starWars_prog5_da: |-
          看看如果你使用解决阶梯步进关卡一样的解决方案会如何:
          
          ![](https://images.code.org/866b4121069423bf03d92dcb8f2276af-image-1503709785988.09.24.png)
      courseB_starWars_prog6_authored_hint:
        courseB_starWars_prog6_a: 这个图案只是一个台阶, 每方向移动两步!
        courseB_starWars_prog6_b: |-
          尝试使用`重复`模块来缩短代码。
          <xml> <block type="controls_repeat_simplified">
          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog6_2018_authored_hint:
        courseB_starWars_prog6_a: 这个图案只是一个台阶, 每方向移动两步!
        courseB_starWars_prog6_b: |-
          尝试使用`重复`模块来缩短代码。
          <xml> <block type="controls_repeat_simplified">
          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog7_authored_hint:
        courseB_starWars_prog7_a: 这种模式是不是有点像最后一个关卡？
        courseB_starWars_prog7_b: BB-8 会在他翻滚的时候抓住废铁。
        courseB_starWars_prog7_c: 试着画出这个关卡的大台阶图案。它能覆盖所有的废旧金属吗？
      courseB_starWars_prog7_2018_authored_hint:
        courseB_starWars_prog7_a: 这种模式是不是有点像最后一个关卡？
        courseB_starWars_prog7_b: BB-8 会在他翻滚的时候抓住废铁。
        courseB_starWars_prog7_c: 试着画出这个关卡的大台阶图案。它能覆盖所有的废旧金属吗？
      courseB_starWars_prog8_authored_hint:
        courseB_starWars_prog8_a: 回到你已经旅行过的一组空间里是可以的。
        courseB_starWars_prog8_b: |-
          请尝试使用 "重复" 块来查看在内部放置的代码会发生什么变化。
          
          <xml>
          <block type="controls_repeat_simplified">
          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog8_2018_authored_hint:
        courseB_starWars_prog8_a: 回到你已经旅行过的一组空间里是可以的。
        courseB_starWars_prog8_b: |-
          请尝试使用 "重复" 块来查看在内部放置的代码会发生什么变化。
          
          <xml>
          <block type="controls_repeat_simplified">
          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog9_authored_hint:
        courseB_starWars_prog9_a: 不要害怕犯错误! 即使你还没有解决这个关卡，运行代码, 看看会发生什么。
        courseB_starWars_prog9_b: 解决这个难题有很多方法。
        courseB_starWars_prog9_c: 使用`重复`循环有帮助吗？
      courseB_starWars_prog9_2018_authored_hint:
        courseB_starWars_prog9_a: 不要害怕犯错误! 即使你还没有解决这个关卡，运行代码, 看看会发生什么。
        courseB_starWars_prog9_b: 解决这个难题有很多方法。
        courseB_starWars_prog9_c: 使用`重复`循环有帮助吗？
      courseC_PlayLab_embed_events9_authored_hint: [ ]
      courseC_PlayLab_events1_authored_hint:
        courseC_PlayLab_events1_a: |-
          将此块附加到 "当运行时" 模块：
          
          <xml>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">0</title>
          <title name="VALUE">你好。</title>
          </block>
          </xml>
      courseC_PlayLab_events1_2018_authored_hint:
        courseC_PlayLab_events1_a: |-
          将此块附加到 "当运行时" 模块：
          
          <xml>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">0</title>
          <title name="VALUE">你好。</title>
          </block>
          </xml>
      courseC_PlayLab_events2_authored_hint:
        courseC_PlayLab_events2_a: |-
          将其中的两个块附加到`当运行时`块：
          
          <xml>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">0</title>
          <title name="VALUE">你好。</title>
          </block>
          </xml>
        courseC_PlayLab_events2_b: 使用下拉菜单上的第二个`演员 __ 说`模块改变由哪个演员说话。
      courseC_PlayLab_events2_2018_authored_hint:
        courseC_PlayLab_events2_a: |-
          将其中的两个块附加到`当运行时`块：
          
          <xml>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">0</title>
          <title name="VALUE">你好。</title>
          </block>
          </xml>
        courseC_PlayLab_events2_b: 使用下拉菜单上的第二个`演员 __ 说`模块改变由哪个演员说话。
      courseC_PlayLab_events3_authored_hint:
        courseC_PlayLab_events3_a: 您只需将乔治向右移动大约25像素即可通过这个关卡。
        courseC_PlayLab_events3_b: 工具箱中是否有一个模块看起来像是可以移动一个演员？
        courseC_PlayLab_events3_c: |-
          将此模块附加到`当运行时`模块:
          
          <xml>
          <block type="studio_moveDistance">
          <title name="SPRITE">0</title>
          <title name="DIR">2</title>
          <title name="DISTANCE">25</title>
          </block>
          </xml>
      courseC_PlayLab_events3_2018_authored_hint:
        courseC_PlayLab_events3_a: 您只需将乔治向右移动大约25像素即可通过这个关卡。
        courseC_PlayLab_events3_b: 工具箱中是否有一个模块看起来像是可以移动一个演员？
        courseC_PlayLab_events3_c: |-
          将此模块附加到`当运行时`模块:
          
          <xml>
          <block type="studio_moveDistance">
          <title name="SPRITE">0</title>
          <title name="DIR">2</title>
          <title name="DISTANCE">25</title>
          </block>
          </xml>
      courseC_PlayLab_events4_authored_hint:
        courseC_PlayLab_events4_b: 当点击"运行"按钮时，乔治需要向右移动** 100 **像素来够到奥丽芙猫。
        courseC_PlayLab_events4_a: 你需要附加一个`演员 __ 说`模块到`当演员接触 `事件来通过这个关卡。
      courseC_PlayLab_events4_2018_authored_hint:
        courseC_PlayLab_events4_b: 当点击"运行"按钮时，乔治需要向右移动** 100 **像素来够到奥丽芙猫。
        courseC_PlayLab_events4_a: 你需要附加一个`演员 __ 说`模块到`当演员接触 `事件来通过这个关卡。
      courseC_PlayLab_events5_authored_hint:
        courseC_PlayLab_events5_a: 你需要点击 `演员说` 模块中的下拉菜单来查找文本 "什么是新的？"
        courseC_PlayLab_events5_b: 当您运行程序时, 点击 "奥克塔维亚" 检查它是否有效!
      courseC_PlayLab_events5_2018_authored_hint:
        courseC_PlayLab_events5_a: 你需要点击 `演员说` 模块中的下拉菜单来查找文本 "什么是新的？"
        courseC_PlayLab_events5_b: 当您运行程序时, 点击 "奥克塔维亚" 检查它是否有效!
      courseC_PlayLab_events6_authored_hint:
        courseC_PlayLab_events6_a: 每个绿色`当方向键按下`模块应该在它下面赋予一个行动。
        courseC_PlayLab_events6_b: 使用`移动演员1`模块中的下拉菜单来更改企鹅移动的方向。
        courseC_PlayLab_events6_c: 完成后, 您应该可以使用计算机上的方向键来移动企鹅!
      courseC_PlayLab_events6_2018_authored_hint:
        courseC_PlayLab_events6_a: 每个绿色`当方向键按下`模块应该在它下面赋予一个行动。
        courseC_PlayLab_events6_b: 使用`移动演员1`模块中的下拉菜单来更改企鹅移动的方向。
        courseC_PlayLab_events6_c: 完成后, 您应该可以使用计算机上的方向键来移动企鹅!
      courseC_PlayLab_events7_authored_hint:
        courseC_PlayLab_events7_a: '在`一直重复`循环内使用`将演员2向上移动400像素`模块和`将演员2向下移动400像素`模块来通过这个关卡。 '
        courseC_PlayLab_events7_b: '`一直重复`循环不需要连接到任何其他事件（情景）模块; 它会自己运行。'
      courseC_PlayLab_events7_2018_authored_hint:
        courseC_PlayLab_events7_a: '在`一直重复`循环内使用`将演员2向上移动400像素`模块和`将演员2向下移动400像素`模块来通过这个关卡。 '
        courseC_PlayLab_events7_b: '`一直重复`循环不需要连接到任何其他事件（情景）模块; 它会自己运行。'
      courseC_PlayLab_events8_authored_hint:
        courseC_PlayLab_events8_a: 您需要将模块连接到`当演员碰到时`模块来使其发生。
        courseC_PlayLab_events8_b: 工具箱中的`演员说`和`播放声音`模块应该可以帮上忙！
      courseC_PlayLab_events8_2018_authored_hint:
        courseC_PlayLab_events8_a: 您需要将模块连接到`当演员碰到时`模块来使其发生。
        courseC_PlayLab_events8_b: 工具箱中的`演员说`和`播放声音`模块应该可以帮上忙！
      courseC_PlayLab_events9_authored_hint:
        courseC_PlayLab_events9_a: '`得分`模块将帮助你通过这个关卡。'
        courseC_PlayLab_events9_b: 确保你的新`当演员触摸`写着 演员 *** 1 ** 和演员 ** 3 **。
        courseC_PlayLab_events9_c: 您可以在工作区中同时拥有多个`当演员碰到`事件, 所以您不必删除第一个!
      courseC_PlayLab_events9_2018_authored_hint:
        courseC_PlayLab_events9_a: '`得分`模块将帮助你通过这个关卡。'
        courseC_PlayLab_events9_b: 确保你的新`当演员触摸`写着 演员 *** 1 ** 和演员 ** 3 **。
        courseC_PlayLab_events9_c: 您可以在工作区中同时拥有多个`当演员碰到`事件, 所以您不必删除第一个!
      courseC_PlayLab_eventsA_authored_hint:
        courseC_PlayLab_eventsA_a: 使用`设置背景`模块和`设置演员为____ 速`模块来通过这个关卡。
        courseC_PlayLab_eventsA_b: 您需要将`当运行时`事件模块具体拖到工作区中以解决此关卡。
      courseC_PlayLab_eventsA_2018_authored_hint:
        courseC_PlayLab_eventsA_a: 使用`设置背景`模块和`设置演员为____ 速`模块来通过这个关卡。
        courseC_PlayLab_eventsA_b: 您需要将`当运行时`事件模块具体拖到工作区中以解决此关卡。
      courseC_PlayLab_eventsFP_authored_hint:
        idea1: |-
          * 需要一个主意？*
          
          ** 谁在哪里？ ** 使演员的随机图像出现, 因此没有人知道下一个显示的是谁。
          
          ![](https://images.code.org/a56e03479801995d93ad5a4e4384a79e-image-1475340154498.gif)
        idea2: |-
          * 需要一个主意？* 
          
          ** 去冒险 **- 改变背景, 然后让人物谈论他们现在在哪里。 
          
          ![](https://images.code.org/010c4d919f841d6049caf9211ab65ccc-image-1475340583052.gif)
        idea3: |-
          *需要一个想法？*
          
          **弹球游戏**- 使用箭头键让一个人物移动（使用`当上方向键按下时`，`当下方向键按下时`模块），然后当与屏幕上的其他人物相撞的时候播放随机声音。
      courseC_PlayLab_eventsFP_2018_authored_hint:
        idea1: |-
          * 需要一个主意？*
          
          ** 谁在哪里？ ** 使演员的随机图像出现, 因此没有人知道下一个显示的是谁。
          
          ![](https://images.code.org/a56e03479801995d93ad5a4e4384a79e-image-1475340154498.gif)
        idea2: |-
          * 需要一个主意？* 
          
          ** 去冒险 **- 改变背景, 然后让人物谈论他们现在在哪里。 
          
          ![](https://images.code.org/010c4d919f841d6049caf9211ab65ccc-image-1475340583052.gif)
        idea3: |-
          *需要一个想法？*
          
          **弹球游戏**- 使用箭头键让一个人物移动（使用`当上方向键按下时`，`当下方向键按下时`模块），然后当与屏幕上的其他人物相撞的时候播放随机声音。
      courseC_PlayLab_events_challenge1_authored_hint:
        courseC_PlayLab_events_challenge_a: |
          您可以使用此模块将演员移动到游戏空间中的不同位置。
          <xml> <block type="studio_setSpritePosition">
          <title name="SPRITE">0</title>
          <title name="VALUE">12</title>
          </block></xml>
        courseC_PlayLab_events_challenge_b: 当触及其他演员时，尝试使用`将演员1设置为左中间位置`。这将重置游戏, 让玩家可以继续尝试!
        courseC_PlayLab_events_challenge_c: |-
          您可能还想尝试改变不同的演员的速度, 使游戏更容易或更具挑战性!
          <xml> <block type="studio_setSpriteSpeed">
          <title name="SPRITE">0</title>
          <title name="VALUE">Studio.SpriteSpeed.FAST</title>
          </block></xml>
      courseC_PlayLab_events_challenge1_2018_authored_hint:
        courseC_PlayLab_events_challenge_a: |
          您可以使用此模块将演员移动到游戏空间中的不同位置。
          <xml> <block type="studio_setSpritePosition">
          <title name="SPRITE">0</title>
          <title name="VALUE">12</title>
          </block></xml>
        courseC_PlayLab_events_challenge_b: 当触及其他演员时，尝试使用`将演员1设置为左中间位置`。这将重置游戏, 让玩家可以继续尝试!
        courseC_PlayLab_events_challenge_c: |-
          您可能还想尝试改变不同的演员的速度, 使游戏更容易或更具挑战性!
          <xml> <block type="studio_setSpriteSpeed">
          <title name="SPRITE">0</title>
          <title name="VALUE">Studio.SpriteSpeed.FAST</title>
          </block></xml>
      courseC_PlayLab_events_challenge1_xy_blocks_authored_hint:
        courseC_PlayLab_events_challenge_a: 此块上的两个值允许您将一个演员移动到游戏区域中的任何像素。您可以从0-400 中选择任意数字。
        courseC_PlayLab_events_challenge_b: |-
          你可以决定使用哪种数字, 通过思考你想移动的左上角有多远。第一个数字是从左边数的像素数。第二个数字是从顶部数的像素数。
          <xml><block type="studio_setSpriteXY" inline="true">
          <value name="SPRITE">
          <block type="math_number" movable="false">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="XPOS">
          <block type="math_number" movable="false">
          <title name="NUM">37</title>
          </block>
          </value>
          <value name="YPOS">
          <block type="math_number" movable="false">
          <title name="NUM">187</title>
          </block>
          </value>
          </block></xml>
          ![](https://images.code.org/b1559bf476ceb59f880c43271c5e10b2-image-1494111787192.59.49 PM.png)
      courseC_artist_loop1_authored_hint:
        courseC_artist_loop1_a: 您不需要对循环进行任何更改, 只需在上面放置一个模块。
        courseC_artist_loop1_b: |2
          这是您需要设置图案的模块: 
          
          <xml>
          <block type="draw_line_style_pattern">
          <title name="VALUE">DEFAULT</title>
          </block>
          </xml>
          
           选择您喜欢的任何图案!
      courseC_artist_loop1_2018_authored_hint:
        courseC_artist_loop1_a: 您不需要对循环进行任何更改, 只需在上面放置一个模块。
        courseC_artist_loop1_b: |2
          这是您需要设置图案的模块: 
          
          <xml>
          <block type="draw_line_style_pattern">
          <title name="VALUE">DEFAULT</title>
          </block>
          </xml>
          
           选择您喜欢的任何图案!
      courseC_artist_loops1a_authored_hint:
        courseC_artist_loops1a_a: |-
          这是您将需要的第一个模块：
          
          <xml>
          <block type="jump_to_xy">
          <title name="XPOS">200</title>
          <title name="YPOS">200</title>
          </block>
          </xml>
        courseC_artist_loops1a_b: |-
          使用此模块来绘制贴纸！
          
          <xml>
          <block type="sticker">
          <title name="VALUE">Bird</title>
          </block>
          </xml>
      courseC_artist_loops1a_2018_authored_hint:
        courseC_artist_loops1a_a: |-
          这是您将需要的第一个模块：
          
          <xml>
          <block type="jump_to_xy">
          <title name="XPOS">200</title>
          <title name="YPOS">200</title>
          </block>
          </xml>
        courseC_artist_loops1a_b: |-
          使用此模块来绘制贴纸！
          
          <xml>
          <block type="sticker">
          <title name="VALUE">Bird</title>
          </block>
          </xml>
      courseC_artist_loops2a_authored_hint:
        courseC_artist_loops2a_a: 在你的循环中, 你需要跳到200以上，再向下200像素, 然后画鸟的贴纸, 然后转30度。
        courseC_artist_loops2a_b: 单击`重复`循环顶部的数字来更改重复次数。
      courseC_artist_loops2a_2018_authored_hint:
        courseC_artist_loops2a_a: 在你的循环中, 你需要跳到200以上，再向下200像素, 然后画鸟的贴纸, 然后转30度。
        courseC_artist_loops2a_b: 单击`重复`循环顶部的数字来更改重复次数。
      courseC_artist_loops3a_authored_hint:
        courseC_artist_loops3a_a: 你要在循环中的鸟贴纸之后只添加一个模块 。
        courseC_artist_loops3a_b: 使用`画贴纸`模块上的下拉菜单来查找蝙蝠贴纸。
      courseC_artist_loops3a_2018_authored_hint:
        courseC_artist_loops3a_a: 你要在循环中的鸟贴纸之后只添加一个模块 。
        courseC_artist_loops3a_b: 使用`画贴纸`模块上的下拉菜单来查找蝙蝠贴纸。
      courseC_artist_loops4a_authored_hint:
        courseC_artist_loops4a_a: |-
          使用此模块向前跳转：
          
          <xml>
          <block type="jump_by_constant">
          <title name="DIR">jumpForward</title>
          <title name="VALUE">100</title>
          </block>
          </xml>
          
          不要忘记更改跳多远！
      courseC_artist_loops4a_2018_authored_hint:
        courseC_artist_loops4a_a: |-
          使用此模块向前跳转：
          
          <xml>
          <block type="jump_by_constant">
          <title name="DIR">jumpForward</title>
          <title name="VALUE">100</title>
          </block>
          </xml>
          
          不要忘记更改跳多远！
      courseC_artist_loops5_authored_hint:
        courseC_artist_loops5_a: |-
          尝试使用`跳到`模块使您的艺术家回到中心：
          
          <xml>
          <block type="jump_to_xy">
          <title name="XPOS">100</title>
          <title name="YPOS">100</title>
          </block>
          </xml>
      courseC_artist_loops5a_authored_hint:
        courseC_artist_loops5a_a: 使用`画贴纸`块上的下拉菜单来更改它们的图像。
      courseC_artist_loops5a_2018_authored_hint:
        courseC_artist_loops5a_a: 使用`画贴纸`块上的下拉菜单来更改它们的图像。
      courseC_artist_loops5b_authored_hint:
        courseC_artist_loops5b_a: |-
          使用此模块设置线条的图案：
          
          <xml>
          <block type="draw_line_style_pattern">
          <title name="VALUE">DEFAULT</title>
          </block>
          </xml>
        courseC_artist_loops5b_b: 要制作和上面类似设计, 向后移动与向前移动必须是相同的数量。
      courseC_artist_loops5b_2018_authored_hint:
        courseC_artist_loops5b_a: |-
          使用此模块设置线条的图案：
          
          <xml>
          <block type="draw_line_style_pattern">
          <title name="VALUE">DEFAULT</title>
          </block>
          </xml>
        courseC_artist_loops5b_b: 要制作和上面类似设计, 向后移动与向前移动必须是相同的数量。
      courseC_artist_loops6_authored_hint:
        courseC_artist_loops6_a: |
          尝试三角形花：
          <img src="https://images.code.org/4248a974a7631c4240effba06fdee731-image-1495821015097.49.18.png" width="150px" />
          或绿色小昆虫：
          <img src="https://images.code.org/b9454d6f1159e19c58d9f5b5b37fd156-image-1495821067980.52.43.png" width="150px" />
      courseC_artist_loops6a_authored_hint:
        courseC_artist_loops6a_a: 要制作和上面类似的设计, 在每个贴纸之间向前跳转少于75像素。
      courseC_artist_loops6a_2018_authored_hint:
        courseC_artist_loops6a_a: 要制作和上面类似的设计, 在每个贴纸之间向前跳转少于75像素。
      courseC_artist_loops7a_authored_hint:
        courseC_artist_loops7a_a: |-
          一个圆有360度。把你的转弯角度乘以你重复次数。它等于360吗？检查建议的转角看这是否可行！
      courseC_artist_loops7a_2018_authored_hint:
        courseC_artist_loops7a_a: |-
          一个圆有360度。把你的转弯角度乘以你重复次数。它等于360吗？检查建议的转角看这是否可行！
      courseC_artist_loopsPre1a_authored_hint:
        courseC_artist_loopsPre1a_a: 记住把`转向`模块放到循环内。
        courseC_artist_loopsPre1a_b: '你的`重复`循环应该有3个模块在里面:`跳到200超过200下`，`向前移动50像素`和`向右转60度`。'
      courseC_artist_loopsPre1a_2018_authored_hint:
        courseC_artist_loopsPre1a_a: 记住把`转向`模块放到循环内。
        courseC_artist_loopsPre1a_b: '你的`重复`循环应该有3个模块在里面:`跳到200超过200下`，`向前移动50像素`和`向右转60度`。'
      courseC_artist_loopsPrePre1a_authored_hint:
        courseC_artist_loopsPrePre1a_a: |-
          你需要的第一个模块是：
          
          ![](https://images.code.org/60e3354a2e7dd37b64833eac1e8694be-image-1499710228373.08.14 AM.png)
        courseC_artist_loopsPrePre1a_b: |-
          要向前移动50像素, 请使用以下模块：
          
          ![](https://images.code.org/411fca4606a09641e6eedf5069ac4efa-image-1499710237929.08.27 AM.png)
      courseC_artist_loopsPrePre1a_2018_authored_hint:
        courseC_artist_loopsPrePre1a_a: |-
          你需要的第一个模块是：
          
          ![](https://images.code.org/60e3354a2e7dd37b64833eac1e8694be-image-1499710228373.08.14 AM.png)
        courseC_artist_loopsPrePre1a_b: |-
          要向前移动50像素, 请使用以下模块：
          
          ![](https://images.code.org/411fca4606a09641e6eedf5069ac4efa-image-1499710237929.08.27 AM.png)
      courseC_artist_prog1_authored_hint: [ ]
      courseC_artist_prog1_2018_authored_hint: [ ]
      courseC_artist_prog2_authored_hint:
        courseC_artist_prog2_a: '如果使用模块让我 ''前进 100 像素''，我会自动画一条线。'
        courseC_artist_prog2_b: 怎么才能转弯呢？使用 '向右转 90 度' 模块。
      courseC_artist_prog2_2018_authored_hint:
        courseC_artist_prog2_a: '如果使用模块让我 ''前进 100 像素''，我会自动画一条线。'
        courseC_artist_prog2_b: 怎么才能转弯呢？使用 '向右转 90 度' 模块。
      courseC_artist_prog3_authored_hint:
        courseC_artist_prog3_a: |-
          要创建这个窗户，只需绘制一个100 像素边长的正方形。
          - 向前移动
          - 转弯
          - 向前移动
          - 转弯
          - 向前移动
          - 转弯
          - 向前移动
        courseC_artist_prog3_b: 要写出更短的代码？尝试在这个关卡中使用一个循环。
      courseC_artist_prog3_2018_authored_hint:
        courseC_artist_prog3_a: |-
          要创建这个窗户，只需绘制一个100 像素边长的正方形。
          - 向前移动
          - 转弯
          - 向前移动
          - 转弯
          - 向前移动
          - 转弯
          - 向前移动
        courseC_artist_prog3_b: 要写出更短的代码？尝试在这个关卡中使用一个循环。
      courseC_artist_prog4_authored_hint:
        courseC_artist_prog4_a: 要完成这个火箭，只需要在最上面画个三角形！
        courseC_artist_prog4_b: 您可以使用`转向`模块的下拉菜单来查看所需的角度!
        courseC_artist_prog4_c: |-
          要绘制三角形，你需要：
          - 向前移动
          - 向左120度
          - 向前移动
          - 左转120度
          - 向前移动
      courseC_artist_prog4_2018_authored_hint:
        courseC_artist_prog4_a: 要完成这个火箭，只需要在最上面画个三角形！
        courseC_artist_prog4_b: 您可以使用`转向`模块的下拉菜单来查看所需的角度!
        courseC_artist_prog4_c: |-
          要绘制三角形，你需要：
          - 向前移动
          - 向左120度
          - 向前移动
          - 左转120度
          - 向前移动
      courseC_artist_prog5_authored_hint:
        courseC_artist_prog5_a: 放慢滑块速度直到你能逐行运行代码，来查看哪里出错了。
        courseC_artist_prog5_b: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
        courseC_artist_prog5_c: 您可以使用`转向`模块的下拉菜单来查看所需的角度!
        courseC_artist_prog5_d: 每个转弯应该是向右转90度。
      courseC_artist_prog5_2018_authored_hint:
        courseC_artist_prog5_a: 放慢滑块速度直到你能逐行运行代码，来查看哪里出错了。
        courseC_artist_prog5_b: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
        courseC_artist_prog5_c: 您可以使用`转向`模块的下拉菜单来查看所需的角度!
        courseC_artist_prog5_d: 每个转弯应该是向右转90度。
      courseC_artist_prog6_authored_hint:
        courseC_artist_prog6_a: 艺术家已经面朝着正确的方向来画第一条线。
        courseC_artist_prog6_b: 这颗钻石真的只是一个立起来的正方形。
        courseC_artist_prog6_c: 因为这个钻石也是一个正方形, 请确保在拐角处旋转90度。
      courseC_artist_prog6_2018_authored_hint:
        courseC_artist_prog6_a: 艺术家已经面朝着正确的方向来画第一条线。
        courseC_artist_prog6_b: 这颗钻石真的只是一个立起来的正方形。
        courseC_artist_prog6_c: 因为这个钻石也是一个正方形, 请确保在拐角处旋转90度。
      courseC_artist_prog6_predict1_authored_hint: [ ]
      courseC_artist_prog6_predict1_2018_authored_hint: [ ]
      courseC_artist_prog7_authored_hint:
        courseC_artist_prog7_a: 每个角度都是45度或90度。
        courseC_artist_prog7_b: "它的第一步工作吗？ \n那第二步呢？\n哪里出问题了？"
        courseC_artist_prog7_c: 您可以使用转向模块的下拉菜单来查看所需的角度！
        courseC_artist_prog7_d: |-
          你需要：
          
          - 向前移动
          - 向右转45度
          - 向前移动
          - 向右转90度
          - 前进
          - 向右转45度
          
          重复此模式两次!
        courseC_artist_prog7_e: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseC_artist_prog7_2018_authored_hint:
        courseC_artist_prog7_a: 每个角度都是45度或90度。
        courseC_artist_prog7_b: "它的第一步工作吗？ \n那第二步呢？\n哪里出问题了？"
        courseC_artist_prog7_c: 您可以使用转向模块的下拉菜单来查看所需的角度！
        courseC_artist_prog7_d: |-
          你需要：
          
          - 向前移动
          - 向右转45度
          - 向前移动
          - 向右转90度
          - 前进
          - 向右转45度
          
          重复此模式两次!
        courseC_artist_prog7_e: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseC_artist_prog8_authored_hint: [ ]
      courseC_artist_prog8_2018_authored_hint: [ ]
      courseC_artist_prog_challenge1-doghouse_authored_hint:
        courseC_artist_prog7_a: 用60度角做屋顶。
      courseC_artist_prog_challenge1_authored_hint:
        courseC_artist_prog_challenge1_a: 你可以把它画成一个长方形, 其中一边在中间或在两个不同的正方形上!
      courseC_artist_prog_challenge1_2018_authored_hint:
        courseC_artist_prog_challenge1_a: 你可以把它画成一个长方形, 其中一边在中间或在两个不同的正方形上!
      courseC_artist_prog_challenge2_authored_hint:
        courseC_artist_prog_challenge2_a: "您可以将命令放在`重复`模块中, 将它们反复循环。试试看！\n<xml>\n\n<block type=\"controls_repeat\">\n<title name=\"TIMES\">6</title>\n<statement name=\"DO\">\n<block type=\"draw_move_by_constant_dropdown\">\n<title name=\"DIR\">moveForward</title>\n<title name=\"VALUE\" config=\"25,50,100,150,200,300\">25</title>\n<next>\n<block type=\"jump_by_constant_dropdown\">\n<title name=\"DIR\">jumpForward</title>\n<title name=\"VALUE\" config=\"25,50,100,150,200,300\">25</title>\n</block>\n</next>\n</block>\n</statement></block></xml>"
      courseC_artist_prog_challenge2a_authored_hint:
        courseC_artist_prog_challenge2_a: 绘制第一行后，在绘制第二行前向左转。
        courseC_artist_prog_challenge2_b: 绘制第二行后, 在绘制第三行之前向右转。
      courseC_artist_prog_challenge2a_2018_authored_hint:
        courseC_artist_prog_challenge2_a: 绘制第一行后，在绘制第二行前向左转。
        courseC_artist_prog_challenge2_b: 绘制第二行后, 在绘制第三行之前向右转。
      courseC_collector_loops_challenge2_authored_hint:
        courseC_maze_loops_challenge2_b: 使用循环，这样就不会用光`收集`模块！
      courseC_collector_loops_challenge2_2018_authored_hint:
        courseC_maze_loops_challenge2_b: 使用循环，这样就不会用光`收集`模块！
      courseC_collector_prog1_authored_hint:
        courseC_collector_prog1_a: 当您站在具有宝藏的地方时, 请使用 <xml><block type="collector_collect"/></xml>模块来拾取它。
        courseC_collector_prog1_b: 最简单的解决方法是向前移动一次, 然后收集宝藏。
      courseC_collector_prog1_2018_authored_hint:
        courseC_collector_prog1_a: 当您站在具有宝藏的地方时, 请使用 <xml><block type="collector_collect"/></xml>模块来拾取它。
        courseC_collector_prog1_b: 最简单的解决方法是向前移动一次, 然后收集宝藏。
      courseC_collector_prog2_authored_hint:
        courseC_collector_prog2_a: 你可以使用4 个<xml><block type="maze_move"><title name="DIR">向前移动</title></block></xml> 模块或者使用 <xml><block type="controls_repeat_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>模块来缩短程序。
        courseC_collector_prog2_b: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseC_collector_prog2_2018_authored_hint:
        courseC_collector_prog2_a: 你可以使用4 个<xml><block type="maze_move"><title name="DIR">向前移动</title></block></xml> 模块或者使用 <xml><block type="controls_repeat_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>模块来缩短程序。
        courseC_collector_prog2_b: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseC_collector_prog3_authored_hint:
        courseC_collector_prog3_a: 该程序将只运行连接到 <xml><block type="when_run"/></xml>的模块。
        courseC_collector_prog3_b: 尝试使用 "步进" 按钮逐行运行您的代码。你知道代码哪里出错了吗？
        courseC_collector_prog3_c: 如果你很难弄清楚这个关卡, 试着在一张纸上写下这些动作。
      courseC_collector_prog3_2018_authored_hint:
        courseC_collector_prog3_a: 该程序将只运行连接到 <xml><block type="when_run"/></xml>的模块。
        courseC_collector_prog3_b: 尝试使用 "步进" 按钮逐行运行您的代码。你知道代码哪里出错了吗？
        courseC_collector_prog3_c: 如果你很难弄清楚这个关卡, 试着在一张纸上写下这些动作。
      courseC_collector_prog4_authored_hint:
        courseC_collector_prog4_a: 如果你被难住了, 试着在一张纸上写下步骤。
        courseC_collector_prog4_b: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
        courseC_collector_prog4_c: 请为路径尝试此选项。
      courseC_collector_prog4_2018_authored_hint:
        courseC_collector_prog4_a: 如果你被难住了, 试着在一张纸上写下步骤。
        courseC_collector_prog4_b: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
        courseC_collector_prog4_c: 请为路径尝试此选项。
      courseC_collector_prog5_authored_hint:
        courseC_collector_prog5_a: "\"它在第一步工作吗？\n它在第二步工作吗？ \n哪里出错了？”"
        courseC_collector_prog5_b: 如果修复了一个缺陷但程序仍然无法正常工作，请使用上面的步骤查找更多的缺陷。
        courseC_collector_prog5_c: 如果你被难住了, 试着在一张纸上写下步骤。
        courseC_collector_prog5_d: 沿着小路收集宝藏。
      courseC_collector_prog5_2018_authored_hint:
        courseC_collector_prog5_a: "\"它在第一步工作吗？\n它在第二步工作吗？ \n哪里出错了？”"
        courseC_collector_prog5_b: 如果修复了一个缺陷但程序仍然无法正常工作，请使用上面的步骤查找更多的缺陷。
        courseC_collector_prog5_c: 如果你被难住了, 试着在一张纸上写下步骤。
        courseC_collector_prog5_d: 沿着小路收集宝藏。
      courseC_collector_prog6_authored_hint:
        courseC_collector_prog6_a: "能找出哪里出错吗？请尝试使用 \"步进\" 按钮逐行运行代码来查找错误。"
        courseC_collector_prog6_b: 被难住了? 尝试这条路径来收集宝藏。
      courseC_collector_prog6_2018_authored_hint:
        courseC_collector_prog6_a: "能找出哪里出错吗？请尝试使用 \"步进\" 按钮逐行运行代码来查找错误。"
        courseC_collector_prog6_b: 被难住了? 尝试这条路径来收集宝藏。
      courseC_collector_prog7_authored_hint:
        courseC_collector_prog7_a: '工作区中已经有很多很好的代码。你不需要删除任何代码来通过这个关卡。  '
        courseC_collector_prog7_b: 没看出让冒险家朝着正确的方向移动的模块吗？请从工具箱里拉出一个。
        courseC_collector_prog7_c: 没看到收集所有宝藏的路线吗？尝试这条路！
      courseC_collector_prog7_2018_authored_hint:
        courseC_collector_prog7_a: '工作区中已经有很多很好的代码。你不需要删除任何代码来通过这个关卡。  '
        courseC_collector_prog7_b: 没看出让冒险家朝着正确的方向移动的模块吗？请从工具箱里拉出一个。
        courseC_collector_prog7_c: 没看到收集所有宝藏的路线吗？尝试这条路！
      courseC_collector_prog8_authored_hint: [ ]
      courseC_collector_prog8_2018_authored_hint: [ ]
      courseC_collector_prog9_authored_hint: [ ]
      courseC_collector_prog9_2018_authored_hint: [ ]
      courseC_collector_progA_authored_hint:
        courseC_collector_progA_a: 尝试使用 "步进" 按钮仔细查看每行代码。
      courseC_collector_prog_challenge1_authored_hint:
        courseC_collector_prog_challenge1_a: 你可以更经常使用`收集`命令来收集额外的宝藏。
      courseC_collector_prog_challenge1_2018_authored_hint:
        courseC_collector_prog_challenge1_a: 你可以更经常使用`收集`命令来收集额外的宝藏。
      courseC_collector_prog_challenge2_authored_hint:
        courseC_collector_prog_challenge1_a: 你可以使用多个`收集`命令来收集额外的宝藏。
        courseC_collector_prog_challenge1_b: 迷路了？ 请尝试此路径来通过这个关卡!
      courseC_collector_prog_challenge2_2018_authored_hint:
        courseC_collector_prog_challenge1_a: 你可以使用多个`收集`命令来收集额外的宝藏。
        courseC_collector_prog_challenge1_b: 迷路了？ 请尝试此路径来通过这个关卡!
      courseC_external_events_authored_hint: [ ]
      courseC_flappy_events1_authored_hint:
        courseC_flappy_events1_a: "![](https://images.code.org/5f1d0edf6ebb44d98ffdce623cfe0ad4-image-1501192487040.gif)"
      courseC_flappy_events1_2018_authored_hint:
        courseC_flappy_events1_a: "![](https://images.code.org/5f1d0edf6ebb44d98ffdce623cfe0ad4-image-1501192487040.gif)"
      courseC_flappy_events2_authored_hint:
        courseC_flappy_events2_a: '您需要添加的模块称为`设置速度`。 '
        courseC_flappy_events2_b: 将`设置速度`模块连接到`当运行时`模块来解决此关卡。
      courseC_flappy_events2_2018_authored_hint:
        courseC_flappy_events2_a: '您需要添加的模块称为`设置速度`。 '
        courseC_flappy_events2_b: 将`设置速度`模块连接到`当运行时`模块来解决此关卡。
      courseC_flappy_events3_authored_hint:
        courseC_flappy_events3_a: 如果运行出问题, 请确保您的块已连接到工作区中的正确事件上。
      courseC_flappy_events3_2018_authored_hint:
        courseC_flappy_events3_a: 如果运行出问题, 请确保您的块已连接到工作区中的正确事件上。
      courseC_flappy_events4_authored_hint:
        courseC_flappy_events4_a: 将`结束游戏`模块连接到`当遇到障碍`来解决这个关卡。
      courseC_flappy_events4_2018_authored_hint:
        courseC_flappy_events4_a: 将`结束游戏`模块连接到`当遇到障碍`来解决这个关卡。
      courseC_flappy_events5_authored_hint:
        courseC_flappy_events5_a: 您将需要使用`得一分`模块来通过这个关卡。
      courseC_flappy_events5_2018_authored_hint:
        courseC_flappy_events5_a: 您将需要使用`得一分`模块来通过这个关卡。
      courseC_flappy_events6_authored_hint:
        courseC_flappy_events6_a: 请尝试将`拍打____次时`模块连接到`当点击时`事件。
      courseC_flappy_events6_2018_authored_hint:
        courseC_flappy_events6_a: 请尝试将`拍打____次时`模块连接到`当点击时`事件。
      courseC_flappy_events7_authored_hint:
        courseC_flappy_events7_a: '您可以使用`设置场景`模块来更改背景。 '
      courseC_flappy_events7_2018_authored_hint:
        courseC_flappy_events7_a: '您可以使用`设置场景`模块来更改背景。 '
      courseC_flappy_events8_authored_hint:
        courseC_flappy_events8_a: 尝把第二个`设置场景`模块连接到`当通过障碍`事件来通过这个关卡。
      courseC_flappy_events8_2018_authored_hint:
        courseC_flappy_events8_a: 尝把第二个`设置场景`模块连接到`当通过障碍`事件来通过这个关卡。
      courseC_flappy_events9_authored_hint:
        courseC_flappy_events9_a: 将`设置分数为0`模块连接到`当遇到障碍`事件通过此关卡。
      courseC_flappy_events9_2018_authored_hint:
        courseC_flappy_events9_a: 将`设置分数为0`模块连接到`当遇到障碍`事件通过此关卡。
      courseC_flappy_events_template_authored_hint: [ ]
      courseC_flappy_events_template_2018_authored_hint: [ ]
      courseC_harvester_loops1_authored_hint:
        courseC_harvester_loops1_a: 一旦你移到一个南瓜, 请使用 <xml><block type="harvester_pumpkin"/></xml>来收集它。
        courseC_harvester_loops1_b: 您可以使用 <xml><block type="harvester_pumpkin"/></xml>模块循环从广场中选取多个南瓜。
      courseC_harvester_loops10_authored_hint: [ ]
      courseC_harvester_loops10_2018_authored_hint: [ ]
      courseC_harvester_loops11_authored_hint: [ ]
      courseC_harvester_loops11_2018_authored_hint: [ ]
      courseC_harvester_loops1_2018_authored_hint:
        courseC_harvester_loops1_a: 一旦你移到一个南瓜, 请使用 <xml><block type="harvester_pumpkin"/></xml>来收集它。
        courseC_harvester_loops1_b: 您可以使用 <xml><block type="harvester_pumpkin"/></xml>模块循环从广场中选取多个南瓜。
      courseC_harvester_loops2_authored_hint:
        courseC_harvester_loops2_a: 如果你被难住了，试着在纸上写下步骤, 寻找重复的规律。
        courseC_harvester_loops2_b: 你需要一个`重复`循环连着另一个。
        courseC_harvester_loops2_c: 一个循环将重复`向前移动`命令, 另一个将重复`捡起南瓜`命令。
      courseC_harvester_loops2_2018_authored_hint:
        courseC_harvester_loops2_a: 如果你被难住了，试着在纸上写下步骤, 寻找重复的规律。
        courseC_harvester_loops2_b: 你需要一个`重复`循环连着另一个。
        courseC_harvester_loops2_c: 一个循环将重复`向前移动`命令, 另一个将重复`捡起南瓜`命令。
      courseC_harvester_loops3_authored_hint:
        courseC_harvester_loops3_a: 不要害怕犯错误！即使你还没有解决这个关卡，尝试添加模块并运行代码, 看看会发生什么。
        courseC_harvester_loops3_b: 对于第一个南瓜, 你可以使用和上个关卡非常类似的代码。在这之后，你需要转到哪条路上？
        courseC_harvester_loops3_c: 如果你想简化代码，实际上可以把一个循环放到另一个里面! 这称为 **嵌套循环**。
      courseC_harvester_loops3_2018_authored_hint:
        courseC_harvester_loops3_a: 不要害怕犯错误！即使你还没有解决这个关卡，尝试添加模块并运行代码, 看看会发生什么。
        courseC_harvester_loops3_b: 对于第一个南瓜, 你可以使用和上个关卡非常类似的代码。在这之后，你需要转到哪条路上？
        courseC_harvester_loops3_c: 如果你想简化代码，实际上可以把一个循环放到另一个里面! 这称为 **嵌套循环**。
      courseC_harvester_loops4_authored_hint:
        courseC_harvester_loops4_a: 使用这个新的`采摘玉米`模块来收集玉米。
        courseC_harvester_loops4_b: 你可以在代码中使用多个重复循环, 一些捡玉米和一些采摘南瓜。
        courseC_harvester_loops4_c: 如果你想简化代码，实际上可以把一个循环放到另一个里面! 这称为 **嵌套循环**。
      courseC_harvester_loops4_2018_authored_hint:
        courseC_harvester_loops4_a: 使用这个新的`采摘玉米`模块来收集玉米。
        courseC_harvester_loops4_b: 你可以在代码中使用多个重复循环, 一些捡玉米和一些采摘南瓜。
        courseC_harvester_loops4_c: 如果你想简化代码，实际上可以把一个循环放到另一个里面! 这称为 **嵌套循环**。
      courseC_harvester_loops5_authored_hint:
        courseC_harvester_loops5_a: 如果被难住了，请尝试画出整个程序，然后查找重复规律。
        courseC_harvester_loops5_b: 这个台阶是不是看起来和其他的关卡类似？移动是相似的，只是记得一路上要收集庄稼。
      courseC_harvester_loops5_2018_authored_hint:
        courseC_harvester_loops5_a: 如果被难住了，请尝试画出整个程序，然后查找重复规律。
        courseC_harvester_loops5_b: 这个台阶是不是看起来和其他的关卡类似？移动是相似的，只是记得一路上要收集庄稼。
      courseC_harvester_loops6_authored_hint:
        courseC_harvester_loops6_a: 请记住，您可以在一个重复循环中放置多个模块。
        courseC_harvester_loops6_b: 别忘了在玉米排的尽头转弯。
      courseC_harvester_loops6_2018_authored_hint:
        courseC_harvester_loops6_a: 请记住，您可以在一个重复循环中放置多个模块。
        courseC_harvester_loops6_b: 别忘了在玉米排的尽头转弯。
      courseC_harvester_loops7_authored_hint:
        courseC_harvester_loops7_a: 你可以用两种方法解决这个关卡, 要么先取玉米要么南瓜。
        courseC_harvester_loops7_b: 您将需要多个`重复`循环来解决这个关卡。
      courseC_harvester_loops7_2018_authored_hint:
        courseC_harvester_loops7_a: 你可以用两种方法解决这个关卡, 要么先取玉米要么南瓜。
        courseC_harvester_loops7_b: 您将需要多个`重复`循环来解决这个关卡。
      courseC_harvester_loops8_authored_hint:
        courseC_harvester_loops8_a: 这个台阶是不是看起来和以前的关卡类似？移动是相似的，只是记得一路上要收集庄稼。
        courseC_harvester_loops8_b: 如果你想简化你的代码，你实际上可以把一个重复循环放到另一个里！这称为 **嵌套循环**。
      courseC_harvester_loops8_2018_authored_hint:
        courseC_harvester_loops8_a: 这个台阶是不是看起来和以前的关卡类似？移动是相似的，只是记得一路上要收集庄稼。
        courseC_harvester_loops8_b: 如果你想简化你的代码，你实际上可以把一个重复循环放到另一个里！这称为 **嵌套循环**。
      courseC_harvester_loops9_authored_hint: [ ]
      courseC_harvester_loops9_2018_authored_hint: [ ]
      courseC_harvester_loops_challenge1_authored_hint:
        courseC_harvester_loops_challenge1_a: 如果不使用循环这太难了。
        courseC_harvester_loops_challenge1_b: 你可以多次重复`前进`和`采摘玉米`，然后在每个角落右转。
        courseC_harvester_loops_challenge1_c: |-
          收集前四个玉米的最佳方法是在一个`重复`模块内再使用一个`重复`模块。你也可以在其余的关卡使用这个模式！
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="harvester_corn"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </statement>
          </block></next></block></xml>
      courseC_harvester_loops_challenge1a_authored_hint:
        courseC_harvester_loops_challenge1_a: 如果不使用循环这太难了。
        courseC_harvester_loops_challenge1_b: 你可以多次重复`前进`和`采摘玉米`，然后在每个角落右转。
        courseC_harvester_loops_challenge1_c: |-
          收集前四个玉米的最佳方法是在一个`重复`模块内再使用一个`重复`模块。你也可以在其余的关卡使用这个模式！
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="harvester_corn"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </statement>
          </block></next></block></xml>
      courseC_harvester_loops_challenge1a_2018_authored_hint:
        courseC_harvester_loops_challenge1_a: 如果不使用循环这太难了。
        courseC_harvester_loops_challenge1_b: 你可以多次重复`前进`和`采摘玉米`，然后在每个角落右转。
        courseC_harvester_loops_challenge1_c: |-
          收集前四个玉米的最佳方法是在一个`重复`模块内再使用一个`重复`模块。你也可以在其余的关卡使用这个模式！
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="harvester_corn"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </statement>
          </block></next></block></xml>
      courseC_harvester_loops_challenge2_authored_hint:
        courseC_harvester_loops_challenge2_a: 解决这个问题的一种方法看起来像是一个锯齿形。另一种方式看起来像一个螺旋！有很多不同的解决这个关卡的方案。请坚持下去!
        courseC_harvester_loops_challenge2_b: 你可以多次重复`前进`和`采摘莴苣`，然后在每个角落右转。
        courseC_harvester_loops_challenge2_c: |
          重复运用这个曲折的模式两次就可以只用20个模块来完成这个关卡！
          
          ![](https://images.code.org/26cfaf6fe4a275e266b51e9ef3711171-image-1493502306380.18.52 PM copy.png)
        courseC_harvester_loops_challenge2_d: |-
          这种螺旋模式只要18个模块的编码!
          
          ![](https://images.code.org/0bfc0a0ed6783fae908368a6e6d12c02-image-1493501358990.18.52 PM.png)
      courseC_harvester_loops_challenge2_2018_authored_hint:
        courseC_harvester_loops_challenge2_a: 解决这个问题的一种方法看起来像是一个锯齿形。另一种方式看起来像一个螺旋！有很多不同的解决这个关卡的方案。请坚持下去!
        courseC_harvester_loops_challenge2_b: 你可以多次重复`前进`和`采摘莴苣`，然后在每个角落右转。
        courseC_harvester_loops_challenge2_c: |
          重复运用这个曲折的模式两次就可以只用20个模块来完成这个关卡！
          
          ![](https://images.code.org/26cfaf6fe4a275e266b51e9ef3711171-image-1493502306380.18.52 PM copy.png)
        courseC_harvester_loops_challenge2_d: |-
          这种螺旋模式只要18个模块的编码!
          
          ![](https://images.code.org/0bfc0a0ed6783fae908368a6e6d12c02-image-1493501358990.18.52 PM.png)
      courseC_harvester_loops_forVid_authored_hint: [ ]
      courseC_maze_debugging1_authored_hint:
        courseC_maze_debugging1_a: |-
          - 在第一步之后一切运行正常吗？
          - 在第二步之后它还工作吗？
          - 哪里出错了？
        courseC_maze_debugging1_b: 只需要添加1个模块来完成这个关卡。
      courseC_maze_debugging1_2018_authored_hint:
        courseC_maze_debugging1_a: |-
          - 在第一步之后一切运行正常吗？
          - 在第二步之后它还工作吗？
          - 哪里出错了？
        courseC_maze_debugging1_b: 只需要添加1个模块来完成这个关卡。
      courseC_maze_debugging2_authored_hint:
        courseC_maze_debugging2_a: 工作区内有许多有价值的代码。请不要把它们全部删除来重新开始!
        courseC_maze_debugging2_b: |-
          - 在第一步之后一切运行正常吗？
          - 在第二步之后它还工作吗？
          - 哪里出错了？
        courseC_maze_debugging2_c: 搞不清楚那里有错？尝试运行代码多次，看看会发生什么。
      courseC_maze_debugging2_2018_authored_hint:
        courseC_maze_debugging2_a: 工作区内有许多有价值的代码。请不要把它们全部删除来重新开始!
        courseC_maze_debugging2_b: |-
          - 在第一步之后一切运行正常吗？
          - 在第二步之后它还工作吗？
          - 哪里出错了？
        courseC_maze_debugging2_c: 搞不清楚那里有错？尝试运行代码多次，看看会发生什么。
      courseC_maze_debugging3_authored_hint:
        courseC_maze_debugging3_a: |-
          如果要从你的代码中删除一个模块，请把所有的模块拖到工作区的其他地方。
          
          把想要删除的模块拖回到工具箱中。
          
          最后，把其他模块归位。
          
          ![](https://images.code.org/bbafa5a100505b2b99a3f43ad3195471-image-1479933232821.gif)
        courseC_maze_debugging3_b: 搞不清楚那里有错？尝试运行代码多次，看看会发生什么。
      courseC_maze_debugging3_2018_authored_hint:
        courseC_maze_debugging3_a: |-
          如果要从你的代码中删除一个模块，请把所有的模块拖到工作区的其他地方。
          
          把想要删除的模块拖回到工具箱中。
          
          最后，把其他模块归位。
          
          ![](https://images.code.org/bbafa5a100505b2b99a3f43ad3195471-image-1479933232821.gif)
        courseC_maze_debugging3_b: 搞不清楚那里有错？尝试运行代码多次，看看会发生什么。
      courseC_maze_debugging4_authored_hint:
        courseC_maze_debugging4_a: 使用 "步进" 按钮一次运行一个指令。这能帮你找到出错的行了吗？
        courseC_maze_debugging4_b: 其中一个转折让斯奎特走错了方向。你能找出是哪一个吗？
      courseC_maze_debugging4_2018_authored_hint:
        courseC_maze_debugging4_a: 使用 "步进" 按钮一次运行一个指令。这能帮你找到出错的行了吗？
        courseC_maze_debugging4_b: 其中一个转折让斯奎特走错了方向。你能找出是哪一个吗？
      courseC_maze_debugging5_authored_hint:
        courseC_maze_debugging5_a: "工作区中已经有很多有用的模块。请不要全部删除!  \n\n使用 \"步进\" 按钮来仔细查看并找出代码出错的地方。"
        courseC_maze_debugging5_b: 试着大声说出斯奎特应该做什么。它是否和工作区的代码一样？哪里出错了？
      courseC_maze_debugging5_2018_authored_hint:
        courseC_maze_debugging5_a: "工作区中已经有很多有用的模块。请不要全部删除!  \n\n使用 \"步进\" 按钮来仔细查看并找出代码出错的地方。"
        courseC_maze_debugging5_b: 试着大声说出斯奎特应该做什么。它是否和工作区的代码一样？哪里出错了？
      courseC_maze_debugging6_authored_hint:
        courseC_maze_debugging6_a: |-
          - 斯奎特应该做什么？
          - 斯奎特做了什么？
          - 那告诉了你什么？
        courseC_maze_debugging6_b: |-
          等你发现并修复了第一个错误, 请再次进行调试过程来找到另一个错误。 重复这个过程, 直到程序可以正常工作!
      courseC_maze_debugging6_2018_authored_hint:
        courseC_maze_debugging6_a: |-
          - 斯奎特应该做什么？
          - 斯奎特做了什么？
          - 那告诉了你什么？
        courseC_maze_debugging6_b: |-
          等你发现并修复了第一个错误, 请再次进行调试过程来找到另一个错误。 重复这个过程, 直到程序可以正常工作!
      courseC_maze_debugging7_authored_hint:
        courseC_maze_debugging7_a: |-
          - 在第一步的时候运行正常吗？
          - 第二步呢？
          - 哪里出错了？
        courseC_maze_debugging7_b: 请不要忘了使用“步进”按钮来逐行运行程序！
        courseC_maze_debugging7_c: |-
          在发现并修复第一个缺陷后，请确保再次使用调试流程直到找到下一个。
          
          重复这个调试过程，直到程序正常工作！
      courseC_maze_debugging7_2018_authored_hint:
        courseC_maze_debugging7_a: |-
          - 在第一步的时候运行正常吗？
          - 第二步呢？
          - 哪里出错了？
        courseC_maze_debugging7_b: 请不要忘了使用“步进”按钮来逐行运行程序！
        courseC_maze_debugging7_c: |-
          在发现并修复第一个缺陷后，请确保再次使用调试流程直到找到下一个。
          
          重复这个调试过程，直到程序正常工作！
      courseC_maze_debugging8_authored_hint:
        courseC_maze_debugging8_a: |-
          - 斯奎特应该做什么？
          - 斯奎特做了什么？
          - 那告诉了你什么？
      courseC_maze_debugging8_predict1_authored_hint: [ ]
      courseC_maze_debugging8_predict1_2018_authored_hint: [ ]
      courseC_maze_debugging9_authored_hint: [ ]
      courseC_maze_debugging9_2018_authored_hint: [ ]
      courseC_maze_debugging_challenge1_authored_hint:
        courseC_maze_debugging_challenge1_a: 向左还是向右？由你决定!
        courseC_maze_debugging_challenge1_b: 斯奎特的路径是一个矩形！他每次都要以同样的方式转动！
        courseC_maze_debugging_challenge1_c: 如果被难住了, 可以随时重新开始, 或删除所有的代码, 找到自己的方法!
      courseC_maze_debugging_challenge1_2018_authored_hint:
        courseC_maze_debugging_challenge1_a: 向左还是向右？由你决定!
        courseC_maze_debugging_challenge1_b: 斯奎特的路径是一个矩形！他每次都要以同样的方式转动！
        courseC_maze_debugging_challenge1_c: 如果被难住了, 可以随时重新开始, 或删除所有的代码, 找到自己的方法!
      courseC_maze_debugging_challenge2_authored_hint:
        courseC_maze_debugging_challenge2_b: 如果被难住了，试着调试代码。看看哪里错了？
        courseC_maze_debugging_challenge2_c: |-
          有两种不同的路径，有一种方法是只前进，并转向四次。如果你找到一个使用循环的方法, 可能会有更多方法！
          
          ![](https://images.code.org/8a4665671cda35fea1f629a5bcc39e26-image-1493502743154.48.05 PM.png)
      courseC_maze_debugging_challenge2_2018_authored_hint:
        courseC_maze_debugging_challenge2_b: 如果被难住了，试着调试代码。看看哪里错了？
        courseC_maze_debugging_challenge2_c: |-
          有两种不同的路径，有一种方法是只前进，并转向四次。如果你找到一个使用循环的方法, 可能会有更多方法！
          
          ![](https://images.code.org/8a4665671cda35fea1f629a5bcc39e26-image-1493502743154.48.05 PM.png)
      courseC_maze_loops10_authored_hint: [ ]
      courseC_maze_loops10_predict2_authored_hint: [ ]
      courseC_maze_loops11_authored_hint: [ ]
      courseC_maze_loops2_authored_hint:
        courseC_maze_loops2_a: 你能只用包括`当运行时`在内的三个模块通过这个关卡。
        courseC_maze_loops2_b: 尝试把`向前移动`模块放在`重复`模块中来创建一个循环。
        courseC_maze_loops2_c: 你需要重复`向前移动`指令5次来通过此关卡。
      courseC_maze_loops2_predict1_authored_hint:
        courseC_maze_loops2_a: 你能只用包括`当运行时`在内的三个模块通过这个关卡。
        courseC_maze_loops2_b: 尝试把`向前移动`模块放在`重复`模块中来创建一个循环。
        courseC_maze_loops2_c: 你需要重复`向前移动`指令5次来通过此关卡。
      courseC_maze_loops3_authored_hint:
        courseC_maze_loops3_a: 这一关和上一关很像。
        courseC_maze_loops3_b: 用一个`重复5次`模块来创建循环。
      courseC_maze_loops4_authored_hint:
        courseC_maze_loops4_a: 不是所有的命令模块都应该被重复。
        courseC_maze_loops4_b: 使用两个`重复`默默快，并设置不同的数字。
        courseC_maze_loops4_c: "在两个循环之间`向右转`。"
      courseC_maze_loops5_authored_hint:
        courseC_maze_loops5_a: 最好的解决方案是用两个`向前移动`命令和一个循环。
      courseC_maze_loops6_authored_hint:
        courseC_maze_loops6_a: 如果很难看到规律，尝试把它全编出来，然后看看什么重复了好几遍，并把它们放进循环。
        courseC_maze_loops6_b: "要在 “重复” 循环内放置许多模块，只要将一个循环拖进工作区，然后把一开始程序所有的模块拖到里面。\n\n把它接回 “当运行时” 模块就完成了！"
      courseC_maze_loops7_authored_hint:
        courseC_maze_loops7_a: 如果很难看到规律，尝试把它全编出来，然后看看什么东西重复了好几遍，并把它们放进循环。
      courseC_maze_loops8_authored_hint:
        courseC_puppy_loops8courseC_maze_loops8_a: 试着将问题分成更小的部分来思考。别着急。你不需要第一次就全做对！
        courseC_puppy_loops8courseC_maze_loops8_b: 这个路径的前半部分和上一关中的楼梯很像，只是方向不同。
        courseC_puppy_loops8courseC_maze_loops8_c: "有不同的方法来解决这个。\n\n你需要用至少两个循环，并在第一个里重复一组动作，然后在另一个循环里放一个`向前移动`。"
      courseC_maze_loops9_authored_hint:
        courseC_maze_loops9_1: '如果你没发现应该在哪里重复，请尝试在一张纸上写下来并寻找规律。 '
      courseC_maze_loops_challenge1_authored_hint:
        courseC_maze_loops_challenge1_a: 把这条路看成是三个不同的部分。每一个都有一个你可以重复的模式。
        courseC_maze_loops_challenge1_b: 在每个`重复`模块之间, 您需要`向左转`或`向右转`, 以便斯奎特为下一个模式作好准备 。
      courseC_maze_loops_challenge1a_authored_hint:
        courseC_maze_loops_challenge1_a: 把这条路看成是两个不同的部分。每一个都有一个可以重复的模式。
        courseC_maze_loops_challenge1_b: 你还记得如何使用循环来重复楼梯图案吗？
      courseC_maze_loops_challenge1a_2018_authored_hint:
        courseC_maze_loops_challenge1_a: 把这条路看成是两个不同的部分。每一个都有一个可以重复的模式。
        courseC_maze_loops_challenge1_b: 你还记得如何使用循环来重复楼梯图案吗？
      courseC_maze_loops_challenge2_authored_hint:
        courseC_maze_loops_challenge2_a: 如果在每一个土堆上只有一个宝藏，原来的代码将很有效！
        courseC_maze_loops_challenge2_b: 使用循环，这样就不会用光`收集`模块！
      courseC_maze_programming1_authored_hint:
        courseC_maze_programming1_0: 确保所有模块都完全粘到了一起，然后再次点击"运行"。
      courseC_maze_programming1_2018_authored_hint:
        courseC_maze_programming1_0: 确保所有模块都完全粘到了一起，然后再次点击"运行"。
      courseC_maze_programming2_authored_hint:
        courseC_maze_programming2_a: 若要使用<xml><block type="maze_moveForward"/></xml>模块，将它从工具箱中拖出，并粘贴到<xml><block type="when_run"/></xml>模块下。
        courseC_maze_programming2_b: 确保所有模块都完全粘到了一起，然后再次点击"运行"。
      courseC_maze_programming2_2018_authored_hint:
        courseC_maze_programming2_a: 若要使用<xml><block type="maze_moveForward"/></xml>模块，将它从工具箱中拖出，并粘贴到<xml><block type="when_run"/></xml>模块下。
        courseC_maze_programming2_b: 确保所有模块都完全粘到了一起，然后再次点击"运行"。
      courseC_maze_programming3_authored_hint:
        courseC_maze_programming3_a: 试着先运行一次代码, 看看哪里出问题了。
        courseC_maze_programming3_b: |-
          ![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)
          
          若要从代码中间删除模块, 请将所有模块拖到工作区的其他部分。
          
          将要删除的块拖回工具箱。
          
          最后, 把其他模块放回属于他们的地方。
      courseC_maze_programming3_2018_authored_hint:
        courseC_maze_programming3_a: 试着先运行一次代码, 看看哪里出问题了。
        courseC_maze_programming3_b: |-
          ![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)
          
          若要从代码中间删除模块, 请将所有模块拖到工作区的其他部分。
          
          将要删除的块拖回工具箱。
          
          最后, 把其他模块放回属于他们的地方。
      courseC_maze_programming4_authored_hint:
        courseC_maze_programming4_a: 记住，当你转向时，你是从*小鸟*的视角来进行的转向。如果你向右转，小鸟会朝向下方。
        courseC_maze_programming4_b: |-
          遵循如下路径：
          - 向前移动
          - 转向一条路
          - 向前移动
          - 向后转向另一条路
          - 向前移动
      courseC_maze_programming4_2018_authored_hint:
        courseC_maze_programming4_a: 记住，当你转向时，你是从*小鸟*的视角来进行的转向。如果你向右转，小鸟会朝向下方。
        courseC_maze_programming4_b: |-
          遵循如下路径：
          - 向前移动
          - 转向一条路
          - 向前移动
          - 向后转向另一条路
          - 向前移动
      courseC_maze_programming5_authored_hint:
        courseC_maze_programming5_a: 尝试使用"步进"按钮来一行一行运行你的代码。你能想出下一步需要做什么吗？
        courseC_maze_programming5_b: 这只鸟将转一个转弯来完成这个关卡。你能想出哪条路吗？
        courseC_maze_programming5_c: 该解决方案将有两个`向前移动`模块，一个转向，并再加两个`向前移动`模块。
      courseC_maze_programming5_2018_authored_hint:
        courseC_maze_programming5_a: 尝试使用"步进"按钮来一行一行运行你的代码。你能想出下一步需要做什么吗？
        courseC_maze_programming5_b: 这只鸟将转一个转弯来完成这个关卡。你能想出哪条路吗？
        courseC_maze_programming5_c: 该解决方案将有两个`向前移动`模块，一个转向，并再加两个`向前移动`模块。
      courseC_maze_programming6_authored_hint:
        courseC_maze_programming6_a: 有两种方法来解决这个难题 ！
        courseC_maze_programming6_b: 跟着你的手指从鸟到猪, 你采取了哪些步骤？
        courseC_maze_programming6_c: 记住, 你必须先转弯, 因为鸟儿开始时面对一堵墙。
        courseC_maze_programming6_d: 感觉被难住了？ 看看这条路!
      courseC_maze_programming6_2018_authored_hint:
        courseC_maze_programming6_a: 有两种方法来解决这个难题 ！
        courseC_maze_programming6_b: 跟着你的手指从鸟到猪, 你采取了哪些步骤？
        courseC_maze_programming6_c: 记住, 你必须先转弯, 因为鸟儿开始时面对一堵墙。
        courseC_maze_programming6_d: 感觉被难住了？ 看看这条路!
      courseC_maze_programming7_authored_hint:
        courseC_maze_programming7_a: 别忘了用"步进"按钮来一个模块一个模块的寻找错误。
        courseC_maze_programming7_b: 如果你很难弄清楚这个关卡, 试着在一张纸上写下这些动作。
      courseC_maze_programming7_2018_authored_hint:
        courseC_maze_programming7_a: 别忘了用"步进"按钮来一个模块一个模块的寻找错误。
        courseC_maze_programming7_b: 如果你很难弄清楚这个关卡, 试着在一张纸上写下这些动作。
      courseC_maze_programming8_authored_hint:
        courseC_maze_programming8_a: 请记住, 如果你被难住了, 你可以使用 "步进" 按钮来查看你的代码。
        courseC_maze_programming8_b: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseC_maze_programming8_2018_authored_hint:
        courseC_maze_programming8_a: 请记住, 如果你被难住了, 你可以使用 "步进" 按钮来查看你的代码。
        courseC_maze_programming8_b: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseC_maze_programming8_predict1_authored_hint: [ ]
      courseC_maze_programming8_predict1_2018_authored_hint: [ ]
      courseC_maze_programming9_authored_hint: [ ]
      courseC_maze_programming9_2018_authored_hint: [ ]
      courseC_maze_programming_challenge1_authored_hint:
        courseC_maze_programming_challenge1_a: 有很多方法可以找到猪。用你的手指找到一个路径, 然后写下程序！
      courseC_maze_programming_challenge1_2018_authored_hint:
        courseC_maze_programming_challenge1_a: 有很多方法可以找到猪。用你的手指找到一个路径, 然后写下程序！
      courseC_maze_programming_challenge2_authored_hint:
        courseC_maze_programming_challenge2_a: '"如果你让我后退，要格外小心我朝向了正确的路！*'
        courseC_maze_programming_challenge2_b: |-
          最短的解决方案仅使用5个模块, 但它使用了这个模块：
          <xml><block type="controls_repeat_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
      courseC_maze_programming_challenge2_2018_authored_hint:
        courseC_maze_programming_challenge2_a: '"如果你让我后退，要格外小心我朝向了正确的路！*'
        courseC_maze_programming_challenge2_b: |-
          最短的解决方案仅使用5个模块, 但它使用了这个模块：
          <xml><block type="controls_repeat_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
      courseC_playLab_embedded_authored_hint: [ ]
      courseC_puppy_loops10_authored_hint:
        courseC_puppy_loops9_1: 我需要在每次转向之间移动两到三次。
      courseC_puppy_loops11_authored_hint: [ ]
      courseC_puppy_loops8_authored_hint:
        2-3_Maze_Loops_17_a: 试着将问题分成更小的部分来思考。别着急。你不需要第一次就全做对！
        2-3_Maze_Loops_17_b: 这个路径的前半部分和上一关中的楼梯很像，只是方向不同。
        courseC_puppy_loops8_c: 有不同的方法来通过这关。你需要用至少两个循环，并在里面重复一组动作或一个移动命令。
      courseC_puppy_loops8courseC_maze_loops8_authored_hint:
        courseC_puppy_loops8courseC_maze_loops8_a: 试着将问题分成更小的部分来思考。别着急。你不需要第一次就全做对！
        courseC_puppy_loops8courseC_maze_loops8_b: 这个路径的前半部分和上一关中的楼梯很像，只是方向不同。
        courseC_puppy_loops8courseC_maze_loops8_c: "有不同的方法来解决这个。\n\n你需要用至少两个循环，并在第一个里重复一组动作，然后在另一个循环里放一个`向前移动`。"
      courseC_puppy_loops9_authored_hint:
        courseC_puppy_loops9_1: 如果你重复开始的几个动作，你能只用4个模块把我带到猪那里！
      courseC_starWars_loops1_authored_hint:
        courseC_starWars_loops1_a: 当 BB-8 在废金属上翻滚时, 他会自动把它捡起来。
        courseC_starWars_loops1_b: 不要害怕犯错误! 即使你还没有解决这个关卡，运行代码, 看看会发生什么。
        courseC_starWars_loops1_c: 你要`向前移动`五次来解决这个关卡。
      courseC_starWars_loops10_authored_hint:
        courseC_starWars_loops10_a: 这个图案看起来像一大套台阶吗？看看你是否可以用你从以前的关卡中学到的东西来到达所有的转弯。
        courseC_starWars_loops10_b: "如果你想使用更少的代码, 你可以把`重复循环`放在另一个里面！这称为 ** 嵌套循环 **。"
        courseC_starWars_loops10_c: 不要害怕犯错误! 即使你还没有解决这个关卡，运行代码, 看看会发生什么。
      courseC_starWars_loops10_2018_authored_hint:
        courseC_starWars_loops10_a: 这个图案看起来像一大套台阶吗？看看你是否可以用你从以前的关卡中学到的东西来到达所有的转弯。
        courseC_starWars_loops10_b: "如果你想使用更少的代码, 你可以把`重复循环`放在另一个里面！这称为 ** 嵌套循环 **。"
        courseC_starWars_loops10_c: 不要害怕犯错误! 即使你还没有解决这个关卡，运行代码, 看看会发生什么。
      courseC_starWars_loops10_predict2_authored_hint: [ ]
      courseC_starWars_loops10_predict2_2018_authored_hint: [ ]
      courseC_starWars_loops11_authored_hint: [ ]
      courseC_starWars_loops11_2018_authored_hint: [ ]
      courseC_starWars_loops1_2018_authored_hint:
        courseC_starWars_loops1_a: 当 BB-8 在废金属上翻滚时, 他会自动把它捡起来。
        courseC_starWars_loops1_b: 不要害怕犯错误! 即使你还没有解决这个关卡，运行代码, 看看会发生什么。
        courseC_starWars_loops1_c: 你要`向前移动`五次来解决这个关卡。
      courseC_starWars_loops2_authored_hint:
        courseC_starWars_loops2_a: 要重复代码, 拖出一个`重复 `循环, 然后把它放在你想要的模块里面。
      courseC_starWars_loops2_2018_authored_hint:
        courseC_starWars_loops2_a: 要重复代码, 拖出一个`重复 `循环, 然后把它放在你想要的模块里面。
      courseC_starWars_loops4_authored_hint:
        courseC_starWars_loops4_c: 点击 "左" 在转向模块旁边的小箭头可以让你把它改成 "右"。
        courseC_starWars_loops4_a: 使用两个`重复`模块。
        courseC_starWars_loops4_b: '每个`重复`循环将只有一个命令在它里面: `向前移动`。'
      courseC_starWars_loops4_2018_authored_hint:
        courseC_starWars_loops4_c: 点击 "左" 在转向模块旁边的小箭头可以让你把它改成 "右"。
        courseC_starWars_loops4_a: 使用两个`重复`模块。
        courseC_starWars_loops4_b: '每个`重复`循环将只有一个命令在它里面: `向前移动`。'
      courseC_starWars_loops5_authored_hint:
        courseC_starWars_loops5_b: 要往下走, 你必须转向, 然后向前移动。
        courseC_starWars_loops5_a: 最好的解决方案是使用一个转向, 然后一个单一的`向前移动` ，另一个转向，然后一个循环。
      courseC_starWars_loops5_2018_authored_hint:
        courseC_starWars_loops5_b: 要往下走, 你必须转向, 然后向前移动。
        courseC_starWars_loops5_a: 最好的解决方案是使用一个转向, 然后一个单一的`向前移动` ，另一个转向，然后一个循环。
      courseC_starWars_loops6_authored_hint:
        courseC_starWars_loops6_a: 试着在一张纸上写下移动的情况, 来寻找模式。
        courseC_starWars_loops6_b: "如果你想使用更少的代码, 你可以把`重复循环`放在另一个里面！这称为 ** 嵌套循环 **。"
      courseC_starWars_loops6_2018_authored_hint:
        courseC_starWars_loops6_a: 试着在一张纸上写下移动的情况, 来寻找模式。
        courseC_starWars_loops6_b: "如果你想使用更少的代码, 你可以把`重复循环`放在另一个里面！这称为 ** 嵌套循环 **。"
      courseC_starWars_loops7_authored_hint:
        courseC_starWars_loops7_a: 这个图案看起来比实际更难! 从一个简单的楼梯步进开始。这是否涵盖了所有的废旧金属？
        courseC_starWars_loops7_b: 如果在这关遇到困难，请尝试在一张纸上写下所有的动作并寻找规律。
        courseC_starWars_loops7_c: 不要害怕犯错误! 即使你还没有解决这个关卡，运行代码, 看看会发生什么。
      courseC_starWars_loops7_2018_authored_hint:
        courseC_starWars_loops7_a: 这个图案看起来比实际更难! 从一个简单的楼梯步进开始。这是否涵盖了所有的废旧金属？
        courseC_starWars_loops7_b: 如果在这关遇到困难，请尝试在一张纸上写下所有的动作并寻找规律。
        courseC_starWars_loops7_c: 不要害怕犯错误! 即使你还没有解决这个关卡，运行代码, 看看会发生什么。
      courseC_starWars_loops8_authored_hint:
        course_starWars_loops8_a: 试着将问题分成更小的部分来思考。别着急。你不需要第一次就全做对！
        course_starWars_loops8_b: 把这个问题的前半部分看成是台阶步进问题。你以前是怎么解决的？
        course_starWars_loops8_c: |-
          看看这条路。
          
          ![](https://images.code.org/7d696dd3b1e6984a1d6041f366d5c96b-image-1510198804955.37.04.png)
      courseC_starWars_loops8_2018_authored_hint:
        course_starWars_loops8_a: 试着将问题分成更小的部分来思考。别着急。你不需要第一次就全做对！
        course_starWars_loops8_b: 把这个问题的前半部分看成是台阶步进问题。你以前是怎么解决的？
        course_starWars_loops8_c: |-
          看看这条路。
          
          ![](https://images.code.org/7d696dd3b1e6984a1d6041f366d5c96b-image-1510198804955.37.04.png)
      courseC_starWars_loops9_authored_hint:
        course_starWars_loops9_b: 您可以在`重复`循环中放置多个模块。
        course_starWars_loops9_c: |-
          你不需要向左转来解决这个关卡。你所有的转向都可以向右。
          
          ![](https://images.code.org/3dd00d424aa4112934053548b48bbb69-image-1510198997590.40.57.png)
      courseC_starWars_loops9_2018_authored_hint:
        course_starWars_loops9_b: 您可以在`重复`循环中放置多个模块。
        course_starWars_loops9_c: |-
          你不需要向左转来解决这个关卡。你所有的转向都可以向右。
          
          ![](https://images.code.org/3dd00d424aa4112934053548b48bbb69-image-1510198997590.40.57.png)
      courseD_Frozen_nested1_authored_hint:
        courseD_artist_project1_a: 使用`转向`块上的下拉菜单选择您需要的角度!
        courseD_artist_project1_b: 请记住, `向前移动`会画一条线, 而`向前跳`则不会。
      courseD_Frozen_nested2_authored_hint:
        courseD_artist_project2_a: 请记住, `向前移动`会画一条线, 而`向前跳`则不会。
        courseD_artist_project2_b: 在第一次绘制和移动后, 可以通过在外部添加一个循环来重复代码。
      courseD_Frozen_nested3_authored_hint:
        courseD_artist_project3_a: 使用`转向`块上的下拉菜单选择您需要的角度!
        courseD_artist_project3_b: "尝试嵌套循环！\n\n使用您创建的代码绘制一行形状并将其嵌套在另一个循环中。在底部, 在外部循环结束之前, 添加一个让埃尔莎转过来的块。\n\n- 如果重复外循环5次，尝试72度\n- 如果重复外循环6次，尝试60度"
      courseD_Frozen_nested4_authored_hint:
        courseD_artist_project4_a: |
          这里是五角的雪花, 在三角形的雪花前旋转36度：
          
          
          <img src="https://images.code.org/2ba023db9404f948fab655bfa7923160-image-1495822526223.14.13.png" width="200px" />
          
          这里是一组带有正方形的六边形：
          
          <img src="https://images.code.org/4d77462f3d07df6f1f5f2dc25e5d2b70-image-1495822526224.15.08.png" width="200px" />
        courseD_artist_project4_b: 若要尝试此项, 请绘制第一个雪花, 然后转向, 然后绘制第二个雪花。
      courseD_Frozen_nested5_authored_hint:
        courseD_artist_project4_a: |
          将两个六边形4个三角形画成线：
          
          <img src="https://images.code.org/37ca9779bafd2ccc5cc801f82358008e-image-1495823683964.34.09.png" width="200px" />
      courseD_Frozen_nested6_authored_hint:
        courseD_artist_project1a_a: |
          这台阶使用76度转弯并且重复4次。 
          
          <img src="https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png" width="200px" />
        courseD_artist_project1a_b: 这些模式很像从其他关卡里的楼梯台阶, 但使用不同的角度。
      courseD_Frozen_nested7_authored_hint:
        courseD_artist_project2a_a: |
          这幅画是通过在`重复两次` 块内嵌套一个4个楼梯和一个`右转180度 `模块来制作的。 
          
          <img src="https://images.code.org/bb24f9acee8afed2e119c1e920cb43f6-image-1495834479042.16.27.png" width="200px" />
      courseD_Frozen_nested8_authored_hint:
        courseD_artist_project3a_a: 你可以选择不同的数量来旋转你的形状！转向18次，每次20度如何？
      courseD_Frozen_nested9_authored_hint:
        courseD_artist_project4a_a: |
          这里有两个不同长度的雪花, 在一个后接着画另一个。（在两者之间转30度）
          
          <img src="https://images.code.org/45dedb51d89d3e5d0a88fe65ecbd7d7b-image-1495833855890.22.39.png" width="200px" />
      courseD_artist_1_2018_authored_hint:
        courseD_artist_project1_a: 使用`转向`块上的下拉菜单选择您需要的角度!
        courseD_artist_project1_b: 请记住, `向前移动`会画一条线, 而`向前跳`则不会。
      courseD_artist_2_2018_authored_hint:
        courseD_artist_project1_b: 请记住, 向前移动会画一条线，而`向前跳`则不会。
        courseD_artist_project1_a: 使用`转向`块上的下拉菜单选择您需要的角度!
      courseD_artist_3_2018_authored_hint: [ ]
      courseD_artist_4_2018_authored_hint: [ ]
      courseD_artist_5_2018_authored_hint:
        '1': If you are switching your shapes, don't forget that you will need to switch their angles, too!
      courseD_artist_6_2018_authored_hint: [ ]
      courseD_artist_7_2018_authored_hint:
        courseD_artist_project2a_a: |
          这幅画是通过在`重复两次` 块内嵌套一个4个楼梯和一个`右转180度 `模块来制作的。 
          
          <img src="https://images.code.org/bb24f9acee8afed2e119c1e920cb43f6-image-1495834479042.16.27.png" width="200px" />
      courseD_artist_8_2018_authored_hint:
        courseD_artist_project3a_a: 你可以选择不同的数量来旋转你的形状！转向18次，每次20度如何？
      courseD_artist_9_2018_authored_hint:
        courseD_artist_project4a_a: |
          这里有两个不同长度的雪花, 在一个后接着画另一个。（在两者之间转30度）
          
          <img src="https://images.code.org/45dedb51d89d3e5d0a88fe65ecbd7d7b-image-1495833855890.22.39.png" width="200px" />
      courseD_artist_Template_2018_authored_hint: [ ]
      courseD_artist_binary1_authored_hint:
        courseD_artist_binary1_a: 将文本块中的 "？？" 替换为0 和1 所需的二进制图像。
        courseD_artist_binary1_b: 艺术家将每个1，画成一个白色的空间, 每个0画成一个黑色的空间。
        courseD_artist_binary1_c: |-
          这就是您可以这样输入二进制代码的方法：
          
          ![](https://images.code.org/ec0f974e32c4323fc61cb49b48b8f1c0-image-1500334311345.2_hint.gif)
      courseD_artist_binary1_2018_authored_hint:
        courseD_artist_binary1_a: 将文本块中的 "？？" 替换为0 和1 所需的二进制图像。
        courseD_artist_binary1_b: 艺术家将每个1，画成一个白色的空间, 每个0画成一个黑色的空间。
        courseD_artist_binary1_c: |-
          这就是您可以这样输入二进制代码的方法：
          
          ![](https://images.code.org/ec0f974e32c4323fc61cb49b48b8f1c0-image-1500334311345.2_hint.gif)
      courseD_artist_binary2_authored_hint:
        courseD_artist_binary2_a: 点击`运行`来看程序如何运行
      courseD_artist_binary2_2018_authored_hint:
        courseD_artist_binary2_a: 点击`运行`来看程序如何运行
      courseD_artist_binary3_authored_hint:
        courseD_artist_binary3_a: 工具箱中的四个二进制模式之一将解决这个关卡!
        courseD_artist_binary3_b: 不要害怕犯错误! 即使你还没有解开这个关卡，尝试编写二进制文件并运行代码, 看看会发生什么。
      courseD_artist_binary3_2018_authored_hint:
        courseD_artist_binary3_a: 工具箱中的四个二进制模式之一将解决这个关卡!
        courseD_artist_binary3_b: 不要害怕犯错误! 即使你还没有解开这个关卡，尝试编写二进制文件并运行代码, 看看会发生什么。
      courseD_artist_binary4_authored_hint:
        courseD_artist_binary4_a: 看看最上面一行的前三个正方形。你能重复这三个来画出整个图案吗？
        courseD_artist_binary4_b: 不要害怕犯错误! 即使你还没有解开这个关卡，尝试编写二进制文件并运行代码, 看看会发生什么。
      courseD_artist_binary4_2018_authored_hint:
        courseD_artist_binary4_a: 看看最上面一行的前三个正方形。你能重复这三个来画出整个图案吗？
        courseD_artist_binary4_b: 不要害怕犯错误! 即使你还没有解开这个关卡，尝试编写二进制文件并运行代码, 看看会发生什么。
      courseD_artist_binary5_authored_hint:
        courseD_artist_binary5_a: 请先尝试运行代码, 看看您需要处理的内容。
        courseD_artist_binary5_b: 您只需交换两行, 就可以制作一个微笑。
        courseD_artist_binary5_c: 如果您在解决此关卡时遇到困难, 请尝试在一张纸上写下二进制线并查找相同模式。
      courseD_artist_binary5_2018_authored_hint:
        courseD_artist_binary5_a: 请先尝试运行代码, 看看您需要处理的内容。
        courseD_artist_binary5_b: 您只需交换两行, 就可以制作一个微笑。
        courseD_artist_binary5_c: 如果您在解决此关卡时遇到困难, 请尝试在一张纸上写下二进制线并查找相同模式。
      courseD_artist_binary6_authored_hint:
        courseD_artist_binary6_a: 从左上方开始。在模式开始重复之前, 您必须阅读多少？
        courseD_artist_binary6_b: 您可以一次生成二进制字符串, 并继续测试!
      courseD_artist_binary6_2018_authored_hint:
        courseD_artist_binary6_a: 从左上方开始。在模式开始重复之前, 您必须阅读多少？
        courseD_artist_binary6_b: 您可以一次生成二进制字符串, 并继续测试!
      courseD_artist_binary7_authored_hint:
        courseD_artist_binary7_a: 从左上方开始。在模式开始重复之前, 您必须阅读多少？
        courseD_artist_binary7_b: 不要害怕犯错误! 即使你还没有解开这个关卡，尝试编写二进制文件并运行代码, 看看会发生什么。
      courseD_artist_binary7_2018_authored_hint:
        courseD_artist_binary7_a: 从左上方开始。在模式开始重复之前, 您必须阅读多少？
        courseD_artist_binary7_b: 不要害怕犯错误! 即使你还没有解开这个关卡，尝试编写二进制文件并运行代码, 看看会发生什么。
      courseD_artist_binary8_authored_hint:
        courseD_artist_binary8_a: 螺旋有时会令人困惑。在创建此设计时, 请将您心目中的每条水平线分开。
        courseD_artist_binary8_b: 请先尝试运行代码, 看看您需要处理的内容。
        courseD_artist_binary8_c: 不要害怕犯错误! 即使你还没有解开这个关卡，尝试编写二进制文件并运行代码, 看看会发生什么。
      courseD_artist_binary8_2018_authored_hint:
        courseD_artist_binary8_a: 螺旋有时会令人困惑。在创建此设计时, 请将您心目中的每条水平线分开。
        courseD_artist_binary8_b: 请先尝试运行代码, 看看您需要处理的内容。
        courseD_artist_binary8_c: 不要害怕犯错误! 即使你还没有解开这个关卡，尝试编写二进制文件并运行代码, 看看会发生什么。
      courseD_artist_binaryFP_authored_hint: [ ]
      courseD_artist_binaryFP8_authored_hint: [ ]
      courseD_artist_binaryFP_2018_authored_hint: [ ]
      courseD_artist_binary_challenge2_authored_hint:
        courseD_artist_binary_challenge2_a: 原来的程序中只有几行错误。
      courseD_artist_binary_challenge2_2018_authored_hint:
        courseD_artist_binary_challenge2_a: 原来的程序中只有几行错误。
      courseD_artist_binary_challenge3_authored_hint:
        courseD_artist_binary_challenge3_a: |-
          我给你的最好的提示是, 如果开始变得非常混乱, 请按 `⟲重新开始`。 原来的程序中只有几行错误。如果一种方法失败了，请备份并重试。这里有解决方案!
      courseD_artist_embed_frozen_authored_hint: [ ]
      courseD_artist_embed_frozen2_authored_hint: [ ]
      courseD_artist_embedded_project1a_authored_hint: [ ]
      courseD_artist_functions10_authored_hint:
        courseD_artist_functions10_b: 这幅画和上一关非常像，除了函数画的是另一种线。
        courseD_artist_functions10_a: 为了不使用多个`向前移动`模块。创建一个`画六边形`的函数，并且多次调用这个函数。
      courseD_artist_functions2_authored_hint:
        courseD_artist_functions2_a: |-
          你的程序应该：
          - 使用函数
          - 向前移动 100+75像素
          - 使用函数
      courseD_artist_functions3_authored_hint:
        courseD_artist_functions3_a: |-
          为了通过这关，你只需要添加一个循环来重复初始的代码8次。
          
          如果你不记得初始代码是什么样了，点击工作区右上角"重新开始"。
      courseD_artist_functions4_authored_hint:
        courseD_artist_functions4_a: 尝试使用函数！
      courseD_artist_functions5_authored_hint:
        courseD_artist_functions5_a: 别放弃！记住你已经学会的东西。
        courseD_artist_functions5_b: 函数使它可以很容易地在任何时候调用保存的代码, 而不仅仅是从循环里！
      courseD_artist_functions6_authored_hint:
        grade4_artist_functions_windows0_a: 现在只专注于制作一个窗口。 我们将在下一个关卡中为它创建一个函数。
        grade4_artist_functions_windows0_b: 尝试使用嵌套循环, 其中内部循环制作正方形，外循环让正方形旋转四次。
      courseD_artist_functions7_authored_hint:
        courseD_artist_functions7_a: 请尝试首先创建函数，然后再窗口中一次添加一个。
        courseD_artist_functions7_b: 不需要添加任何额外的重复循环。 只需让小艺术家在每个上面的窗口向前跳100像素，向下跳转150 像素到达底部窗口。
      courseD_artist_functions8_authored_hint:
        courseD_artist_functions8_a: |-
          从制作一个正方形的函数开始，然后尝试为一行正方形做一个函数。
          
          如何使用`draw a line of squares`（用正方形画一条线）函数来制作此图像？
        courseD_artist_functions8_b: 在第一行正方形之后，需要在开始第二行正方形之前将小艺术家向下并向后移动回来。
        courseD_artist_functions8_c: 在偶数行时，与奇数行相比，应该将小艺术家往回移动不同数量的像素。
      courseD_artist_functions9_authored_hint:
        courseD_artist_functions9_a: 为了避免使用多个`向前移动`模块，创建一个`画三角形`的函数，并且多次调用它。
        courseD_artist_functions9_b: 这幅画创建了一行三角形, 每次绘制三角形线后进行60或120度转弯。
      courseD_artist_nestedLoops1_authored_hint:
        courseD_artist_nestedLoops1_a: 最简单的绘制方法是向前移动并向右转。
        courseD_artist_nestedLoops1_b: 你可以再两个模块里用一个`重复`循环来画这个三角形。你需要哪个模块？
        courseD_artist_nestedLoops1_c: 尝试在纸面上编写步骤, 并查找可以用循环简化的模式。
      courseD_artist_nestedLoops10_authored_hint: [ ]
      courseD_artist_nestedLoops10_2018_authored_hint: [ ]
      courseD_artist_nestedLoops1_2018_authored_hint:
        courseD_artist_nestedLoops1_a: 最简单的绘制方法是向前移动并向右转。
        courseD_artist_nestedLoops1_b: 你可以再两个模块里用一个`重复`循环来画这个三角形。你需要哪个模块？
        courseD_artist_nestedLoops1_c: 尝试在纸面上编写步骤, 并查找可以用循环简化的模式。
      courseD_artist_nestedLoops1a_authored_hint:
        courseD_artist_nestedLoops1a_a: |-
          您将需要绘制总共6个三角形。完成每个三角形后, 旋转60度并接着开始下一个三角形。 
          
          ![](https://images.code.org/ad6c6d98298df9f4e3cea5bbe5ec776e-image-1497476332024.2_solution2.gif)
        courseD_artist_nestedLoops1a_b: 如果你用一个循环来创建你的三角形, 艺术家应该朝着同样的方向开始。这将使60度转向容易得多。
        courseD_artist_nestedLoops1a_c: 如果需要颜色, 请使用代码中的`设置颜色`模块。您不必用模板图像中一样的颜色。
      courseD_artist_nestedLoops1a_2018_authored_hint:
        courseD_artist_nestedLoops1a_a: |-
          您将需要绘制总共6个三角形。完成每个三角形后, 旋转60度并接着开始下一个三角形。 
          
          ![](https://images.code.org/ad6c6d98298df9f4e3cea5bbe5ec776e-image-1497476332024.2_solution2.gif)
        courseD_artist_nestedLoops1a_b: 如果你用一个循环来创建你的三角形, 艺术家应该朝着同样的方向开始。这将使60度转向容易得多。
        courseD_artist_nestedLoops1a_c: 如果需要颜色, 请使用代码中的`设置颜色`模块。您不必用模板图像中一样的颜色。
      courseD_artist_nestedLoops2_authored_hint:
        courseD_artist_nestedLoops2_a: 将三角形代码放到另一个`重复`循环里来进行嵌套循环。
        courseD_artist_nestedLoops2_b: 记住把`转向`模块放在循环内, 让艺术家在每个三角形后转向。
      courseD_artist_nestedLoops2_2018_authored_hint:
        courseD_artist_nestedLoops2_a: 将三角形代码放到另一个`重复`循环里来进行嵌套循环。
        courseD_artist_nestedLoops2_b: 记住把`转向`模块放在循环内, 让艺术家在每个三角形后转向。
      courseD_artist_nestedLoops3_authored_hint:
        courseD_artist_nestedLoops3_a: "试着用“向前跳”模块来从一个正方形的顶部到下一个正方形开始的地方。\n\n如果你的正方形有20像素高，且它们相隔20像素，你需要跳多远？"
        courseD_artist_nestedLoops3_b: '请不要忘记使用嵌套循环快速通过这个关卡。 '
        courseD_artist_nestedLoops3_c: '开始使用`重复`循环来制作一个正方形。 接下来, 重复该方块8次, 在两个之间跳跃40像素。 '
      courseD_artist_nestedLoops3_2018_authored_hint:
        courseD_artist_nestedLoops3_a: "试着用“向前跳”模块来从一个正方形的顶部到下一个正方形开始的地方。\n\n如果你的正方形有20像素高，且它们相隔20像素，你需要跳多远？"
        courseD_artist_nestedLoops3_b: '请不要忘记使用嵌套循环快速通过这个关卡。 '
        courseD_artist_nestedLoops3_c: '开始使用`重复`循环来制作一个正方形。 接下来, 重复该方块8次, 在两个之间跳跃40像素。 '
      courseD_artist_nestedLoops4_authored_hint:
        courseD_artist_nestedLoops4_d: 为了正确地解决这一问题, 你需要在转弯 **之前**移动, 否则你的圆圈将会偏差极小的量！
        courseD_artist_nestedLoops4_a: |-
          制作圆圈:
          - 重复360次
          - 向前移动1像素
          - 向左转1度
        courseD_artist_nestedLoops4_b: 请不要忘了在圆圈间往前跳跃50 像素。
        courseD_artist_nestedLoops4_c: 使用嵌套循环来画4 次圆圈。
      courseD_artist_nestedLoops4_2018_authored_hint:
        courseD_artist_nestedLoops4_d: 为了正确地解决这一问题, 你需要在转弯 **之前**移动, 否则你的圆圈将会偏差极小的量！
        courseD_artist_nestedLoops4_a: |-
          制作圆圈:
          - 重复360次
          - 向前移动1像素
          - 向左转1度
        courseD_artist_nestedLoops4_b: 请不要忘了在圆圈间往前跳跃50 像素。
        courseD_artist_nestedLoops4_c: 使用嵌套循环来画4 次圆圈。
      courseD_artist_nestedLoops5_authored_hint:
        courseD_artist_nestedLoops5_a: |-
          试试这样做很容易：
          
          - 重复4 次
          - 绘制一个圆圈
          - 往前跳跃50 像素
          - 右转90 度
        courseD_artist_nestedLoops5_b: 要做一个圆圈, 你需要设置一个重复循环重复360次。在循环中, 向前移动1像素, 然后转1度。
      courseD_artist_nestedLoops5_2018_authored_hint:
        courseD_artist_nestedLoops5_a: |-
          试试这样做很容易：
          
          - 重复4 次
          - 绘制一个圆圈
          - 往前跳跃50 像素
          - 右转90 度
        courseD_artist_nestedLoops5_b: 要做一个圆圈, 你需要设置一个重复循环重复360次。在循环中, 向前移动1像素, 然后转1度。
      courseD_artist_nestedLoops6_authored_hint:
        courseD_artist_nestedLoops6_a: 现在需要重复外循环6 次，而不是4次。
        courseD_artist_nestedLoops6_b: '现在，已经把360度分成了6份, 而不是只有4份, 您将只需要在圆圈之间转60度。 '
      courseD_artist_nestedLoops7_authored_hint:
        courseD_artist_nestedLoops7_a: 你需要在这里使用嵌套循环。首先，使用循环来画一个正方形。如果内循环画一个正方形那么外循环将做什么？
        courseD_artist_nestedLoops7_b: |-
          使用嵌套循环, 让它的内部循环是正方形的代码。
          
          - 重复6次
          - 画正方形
          - 向前跳**50像素**
          - 转**60度**
      courseD_artist_nestedLoops7_2018_authored_hint:
        courseD_artist_nestedLoops7_a: 你需要在这里使用嵌套循环。首先，使用循环来画一个正方形。如果内循环画一个正方形那么外循环将做什么？
        courseD_artist_nestedLoops7_b: |-
          使用嵌套循环, 让它的内部循环是正方形的代码。
          
          - 重复6次
          - 画正方形
          - 向前跳**50像素**
          - 转**60度**
      courseD_artist_nestedLoops8_authored_hint:
        courseD_artist_nestedLoops8_a: 要画出8个六边形，你需要在每个图形之间转 **45 度**。为什么？因为360度（一整圈）除以 8（六边形的数量）是45度。
        courseD_artist_nestedLoops8_b: 如果你被难住了，先看上一个关卡, 然后改变那些不一样的东西。
        courseD_artist_nestedLoops8_c: |-
          使用嵌套循环：
          
          - 重复8次
          - 绘制六边形
          - 向前跳跃50像素
          - 向右转45度
      courseD_artist_nestedLoops8_2018_authored_hint:
        courseD_artist_nestedLoops8_a: 要画出8个六边形，你需要在每个图形之间转 **45 度**。为什么？因为360度（一整圈）除以 8（六边形的数量）是45度。
        courseD_artist_nestedLoops8_b: 如果你被难住了，先看上一个关卡, 然后改变那些不一样的东西。
        courseD_artist_nestedLoops8_c: |-
          使用嵌套循环：
          
          - 重复8次
          - 绘制六边形
          - 向前跳跃50像素
          - 向右转45度
      courseD_artist_nestedLoops9_authored_hint:
        courseD_artist_nestedLoops9_a: 从之前用过嵌套循环来开始，但这次用正方形。
        courseD_artist_nestedLoops9_b: 将第二组嵌套循环添加到第一组的末尾, 但这一次使用三角形。
        courseD_artist_nestedLoops9_c: |-
          使用两个嵌套循环：
          - 重复8次
          - 绘制正方形
          - 向前跳50像素
          - 向右转45度
          - 重复8次
          - 绘制三角形
          - 向前跳50像素
          - 向右转45度
      courseD_artist_nestedLoops9_2018_authored_hint:
        courseD_artist_nestedLoops9_a: 从之前用过嵌套循环来开始，但这次用正方形。
        courseD_artist_nestedLoops9_b: 将第二组嵌套循环添加到第一组的末尾, 但这一次使用三角形。
        courseD_artist_nestedLoops9_c: |-
          使用两个嵌套循环：
          - 重复8次
          - 绘制正方形
          - 向前跳50像素
          - 向右转45度
          - 重复8次
          - 绘制三角形
          - 向前跳50像素
          - 向右转45度
      courseD_artist_nestedLoops9_predict1_authored_hint: [ ]
      courseD_artist_nestedLoops9_predict1_2018_authored_hint: [ ]
      courseD_artist_nestedLoopsFP_authored_hint:
        courseD_artist_nestedLoopsFP_a: |-
          <img src="https://images.code.org/9257cbf61f238f5a749a949059731934-image-1478732674615.02.25.png" width="200px"/>
          
          此图片是一个嵌套循环，它重复画了六边形（边长50像素）15次，每次转向48度。
        courseD_artist_nestedLoopsFP_b: |-
          <img src="https://images.code.org/31a85d4e5be5209240195d34b17a177b-image-1478732674613.32.53.png" width="200px"/>
          
          此图片是使用和您之前在其他关卡已经完成的类似的代码，但是是用圆圈（重复360 次：往前移动1， 转1 度）。
        courseD_artist_nestedLoopsFP_c: |-
          <img src="https://images.code.org/f654f1512860c6c8cf6795c961a8959c-image-1478732674616.02.58.png" width="200px"/>
          
          此图片是使用单个嵌套循环制成，它使用48度转向来重复（50像素边长的）六边形15 次。
      courseD_artist_nestedLoopsFP_2018_authored_hint:
        courseD_artist_nestedLoopsFP_a: |-
          <img src="https://images.code.org/9257cbf61f238f5a749a949059731934-image-1478732674615.02.25.png" width="200px"/>
          
          此图片是一个嵌套循环，它重复画了六边形（边长50像素）15次，每次转向48度。
        courseD_artist_nestedLoopsFP_b: |-
          <img src="https://images.code.org/31a85d4e5be5209240195d34b17a177b-image-1478732674613.32.53.png" width="200px"/>
          
          此图片是使用和您之前在其他关卡已经完成的类似的代码，但是是用圆圈（重复360 次：往前移动1， 转1 度）。
        courseD_artist_nestedLoopsFP_c: |-
          <img src="https://images.code.org/f654f1512860c6c8cf6795c961a8959c-image-1478732674616.02.58.png" width="200px"/>
          
          此图片是使用单个嵌套循环制成，它使用48度转向来重复（50像素边长的）六边形15 次。
      courseD_artist_nestedLoopsPre1_authored_hint: [ ]
      courseD_artist_nestedLoops_challenge1_authored_hint:
        courseD_artist_nestedLoops_challenge1_a: 首先，将颜色改为蓝色，然后创建一个50像素边长的八边形，并向左转45度。
        courseD_artist_nestedLoops_challenge1_b: 添加代码来将颜色改为绿色，并创建一个50像素边唱的三角形，向左转120度。
        courseD_artist_nestedLoops_challenge1_c: 画完这两个形状后，你需要向前跳50像素，然后向右转90度。
        courseD_artist_nestedLoops_challenge1_d: 将所有代码放在`重复4次`循环中以完成它。
      courseD_artist_nestedLoops_challenge1_2018_authored_hint:
        courseD_artist_nestedLoops_challenge1_a: 首先，将颜色改为蓝色，然后创建一个50像素边长的八边形，并向左转45度。
        courseD_artist_nestedLoops_challenge1_b: 添加代码来将颜色改为绿色，并创建一个50像素边唱的三角形，向左转120度。
        courseD_artist_nestedLoops_challenge1_c: 画完这两个形状后，你需要向前跳50像素，然后向右转90度。
        courseD_artist_nestedLoops_challenge1_d: 将所有代码放在`重复4次`循环中以完成它。
      courseD_artist_nestedLoops_challenge2_authored_hint:
        courseD_artist_nestedLoops_challenge2_a: 要画一个正八边形, 艺术家需要转45度8次。
        courseD_artist_nestedLoops_challenge2_b: 要画正方形, 艺术家需要转动90度4次。
      courseD_artist_nestedLoops_challenge2_2018_authored_hint:
        courseD_artist_nestedLoops_challenge2_a: 要画一个正八边形, 艺术家需要转45度8次。
        courseD_artist_nestedLoops_challenge2_b: 要画正方形, 艺术家需要转动90度4次。
      courseD_artist_project1_authored_hint:
        courseD_artist_project1_a: 使用`转向`块上的下拉菜单选择您需要的角度!
        courseD_artist_project1_b: 请记住, `向前移动`会画一条线, 而`向前跳`则不会。
      courseD_artist_project1_2018_authored_hint:
        courseD_artist_project1_a: 使用`转向`块上的下拉菜单选择您需要的角度!
        courseD_artist_project1_b: 请记住, `向前移动`会画一条线, 而`向前跳`则不会。
      courseD_artist_project1a_authored_hint:
        courseD_artist_project1a_a: |
          这台阶使用76度转弯并且重复4次。 
          
          <img src="https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png" width="200px" />
        courseD_artist_project1a_b: 这些模式很像从其他关卡里的楼梯台阶, 但使用不同的角度。
      courseD_artist_project1a_2018_authored_hint:
        courseD_artist_project1a_a: |
          这台阶使用76度转弯并且重复4次。 
          
          <img src="https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png" width="200px" />
        courseD_artist_project1a_b: 这些模式很像从其他关卡里的楼梯台阶, 但使用不同的角度。
      courseD_artist_project2_authored_hint:
        courseD_artist_project2_a: 请记住, `向前移动`会画一条线, 而`向前跳`则不会。
        courseD_artist_project2_b: 在第一次绘制和移动后, 可以通过在外部添加一个循环来重复代码。
      courseD_artist_project2Template_authored_hint: [ ]
      courseD_artist_project2Template_2018_authored_hint: [ ]
      courseD_artist_project2_2018_authored_hint:
        courseD_artist_project2_a: 请记住, `向前移动`会画一条线, 而`向前跳`则不会。
        courseD_artist_project2_b: 在第一次绘制和移动后, 可以通过在外部添加一个循环来重复代码。
      courseD_artist_project2a_authored_hint:
        courseD_artist_project2a_a: |
          这幅画是通过在`重复两次` 块内嵌套一个4个楼梯和一个`右转180度 `模块来制作的。 
          
          <img src="https://images.code.org/bb24f9acee8afed2e119c1e920cb43f6-image-1495834479042.16.27.png" width="200px" />
      courseD_artist_project2a_2018_authored_hint:
        courseD_artist_project2a_a: |
          这幅画是通过在`重复两次` 块内嵌套一个4个楼梯和一个`右转180度 `模块来制作的。 
          
          <img src="https://images.code.org/bb24f9acee8afed2e119c1e920cb43f6-image-1495834479042.16.27.png" width="200px" />
      courseD_artist_project3_authored_hint:
        courseD_artist_project3_a: 使用`转向`块上的下拉菜单选择您需要的角度!
        courseD_artist_project3_b: "尝试嵌套循环！\n\n使用您创建的代码绘制一行形状并将其嵌套在另一个循环中。在底部, 在外部循环结束之前, 添加一个让埃尔莎转过来的块。\n\n- 如果重复外循环5次，尝试72度\n- 如果重复外循环6次，尝试60度"
      courseD_artist_project3_2018_authored_hint:
        courseD_artist_project3_a: 使用`转向`块上的下拉菜单选择您需要的角度!
        courseD_artist_project3_b: "尝试嵌套循环！\n\n使用您创建的代码绘制一行形状并将其嵌套在另一个循环中。在底部, 在外部循环结束之前, 添加一个让埃尔莎转过来的块。\n\n- 如果重复外循环5次，尝试72度\n- 如果重复外循环6次，尝试60度"
      courseD_artist_project3a_authored_hint:
        courseD_artist_project3a_a: 你可以选择不同的数量来旋转你的形状！转向18次，每次20度如何？
      courseD_artist_project3a_2018_authored_hint:
        courseD_artist_project3a_a: 你可以选择不同的数量来旋转你的形状！转向18次，每次20度如何？
      courseD_artist_project4_authored_hint:
        courseD_artist_project4_a: |
          这里是五角的雪花, 在三角形的雪花前旋转36度：
          
          
          <img src="https://images.code.org/2ba023db9404f948fab655bfa7923160-image-1495822526223.14.13.png" width="200px" />
          
          这里是一组带有正方形的六边形：
          
          <img src="https://images.code.org/4d77462f3d07df6f1f5f2dc25e5d2b70-image-1495822526224.15.08.png" width="200px" />
        courseD_artist_project4_b: 若要尝试此项, 请绘制第一个雪花, 然后转向, 然后绘制第二个雪花。
      courseD_artist_project4_2018_authored_hint:
        courseD_artist_project4_a: |
          这里是五角的雪花, 在三角形的雪花前旋转36度：
          
          
          <img src="https://images.code.org/2ba023db9404f948fab655bfa7923160-image-1495822526223.14.13.png" width="200px" />
          
          这里是一组带有正方形的六边形：
          
          <img src="https://images.code.org/4d77462f3d07df6f1f5f2dc25e5d2b70-image-1495822526224.15.08.png" width="200px" />
        courseD_artist_project4_b: 若要尝试此项, 请绘制第一个雪花, 然后转向, 然后绘制第二个雪花。
      courseD_artist_project4a_authored_hint:
        courseD_artist_project4a_a: |
          这里有两个不同长度的雪花, 在一个后接着画另一个。（在两者之间转30度）
          
          <img src="https://images.code.org/45dedb51d89d3e5d0a88fe65ecbd7d7b-image-1495833855890.22.39.png" width="200px" />
      courseD_artist_project4a_2018_authored_hint:
        courseD_artist_project4a_a: |
          这里有两个不同长度的雪花, 在一个后接着画另一个。（在两者之间转30度）
          
          <img src="https://images.code.org/45dedb51d89d3e5d0a88fe65ecbd7d7b-image-1495833855890.22.39.png" width="200px" />
      courseD_artist_project5_authored_hint:
        courseD_artist_project4_a: |
          将两个六边形4个三角形画成线：
          
          <img src="https://images.code.org/37ca9779bafd2ccc5cc801f82358008e-image-1495823683964.34.09.png" width="200px" />
      courseD_artist_project5_2018_authored_hint:
        courseD_artist_project4_a: |
          将两个六边形4个三角形画成线：
          
          <img src="https://images.code.org/37ca9779bafd2ccc5cc801f82358008e-image-1495823683964.34.09.png" width="200px" />
      courseD_artist_projectTemplate_authored_hint: [ ]
      courseD_artist_projectTemplate_2018_authored_hint: [ ]
      courseD_artist_project_embedded_authored_hint: [ ]
      courseD_artist_ramp11_authored_hint:
        courseD_artist_ramp11a: 若要绘制一条边，使用`向前移动100像素`模块, 并将100更改为200。
        courseD_artist_ramp11b: |2
          若要绘制4条边，将`向前移动100像素`模块放在重复循环里面, 并确保该循环设置为绘制4次。
          
           然后别忘了画完后转向！
        courseD_artist_ramp11_c: 记住把`转向`块放到你的循环内！
      courseD_artist_ramp12_authored_hint:
        courseD_artist_ramp12_a: 你可以先画方块, 然后三角形, 或者反过来!
        courseD_artist_ramp12_b: 尝试将问题分解为两个部分, 并使用两个循环。
        courseD_artist_ramp12_c: 您可以使用`转向`模块的下拉菜单来查看所需的角度!
      courseD_bee_conditionals1_authored_hint:
        courseD_bee_conditionals1_a: 在您试着得到花蜜前，您将需要使用一个`如果`模块来查看是否有花在云下面。
      courseD_bee_conditionals10_authored_hint: [ ]
      courseD_bee_conditionals10_2018_authored_hint: [ ]
      courseD_bee_conditionals1_predict1_authored_hint:
        courseD_bee_conditionals1_a: 在您试着得到花蜜前，您将需要使用一个`如果`模块来查看是否有花在云下面。
      courseD_bee_conditionals1_predict1_2018_authored_hint:
        courseD_bee_conditionals1_a: 在您试着得到花蜜前，您将需要使用一个`如果`模块来查看是否有花在云下面。
      courseD_bee_conditionals2_authored_hint:
        courseD_bee_conditionals2_hintVid1: 需要入门帮助吗？ 看视频!
        courseD_bee_conditionals2_a: 有时那里有花，有时不会。如果您希望在两种情况下都能运行代码，请确保使用`如果`语句。
        courseD_bee_conditionals2_b: 您可以使用`重复`循环或`当前面有路时`来通过这个迷宫。
        courseD_bee_conditionals2_c: 你不必查看蜂窝，在云层下只会有花朵或空白的空间。
        courseD_bee_conditionals2_hintVid2: 观看此视频帮助解决这个难题。
      courseD_bee_conditionals2_2018_authored_hint:
        courseD_bee_conditionals2_hintVid1: 需要入门帮助吗？ 看视频!
        courseD_bee_conditionals2_a: 有时那里有花，有时不会。如果您希望在两种情况下都能运行代码，请确保使用`如果`语句。
        courseD_bee_conditionals2_b: 您可以使用`重复`循环或`当前面有路时`来通过这个迷宫。
        courseD_bee_conditionals2_c: 你不必查看蜂窝，在云层下只会有花朵或空白的空间。
        courseD_bee_conditionals2_hintVid2: 观看此视频帮助解决这个难题。
      courseD_bee_conditionals2_test_authored_hint:
        courseD_bee_conditionals2_aa: 需要帮助入门吗？ 这里是一个小提示视频。
        courseD_bee_conditionals2_a: 有时那里有花，有时不会。如果您希望在两种情况下都能运行代码，请确保使用`如果`语句。
        courseD_bee_conditionals2_b: 您可以使用`重复`循环或`当前面有路时`来通过这个迷宫。
        courseD_bee_conditionals2_c: 你不必查看蜂窝，在云层下只会有花朵或空白的空间。
        courseD_bee_conditionals2_d: 需要帮助来完成吗？ 请观看这个提示视频。
      courseD_bee_conditionals3_authored_hint:
        courseD_bee_conditionals3_hintVid1: 需要入门帮助吗？ 看视频!
        courseD_bee_conditionals3_a: 一定要使用`如果`语句来检查每个空间，看看是否有花。
        courseD_bee_conditionals3_b: 您可以使用`重复`循环或`当`循环来保持蜜蜂向前移动。用你喜欢的任何一个!
        courseD_bee_conditionals3_c: 不要害怕犯错误！即使你还没有解决这个关卡，尝试添加模块并运行代码, 看看会发生什么。
        courseD_bee_conditionals3_hintVid2: 观看此视频帮助解决这个难题。
      courseD_bee_conditionals3_2018_authored_hint:
        courseD_bee_conditionals3_hintVid1: 需要入门帮助吗？ 看视频!
        courseD_bee_conditionals3_a: 一定要使用`如果`语句来检查每个空间，看看是否有花。
        courseD_bee_conditionals3_b: 您可以使用`重复`循环或`当`循环来保持蜜蜂向前移动。用你喜欢的任何一个!
        courseD_bee_conditionals3_c: 不要害怕犯错误！即使你还没有解决这个关卡，尝试添加模块并运行代码, 看看会发生什么。
        courseD_bee_conditionals3_hintVid2: 观看此视频帮助解决这个难题。
      courseD_bee_conditionals4_authored_hint:
        courseD_bee_conditionals4_hintVid1: 需要入门帮助吗？ 看视频!
        courseD_bee_conditionals4_a: 哪怕可以看到整条路径，仍然可以当作每个空间上面有朵云来处理。
        courseD_bee_conditionals4_b: '在循环中使用`如果`语句检查每个空间是否有花蜜。 '
        courseD_bee_conditionals4_c: 使用 <xml><block type="maze_untilBlocked"/></xml>模块，您应该向前移动并找一朵花。如果有一朵花, 蜜蜂该怎么办？
        courseD_bee_conditionals4_hintVid2: 观看此视频帮助解决这个难题。
      courseD_bee_conditionals4_2018_authored_hint:
        courseD_bee_conditionals4_hintVid1: 需要入门帮助吗？ 看视频!
        courseD_bee_conditionals4_a: 哪怕可以看到整条路径，仍然可以当作每个空间上面有朵云来处理。
        courseD_bee_conditionals4_b: '在循环中使用`如果`语句检查每个空间是否有花蜜。 '
        courseD_bee_conditionals4_c: 使用 <xml><block type="maze_untilBlocked"/></xml>模块，您应该向前移动并找一朵花。如果有一朵花, 蜜蜂该怎么办？
        courseD_bee_conditionals4_hintVid2: 观看此视频帮助解决这个难题。
      courseD_bee_conditionals5_authored_hint:
        courseD_bee_conditionals5_hintVid1: 需要入门帮助吗？ 看视频!
        courseD_bee_conditionals5_a: 把矩形路径的每一条边都看成是一个路径。在外部设置一个`重复`模块的嵌套循环, 并在`当前面有路时`的内部循环。如果蜜蜂需要在每朵花旁边嗡嗡叫，它要飞过多少条路径？
        courseD_bee_conditionals5_c: 花是长方形的3条边，因此代码需要`重复3次`。在每一个重复时，`当前面有路时`，蜜蜂将需要继续沿着路径。要继续沿着这条路走下去, 蜜蜂将需要`向前移动`。在小路上, 蜜蜂需要寻找朵花。`如果有一朵花`, 蜜蜂应该`采花蜜`。
        courseD_bee_conditionals5_b: 在`当前面有路时`模块的里面, 你需要往前走开寻找朵花。你如何检查哪里是否有一朵花？如果有一朵花, 你会怎么做？
        courseD_bee_conditionals5_hintVid2: 观看此视频帮助解决这个难题。
      courseD_bee_conditionals5_2018_authored_hint:
        courseD_bee_conditionals5_hintVid1: 需要入门帮助吗？ 看视频!
        courseD_bee_conditionals5_a: 把矩形路径的每一条边都看成是一个路径。在外部设置一个`重复`模块的嵌套循环, 并在`当前面有路时`的内部循环。如果蜜蜂需要在每朵花旁边嗡嗡叫，它要飞过多少条路径？
        courseD_bee_conditionals5_c: 花是长方形的3条边，因此代码需要`重复3次`。在每一个重复时，`当前面有路时`，蜜蜂将需要继续沿着路径。要继续沿着这条路走下去, 蜜蜂将需要`向前移动`。在小路上, 蜜蜂需要寻找朵花。`如果有一朵花`, 蜜蜂应该`采花蜜`。
        courseD_bee_conditionals5_b: 在`当前面有路时`模块的里面, 你需要往前走开寻找朵花。你如何检查哪里是否有一朵花？如果有一朵花, 你会怎么做？
        courseD_bee_conditionals5_hintVid2: 观看此视频帮助解决这个难题。
      courseD_bee_conditionals6_authored_hint:
        courseD_bee_conditionals6_hintVid1: 需要入门帮助吗？ 看视频!
        courseD_bee_conditionals6_a: 请确保使用`如果`语句检查每个云下是否有蜂窝。
        courseD_bee_conditionals6_b: 在这种情况下, 你不需要查看云下的花蜜。
        courseD_bee_conditionals6_c: 是否有一个循环可以用来使代码更简单？
        courseD_bee_conditionals6_hintVid2: 观看此视频帮助解决这个难题。
      courseD_bee_conditionals6_2018_authored_hint:
        courseD_bee_conditionals6_hintVid1: 需要入门帮助吗？ 看视频!
        courseD_bee_conditionals6_a: 请确保使用`如果`语句检查每个云下是否有蜂窝。
        courseD_bee_conditionals6_b: 在这种情况下, 你不需要查看云下的花蜜。
        courseD_bee_conditionals6_c: 是否有一个循环可以用来使代码更简单？
        courseD_bee_conditionals6_hintVid2: 观看此视频帮助解决这个难题。
      courseD_bee_conditionals7_authored_hint:
        courseD_bee_conditionals7_hintVid1: 需要入门帮助吗？ 看视频!
        courseD_bee_conditionals7_a: "** 请记住: ** 这个关卡每次运行时都会改变。\n\n您需要使用条件模块 (`如果/否则`) 来通过此挑战。"
        courseD_bee_conditionals7_b: 如果云下没有一朵花, 那一定有一个蜂窝, 所以你不需要考虑存在一个空的空间的情况。
        courseD_bee_conditionals7_hintVid2: 观看此视频帮助解决这个难题。
      courseD_bee_conditionals7_2018_authored_hint:
        courseD_bee_conditionals7_hintVid1: 需要入门帮助吗？ 看视频!
        courseD_bee_conditionals7_a: "** 请记住: ** 这个关卡每次运行时都会改变。\n\n您需要使用条件模块 (`如果/否则`) 来通过此挑战。"
        courseD_bee_conditionals7_b: 如果云下没有一朵花, 那一定有一个蜂窝, 所以你不需要考虑存在一个空的空间的情况。
        courseD_bee_conditionals7_hintVid2: 观看此视频帮助解决这个难题。
      courseD_bee_conditionals7_predict2_authored_hint:
        courseD_bee_conditionals7_a: "** 请记住: ** 这个关卡每次运行时都会改变。\n\n您需要使用条件模块 (`如果/否则`) 来通过此挑战。"
      courseD_bee_conditionals7_predict2_2018_authored_hint:
        courseD_bee_conditionals7_a: "** 请记住: ** 这个关卡每次运行时都会改变。\n\n您需要使用条件模块 (`如果/否则`) 来通过此挑战。"
      courseD_bee_conditionals8_authored_hint:
        courseD_bee_conditionals8_hintVid1: 需要入门帮助吗？ 看视频!
        courseD_bee_conditionals8_a: "**记住：**这一关在每次运行的时候都会变化。\n\n你需要用一个条件模块（“如果”或“如果/否则”）来完成这个挑战。"
        courseD_bee_conditionals8_b: |-
          此关卡很棘手, 因为不能只使用一个条件来检查空白方块, 花蜜, *和* 蜂蜜。
          
          仅在路径的最后查找花蜜和蜂蜜。
        courseD_bee_conditionals8_c: 无论路途有多长, 你怎么能确保每条路都走到尽头？
        courseD_bee_conditionals8_d: |-
          即使你面前有一朵云彩, 你也不必先去看它。尝试从正方形右下角的云开始。
          
          ![](https://images.code.org/166e71553edf23bf13ecd290a8e7e721-image-1501013509361.09.09.png)
        courseD_bee_conditionals8_hintVid2: 观看此视频帮助解决这个难题。
      courseD_bee_conditionals8_2018_authored_hint:
        courseD_bee_conditionals8_hintVid1: 需要入门帮助吗？ 看视频!
        courseD_bee_conditionals8_a: "**记住：**这一关在每次运行的时候都会变化。\n\n你需要用一个条件模块（“如果”或“如果/否则”）来完成这个挑战。"
        courseD_bee_conditionals8_b: |-
          此关卡很棘手, 因为不能只使用一个条件来检查空白方块, 花蜜, *和* 蜂蜜。
          
          仅在路径的最后查找花蜜和蜂蜜。
        courseD_bee_conditionals8_c: 无论路途有多长, 你怎么能确保每条路都走到尽头？
        courseD_bee_conditionals8_d: |-
          即使你面前有一朵云彩, 你也不必先去看它。尝试从正方形右下角的云开始。
          
          ![](https://images.code.org/166e71553edf23bf13ecd290a8e7e721-image-1501013509361.09.09.png)
        courseD_bee_conditionals8_hintVid2: 观看此视频帮助解决这个难题。
      courseD_bee_conditionals9_authored_hint: [ ]
      courseD_bee_conditionals9_2018_authored_hint: [ ]
      courseD_bee_conditionals_challenge1_authored_hint:
        courseD_bee_conditionals_challenge1_a: 你能找到一条通向每一朵花和蜂窝的小路而不撞到任何树木吗？最好的路径是螺旋。
        courseD_bee_conditionals_challenge1_b: 在这个关卡中, 每个空间都可以有一朵花, 一只蜂蜜梳子, 或者什么都没有。 这意味着你在每个正方形可以重复你的`如果/否则`条件。
      courseD_bee_conditionals_challenge1_2018_authored_hint:
        courseD_bee_conditionals_challenge1_a: 你能找到一条通向每一朵花和蜂窝的小路而不撞到任何树木吗？最好的路径是螺旋。
        courseD_bee_conditionals_challenge1_b: 在这个关卡中, 每个空间都可以有一朵花, 一只蜂蜜梳子, 或者什么都没有。 这意味着你在每个正方形可以重复你的`如果/否则`条件。
      courseD_bee_conditionals_challenge2_authored_hint:
        courseD_bee_conditionals_challenge1_b: |-
          就像`如果有花`模块, 里面的代码`当花蜜数量 > 0`，只在蜜蜂在花那里的时候运行。不同的是, 里面的代码会反复运行, 直到没有花蜜。 尝试此模式：
          
          <xml> <block type="bee_whileNectarAmount">
          <title name="ARG1">nectarRemaining</title>
          <title name="OP">&gt;</title>
          <title name="ARG2">0</title> <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          </block></xml>
      courseD_bee_conditionals_challenge2_2018_authored_hint:
        courseD_bee_conditionals_challenge1_b: |-
          就像`如果有花`模块, 里面的代码`当花蜜数量 > 0`，只在蜜蜂在花那里的时候运行。不同的是, 里面的代码会反复运行, 直到没有花蜜。 尝试此模式：
          
          <xml> <block type="bee_whileNectarAmount">
          <title name="ARG1">nectarRemaining</title>
          <title name="OP">&gt;</title>
          <title name="ARG2">0</title> <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          </block></xml>
      courseD_bee_conditionals_challenge3_authored_hint:
        courseD_bee_conditionals_challenge1_b: |-
          就像`如果有花`模块, 里面的代码`当花蜜数量 > 0`，只在蜜蜂在花那里的时候运行。不同的是, 里面的代码会反复运行, 直到没有花蜜。 尝试此模式：
          
          <xml> <block type="bee_whileNectarAmount">
          <title name="ARG1">nectarRemaining</title>
          <title name="OP">&gt;</title>
          <title name="ARG2">0</title> <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          </block></xml>
      courseD_bee_debugging1_authored_hint:
        courseD_bee_debugging1_a: |-
          使用"步进"按钮来查看在第一步是否一切都正确。 
          
          那第二步呢？
          
          哪里出问题了？
        courseD_bee_debugging1_b: 是否看到了可以使用`重复`循环来简化事情的规律？
      courseD_bee_debugging2_authored_hint:
        courseD_bee_debugging2_a: |-
          使用"步进"按钮来查看在第一步是否一切都正确。
          
          那第二步呢？
          
          哪里出问题了？
        courseD_bee_debugging2_b: "看到规律了吗？请尝试使用嵌套循环来通过这个关卡。\n\n![](https://images.code.org/72fbb8a06937479599b12804f990a0f3-image-1501012383369.50.27.png)"
      courseD_bee_debugging3_authored_hint:
        courseD_bee_debugging3_a: 蜜蜂是不是在哪个地方做了什么不合道理的事？当您更改那个模块后会发生什么？
        courseD_bee_debugging3_b: 尝试使用嵌套循环简化代码。
      courseD_bee_debugging4_authored_hint:
        courseD_bee_debugging4_a: "尝试在一行中多次使用调试过程。\n\n是什么导致了第一个问题？\n\n一旦问题解决了，是什么地方错了？"
        courseD_bee_debugging4_b: "如果很难弄清楚如何制作楼梯的步进模式, 请尝试用手指跟踪它并大声说出指令。\n\n别忘了指出转弯的方向!"
      courseD_bee_debugging5_authored_hint:
        courseD_bee_debugging5_a: |-
          开始只看第一个循环。
          
          它是做什么的？
          
          它应该做什么？
          
          那告诉您什么？
        courseD_bee_debugging5_b: 当第一个循环按照所希望的方式进行时，代码中还剩下什么？
        courseD_bee_debugging5_c: |-
          尝试将剩余的循环环绕在完成代码的其余部分。它现在可以工作吗？ 
          
          如果没有, 还有什么地方错了？
      courseD_bee_debugging6_authored_hint:
        courseD_bee_debugging6_a: |-
          尝试使用"步进"按钮运行代码。是否一切在第一步的时候都是好？ 
          
          那么第二步呢？ 
          
          哪里错了？
        courseD_bee_debugging6_b: 看起来所有正确的步骤都在这里了，你只是需要更多。如何能多次重复`采花蜜`和`酿蜂蜜`？
      courseD_bee_debugging7_authored_hint:
        courseD_bee_debugging7_a: "尝试使用\"步进\"按钮。是否在第一步的时候一切都正确？\n\n那么第二步呢？\n\n哪里出错了？  "
        courseD_bee_debugging7_b: 如果需要发生几次, 请尝试添加一个`重复`循环。
      courseD_bee_debugging8_authored_hint:
        courseD_bee_debugging8_a: 您是否看到可以使用循环来简化的规律？
        courseD_bee_debugging8_b: 尝试使用嵌套循环使得代码更短。
      courseD_bee_debugging9_authored_hint:
        courseD_bee_debugging9_a: 有几种方法可以解决这个问题...但它们都需要转弯！
        courseD_bee_debugging9_b: 弄清楚将如何通过这个关卡, 然后逐步移动, 尝试使代码与你头脑所想相匹配。
        courseD_bee_debugging9_c: "想象一下通向花朵的这些楼梯台阶。\n\n![](https://images.code.org/d3dfd710961b9ff8571816a97d76ae46-image-1501012931437.59.18.png)\n\n你是否可以使用工作区和工具箱中的内容来构建其中的一个？\n\n"
      courseD_bee_debugging9_predict1_authored_hint: [ ]
      courseD_bee_debugging_challenge1_authored_hint:
        courseD_bee_debugging_challenge1_a: 为什么这个程序的前半部分工作？考虑一下为什么蜜蜂需要向后移动。蜜蜂每次在花上移动时采集多少花蜜？
        courseD_bee_debugging_challenge1_b: 在回来的路上, 让蜜蜂遵循同样的模式。蜜蜂每次在蜂窝上移动需要制作多少蜂蜜？
        courseD_bee_debugging_challenge1_c: |-
          当蜜蜂移到最下面一行，让它重复这些命令：
          
          * 重复2次:
          * 向前移动
          * 酿3个蜂蜜
          * 向后移动
      courseD_bee_debugging_challenge1_2018_authored_hint:
        courseD_bee_debugging_challenge1_a: 为什么这个程序的前半部分工作？考虑一下为什么蜜蜂需要向后移动。蜜蜂每次在花上移动时采集多少花蜜？
        courseD_bee_debugging_challenge1_b: 在回来的路上, 让蜜蜂遵循同样的模式。蜜蜂每次在蜂窝上移动需要制作多少蜂蜜？
        courseD_bee_debugging_challenge1_c: |-
          当蜜蜂移到最下面一行，让它重复这些命令：
          
          * 重复2次:
          * 向前移动
          * 酿3个蜂蜜
          * 向后移动
      courseD_bee_debugging_challenge1a_authored_hint:
        courseD_bee_debugging_challenge1_a: 为什么这个程序的前半部分工作？考虑一下为什么蜜蜂需要向后移动。蜜蜂每次在花上移动时采集多少花蜜？
        courseD_bee_debugging_challenge1_b: 为了通过这个关卡, 让蜜蜂遵循收集花蜜相同的模式来制作蜂蜜。
        courseD_bee_debugging_challenge1_c: |-
          在蜜蜂到了最下面一行后，请让它重复这些指令：
          
          <xml><block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_honey"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_move">
          <title name="DIR">moveBackward</title>
          </block>
          </next>
          </block></xml>
      courseD_bee_debugging_challenge2_authored_hint:
        courseD_bee_debugging_challenge1_a: 为什么这个程序的前半部分可以运作？考虑一下为什么蜜蜂需要向后移动。蜜蜂每次在花上移动时采集多少花蜜？
        courseD_bee_debugging_challenge1_b: 在回来的路上, 让蜜蜂遵循同样的模式。蜜蜂每次在蜂窝上移动需要制作多少蜂蜜？
        courseD_bee_debugging_challenge1_c: |-
          当蜜蜂移到最下面一行，让它重复这些命令：
          
          * 重复2次:
          * 向前移动
          * 酿3个蜂蜜
          * 向后移动
      courseD_bee_nestedLoops1_authored_hint:
        courseD_bee_nestedLoops1_a: 不工作？ 请尝试使用 ""步进"" 按钮来逐行查证。
        courseD_bee_nestedLoops1_b: 请先尝试为正方形的一条边编写代码。你能循环来得到所有的花蜜吗？
        courseD_bee_nestedLoops1_c: 一旦你在一个有花朵的正方形的时候记得使用`采花蜜`模块。
      courseD_bee_nestedLoops1_2018_authored_hint:
        courseD_bee_nestedLoops1_a: 不工作？ 请尝试使用 ""步进"" 按钮来逐行查证。
        courseD_bee_nestedLoops1_b: 请先尝试为正方形的一条边编写代码。你能循环来得到所有的花蜜吗？
        courseD_bee_nestedLoops1_c: 一旦你在一个有花朵的正方形的时候记得使用`采花蜜`模块。
      courseD_bee_nestedLoops1a_authored_hint:
        courseD_bee_nestedLoops1_a: 不工作？ 请尝试使用 ""步进"" 按钮来逐行查证。
        courseD_bee_nestedLoops1_c: 一旦你在一个有花朵的正方形的时候记得使用`采花蜜`模块。
      courseD_bee_nestedLoops1a_2018_authored_hint:
        courseD_bee_nestedLoops1_a: 不工作？ 请尝试使用 ""步进"" 按钮来逐行查证。
        courseD_bee_nestedLoops1_c: 一旦你在一个有花朵的正方形的时候记得使用`采花蜜`模块。
      courseD_bee_nestedLoops2_authored_hint:
        courseD_bee_nestedLoops2_a: 要通过此关卡，需要在另一个里面嵌套一个`重复`循环。
        courseD_bee_nestedLoops2_b: 如果您无法确定将循环放在何处, 请尝试逐步编写代码并查找规律。
        courseD_bee_nestedLoops2_c: 请记住, 您可以在一个循环中放置多个模块。
      courseD_bee_nestedLoops2_2018_authored_hint:
        courseD_bee_nestedLoops2_a: 要通过此关卡，需要在另一个里面嵌套一个`重复`循环。
        courseD_bee_nestedLoops2_b: 如果您无法确定将循环放在何处, 请尝试逐步编写代码并查找规律。
        courseD_bee_nestedLoops2_c: 请记住, 您可以在一个循环中放置多个模块。
      courseD_bee_nestedLoops2_predict1_authored_hint: [ ]
      courseD_bee_nestedLoops2_predict1_2018_authored_hint: [ ]
      courseD_bee_nestedLoops3_authored_hint:
        grade4_bee_nestedLoops1_a: 如果不了解如何在此处使用嵌套循环, 请尝试在一张纸上逐步写出说明。圈出所看到的规律。
      courseD_bee_nestedLoops5_authored_hint:
        grade4_bee_nestedLoops4_a: 尝试逐行写出代码，看看是否可以发现重复，并可以缩短代码的地方!
        grade4_bee_nestedLoops4_b: |-
          需要一个嵌套循环来前进和得到花蜜, 但在最后只要一个循环来收集蜂蜜。
          
          总之, 您应该使用3个循环。
      courseD_bee_nestedLoops6_authored_hint: [ ]
      courseD_bee_nestedLoops6_2018_authored_hint:
        courseD_maze_nestedLoops6_a: 如果被难住了，请试着在纸上先不用循环写下代码并寻找规律。
        courseD_maze_nestedLoops6_b: 嵌套的`重复`循环可以帮助减少使用的模块数量。
        courseD_maze_nestedLoops6_c: 需要两组嵌套的`重复`循环来通过这个关卡。
      courseD_bee_nestedLoops7_authored_hint:
        courseD_bee_nestedLoops7_a: 需要在另一个里面有着‘`向前移动`模块的`重复`循环的里面重复`采花蜜`。
        courseD_bee_nestedLoops7_b: 需要使用所有的三个`重复`模块来通过这个关卡。
        courseD_bee_nestedLoops7_c: |
          将模块嵌套三层深，像这样：
          
          - 重复4次
          - 重复3次
          - 重复12次
          - 采花蜜
          - 向前移动
          - 向右转
      courseD_bee_nestedLoops7_2018_authored_hint:
        courseD_bee_nestedLoops7_a: 需要在另一个里面有着‘`向前移动`模块的`重复`循环的里面重复`采花蜜`。
        courseD_bee_nestedLoops7_b: 需要使用所有的三个`重复`模块来通过这个关卡。
        courseD_bee_nestedLoops7_c: |
          将模块嵌套三层深，像这样：
          
          - 重复4次
          - 重复3次
          - 重复12次
          - 采花蜜
          - 向前移动
          - 向右转
      courseD_bee_nestedLoops8_authored_hint: [ ]
      courseD_bee_nestedLoops8_2018_authored_hint: [ ]
      courseD_bee_nestedLoops9_authored_hint: [ ]
      courseD_bee_nestedLoops9_2018_authored_hint: [ ]
      courseD_bee_nestedLoops9_predict2_authored_hint: [ ]
      courseD_bee_nestedLoops9_predict2_2018_authored_hint: [ ]
      courseD_bee_nested_loops_challenge1_authored_hint:
        courseD_bee_nested_loops_challenge2_a: 不要忘记, 你可以`重复`一个单一的命令或较长的模式。你甚至可以`重复`一个`重复`模块!
        courseD_bee_nested_loops_challenge2_b: 要获得所有4个宝石, 首先使用一个循环离开中心。向左或向右转, 然后使用嵌套循环从第一堆宝藏移动到第二个。如果重复嵌套循环足够多次, 收集器将在 * 整个 * 洞周围移动!
        courseD_bee_nested_loops_challenge2_c: 到达所有宝藏的最短程序只使用一个`收集`块和两个转弯。
      courseD_bee_nested_loops_challenge2_authored_hint:
        courseD_bee_nested_loops_challenge2_a: 不要忘记, 你可以`重复`一个单一的命令或较长的模式。你甚至可以`重复`一个`重复`模块!
        courseD_bee_nested_loops_challenge2_b: 要获得所有4个宝石, 首先使用一个循环离开中心。然后向左或向右, 使用嵌套循环从第一堆宝藏移动到第二个。
        courseD_bee_nested_loops_challenge2_c: 如果重复嵌套循环足够多次, 收集器将在*整个*洞周围移动!
        courseD_bee_nested_loops_challenge2_d: 到达所有宝藏的最短程序只使用一个`收集`块和两个转弯。
      courseD_bounce_events10s_authored_hint:
        courseD_bounce_events10s_a: |-
          您应该在代码中同时拥有这些事件：
          <xml><block type="bounce_whenBallInGoal" deletable="false"><next><block type="bounce_playSound"><title name="SOUND">swish</title><next><block type="bounce_incrementPlayerScore"></block></next></block></next></block><block type="bounce_whenBallMissesPaddle" deletable="false"><next><block type="bounce_playSound"><title name="SOUND">whistle</title><next><block type="bounce_incrementOpponentScore"></block></next></block></next></block</xml>
      courseD_bounce_events10s_2018_authored_hint:
        courseD_bounce_events10s_a: |-
          您应该在代码中同时拥有这些事件：
          <xml><block type="bounce_whenBallInGoal" deletable="false"><next><block type="bounce_playSound"><title name="SOUND">swish</title><next><block type="bounce_incrementPlayerScore"></block></next></block></next></block><block type="bounce_whenBallMissesPaddle" deletable="false"><next><block type="bounce_playSound"><title name="SOUND">whistle</title><next><block type="bounce_incrementOpponentScore"></block></next></block></next></block</xml>
      courseD_bounce_events11s_authored_hint:
        courseD_bounce_events11s_a: 当游戏开始时, 当你击中篮筐时, 当手错过球时, 你将要掷球。
      courseD_bounce_events11s_2018_authored_hint:
        courseD_bounce_events11s_a: 当游戏开始时, 当你击中篮筐时, 当手错过球时, 你将要掷球。
      courseD_bounce_events12s_authored_hint:
        courseD_bounce_events12s_a: 你可以通过将这些方块附加到`当运行时`事件来加快篮球或手的速度。
        courseD_bounce_events12s_b: 尝试使每一个投球得2分, 并把球队的标志改为你家乡的。
      courseD_bounce_events12s_2018_authored_hint:
        courseD_bounce_events12s_a: 你可以通过将这些方块附加到`当运行时`事件来加快篮球或手的速度。
        courseD_bounce_events12s_b: 尝试使每一个投球得2分, 并把球队的标志改为你家乡的。
      courseD_bounce_events1s_authored_hint:
        courseD_bounce_events1s_a: "您需要将`向左移动`模块添加到`当按左方向键时`事件使此游戏工作：\n\n<xml> <block type=\"bounce_whenLeft\" deletable=\"false\" x=\"20\" y=\"20\">\n<next>\n<block type=\"bounce_moveLeft\"/>\n</next>\n</block>\n\n</xml>"
        courseD_bounce_events1s_b: 不要忘记按 "运行", 并让手够到篮筐来解决这个关卡。
      courseD_bounce_events1s_2018_authored_hint:
        courseD_bounce_events1s_a: "您需要将`向左移动`模块添加到`当按左方向键时`事件使此游戏工作：\n\n<xml> <block type=\"bounce_whenLeft\" deletable=\"false\" x=\"20\" y=\"20\">\n<next>\n<block type=\"bounce_moveLeft\"/>\n</next>\n</block>\n\n</xml>"
        courseD_bounce_events1s_b: 不要忘记按 "运行", 并让手够到篮筐来解决这个关卡。
      courseD_bounce_events2s_authored_hint:
        courseD_bounce_events2s_a: |-
          您需要用两组 `向前移动`事件来让它运作：
          
          <xml>
          <block type="bounce_whenLeft" deletable="false" x="20" y="20">
          <next>
          <block type="bounce_moveLeft"/>
          </next>
          </block>
          <block type="bounce_whenRight" deletable="false" x="180" y="20">
          <next>
          <block type="bounce_moveRight"/>
          </next>
          </block>
          </xml>
      courseD_bounce_events2s_2018_authored_hint:
        courseD_bounce_events2s_a: |-
          您需要用两组 `向前移动`事件来让它运作：
          
          <xml>
          <block type="bounce_whenLeft" deletable="false" x="20" y="20">
          <next>
          <block type="bounce_moveLeft"/>
          </next>
          </block>
          <block type="bounce_whenRight" deletable="false" x="180" y="20">
          <next>
          <block type="bounce_moveRight"/>
          </next>
          </block>
          </xml>
      courseD_bounce_events5s_authored_hint:
        courseD_bounce_events5s_a: 你不需要移动手来解决这个关卡。
        courseD_bounce_events5s_b: |-
          确保已将此代码添加到工作区：
          <xml> <block type="bounce_whenPaddleCollided" deletable="false"> <next> <block type="bounce_bounceBall"/></next></block></xml>
      courseD_bounce_events5s_2018_authored_hint:
        courseD_bounce_events5s_a: 你不需要移动手来解决这个关卡。
        courseD_bounce_events5s_b: |-
          确保已将此代码添加到工作区：
          <xml> <block type="bounce_whenPaddleCollided" deletable="false"> <next> <block type="bounce_bounceBall"/></next></block></xml>
      courseD_bounce_events6s_authored_hint:
        courseD_bounce_events6s_a: |-
          你有类似这样的事件吗？
          <xml><block type="bounce_whenWallCollided" deletable="false"><next><block type="bounce_bounceBall"></block></next></block></block></xml>
        courseD_bounce_events6s_b: 如果你写的代码正确, 你不必移动手来获胜。
      courseD_bounce_events6s_2018_authored_hint:
        courseD_bounce_events6s_a: |-
          你有类似这样的事件吗？
          <xml><block type="bounce_whenWallCollided" deletable="false"><next><block type="bounce_bounceBall"></block></next></block></block></xml>
        courseD_bounce_events6s_b: 如果你写的代码正确, 你不必移动手来获胜。
      courseD_bounce_events7s_authored_hint:
        courseD_bounce_events7s_a: 如果你喜欢，你可以在更多的地方添加声音!
      courseD_bounce_events7s_2018_authored_hint:
        courseD_bounce_events7s_a: 如果你喜欢，你可以在更多的地方添加声音!
      courseD_bounce_events_template_authored_hint: [ ]
      courseD_bounce_events_template_2018_authored_hint: [ ]
      courseD_collector_debugging1_authored_hint:
        courseD_collector_debugging1_a: |-
          使用"步进"按钮来查看在第一步是否一切都正确。 
          
          那第二步呢？
          
          哪里出问题了？
        courseD_collector_debugging1_b: 是否看到了可以使用`重复`循环来简化事情的规律？
        courseD_collector_debugging1_c: '记住, 一旦你到了那里, 就用`收集`模块去捡宝藏。  '
      courseD_collector_debugging10_predict1_authored_hint:
        courseD_collector_debugging9_a: 有几种方法可以解决这个问题...但它们都需要转弯！
        courseD_collector_debugging9_b: 弄清楚将如何通过这个关卡, 然后逐步移动, 尝试使代码与你头脑所想相匹配。
      courseD_collector_debugging10_predict1_2018_authored_hint:
        courseD_collector_debugging9_a: 有几种方法可以解决这个问题...但它们都需要转弯！
        courseD_collector_debugging9_b: 弄清楚将如何通过这个关卡, 然后逐步移动, 尝试使代码与你头脑所想相匹配。
      courseD_collector_debugging1_2018_authored_hint:
        courseD_collector_debugging1_a: |-
          使用"步进"按钮来查看在第一步是否一切都正确。 
          
          那第二步呢？
          
          哪里出问题了？
        courseD_collector_debugging1_b: 是否看到了可以使用`重复`循环来简化事情的规律？
        courseD_collector_debugging1_c: '记住, 一旦你到了那里, 就用`收集`模块去捡宝藏。  '
      courseD_collector_debugging1a_authored_hint:
        courseD_collector_debugging1_a: |-
          使用"步进"按钮来查看在第一步是否一切都正确。 
          
          那第二步呢？
          
          哪里出问题了？
        courseD_collector_debugging1_c: '记住, 一旦你到了那里, 就用`收集`模块去捡宝藏。  '
      courseD_collector_debugging1a_2018_authored_hint:
        courseD_collector_debugging1_a: |-
          使用"步进"按钮来查看在第一步是否一切都正确。 
          
          那第二步呢？
          
          哪里出问题了？
        courseD_collector_debugging1_c: '记住, 一旦你到了那里, 就用`收集`模块去捡宝藏。  '
      courseD_collector_debugging2_authored_hint:
        courseD_collector_debugging2_a: |-
          使用"步进"按钮来查看在第一步是否一切都正确。 
          
          那第二步呢？
          
          哪里出问题了？
        courseD_collector_debugging2_b: 是否看到了可以使用`重复`循环来简化事情的规律？
        courseD_collector_debugging2_c: 尝试为这一模式的一面收集宝藏。你能重复这个在两边都收集宝藏吗？
      courseD_collector_debugging2_2018_authored_hint:
        courseD_collector_debugging2_a: |-
          使用"步进"按钮来查看在第一步是否一切都正确。 
          
          那第二步呢？
          
          哪里出问题了？
        courseD_collector_debugging2_b: 是否看到了可以使用`重复`循环来简化事情的规律？
        courseD_collector_debugging2_c: 尝试为这一模式的一面收集宝藏。你能重复这个在两边都收集宝藏吗？
      courseD_collector_debugging2a_authored_hint:
        courseD_collector_debugging2a_a: |-
          使用"步进"按钮来查看在第一步是否一切都正确。 
          
          那第二步呢？
          
          哪里出问题了？
        courseD_collector_debugging2a_c: |-
          会发生什么？ 应该发生什么？ 那告诉你什么？
      courseD_collector_debugging2a_2018_authored_hint:
        courseD_collector_debugging2a_a: |-
          使用"步进"按钮来查看在第一步是否一切都正确。 
          
          那第二步呢？
          
          哪里出问题了？
        courseD_collector_debugging2a_c: |-
          会发生什么？ 应该发生什么？ 那告诉你什么？
      courseD_collector_debugging3_authored_hint:
        courseD_collector_debugging3_a: 劳雷尔有在那个地方做了什么不对的事吗？当您更改这些块时会发生什么情况？
        courseD_collector_debugging3_b: 尝试使用嵌套循环简化代码。
      courseD_collector_debugging3_2018_authored_hint:
        courseD_collector_debugging3_a: 劳雷尔有在那个地方做了什么不对的事吗？当您更改这些块时会发生什么情况？
        courseD_collector_debugging3_b: 尝试使用嵌套循环简化代码。
      courseD_collector_debugging3a_authored_hint:
        courseD_collector_debugging3_a: 劳雷尔有在那个地方做了什么不对的事吗？当您更改这些块时会发生什么情况？
      courseD_collector_debugging3a_2018_authored_hint:
        courseD_collector_debugging3_a: 劳雷尔有在那个地方做了什么不对的事吗？当您更改这些块时会发生什么情况？
      courseD_collector_debugging4_authored_hint:
        courseD_collector_debugging4_a: "尝试在一行中多次使用调试过程。\n\n是什么导致了第一个问题？\n\n一旦问题解决了，是什么地方错了？"
        courseD_collector_debugging4_b: "如果很难弄清楚如何制作楼梯的步进模式, 请尝试用手指跟踪它并大声说出指令。\n\n别忘了指出转弯的方向!"
        courseD_collector_debugging4_c: 此循环只缺少一个模块。你能找出是哪一个吗？
      courseD_collector_debugging4_2018_authored_hint:
        courseD_collector_debugging4_a: "尝试在一行中多次使用调试过程。\n\n是什么导致了第一个问题？\n\n一旦问题解决了，是什么地方错了？"
        courseD_collector_debugging4_b: "如果很难弄清楚如何制作楼梯的步进模式, 请尝试用手指跟踪它并大声说出指令。\n\n别忘了指出转弯的方向!"
        courseD_collector_debugging4_c: 此循环只缺少一个模块。你能找出是哪一个吗？
      courseD_collector_debugging4a_authored_hint:
        courseD_collector_debugging4_a: "尝试在一行中多次使用调试过程。\n\n是什么导致了第一个问题？\n\n一旦问题解决了，是什么地方错了？"
        courseD_collector_debugging4_b: "如果很难弄清楚如何制作楼梯的步进模式, 请尝试用手指跟踪它并大声说出指令。\n\n别忘了指出转弯的方向!"
      courseD_collector_debugging4a_2018_authored_hint:
        courseD_collector_debugging4_a: "尝试在一行中多次使用调试过程。\n\n是什么导致了第一个问题？\n\n一旦问题解决了，是什么地方错了？"
        courseD_collector_debugging4_b: "如果很难弄清楚如何制作楼梯的步进模式, 请尝试用手指跟踪它并大声说出指令。\n\n别忘了指出转弯的方向!"
      courseD_collector_debugging5_authored_hint:
        courseD_collector_debugging5_a: |-
          开始只看第一个循环。
          
          它是做什么的？
          
          它应该做什么？
          
          那告诉您什么？
        courseD_collector_debugging5_b: 当第一个循环按照所希望的方式进行时，代码中还剩下什么？
      courseD_collector_debugging5_2018_authored_hint:
        courseD_collector_debugging5_a: |-
          开始只看第一个循环。
          
          它是做什么的？
          
          它应该做什么？
          
          那告诉您什么？
        courseD_collector_debugging5_b: 当第一个循环按照所希望的方式进行时，代码中还剩下什么？
      courseD_collector_debugging5a_authored_hint:
        courseD_collector_debugging5a_a: |-
          它是做什么用的？ 它应该怎么做？ 那告诉你什么？
        courseD_collector_debugging5a_b: 一旦你收集了第一行宝藏, 你的代码还剩下什么？
      courseD_collector_debugging5a_2018_authored_hint:
        courseD_collector_debugging5a_a: |-
          它是做什么用的？ 它应该怎么做？ 那告诉你什么？
        courseD_collector_debugging5a_b: 一旦你收集了第一行宝藏, 你的代码还剩下什么？
      courseD_collector_debugging6_authored_hint:
        courseD_collector_debugging6_a: |-
          尝试使用"步进"按钮运行代码。是否一切在第一步的时候都是好？ 
          
          那么第二步呢？ 
          
          哪里错了？
        courseD_collector_debugging6_b: 看起来所有正确的步骤都在这里, 你只是需要更多。 你如何多次重复`收集`？
      courseD_collector_debugging6_2018_authored_hint:
        courseD_collector_debugging6_a: |-
          尝试使用"步进"按钮运行代码。是否一切在第一步的时候都是好？ 
          
          那么第二步呢？ 
          
          哪里错了？
        courseD_collector_debugging6_b: 看起来所有正确的步骤都在这里, 你只是需要更多。 你如何多次重复`收集`？
      courseD_collector_debugging6a_authored_hint:
        courseD_collector_debugging6_a: |-
          尝试使用"步进"按钮运行代码。是否一切在第一步的时候都是好？ 
          
          那么第二步呢？ 
          
          哪里错了？
        courseD_collector_debugging6_b: 看起来您需要的所有模块都在工作区中。如果事情变得太困惑, 试着点击 "重新开始"。
      courseD_collector_debugging6a_2018_authored_hint:
        courseD_collector_debugging6_a: |-
          尝试使用"步进"按钮运行代码。是否一切在第一步的时候都是好？ 
          
          那么第二步呢？ 
          
          哪里错了？
        courseD_collector_debugging6_b: 看起来您需要的所有模块都在工作区中。如果事情变得太困惑, 试着点击 "重新开始"。
      courseD_collector_debugging7_authored_hint:
        courseD_collector_debugging7_a: |-
          尝试使用"步进"按钮运行代码。是否一切在第一步的时候都是好？ 
          
          那么第二步呢？ 
          
          哪里错了？
        courseD_collector_debugging7_b: 如果需要发生几次, 请尝试添加一个`重复`循环。
        courseD_collector_debugging7_c: 如果您遇到麻烦, 请尝试在一张纸上写下步骤, 然后将这些块依该顺序放置。
      courseD_collector_debugging8_authored_hint:
        courseD_collector_debugging8_a: 您是否看到可以使用循环来简化的规律？
        courseD_collector_debugging8_b: 尝试使用嵌套循环使得代码更短。
      courseD_collector_debugging8_2018_authored_hint:
        courseD_collector_debugging8_a: 您是否看到可以使用循环来简化的规律？
        courseD_collector_debugging8_b: 尝试使用嵌套循环使得代码更短。
      courseD_collector_debugging8a_authored_hint: [ ]
      courseD_collector_debugging8a_2018_authored_hint: [ ]
      courseD_collector_debugging9_authored_hint:
        courseD_collector_debugging9_a: 有几种方法可以解决这个问题...但它们都需要转弯！
        courseD_collector_debugging9_b: 弄清楚将如何通过这个关卡, 然后逐步移动, 尝试使代码与你头脑所想相匹配。
      courseD_collector_debugging9_2018_authored_hint:
        courseD_collector_debugging9_a: 有几种方法可以解决这个问题...但它们都需要转弯！
        courseD_collector_debugging9_b: 弄清楚将如何通过这个关卡, 然后逐步移动, 尝试使代码与你头脑所想相匹配。
      courseD_collector_debugging9a_authored_hint: [ ]
      courseD_collector_debugging9a_2018_authored_hint: [ ]
      courseD_collector_debugging_challenge2_authored_hint:
        courseD_collector_debugging_challenge2_a: "从只从前**两堆**里收集头**两个**宝石开始。\n\n![](https://images.code.org/8493c16a5b913b91e28b36eb2b280b8c-image-1494775939149.25.04 AM copy.png)\n用这些模块。\n\n<xml>\n<block type=\"collector_collect\"></block>\n<block type=\"controls_repeat\" limit=\"2\">\n<title name=\"TIMES\">2</title>\n</block>\n<block type=\"maze_move\" x=\"175px\" y=\"17px\">\n<title name=\"DIR\">moveForward</title>\n\n</block>\n\n\n<block type=\"controls_repeat\" limit=\"2\" x=\"175px\" y=\"56px\">\n<title name=\"TIMES\">2</title>\n</block>\n\n\n\n</xml>"
        courseD_collector_debugging_challenge2_b: "接下来, 在此行中收集剩余的宝石。 \n\n![](https://images.code.org/22fff9fb20a50beaf4800aa022a5deb0-image-1494775944657.25.04 AM.png)\nAdd these blocks to your program.\n\n<xml><block type=\"maze_move\">\n<title name=\"DIR\">moveBackward</title>\n</block>\n<block type=\"controls_repeat\">\n<title name=\"TIMES\">4</title>\n<statement name=\"DO\">\n\n</statement>\n</block>\n</xml>"
        courseD_collector_debugging_challenge2_c: "最后, 收集剩余的宝藏。将这些块添加到程序中。\n\n<xml>\n<block type=\"maze_turn\">\n<title name=\"DIR\">turnRight</title>\n</block>\n<block type=\"controls_repeat\">\n<title name=\"TIMES\">4</title>\n<statement name=\"DO\">\n\n</statement>\n</block>\n\n</xml>"
        courseD_collector_debugging_challenge2_d: |-
          这里是这个关卡的完整解决方案。
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat">
          <title name="TIMES">4</title>
          <statement name="DO">
          <block type="controls_repeat">
          <title name="TIMES">4</title>
          <statement name="DO">
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="collector_collect"/>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_move">
          <title name="DIR">moveBackward</title>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </xml>
      courseD_collector_debugging_challenge2_2018_authored_hint:
        courseD_collector_debugging_challenge2_a: "从只从前**两堆**里收集头**两个**宝石开始。\n\n![](https://images.code.org/8493c16a5b913b91e28b36eb2b280b8c-image-1494775939149.25.04 AM copy.png)\n用这些模块。\n\n<xml>\n<block type=\"collector_collect\"></block>\n<block type=\"controls_repeat\" limit=\"2\">\n<title name=\"TIMES\">2</title>\n</block>\n<block type=\"maze_move\" x=\"175px\" y=\"17px\">\n<title name=\"DIR\">moveForward</title>\n\n</block>\n\n\n<block type=\"controls_repeat\" limit=\"2\" x=\"175px\" y=\"56px\">\n<title name=\"TIMES\">2</title>\n</block>\n\n\n\n</xml>"
        courseD_collector_debugging_challenge2_b: "接下来, 在此行中收集剩余的宝石。 \n\n![](https://images.code.org/22fff9fb20a50beaf4800aa022a5deb0-image-1494775944657.25.04 AM.png)\nAdd these blocks to your program.\n\n<xml><block type=\"maze_move\">\n<title name=\"DIR\">moveBackward</title>\n</block>\n<block type=\"controls_repeat\">\n<title name=\"TIMES\">4</title>\n<statement name=\"DO\">\n\n</statement>\n</block>\n</xml>"
        courseD_collector_debugging_challenge2_c: "最后, 收集剩余的宝藏。将这些块添加到程序中。\n\n<xml>\n<block type=\"maze_turn\">\n<title name=\"DIR\">turnRight</title>\n</block>\n<block type=\"controls_repeat\">\n<title name=\"TIMES\">4</title>\n<statement name=\"DO\">\n\n</statement>\n</block>\n\n</xml>"
        courseD_collector_debugging_challenge2_d: |-
          这里是这个关卡的完整解决方案。
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat">
          <title name="TIMES">4</title>
          <statement name="DO">
          <block type="controls_repeat">
          <title name="TIMES">4</title>
          <statement name="DO">
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="collector_collect"/>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_move">
          <title name="DIR">moveBackward</title>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </xml>
      courseD_collector_nested_loops_challenge2_authored_hint:
        courseD_bee_nested_loops_challenge2_a: 不要忘记, 你可以`重复`一个单一的命令或较长的模式。你甚至可以`重复`一个`重复`模块!
        courseD_bee_nested_loops_challenge2_b: 要获得所有4个宝石, 首先使用一个循环离开中心。向左或向右转, 然后使用嵌套循环从第一堆宝藏移动到第二个。如果重复嵌套循环足够多次, 收集器将在 * 整个 * 洞周围移动!
        courseD_bee_nested_loops_challenge2_c: 到达所有宝藏的最短程序只使用一个`收集`块和两个转弯。
        courseD_bee_nested_loops_challenge2_d: |-
          ** 解决方案: *
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseD_collector_nested_loops_challenge2_2018_authored_hint:
        courseD_bee_nested_loops_challenge2_a: 不要忘记, 你可以`重复`一个单一的命令或较长的模式。你甚至可以`重复`一个`重复`模块!
        courseD_bee_nested_loops_challenge2_b: 要获得所有4个宝石, 首先使用一个循环离开中心。向左或向右转, 然后使用嵌套循环从第一堆宝藏移动到第二个。如果重复嵌套循环足够多次, 收集器将在 * 整个 * 洞周围移动!
        courseD_bee_nested_loops_challenge2_c: 到达所有宝藏的最短程序只使用一个`收集`块和两个转弯。
        courseD_bee_nested_loops_challenge2_d: |-
          ** 解决方案: *
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseD_collector_nested_loops_challenge2a_authored_hint:
        courseD_collector_nested_loops_challenge2a_a: 不要忘记, 你可以`重复`一个单一的命令或较长的模式。你甚至可以`重复`一个`重复`模块!
        courseD_collector_nested_loops_challenge2a_b: 你能想出如何使用不多于得到两个宝石所需要的模块，来得到所有的四个宝石吗？
      courseD_collector_ramp10_authored_hint:
        courseD_artist_ramp10_a: |-
          不要在每边使用四个`向前移动`向前移动块, 尝试把一个`向前移动`模块放到` 重复`循环里面, 就像这样：<xml><block type="controls_repeat">
          <title name="TIMES">4</title>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          </block></xml>
        courseD_artist_ramp10_b: 别忘了收集一块财宝, 然后转身在广场的新一边开始!
        courseD_artist_ramp10_c: 如果你想简化你的代码, 你可以把一个循环套到另一个里面! 这称为 ** 嵌套循环 **。
      courseD_collector_ramp8_authored_hint:
        courseD_collector_ramp8_a: 当你到达一个有宝藏的正方形时, 用`收集`来拾起它。对于这个关卡, 你需要不止一次收集宝藏!
        courseD_collector_ramp8_b: 如果你想简化你的代码，你实际上可以把一个重复循环放到另一个里！这称为 **嵌套循环**。
      courseD_collector_ramp9_authored_hint:
        courseD_collector_ramp9_a: 先把劳雷尔移到第一个宝藏, 然后再收集。你能重复这个序列来得到第二堆吗？
        courseD_collector_ramp9_b: 如果你想简化你的代码, 你可以把一个重复循环套在另一个里面! 这称为 ** 嵌套循环 **。
      courseD_collector_until_challenge1_authored_hint: [ ]
      courseD_debugging_1_authored_hint:
        courseD_debugging_1_a: |-
          使用"步进"按钮来查看在第一步是否一切都正确。 
          
          那第二步呢？
          
          哪里出问题了？
        courseD_debugging_1_b: 是否看到了可以使用`重复`循环来简化事情的规律？
      courseD_debugging_2_authored_hint:
        courseD_debugging_2_a: |-
          使用"步进"按钮来查看在第一步是否一切都正确。 
          
          那第二步呢？
          
          哪里出问题了？
        courseD_debugging_2_b: 看到规律了吗？请尝试使用嵌套循环来通过这个关卡。
      courseD_debugging_3_authored_hint:
        courseD_debugging_3_a: 蜜蜂是不是在哪个地方做了什么不合道理的事？当您更改那个模块后会发生什么？
        courseD_debugging_3_b: 尝试使用嵌套循环简化代码。
      courseD_debugging_4_authored_hint:
        courseD_debugging_4_a: "尝试在一行中多次使用调试过程。\n\n是什么导致了第一个问题？\n\n一旦问题解决了，是什么地方错了？"
        courseD_debugging_4_b: "如果很难弄清楚如何制作楼梯的步进模式, 请尝试用手指跟踪它并大声说出指令。\n\n别忘了指出转弯的方向!"
      courseD_debugging_5_authored_hint:
        courseD_debugging_5_a: |-
          开始只看第一个循环。
          
          它是做什么的？
          
          它应该做什么？
          
          那告诉您什么？
        courseD_debugging_5_b: 当第一个循环按照所希望的方式进行时，代码中还剩下什么？
        courseD_debugging_5_c: |-
          尝试将剩余的循环环绕在完成代码的其余部分。它现在可以工作吗？ 
          
          如果没有, 还有什么地方错了？
      courseD_debugging_6_authored_hint:
        courseD_debugging_6_a: |-
          尝试使用"步进"按钮运行代码。是否一切在第一步的时候都是好？ 
          
          那么第二步呢？ 
          
          哪里错了？
        courseD_debugging_6_b: 看起来所有正确的步骤都在这里了，你只是需要更多。如何能多次重复`采花蜜`和`酿蜂蜜`？
      courseD_external_cond_authored_hint: [ ]
      courseD_farmer_condLoops1_authored_hint:
        courseD_farmer_condLoops1_a: 你需要使用一个重复循环来寻找玉米5次。
        courseD_farmer_condLoops1_b: 请确保使用`如果在玉米上`模块，否则可能是在尝试捡起不存在的东西！
      courseD_farmer_condLoops1_2018_authored_hint:
        courseD_farmer_condLoops1_a: 你需要使用一个重复循环来寻找玉米5次。
        courseD_farmer_condLoops1_b: 请确保使用`如果在玉米上`模块，否则可能是在尝试捡起不存在的东西！
      courseD_farmer_condLoops2_authored_hint:
        courseD_farmer_condLoops2_a: '最好的方法是将`如果`语句嵌套在另一个里面。  '
        courseD_farmer_condLoops2_b: 这一关卡里，应该有一个`如果/否则`语句和一个普通的`如果`语句。
        courseD_farmer_condLoops2_c: "你的`如果`语句可能看起来很像这样:\n\n- 如果在玉米上\n- 采摘玉米\n- 如果在生菜上\n\\t-采摘莴苣。\n\n如果那里没有什么, 你不要选择!"
      courseD_farmer_condLoops2_2018_authored_hint:
        courseD_farmer_condLoops2_a: '最好的方法是将`如果`语句嵌套在另一个里面。  '
        courseD_farmer_condLoops2_b: 这一关卡里，应该有一个`如果/否则`语句和一个普通的`如果`语句。
        courseD_farmer_condLoops2_c: "你的`如果`语句可能看起来很像这样:\n\n- 如果在玉米上\n- 采摘玉米\n- 如果在生菜上\n\\t-采摘莴苣。\n\n如果那里没有什么, 你不要选择!"
      courseD_farmer_condLoops3_authored_hint:
        courseD_farmer_condLoops3_a: |-
          若要获取所有项目，试试将`如果`嵌套三层。
          
          这意味着你应该将一个`如果`语句放在另一个里面，然后在第二个里放上第三个`如果`语句。
        courseD_farmer_condLoops3_b: 这一关卡里，应该有两个`如果/否则`语句和一个普通的`如果`语句。
      courseD_farmer_condLoops3_2018_authored_hint:
        courseD_farmer_condLoops3_a: |-
          若要获取所有项目，试试将`如果`嵌套三层。
          
          这意味着你应该将一个`如果`语句放在另一个里面，然后在第二个里放上第三个`如果`语句。
        courseD_farmer_condLoops3_b: 这一关卡里，应该有两个`如果/否则`语句和一个普通的`如果`语句。
      courseD_farmer_condLoops4_authored_hint:
        grade3_RunningFarm_4courseD_farmer_condLoops4: |-
          没有人知道每根芽中有多少莴苣头会长出来。
          
          请使用`当有莴苣时`循环继续采摘, 直到每一片都被收集起来。
        grade3_RunningFarm_4courseD_farmer_condLoops4_b: '`当`循环也将处理空白空间! 由于没有生菜, 它不会做选择, 让代码继续前进。'
        grade3_RunningFarm_4courseD_farmer_condLoops4_c: 您可以使用`当前面有路`循环或`重复`循环来遍历所有的作物。
      courseD_farmer_condLoops4_2018_authored_hint:
        grade3_RunningFarm_4courseD_farmer_condLoops4: |-
          没有人知道每根芽中有多少莴苣头会长出来。
          
          请使用`当有莴苣时`循环继续采摘, 直到每一片都被收集起来。
        grade3_RunningFarm_4courseD_farmer_condLoops4_b: '`当`循环也将处理空白空间! 由于没有生菜, 它不会做选择, 让代码继续前进。'
        grade3_RunningFarm_4courseD_farmer_condLoops4_c: 您可以使用`当前面有路`循环或`重复`循环来遍历所有的作物。
      courseD_farmer_condLoops4a_authored_hint:
        grade3_RunningFarm_4courseD_farmer_condLoops4: |-
          没有人知道每根芽中有多少莴苣头会长出来。
          
          请使用`当有莴苣时`循环继续采摘, 直到每一片都被收集起来。
      courseD_farmer_condLoops5_authored_hint:
        courseD_farmer_condLoops5_a: '有一个新的循环: '' 重复直到在南瓜上 ''。你能看到它如何在这个关卡使用？'
        courseD_farmer_condLoops5_b: 每个地方可能有不止一个玉米或生菜厂。使用`当`循环来收集所有这些!
      courseD_farmer_condLoops5_2018_authored_hint:
        courseD_farmer_condLoops5_a: '有一个新的循环: '' 重复直到在南瓜上 ''。你能看到它如何在这个关卡使用？'
        courseD_farmer_condLoops5_b: 每个地方可能有不止一个玉米或生菜厂。使用`当`循环来收集所有这些!
      courseD_farmer_condLoops6_authored_hint:
        courseD_farmer_condLoops6_a: 使用`当前面有路时`循环让农民沿着每片螺旋向下移动。
        courseD_farmer_condLoops6_b: 您只需要在大多收成时查找玉米。在程序的最后只采载一个南瓜。
      courseD_farmer_condLoops6_2018_authored_hint:
        courseD_farmer_condLoops6_a: 使用`当前面有路时`循环让农民沿着每片螺旋向下移动。
        courseD_farmer_condLoops6_b: 您只需要在大多收成时查找玉米。在程序的最后只采载一个南瓜。
      courseD_farmer_condLoops7_authored_hint:
        courseD_farmer_condLoops7_a: |-
          请注意, 获取所有农作物的最简单途径仍然是螺旋形。
          
          ![](https://images.code.org/ba8b8c624f21ade9ac823b045085c435-image-1479364378437.png)
        courseD_farmer_condLoops7_b: 尝试使用`当前面有路时`使收割者移动正确的步数。
      courseD_farmer_condLoops7_2018_authored_hint:
        courseD_farmer_condLoops7_a: |-
          请注意, 获取所有农作物的最简单途径仍然是螺旋形。
          
          ![](https://images.code.org/ba8b8c624f21ade9ac823b045085c435-image-1479364378437.png)
        courseD_farmer_condLoops7_b: 尝试使用`当前面有路时`使收割者移动正确的步数。
      courseD_farmer_condLoops8_authored_hint: [ ]
      courseD_farmer_condLoops8_2018_authored_hint: [ ]
      courseD_farmer_condLoops9_authored_hint: [ ]
      courseD_farmer_condLoops9_2018_authored_hint: [ ]
      courseD_farmer_condLoops9_predict1_authored_hint: [ ]
      courseD_farmer_condLoops9_predict1_2018_authored_hint: [ ]
      courseD_farmer_condLoops_challenge1_authored_hint:
        courseD_farmer_condLoops_challenge1_a: 在这个挑战中, "步进" 按钮可能非常有用。
        courseD_farmer_condLoops_challenge1_b: 通常情况下, 如果你是在南瓜那里, 你只会`摘南瓜`。如果你在南瓜那里, 你还需要做什么？
      courseD_farmer_condLoops_challenge1_2018_authored_hint:
        courseD_farmer_condLoops_challenge1_a: 在这个挑战中, "步进" 按钮可能非常有用。
        courseD_farmer_condLoops_challenge1_b: 通常情况下, 如果你是在南瓜那里, 你只会`摘南瓜`。如果你在南瓜那里, 你还需要做什么？
      courseD_farmer_condLoops_challenge2_authored_hint:
        courseD_farmer_condLoops_challenge2_a: 每种蔬菜在每个空间的数量各不相同。请使用 `当`循环。
      courseD_farmer_condLoops_challenge2_2018_authored_hint:
        courseD_farmer_condLoops_challenge2_a: 每种蔬菜在每个空间的数量各不相同。请使用 `当`循环。
      courseD_farmer_condLoops_challenge2_clone_authored_hint: [ ]
      courseD_farmer_conditionals10_authored_hint: [ ]
      courseD_farmer_conditionals4_authored_hint:
        courseD_farmer_conditionals4_a: 与其使用`重复`循环, 不如使用`当`循环继续挖掘直到土堆消失。
      courseD_farmer_conditionals5_authored_hint:
        courseD_farmer_conditionals5a: 尝试在`重复`循环内嵌套一个`当`循环。
      courseD_farmer_conditionals6_authored_hint:
        courseD_farmer_conditionals6_a: 请确保您使用的是`当`循环来计算每个孔的填充次数。
        courseD_farmer_conditionals6_b: 请注意, 农民需要在台阶式的图案下多次向前和向下移动。
      courseD_farmer_conditionals7_authored_hint:
        courseD_farmer_conditionals8_a: 即使您不知道一条路径中有多少方块，`当前面有路时`模块会让你继续前进。
      courseD_farmer_conditionals8_authored_hint:
        courseD_farmer_conditionals8_a: 需要使用多个`当`循环。
        courseD_farmer_conditionals8_b: 每个洞都在路径的末尾, 所以在使用`当前面有路时`之前要用`当前面有路时`。
        courseD_farmer_conditionals8_c: 请注意，你需要重复`当前面有路时`，`当有洞时`代码六次。
      courseD_farmer_conditionals9_authored_hint: [ ]
      courseD_farmer_until_challenge2_authored_hint: [ ]
      courseD_farmer_until_challenge2_2018_authored_hint: [ ]
      courseD_farmer_while1_authored_hint:
        courseD_farmer_while1_a: 你需要向前移动四次才能到达那堆。你能用 "重复" 循环吗？
        courseD_farmer_while1_b: 当你站在一堆土那里时，使用 "移走一堆" 块来移走它。
      courseD_farmer_while10_authored_hint: [ ]
      courseD_farmer_while10_2018_authored_hint: [ ]
      courseD_farmer_while10_predict2_authored_hint: [ ]
      courseD_farmer_while10_predict2_2018_authored_hint: [ ]
      courseD_farmer_while1_2018_authored_hint:
        courseD_farmer_while1_a: 你需要向前移动四次才能到达那堆。你能用 "重复" 循环吗？
        courseD_farmer_while1_b: 当你站在一堆土那里时，使用 "移走一堆" 块来移走它。
      courseD_farmer_while2_authored_hint:
        courseD_farmer_while2_a: 你只需要移动一次就能到达这个洞。
        courseD_farmer_while2_b: 您将需要 "填充 1" 个模块六次。你能用一个循环来让这个更简单吗？
      courseD_farmer_while2_2018_authored_hint:
        courseD_farmer_while2_a: 你只需要移动一次就能到达这个洞。
        courseD_farmer_while2_b: 您将需要 "填充 1" 个模块六次。你能用一个循环来让这个更简单吗？
      courseD_farmer_while3_authored_hint:
        courseD_farmer_while3_a: 循环可以帮助您在此处简化代码。
        courseD_farmer_while3_b: 你不需要任何`转向`模块到达土堆。
      courseD_farmer_while3_2018_authored_hint:
        courseD_farmer_while3_a: 循环可以帮助您在此处简化代码。
        courseD_farmer_while3_b: 你不需要任何`转向`模块到达土堆。
      courseD_farmer_while4_authored_hint:
        courseD_farmer_conditionals4_a: 与其使用`重复`循环, 不如使用`当`循环继续挖掘直到土堆消失。
        courseD_farmer_conditionals4_b: 这看起来非常类似于一个之前的关卡, 唯一的区别是你所要使用的循环。
      courseD_farmer_while4_2018_authored_hint:
        courseD_farmer_conditionals4_a: 与其使用`重复`循环, 不如使用`当`循环继续挖掘直到土堆消失。
        courseD_farmer_conditionals4_b: 这看起来非常类似于一个之前的关卡, 唯一的区别是你所要使用的循环。
      courseD_farmer_while4_predict1_authored_hint: [ ]
      courseD_farmer_while4_predict1_2018_authored_hint: [ ]
      courseD_farmer_while5_authored_hint:
        courseD_farmer_conditionals5a_a: 尝试在`重复`循环内嵌套一个`当`循环。
        courseD_farmer_conditionals5a_b: 农夫需要向前移动五次才能到达终点。农夫还需要做什么？
        courseD_farmer_conditionals5a_c: 向前移动5次。每次你向前移动时, 用`当有土堆时`模块来除去堆积的污垢。
      courseD_farmer_while5_2018_authored_hint:
        courseD_farmer_conditionals5a_a: 尝试在`重复`循环内嵌套一个`当`循环。
        courseD_farmer_conditionals5a_b: 农夫需要向前移动五次才能到达终点。农夫还需要做什么？
        courseD_farmer_conditionals5a_c: 向前移动5次。每次你向前移动时, 用`当有土堆时`模块来除去堆积的污垢。
      courseD_farmer_while6_authored_hint:
        courseD_farmer_conditionals6_a: 请确保您使用的是`当`循环来计算每个孔的填充次数。
        courseD_farmer_conditionals6_b: 请注意, 农民需要在台阶式的图案下多次向前和向下移动。
        courseD_farmer_conditionals6_c: |2
          这个阶梯图案使用以下模块
          
          - 向前移动
          - 填充洞
          - 向右转
          - 向前移动
          - 填充洞
          - 向左转
          
          你需要使用这个阶梯图案多少次？
          
           确保你使用`当有洞时`来填补这个洞。
      courseD_farmer_while6_2018_authored_hint:
        courseD_farmer_conditionals6_a: 请确保您使用的是`当`循环来计算每个孔的填充次数。
        courseD_farmer_conditionals6_b: 请注意, 农民需要在台阶式的图案下多次向前和向下移动。
        courseD_farmer_conditionals6_c: |2
          这个阶梯图案使用以下模块
          
          - 向前移动
          - 填充洞
          - 向右转
          - 向前移动
          - 填充洞
          - 向左转
          
          你需要使用这个阶梯图案多少次？
          
           确保你使用`当有洞时`来填补这个洞。
      courseD_farmer_while7_authored_hint:
        courseD_farmer_conditionals8_a: 即使您不知道一条路径中有多少方块，`当前面有路时`模块会让你继续前进。
        courseD_farmer_conditionals8_b: 在重复循环内放置`当前面有路时`循环可以帮助您通过此关卡。
        courseD_farmer_conditionals8_c: 在每条路径的末尾你需要做什么？
      courseD_farmer_while7_2018_authored_hint:
        courseD_farmer_conditionals8_a: 即使您不知道一条路径中有多少方块，`当前面有路时`模块会让你继续前进。
        courseD_farmer_conditionals8_b: 在重复循环内放置`当前面有路时`循环可以帮助您通过此关卡。
        courseD_farmer_conditionals8_c: 在每条路径的末尾你需要做什么？
      courseD_farmer_while8_authored_hint:
        courseD_farmer_conditionals8_a: 需要使用多个`当`循环。
        courseD_farmer_conditionals8_b: 每个洞都在路径的末尾, 所以在使用`当前面有路时`之前要用`当前面有路时`。
        courseD_farmer_conditionals8_c: 请注意，你需要重复`当前面有路时`，`当有洞时`代码六次。
      courseD_farmer_while8_2018_authored_hint:
        courseD_farmer_conditionals8_a: 需要使用多个`当`循环。
        courseD_farmer_conditionals8_b: 每个洞都在路径的末尾, 所以在使用`当前面有路时`之前要用`当前面有路时`。
        courseD_farmer_conditionals8_c: 请注意，你需要重复`当前面有路时`，`当有洞时`代码六次。
      courseD_farmer_while9_authored_hint: [ ]
      courseD_farmer_while9_2018_authored_hint: [ ]
      courseD_farmer_while_challenge1_authored_hint:
        courseD_farmer_while_challenge1_a: 每个孔或桩位于路径末尾的** 向后移动 **一格 。
        courseD_farmer_while_challenge1_b: 如果你使用`当` 循环，你可以让农民即使不存在，也试着移除土堆或填满一个洞, 。这意味着你可以编程让她无论在哪里都清除任何土或填补任何洞。
        courseD_farmer_conditionals8_c: 可以不使用任何`重复`循环来解决此问题。为此, 您需要使用四个`当`循环。
      courseD_farmer_while_challenge1_2018_authored_hint:
        courseD_farmer_while_challenge1_a: 每个孔或桩位于路径末尾的** 向后移动 **一格 。
        courseD_farmer_while_challenge1_b: 如果你使用`当` 循环，你可以让农民即使不存在，也试着移除土堆或填满一个洞, 。这意味着你可以编程让她无论在哪里都清除任何土或填补任何洞。
        courseD_farmer_conditionals8_c: 可以不使用任何`重复`循环来解决此问题。为此, 您需要使用四个`当`循环。
      courseD_farmer_while_challenge2_authored_hint:
        courseD_farmer_while_challenge1_a: 每个孔或桩位于路径末尾的** 向后移动 **一格 。
        courseD_farmer_while_challenge1_b: 如果你使用 "当" 循环，你可以告诉农民移走一堆土或填补一个洞 ，甚至都没有也行。这意味着你可以编程让她在同一个位置移走任何数量的土，并且填补任何数量的洞。
        courseD_farmer_conditionals8_c: 可以不使用任何`重复`循环来解决此问题。为此, 您需要使用四个`当`循环。
      courseD_farmer_while_challenge2_2018_authored_hint:
        courseD_farmer_while_challenge1_a: 每个孔或桩位于路径末尾的** 向后移动 **一格 。
        courseD_farmer_while_challenge1_b: 如果你使用 "当" 循环，你可以告诉农民移走一堆土或填补一个洞 ，甚至都没有也行。这意味着你可以编程让她在同一个位置移走任何数量的土，并且填补任何数量的洞。
        courseD_farmer_conditionals8_c: 可以不使用任何`重复`循环来解决此问题。为此, 您需要使用四个`当`循环。
      courseD_harvester_nested_loops_challenge1-broken_authored_hint:
        courseD_harvester_nested_loops_challenge1_a: 您可能已经使用了一个循环来创建一个之字形图案。如果你记得那个算法, 可以加到这里。
      courseD_harvester_nested_loops_challenge1_authored_hint:
        courseD_harvester_nested_loops_challenge1_a: '试着跟随路径来到达所有玉米。 '
        courseD_harvester_nested_loops_challenge1_b: 要收集超过一个玉米, 您需要多次使用`采摘玉米`。
        courseD_harvester_nested_loops_challenge1_c: 你需要添加一个小循环到主循环内来通过这个关卡。
      courseD_harvester_nested_loops_challenge1_2018_authored_hint:
        courseD_harvester_nested_loops_challenge1_a: '试着跟随路径来到达所有玉米。 '
        courseD_harvester_nested_loops_challenge1_b: 要收集超过一个玉米, 您需要多次使用`采摘玉米`。
        courseD_harvester_nested_loops_challenge1_c: 你需要添加一个小循环到主循环内来通过这个关卡。
      courseD_iceage_loops1_authored_hint:
        courseD_iceage_loops1_a: 小心破冰！斯奎特会掉下去的！
        courseD_iceage_loops1_b: |-
          你需要用这个模块：
          
          <xml><block type="maze_moveForward"/></xml>
      courseD_iceage_loops10_authored_hint:
        courseB_iceage_loops10_a: 小心破冰！斯奎特会掉到水里的！
        courseB_iceage_loops10_b: 试试大声说出步骤，或将它们写到纸上。找到什么规律了吗？
        courseB_iceage_loops10_c: 这是一个很长的迷宫！沿这条路走。
      courseD_iceage_loops2_authored_hint:
        courseD_iceage_loops2_a: 将这一关分成两部分，一个在角落前，另一个在角落后。
        courseD_iceage_loops2_b: 如果被难住了，试着大声说出步骤来。
        courseD_iceage_loops2_c: 修复这条路，来帮助斯奎特到达橡子。
      courseD_iceage_loops3_authored_hint:
        courseB_iceage_loops3_a: |-
          用这个新的模块！
          <xml><block type="controls_repeat_dropdown"><title name="TIMES" config="2-10">5</title>
          </block></xml>
        courseB_iceage_loops3_b: 要重复代码, 拖出一个`重复 `循环, 然后把想要重复的模块放到它里面。
      courseD_iceage_loops4_authored_hint:
        courseD_iceage_loops4_a: 别害怕运行你的代码，看看会发生什么！
        courseD_iceage_loops4_b: 写下斯奎特要到达橡子的步骤。找到规律了吗？
        courseD_iceage_loops4_c: 这是斯奎特应该走的路。
      courseD_iceage_loops6_authored_hint:
        courseD_iceage_loops6_a: 最终的代码会有**三个**`向前移动`模块。
        courseD_iceage_loops6_b: 你只需要再添加**一个**循环！
        courseD_iceage_loops6_c: 最终的路应该像这样。
      courseD_iceage_loops7_authored_hint:
        courseB_iceage_loops7_a: 如果被难住了，试着在纸上写下步骤。找到规律了吗？
        courseB_iceage_loops7_b: 斯奎特想要拿到橡子就得走这条路。
      courseD_iceage_loops8_authored_hint:
        courseD_iceage_loops8_a: 这些`转向`模块正确吗？你还能改什么？
        courseD_iceage_loops8_b: 第一个循环应当重复**3**次，第二个应当重复**5**次，第三个循环应当重复**4**次，最后一个循环应当重复**4**次。
        courseD_iceage_loops8_c: 使用循环帮助斯奎特沿着这条路走。
      courseD_iceage_loops9_authored_hint:
        courseD_iceage_loops9_a: 有困难吗？试着将这一关分成更小的部分。别害怕运行你的代码！
        courseD_iceage_loops9_b: 最后的代码会有**4**个循环。
        courseD_iceage_loops9_c: 斯奎特应该沿着这条路去找橡子。
      courseD_maze_loops_challenge1_authored_hint:
        courseD_bee_nested_loops_challenge1_a: 不要忘记, 你可以`重复`一个单一的命令或较长的模式。你甚至可以`重复`一个`重复`模块!
        courseD_bee_nested_loops_challenge1_b: 要获得所有4个宝石, 首先使用一个循环离开中心。向左或向右转, 然后使用嵌套循环从第一堆宝藏移动到第二个。如果重复嵌套循环足够多次, 收集器将在 * 整个 * 洞周围移动!
        courseD_bee_nested_loops_challenge1_c: 到达所有宝藏的最短程序只使用一个`收集`块和两个转弯。
      courseD_maze_nestedLoops3_authored_hint:
        courseD_maze_nestedLoops3_a: 为了通过这一关，需要在另一个`重复`循环中"嵌套"一个`重复`循环。
        courseD_maze_nestedLoops3_b: 不知道在哪里放循环？尝试逐步把代码写下, 并寻找规律。
        courseD_maze_nestedLoops3_c: 尝试为一条直路和一个转弯编写代码。你能再重复一遍得到太阳花吗？
      courseD_maze_nestedLoops3_2018_authored_hint:
        courseD_maze_nestedLoops3_a: 为了通过这一关，需要在另一个`重复`循环中"嵌套"一个`重复`循环。
        courseD_maze_nestedLoops3_b: 不知道在哪里放循环？尝试逐步把代码写下, 并寻找规律。
        courseD_maze_nestedLoops3_c: 尝试为一条直路和一个转弯编写代码。你能再重复一遍得到太阳花吗？
      courseD_maze_nestedLoops4_authored_hint:
        courseD_maze_nestedLoops4_a: |-
          尝试在迷宫中使用此路径。 
          
          ![](https://images.code.org/565dbbcaf5862da0f60e54195820e814-image-1505961491245.36.09.png)
        courseD_maze_nestedLoops4_b: 如果循环规律很难看出来，请尝试把它全部编码出来。然后看看哪段代码在放入循环之前是一直重复的。
        courseD_maze_nestedLoops4_c: 尝试将一个`重复`循环放到另一个循环里，来减少需要的代码。
      courseD_maze_nestedLoops4_2018_authored_hint:
        courseD_maze_nestedLoops4_a: |-
          尝试在迷宫中使用此路径。 
          
          ![](https://images.code.org/565dbbcaf5862da0f60e54195820e814-image-1505961491245.36.09.png)
        courseD_maze_nestedLoops4_b: 如果循环规律很难看出来，请尝试把它全部编码出来。然后看看哪段代码在放入循环之前是一直重复的。
        courseD_maze_nestedLoops4_c: 尝试将一个`重复`循环放到另一个循环里，来减少需要的代码。
      courseD_maze_nestedLoops5_authored_hint:
        courseD_maze_nestedLoops5_a: 在迷宫里寻找楼梯-步进规律来找到可以用嵌套循环的地方。
        courseD_maze_nestedLoops5_b: 不知道在哪里放循环？尝试逐步把代码写下, 并寻找规律。
      courseD_maze_nestedLoops5_2018_authored_hint:
        courseD_maze_nestedLoops5_a: 在迷宫里寻找楼梯-步进规律来找到可以用嵌套循环的地方。
        courseD_maze_nestedLoops5_b: 不知道在哪里放循环？尝试逐步把代码写下, 并寻找规律。
      courseD_maze_nestedLoops6_authored_hint:
        courseD_maze_nestedLoops6_a: 如果被难住了，请试着在纸上先不用循环写下代码并寻找规律。
        courseD_maze_nestedLoops6_b: 嵌套的`重复`循环可以帮助减少使用的模块数量。
        courseD_maze_nestedLoops6_c: 需要两组嵌套的`重复`循环来通过这个关卡。
      courseD_maze_nestedLoops6_2018_authored_hint:
        courseD_maze_nestedLoops6_a: 如果被难住了，请试着在纸上先不用循环写下代码并寻找规律。
        courseD_maze_nestedLoops6_b: 嵌套的`重复`循环可以帮助减少使用的模块数量。
        courseD_maze_nestedLoops6_c: 需要两组嵌套的`重复`循环来通过这个关卡。
      courseD_maze_ramp1_authored_hint:
        courseC_maze_programming1_a: 如果小鸟没有到达猪那里。 确保所有三个模块已完全连在一起, 然后再次单击 "运行" 。
        courseC_maze_programming1_b: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseD_maze_ramp1_2018_authored_hint:
        courseC_maze_programming1_a: If the bird isn't getting to the pig, make sure all three of the blocks have been fully clicked together, then click "Run" again.
        courseC_maze_programming1_b: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseD_maze_ramp2_authored_hint:
        courseC_maze_programming2_a: 要使用`向前移动`模块，请将其从工具箱拖到工作区中，并将其连接到`当运行时`模块下面。
        courseC_maze_programming2_b: 确保所有3个模块都被点击了，并连接到`运行时`块。
      courseD_maze_ramp2_2018_authored_hint:
        courseC_maze_programming2_a: To use a `move forward` block, drag it from the toolbox out into the workspace and connect it to the `when run` block.
        courseC_maze_programming2_b: 确保所有3个模块都被点击了，并连接到`运行时`块。
      courseD_maze_ramp3_authored_hint:
        courseC_maze_programming3_a: "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\n若要从代码中间删除模块, 请将所有模块拖到工作区的右边，并先暂时放在那里。\n\n点击要删除的块，并将它拖回工具箱。\n\n最后，把其它模块放回它们应该在的地方。\n"
      courseD_maze_ramp3_2018_authored_hint:
        courseC_maze_programming3_a: "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\n若要从代码中间删除模块, 请将所有模块拖到工作区的右边，并先暂时放在那里。\n\n点击要删除的块，并将它拖回工具箱。\n\n最后，把其它模块放回它们应该在的地方。\n"
      courseD_maze_ramp4_authored_hint:
        courseC_maze_programming4_a: 你需要从鸟的视角向右或向左转。如果你面对右边，向右转会使你朝下。
        courseC_maze_programming4_b: 要沿着这条路, 向前移动并转弯，然后再移动并转向对面的路。再往前走一步到达猪。
      courseD_maze_ramp4_2018_authored_hint:
        courseC_maze_programming4_a: You can turn right or left from the bird's point of view. If you are facing right, turning right will make you point downwards.
        courseC_maze_programming4_b: To follow the path, move forward and turn one way, then move again and turn the opposite way. Move forward one more time to reach the pig.
      courseD_maze_ramp5_authored_hint:
        courseC_maze_programming5_a: 尝试使用"步进"按钮来一行一行运行你的代码。你能想出下一步需要做什么吗？
        courseC_maze_programming5_b: 记住，转向是从鸟的角度来看的。
        courseC_maze_programming5_c: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseD_maze_ramp5_2018_authored_hint:
        courseC_maze_programming5_a: 尝试使用"步进"按钮来一行一行运行你的代码。你能想出下一步需要做什么吗？
        courseC_maze_programming5_b: 记住，转向是从鸟的角度来看的。
        courseC_maze_programming5_c: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseD_maze_ramp5a_authored_hint:
        courseC_maze_programming5_a: 尝试使用"步进"按钮来一行一行运行你的代码。你能想出下一步需要做什么吗？
        courseC_maze_programming5_b: 记住，转向是从鸟的角度来看的。
        courseC_maze_programming5_c: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseD_maze_ramp5a_2018_authored_hint:
        courseC_maze_programming5_a: 尝试使用"步进"按钮来一行一行运行你的代码。你能想出下一步需要做什么吗？
        courseC_maze_programming5_b: 记住，转向是从鸟的角度来看的。
        courseC_maze_programming5_c: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseD_maze_ramp5b_authored_hint:
        courseC_maze_programming5_a: 尝试使用"步进"按钮来一行一行运行你的代码。你能想出下一步需要做什么吗？
        courseC_maze_programming5_b: 记住，转向是从鸟的角度来看的。
        courseC_maze_programming5_c: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseD_maze_ramp5b_2018_authored_hint:
        courseC_maze_programming5_a: 尝试使用"步进"按钮来一行一行运行你的代码。你能想出下一步需要做什么吗？
        courseC_maze_programming5_b: 记住，转向是从鸟的角度来看的。
        courseC_maze_programming5_c: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseD_maze_ramp5c_authored_hint: [ ]
      courseD_maze_ramp5c_2018_authored_hint: [ ]
      courseD_maze_ramp5d_authored_hint: [ ]
      courseD_maze_ramp5d_2018_authored_hint: [ ]
      courseD_maze_ramp6_authored_hint:
        courseC_maze_programming6_a: 有两种方法来解决这个难题 ！
        courseC_maze_programming6_b: 小鸟开始面对一堵墙, 所以请记住在移动前要转向。
        courseC_maze_programming6_c: 记住, 你可以一次写一段代码, 然后运行它, 找出你接下来需要从往哪里走。
      courseD_maze_ramp6a_authored_hint:
        courseC_maze_programming6a_a: 使用`重复`循环, 让这只鸟移动!
      courseD_maze_ramp7_authored_hint:
        courseD_maze_ramp7_b: 别忘了用"步进"按钮来一个模块一个模块的寻找错误。
        courseD_maze_ramp7_a: 使用重复模块可以一次又一次地运行单个模块或一堆代码。
        courseD_maze_ramp7_c: 如果你想简化你的代码, 你可以把一个重复循环套在另一个里面! 这称为 ** 嵌套循环 **。
      courseD_maze_until1_authored_hint:
        courseD_maze_until1_a: 是否有任何序列可以循环使代码更短？
        courseD_maze_until1_b: 尝试使用嵌套循环来解决此难题。
      courseD_maze_until10_authored_hint: [ ]
      courseD_maze_until10_2018_authored_hint: [ ]
      courseD_maze_until10_predict2_authored_hint: [ ]
      courseD_maze_until10_predict2_2018_authored_hint: [ ]
      courseD_maze_until1_2018_authored_hint:
        courseD_maze_until1_a: 是否有任何序列可以循环使代码更短？
        courseD_maze_until1_b: 尝试使用嵌套循环来解决此难题。
      courseD_maze_until2_authored_hint:
        courseD_maze_until2_a: 一个`直到到达猪`循环将帮助继续下去直到成功！
      courseD_maze_until2_predict1_authored_hint: [ ]
      courseD_maze_until2_predict1_2018_authored_hint: [ ]
      courseD_maze_until3_authored_hint:
        courseD_maze_until3_a: |-
          - 你的代码是做什么的？
          - 它应该做什么？
          - 那告诉你什么？
        courseD_maze_until3_b: 如果你被难住了, 试着在纸上逐步写下步骤, 并寻找他们重复的地方。
        courseD_maze_until3_c: 是否有一个阶梯步进步进可以来解决这个关卡？
        courseD_maze_until3_d: 不要忘记使用`重复直到`模块来让代码更短。
      courseD_maze_until3_2018_authored_hint:
        courseD_maze_until3_a: |-
          - 你的代码是做什么的？
          - 它应该做什么？
          - 那告诉你什么？
        courseD_maze_until3_b: 如果你被难住了, 试着在纸上逐步写下步骤, 并寻找他们重复的地方。
        courseD_maze_until3_c: 是否有一个阶梯步进步进可以来解决这个关卡？
        courseD_maze_until3_d: 不要忘记使用`重复直到`模块来让代码更短。
      courseD_maze_until4_authored_hint:
        courseD_maze_until4_a: |-
          使用"步进"按钮能帮你一行一行运行代码。
          
          - 在第一步时一切都正常吗？
          - 在第二步时一切都正常吗？
          - 哪里出错了？
        courseD_maze_until4_b: 是否有一个阶梯步进步进可以来解决这个关卡？
        courseD_maze_until4_c: 不要忘记使用`重复直到`模块来让代码更短。
      courseD_maze_until4_2018_authored_hint:
        courseD_maze_until4_a: |-
          使用"步进"按钮能帮你一行一行运行代码。
          
          - 在第一步时一切都正常吗？
          - 在第二步时一切都正常吗？
          - 哪里出错了？
        courseD_maze_until4_b: 是否有一个阶梯步进步进可以来解决这个关卡？
        courseD_maze_until4_c: 不要忘记使用`重复直到`模块来让代码更短。
      courseD_maze_until5_authored_hint:
        courseD_maze_until5_a: 别忘了使用`如果左边有路`来让僵尸检查是否有转弯的地方。
        courseD_maze_until5_b: 只使用一个`向前移动`, 把它放在`重复直到向日葵`模块里面。
        courseD_maze_until5_c: 每个步骤后, 僵尸应该检查是否有一条路向左。如果他找到一条，该怎么办？
      courseD_maze_until5_2018_authored_hint:
        courseD_maze_until5_b: 只使用一个`向前移动`, 把它放在`重复直到向日葵`模块里面。
      courseD_maze_until6_authored_hint:
        courseD_maze_until6_a: 这一次，试试`如果右边有路`来让僵尸保持前进。
        courseD_maze_until6_b: 只使用一个`向前移动`, 把它放在`重复直到向日葵`模块里面。
        courseD_maze_until6_c: 虽然这里比上个关卡有更多的转向，因为有`重复直到`模块，你的代码可以是几乎相同的!
      courseD_maze_until6_2018_authored_hint:
        courseD_maze_until6_b: 只使用一个`向前移动`, 把它放在`重复直到向日葵`模块里面。
      courseD_maze_until7_authored_hint:
        courseD_maze_until7_a: 不要仅仅因为迷宫让代码比上次更长!
        courseD_maze_until7_b: 虽然这里比上个关卡有更多的转向，因为有`重复直到`模块，你的代码可以是几乎相同的!
        courseD_maze_until7_c: 记住要检查左边是否有路，因为向右转会使你走错路!
      courseD_maze_until7_2018_authored_hint:
        courseD_maze_until7_a: 不要仅仅因为迷宫让代码比上次更长!
        courseD_maze_until7_b: 虽然这里比上个关卡有更多的转向，因为有`重复直到`模块，你的代码可以是几乎相同的!
      courseD_maze_until8_authored_hint:
        courseD_maze_until8_a: 请确保使用`如果/否则`模块来保持僵尸去往正确的方向。
        courseD_maze_until8_b: '用你的`如果/否则`模块：如果前面有一条路，你应该怎么做？'
        courseD_maze_until8_c: '用你的`如果/否则`模块：如果前面没有一条路, 你应该转向哪条路？'
      courseD_maze_until8_2018_authored_hint:
        courseD_maze_until8_a: 请确保使用`如果/否则`模块来保持僵尸去往正确的方向。
        courseD_maze_until8_b: '用你的`如果/否则`模块：如果前面有一条路，你应该怎么做？'
        courseD_maze_until8_c: '用你的`如果/否则`模块：如果前面没有一条路, 你应该转向哪条路？'
      courseD_maze_until9_authored_hint:
        courseD_maze_until8_a: 使用`如果前面有路`将使你在可能情况下，就能继续前行，帮你躲过有食人花的路。
        courseD_maze_until8_b: 如果没有前进的道路，你应该转向哪个方向？
        courseD_maze_until8_c: 记得使用`重复直到`模块, 让你到达向日葵!
      courseD_maze_until9_2018_authored_hint:
        courseD_maze_until8_c: 记得使用`重复直到`模块, 让你到达向日葵!
      courseD_maze_until_challenge_authored_hint: [ ]
      courseD_maze_until_challenge1-delete-this-copy_authored_hint: [ ]
      courseD_maze_until_challenge1_authored_hint: [ ]
      courseD_maze_until_challenge1_2018_authored_hint: [ ]
      courseD_maze_until_challenge2_authored_hint: [ ]
      courseD_playLab_cond1_authored_hint:
        courseD_playLab_cond1_a: 要通过这一挑战, 请将`向上移动演员 1`模块附加到`当上方向键按下时`事件, 然后对其他方向执行相同的操作。
        courseD_playLab_cond1_b: 使用`当按下方向键`和`移动演员`模块的下拉菜单来改变他们前进的方向。
        courseD_playLab_cond1_c: 请记住, 一旦您单击 "运行", 将海盗向前移动到两个标志上!
      courseD_playLab_cond1_2018_authored_hint:
        courseD_playLab_cond1_a: 要通过这一挑战, 请将`向上移动演员 1`模块附加到`当上方向键按下时`事件, 然后对其他方向执行相同的操作。
        courseD_playLab_cond1_b: 使用`当按下方向键`和`移动演员`模块的下拉菜单来改变他们前进的方向。
        courseD_playLab_cond1_c: 请记住, 一旦您单击 "运行", 将海盗向前移动到两个标志上!
      courseD_playLab_cond2_authored_hint:
        courseD_playLab_cond2_a: 要成功使用这个关卡, 使用`得分`模块下面的`当演员1触及演员 2`事件。
      courseD_playLab_cond2_2018_authored_hint:
        courseD_playLab_cond2_a: 要成功使用这个关卡, 使用`得分`模块下面的`当演员1触及演员 2`事件。
      courseD_playLab_cond3_authored_hint:
        courseD_playLab_cond3_a: 需要添加两个模块到`一直重复`循环中。一个将为龙（演员2）选择一个随机的情绪，另一个将等待1秒之后再次通过循环。
      courseD_playLab_cond3_2018_authored_hint:
        courseD_playLab_cond3_a: 需要添加两个模块到`一直重复`循环中。一个将为龙（演员2）选择一个随机的情绪，另一个将等待1秒之后再次通过循环。
      courseD_playLab_cond3a_authored_hint:
        courseD_playLab_cond3_c: "- `如果`龙是快乐的\n- `得分`\n- `得分`\n\n\n- `否则` `得分`"
      courseD_playLab_cond3a_2018_authored_hint:
        courseD_playLab_cond3_c: "- `如果`龙是快乐的\n- `得分`\n- `得分`\n\n\n- `否则` `得分`"
      courseD_playLab_cond3b_authored_hint:
        courseD_playLab_cond3b_a: 您将需要添加模块到`一直重复`循环, 使龙继续上下移动
      courseD_playLab_cond4_authored_hint:
        courseD_playLab_cond4_a: 需要使用`当运行时`事件让忍者追逐海盗。
        courseD_playLab_cond4_b: 有一个特殊的模块叫`设置每个蒙面忍者追逐演员`，它将让忍者持续追踪海盗的踪迹!
        courseD_playLab_cond4_c: 把`以失败结束游戏`模块放在`当演员1触及演员 3`的事件下面。
      courseD_playLab_cond4_2018_authored_hint:
        courseD_playLab_cond4_a: 需要使用`当运行时`事件让忍者追逐海盗。
        courseD_playLab_cond4_b: 有一个特殊的模块叫`设置每个蒙面忍者追逐演员`，它将让忍者持续追踪海盗的踪迹!
        courseD_playLab_cond4_c: 把`以失败结束游戏`模块放在`当演员1触及演员 3`的事件下面。
      courseD_playLab_cond5_authored_hint:
        courseD_playLab_cond5_a: 使用一个`如果`语句来比较`分数`是否`>` 5来通过这个挑战。
        courseD_playLab_cond5_b: 您可以在工作区中有一个以上的`一直重复`循环。
      courseD_playLab_cond5_2018_authored_hint:
        courseD_playLab_cond5_a: 使用一个`如果`语句来比较`分数`是否`>` 5来通过这个挑战。
        courseD_playLab_cond5_b: 您可以在工作区中有一个以上的`一直重复`循环。
      courseD_playLab_cond6_authored_hint:
        courseD_playLab_cond6_a: 将 ’设置蒙面忍者速度‘模块添加到程序的开始来帮助降低忍者的速度。
        courseD_playLab_cond6_b: 您需要在`一直重复`模块内使用一个`如果演员 1的y方向 > 255`模块来总是检查海盗是否在章鱼下。
      courseD_playLab_cond6_2018_authored_hint:
        courseD_playLab_cond6_a: 将 ’设置蒙面忍者速度‘模块添加到程序的开始来帮助降低忍者的速度。
        courseD_playLab_cond6_b: 您需要在`一直重复`模块内使用一个`如果演员 1的y方向 > 255`模块来总是检查海盗是否在章鱼下。
      courseD_playLab_cond6a_authored_hint:
        courseD_playLab_cond6_c: 将`等待1秒`模块添加到`一直重复`循环的顶部, 它检查海盗位置 (但不在`如果`语句内) 防止分数被减得太快。
      courseD_playLab_cond6a_2018_authored_hint:
        courseD_playLab_cond6_c: 将’等待1秒‘模块添加到’一直重复‘循环的顶部, 它检查海盗位置 (但不在’if‘ 语句内) 防止分数被移除得太快。
      courseD_playLab_cond6cloneForTest_authored_hint:
        courseD_playLab_cond6_a: 将 ’设置蒙面忍者速度‘模块添加到程序的开始来帮助降低忍者的速度。
        courseD_playLab_cond6_b: 您需要在`一直重复`模块内使用一个`如果演员 1的y方向 > 255`模块来总是检查海盗是否在章鱼下。
        courseD_playLab_cond6_c: 将’等待1秒‘模块添加到’一直重复‘循环的顶部, 它检查海盗位置 (但不在’if‘ 语句内) 防止分数被移除得太快。
      courseD_playLab_embed_cond6a_authored_hint: [ ]
      courseD_playLab_embedded_authored_hint: [ ]
      courseD_scrat_predict1_authored_hint: [ ]
      courseD_scrat_predict1_2018_authored_hint: [ ]
      courseD_scrat_ramp1_authored_hint:
        courseC_maze_programming1_a: 如果斯奎特没有得到橡子, 确保所有三个模块已完全连在一起, 然后再次单击 "运行" 。
        courseC_maze_programming1_b: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseD_scrat_ramp1_2018_authored_hint:
        courseC_maze_programming1_a: 如果斯奎特没有得到橡子, 确保所有三个模块已完全连在一起, 然后再次单击 "运行" 。
        courseC_maze_programming1_b: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseD_scrat_ramp2_authored_hint:
        courseC_maze_programming2_a: 要使用‘向前移动’模块, 请将其从工具箱拖到工作区中, 并将其连接到 ‘运行时’模块。
        courseC_maze_programming2_b: 确保所有三个`向前移动`模块都附加到`当运行时`模块上。
      courseD_scrat_ramp2_2018_authored_hint:
        courseC_maze_programming2_a: To use a `move forward` block, drag it from the toolbox out into the workspace and connect it to the `when run` block.
        courseC_maze_programming2_b: 确保所有三个`向前移动`模块都附加到`当运行时`模块上。
      courseD_scrat_ramp3_authored_hint:
        courseC_maze_programming3_a: "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n要从您的代码中间删除一个模块，把所有它下面的模块都拖到右边并让它们呆在工作区一会。\n点击您要删除的模块，并把它拽回到工具箱中。\n最后，把其他的模块放回属于它们的地方。\n"
        courseC_maze_programming3_b: 请记住, 向右和向左转是从斯奎特的角度来看的。
      courseD_scrat_ramp3_2018_authored_hint:
        courseC_maze_programming3_a: "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\n若要从代码中间删除模块, 请将所有模块拖到工作区的右边，并先暂时放在那里。\n\n点击要删除的块，并将它拖回工具箱。\n\n最后，把其它模块放回它们应该在的地方。\n"
        courseC_maze_programming3_b: 请记住, 向右和向左转是从斯奎特的角度来看的。
      courseD_scrat_ramp4_authored_hint:
        courseC_maze_programming4_a: 您可以从斯奎特的角度向右或向左转。如果你面向右，向右拐会使你朝下。
        courseC_maze_programming4_b: 要沿着这条路前进, 向前移动，然后转向一条路, 然后再移动, 转向相反的方向。再往前走一次就能到达橡子。
        courseC_maze_programming4_c: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseD_scrat_ramp4_2018_authored_hint:
        courseC_maze_programming4_a: 您可以从斯奎特的角度向右或向左转。如果你面向右，向右拐会使你朝下。
        courseC_maze_programming4_b: 要沿着这条路前进, 向前移动，然后转向一条路, 然后再移动, 转向相反的方向。再往前走一次就能到达橡子。
        courseC_maze_programming4_c: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseD_scrat_ramp5_authored_hint:
        courseC_maze_programming5_a: 尝试使用"步进"按钮来一行一行运行你的代码。你能想出下一步需要做什么吗？
        courseC_maze_programming5_b: 你要走多远才能到拐角处？
        courseC_maze_programming5_c: 你将需要在拐角处向左拐, 才能到达橡子。
      courseD_scrat_ramp5_2018_authored_hint:
        courseC_maze_programming5_a: 尝试使用"步进"按钮来一行一行运行你的代码。你能想出下一步需要做什么吗？
        courseC_maze_programming5_b: 你要走多远才能到拐角处？
        courseC_maze_programming5_c: 你将需要在拐角处向左拐, 才能到达橡子。
      courseD_scrat_ramp6_authored_hint:
        courseC_maze_programming6a_a: 使用`重复`循环来让斯奎特移动!
      courseD_scrat_ramp6_2018_authored_hint:
        courseC_maze_programming6a_a: 使用`重复`循环来让斯奎特移动!
      courseD_scrat_ramp7_authored_hint:
        courseD_scrat_programming6_a: 有两种方法来解决这个难题 ！
        courseD_scrat_programming6_b: 记住在移动前先转向, 因为斯奎特正面向错误的方向。
        courseD_scrat_programming6_c: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseD_scrat_ramp7_2018_authored_hint:
        courseD_scrat_programming6_a: 有两种方法来解决这个难题 ！
        courseD_scrat_programming6_b: 记住在移动前先转向, 因为斯奎特正面向错误的方向。
        courseD_scrat_programming6_c: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseD_scrat_ramp8_authored_hint:
        courseD_maze_ramp7_b: 别忘了用"步进"按钮来一个模块一个模块的寻找错误。
        courseD_maze_ramp7_a: 使用重复模块可以一次又一次地运行单个模块或一堆代码。
        courseD_maze_ramp7_c: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseD_scrat_ramp8_2018_authored_hint:
        courseD_maze_ramp7_b: 别忘了用"步进"按钮来一个模块一个模块的寻找错误。
        courseD_maze_ramp7_a: 使用重复模块可以一次又一次地运行单个模块或一堆代码。
        courseD_maze_ramp7_c: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseE_artist_concept1_authored_hint:
        courseE_artist_concept1_a: 六边形有50像素长的边，并向右转60度。
        courseE_artist_concept1_b: 试着在这里使用一个函数, 这样就不必一次又一次地写画六边形的代码了。
        courseE_artist_concept1_c: 在每个函数调用前使用`设置宽度`模块来更改钢笔宽度。
      courseE_artist_concept1_2018_authored_hint:
        courseE_artist_concept1_a: 六边形有50像素长的边，并向右转60度。
        courseE_artist_concept1_b: 试着在这里使用一个函数, 这样就不必一次又一次地写画六边形的代码了。
        courseE_artist_concept1_c: 在每个函数调用前使用`设置宽度`模块来更改钢笔宽度。
      courseE_artist_concept4_authored_hint:
        courseE_artist_concept4_a: 有几种方法可以通过这个关卡。你能制定一个计划吗？
        courseE_artist_concept4_b: 尝试创建一个正方形。然后做一排正方形。下一步是什么？
        courseE_artist_concept4_c: 在绘制了一排正方形之后，你可以转过身去绘制另一条向左的方块, 或者你可以跳回到图的左边, 画出向右的线。你喜欢哪种方法？
      courseE_artist_concept4_2018_authored_hint:
        courseE_artist_concept4_a: 有几种方法可以通过这个关卡。你能制定一个计划吗？
        courseE_artist_concept4_b: 尝试创建一个正方形。然后做一排正方形。下一步是什么？
        courseE_artist_concept4_c: 在绘制了一排正方形之后，你可以转过身去绘制另一条向左的方块, 或者你可以跳回到图的左边, 画出向右的线。你喜欢哪种方法？
      courseE_artist_concept_challenge1_authored_hint:
        courseE_artist_concept_challenge1_a: '这半个六边形有一条**30像素长**的边，并且需要向右转**60度**。  '
        courseE_artist_concept_challenge1_b: '这2/3个三角形有一条**80像素长**的边，并且需要向右转**120度**。 '
        courseE_artist_concept_challenge1_c: |-
          这是您要让形状完整所要重复的设计：
          
          ![](https://images.code.org/d6b2afd39119da33d085dcce6077ada8-image-1501705780826.28.43 PM.png)
      courseE_artist_concept_challenge1_2018_authored_hint:
        courseE_artist_concept_challenge1_a: '这半个六边形有一条**30像素长**的边，并且需要向右转**60度**。  '
        courseE_artist_concept_challenge1_b: '这2/3个三角形有一条**80像素长**的边，并且需要向右转**120度**。 '
        courseE_artist_concept_challenge1_c: |-
          这是您要让形状完整所要重复的设计：
          
          ![](https://images.code.org/d6b2afd39119da33d085dcce6077ada8-image-1501705780826.28.43 PM.png)
      courseE_artist_concept_challenge2_authored_hint:
        courseE_artist_concept_challenge2_a: 一旦你定义了一个函数, 你可以一次又一次地调用它 - 任何想用的地方或时机！
        courseE_artist_concept_challenge2_b: |-
          您可以使用以下命令跳转到画布上的不同位置：
          <xml> <block type="jump_to">
          <title name="VALUE">???</title>
          </block></xml>
      courseE_artist_concept_challenge2_2018_authored_hint:
        courseE_artist_concept_challenge2_a: 一旦你定义了一个函数, 你可以一次又一次地调用它 - 任何想用的地方或时机！
        courseE_artist_concept_challenge2_b: |-
          您可以使用以下命令跳转到画布上的不同位置：
          <xml> <block type="jump_to">
          <title name="VALUE">???</title>
          </block></xml>
      courseE_artist_embed_functions8_authored_hint: [ ]
      courseE_artist_functions1_authored_hint:
        courseE_artist_functions1_a: 这些方块的每个边都有100个像素，这意味着你将不得不在绘制你的第二个正方形前向前移动175个像素。
        courseE_artist_functions1_b: 制作你的眼镜时绘制重叠的线条是可以的。
        courseE_artist_functions1_c: 对于较短的代码, 请尝试使用`重复`循环来绘制眼镜的方形框架。
      courseE_artist_functions10_authored_hint:
        courseD_artist_functions10_b: 这幅画和上一个很像，但是`画线`函数现在画的是一个不同的形状。
        courseD_artist_functions10_a: 为了避免使用多个`向前移动`模块，创建一个`画六边形`的函数，并且多次调用它。
        courseD_artist_functions10_c: |-
          你看到这幅画可以用一个叫做`画六边形线`的函数吗？
          
          ![](https://images.code.org/904e0f38232fd9c15a3d2d172e7dde0b-image-1493140714580.gif)
      courseE_artist_functions10_2018_authored_hint:
        courseD_artist_functions10_b: 这幅画和上一个很像，但是`画线`函数现在画的是一个不同的形状。
        courseD_artist_functions10_a: 为了避免使用多个`向前移动`模块，创建一个`画六边形`的函数，并且多次调用它。
        courseD_artist_functions10_c: |-
          你看到这幅画可以用一个叫做`画六边形线`的函数吗？
          
          ![](https://images.code.org/904e0f38232fd9c15a3d2d172e7dde0b-image-1493140714580.gif)
      courseE_artist_functions1_2018_authored_hint:
        courseE_artist_functions1_a: 这些方块的每个边都有100个像素，这意味着你将不得不在绘制你的第二个正方形前向前移动175个像素。
        courseE_artist_functions1_b: 制作你的眼镜时绘制重叠的线条是可以的。
        courseE_artist_functions1_c: 对于较短的代码, 请尝试使用`重复`循环来绘制眼镜的方形框架。
      courseE_artist_functions2_authored_hint:
        courseD_artist_functions2_b: 您编写的函数不应包含整个程序, 只需绘制一个具有100像素边的正方形的部分。
        courseD_artist_functions2_c: |-
          使用绿色``draw a square 20`（画一个边长20像素的正方形）`模块，在`当运行时`模块下"调用"您的函数。否则, 函数中的代码将不会运行。
          <xml><block type="procedures_callnoreturn" limit="2"><mutation name="draw a square"/></block></xml>
        courseD_artist_functions2_a: |-
          你的程序应该：
          - 使用函数
          - 向前移动 100+75像素
          - 使用函数
      courseE_artist_functions2_2018_authored_hint:
        courseD_artist_functions2_b: 您编写的函数不应包含整个程序, 只需绘制一个具有100像素边的正方形的部分。
        courseD_artist_functions2_c: |-
          使用绿色``draw a square 20`（画一个边长20像素的正方形）`模块，在`当运行时`模块下"调用"您的函数。否则, 函数中的代码将不会运行。
          <xml><block type="procedures_callnoreturn" limit="2"><mutation name="draw a square"/></block></xml>
        courseD_artist_functions2_a: |-
          你的程序应该：
          - 使用函数
          - 向前移动 100+75像素
          - 使用函数
      courseE_artist_functions3_authored_hint:
        courseD_artist_functions3_a: |-
          为了通过这关，你只需要添加一个循环来重复初始的代码8次。
          
          如果你不记得初始代码是什么样了，点击工作区右上角"重新开始"。
        courseD_artist_functions3_b: 您的循环里面应该有所有3个初始的代码块。
      courseE_artist_functions3_2018_authored_hint:
        courseD_artist_functions3_a: |-
          为了通过这关，你只需要添加一个循环来重复初始的代码8次。
          
          如果你不记得初始代码是什么样了，点击工作区右上角"重新开始"。
        courseD_artist_functions3_b: 您的循环里面应该有所有3个初始的代码块。
      courseE_artist_functions4_authored_hint:
        courseD_artist_functions4_a: 尝试使用函数！
        courseD_artist_functions4_b: 将`画一个星星`从工具箱中拖出以开始构造函数。因为你画的是同一个星形图案, 所以它应该和以前的拼图有相同的代码。
        courseD_artist_functions4_c: 使用绿色`画一个星星`模块在您的主程序来调用这个功能。别忘了在每颗星星之间跳跃前进!
      courseE_artist_functions4_2018_authored_hint:
        courseD_artist_functions4_a: 尝试使用函数！
        courseD_artist_functions4_b: 将`画一个星星`从工具箱中拖出以开始构造函数。因为你画的是同一个星形图案, 所以它应该和以前的拼图有相同的代码。
        courseD_artist_functions4_c: 使用绿色`画一个星星`模块在您的主程序来调用这个功能。别忘了在每颗星星之间跳跃前进!
      courseE_artist_functions5_authored_hint:
        courseD_artist_functions5_a: 别放弃！记住你已经学会的东西。
        courseD_artist_functions5_b: 函数使它可以很容易地在任何时候调用保存的代码, 而不仅仅是从循环里！
        courseD_artist_functions5_c: 首先, 将星星形状的代码拖动到`画一个星星`函数中, 然后使用此函数绘制三颗星星！
      courseE_artist_functions5_2018_authored_hint:
        courseD_artist_functions5_a: 别放弃！记住你已经学会的东西。
        courseD_artist_functions5_b: 函数使它可以很容易地在任何时候调用保存的代码, 而不仅仅是从循环里！
        courseD_artist_functions5_c: 首先, 将星星形状的代码拖动到`画一个星星`函数中, 然后使用此函数绘制三颗星星！
      courseE_artist_functions6_authored_hint:
        grade4_artist_functions_windows0_a: 现在只专注于制作一个窗口。我们将在下一个关卡中为它创建一个函数。
        grade4_artist_functions_windows0_b: 尝试使用嵌套循环。内循环将制作正方形，外循环将让正方形旋转四次。
        grade4_artist_functions_windows0_c: 不要害怕犯错误！即使你还没有解决这个关卡，尝试添加模块并运行代码, 看看会发生什么。
      courseE_artist_functions6_2018_authored_hint:
        grade4_artist_functions_windows0_a: 现在只专注于制作一个窗口。我们将在下一个关卡中为它创建一个函数。
        grade4_artist_functions_windows0_b: 尝试使用嵌套循环。内循环将制作正方形，外循环将让正方形旋转四次。
        grade4_artist_functions_windows0_c: 不要害怕犯错误！即使你还没有解决这个关卡，尝试添加模块并运行代码, 看看会发生什么。
      courseE_artist_functions7_authored_hint:
        courseD_artist_functions7_a: 请尝试首先创建函数, 然后一次添加一个窗口。
        courseD_artist_functions7_b: 不需要添加任何额外的重复循环。只需让艺术家在每个窗口顶部向前跳跃100像素，然后向下跳150像素到达底部窗口。
      courseE_artist_functions7_2018_authored_hint:
        courseD_artist_functions7_a: 请尝试首先创建函数, 然后一次添加一个窗口。
        courseD_artist_functions7_b: 不需要添加任何额外的重复循环。只需让艺术家在每个窗口顶部向前跳跃100像素，然后向下跳150像素到达底部窗口。
      courseE_artist_functions8_authored_hint:
        courseD_artist_functions8_f: 你只需要一个 ' 前进 ' 块, 但你将需要相当多的 ' 跳跃前进 ' 和/或 ' 跳转向后 ' 块!
        courseD_artist_functions8_a: |-
          从制作一个正方形的函数开始，然后尝试为一行正方形做一个函数。
          
          如何使用`draw a line of squares`（用正方形画一条线）函数来制作此图像？
        courseD_artist_functions8_d: |-
          用正方形画一条线，
          - 重复3次
          - 用边长**50像素**画一个正方形
          - 向前跳**100像素**
        courseD_artist_functions8_b: |-
          把此图片中的每一行视为3个正方形的线。它们有多少条正方形线，您要从哪里开始画它们？
          
          ![](https://images.code.org/22a6f5cc5551371057244eee01955f8e-image-1493135135468.4.10 Hint Drawing.png)
        courseD_artist_functions8_c: 在每行正方形的末尾，在绘制下一行之前艺术家得向下及向后跳跃。
        courseD_artist_functions8_g: "![](https://images.code.org/c5b48a0db328c6cb32a024d2bf9c00af-image-1493139855549.gif)"
      courseE_artist_functions8_2018_authored_hint:
        courseD_artist_functions8_f: 你只需要一个 ' 前进 ' 块, 但你将需要相当多的 ' 跳跃前进 ' 和/或 ' 跳转向后 ' 块!
        courseD_artist_functions8_a: |-
          从制作一个正方形的函数开始，然后尝试为一行正方形做一个函数。
          
          如何使用`draw a line of squares`（用正方形画一条线）函数来制作此图像？
        courseD_artist_functions8_d: |-
          用正方形画一条线，
          - 重复3次
          - 用边长**50像素**画一个正方形
          - 向前跳**100像素**
        courseD_artist_functions8_b: |-
          把此图片中的每一行视为3个正方形的线。它们有多少条正方形线，您要从哪里开始画它们？
          
          ![](https://images.code.org/22a6f5cc5551371057244eee01955f8e-image-1493135135468.4.10 Hint Drawing.png)
        courseD_artist_functions8_c: 在每行正方形的末尾，在绘制下一行之前艺术家得向下及向后跳跃。
        courseD_artist_functions8_g: "![](https://images.code.org/c5b48a0db328c6cb32a024d2bf9c00af-image-1493139855549.gif)"
      courseE_artist_functions9_authored_hint:
        courseD_artist_functions9_e: |-
          你能在这幅画中找到四个可以使用`画一条三角形的线`的地方吗？
          
          ![](https://images.code.org/130e1040ecca7186dea87f42666f5620-image-1493140373966.gif)
        courseD_artist_functions9_a: |-
          这个关卡可以分成三部分：
          
          -制作`画一个三角形`函数
          -制作`画一行三角形`函数
          -使用`画一行三角形`函数四次来完成图画
        courseD_artist_functions9_b: 这幅画是通过绘制一行三角形4次, 并在绘制下一个三角形线之前旋转60或120度。
        courseD_artist_functions9_c: |-
          绘制三角形的线:
          -重复4次
          -绘制三角形
          -向前跳50像素
        courseD_artist_functions9_d: |-
          绘制菱形:
          -重复两次
          -绘制一条三角形的线
          -转60度
          -绘制一条三角形
          -转120 度
      courseE_artist_functions9_2018_authored_hint:
        courseD_artist_functions9_e: |-
          你能在这幅画中找到四个可以使用`画一条三角形的线`的地方吗？
          
          ![](https://images.code.org/130e1040ecca7186dea87f42666f5620-image-1493140373966.gif)
        courseD_artist_functions9_a: |-
          这个关卡可以分成三部分：
          
          -制作`画一个三角形`函数
          -制作`画一行三角形`函数
          -使用`画一行三角形`函数四次来完成图画
        courseD_artist_functions9_b: 这幅画是通过绘制一行三角形4次, 并在绘制下一个三角形线之前旋转60或120度。
        courseD_artist_functions9_c: |-
          绘制三角形的线:
          -重复4次
          -绘制三角形
          -向前跳50像素
        courseD_artist_functions9_d: |-
          绘制菱形:
          -重复两次
          -绘制一条三角形的线
          -转60度
          -绘制一条三角形
          -转120 度
      courseE_artist_functions_challenge_authored_hint:
        courseE_artist_functions_challenge_a: 如果再次调用该函数, 则可以在最后一个角创建相同的设计。你也可以随你所想`跳到`其他位置，或者将整个改成自己想要的样子！
      courseE_artist_functions_challenge1_authored_hint:
        courseE_artist_functions_challenge1_a: 如果再次调用该函数, 则可以在最后一个角创建相同的设计。
        courseE_artist_functions_challenge1_b: 你也可以随自己所想`跳到`其他位置或改变整个设计!
      courseE_artist_functions_challenge1_2018_authored_hint:
        courseE_artist_functions_challenge1_a: 如果再次调用该函数, 则可以在最后一个角创建相同的设计。
        courseE_artist_functions_challenge1_b: 你也可以随自己所想`跳到`其他位置或改变整个设计!
      courseE_artist_functions_challenge2_authored_hint:
        courseE_artist_functions_challenge1_a: "<xml>\n\n<block type=\"jump_to_xy\">\n<title name=\"XPOS\">350</title>\n<title name=\"YPOS\">200</title>\n</block>\n</xml>\n\n此`跳到`块允许您随时将僵尸艺术家移动到网格上的任何像素。它的工作原理是将他向右下角移动一定的像素。这总是从左上角开始计算，这意味着在命令运行*之前*，僵尸艺术家的位置无关紧要。\n\n![](https://images.code.org/b90fdddc778a27e199221271ce91307a-image-1496450976440.png)"
      courseE_artist_functions_challenge2_2018_authored_hint:
        courseE_artist_functions_challenge1_a: "<xml>\n\n<block type=\"jump_to_xy\">\n<title name=\"XPOS\">350</title>\n<title name=\"YPOS\">200</title>\n</block>\n</xml>\n\n此`跳到`块允许您随时将僵尸艺术家移动到网格上的任何像素。它的工作原理是将他向右下角移动一定的像素。这总是从左上角开始计算，这意味着在命令运行*之前*，僵尸艺术家的位置无关紧要。\n\n![](https://images.code.org/b90fdddc778a27e199221271ce91307a-image-1496450976440.png)"
      courseE_artist_functions_predict1_authored_hint: [ ]
      courseE_artist_functions_predict1_2018_authored_hint: [ ]
      courseE_artist_functions_predict2_authored_hint: [ ]
      courseE_artist_functions_predict2_2018_authored_hint: [ ]
      courseE_artist_predict1_authored_hint: [ ]
      courseE_artist_predict1_2018_authored_hint: [ ]
      courseE_artist_ramp10_authored_hint:
        courseD_artist_ramp10_a: 别忘了在每个三角形后转向60度。 您需要将该指令放在哪个循环中？
        courseD_artist_ramp10_b: 您可以使用`转向`模块的下拉菜单来查看所需的角度!
        courseD_artist_ramp10_c: |-
          艺术家将总共画六个三角形！
          
          ![](https://images.code.org/752d82f3afdca0a7d7c01d6fa2abb583-image-1499889821499.2_solution2.gif)
      courseE_artist_ramp11_authored_hint:
        courseD_artist_ramp11a: 若要绘制一条边，使用`向前移动100像素`模块, 并将100更改为200。
        courseD_artist_ramp11b: |-
          若要绘制4条边, 请将`向前移动100像素`模块放在重复循环里面, 并确保该循环设置为4次。然后别忘了转向！
      courseE_artist_ramp12_authored_hint:
        courseD_artist_ramp12_a: 你可以先画方块, 然后三角形, 或者反过来!
      courseE_artist_ramp8_authored_hint:
        courseE_artist_ramp8_a: 若要绘制一条边，使用`向前移动100像素`模块, 并将100更改为200。
        courseE_artist_ramp8_b: |-
          若要绘制4条边, 请将`向前移动100像素`模块放在重复循环里面, 并确保该循环设置为4次。然后别忘了转向！
        courseE_artist_ramp8_c: '你的循环应该有两个模块在里面：`向前移动`和`向右转90度`。'
      courseE_artist_ramp8_2_authored_hint:
        courseE_artist_ramp8_a: 若要绘制一条边，使用`向前移动100像素`模块, 并将100更改为200。
        courseE_artist_ramp8_b: |-
          若要绘制4条边, 请将`向前移动100像素`模块放在重复循环里面, 并确保该循环设置为4次。然后别忘了转向！
        courseE_artist_ramp8_c: '你的循环应该有两个模块在里面：`向前移动`和`向右转90度`。'
      courseE_artist_ramp8_2018_authored_hint:
        courseE_artist_ramp8_a: 若要绘制一条边，使用`向前移动100像素`模块, 并将100更改为200。
        courseE_artist_ramp8_b: |-
          若要绘制4条边, 请将`向前移动100像素`模块放在重复循环里面, 并确保该循环设置为4次。然后别忘了转向！
        courseE_artist_ramp8_c: '你的循环应该有两个模块在里面：`向前移动`和`向右转90度`。'
      courseE_artist_ramp8_2_2018_authored_hint:
        courseE_artist_ramp8_a: 若要绘制一条边，使用`向前移动100像素`模块, 并将100更改为200。
        courseE_artist_ramp8_b: |-
          若要绘制4条边, 请将`向前移动100像素`模块放在重复循环里面, 并确保该循环设置为4次。然后别忘了转向！
        courseE_artist_ramp8_c: '你的循环应该有两个模块在里面：`向前移动`和`向右转90度`。'
      courseE_artist_ramp9_authored_hint:
        courseD_artist_ramp12_a: 这和正方形有什么相似之处？ 又有什么不同？
        courseD_artist_ramp12_b: 您可以使用`转向`模块的下拉菜单来查看所需的角度!
        courseD_artist_ramp12_c: 若要绘制每条边，需要向前移动100像素, 然后向右转120度。你需要几条边？
      courseE_artist_ramp9_2_authored_hint:
        courseD_artist_ramp12_a: 这和正方形有什么相似之处？ 又有什么不同？
        courseD_artist_ramp12_b: 您可以使用`转向`模块的下拉菜单来查看所需的角度!
        courseD_artist_ramp12_c: 若要绘制每条边，需要向前移动100像素, 然后向右转120度。你需要几条边？
      courseE_artist_ramp9_2018_authored_hint:
        courseD_artist_ramp12_a: 这和正方形有什么相似之处？ 又有什么不同？
        courseD_artist_ramp12_b: 您可以使用`转向`模块的下拉菜单来查看所需的角度!
        courseD_artist_ramp12_c: 若要绘制每条边，需要向前移动100像素, 然后向右转120度。你需要几条边？
      courseE_artist_ramp9_2_2018_authored_hint:
        courseD_artist_ramp12_a: 这和正方形有什么相似之处？ 又有什么不同？
        courseD_artist_ramp12_b: 您可以使用`转向`模块的下拉菜单来查看所需的角度!
        courseD_artist_ramp12_c: 若要绘制每条边，需要向前移动100像素, 然后向右转120度。你需要几条边？
      courseE_bee_concept1_authored_hint:
        courseE_bee_concept1_b: 这里有没有*重复*的规律？
        courseE_bee_concept1_a: 如果不了解如何在此处使用嵌套循环, 请尝试在一张纸上逐步写出说明。圈出所看到的规律。
      courseE_bee_concept1_2018_authored_hint:
        courseE_bee_concept1_b: 这里有没有*重复*的规律？
        courseE_bee_concept1_a: 如果不了解如何在此处使用嵌套循环, 请尝试在一张纸上逐步写出说明。圈出所看到的规律。
      courseE_bee_concept2_authored_hint:
        courseE_bee_concept2_a: '`当`循环能帮上忙吗？'
        courseE_bee_concept2_d: 你甚至可以检查空白的位置，看看是否蜂蜜大于0个。
        courseE_bee_concept2_b: 您可以使用`当`循环移动到每条路径的末尾, 并收集每个位置中的所有蜂蜜。
        courseE_bee_concept2_c: 蜜蜂在每条小路后应该往哪个方向转？
      courseE_bee_concept2_2018_authored_hint:
        courseE_bee_concept2_a: '`当`循环能帮上忙吗？'
        courseE_bee_concept2_d: 你甚至可以检查空白的位置，看看是否蜂蜜大于0个。
        courseE_bee_concept2_b: 您可以使用`当`循环移动到每条路径的末尾, 并收集每个位置中的所有蜂蜜。
        courseE_bee_concept2_c: 蜜蜂在每条小路后应该往哪个方向转？
      courseE_bee_concept3_authored_hint:
        courseE_bee_concept3a_a: 尝试使用`重复`循环来通过此关卡。
        courseE_bee_concept3a_b: 不知道在哪里放循环？尝试逐步把代码写下, 并寻找规律。
        courseE_bee_concept3a_c: 有三组花, 所以外面的 `重复`循环应该重复三次。
      courseE_bee_concept3_2018_authored_hint:
        courseE_bee_concept3a_a: 尝试使用`重复`循环来通过此关卡。
        courseE_bee_concept3a_b: 不知道在哪里放循环？尝试逐步把代码写下, 并寻找规律。
        courseE_bee_concept3a_c: 有三组花, 所以外面的 `重复`循环应该重复三次。
      courseE_bee_concept4_authored_hint:
        courseE_bee_concept4_a: 一个`如果/否则`的语句真的可以在这里帮到您。
        courseE_bee_concept4_b: 台阶模式可以帮助你穿过所有的花和蜂窝。
        courseE_bee_concept4_c: 如果你是在花那里, 你必须获得花蜜多少次？所有的花都是同样的数字吗？
      courseE_bee_concept4_2018_authored_hint:
        courseE_bee_concept4_a: 一个`如果/否则`的语句真的可以在这里帮到您。
        courseE_bee_concept4_b: 台阶模式可以帮助你穿过所有的花和蜂窝。
        courseE_bee_concept4_c: 如果你是在花那里, 你必须获得花蜜多少次？所有的花都是同样的数字吗？
      courseE_bee_concept5_authored_hint:
        courseE_bee_concept5_a: 花朵沿着方形的小路。你可以使用`当前面有路时`来跟随这条路，甚至是每条边不一样长的正方形也行。
        courseE_bee_concept5_c: |-
          这是一张蜜蜂可以走的长方形小路的图片。
          
          ![](https://images.code.org/39554a528b5ed168737e846c161f00ee-image-1510202150660.33.23.png)
        courseE_bee_concept5_b: 哪怕已经知道那里没有花了，仍然可以使用`如果`模块在每个正方形那里找花。
      courseE_bee_concept5_2018_authored_hint:
        courseE_bee_concept5_a: 花朵沿着方形的小路。你可以使用`当前面有路时`来跟随这条路，甚至是每条边不一样长的正方形也行。
        courseE_bee_concept5_c: |-
          这是一张蜜蜂可以走的长方形小路的图片。
          
          ![](https://images.code.org/39554a528b5ed168737e846c161f00ee-image-1510202150660.33.23.png)
        courseE_bee_concept5_b: 哪怕已经知道那里没有花了，仍然可以使用`如果`模块在每个正方形那里找花。
      courseE_bee_functions1_authored_hint:
        courseE_bee_functions1_a: 请记住，向左和向右转都是相对于蜜蜂的视角。
        courseE_bee_functions1_b: 收集花蜜时使用`重复`循环让代码更短。
        courseE_bee_functions1_c: 请记住, 向左，向右转向都是从蜜蜂的角度来看的。
      courseE_bee_functions10_authored_hint:
        courseE_bee_functions10_a: 你需要一个`当`循环来收集所有的蜂蜜, 因为不同蜂窝的数量不一样。
        courseE_bee_functions10_b: 在函数中包括转向和移动, 这样当蜜蜂在主路径上时就可以调用它。
        courseE_bee_functions10_c: 记住在主程序中调用您的函数！
      courseE_bee_functions10_2018_authored_hint:
        courseE_bee_functions10_a: 你需要一个`当`循环来收集所有的蜂蜜, 因为不同蜂窝的数量不一样。
        courseE_bee_functions10_b: 在函数中包括转向和移动, 这样当蜜蜂在主路径上时就可以调用它。
        courseE_bee_functions10_c: 记住在主程序中调用您的函数！
      courseE_bee_functions1_2018_authored_hint:
        courseE_bee_functions1_a: 请记住，向左和向右转都是相对于蜜蜂的视角。
        courseE_bee_functions1_b: 收集花蜜时使用`重复`循环让代码更短。
        courseE_bee_functions1_c: 请记住, 向左，向右转向都是从蜜蜂的角度来看的。
      courseE_bee_functions2_authored_hint:
        courseE_bee_functions2_a: 函数已经写好了，但你需要在每朵花那里调用它。
        courseE_bee_functions2_b: 这个<xml><block type="procedures_callnoreturn"><mutation name="get 2 nectar"/></block></xml>模块能调用给你的函数。
        courseE_bee_functions2_c: 你得向前移动, 得到两个花蜜两次来通过这个关卡。
      courseE_bee_functions2_2018_authored_hint:
        courseE_bee_functions2_a: 函数已经写好了，但你需要在每朵花那里调用它。
        courseE_bee_functions2_b: 这个<xml><block type="procedures_callnoreturn"><mutation name="get 2 nectar"/></block></xml>模块能调用给你的函数。
        courseE_bee_functions2_c: 你得向前移动, 得到两个花蜜两次来通过这个关卡。
      courseE_bee_functions3_authored_hint:
        courseE_bee_functions3_a: '在这个关卡的函数只需要收集花蜜，但不应该有任何`向前移动`或`转向`模块。 '
        courseE_bee_functions3_b: 在`当运行时`模块下调用`获得5个`函数。
        courseE_bee_functions3_c: 你的主程序将控制所有的运动, 此函数只是当蜜蜂到达一朵花时会发生什么 。
        courseE_bee_functions3_d: 请尝试使用此路径通过。
      courseE_bee_functions3_2018_authored_hint:
        courseE_bee_functions3_a: '在这个关卡的函数只需要收集花蜜，但不应该有任何`向前移动`或`转向`模块。 '
        courseE_bee_functions3_b: 在`当运行时`模块下调用`获得5个`函数。
        courseE_bee_functions3_c: 你的主程序将控制所有的运动, 此函数只是当蜜蜂到达一朵花时会发生什么 。
        courseE_bee_functions3_d: 请尝试使用此路径通过。
      courseE_bee_functions4_authored_hint:
        courseE_bee_functions4_a: 函数应该已经能沿着小路走，然后让蜜蜂返回到主干道。你不需要将该部分添加到主程序中。
        courseE_bee_functions4_b: 使用绿色的`向前移动并采花蜜`模块来调用这个函数。
        courseE_bee_functions4_c: 您不需要更改函数, 只需在程序中使用它。
      courseE_bee_functions4_2018_authored_hint:
        courseE_bee_functions4_a: 函数应该已经能沿着小路走，然后让蜜蜂返回到主干道。你不需要将该部分添加到主程序中。
        courseE_bee_functions4_b: 使用绿色的`向前移动并采花蜜`模块来调用这个函数。
        courseE_bee_functions4_c: 您不需要更改函数, 只需在程序中使用它。
      courseE_bee_functions5_authored_hint:
        courseE_bee_functions5_a: 编辑函数，这样可以在不更改主程序的情况下通过此关卡。
        courseE_bee_functions5_c: '`向前移动`块可以更改为`向后移动`块。使用它, 而不是在路径的末尾调头!'
        courseE_bee_functions5_b: "函数应该可以让蜜蜂：\n\n- 转弯\n- 前进\n- 收集所有的花蜜\n- 转回到蜜蜂出发的方向"
      courseE_bee_functions5_2018_authored_hint:
        courseE_bee_functions5_a: 编辑函数，这样可以在不更改主程序的情况下通过此关卡。
        courseE_bee_functions5_c: '`向前移动`块可以更改为`向后移动`块。使用它, 而不是在路径的末尾调头!'
        courseE_bee_functions5_b: "函数应该可以让蜜蜂：\n\n- 转弯\n- 前进\n- 收集所有的花蜜\n- 转回到蜜蜂出发的方向"
      courseE_bee_functions6_authored_hint:
        courseE_bee_functions6_a: "如果这个关卡看上去很有挑战性，尝试一点一点创建你的函数。 \n\n添加一些模块试试看。继续添加，然后再尝试。很快，你就能成功了！\n\n ![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)"
        courseE_bee_functions6_b: 这可能有助于在函数内移动的情况, 但不是所有的`向前移动`块都需要在那里。
      courseE_bee_functions6_2018_authored_hint:
        courseE_bee_functions6_a: "如果这个关卡看上去很有挑战性，尝试一点一点创建你的函数。 \n\n添加一些模块试试看。继续添加，然后再尝试。很快，你就能成功了！\n\n ![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)"
        courseE_bee_functions6_b: 这可能有助于在函数内移动的情况, 但不是所有的`向前移动`块都需要在那里。
      courseE_bee_functions6test_authored_hint:
        courseE_bee_functions6_a: "如果这个关卡看上去很有挑战性，尝试一点一点创建你的函数。 \n\n添加一些模块试试看。继续添加，然后再尝试。很快，你就能成功了！\n\n ![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)"
        courseE_bee_functions6_b: 这可能有助于在函数内移动的情况, 但不是所有的`向前移动`块都需要在那里。
      courseE_bee_functions7_authored_hint:
        courseE_bee_functions7_a: "如果这个关卡看上去很有挑战性，尝试一点一点创建你的函数。 \n\n添加一些模块试试看。继续添加，然后再尝试。很快，你就能成功了！"
        courseE_bee_functions7_b: |2
          别忘了把你的代码创建在绿色的函数模块中。
          
           ![](https://images.code.org/8fe1fae5caf4ede3a9c9bd9f26940cde-image-1467996837459.gif)
        courseE_bee_functions7_c: 该函数应该让蜜蜂转到路上，收集花蜜，制作蜂蜜，然后转回头并回到原位。
      courseE_bee_functions7_2018_authored_hint:
        courseE_bee_functions7_a: "如果这个关卡看上去很有挑战性，尝试一点一点创建你的函数。 \n\n添加一些模块试试看。继续添加，然后再尝试。很快，你就能成功了！"
        courseE_bee_functions7_b: |2
          别忘了把你的代码创建在绿色的函数模块中。
          
           ![](https://images.code.org/8fe1fae5caf4ede3a9c9bd9f26940cde-image-1467996837459.gif)
        courseE_bee_functions7_c: 该函数应该让蜜蜂转到路上，收集花蜜，制作蜂蜜，然后转回头并回到原位。
      courseE_bee_functions8_authored_hint:
        courseE_bee_functions8_a: 函数将只收集花蜜。使用当循环而非重复循环。
        courseE_bee_functions8_b: 使用`while nectar > 0`来确保得到所有的花蜜。
        courseE_bee_functions8_c: 您的主程序将需要一个台阶移动模式。请记住, 主程序是在`当运行时`模块下的代码。
      courseE_bee_functions8_2018_authored_hint:
        courseE_bee_functions8_a: 函数将只收集花蜜。使用当循环而非重复循环。
        courseE_bee_functions8_b: 使用`while nectar > 0`来确保得到所有的花蜜。
        courseE_bee_functions8_c: 您的主程序将需要一个台阶移动模式。请记住, 主程序是在`当运行时`模块下的代码。
      courseE_bee_functions9_authored_hint:
        courseE_bee_functions9_a: 你可以使用和上一个关卡中一样的函数。不同的是，要创建一个函数，当到了每朵花那里可以收集所有的花蜜。
        courseE_bee_functions9_b: 即使你知道一些花有多少花蜜, 一个`当`循环可以使一个函数涵盖所有的花蜜。
      courseE_bee_functions9_2018_authored_hint:
        courseE_bee_functions9_a: 你可以使用和上一个关卡中一样的函数。不同的是，要创建一个函数，当到了每朵花那里可以收集所有的花蜜。
        courseE_bee_functions9_b: 即使你知道一些花有多少花蜜, 一个`当`循环可以使一个函数涵盖所有的花蜜。
      courseE_bee_functions_challenge1_authored_hint:
        courseE_bee_functions_challenge1_a: "如果这个关卡看上去很有挑战性，尝试一点一点创建你的函数。 \n\n添加一些模块试试看。继续添加，然后再尝试。很快，你就能成功了！"
        courseE_bee_functions_challenge1_b: 请记住在绿色函数模块内部构建代码。
      courseE_bee_functions_challenge1_2018_authored_hint:
        courseE_bee_functions_challenge1_a: "如果这个关卡看上去很有挑战性，尝试一点一点创建你的函数。 \n\n添加一些模块试试看。继续添加，然后再尝试。很快，你就能成功了！"
        courseE_bee_functions_challenge1_b: 请记住在绿色函数模块内部构建代码。
      courseE_bee_functions_challenge2_authored_hint:
        courseE_bee_functions_challenge1_a: "如果这个关卡看上去很有挑战性，尝试一点一点创建你的函数。 \n\n添加一些模块试试看。继续添加，然后再尝试。很快，你就能成功了！"
        courseE_bee_functions_challenge1_b: 请记住在绿色函数模块内部构建代码。
      courseE_bee_functions_challenge2_2018_authored_hint:
        courseE_bee_functions_challenge1_a: "如果这个关卡看上去很有挑战性，尝试一点一点创建你的函数。 \n\n添加一些模块试试看。继续添加，然后再尝试。很快，你就能成功了！"
        courseE_bee_functions_challenge1_b: 请记住在绿色函数模块内部构建代码。
      courseE_bee_ramp14_authored_hint:
        courseE_bee_ramp14_a: 蜜蜂就像以前关卡里的农夫一样工作。沿着小路嗡嗡叫，在有花蜜（当花蜜多于0个）的地方采花蜜, 并酿蜂蜜。
        courseE_bee_ramp14_b: 每个空格都可以有一个以上的花或蜂窝, 所以请务必使用`当`循环来获得所有的。
        courseE_bee_ramp14_c: 这个关卡几乎和前一个一样, 只是用蜂蜜和花蜜来代替蔬菜。
      courseE_bee_ramp14_2018_authored_hint:
        courseE_bee_ramp14_a: 蜜蜂就像以前关卡里的农夫一样工作。沿着小路嗡嗡叫，在有花蜜（当花蜜多于0个）的地方采花蜜, 并酿蜂蜜。
        courseE_bee_ramp14_b: 每个空格都可以有一个以上的花或蜂窝, 所以请务必使用`当`循环来获得所有的。
        courseE_bee_ramp14_c: 这个关卡几乎和前一个一样, 只是用蜂蜜和花蜜来代替蔬菜。
      courseE_bee_ramp17_authored_hint:
        courseE_bee_ramp17_a: 由于我们没有一个重复模块在特定某些次数下做某件事情, 我们应该用什么模块沿路径移动？
        courseE_bee_ramp17: 如果你没有”直到“模块来解决这个关卡, 你会在哪里看到重复的代码？你要如何使用重复代码来塑造你必须要如何使用 "直到" 模块来解决问题？
        courseE_bee_ramp17_b: 不要害怕犯错误！即使你还没有解决这个关卡，尝试添加模块并运行代码, 看看会发生什么。
        courseE_bee_ramp17_c: 你得要以阶梯式的模式移动。先尝试编码, 然后添加`如果/否则`语句和`当`循环来查找花和蜂窝。
      courseE_collector_ramp10_authored_hint:
        courseD_artist_ramp10_a: |-
          不要在每边使用四个`向前移动`向前移动块, 尝试把一个`向前移动`模块放到` 重复`循环里面, 就像这样：<xml><block type="controls_repeat">
          <title name="TIMES">4</title>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          </block></xml>
        courseD_artist_ramp10_b: 别忘了收集一份财宝, 然后在每个台阶后转向!
      courseE_farmer_concept1_authored_hint:
        courseE_farmer_concept1_a: 一个`当有洞时`模块将帮助填补任何洞，直到填平它。
        courseE_farmer_concept1_b: 你可以用阶梯模式到达洞。
      courseE_farmer_concept1_2018_authored_hint:
        courseE_farmer_concept1_a: 一个`当有洞时`模块将帮助填补任何洞，直到填平它。
        courseE_farmer_concept1_b: 你可以用阶梯模式到达洞。
      courseE_farmer_concept2_authored_hint:
        courseE_farmer_concept2_a: 路径都是相同的长度，但它们是分开的不同的正方形。这里不适合使用循环。试试函数。
        courseE_farmer_concept2_b: 如果有一个函数，能够转弯，沿着路径走下去，收集南瓜，然后返回到水平的主路上，它会很有帮助。
        courseE_farmer_concept2_c: 您的主程序可以调用这个函数与绿色`做一些事情`模块。
      courseE_farmer_concept2_2018_authored_hint:
        courseE_farmer_concept2_a: 路径都是相同的长度，但它们是分开的不同的正方形。这里不适合使用循环。试试函数。
        courseE_farmer_concept2_b: 如果有一个函数，能够转弯，沿着路径走下去，收集南瓜，然后返回到水平的主路上，它会很有帮助。
        courseE_farmer_concept2_c: 您的主程序可以调用这个函数与绿色`做一些事情`模块。
      courseE_farmer_concept3_authored_hint:
        grade3_robotFarmer_ConditionalsIntro_8_a: 即使您不知道一条路径中有多少方块，`当前面有路时`模块会让你继续前进。
        grade3_robotFarmer_ConditionalsIntro_8_b: 一旦到达路径的末尾, 你应该做什么？
        grade3_robotFarmer_ConditionalsIntro_8_c: 使用`重复`循环运行多次代码来得到每条直线路径。
      courseE_farmer_concept3_2018_authored_hint:
        grade3_robotFarmer_ConditionalsIntro_8_a: 即使您不知道一条路径中有多少方块，`当前面有路时`模块会让你继续前进。
        grade3_robotFarmer_ConditionalsIntro_8_b: 一旦到达路径的末尾, 你应该做什么？
        grade3_robotFarmer_ConditionalsIntro_8_c: 使用`重复`循环运行多次代码来得到每条直线路径。
      courseE_farmer_concept4_authored_hint:
        4-5_Artist_Patterns_3_a: 每次你试验新的时候，要小心的拖拽出整块代码。
        4-5_Artist_Patterns_3_b: 如果你的代码变得太乱了，随时可以点击“重新开始”来从头再来一遍。
      courseE_farmer_functions1_authored_hint:
        courseE_farmer_functions1_a: 这个工具箱这次排放有点不同！点击不同的类别，看看有哪些模块。
        courseE_farmer_functions1_b: 你只需要捡起一个南瓜, 但你是否可以用一个循环来得到它？
      courseE_farmer_functions10_authored_hint: [ ]
      courseE_farmer_functions10b_authored_hint:
        courseE_farmer_functions10b_a: 您得要先重新创建您的函数。
        courseE_farmer_functions10b_b: 在第一个南瓜之后, 你需要转哪边？
        courseE_farmer_functions10b_c: 回顾最后一个关卡, 来帮你制作这个函数。
      courseE_farmer_functions10b_2018_authored_hint:
        courseE_farmer_functions10b_a: 您得要先重新创建您的函数。
        courseE_farmer_functions10b_b: 在第一个南瓜之后, 你需要转哪边？
        courseE_farmer_functions10b_c: 回顾最后一个关卡, 来帮你制作这个函数。
      courseE_farmer_functions11_predict_authored_hint: [ ]
      courseE_farmer_functions11_predict_2018_authored_hint: [ ]
      courseE_farmer_functions1_2018_authored_hint:
        courseE_farmer_functions1_a: 这个工具箱这次排放有点不同！点击不同的类别，看看有哪些模块。
        courseE_farmer_functions1_b: 你只需要捡起一个南瓜, 但你是否可以用一个循环来得到它？
      courseE_farmer_functions1a_authored_hint:
        courseE_farmer_functions1a_a: 一步步想清楚`如果/否则`语句。如果正站在玉米株边，应该做什么？
        courseE_farmer_functions1a_b: 使用`重复直到`模块来获得南瓜!
      courseE_farmer_functions1a_2018_authored_hint:
        courseE_farmer_functions1a_a: 一步步想清楚`如果/否则`语句。如果正站在玉米株边，应该做什么？
        courseE_farmer_functions1a_b: 使用`重复直到`模块来获得南瓜!
      courseE_farmer_functions2a_authored_hint: [ ]
      courseE_farmer_functions2aALT_authored_hint: [ ]
      courseE_farmer_functions2b_authored_hint:
        courseE_farmer_functions2b_a: 您可以使用`重复直到南瓜`来到达两条路径的结束。
        courseE_farmer_functions2b_b: 连接路径上没有玉米, 所以你可以只沿着它走并转向。
        courseE_farmer_functions2b_c: 你将需要两个单独的`重复直到`模块, 来获得所有的作物。
      courseE_farmer_functions2b_2018_authored_hint:
        courseE_farmer_functions2b_a: 您可以使用`重复直到南瓜`来到达两条路径的结束。
        courseE_farmer_functions2b_b: 连接路径上没有玉米, 所以你可以只沿着它走并转向。
        courseE_farmer_functions2b_c: 你将需要两个单独的`重复直到`模块, 来获得所有的作物。
      courseE_farmer_functions2ba_authored_hint:
        courseE_farmer_functions2ba_a: 使用绿色的`玉米和南瓜`模块调用这个函数。
        courseE_farmer_functions2ba_b: 在`当运行时`下, 将工具箱中的所有模块拖到一起看此函数是如何工作的。
      courseE_farmer_functions2ba_2018_authored_hint:
        courseE_farmer_functions2ba_a: 使用绿色的`玉米和南瓜`模块调用这个函数。
        courseE_farmer_functions2ba_b: 在`当运行时`下, 将工具箱中的所有模块拖到一起看此函数是如何工作的。
      courseE_farmer_functions3_authored_hint:
        courseE_farmer_functions3_a: 请试着使用`当前面有路时`循环去到想去的地方。
      courseE_farmer_functions3b_authored_hint:
        courseE_farmer_functions1a_a: 将`如果`和`如果/否则`语句嵌套到一起，真的可以帮上忙。
      courseE_farmer_functions3c_authored_hint:
        courseE_farmer_functions3c_a: 这个程序经常重复什么顺序？可以将这些模块拖到函数中吗？
        courseE_farmer_functions3c_b: 不要忘记在你删除模块的时候，在主程序中调用您的函数。
      courseE_farmer_functions3c_2018_authored_hint:
        courseE_farmer_functions3c_a: 这个程序经常重复什么顺序？可以将这些模块拖到函数中吗？
        courseE_farmer_functions3c_b: 不要忘记在你删除模块的时候，在主程序中调用您的函数。
      courseE_farmer_functions4_authored_hint:
        courseE_farmer_functions4_a: 把所有的代码拽出`重复`循环并放入`去采南瓜`函数中。
        courseE_farmer_functions4_b: 在运行代码之前, 请不要忘记将调用`去采南瓜`函数的模块放在循环中。
      courseE_farmer_functions4b_authored_hint:
        courseE_farmer_functions4b_a: 不要害怕犯错误！即使你还没有解决这个关卡，尝试添加模块并运行代码, 看看会发生什么。
        courseE_farmer_functions4b_b: 记住在每条路径后都要转弯。
        courseE_farmer_functions4b_c: 绿色的`玉米和南瓜`模块在工具箱的函数选项卡中。
      courseE_farmer_functions4b_2018_authored_hint:
        courseE_farmer_functions4b_a: 不要害怕犯错误！即使你还没有解决这个关卡，尝试添加模块并运行代码, 看看会发生什么。
        courseE_farmer_functions4b_b: 记住在每条路径后都要转弯。
        courseE_farmer_functions4b_c: 绿色的`玉米和南瓜`模块在工具箱的函数选项卡中。
      courseE_farmer_functions5_authored_hint: [ ]
      courseE_farmer_functions5a_authored_hint: [ ]
      courseE_farmer_functions5b_authored_hint:
        courseE_farmer_functions5b_a: 你需要使用一个`当有玉米时`循环, 一个`当有莴苣时`和一个`当有南瓜时`来确保得到所有的东西。
      courseE_farmer_functions5c_authored_hint:
        courseE_farmer_functions5c_a: 在这个关卡里，有没有其他的模式可以循环?
        courseE_farmer_functions5c_b: 不要害怕犯错误！即使你还没有解决这个关卡，尝试添加模块并运行代码, 看看会发生什么。
      courseE_farmer_functions5c_2018_authored_hint:
        courseE_farmer_functions5c_a: 在这个关卡里，有没有其他的模式可以循环?
        courseE_farmer_functions5c_b: 不要害怕犯错误！即使你还没有解决这个关卡，尝试添加模块并运行代码, 看看会发生什么。
      courseE_farmer_functions6_authored_hint: [ ]
      courseE_farmer_functions6b_authored_hint: [ ]
      courseE_farmer_functions6c_authored_hint:
        courseE_farmer_functions6c_a: 编辑你的函数，也能查找生菜。
        courseE_farmer_functions6c_b: '`如果/否则`模块能否帮助查找格子里是否有莴苣？'
        courseE_farmer_functions6c_c: 别忘了继续查找玉米!
      courseE_farmer_functions6c_2018_authored_hint:
        courseE_farmer_functions6c_a: 编辑你的函数，也能查找生菜。
        courseE_farmer_functions6c_b: '`如果/否则`模块能否帮助查找格子里是否有莴苣？'
        courseE_farmer_functions6c_c: 别忘了继续查找玉米!
      courseE_farmer_functions7_authored_hint: [ ]
      courseE_farmer_functions7b_authored_hint:
        courseE_farmer_functions7b_a: 你不需要一个函数，但如果有帮助，你可以做一个！
        courseE_farmer_functions7b_b: 使用`如果/否则`语句来查找农作物, 然后根据所找到的作物转向。
        courseE_farmer_functions7b_c: 一个`重复直到南瓜`循环可以帮助你通过迷宫。
      courseE_farmer_functions7b_2018_authored_hint:
        courseE_farmer_functions7b_a: 你不需要一个函数，但如果有帮助，你可以做一个！
        courseE_farmer_functions7b_b: 使用`如果/否则`语句来查找农作物, 然后根据所找到的作物转向。
        courseE_farmer_functions7b_c: 一个`重复直到南瓜`循环可以帮助你通过迷宫。
      courseE_farmer_functions8_authored_hint:
        courseE_farmer_functions8_a: 创建一个把农夫带到玉米，采摘所有的玉米，然后转身回来的函数。
      courseE_farmer_functions8b_authored_hint:
        courseE_farmer_functions8b_a: 尝试运行给定的代码以查看它的功能。这之后你需要什么？
        courseE_farmer_functions8b_b: 将所有起始块拖到一个函数中, 以便您可以多次使用它们。
        courseE_farmer_functions8b_c: 您需要调用多少次函数？
      courseE_farmer_functions8b_2018_authored_hint:
        courseE_farmer_functions8b_a: 尝试运行给定的代码以查看它的功能。这之后你需要什么？
        courseE_farmer_functions8b_b: 将所有起始块拖到一个函数中, 以便您可以多次使用它们。
        courseE_farmer_functions8b_c: 您需要调用多少次函数？
      courseE_farmer_functions9_authored_hint:
        courseE_farmer_functions8_a: 创建一个把农夫带到玉米，采摘所有的玉米，然后转身回来的函数。
      courseE_farmer_functions9b_authored_hint:
        courseE_farmer_functions9b_a: 是否可以使用嵌套的`如果`和`如果/否则`语句来沿路径移动？
        courseE_farmer_functions9b_b: 使用`重复直到南瓜`来沿着所有的路径移动。
        courseE_farmer_functions9b_c: 您需要在路径中移动，这些路径就好像是在每次循环后都会变大的正方形。
      courseE_farmer_functions9b_2018_authored_hint:
        courseE_farmer_functions9b_a: 是否可以使用嵌套的`如果`和`如果/否则`语句来沿路径移动？
        courseE_farmer_functions9b_b: 使用`重复直到南瓜`来沿着所有的路径移动。
        courseE_farmer_functions9b_c: 您需要在路径中移动，这些路径就好像是在每次循环后都会变大的正方形。
      courseE_farmer_functions9b_clone_authored_hint: [ ]
      courseE_farmer_predict1_authored_hint:
        courseE_farmer_ramp12a: 如果需要提示的话，可以回到上一关看看。看看如何只**当**有物品时，才捡起物品。
      courseE_farmer_predict1_2018_authored_hint:
        courseE_farmer_ramp12a: 如果需要提示的话，可以回到上一关看看。看看如何只**当**有物品时，才捡起物品。
      courseE_farmer_predict2_authored_hint: [ ]
      courseE_farmer_predict2_2018_authored_hint: [ ]
      courseE_farmer_ramp11_authored_hint:
        courseE_farmer_ramp11_a: 如果你很难看到循环应该去哪里, 试着把它全部编码出来, 然后寻找一个模式。
        courseE_farmer_ramp11_b: 如何使用`重复`循环来采摘生菜, 而不是拖出 5个`采生菜`模块？
        courseE_farmer_ramp11_c: 你不需要使用5个重复循环得到所有的生菜。 只需要将采生菜的循环拖动到另一个循环里（挨着一个`向前移动`模块，这样就行了！）
      courseE_farmer_ramp11a_authored_hint:
        courseE_farmer_ramp12_a: '不需要`重复`循环告诉农民铲多少次土, 现在你可以使用`当有土堆时`模块。  '
        courseE_farmer_ramp12_b: 你只需要向前移动一次就能找到土。
      courseE_farmer_ramp11a_2018_authored_hint:
        courseE_farmer_ramp12_a: '不需要`重复`循环告诉农民铲多少次土, 现在你可以使用`当有土堆时`模块。  '
        courseE_farmer_ramp12_b: 你只需要向前移动一次就能找到土。
      courseE_farmer_ramp11b_authored_hint:
        courseE_farmer_ramp11b_a: 您可以在`重复`循环内嵌套`当`循环, 来使代码更短。
      courseE_farmer_ramp11b_2018_authored_hint:
        courseE_farmer_ramp11b_a: 您可以在`重复`循环内嵌套`当`循环, 来使代码更短。
      courseE_farmer_ramp12_authored_hint:
        courseE_farmer_ramp12_b: 你仍然需要在它的外面使用一个 `重复`循环告诉农夫要向前走多少次得到莴苣。
      courseE_farmer_ramp12_2018_authored_hint:
        courseE_farmer_ramp12_b: 你仍然需要在它的外面使用一个 `重复`循环告诉农夫要向前走多少次得到莴苣。
      courseE_farmer_ramp12_forswap_authored_hint:
        courseE_farmer_ramp12_b: 你仍然需要在它的外面使用一个 `重复`循环告诉农夫要向前走多少次得到莴苣。
      courseE_farmer_ramp12_forswap_2018_authored_hint:
        courseE_farmer_ramp12_b: 你仍然需要在它的外面使用一个 `重复`循环告诉农夫要向前走多少次得到莴苣。
      courseE_farmer_ramp12a_authored_hint:
        courseE_farmer_ramp12b: 您将需要检查21次`如果`语句, 来解决这个关卡。
        courseE_farmer_ramp12c: 不要害怕犯错误！即使你还没有解决这个关卡，尝试添加模块并运行代码, 看看会发生什么。
        courseE_farmer_ramp12d: 这里只会有生菜, 所以你不需要担心空的空格，玉米，或南瓜。
      courseE_farmer_ramp12a_2018_authored_hint:
        courseE_farmer_ramp12b: 您将需要检查21次`如果`语句, 来解决这个关卡。
        courseE_farmer_ramp12c: 不要害怕犯错误！即使你还没有解决这个关卡，尝试添加模块并运行代码, 看看会发生什么。
        courseE_farmer_ramp12d: 这里只会有生菜, 所以你不需要担心空的空格，玉米，或南瓜。
      courseE_farmer_ramp12b_authored_hint: [ ]
      courseE_farmer_ramp12b_2018_authored_hint: [ ]
      courseE_farmer_ramp12c_authored_hint:
        courseE_farmer_ramp12b_b: 你仍需要先使用一个`直到` 循环，当你到了莴苣那里，然后使用一个`当`循环。
      courseE_farmer_ramp12c_2018_authored_hint:
        courseE_farmer_ramp12b_b: 你仍需要先使用一个`直到` 循环，当你到了莴苣那里，然后使用一个`当`循环。
      courseE_farmer_ramp12d_authored_hint:
        courseE_farmer_ramp12d_b: 你仍然需要把你的`直到`和`当`循环放到`重复`循环中来通过这个关卡!
      courseE_farmer_ramp12d_2018_authored_hint:
        courseE_farmer_ramp12d_b: 你仍然需要把你的`直到`和`当`循环放到`重复`循环中来通过这个关卡!
      courseE_farmer_ramp12e_authored_hint:
        courseE_farmer_ramp12e_b: 这个关卡的解决方案看起来很像最后一个关卡的解决方案, 除了转向了另一个方向。
      courseE_farmer_ramp12e_2018_authored_hint:
        courseE_farmer_ramp12e_b: 这个关卡的解决方案看起来很像最后一个关卡的解决方案, 除了转向了另一个方向。
      courseE_farmer_ramp12f_authored_hint:
        courseE_farmer_ramp12f_b: 使用`如果/否则`模块，帮助农民决定，她是要向右还是向左转。
      courseE_farmer_ramp12f_2018_authored_hint:
        courseE_farmer_ramp12f_b: 使用`如果/否则`模块，帮助农民决定，她是要向右还是向左转。
      courseE_farmer_ramp12g_authored_hint:
        courseE_farmer_ramp12G_b: 使用`如果/否则`模块，帮助农民决定，她是要向右还是向左转。
      courseE_farmer_ramp12g_2018_authored_hint:
        courseE_farmer_ramp12G_b: 使用`如果/否则`模块，帮助农民决定，她是要向右还是向左转。
      courseE_farmer_ramp13_authored_hint:
        courseE_farmer_ramp13_a: 在一个空格中可以有多个作物, 所以一定要使用 `当`循环来把它们全部捡起来!
        courseE_farmer_ramp13_b: 使用`重复`循环, 这样就不必为每个正方形编写单独的如果语句。
        courseE_farmer_ramp13_c: 如果无法确定将循环放在何处，请尝试逐步编写代码并查找规律。
      courseE_farmer_ramp13_2018_authored_hint:
        courseE_farmer_ramp13_a: 在一个空格中可以有多个作物, 所以一定要使用 `当`循环来把它们全部捡起来!
        courseE_farmer_ramp13_b: 使用`重复`循环, 这样就不必为每个正方形编写单独的如果语句。
        courseE_farmer_ramp13_c: If you can't figure out where to put the loops, try writing your code step-by-step and look for patterns.
      courseE_farmer_ramp15_authored_hint:
        courseE_farmer_ramp15_a: 使用`重复直到到达南瓜`模块，让它到路径的尾端。
        courseE_farmer_ramp15_b: 沿路径移动到南瓜，还有什么需要做的？
        courseE_farmer_ramp15_c: 豆芽在你去南瓜的路上藏了各种各样的玉米或莴苣让你来收割。
      courseE_farmer_ramp15_2018_authored_hint:
        courseE_farmer_ramp15_a: 使用`重复直到到达南瓜`模块，让它到路径的尾端。
        courseE_farmer_ramp15_b: 沿路径移动到南瓜，还有什么需要做的？
        courseE_farmer_ramp15_c: 豆芽在你去南瓜的路上藏了各种各样的玉米或莴苣让你来收割。
      courseE_farmer_ramp16_authored_hint:
        courseE_farmer_ramp16_a: 如果我们沿着这条通往南瓜的小路前进, 我们必须一遍又一遍地做什么？我们什么时候停止重复？
        courseE_farmer_ramp16_b: 查找每一个地方的玉米或生菜将有助于简化您的代码。如果那里有作物, 你该怎么办？如果没有又该怎么办呢？
        courseE_farmer_ramp16_c: 使用`如果/否则`模块继续前进。当前进路径被阻止时，您需要转到哪个方向？
      courseE_maze_predict1_authored_hint: [ ]
      courseE_maze_predict1_2018_authored_hint: [ ]
      courseE_maze_ramp1_authored_hint:
        courseC_maze_programming1_0: 如果小鸟没有到达猪那里。 确保所有三个模块已完全连在一起，然后再次单击 "运行" 。
        courseC_maze_programming1_b: 这道关卡您不需要工具箱里任何额外的方块!
      courseE_maze_ramp13_authored_hint:
        courseD_maze_ramp11_b: 别忘了用"步进"按钮来一个模块一个模块的寻找错误。
        courseD_maze_ramp11_a: 使用重复模块可以一次又一次地运行单个模块或一堆代码。
      courseE_maze_ramp1_2018_authored_hint:
        courseC_maze_programming1_0: If the bird isn't getting to the pig, make sure all three of the blocks have been fully clicked together, then click "Run" again.
        courseC_maze_programming1_b: 这道关卡您不需要工具箱里任何额外的方块!
      courseE_maze_ramp2_authored_hint:
        courseC_maze_programming2_a: 要使用`向前移动`模块，请将其从工具箱拖到工作区中，并将其连接到`当运行时`模块下面。
        courseC_maze_programming2_b: 确保所有三个`向前移动`模块都附加到`当运行时`模块上。
      courseE_maze_ramp2_2018_authored_hint:
        courseC_maze_programming2_a: To use a `move forward` block, drag it from the toolbox out into the workspace and connect it to the `when run` block.
        courseC_maze_programming2_b: 确保所有三个`向前移动`模块都附加到`当运行时`模块上。
      courseE_maze_ramp3_authored_hint:
        courseC_maze_programming3_a: "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\n若要从代码中间删除模块, 请将所有模块拖到工作区的右边，并先暂时放在那里。\n\n点击要删除的块，并将它拖回工具箱。\n\n最后，把其它模块放回它们应该在的地方。\n"
        courseC_maze_programming3_b: 请记住，向右和向左转是从小鸟的视角来看的。
      courseE_maze_ramp3_2018_authored_hint:
        courseC_maze_programming3_a: "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\n若要从代码中间删除模块, 请将所有模块拖到工作区的右边，并先暂时放在那里。\n\n点击要删除的块，并将它拖回工具箱。\n\n最后，把其它模块放回它们应该在的地方。\n"
        courseC_maze_programming3_b: 请记住，向右和向左转是从小鸟的视角来看的。
      courseE_maze_ramp4_authored_hint:
        courseC_maze_programming4_a: 你需要从鸟的视角向右或向左转。如果你面对右边，向右转会使你朝下。
        courseC_maze_programming4_b: 要沿着这条路，向前移动并转弯，然后再移动并转向对面的路。再往前走一步到达猪。
        courseC_maze_programming4_c: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseE_maze_ramp4_2018_authored_hint:
        courseC_maze_programming4_a: You can turn right or left from the bird's point of view. If you are facing right, turning right will make you point downwards.
        courseC_maze_programming4_b: To follow the path, move forward and turn one way, then move again and turn the opposite way. Move forward one more time to reach the pig.
        courseC_maze_programming4_c: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseE_maze_ramp5_authored_hint:
        courseC_maze_programming5_a: 尝试使用"步进"按钮来一行一行运行你的代码。你能想出下一步需要做什么吗？
        courseC_maze_programming5_b: 你要走多远才能到拐角处？
        courseC_maze_programming5_c: 你需要在拐角处向左拐才能找到猪。
      courseE_maze_ramp5_2018_authored_hint:
        courseC_maze_programming5_a: 尝试使用"步进"按钮来一行一行运行你的代码。你能想出下一步需要做什么吗？
        courseC_maze_programming5_b: 你要走多远才能到拐角处？
        courseC_maze_programming5_c: 你需要在拐角处向左拐才能找到猪。
      courseE_maze_ramp6_authored_hint:
        courseC_maze_programming6_a: 有两种方法来解决这个难题 ！
        courseC_maze_programming6_b: 在移动前记得先转弯, 因为鸟儿开始面对墙。
        courseC_maze_programming6_c: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseE_maze_ramp6_2018_authored_hint:
        courseC_maze_programming6_a: 有两种方法来解决这个难题 ！
        courseC_maze_programming6_b: 在移动前记得先转弯, 因为鸟儿开始面对墙。
        courseC_maze_programming6_c: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseE_maze_ramp7_authored_hint:
        courseD_maze_ramp7_b: 别忘了用"步进"按钮来一个模块一个模块的寻找错误。
        courseD_maze_ramp7_a: 使用重复模块可以一次又一次地运行单个模块或一堆代码。
        courseD_maze_ramp7_c: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseE_maze_ramp7_2018_authored_hint:
        courseD_maze_ramp7_b: 别忘了用"步进"按钮来一个模块一个模块的寻找错误。
        courseD_maze_ramp7_a: 使用重复模块可以一次又一次地运行单个模块或一堆代码。
        courseD_maze_ramp7_c: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseE_maze_ramp_predict1_authored_hint: [ ]
      courseE_multi_maze_ramp5_authored_hint:
        courseC_maze_programming5_a: 尝试使用"步进"按钮来一行一行运行你的代码。你能想出下一步需要做什么吗？
      courseE_playLab_challenge1_authored_hint:
        courseE_playLab_challenge1_a: |-
          当玩家赢得比赛时, 你可以做一些事情：
          
          * 让恐龙消失。
          * 阻止松鼠
          * 让松鼠和骑士开心
          * 设置新的背景。
          * 让骑士感谢玩家的帮助。
          * 让所有的演员消失, 并显示一个 "你赢了！"的信息
        courseE_playLab_challenge1_b: |2
          当玩家输掉游戏时, 你可以做一些事情：
          
          * 让骑士消失。
          * 让松鼠伤心
          * 让恐龙说点什么
          * 设置新的背景。*
           让所有的演员消失, 并显示一个"游戏结束"的消息。
      courseE_playLab_challenge1_2018_authored_hint:
        courseE_playLab_challenge1_a: |-
          当玩家赢得比赛时, 你可以做一些事情：
          
          * 让恐龙消失。
          * 阻止松鼠
          * 让松鼠和骑士开心
          * 设置新的背景。
          * 让骑士感谢玩家的帮助。
          * 让所有的演员消失, 并显示一个 "你赢了！"的信息
        courseE_playLab_challenge1_b: |2
          当玩家输掉游戏时, 你可以做一些事情：
          
          * 让骑士消失。
          * 让松鼠伤心
          * 让恐龙说点什么
          * 设置新的背景。*
           让所有的演员消失, 并显示一个"游戏结束"的消息。
      courseE_playLab_embed_scaffold5_authored_hint: [ ]
      courseE_playLab_scaffold1_authored_hint:
        courseE_playLab_scaffold1_a: '`设置演员1为？？？图像`块可用于将演员添加到舞台。'
        courseE_playLab_scaffold1_b: 将`设置演员`模块置于`当运行时`下, 使您的演员出现在程序的开头。
        courseE_playLab_scaffold1_c: 使用`设置？？？背景`为您的场景选择背景。
      courseE_playLab_scaffold1_2018_authored_hint:
        courseE_playLab_scaffold1_a: '`设置演员1为？？？图像`块可用于将演员添加到舞台。'
        courseE_playLab_scaffold1_b: 将`设置演员`模块置于`当运行时`下, 使您的演员出现在程序的开头。
        courseE_playLab_scaffold1_c: 使用`设置？？？背景`为您的场景选择背景。
      courseE_playLab_scaffold2_authored_hint:
        courseE_playLab_scaffold1_a: 打开`当按____方向键时` 事件的下拉菜单来更改模块控制的方向。
        courseE_playLab_scaffold1_b: 您应该有四个`当按下方向键`事件模块，它们在每个之下朝着一个方向向前移动。
        courseE_playLab_scaffold1_c: 当你完成后，你应该能够用方向键来移动你的英雄!
      courseE_playLab_scaffold2_2018_authored_hint:
        courseE_playLab_scaffold1_a: 打开`当按____方向键时` 事件的下拉菜单来更改模块控制的方向。
        courseE_playLab_scaffold1_b: 您应该有四个`当按下方向键`事件模块，它们在每个之下朝着一个方向向前移动。
        courseE_playLab_scaffold1_c: 当你完成后，你应该能够用方向键来移动你的英雄!
      courseE_playLab_scaffold3_authored_hint: [ ]
      courseE_playLab_scaffold3_2018_authored_hint: [ ]
      courseE_playLab_scaffold4_authored_hint:
        courseE_playLab_scaffold4_a: 使用`得分`添加一分, 并用`扣分`减去一分。
      courseE_playLab_scaffold4_2018_authored_hint:
        courseE_playLab_scaffold4_a: 使用`得分`添加一分, 并用`扣分`减去一分。
      courseE_playLab_scaffold5_authored_hint:
        courseE_playLab_scaffold5_a: 要完成这个关卡, 你需要赢或输。使用`胜利结束游戏`或`失败结束游戏`模块完成。
      courseE_playLab_scaffold5_2018_authored_hint:
        courseE_playLab_scaffold5_a: 要完成这个关卡, 你需要赢或输。使用`胜利结束游戏`或`失败结束游戏`模块完成。
      courseE_playlab_challenge2_authored_hint:
        courseE_playlab_challenge2_a: |-
          这个演员根据自己的心情知道该说什么。用女巫可能会说的话来试试。
          
          <xml><block type="studio_saySpriteParamsTime" inline="true">
          <value name="SPRITE">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TEXT">
          <block type="text">
          <title name="TEXT">Concentrate and ask again!</title>
          </block>
          </value>
          <value name="TIME">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          </block></xml>
        courseE_playlab_challenge2_b: "如果您在条件列表下再次调用`问一个问题`函数, 你就会感觉游戏重新开始了。\n\n<xml><block type=\"studio_saySpriteParamsTime\" inline=\"true\">\n\n<block type=\"procedures_callnoreturn\">\n<mutation name=\"Ask a question\"></mutation>\n</block></block></xml>"
        courseE_playlab_challenge2_c: "您将需要添加更多的条件声明, 以便让演员有更多的话要说。\n\n<xml><block type=\"studio_ifActorHasEmotionParams\" inline=\"true\">\n<title name=\"EMOTION\">2</title>\n<value name=\"SPRITE\">\n<block type=\"math_number\">\n<title name=\"NUM\">1</title>\n</block>\n</value>\n<statement name=\"DO\">\n<block type=\"studio_saySpriteParamsTime\" inline=\"true\">\n<value name=\"SPRITE\">\n<block type=\"math_number\">\n<title name=\"NUM\">1</title>\n</block>\n</value>\n<value name=\"TEXT\">\n<block type=\"text\">\n<title name=\"TEXT\">???</title>\n</block>\n</value>\n<value name=\"TIME\">\n<block type=\"math_number\">\n<title name=\"NUM\">2</title>\n</block>\n</value>\n</block>\n</statement></block></xml>\n\n不用于忘了在永远重复循环中改变演员要显示的情绪。你也可以随意设定心情！"
        courseE_playlab_challenge2_d: |-
          一旦您了解了与演员1相关的所有代码, 就可以尝试重写相同的代码，但这次是针对演员2的。
          
          不要忘记更改`显示标题屏幕`模块中的说明, 让他们是正确的。
        courseE_playlab_challenge2_e: |-
          当一切都完成了, 你应该能够点击任一演员得到多达8个不同的消息。还有可能进一步扩展吗？
          
          完成后，让一个朋友尝试你的应用程序。
      courseE_playlab_variables_challenge2_authored_hint:
        courseF_playlab_variables_challenge3_a: |-
          演员知道该说什么, 因为它检查了`运气`变量的当前值。 
          
          
          <xml><block type="variables_set" inline="false">
          <title name="VAR">运气</title>
          <value name="VALUE">
          <block type="text" movable="false">
          <title name="TEXT">专心，再问一次！</title>
          </block>
          </value>
          </block></xml>
        courseF_playlab_variables_challenge3_b: |-
          如果你在演员说了财宝后，再次调用`ask a question`（问一个问题）函数，感觉就像整个游戏重头再来了。
          <xml><block type="studio_saySpriteParamsTime" inline="true">
          <value name="SPRITE">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TEXT">
          <block type="variables_get">
          <title name="VAR">财宝</title>
          </block>
          </value>
          <value name="TIME">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <next>
          <block type="procedures_callnoreturn">
          <mutation name="问一个问题"/>
          </block></next></block></xml>
        courseF_playlab_variables_challenge3_c: "您将需要添加更多的条件声明, 以便让演员有更多的话要说。 \n\n\n<xml><block type=\"studio_ifActorHasEmotionParams\" inline=\"true\">\n<title name=\"EMOTION\">2</title>\n<value name=\"SPRITE\">\n<block type=\"math_number\">\n<title name=\"NUM\">1</title>\n</block>\n</value>\n<statement name=\"DO\">\n<block type=\"variables_set\" inline=\"false\">\n<title name=\"VAR\">运气</title>\n<value name=\"VALUE\">\n<block type=\"text\" movable=\"false\">\n<title name=\"TEXT\">???</title>\n</block>\n</value>\n</block>\n</statement></block></xml>\n\n不要忘记更改演员将在`一直重复`循环中显示的情绪。你也可以随意设定心情!"
        courseF_playlab_variables_challenge3_d: |-
          一旦您了解了与演员1相关的所有代码, 就可以尝试重写相同的代码，但这次是针对演员2的。
          
          不要忘记更改`问一个问题`函数中的指令, 让他们是正确的。
        courseF_playlab_variables_challenge3_e: |-
          当一切都完成了, 你应该能够点击任一演员得到多达8个不同的消息。还有可能进一步扩展吗？
          
          完成后，让一个朋友尝试你的应用程序。
      courseF_IceAge_1_authored_hint:
        iceage_hello1_a: 你只需要添加一个方块来解决这个关卡。 将`演员1说`从工具栏中拖出, 并将其连接到工作区中已经存在的`当运行时`事件模块。接下来, 在里面输入 "你好！”。
      courseF_IceAge_10_authored_hint:
        iceage_throw_hearts_a: 你想什么时候把心扔给格瑞尼？ 当按下箭头时？当你点击 喜得？ 当你点击格瑞尼？ 选择权在你!
        iceage_throw_hearts_b: 当她收到一颗心时，要让格瑞尼高兴。你需要将`设置演员2情绪为快乐`块放到`当演员2触及弹丸时`的事件下。
      courseF_IceAge_11_authored_hint:
        iceage_free_play_a: '你能让希德和曼尼来个冰水晶战斗吗？  '
        iceage_free_play_b: 让格瑞尼去追迪亚哥 如果她抓住他, 就让比赛取胜结束。
        iceage_free_play_c: 你可以让喜得向迪亚哥扔雪花，而且让迪亚哥每次被击中后变大吗？如果迭戈被击中5次, 比赛就胜利结束。
      courseF_IceAge_2_authored_hint:
        iceage_hello2_a: '要解决这个关卡, 你需要使用 '' 演员1说 '' 块让 喜得 说一些话。 你还需要用'' 演员2说 '' 块也让曼尼说一些话 。 '
      courseF_IceAge_3_authored_hint:
        iceage_hello3_a: 使用 "向右移动演员1，距离200像素" 块来解决这个关卡。
      courseF_IceAge_4_authored_hint:
        iceage_move_to_actor_a: 对于这个关卡, 你可以把迪亚哥向下移动200像素, 或将曼尼向上移动200像素。
        iceage_move_to_actor_b: 将 "播放 ___ 声音" 块连接到 "当演员1触及演员 2" 事件来完成这一挑战。
      courseF_IceAge_5_authored_hint:
        iceage_repeat_a: 同时使用 "向左移动演员1" 和 "向右移动演员1" 方块来解决这个关卡。
      courseF_IceAge_6_authored_hint:
        iceage_click_hello_a: 添加一个或多个 ' 演员1说 ' 块到 ' 当点击时 ' 事件来完成这个关卡。
      courseF_IceAge_7_authored_hint:
        iceage_move_events_a: '每个 '' 当 ___ 方向 '' 事件将需要连接一个不同的 '' 移动演员 1 '' 命令，来解决这个关卡 。 '
      courseF_IceAge_8_authored_hint:
        iceage_sound_and_points_a: 您将需要添加两个模块在 ' 当演员1触及演员 2 ' 事件下面。
        iceage_sound_and_points_b: 你将需要用 ' 得一分 ' 块和 ' 播放____声音 ' 模块来通过这个关卡。
      courseF_IceAge_9_authored_hint:
        iceage_warn_ice_age_a: '您只需要在需要的地方添加两个模块来过关。 '
        iceage_warn_ice_age_b: 在 "当运行时" 事件下添加两个新模块, 使其在程序启动后立即运行。
      courseF_IceAge_template_authored_hint: [ ]
      courseF_artist_embed_for7_authored_hint: [ ]
      courseF_artist_for1_authored_hint:
        courseF_artist_for1_a: |-
          你能画出这样的东西吗？
          
          ![](https://images.code.org/80ae9ab3e449db1ed4e13c86239f7617-image-1475906794954.06.12.png)
      courseF_artist_for10_authored_hint:
        courseF_artist_for10_a: 这里的图片是通过一个`set alpha`（设置透明度）和`counter`/10的counter（计数器）来作为画笔尺寸来制作的。
        courseF_artist_for10_b: 绘图中的图片使用61度转弯。
        courseF_artist_for10_c: |-
          想知道示例图片是如何做出来的？
          
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_picker">
          <title name="COLOUR">#ff0000</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">15</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">175</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="alpha" inline="true" id="alpha">
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">61</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_artist_for10_2018_authored_hint:
        courseF_artist_for10_a: 这里的图片是通过一个`set alpha`（设置透明度）和`counter`/10的counter（计数器）来作为画笔尺寸来制作的。
        courseF_artist_for10_b: 绘图中的图片使用61度转弯。
        courseF_artist_for10_c: |-
          想知道示例图片是如何做出来的？
          
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_picker">
          <title name="COLOUR">#ff0000</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">15</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">175</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="alpha" inline="true" id="alpha">
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">61</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_artist_for10_predict1_authored_hint: [ ]
      courseF_artist_for10_predict1_2018_authored_hint: [ ]
      courseF_artist_for1_2018_authored_hint:
        courseF_artist_for1_a: |-
          你能画出这样的东西吗？
          
          ![](https://images.code.org/80ae9ab3e449db1ed4e13c86239f7617-image-1475906794954.06.12.png)
      courseF_artist_for2_authored_hint:
        courseF_artist_for2_a: |-
          在`重复`循环中为三角形的长度使用`counter`变量。
          
          <xml><block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </xml>
        courseF_artist_for2_b: 记得在你的计数循环以10记数。
        courseF_artist_for2_c: |-
          这是艺术家将遵循的模式:
          
          ![](https://images.code.org/a2569b7732cf02a12263607c9e355d19-image-1503676269436.3_hint 2.gif)
      courseF_artist_for2_2018_authored_hint:
        courseF_artist_for2_a: |-
          在`重复`循环中为三角形的长度使用`counter`变量。
          
          <xml><block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </xml>
        courseF_artist_for2_b: 记得在你的计数循环以10记数。
        courseF_artist_for2_c: |-
          这是艺术家将遵循的模式:
          
          ![](https://images.code.org/a2569b7732cf02a12263607c9e355d19-image-1503676269436.3_hint 2.gif)
      courseF_artist_for3_authored_hint:
        courseF_artist_for3_a: |-
          要让`计数循环`来引导移动，请确保在`向前移动`模块中使用`counter` 来作为距离。
          
          <xml>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </xml>
        courseF_artist_for3_b: 不要害怕犯错误！即使你还没有解决这个关卡，尝试添加模块并运行代码, 看看会发生什么。
      courseF_artist_for3_2018_authored_hint:
        courseF_artist_for3_a: |-
          要让`计数循环`来引导移动，请确保在`向前移动`模块中使用`counter` 来作为距离。
          
          <xml>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </xml>
        courseF_artist_for3_b: 不要害怕犯错误！即使你还没有解决这个关卡，尝试添加模块并运行代码, 看看会发生什么。
      courseF_artist_for4_authored_hint:
        courseF_artist_for4_a: "**你需要的数字最小是多少？ \n最大是多少？ \n那每次增加多少？**\n\n这些都是你在使用计数循环之前需要思考的问题。"
        courseF_artist_for4_b: 您的代码将非常类似于您在上一个关卡中所写的内容, 但请记住这次要画一个正方形!
        courseF_artist_for4_c: 不要害怕犯错误！即使你还没有解决这个关卡，尝试添加模块并运行代码, 看看会发生什么。
      courseF_artist_for4_2018_authored_hint:
        courseF_artist_for4_a: "**你需要的数字最小是多少？ \n最大是多少？ \n那每次增加多少？**\n\n这些都是你在使用计数循环之前需要思考的问题。"
        courseF_artist_for4_b: 您的代码将非常类似于您在上一个关卡中所写的内容, 但请记住这次要画一个正方形!
        courseF_artist_for4_c: 不要害怕犯错误！即使你还没有解决这个关卡，尝试添加模块并运行代码, 看看会发生什么。
      courseF_artist_for5_authored_hint:
        courseF_artist_for5_a: 在制作此螺旋的时候，不需要在里面使用`重复`循环。
        courseF_artist_for5_b: '"计数循环" 循环、移动和转向模块可以保持完全相同。'
      courseF_artist_for5_2018_authored_hint:
        courseF_artist_for5_a: 在制作此螺旋的时候，不需要在里面使用`重复`循环。
        courseF_artist_for5_b: '"计数循环" 循环、移动和转向模块可以保持完全相同。'
      courseF_artist_for6_authored_hint:
        courseF_artist_for6_a: 计数循环将从15数到 300，每次增加15。
        courseF_artist_for6_b: 在这个计数循环中放一个 "前进" 和 "转向" 模块。
        courseF_artist_for6_c: 你所要改变的就是 "转弯" 块中的度数。
      courseF_artist_for6_2018_authored_hint:
        courseF_artist_for6_a: 计数循环将从15数到 300，每次增加15。
        courseF_artist_for6_b: 在这个计数循环中放一个 "前进" 和 "转向" 模块。
        courseF_artist_for6_c: 你所要改变的就是 "转弯" 块中的度数。
      courseF_artist_for7_authored_hint:
        courseF_artist_for7_a: 这个关卡里的钢笔更细。在开始之前，需要将其设置为`1`。
        courseF_artist_for7_b: 请注意这个螺旋是向右转而非向左！
        courseF_artist_for7_c: 这个关卡中的计数循环是从15到300，每次增加2。
        courseF_artist_for7_d: 这张图片是只转89度形成的。
      courseF_artist_for7_2018_authored_hint:
        courseF_artist_for7_a: 这个关卡里的钢笔更细。在开始之前，需要将其设置为`1`。
        courseF_artist_for7_b: 请注意这个螺旋是向右转而非向左！
        courseF_artist_for7_c: 这个关卡中的计数循环是从15到300，每次增加2。
        courseF_artist_for7_d: 这张图片是只转89度形成的。
      courseF_artist_for8_authored_hint:
        courseF_artist_for8_a: 在代码中保留其他所有内容, 只有转角需要改变。
        courseF_artist_for8_b: 如果你想, 你可以为您的螺旋选择一个不同的颜色!
      courseF_artist_for8_2018_authored_hint:
        courseF_artist_for8_a: 在代码中保留其他所有内容, 只有转角需要改变。
        courseF_artist_for8_b: 如果你想, 你可以为您的螺旋选择一个不同的颜色!
      courseF_artist_for9_authored_hint:
        courseF_artist_for9_a: 如果将`set alpha`（设置透明度）模块放在计数循环中, 并使用 "计数器" 变量来更改它, 你就可以创建像这样的设计。
        courseF_artist_for9_b: '`set alpha`（设置透明度）模块更改颜色的透明度。数值越小，颜色越透明。'
      courseF_artist_for9_2018_authored_hint:
        courseF_artist_for9_a: 如果将`set alpha`（设置透明度）模块放在计数循环中, 并使用 "计数器" 变量来更改它, 你就可以创建像这样的设计。
        courseF_artist_for9_b: '`set alpha`（设置透明度）模块更改颜色的透明度。数值越小，颜色越透明。'
      courseF_artist_for_challenge1_authored_hint:
        courseF_artist_for_challenge1_a: '·笔宽度·是1。第一个正方形有50像素边, 每个正方形比前一个宽50像素。'
        courseF_artist_for_challenge1_b: 画笔上的不透明度始终是 `counter`/2 （计数器/2）。
        courseF_artist_for_challenge1_c: 在你画了每个正方形后, 别忘了向后跳, 转身, 再跳, 然后回头!
        courseF_artist_for_challenge1_d: |-
          ** 解决方案: **
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_picker">
          <title name="COLOUR">#0000cd</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">50</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">350</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">50</title>
          </block>
          </value>
          <statement name="DO">
          <block type="alpha" inline="true" id="alpha">
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpBackward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpBackward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_artist_for_challenge1_2018_authored_hint:
        courseF_artist_for_challenge1_a: '·笔宽度·是1。第一个正方形有50像素边, 每个正方形比前一个宽50像素。'
        courseF_artist_for_challenge1_b: 画笔上的不透明度始终是 `counter`/2 （计数器/2）。
        courseF_artist_for_challenge1_c: 在你画了每个正方形后, 别忘了向后跳, 转身, 再跳, 然后回头!
        courseF_artist_for_challenge1_d: |-
          ** 解决方案: **
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_picker">
          <title name="COLOUR">#0000cd</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">50</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">350</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">50</title>
          </block>
          </value>
          <statement name="DO">
          <block type="alpha" inline="true" id="alpha">
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpBackward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpBackward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_artist_for_challenge2_authored_hint:
        courseF_artist_for_challenge2_c: '`计数循环` 从5增加到250，每次增加2。 '
        courseF_artist_for_challenge2_a: 使用`用红色，绿色和蓝色设置颜色`的模块。红色设为常量255，绿色一直是`counter`（计数器）的值，蓝色一直是`255-counter`。
        courseF_artist_for_challenge2_b: 这个代码比你想象的要简单。 只需在计数循环中设置颜色, 向前移动, 然后转向。
        courseF_artist_for_challenge2_d: |-
          **解决方案:**
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">250</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_rgb" inline="false">
          <value name="RED">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          <value name="GREEN">
          <block type="variables_get">
          <title name="VAR">计数器</title>
          </block>
          </value>
          <value name="BLUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">减去</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">计数器</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">向前移动</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">计数器</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">向右转</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">80</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_artist_for_challenge2_2018_authored_hint:
        courseF_artist_for_challenge2_c: '`计数循环` 从5增加到250，每次增加2。 '
        courseF_artist_for_challenge2_a: 使用`用红色，绿色和蓝色设置颜色`的模块。红色设为常量255，绿色一直是`counter`（计数器）的值，蓝色一直是`255-counter`。
        courseF_artist_for_challenge2_b: 这个代码比你想象的要简单。 只需在计数循环中设置颜色, 向前移动, 然后转向。
        courseF_artist_for_challenge2_d: |-
          **解决方案:**
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">250</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_rgb" inline="false">
          <value name="RED">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          <value name="GREEN">
          <block type="variables_get">
          <title name="VAR">计数器</title>
          </block>
          </value>
          <value name="BLUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">减去</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">计数器</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">向前移动</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">计数器</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">向右转</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">80</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_artist_fwp1_authored_hint:
        courseF_artist_fwp1_c: 将所有画正方形的代码放在函数编辑器内。
        courseF_artist_fwp1_a: 请记住，你需要转90度才能画一个正方形。
        courseF_artist_fwp1_b: 你只需要重复和正方形的边数一样多的次数。
      courseF_artist_fwp1_2018_authored_hint:
        courseF_artist_fwp1_c: 将所有画正方形的代码放在函数编辑器内。
        courseF_artist_fwp1_a: 请记住，你需要转90度才能画一个正方形。
        courseF_artist_fwp1_b: 你只需要重复和正方形的边数一样多的次数。
      courseF_artist_fwp2_authored_hint:
        courseF_artist_fwp2_a: 你需要单击"编辑"按钮才能进入该函数。一旦进去了, 添加一个叫`长度`的参数, 并在`向前移动`模块内使用它!
        courseF_artist_fwp2_b: 调用函数时, 请使用`计数循环`来实现最佳代码！
      courseF_artist_fwp2_2018_authored_hint:
        courseF_artist_fwp2_a: 你需要单击"编辑"按钮才能进入该函数。一旦进去了, 添加一个叫`长度`的参数, 并在`向前移动`模块内使用它!
        courseF_artist_fwp2_b: 调用函数时, 请使用`计数循环`来实现最佳代码！
      courseF_artist_fwp2_predict1_authored_hint: [ ]
      courseF_artist_fwp2_predict1_2018_authored_hint: [ ]
      courseF_artist_fwp3_authored_hint:
        courseF_artist_fwp3_a: 如果你把它都放在一个`计数循环`循环内会变得更容易些。
        courseF_artist_fwp3_b: |-
          一定要在每个正方形之间转90 度！
          
          ![](https://images.code.org/97bd8eded03c5aa39740876c8e9f7ff8-image-1469224745277.gif)
      courseF_artist_fwp3_2018_authored_hint:
        courseF_artist_fwp3_a: 如果你把它都放在一个`计数循环`循环内会变得更容易些。
        courseF_artist_fwp3_b: |-
          一定要在每个正方形之间转90 度！
          
          ![](https://images.code.org/97bd8eded03c5aa39740876c8e9f7ff8-image-1469224745277.gif)
      courseF_artist_fwp4_authored_hint:
        courseF_artist_fwp4_b: 记住**添加** 一个参数。不要删除已经在那里的那个！
        courseF_artist_fwp4_c: 您将需要调用您的函数三次来绘制这形状。
      courseF_artist_fwp4_2018_authored_hint:
        courseF_artist_fwp4_b: 记住**添加** 一个参数。不要删除已经在那里的那个！
        courseF_artist_fwp4_c: 您将需要调用您的函数三次来绘制这形状。
      courseF_artist_fwp5_authored_hint:
        courseF_artist_fwp5_d: 一个计数循环将在这里真正帮助到你!
        courseF_artist_fwp5_c: 您将需要稍稍编辑这个函数, 因为你以前的函数是让艺术家在每条边后向右转，而这张图片需要向左转。
        courseF_artist_fwp5_a: 每个形状的边长是它边数的7倍。
        courseF_artist_fwp5_b: 不要忘记在图形之间跳跃100个像素。
      courseF_artist_fwp5_2018_authored_hint:
        courseF_artist_fwp5_d: 一个计数循环将在这里真正帮助到你!
        courseF_artist_fwp5_c: 您将需要稍稍编辑这个函数, 因为你以前的函数是让艺术家在每条边后向右转，而这张图片需要向左转。
        courseF_artist_fwp5_a: 每个形状的边长是它边数的7倍。
        courseF_artist_fwp5_b: 不要忘记在图形之间跳跃100个像素。
      courseF_artist_fwp6_authored_hint:
        courseF_artist_fwp6_a: 可以运行该程序几次以找出使用不同的参数函数如何工作。
        courseF_artist_fwp6_b: 不需要添加任何`向前移动`或`转向`模块来完成此代码。
      courseF_artist_fwp6_2018_authored_hint:
        courseF_artist_fwp6_a: 可以运行该程序几次以找出使用不同的参数函数如何工作。
        courseF_artist_fwp6_b: 不需要添加任何`向前移动`或`转向`模块来完成此代码。
      courseF_artist_fwp7_authored_hint:
        courseF_artist_fwp7_a: 尝试几个想法后感到没有头绪？尝试单击右上角的 "重新开始" 按钮。
        courseF_artist_fwp7_b: 新的`min`（最小值）变量应该在函数内的`计数循环`的第一个位置上。
      courseF_artist_fwp7_2018_authored_hint:
        courseF_artist_fwp7_a: 尝试几个想法后感到没有头绪？尝试单击右上角的 "重新开始" 按钮。
        courseF_artist_fwp7_b: 新的`min`（最小值）变量应该在函数内的`计数循环`的第一个位置上。
      courseF_artist_fwp8_authored_hint:
        courseF_artist_fwp8_a: 如果函数是正确的, 则不需要为这个关卡去更改它。
        courseF_artist_fwp8_b: 在函数调用之间, 唯一需要做的是更改线条的颜色。
      courseF_artist_fwp8_2018_authored_hint:
        courseF_artist_fwp8_a: 如果函数是正确的, 则不需要为这个关卡去更改它。
        courseF_artist_fwp8_b: 在函数调用之间, 唯一需要做的是更改线条的颜色。
      courseF_artist_fwp9_authored_hint:
        courseF_artist_fwp9_a: |-
          尝试这些绘图之一。
          
          ![](https://images.code.org/eae6d52956c2bc06b90db3693037df36-image-1493739069435.9.13 hints.png)
      courseF_artist_fwp9_2018_authored_hint:
        courseF_artist_fwp9_a: |-
          尝试这些绘图之一。
          
          ![](https://images.code.org/eae6d52956c2bc06b90db3693037df36-image-1493739069435.9.13 hints.png)
      courseF_artist_fwp_challenge1_authored_hint:
        courseF_artist_fwp_challenge1_b: 这是一系列的八角形, 边长是计数器个像素。
        courseF_artist_fwp_challenge1_c: 每个多边形是从内部的一个计数循环调用的, 从3到6，每次增加1。他会画出什么形状？
      courseF_artist_fwp_challenge1_2018_authored_hint:
        courseF_artist_fwp_challenge1_b: 这是一系列的八角形, 边长是计数器个像素。
        courseF_artist_fwp_challenge1_c: 每个多边形是从内部的一个计数循环调用的, 从3到6，每次增加1。他会画出什么形状？
      courseF_artist_fwp_challenge2_authored_hint:
        courseF_artist_fwp_challenge1_a: "![](https://images.code.org/9310e6352e85a8265b424c9d57ca28d1-image-1446239776339.gif)"
        courseF_artist_fwp_challenge1_b: '这是一系列的八角形, 两侧是`counter`（计数器）像素长。 '
        courseF_artist_fwp_challenge1_c: '每个八角形是从里面的一个`计数循环`, 从200到2，每次递减 2。 '
        courseF_artist_fwp_challenge1_d: '在每次迭代结束时, 不要忘记转22.5 度的角度。 '
        courseF_artist_fwp_challenge1_e: 每个八角形的颜色和钢笔的宽度都由 "计数器" 变量控制。
        courseF_artist_fwp_challenge1_f: |-
          ** 解决方案: **
          
          ![Solution Blocks](https://images.code.org/a82cfea836b95ce6625b08afcc3b7b37-image-1469727289590.png)
      courseF_artist_fwp_challenge2_2018_authored_hint:
        courseF_artist_fwp_challenge1_a: "![](https://images.code.org/9310e6352e85a8265b424c9d57ca28d1-image-1446239776339.gif)"
        courseF_artist_fwp_challenge1_b: '这是一系列的八角形, 两侧是`counter`（计数器）像素长。 '
        courseF_artist_fwp_challenge1_c: '每个八角形是从里面的一个`计数循环`, 从200到2，每次递减 2。 '
        courseF_artist_fwp_challenge1_d: '在每次迭代结束时, 不要忘记转22.5 度的角度。 '
        courseF_artist_fwp_challenge1_e: 每个八角形的颜色和钢笔的宽度都由 "计数器" 变量控制。
        courseF_artist_fwp_challenge1_f: |-
          ** 解决方案: **
          
          ![Solution Blocks](https://images.code.org/a82cfea836b95ce6625b08afcc3b7b37-image-1469727289590.png)
      courseF_artist_predict1_authored_hint: [ ]
      courseF_artist_predict1_2018_authored_hint: [ ]
      courseF_artist_ramp10_authored_hint:
        courseF_artist_ramp10_a: 别忘了在每个三角形后转向60度。 您需要将该指令放在哪个循环中？
        courseF_artist_ramp10_b: 如果您的三角形代码位于<xml><block type="controls_repeat"><title name="TIMES">6</title></block></xml> 循环中, 则此任务将会简单得多。
        courseF_artist_ramp10_c: |-
          这个设计中您将绘制六个三角形:
          
          ![](https://images.code.org/bc62bed22e90d35e420b0a116ac487ef-image-1500347536221.2_solution2.gif)
      courseF_artist_ramp10_2018_authored_hint:
        courseF_artist_ramp10_a: 别忘了在每个三角形后转向60度。 您需要将该指令放在哪个循环中？
        courseF_artist_ramp10_b: 如果您的三角形代码位于<xml><block type="controls_repeat"><title name="TIMES">6</title></block></xml> 循环中, 则此任务将会简单得多。
        courseF_artist_ramp10_c: |-
          这个设计中您将绘制六个三角形:
          
          ![](https://images.code.org/bc62bed22e90d35e420b0a116ac487ef-image-1500347536221.2_solution2.gif)
      courseF_artist_ramp8_authored_hint:
        courseF_artist_ramp8_a: 若要绘制侧面, 请使用<xml><block type="draw_move_by_constant"><title name="DIR">moveForward</title><title name="VALUE">100</title></block></xml>块, 并将100更改为200。
        courseF_artist_ramp8_b: |-
          若要绘制4条边, 请将<xml><block type="draw_move_by_constant"><title name="DIR">moveForward</title><title name="VALUE">200</title></block></xml>模块放入重复循环中, 并确保将该循环设置为绘制4次。
          
          别忘了转向!
        courseF_artist_ramp8_c: 您的转向也将放入<xml><block type="controls_repeat"><title name="TIMES">3</title></block></xml>循环的内部。
      courseF_artist_ramp8_2018_authored_hint:
        courseF_artist_ramp8_a: 若要绘制侧面, 请使用<xml><block type="draw_move_by_constant"><title name="DIR">moveForward</title><title name="VALUE">100</title></block></xml>块, 并将100更改为200。
        courseF_artist_ramp8_b: |-
          若要绘制4条边, 请将<xml><block type="draw_move_by_constant"><title name="DIR">moveForward</title><title name="VALUE">200</title></block></xml>模块放入重复循环中, 并确保将该循环设置为绘制4次。
          
          别忘了转向!
        courseF_artist_ramp8_c: 您的转向也将放入<xml><block type="controls_repeat"><title name="TIMES">3</title></block></xml>循环的内部。
      courseF_artist_ramp9_authored_hint:
        courseF_artist_ramp9_a: 这和正方形有什么相似之处？ 又有什么不同？
        courseF_artist_ramp9_b: 您可以使用转向模块中的下拉菜单来查看所需的角度!
        courseF_artist_ramp9_c: 您将需要每边向前移动100像素, 然后向右转120度。你能使用<xml><block type="controls_repeat"><title name="TIMES">3</title></block></xml>循环使代码更短吗？
      courseF_artist_ramp9_2018_authored_hint:
        courseF_artist_ramp9_a: 这和正方形有什么相似之处？ 又有什么不同？
        courseF_artist_ramp9_b: 您可以使用转向模块中的下拉菜单来查看所需的角度!
        courseF_artist_ramp9_c: 您将需要每边向前移动100像素, 然后向右转120度。你能使用<xml><block type="controls_repeat"><title name="TIMES">3</title></block></xml>循环使代码更短吗？
      courseF_artist_variables10_authored_hint:
        courseF_artist_variables10_a: 祝你在这个关卡玩得开心! 查看对代码可以做什么小更改。
        courseF_artist_variables10_b: 您可以多次尝试, 并多次运行您的代码。
      courseF_artist_variables10_2018_authored_hint:
        courseF_artist_variables10_a: 祝你在这个关卡玩得开心! 查看对代码可以做什么小更改。
        courseF_artist_variables10_b: 您可以多次尝试, 并多次运行您的代码。
      courseF_artist_variables2_authored_hint:
        courseF_artist_variables2_a: 记住在绘制每个三角形后向前移动。
        courseF_artist_variables2_b: 新的循环将包含三角形的循环, 然后是 "向前移动" 命令。
      courseF_artist_variables2_2018_authored_hint:
        courseF_artist_variables2_a: 记住在绘制每个三角形后向前移动。
        courseF_artist_variables2_b: 新的循环将包含三角形的循环, 然后是 "向前移动" 命令。
      courseF_artist_variables3_authored_hint:
        courseF_artist_variables3_a: '变量 "长度" 将在代码中的两个位置使用: 在三角形的边长中, 以及在三角形之间向前移动的量。'
        courseF_artist_variables3_b: '值为50的数字块只应位于一个位置: 在 "设置可变长度" 块之后。'
      courseF_artist_variables3_2018_authored_hint:
        courseF_artist_variables3_a: '变量 "长度" 将在代码中的两个位置使用: 在三角形的边长中, 以及在三角形之间向前移动的量。'
        courseF_artist_variables3_b: '值为50的数字块只应位于一个位置: 在 "设置可变长度" 块之后。'
      courseF_artist_variables4_authored_hint:
        courseF_artist_variables4_a: 你的代码不会和上一关有太大的不同，除了你需要让艺术家转弯往下跳，然后把他转回来准备再次往前跳。
        courseF_artist_variables4_c: |-
          这是你的艺术家将遵循的模式:
          
          ![](https://images.code.org/41ae98c1633755cf4553f90a80e125cf-image-1500325529204.6_hint.gif)
        courseF_artist_variables4_b: "![](https://images.code.org/fc31a4b60dc86d7b820c2d242f83e6ed-image-1477533361197.gif)"
      courseF_artist_variables4_2018_authored_hint:
        courseF_artist_variables4_a: 你的代码不会和上一关有太大的不同，除了你需要让艺术家转弯往下跳，然后把他转回来准备再次往前跳。
        courseF_artist_variables4_c: |-
          这是你的艺术家将遵循的模式:
          
          ![](https://images.code.org/41ae98c1633755cf4553f90a80e125cf-image-1500325529204.6_hint.gif)
        courseF_artist_variables4_b: "![](https://images.code.org/fc31a4b60dc86d7b820c2d242f83e6ed-image-1477533361197.gif)"
      courseF_artist_variables5_authored_hint:
        courseF_artist_variables5_a: 你的代码的后半部分应该看起来和上半部差不多, 除了你会向*左*转，跳跃, 然后向*右*转。
        courseF_artist_variables5_b: 代码的前半部分将绘制三个三角形, 而第二部分将绘制其他的三个三角形。
        courseF_artist_variables5_c: 首先复制程序的前半部分代码, 然后修改它以使设计能够正确显示。
        courseF_artist_variables5_d: |-
          这是你的艺术家将遵循的模式:
          
          ![](https://images.code.org/e4ac66f8e9a4503e49c4fad1e4fafc1d-image-1500326800109.7_hint.gif)
      courseF_artist_variables5_2018_authored_hint:
        courseF_artist_variables5_a: 你的代码的后半部分应该看起来和上半部差不多, 除了你会向*左*转，跳跃, 然后向*右*转。
        courseF_artist_variables5_b: 代码的前半部分将绘制三个三角形, 而第二部分将绘制其他的三个三角形。
        courseF_artist_variables5_c: 首先复制程序的前半部分代码, 然后修改它以使设计能够正确显示。
        courseF_artist_variables5_d: |-
          这是你的艺术家将遵循的模式:
          
          ![](https://images.code.org/e4ac66f8e9a4503e49c4fad1e4fafc1d-image-1500326800109.7_hint.gif)
      courseF_artist_variables6_authored_hint:
        courseF_artist_variables6_a: 由于使用了变量，只需在顶部更改一个数字即可让它工作。
        courseF_artist_variables6_b: 您需要编辑值为50的数字模块, 但代码中的其他任何东西都不需要修改。
      courseF_artist_variables6_2018_authored_hint:
        courseF_artist_variables6_a: 由于使用了变量，只需在顶部更改一个数字即可让它工作。
        courseF_artist_variables6_b: 您需要编辑值为50的数字模块, 但代码中的其他任何东西都不需要修改。
      courseF_artist_variables6a_authored_hint:
        courseF_artist_variables6a_a: 记住使用变量`length`（长度）而不是实际数字来解决这个关卡。
        courseF_artist_variables6a_b: 此代码将非常类似于您的三角形代码, 只是形状不同!
        courseF_artist_variables6a_c: 先写一个正方形的代码, 然后添加代码在正方形之间移动。最后, 添加一个循环包含所有内容!
        courseF_artist_variables6a_d: |-
          这就是你要遵循的模式! 
          
          ![](https://images.code.org/7fd21023b1498742d1a83ad4132d276e-image-1500328404912.9_hint.gif)
      courseF_artist_variables6a_2018_authored_hint:
        courseF_artist_variables6a_a: 记住使用变量`length`（长度）而不是实际数字来解决这个关卡。
        courseF_artist_variables6a_b: 此代码将非常类似于您的三角形代码, 只是形状不同!
        courseF_artist_variables6a_c: 先写一个正方形的代码, 然后添加代码在正方形之间移动。最后, 添加一个循环包含所有内容!
        courseF_artist_variables6a_d: |-
          这就是你要遵循的模式! 
          
          ![](https://images.code.org/7fd21023b1498742d1a83ad4132d276e-image-1500328404912.9_hint.gif)
      courseF_artist_variables7_authored_hint:
        courseF_artist_variables7_a: 使用 "设置长度" 块启动代码。将长度变量设置为150。
        courseF_artist_variables7_b: 您可以使用 "重复" 循环使您画三角形的代码更简单。
        courseF_artist_variables7_c: 你要左转120度来做三角形的角。
      courseF_artist_variables7_2018_authored_hint:
        courseF_artist_variables7_a: 使用 "设置长度" 块启动代码。将长度变量设置为150。
        courseF_artist_variables7_b: 您可以使用 "重复" 循环使您画三角形的代码更简单。
        courseF_artist_variables7_c: 你要左转120度来做三角形的角。
      courseF_artist_variables8_authored_hint:
        courseF_artist_variables8_b: 请记住，开始用`set length`（设置长度）模块来创在三角形，并以150像素开始。
        courseF_artist_variables8_c: 请确保使用 "重复" 循环来绘制三角形。
        courseF_artist_variables8_a: "尝试将一组\n\n<xml>\n<block type=\"variables_set\" inline=\"false\">\n<title name=\"VAR\">length</title>\n<value name=\"VALUE\">\n<block type=\"math_arithmetic\" inline=\"true\">\n<title name=\"OP\">ADD</title>\n<value name=\"A\">\n<block type=\"variables_get\">\n<title name=\"VAR\">length</title>\n</block>\n</value>\n<value name=\"B\">\n<block type=\"math_number\">\n<title name=\"NUM\">10</title>\n</block>\n</value>\n</block>\n</value>\n</block>\n</xml>\n\n模块放到循环的最后。\n"
      courseF_artist_variables8_2018_authored_hint:
        courseF_artist_variables8_b: 请记住，开始用`set length`（设置长度）模块来创在三角形，并以150像素开始。
        courseF_artist_variables8_c: 请确保使用 "重复" 循环来绘制三角形。
        courseF_artist_variables8_a: "尝试将一组\n\n<xml>\n<block type=\"variables_set\" inline=\"false\">\n<title name=\"VAR\">length</title>\n<value name=\"VALUE\">\n<block type=\"math_arithmetic\" inline=\"true\">\n<title name=\"OP\">ADD</title>\n<value name=\"A\">\n<block type=\"variables_get\">\n<title name=\"VAR\">length</title>\n</block>\n</value>\n<value name=\"B\">\n<block type=\"math_number\">\n<title name=\"NUM\">10</title>\n</block>\n</value>\n</block>\n</value>\n</block>\n</xml>\n\n模块放到循环的最后。\n"
      courseF_artist_variables9_authored_hint:
        courseF_artist_variables9_a: 对于这个关卡, 你所需要做的就是改变循环重复的次数。
        courseF_artist_variables9_b: 确保在您的循环中增加"长度", 以便线路变长。
      courseF_artist_variables9_2018_authored_hint:
        courseF_artist_variables9_a: 对于这个关卡, 你所需要做的就是改变循环重复的次数。
        courseF_artist_variables9_b: 确保在您的循环中增加"长度", 以便线路变长。
      courseF_artist_variablesFP_authored_hint:
        courseF_artist_variablesFP_a: |-
          尝试这三幅画之一。
          ![](https://images.code.org/f0bac32182162bd26a8031f5aa4364ef-image-1493738360437.3.15 hints.png)
      courseF_artist_variablesFP_2018_authored_hint:
        courseF_artist_variablesFP_a: |-
          尝试这三幅画之一。
          ![](https://images.code.org/f0bac32182162bd26a8031f5aa4364ef-image-1493738360437.3.15 hints.png)
      courseF_artist_variables_4_authored_hint:
        courseF_artist_variables_4_a: 你的代码不会和上一关有太大的不同，除了你需要让艺术家转弯往下走，然后把他转回来准备再次向前移动。
        courseF_artist_variables_4_b: "![](https://images.code.org/fc31a4b60dc86d7b820c2d242f83e6ed-image-1477533361197.gif)"
      courseF_artist_variables_6_authored_hint:
        courseF_artist_variables_6_a: 由于使用了变量，只需在顶部更改一个数字即可让它工作。
      courseF_artist_variables_6a_authored_hint:
        courseF_artist_variables6a_a: 记住使用变量`length`（长度）而不是实际数字来解决这个关卡。
      courseF_artist_variables_8_authored_hint:
        courseF_artist_variables_8_a: '试着把这组![](https://images.code.org/6525bebee31ee15b84a48761b2866f53-image-1477531948829.31.37.png) 模块放到循环的最后。  '
      courseF_artist_variables_challenge1_authored_hint:
        courseF_artist_variables_challenge1_a: 每条竖线的长度都是 "10"。每条水平线的长度应为 "长度"。
        courseF_artist_variables_challenge1_b: 您将希望把 "长度" 的值在循环中增加10 **两次**。
        courseF_artist_variables_challenge1_c: 要完成该模式, 您将需要向左两次, 右转两次, 并向前移动共四次。
        courseF_artist_variables_challenge1_d: |-
          这个谜题只用一个循环。没有变量的话，类似的路径可能只是一个锯齿形。
          
          ![](https://images.code.org/664fdd219502d004fb07886f834fa3d5-image-1496868743379.51.36 PM.png)
          
          如果您遇到麻烦, 请从创建此映像开始, 然后尝试查看可以使用变量更改水平线的长度。
        courseF_artist_variables_challenge1_e: |-
          这里是解决方案。
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">长度</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">18</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">向前移动</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">向右转</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">向前移动</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">长度</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">增加</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">向左转</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">向前移动</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">向左转</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">向前移动</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">长度</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">增加</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">向右转</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_artist_variables_challenge1_2018_authored_hint:
        courseF_artist_variables_challenge1_a: 每条竖线的长度都是 "10"。每条水平线的长度应为 "长度"。
        courseF_artist_variables_challenge1_b: 您将希望把 "长度" 的值在循环中增加10 **两次**。
        courseF_artist_variables_challenge1_c: 要完成该模式, 您将需要向左两次, 右转两次, 并向前移动共四次。
        courseF_artist_variables_challenge1_d: |-
          这个谜题只用一个循环。没有变量的话，类似的路径可能只是一个锯齿形。
          
          ![](https://images.code.org/664fdd219502d004fb07886f834fa3d5-image-1496868743379.51.36 PM.png)
          
          如果您遇到麻烦, 请从创建此映像开始, 然后尝试查看可以使用变量更改水平线的长度。
        courseF_artist_variables_challenge1_e: |-
          这里是解决方案。
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">长度</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">18</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">向前移动</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">向右转</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">向前移动</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">长度</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">增加</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">向左转</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">向前移动</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">向左转</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">向前移动</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">长度</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">增加</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">向右转</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_artist_variables_challenge1a_authored_hint:
        courseF_artist_variables_challenge1_a: '变量是有帮助的, 因为您可以通过循环每次增加它们。 '
        courseF_artist_variables_challenge1_b: 这个谜题有一个循环来创建多边形, 一个循环来重复多边形`sides`（边）的次数，然后另一个循环在把5加到到`sides`（边）后重新计算。
        courseF_artist_variables_challenge1_c: 使用`sides`和`length`的变量使代码更干净, 因为您可以多次循环相同的代码, 而不是为每组数字创建一个新的副本。
        courseF_artist_variables_challenge1_d: |-
          ** 解决方案: **
          
          
          ![[Solution]](https://images.code.org/311b4a946cb8f3b4144b5075be6460a3-image-1469641878222.png)
      courseF_artist_variables_challenge2_authored_hint:
        courseF_artist_variables_challenge2_a: 变量是有帮助的, 因为您可以通过循环每次增加它们。 
        courseF_artist_variables_challenge2_c: 使用`sides`和`length`的变量使代码更干净, 因为您可以多次循环相同的代码, 而不是为每组数字创建一个新的副本。
        courseF_artist_variables_challenge2_d: |-
          ** 解决方案: **
          
          
          ![[Solution]](https://images.code.org/311b4a946cb8f3b4144b5075be6460a3-image-1469641878222.png)
      courseF_artist_variables_challenge2_2018_authored_hint:
        courseF_artist_variables_challenge2_a: 变量是有帮助的, 因为您可以通过循环每次增加它们。 
        courseF_artist_variables_challenge2_c: 使用`sides`和`length`的变量使代码更干净, 因为您可以多次循环相同的代码, 而不是为每组数字创建一个新的副本。
        courseF_artist_variables_challenge2_d: |-
          ** 解决方案: **
          
          
          ![[Solution]](https://images.code.org/311b4a946cb8f3b4144b5075be6460a3-image-1469641878222.png)
      courseF_bee_conditionals10_authored_hint:
        courseF_bee_conditionals10_a: 想象每一个地方都有云。这是否有助于简化您的代码？
        courseF_bee_conditionals10_b: 使用 "如果/否则" 模块查找每个空间的花蜜或蜂蜜。
        courseF_bee_conditionals10_c: '`当`循环是否可以帮助到达此路径的末尾？'
      courseF_bee_conditionals10_2018_authored_hint:
        courseF_bee_conditionals10_a: 想象每一个地方都有云。这是否有助于简化您的代码？
        courseF_bee_conditionals10_b: 使用 "如果/否则" 模块查找每个空间的花蜜或蜂蜜。
        courseF_bee_conditionals10_c: '`当`循环是否可以帮助到达此路径的末尾？'
      courseF_bee_conditionals1_predict1_authored_hint: [ ]
      courseF_bee_conditionals1_predict1_2018_authored_hint: [ ]
      courseF_bee_conditionals2_authored_hint:
        courseF_bee_conditionals2_a: 有时那里有花，有时不会。如果您希望在两种情况下都能运行代码，请确保使用`如果`语句。
        courseF_bee_conditionals2_b: 尝试编写序列以获取所有空格, 然后添加 "如果" 声明。
      courseF_bee_conditionals2_2018_authored_hint:
        courseF_bee_conditionals2_a: 有时那里有花，有时不会。如果您希望在两种情况下都能运行代码，请确保使用`如果`语句。
        courseF_bee_conditionals2_b: 尝试编写序列以获取所有空格, 然后添加 "如果" 声明。
      courseF_bee_conditionals3_authored_hint:
        courseF_bee_conditionals3_a: 一定要使用`如果`语句来检查每个空间，看看是否有花。
        courseF_bee_conditionals3_b: 一个 ' 重复 ' 循环将是有用的, 所以你只需要使用一个 ' 如果 ' 块。
        courseF_bee_conditionals3_c: 尝试编写代码来检查第一个云。你能用循环来查看所有的云吗？
      courseF_bee_conditionals3_2018_authored_hint:
        courseF_bee_conditionals3_a: 一定要使用`如果`语句来检查每个空间，看看是否有花。
        courseF_bee_conditionals3_b: 一个 ' 重复 ' 循环将是有用的, 所以你只需要使用一个 ' 如果 ' 块。
        courseF_bee_conditionals3_c: 尝试编写代码来检查第一个云。你能用循环来查看所有的云吗？
      courseF_bee_conditionals4_authored_hint:
        courseD_bee_conditionals4_a: 哪怕可以看到整条路径，仍然可以当作每个空间上面有朵云来处理。
        courseF_bee_conditionals4_b: '在循环中使用`如果`语句检查每个空间是否有花蜜。 '
        courseF_bee_conditionals4_c: 使用`当前面有路时`模块，你应该 ' 前进 ', 并查找一朵花。' 如果有一朵花 ' 蜜蜂应该做什么？
      courseF_bee_conditionals4_2018_authored_hint:
        courseD_bee_conditionals4_a: 哪怕可以看到整条路径，仍然可以当作每个空间上面有朵云来处理。
        courseF_bee_conditionals4_b: '在循环中使用`如果`语句检查每个空间是否有花蜜。 '
        courseF_bee_conditionals4_c: 使用`当前面有路时`模块，你应该 ' 前进 ', 并查找一朵花。' 如果有一朵花 ' 蜜蜂应该做什么？
      courseF_bee_conditionals5_authored_hint:
        courseF_bee_conditionals5_a: 把矩形路径的每一边都看成是一个路径。在外部设置一个 "重复" 块的嵌套循环, 并在`当前面有路时`的内部循环。如果蜜蜂需要在每朵花旁边嗡嗡叫，它要飞过多少条路径？
        courseF_bee_conditionals5_b: 在`当前面有路时`模块的里面, 你需要往前走，并寻找朵花。你如何检查哪里是否有一朵花？如果有一朵花, 你会怎么做？
        courseF_bee_conditionals5_c: '长方形的3条边上有花，因此代码需要 '' 重复3次 ''。在每一个重复, 蜜蜂将需要继续沿着路径, `当前面有路时`。 '
        courseF_bee_conditionals5_d: 要继续沿着这条路走下去, 蜜蜂将需要 "前进"。在小路上, 蜜蜂需要查找一朵花。如果有一朵花, 蜜蜂该怎么办？
      courseF_bee_conditionals5_2018_authored_hint:
        courseF_bee_conditionals5_a: 把矩形路径的每一边都看成是一个路径。在外部设置一个 "重复" 块的嵌套循环, 并在`当前面有路时`的内部循环。如果蜜蜂需要在每朵花旁边嗡嗡叫，它要飞过多少条路径？
        courseF_bee_conditionals5_b: 在`当前面有路时`模块的里面, 你需要往前走，并寻找朵花。你如何检查哪里是否有一朵花？如果有一朵花, 你会怎么做？
        courseF_bee_conditionals5_c: '长方形的3条边上有花，因此代码需要 '' 重复3次 ''。在每一个重复, 蜜蜂将需要继续沿着路径, `当前面有路时`。 '
        courseF_bee_conditionals5_d: 要继续沿着这条路走下去, 蜜蜂将需要 "前进"。在小路上, 蜜蜂需要查找一朵花。如果有一朵花, 蜜蜂该怎么办？
      courseF_bee_conditionals7_predict2_authored_hint: [ ]
      courseF_bee_conditionals7_predict2_2018_authored_hint: [ ]
      courseF_bee_conditionals8_authored_hint:
        courseF_bee_conditionals8_a: "**记住：**这一关在每次运行的时候都会变化。\n\n你需要用一个条件模块（“如果”或“如果/否则”）来完成这个挑战。"
        courseF_bee_conditionals8_b: |-
          此关卡很棘手, 因为不能只使用一个条件来检查空白方块, 花蜜, *和* 蜂蜜。
          
          仅在路径的最后查找花蜜和蜂蜜。
        courseF_bee_conditionals8_c: 如果您使用`当前面有路`模块并获得第一朵花时, 会发生什么情况？
      courseF_bee_conditionals8_2018_authored_hint:
        courseF_bee_conditionals8_a: "**记住：**这一关在每次运行的时候都会变化。\n\n你需要用一个条件模块（“如果”或“如果/否则”）来完成这个挑战。"
        courseF_bee_conditionals8_b: |-
          此关卡很棘手, 因为不能只使用一个条件来检查空白方块, 花蜜, *和* 蜂蜜。
          
          仅在路径的最后查找花蜜和蜂蜜。
        courseF_bee_conditionals8_c: 如果您使用`当前面有路`模块并获得第一朵花时, 会发生什么情况？
      courseF_bee_for1_authored_hint:
        courseF_bee_for1_a: 将紫色数字块拖到`重复`循环的空白处, 告诉它要重复多少次。
        courseF_bee_for1_b: 你将需要两个模块在你的 ' 重复 ' 循环里来收集所有的花蜜。
      courseF_bee_for10_authored_hint:
        courseF_bee_for10_a: 你能在需要走的步数和采花蜜的数量之间找到一个规律吗？
        courseF_bee_for10_b: 第一组花总共有 ** 14 朵花 **。为了到达第一组, 蜜蜂必须嗡嗡作响往下移** 7 个正方形 ** （或14除以2个正方形。）下一组有多少朵花, 蜜蜂到那里需要走多少个正方形？
        courseF_bee_for10_c: "在关卡中, 第一组中有 ** 14 ** 朵花，第二组有 ** 10 ** 朵花, 第三组有 ** 6 ** 朵花, 第四组有 ** 2 ** 朵花。\n\n在这张图中, 请注意有 ** 7 ** 个红色正方形, ** 5 ** 个橙色正方形, ** 3 ** 个绿色正方形和 ** 1 ** 个蓝色块。\n\n![](https://images.code.org/602ce14659299af6a59a79ebd0bdb9d4-image-1493221855089.6.11 Hint Drawing.png)\n\n数字有什么关联吗？"
        courseF_bee_for10_d: 你需要有2个重复循环，其中一个将使用数学模块。
      courseF_bee_for10_2018_authored_hint:
        courseF_bee_for10_a: 你能在需要走的步数和采花蜜的数量之间找到一个规律吗？
        courseF_bee_for10_b: 第一组花总共有 ** 14 朵花 **。为了到达第一组, 蜜蜂必须嗡嗡作响往下移** 7 个正方形 ** （或14除以2个正方形。）下一组有多少朵花, 蜜蜂到那里需要走多少个正方形？
        courseF_bee_for10_c: "在关卡中, 第一组中有 ** 14 ** 朵花，第二组有 ** 10 ** 朵花, 第三组有 ** 6 ** 朵花, 第四组有 ** 2 ** 朵花。\n\n在这张图中, 请注意有 ** 7 ** 个红色正方形, ** 5 ** 个橙色正方形, ** 3 ** 个绿色正方形和 ** 1 ** 个蓝色块。\n\n![](https://images.code.org/602ce14659299af6a59a79ebd0bdb9d4-image-1493221855089.6.11 Hint Drawing.png)\n\n数字有什么关联吗？"
        courseF_bee_for10_d: You'll need to have 2 repeats, one will use a math block.
      courseF_bee_for11_authored_hint:
        courseF_bee_for11_a: "12比15少多少？ \n9比12少多少？\n\n你看到规律了吗？"
      courseF_bee_for11_2018_authored_hint:
        courseF_bee_for11_a: "12比15少多少？ \n9比12少多少？\n\n你看到规律了吗？"
      courseF_bee_for1_2018_authored_hint:
        courseF_bee_for1_a: 将紫色数字块拖到`重复`循环的空白处, 告诉它要重复多少次。
        courseF_bee_for1_b: 你将需要两个模块在你的 ' 重复 ' 循环里来收集所有的花蜜。
      courseF_bee_for2_authored_hint:
        courseF_bee_for2_a: 当你困惑时，一次只采一朵花，并经常测试。
        courseF_bee_for2_b: 记住在每个循环之间向前移动, 这样你就能到达每一朵花。
      courseF_bee_for2_2018_authored_hint:
        courseF_bee_for2_a: 当你困惑时，一次只采一朵花，并经常测试。
        courseF_bee_for2_b: 记住在每个循环之间向前移动, 这样你就能到达每一朵花。
      courseF_bee_for3_authored_hint:
        courseF_bee_for3_a: '在收集花蜜的地方，在`重复`循环内使用`counter`（计数器）变量来通过这个关卡。 '
        courseF_bee_for3_b: '`计数循环`将需要从1到 5, 增量为1。'
      courseF_bee_for3_predict1_authored_hint: [ ]
      courseF_bee_for3_predict1_2018_authored_hint: [ ]
      courseF_bee_for4_authored_hint:
        courseF_bee_for4_a: 使用`计数循环`从1到 7，增量为 1，来通过这个关卡。
        courseF_bee_for4_b: 在`计数循环`中, 你需要一个`向前移动`模块，和一个循环来收集花蜜。
        courseF_bee_for4_c: 确保在嵌套的`重复`循环中使用`counter`（计数器）变量来获得足够的花蜜!
      courseF_bee_for4_2018_authored_hint:
        courseF_bee_for4_a: 使用`计数循环`从1到 7，增量为 1，来通过这个关卡。
        courseF_bee_for4_b: 在`计数循环`中, 你需要一个`向前移动`模块，和一个循环来收集花蜜。
        courseF_bee_for4_c: Make sure to use the `counter` variable inside your nested `repeat` loop to get enough nectar!
      courseF_bee_for5_authored_hint:
        courseF_bee_for5_a: 这一次，`向前移动`模块和`采花蜜`模块需要在分开的`重复`循环里，二者都在同一个`计数循环`中。
        courseF_bee_for5_b: 在每个循环中使用 "计数器" 变量, 以便蜜蜂在每朵花之间移动不同的距离。
        courseF_bee_for5_c: 不要害怕犯错误！即使你还没有解决这个关卡，尝试添加模块并运行代码, 看看会发生什么。
      courseF_bee_for5_2018_authored_hint:
        courseF_bee_for5_a: 这一次，`向前移动`模块和`采花蜜`模块需要在分开的`重复`循环里，二者都在同一个`计数循环`中。
        courseF_bee_for5_b: 在每个循环中使用 "计数器" 变量, 以便蜜蜂在每朵花之间移动不同的距离。
        courseF_bee_for5_c: 不要害怕犯错误！即使你还没有解决这个关卡，尝试添加模块并运行代码, 看看会发生什么。
      courseF_bee_for6_authored_hint:
        courseF_bee_for6_a: 不要忘记在`重复`循环中使用`counter`（计数器）变量。
        courseF_bee_for6_b: 在`计数循环`循环中，你需要一个`向前移动` 指令，和一个循环来收集花蜜。
        courseF_bee_for6_c: 你的循环应该数 ** 从5到1 **。
      courseF_bee_for6_2018_authored_hint:
        courseF_bee_for6_a: 不要忘记在`重复`循环中使用`counter`（计数器）变量。
        courseF_bee_for6_b: 在`计数循环`中, 你需要一个`向前移动`模块，和一个循环来收集花蜜。
        courseF_bee_for6_c: 你的循环应该数 ** 从5到1 **。
      courseF_bee_for7_authored_hint:
        courseF_bee_for7_a: '`计数循环`循环需要从1到7，增量为2。'
        courseF_bee_for7_b: 在`计数循环`中, 你需要一个`向前移动`模块，和一个循环来收集花蜜。
        courseF_bee_for7_c: 请记住在 "重复" 循环中使用 "计数器" 变量。
      courseF_bee_for7_2018_authored_hint:
        courseF_bee_for7_a: '`计数循环`循环需要从1到7，增量为2。'
        courseF_bee_for7_b: 在`计数循环`中, 你需要一个`向前移动`模块，和一个循环来收集花蜜。
        courseF_bee_for7_c: 请记住在 "重复" 循环中使用 "计数器" 变量。
      courseF_bee_for8_authored_hint:
        courseF_bee_for8_a: "如果循环往上计数，那么每次运行运行时都会将增量加到计数器变量中。 \n\n你需要将什么加到每个数字，来得到下一个花蜜的数量？"
        courseF_bee_for8_b: 在这个关卡中, 你需要在台阶上移动以获得花朵。
        courseF_bee_for8_c: 您的循环将通过一些增量来计数 * 从3到 15 * 。这是什么呢？
      courseF_bee_for8_2018_authored_hint:
        courseF_bee_for8_a: "如果循环往上计数，那么每次运行运行时都会将增量加到计数器变量中。 \n\n你需要将什么加到每个数字，来得到下一个花蜜的数量？"
        courseF_bee_for8_b: 在这个关卡中, 你需要在台阶上移动以获得花朵。
        courseF_bee_for8_c: 您的循环将通过一些增量来计数 * 从3到 15 * 。这是什么呢？
      courseF_bee_for9_authored_hint:
        courseF_bee_for9_a: |-
          试着用计数器变量来做些数学。
          
          要得到和你需要收集的花蜜一样的数量，你需要对每朵花的计数器做什么？
        courseF_bee_for9_c: 如果想要通过此关卡，看起来需要在每次循环迭代的开始让蜜蜂转弯。
        courseF_bee_for9_b: "**请记住：** 如果你的循环在往上计数，每次循环，增量会加到`counter`（计数器）上。"
      courseF_bee_for9_2018_authored_hint:
        courseF_bee_for9_a: |-
          试着用计数器变量来做些数学。
          
          要得到和你需要收集的花蜜一样的数量，你需要对每朵花的计数器做什么？
        courseF_bee_for9_c: 如果想要通过此关卡，看起来需要在每次循环迭代的开始让蜜蜂转弯。
        courseF_bee_for9_b: "**请记住：** 如果你的循环在往上计数，每次循环，增量会加到`counter`（计数器）上。"
      courseF_bee_for_challenge1_authored_hint: [ ]
      courseF_bee_for_challenge1_2018_authored_hint: [ ]
      courseF_bee_for_challenge2_authored_hint:
        courseF_bee_for_challenge2_a: "看看这个移动选项:\n\n![] (https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png)"
        courseF_bee_for_challenge2_b: '试着用两个 "计数" 循环: 一个用于攀爬和抓取花蜜, 另一种用于攀爬和制作蜂蜜。'
        courseF_bee_for_challenge2_c: "注意，一个`计数循环`里需要几个普通的循环来重复`counter`（计数器）次数来增加楼梯图案。\n\n另一个`计数循环`循环只需要一个普通的循环来酿造`counter`（计数器）个蜂蜜。"
        courseF_bee_for_challenge2_d: |-
          **解决方案：**
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">向左转</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">向右转</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">向右转</title>
          <next>
          <block type="maze_turn">
          <title name="DIR">向右转</title>
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward">
          <next>
          <block type="maze_turn">
          <title name="DIR">向左转</title>
          <next>
          <block type="maze_moveForward">
          <next>
          <block type="maze_turn">
          <title name="DIR">向右转</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_honey"/>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_bee_for_challenge2_2018_authored_hint:
        courseF_bee_for_challenge2_a: "看看这个移动选项:\n\n![] (https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png)"
        courseF_bee_for_challenge2_b: '试着用两个 "计数" 循环: 一个用于攀爬和抓取花蜜, 另一种用于攀爬和制作蜂蜜。'
        courseF_bee_for_challenge2_c: "注意，一个`计数循环`里需要几个普通的循环来重复`counter`（计数器）次数来增加楼梯图案。\n\n另一个`计数循环`循环只需要一个普通的循环来酿造`counter`（计数器）个蜂蜜。"
        courseF_bee_for_challenge2_d: |-
          **解决方案：**
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">向左转</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">向右转</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">向右转</title>
          <next>
          <block type="maze_turn">
          <title name="DIR">向右转</title>
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward">
          <next>
          <block type="maze_turn">
          <title name="DIR">向左转</title>
          <next>
          <block type="maze_moveForward">
          <next>
          <block type="maze_turn">
          <title name="DIR">向右转</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_honey"/>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_bee_for_challenge3_authored_hint:
        courseF_bee_for_challenge2_a: "看看这个移动选项:\n\n![] (https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png)"
        courseF_bee_for_challenge2_b: '试着用两个 "计数" 循环: 一个用于攀爬和抓取花蜜, 另一种用于攀爬和制作蜂蜜。'
        courseF_bee_for_challenge2_c: "注意，一个`计数循环`里需要几个普通的循环来重复`counter`（计数器）次数来增加楼梯图案。\n\n另一个`计数循环`循环只需要一个普通的循环来酿造`counter`（计数器）个蜂蜜。"
        courseF_bee_for_challenge2_d: |-
          **解决方案：**
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">向左转</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">向右转</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">向右转</title>
          <next>
          <block type="maze_turn">
          <title name="DIR">向右转</title>
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward">
          <next>
          <block type="maze_turn">
          <title name="DIR">向左转</title>
          <next>
          <block type="maze_moveForward">
          <next>
          <block type="maze_turn">
          <title name="DIR">向右转</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_honey"/>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_bee_functions2_authored_hint:
        courseF_bee_functions2_a: 函数已经写好了，但你需要在每朵花那里调用它。
        courseF_bee_functions2_b: 点击蓝色编辑按钮上的 "只得到花蜜" 功能, 看看它做什么。
      courseF_bee_functions2_2018_authored_hint:
        courseF_bee_functions2_a: 函数已经写好了，但你需要在每朵花那里调用它。
        courseF_bee_functions2_b: 点击蓝色编辑按钮上的 "只得到花蜜" 功能, 看看它做什么。
      courseF_bee_functions3_authored_hint:
        courseF_bee_functions3_a: '在这个关卡的函数只需要做蜂蜜, 在它里面不应该有任何 "前进" 或 "转向" 模块。 '
        courseF_bee_functions3_b: 请记住, 你的函数只在*如果*有一个蜂窝时，才酿蜂蜜 。
        courseF_bee_functions3_c: 使用绿色`只酿蜂蜜`模块调用您的函数。
        courseF_bee_functions3_d: 查看这条路
      courseF_bee_functions3_2018_authored_hint:
        courseF_bee_functions3_a: '在这个关卡的函数只需要做蜂蜜, 在它里面不应该有任何 "前进" 或 "转向" 模块。 '
        courseF_bee_functions3_b: 请记住, 你的函数只在*如果*有一个蜂窝时，才酿蜂蜜 。
        courseF_bee_functions3_c: 使用绿色`只酿蜂蜜`模块调用您的函数。
        courseF_bee_functions3_d: 查看这条路
      courseF_bee_functions3a_authored_hint:
        courseF_bee_functions3a_a: '这个关卡的函数只需要得到花蜜或蜂蜜, 在它里面不应该有任何 '' 前进 '' 或 '' 转向 ''模块。 '
        courseF_bee_functions3a_b: 使用爬楼梯的模式检查前四朵云。
      courseF_bee_functions3a_2018_authored_hint:
        courseF_bee_functions3a_a: '这个关卡的函数只需要得到花蜜或蜂蜜, 在它里面不应该有任何 '' 前进 '' 或 '' 转向 ''模块。 '
        courseF_bee_functions3a_b: 使用爬楼梯的模式检查前四朵云。
      courseF_bee_functions4_authored_hint:
        courseF_bee_functions4_a: 你的函数应该沿着小路走, 然后让蜜蜂返回到主干道。 您不需要将该部分添加到主程序中。
        courseF_bee_functions4_b: 尝试生成该程序并使用函数块, 就像预期函数的行为一样, 然后创建函数。
      courseF_bee_functions4_2018_authored_hint:
        courseF_bee_functions4_a: 你的函数应该沿着小路走, 然后让蜜蜂返回到主干道。 您不需要将该部分添加到主程序中。
        courseF_bee_functions4_b: 尝试生成该程序并使用函数块, 就像预期函数的行为一样, 然后创建函数。
      courseF_bee_functions5_authored_hint:
        courseE_bee_functions5_a: 编辑函数，这样可以在不更改主程序的情况下通过此关卡。
        courseE_bee_functions5_b: "你的函数应该让蜜蜂：\n- 转弯\n- 向前移动\n- 收集所有的花蜜\n- 转回来\n- 移回到主路\n- 转回蜜蜂开始出发的方向"
      courseF_bee_functions5a_authored_hint:
        courseF_bee_functions5a_a: "您的函数应该检查是否有一条通向右边的路径, 如果有, 沿着小路侧面走, 并把蜜蜂返回到主干道。  \n\n您不需要将该部分添加到主程序中。"
        courseF_bee_functions5a_b: 因为路的长度不同，使用 "当" 循环来遍历所有主路径,。
        courseF_bee_functions5a_c: 在 "当循环" 中, 确保向前移动, 然后使用函数检查路径。
      courseF_bee_functions5a_2018_authored_hint:
        courseF_bee_functions5a_a: "您的函数应该检查是否有一条通向右边的路径, 如果有, 沿着小路侧面走, 并把蜜蜂返回到主干道。  \n\n您不需要将该部分添加到主程序中。"
        courseF_bee_functions5a_b: 因为路的长度不同，使用 "当" 循环来遍历所有主路径,。
        courseF_bee_functions5a_c: 在 "当循环" 中, 确保向前移动, 然后使用函数检查路径。
      courseF_bee_functions6_authored_hint:
        courseF_bee_functions6_a: "如果这个关卡看上去很有挑战性，尝试一点一点创建你的函数。 \n\n添加一些模块试试看。继续添加，然后再尝试。很快，你就能成功了！\n\n ![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)"
        courseF_bee_functions6_b: 你的函数应该检查是否有花或蜂窝, 得到花蜜或蜂蜜, 然后转向。
        courseF_bee_functions6_c: 因为你在你的函数里转弯, 你只需要一个 ' 当' 循环来通过这个迷宫。
      courseF_bee_functions6_2018_authored_hint:
        courseF_bee_functions6_a: "如果这个关卡看上去很有挑战性，尝试一点一点创建你的函数。 \n\n添加一些模块试试看。继续添加，然后再尝试。很快，你就能成功了！\n\n ![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)"
        courseF_bee_functions6_b: 你的函数应该检查是否有花或蜂窝, 得到花蜜或蜂蜜, 然后转向。
        courseF_bee_functions6_c: 因为你在你的函数里转弯, 你只需要一个 ' 当' 循环来通过这个迷宫。
      courseF_bee_functions7_authored_hint:
        courseF_bee_functions7_a: 你可以回头看看最后这个关卡, 看看你使用的功能。
        courseF_bee_functions7_b: 试着用你的手指在迷宫中画一条小路。蜜蜂将在哪里做出决定？
      courseF_bee_functions7_2018_authored_hint:
        courseF_bee_functions7_a: 你可以回头看看最后这个关卡, 看看你使用的功能。
        courseF_bee_functions7_b: 试着用你的手指在迷宫中画一条小路。蜜蜂将在哪里做出决定？
      courseF_bee_functions8a_authored_hint:
        courseF_bee_functions8a_a: "如果这个关卡看上去很有挑战性，尝试一点一点创建你的函数。 \n\n添加一些模块试试看。继续添加，然后再尝试。很快，你就能成功了！"
        courseF_bee_functions8a_b: "请记住在函数编辑器内生成代码。\n\n"
      courseF_bee_functions8a_2018_authored_hint:
        courseF_bee_functions8a_a: "如果这个关卡看上去很有挑战性，尝试一点一点创建你的函数。 \n\n添加一些模块试试看。继续添加，然后再尝试。很快，你就能成功了！"
        courseF_bee_functions8a_b: "请记住在函数编辑器内生成代码。\n\n"
      courseF_bee_functionsPre7_authored_hint:
        courseF_bee_functions7_a: "如果这个关卡看上去很有挑战性，尝试一点一点创建你的函数。 \n\n添加一些模块试试看。继续添加，然后再尝试。很快，你就能成功了！"
        courseF_bee_functions7_b: |-
          请记住在绿色函数块内部生成代码。
          
          ![](https://images.code.org/8fe1fae5caf4ede3a9c9bd9f26940cde-image-1467996837459.gif)
        courseF_bee_functions7_c: 如果有蜂窝, 你应该往哪个方向转？如何有花呢？或如果什么都没有呢？
      courseF_bee_functionsPre7_2018_authored_hint:
        courseF_bee_functions7_a: "如果这个关卡看上去很有挑战性，尝试一点一点创建你的函数。 \n\n添加一些模块试试看。继续添加，然后再尝试。很快，你就能成功了！"
        courseF_bee_functions7_b: |-
          请记住在绿色函数块内部生成代码。
          
          ![](https://images.code.org/8fe1fae5caf4ede3a9c9bd9f26940cde-image-1467996837459.gif)
        courseF_bee_functions7_c: 如果有蜂窝, 你应该往哪个方向转？如何有花呢？或如果什么都没有呢？
      courseF_bee_functions_challenge1_authored_hint:
        courseF_bee_functions_challenge1_a: 您可以使用工具框中的函数来帮助您。您可以调用另一个函数的定义内的函数!
      courseF_bee_functions_challenge1_2018_authored_hint:
        courseF_bee_functions_challenge1_a: 您可以使用工具框中的函数来帮助您。您可以调用另一个函数的定义内的函数!
      courseF_bee_functions_challenge2_authored_hint:
        courseF_bee_functions_challenge2_a: |-
          如果右侧有路径, 则应执行以下操作:
          * 得到花蜜或酿蜂蜜。
          * 向右拐, 往侧面走。
          * 移动到侧边路径的末尾。
          * 向右拐。 
          
          如果重复上述操作两次, 您将准备好往下回到主路。 
          
          ** 只有当你想看到完整的解决方案时才点击另一个提示!
        courseF_bee_functions_challenge2_b: |-
          ** 解决方案: **
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_untilBlocked">
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          <next>
          <block type="maze_if">
          <title name="DIR">是否右边有路</title>
          <statement name="DO">
          <block type="procedures_callnoreturn" id="function">
          <mutation name="move and check"></mutation>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">向左转</title>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          <block type="procedures_defnoreturn" editable="false">
          <mutation></mutation>
          <title name="NAME">移动并检查</title>
          <statement name="STACK">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="procedures_callnoreturn">
          <mutation name="check nectar or honey"></mutation>
          <next>
          <block type="maze_turn">
          <title name="DIR">向右转</title>
          <next>
          <block type="maze_untilBlocked">
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">向右转</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </statement>
          </block>
          <block type="procedures_defnoreturn" editable="false" usercreated="true">
          <mutation></mutation>
          <title name="NAME">检查蜂蜜或花蜜</title>
          <statement name="STACK">
          <block type="bee_whileNectarAmount">
          <title name="ARG1">有花蜜</title>
          <title name="OP">&gt;</title>
          <title name="ARG2">0</title>
          <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          <next>
          <block type="bee_whileNectarAmount">
          <title name="ARG1">有蜂蜜</title>
          <title name="OP">&gt;</title>
          <title name="ARG2">0</title>
          <statement name="DO">
          <block type="maze_honey"/>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </xml>
      courseF_bee_functions_challenge2_2018_authored_hint:
        courseF_bee_functions_challenge2_a: |-
          如果右侧有路径, 则应执行以下操作:
          * 得到花蜜或酿蜂蜜。
          * 向右拐, 往侧面走。
          * 移动到侧边路径的末尾。
          * 向右拐。 
          
          如果重复上述操作两次, 您将准备好往下回到主路。 
          
          ** 只有当你想看到完整的解决方案时才点击另一个提示!
        courseF_bee_functions_challenge2_b: |-
          ** 解决方案: **
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_untilBlocked">
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          <next>
          <block type="maze_if">
          <title name="DIR">是否右边有路</title>
          <statement name="DO">
          <block type="procedures_callnoreturn" id="function">
          <mutation name="move and check"></mutation>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">向左转</title>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          <block type="procedures_defnoreturn" editable="false">
          <mutation></mutation>
          <title name="NAME">移动并检查</title>
          <statement name="STACK">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="procedures_callnoreturn">
          <mutation name="check nectar or honey"></mutation>
          <next>
          <block type="maze_turn">
          <title name="DIR">向右转</title>
          <next>
          <block type="maze_untilBlocked">
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">向右转</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </statement>
          </block>
          <block type="procedures_defnoreturn" editable="false" usercreated="true">
          <mutation></mutation>
          <title name="NAME">检查蜂蜜或花蜜</title>
          <statement name="STACK">
          <block type="bee_whileNectarAmount">
          <title name="ARG1">有花蜜</title>
          <title name="OP">&gt;</title>
          <title name="ARG2">0</title>
          <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          <next>
          <block type="bee_whileNectarAmount">
          <title name="ARG1">有蜂蜜</title>
          <title name="OP">&gt;</title>
          <title name="ARG2">0</title>
          <statement name="DO">
          <block type="maze_honey"/>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </xml>
      courseF_bee_functions_challenge2_recursion_authored_hint:
        courseF_bee_functions8a_a: "如果这个关卡看上去很有挑战性，尝试一点一点创建你的函数。 \n\n添加一些模块试试看。继续添加，然后再尝试。很快，你就能成功了！"
        courseF_bee_functions8a_b: "请记住在函数编辑器内生成代码。\n\n"
      courseF_bee_fwp1_authored_hint:
        courseF_bee_fwp1_a: 使用`如果`语句确保你只从一朵花得到花蜜。
        courseF_bee_fwp1_b: 沿着路径继续使用 "重复" 块。确保您使用的是 "向前移动" 块, 并使用 "如果" 声明检查是否有花。
      courseF_bee_fwp1_2018_authored_hint:
        courseF_bee_fwp1_a: 使用`如果`语句确保你只从一朵花得到花蜜。
        courseF_bee_fwp1_b: 沿着路径继续使用 "重复" 块。确保您使用的是 "向前移动" 块, 并使用 "如果" 声明检查是否有花。
      courseF_bee_fwp2_authored_hint:
        courseF_bee_fwp2_a: "若要将其变成函数，只需将代码拖到现有的函数块中即可。    \n\n![](https://images.code.org/4d918c677ecb9f1618c1556566805b32-image-1477621874625.gif)"
        courseF_bee_fwp2_b: 不要忘记将`rowOfNectar`（花蜜的行）模块连接到 `当运行时`来调用刚生成的函数。
      courseF_bee_fwp2_2018_authored_hint:
        courseF_bee_fwp2_a: "若要将其变成函数，只需将代码拖到现有的函数块中即可。    \n\n![](https://images.code.org/4d918c677ecb9f1618c1556566805b32-image-1477621874625.gif)"
        courseF_bee_fwp2_b: 不要忘记将`rowOfNectar`（花蜜的行）模块连接到 `当运行时`来调用刚生成的函数。
      courseF_bee_fwp3_authored_hint:
        courseF_bee_fwp3_a: 无论你面对的是哪个方向，函数都会运行。
        courseF_bee_fwp3_b: 有3排花蜜, 你需要在每行之间做什么样的转弯和运动？
        courseF_bee_fwp3_c: 为了解决这个难题, 你需要调用你的函数3次。在每次调用之间, 您需要 "向右转", "向前移动" 2 次, 然后再 "向右转"。或者, 你需要 "向左拐", "向前移动" 2 次, 然后再 "向左拐"。
      courseF_bee_fwp3_2018_authored_hint:
        courseF_bee_fwp3_a: 无论你面对的是哪个方向，函数都会运行。
        courseF_bee_fwp3_b: 有3排花蜜, 你需要在每行之间做什么样的转弯和运动？
        courseF_bee_fwp3_c: 为了解决这个难题, 你需要调用你的函数3次。在每次调用之间, 您需要 "向右转", "向前移动" 2 次, 然后再 "向右转"。或者, 你需要 "向左拐", "向前移动" 2 次, 然后再 "向左拐"。
      courseF_bee_fwp4_authored_hint:
        courseF_bee_fwp4_a: 你需要添加一个参数，并在循环中使用变量的值。
        courseF_bee_fwp4_b: 为函数创建的参数将用于重复循环, 以确定蜜蜂将向前移动多少次并检查花蜜。
      courseF_bee_fwp4_2018_authored_hint:
        courseF_bee_fwp4_a: 你需要添加一个参数，并在循环中使用变量的值。
        courseF_bee_fwp4_b: 为函数创建的参数将用于重复循环, 以确定蜜蜂将向前移动多少次并检查花蜜。
      courseF_bee_fwp5_authored_hint:
        courseF_bee_fwp5_a: 计算每个拉伸中需要的空格数, 并将这些数字用作函数调用的参数。
        courseF_bee_fwp5_a_b: 记住在每个函数调用之间进行转向。
      courseF_bee_fwp5_2018_authored_hint:
        courseF_bee_fwp5_a: 计算每个拉伸中需要的空格数, 并将这些数字用作函数调用的参数。
        courseF_bee_fwp5_a_b: 记住在每个函数调用之间进行转向。
      courseF_bee_fwp6_authored_hint:
        courseF_bee_fwp6_a: 哪个模块自动递增一个变量，并可以把它作为参数？
        courseF_bee_fwp6_b: 试着使用`计数循环`来通过这个关卡。
      courseF_bee_fwp6_2018_authored_hint:
        courseF_bee_fwp6_a: 哪个模块自动递增一个变量，并可以把它作为参数？
        courseF_bee_fwp6_b: 试着使用`计数循环`来通过这个关卡。
      courseF_bee_fwp7_authored_hint:
        courseF_bee_fwp7_a: 这个函数不需要第二个参数，只需要第二个`如果`语句。
        courseF_bee_fwp7_b: 在函数中添加 "如果" 声明, 以便蜜蜂检查蜂窝和花。
      courseF_bee_fwp7_2018_authored_hint:
        courseF_bee_fwp7_a: 这个函数不需要第二个参数，只需要第二个`如果`语句。
        courseF_bee_fwp7_b: 在函数中添加 "如果" 声明, 以便蜜蜂检查蜂窝和花。
      courseF_bee_fwp8_authored_hint:
        courseF_bee_fwp8_a: '"计数循环" 如何帮助这个关卡？'
        courseF_bee_fwp8_b: 随着你走进去，螺旋变小, 所以你的 ' 计数循环 ' 应该倒计数。
      courseF_bee_fwp8_2018_authored_hint:
        courseF_bee_fwp8_a: '"计数循环" 如何帮助这个关卡？'
        courseF_bee_fwp8_b: 随着你走进去，螺旋变小, 所以你的 ' 计数循环 ' 应该倒计数。
      courseF_bee_fwp9_authored_hint: [ ]
      courseF_bee_fwp9_predict1_authored_hint: [ ]
      courseF_bee_fwp9_predict1_2018_authored_hint: [ ]
      courseF_bee_fwp_challenge1_authored_hint:
        courseF_bee_fwp_challenge1_a: |-
          主程序应该类似于以下内容:
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <next>
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          <next>
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <next>
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          <next>
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">6</title>
          </block>
          </value>
          <next>
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          <next>
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
        courseF_bee_fwp_challenge1_b: '看看在每个空间里有多少玉米可以收割。你看到计数器的图案了吗？ '
        courseF_bee_fwp_challenge1_b1: |-
          "长度" 参数应用于设置 "计数循环" 中的最大值。 
          
          收割后别忘了让农夫回到主路!
        courseF_bee_fwp_challenge1_c: |-
          将 "计数循环" 放在函数中, 并将其设置为从 "1" 到 "长度" ，每次增加1。
          在这个循环中, 你应该前进, 捡起所有的玉米。
          
          <xml>
          <block type="controls_for" inline="true">
          <title name="VAR">计数器</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="parameters_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          </statement>
          </block></xml>
        courseF_bee_fwp_challenge1_d: 在' 计数循环 '里, 你会想加上' 前进 ', 然后 ' 采摘玉米 ' ** 计数器 **次。
        courseF_bee_fwp_challenge1_d2: 在 ' 计数循环 ' 之后, 你可能 ' 向后移动 ' ** 长度次数 **。
        courseF_bee_fwp_challenge1_e: |
          **解决方案：**
          
          <xml>
          <block type="procedures_defnoreturn" editable="false" usercreated="true">
          <mutation>
          <arg name="length"/>
          </mutation>
          <title name="NAME">捡起一行</title>
          <statement name="STACK">
          <block type="maze_turn">
          <title name="DIR">向左转</title>
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">计数器</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="parameters_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">计数器</title>
          </block>
          </value>
          <statement name="DO">
          <block type="harvester_corn"/>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="parameters_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">向后移动</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">向右转</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block></xml>
      courseF_bee_fwp_challenge1_2018_authored_hint:
        courseF_bee_fwp_challenge1_a: |-
          主程序应该类似于以下内容:
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <next>
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          <next>
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <next>
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          <next>
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">6</title>
          </block>
          </value>
          <next>
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          <next>
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
        courseF_bee_fwp_challenge1_b: '看看在每个空间里有多少玉米可以收割。你看到计数器的图案了吗？ '
        courseF_bee_fwp_challenge1_b1: |-
          "长度" 参数应用于设置 "计数循环" 中的最大值。 
          
          收割后别忘了让农夫回到主路!
        courseF_bee_fwp_challenge1_c: |-
          将 "计数循环" 放在函数中, 并将其设置为从 "1" 到 "长度" ，每次增加1。
          在这个循环中, 你应该前进, 捡起所有的玉米。
          
          <xml>
          <block type="controls_for" inline="true">
          <title name="VAR">计数器</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="parameters_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          </statement>
          </block></xml>
        courseF_bee_fwp_challenge1_d: 在' 计数循环 '里, 你会想加上' 前进 ', 然后 ' 采摘玉米 ' ** 计数器 **次。
        courseF_bee_fwp_challenge1_d2: 在 ' 计数循环 ' 之后, 你可能 ' 向后移动 ' ** 长度次数 **。
        courseF_bee_fwp_challenge1_e: |
          **解决方案：**
          
          <xml>
          <block type="procedures_defnoreturn" editable="false" usercreated="true">
          <mutation>
          <arg name="length"/>
          </mutation>
          <title name="NAME">捡起一行</title>
          <statement name="STACK">
          <block type="maze_turn">
          <title name="DIR">向左转</title>
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">计数器</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="parameters_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">计数器</title>
          </block>
          </value>
          <statement name="DO">
          <block type="harvester_corn"/>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="parameters_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">向后移动</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">向右转</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block></xml>
      courseF_bee_fwp_challenge2_authored_hint:
        courseF_bee_fwp_challenge2_a: |2
          首先确保你明白这个函数是如何工作的。当农夫沿着每条小路向下移动时, 她只会尝试收集玉米。相反, 你怎么能让她查找3种蔬菜, 并只捡起她发现的那一种？
          
           将条件声明添加到函数中, 来查找玉米、南瓜和生菜。
        courseF_bee_fwp_challenge2_b: |-
          你的`向前移动`模块是否没了？尝试在主程序中使用*第二个*`计数循环`。
        courseF_bee_fwp_challenge2_c: |-
          ** 您的函数应该是这个样的: **
          
          <xml><block type="procedures_defnoreturn" deletable="false" movable="false" editable="false" usercreated="true">
          <mutation>
          <arg name="length"/>
          </mutation>
          <title name="NAME">捡起一行</title>
          <statement name="STACK">
          <block type="maze_turn">
          <title name="DIR">向左转</title>
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">计数器</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="parameters_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">计数器</title>
          </block>
          </value>
          <statement name="DO">
          <block type="harvester_ifHasCrop">
          <title name="LOC">玉米</title>
          <statement name="DO">
          <block type="harvester_corn"/>
          </statement>
          <next>
          <block type="harvester_ifHasCrop">
          <title name="LOC">南瓜</title>
          <statement name="DO">
          <block type="harvester_pumpkin"/>
          </statement>
          <next>
          <block type="harvester_ifHasCrop">
          <title name="LOC">莴苣</title>
          <statement name="DO">
          <block type="harvester_lettuce"/>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="parameters_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">向后移动</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">向右转</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </xml>
        courseF_bee_fwp_challenge2_d: |
          ** 您的主要程序应该是这个样的: **
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">计数器2</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">6</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="variables_get">
          <title name="VAR">计数器2</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block></xml>
      courseF_bee_fwp_challenge2_2018_authored_hint:
        courseF_bee_fwp_challenge2_a: |2
          首先确保你明白这个函数是如何工作的。当农夫沿着每条小路向下移动时, 她只会尝试收集玉米。相反, 你怎么能让她查找3种蔬菜, 并只捡起她发现的那一种？
          
           将条件声明添加到函数中, 来查找玉米、南瓜和生菜。
        courseF_bee_fwp_challenge2_b: |-
          你的`向前移动`模块是否没了？尝试在主程序中使用*第二个*`计数循环`。
        courseF_bee_fwp_challenge2_c: |-
          ** 您的函数应该是这个样的: **
          
          <xml><block type="procedures_defnoreturn" deletable="false" movable="false" editable="false" usercreated="true">
          <mutation>
          <arg name="length"/>
          </mutation>
          <title name="NAME">捡起一行</title>
          <statement name="STACK">
          <block type="maze_turn">
          <title name="DIR">向左转</title>
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">计数器</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="parameters_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">计数器</title>
          </block>
          </value>
          <statement name="DO">
          <block type="harvester_ifHasCrop">
          <title name="LOC">玉米</title>
          <statement name="DO">
          <block type="harvester_corn"/>
          </statement>
          <next>
          <block type="harvester_ifHasCrop">
          <title name="LOC">南瓜</title>
          <statement name="DO">
          <block type="harvester_pumpkin"/>
          </statement>
          <next>
          <block type="harvester_ifHasCrop">
          <title name="LOC">莴苣</title>
          <statement name="DO">
          <block type="harvester_lettuce"/>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="parameters_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">向后移动</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">向右转</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </xml>
        courseF_bee_fwp_challenge2_d: |
          ** 您的主要程序应该是这个样的: **
          
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">计数器2</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">6</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="variables_get">
          <title name="VAR">计数器2</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block></xml>
      courseF_farmer_ramp11_authored_hint:
        courseF_farmer_ramp11_a: 如果你很难看到循环应该去哪里, 试着把它全部编码出来, 然后寻找一个模式。
        courseF_farmer_ramp11_b: 如何使用 <xml> <block type="controls_repeat"> <title name="TIMES">？？？ </title> </block> </xml> 循环来捡起生菜，而不是拖出 5 个<xml> <block type="harvester_lettuce"/> </xml>模块？
        courseF_farmer_ramp11_c: 你不需要使用5个重复循环得到所有的生菜。 相反, 将您的生菜采摘循环拖到另一个循环内 (挨着一个 <xml> <block type="maze_moveForward"/> </xml> 模块, 就可以成功了！）
      courseF_farmer_ramp11_2018_authored_hint:
        courseF_farmer_ramp11_a: 如果你很难看到循环应该去哪里, 试着把它全部编码出来, 然后寻找一个模式。
        courseF_farmer_ramp11_b: 如何使用 <xml> <block type="controls_repeat"> <title name="TIMES">？？？ </title> </block> </xml> 循环来捡起生菜，而不是拖出 5 个<xml> <block type="harvester_lettuce"/> </xml>模块？
        courseF_farmer_ramp11_c: 你不需要使用5个重复循环得到所有的生菜。 相反, 将您的生菜采摘循环拖到另一个循环内 (挨着一个 <xml> <block type="maze_moveForward"/> </xml> 模块, 就可以成功了！）
      courseF_maze_predict1_authored_hint: [ ]
      courseF_maze_ramp1_authored_hint:
        courseF_maze_ramp1_a: 如果小鸟没有到达猪那里。 确保所有模块已完全连在一起, 然后再次单击 "运行" 。
        courseF_maze_ramp1_b: 你不需要这个工具箱里的任何额外的模块！
      courseF_maze_ramp13_authored_hint:
        courseF_maze_ramp13_b: 别忘了用"步进"按钮来一个模块一个模块的寻找错误。
        courseF_maze_ramp13_a: 使用重复模块可以一次又一次地运行单个模块或一堆代码。
        courseF_maze_ramp13_c: 不要害怕犯错误！即使你还没有解决这个关卡，尝试添加模块并运行代码, 看看会发生什么。
        courseF_maze_ramp13_d: 一旦你的循环完成, 你必须做些什么来移动最后几个方块？可以在循环之后附加这些模块。
      courseF_maze_ramp15_authored_hint:
        courseF_maze_ramp7_b: 别忘了用"步进"按钮来一个模块一个模块的寻找错误。
        courseF_maze_ramp7_a: 使用重复模块可以一次又一次地运行单个模块或一堆代码。
      courseF_maze_ramp1_2018_authored_hint:
        courseF_maze_ramp1_a: 如果小鸟没有到达猪那里。 确保所有模块已完全连在一起, 然后再次单击 "运行" 。
        courseF_maze_ramp1_b: 你不需要这个工具箱里的任何额外的模块！
      courseF_maze_ramp2_authored_hint:
        courseF_maze_ramp2_a: 若要使用新的块, 请将其从工具箱里拖出到工作区中, 并将其连接到附加到 <xml> <block type="when_run"/> </xml> 模块下。
        courseF_maze_ramp2_b: 确保 <xml> <block type="maze_moveForward"/> </xml> 块位于循环内, 以便重复。
      courseF_maze_ramp2_2018_authored_hint:
        courseF_maze_ramp2_a: 若要使用新的块, 请将其从工具箱里拖出到工作区中, 并将其连接到附加到 <xml> <block type="when_run"/> </xml> 模块下。
        courseF_maze_ramp2_b: 确保 <xml> <block type="maze_moveForward"/> </xml> 块位于循环内, 以便重复。
      courseF_maze_ramp4_authored_hint:
        courseF_maze_ramp4_a: 你可以从鸟的视角向右或向左转。如果你面向右，向右转将让你朝下。
        courseF_maze_ramp4_b: 要沿着这条路前进, 向前走，然后在转向相反方向之前移动三次。再往前走一次就可以到达猪。
        courseF_maze_ramp4_c: 不要害怕犯错误！即使你还没有解决这个关卡，尝试添加模块并运行代码, 看看会发生什么。
      courseF_maze_ramp4_2018_authored_hint:
        courseF_maze_ramp4_a: You can turn right or left from the bird's point of view. If you are facing right, turning right will make you point downwards.
        courseF_maze_ramp4_b: 要沿着这条路前进, 向前走，然后在转向相反方向之前移动三次。再往前走一次就可以到达猪。
        courseF_maze_ramp4_c: 不要害怕犯错误！即使你还没有解决这个关卡，尝试添加模块并运行代码, 看看会发生什么。
      courseF_maze_ramp5_authored_hint:
        courseF_maze_ramp5_a: 尝试使用"步进"按钮来一行一行运行你的代码。你能想出下一步需要做什么吗？
        courseF_maze_ramp5_b: 有不止一种方法可以找到猪。
        courseF_maze_ramp5_c: 尝试使用<xml><block type="controls_repeat"><title name="TIMES">3</title></block></xml>循环来缩短代码!
      courseF_maze_ramp5_2018_authored_hint:
        courseF_maze_ramp5_a: 尝试使用"步进"按钮来一行一行运行你的代码。你能想出下一步需要做什么吗？
        courseF_maze_ramp5_b: 有不止一种方法可以找到猪。
        courseF_maze_ramp5_c: 尝试使用<xml><block type="controls_repeat"><title name="TIMES">3</title></block></xml>循环来缩短代码!
      courseF_maze_ramp6_authored_hint:
        courseF_maze_ramp6_a: 有两种方法来解决这个难题 ！
        courseF_maze_ramp6_b: 开始时鸟儿对着一堵墙, 所以请记住在移动前要先转向!
        courseF_maze_ramp6_c: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseF_maze_ramp6_2018_authored_hint:
        courseF_maze_ramp6_a: 有两种方法来解决这个难题 ！
        courseF_maze_ramp6_b: 开始时鸟儿对着一堵墙, 所以请记住在移动前要先转向!
        courseF_maze_ramp6_c: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseF_maze_ramp7_authored_hint:
        courseF_maze_ramp7_b: 别忘了用"步进"按钮来一个模块一个模块的寻找错误。
        courseF_maze_ramp7_a: 使用重复模块可以一次又一次地运行单个模块或一堆代码。
        courseF_maze_ramp7_c: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
        courseF_maze_ramp7_d: 有不止一种方法可以找到猪。哪种需要的代码最少？
        courseF_maze_ramp7_aa: |-
          看看这条路...
          
          ![](https://images.code.org/e1d29901495eea9504c194b09efaa88e-image-1503437474226.29.32.png)
      courseF_playlab_variables1a_authored_hint:
        courseF_playlab_variables1a_a: 你将要用"目标！"来取代绿色模块中的"我应该喊叫什么？"的文字。
      courseF_playlab_variables1a_2018_authored_hint:
        courseF_playlab_variables1a_a: 你将要用"目标！"来取代绿色模块中的"我应该喊叫什么？"的文字。
      courseF_playlab_variables2b_authored_hint:
        courseF_playlab_variables2b_a: 你认为当你点击"运行“的时候，奇奇会说什么？
      courseF_playlab_variables2b_2018_authored_hint:
        courseF_playlab_variables2b_a: 你认为当你点击"运行“的时候，奇奇会说什么？
      courseF_playlab_variables3b_authored_hint:
        courseF_playlab_variables3b_a: 变量模块已经在工作区。你所要做的一切是把它们放到属于它们的地方！
      courseF_playlab_variables3bEdit_authored_hint:
        courseF_playlab_variables3b_a: 变量模块已经在工作区。你所要做的一切是把它们放到属于它们的地方！
      courseF_playlab_variables3b_josh_authored_hint:
        courseF_playlab_variables3b_a: '有两个模块有空的空间: '' 演员说 '' 块, 和'' 连接''模块。在那里添加变量模块!'
      courseF_playlab_variables3b_josh_2018_authored_hint:
        courseF_playlab_variables3b_a: '有两个模块有空的空间: '' 演员说 '' 块, 和'' 连接''模块。在那里添加变量模块!'
      courseF_playlab_variables4b_authored_hint:
        courseF_playlab_variables4b_a: 你不需要工具箱里的更多模块。
        courseF_playlab_variables4b_b: 把两个 ' 年龄 ' 变量和一个 ' 名字 ' 变量放到谈话中最合理的地方。
      courseF_playlab_variables4b_2018_authored_hint:
        courseF_playlab_variables4b_a: 你不需要工具箱里的更多模块。
        courseF_playlab_variables4b_b: 把两个 ' 年龄 ' 变量和一个 ' 名字 ' 变量放到谈话中最合理的地方。
      courseF_playlab_variables5c_authored_hint:
        courseF_playlab_variables5c_a: 在工具箱的”变量“中找到 "回答"变量模块.
        courseF_playlab_variables5c_b: 测试您的代码! 尝试输入 "红色" 和其他颜色, 看看会发生什么。
      courseF_playlab_variables5c_2018_authored_hint:
        courseF_playlab_variables5c_a: 在工具箱的”变量“中找到 "回答"变量模块.
        courseF_playlab_variables5c_b: 测试您的代码! 尝试输入 "红色" 和其他颜色, 看看会发生什么。
      courseF_playlab_variables6c_authored_hint:
        courseF_playlab_variables6c_a: 在 "输入"章节, 使用 "询问"模块获取用户回馈。
      courseF_playlab_variables6c_2018_authored_hint:
        courseF_playlab_variables6c_a: 在 "输入"章节, 使用 "询问"模块获取用户回馈。
      courseF_playlab_variables7b_authored_hint:
        courseF_playlab_variables7b_a: 有一只猫和一只狗在谈论他们最喜欢的食物。使用询问模块找出最喜欢的食物, 然后将文本显示到屏幕！
        courseF_playlab_variables7b_b: 让你最喜欢的角色问你是否想听笑话。如果答案是肯定的, 在屏幕上显示一个笑话。
      courseF_playlab_variables7b_2018_authored_hint:
        courseF_playlab_variables7b_a: 有一只猫和一只狗在谈论他们最喜欢的食物。使用询问模块找出最喜欢的食物, 然后将文本显示到屏幕！
        courseF_playlab_variables7b_b: 让你最喜欢的角色问你是否想听笑话。如果答案是肯定的, 在屏幕上显示一个笑话。
      courseF_playlab_variables7c_authored_hint:
        courseF_playlab_variables7c_a: 将新的 "询问" 块放在 "如果/否则" 语句之前, 这样您就可以在其他阶段使用它。
      courseF_playlab_variables7c_2018_authored_hint:
        courseF_playlab_variables7c_a: 将新的 "询问" 块放在 "如果/否则" 语句之前, 这样您就可以在其他阶段使用它。
      courseF_playlab_variables8c_authored_hint:
        courseF_playlab_variables8c_a: 将"加入"模块加到一个 ' 演员说 '模块中，能让你在一个大的句子里使用变量。
      courseF_playlab_variables8c_2018_authored_hint:
        courseF_playlab_variables8c_a: 将"加入"模块加到一个 ' 演员说 '模块中，能让你在一个大的句子里使用变量。
      courseF_playlab_variables_challenge1_authored_hint:
        courseF_playlab_variables_challenge1_a: |-
          您将需要工具箱里别的模块让演员说话。
          <xml><block type="studio_saySpriteParamsTime" inline="true">
          <value name="SPRITE">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TEXT">
          <block type="text">
          <title name="TEXT">敲、敲</title>
          </block>
          </value>
          <value name="TIME">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          </block></xml>
      courseF_playlab_variables_challenge1_2018_authored_hint:
        courseF_playlab_variables_challenge1_a: |-
          您将需要工具箱里别的模块让演员说话。
          <xml><block type="studio_saySpriteParamsTime" inline="true">
          <value name="SPRITE">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TEXT">
          <block type="text">
          <title name="TEXT">敲、敲</title>
          </block>
          </value>
          <value name="TIME">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          </block></xml>
      courseF_playlab_variables_challenge2_authored_hint:
        courseF_playlab_variables_challenge2_a: 当精灵碰撞时, 将`分数`变量增加或减少。
        courseF_playlab_variables_challenge2_b: 你可以用这个参数来改变每次按下方向键时，精灵移动得距离。
        courseF_playlab_variables_challenge2_c: |-
          ** 解决方案: ** 
          
          
          <xml>
          <block type="studio_whenArrow">
          <title name="VALUE">上</title>
          <next>
          <block type="studio_moveDistanceParams" inline="true">
          <title name="SPRITE">0</title>
          <title name="DIR">1</title>
          <value name="DISTANCE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenArrow">
          <title name="VALUE">下</title>
          <next>
          <block type="studio_moveDistanceParams" inline="true">
          <title name="SPRITE">0</title>
          <title name="DIR">4</title>
          <value name="DISTANCE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenArrow">
          <title name="VALUE">左</title>
          <next>
          <block type="studio_moveDistanceParams" inline="true">
          <title name="SPRITE">0</title>
          <title name="DIR">8</title>
          <value name="DISTANCE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenArrow">
          <title name="VALUE">右</title>
          <next>
          <block type="studio_moveDistanceParams" inline="true">
          <title name="SPRITE">0</title>
          <title name="DIR">2</title>
          <value name="DISTANCE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenSpriteCollided">
          <title name="SPRITE1">0</title>
          <title name="SPRITE2">1</title>
          <next>
          <block type="studio_setScore" inline="false">
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">加</title>
          <value name="A">
          <block type="studio_getScore"/>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenSpriteCollided">
          <title name="SPRITE1">0</title>
          <title name="SPRITE2">2</title>
          <next>
          <block type="studio_setScore" inline="false">
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">加</title>
          <value name="A">
          <block type="studio_getScore"/>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenSpriteCollided">
          <title name="SPRITE1">1</title>
          <title name="SPRITE2">2</title>
          <next>
          <block type="studio_setScore" inline="false">
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">减</title>
          <value name="A">
          <block type="studio_getScore"/>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </xml>
      courseF_playlab_variables_challenge2_2018_authored_hint:
        courseF_playlab_variables_challenge2_a: 当精灵碰撞时, 将`分数`变量增加或减少。
        courseF_playlab_variables_challenge2_b: 你可以用这个参数来改变每次按下方向键时，精灵移动得距离。
        courseF_playlab_variables_challenge2_c: |-
          ** 解决方案: ** 
          
          
          <xml>
          <block type="studio_whenArrow">
          <title name="VALUE">上</title>
          <next>
          <block type="studio_moveDistanceParams" inline="true">
          <title name="SPRITE">0</title>
          <title name="DIR">1</title>
          <value name="DISTANCE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenArrow">
          <title name="VALUE">下</title>
          <next>
          <block type="studio_moveDistanceParams" inline="true">
          <title name="SPRITE">0</title>
          <title name="DIR">4</title>
          <value name="DISTANCE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenArrow">
          <title name="VALUE">左</title>
          <next>
          <block type="studio_moveDistanceParams" inline="true">
          <title name="SPRITE">0</title>
          <title name="DIR">8</title>
          <value name="DISTANCE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenArrow">
          <title name="VALUE">右</title>
          <next>
          <block type="studio_moveDistanceParams" inline="true">
          <title name="SPRITE">0</title>
          <title name="DIR">2</title>
          <value name="DISTANCE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenSpriteCollided">
          <title name="SPRITE1">0</title>
          <title name="SPRITE2">1</title>
          <next>
          <block type="studio_setScore" inline="false">
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">加</title>
          <value name="A">
          <block type="studio_getScore"/>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenSpriteCollided">
          <title name="SPRITE1">0</title>
          <title name="SPRITE2">2</title>
          <next>
          <block type="studio_setScore" inline="false">
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">加</title>
          <value name="A">
          <block type="studio_getScore"/>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenSpriteCollided">
          <title name="SPRITE1">1</title>
          <title name="SPRITE2">2</title>
          <next>
          <block type="studio_setScore" inline="false">
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">减</title>
          <value name="A">
          <block type="studio_getScore"/>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </xml>
      courseF_playlab_variables_challenge3_authored_hint:
        courseF_playlab_variables_challenge3_a: |-
          演员知道该说什么, 因为它检查了`运气`变量的当前值。 
          
          
          <xml><block type="variables_set" inline="false">
          <title name="VAR">运气</title>
          <value name="VALUE">
          <block type="text" movable="false">
          <title name="TEXT">专心，再问一次！</title>
          </block>
          </value>
          </block></xml>
        courseF_playlab_variables_challenge3_b: |-
          如果你在演员说了财宝后，再次调用`ask a question`（问一个问题）函数，感觉就像整个游戏重头再来了。
          <xml><block type="studio_saySpriteParamsTime" inline="true">
          <value name="SPRITE">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TEXT">
          <block type="variables_get">
          <title name="VAR">财宝</title>
          </block>
          </value>
          <value name="TIME">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <next>
          <block type="procedures_callnoreturn">
          <mutation name="问一个问题"/>
          </block></next></block></xml>
        courseF_playlab_variables_challenge3_c: "您将需要添加更多的条件声明, 以便让演员有更多的话要说。 \n\n\n<xml><block type=\"studio_ifActorHasEmotionParams\" inline=\"true\">\n<title name=\"EMOTION\">2</title>\n<value name=\"SPRITE\">\n<block type=\"math_number\">\n<title name=\"NUM\">1</title>\n</block>\n</value>\n<statement name=\"DO\">\n<block type=\"variables_set\" inline=\"false\">\n<title name=\"VAR\">运气</title>\n<value name=\"VALUE\">\n<block type=\"text\" movable=\"false\">\n<title name=\"TEXT\">???</title>\n</block>\n</value>\n</block>\n</statement></block></xml>\n\n不要忘记更改演员将在`一直重复`循环中显示的情绪。你也可以随意设定心情!"
        courseF_playlab_variables_challenge3_d: |-
          一旦您了解了与演员1相关的所有代码, 就可以尝试重写相同的代码，但这次是针对演员2的。
          
          不要忘记更改`问一个问题`函数中的指令, 让他们是正确的。
        courseF_playlab_variables_challenge3_e: |-
          当一切都完成了, 你应该能够点击任一演员得到多达8个不同的消息。还有可能进一步扩展吗？
          
          完成后，让一个朋友尝试你的应用程序。
      coursea_maze_ramp1_2018_authored_hint:
        courseC_maze_programming1_a: 如果小鸟不能到达猪，确保所有两个模块都完全连在了一起，然后再点击"运行"。
        courseC_maze_programming1_b: 别害怕犯错误！试试一些办法，如果不起作用，就试试别的办法！
      coursef_maze_ramp3_authored_hint:
        courseF_maze_ramp3_a: "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\n若要从代码中间删除模块, 请将所有模块拖到工作区的右边，并先暂时放在那里。\n\n点击要删除的块，并将它拖回工具箱。\n\n最后，把其它模块放回它们应该在的地方。\n"
        courseF_maze_ramp3_b: 使用 "步骤" 按钮可逐行执行程序。看哪里出了差错？
      coursef_maze_ramp3_2018_authored_hint:
        courseF_maze_ramp3_a: "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\n若要从代码中间删除模块, 请将所有模块拖到工作区的右边，并先暂时放在那里。\n\n点击要删除的块，并将它拖回工具箱。\n\n最后，把其它模块放回它们应该在的地方。\n"
        courseF_maze_ramp3_b: 使用 "步骤" 按钮可逐行执行程序。看哪里出了差错？
      drawings!_authored_hint:
        triangle_geometry_hint: '记住: 等边三角形有三边, 每个之间都有60度的转向！'
        repeat_pointer: 你必须画一条边, 然后转3次... 你可以用什么模块来多次运行相同的指令？
        repeat_bottom_out: 使用 "重复3次" 模块!
      grade1_adventurer_loops10_authored_hint:
        grade1_adventurer_loops10_a: 您将需要多个 ' 重复 ' 循环来解决这个关卡。
      grade1_adventurer_loops2_authored_hint:
        grade1_adventurer_loops2_a: 请试着使用`重复`模块来收集您的金子。
      grade1_adventurer_loops3_authored_hint:
        grade1_adventurer_loops3_a: 有什么不对劲吗？尝试使用 "步进" 按钮来找出问题所在。
      grade1_adventurer_loops4_authored_hint:
        grade1_adventurer_loops4_a: 尝试使用多个循环来完成任务。
      grade1_adventurer_loops5_authored_hint:
        grade1_adventurer_loops5_a: 无法找出哪里出错？请使用"步进"按钮来逐模块运行程序。
      grade1_adventurer_loops6_authored_hint:
        grade1_adventurer_loops6_a: 如果此关卡太难，请试着在纸张上把它画出来，看看怎么解决。
      grade1_adventurer_loops7_challenge_authored_hint:
        grade1_adventurer_loops7_challenge_a: '如果你不知道在哪里放重复循环, 请逐步编程, 并寻找规律。 '
        grade1_adventurer_loops7_challenge_b: 代码是否感觉有点长？ 通过将两个 "重复" 循环移动到另一个循环中, 让它更短。
      grade1_adventurer_loops8_challenge_authored_hint:
        grade1_adventurer_loops8_challenge_a: Can you find a pattern in the steps?  Where can you use a repeat?
      grade1_adventurer_loops9_authored_hint:
        grade1_adventurer_loops9_a: '这看起来太难了吗？ 把它分解成4个小问题会感觉容易些。  '
      grade1_artist_loops1_authored_hint:
        grade1_artist_loops1_a: 如果希望循环重复4次以上, 你可以更改该模块顶部的数字。
      grade1_artist_loops2_authored_hint:
        grade1_artist_loops2_a: 记住使用一个`重复`循环来更好地编码！
      grade1_artist_loops3_authored_hint: [ ]
      grade1_artist_loops4_authored_hint:
        grade1_artist_loops4_a: 拖出一个`重复`循环，然后把其他模块放在它里面。需要重复几次？
      grade1_artist_loops5_authored_hint: [ ]
      grade1_artist_loops6_authored_hint:
        grade1_artist_loops6_a: 这个挑战使用四个循环, 一个接一个!
        grade1_artist_loops6_b: |2
          请注意, 每个循环都会使楼梯模式在不同的方向上移动。
          
           ![](https://images.code.org/7d08d5514766c5c15074e90731991505-image-1466705649513.gif)
        grade1_artist_loops6_c: "循环应该这样做：\n- 循环1\n- 向右\n- 向下\n\n- 循环2\n- 向右\n-向上\n\n- 循环3\n- 向左\n- 向上\n\n- 循环4\n- 向左\n- 向下"
      grade1_artist_loops7_authored_hint: [ ]
      grade1_artist_loops7a_authored_hint:
        artistLoopsK9_a: 这个挑战使用四个循环, 一个接一个!
        artistLoopsK9_b: |2
          请注意, 每个循环都会使楼梯模式在不同的方向上移动。
          
           ![](https://images.code.org/7d08d5514766c5c15074e90731991505-image-1466705649513.gif)
        artistLoopsK9_c: "循环应该这样做：\n- 循环1\n- 向右\n- 向下\n\n- 循环2\n- 向右\n-向上\n\n- 循环3\n- 向左\n- 向上\n\n- 循环4\n- 向左\n- 向下"
      grade1_artist_loops7b_authored_hint:
        grade1_artist_loops7b_a: 您需要重复模式多少次来制作楼梯？
      grade1_artist_loops8_authored_hint: [ ]
      grade1_artist_loops9_authored_hint: [ ]
      grade1_artist_loopsFP_authored_hint: [ ]
      grade1_maze_sequence1_authored_hint:
        grade1_maze_sequence1_a: 该程序缺少1 个模块，您是否可以找出是哪个？
      grade1_maze_sequence10_authored_hint:
        grade1_maze_sequence10_a: 如果你有困难, 试着先写下一张纸上的步骤。
      grade1_maze_sequence2_authored_hint:
        grade1_maze_sequence2_a: 其中一个模块把鸟移向了错误的方向。你能找出是哪块并用正确的模块来取代它吗？
      grade1_maze_sequence3_authored_hint:
        grade1_maze_sequence3_a: 试着一次加一条指令，直到到达猪那里。
      grade1_maze_sequence5_authored_hint:
        K2.0_sequence_5: 最终的代码应该有3个移动模块。
      grade1_maze_sequence6_authored_hint:
        K2.0_sequence_6_a: 你需要添加1个模块来把鸟移到猪那。
      grade1_maze_sequence7_authored_hint:
        grade1_maze_sequence7a: 如果你被卡住了, 试着一次添加一个模块, 直到你解开这个关卡。
      grade1_maze_sequence8_authored_hint:
        grade1_maze_sequence8_a: 卡住了？请试着用手指来描绘鸟的路径。
        grade1_maze_sequence8_b: 额外的模块需要加在最后一块之前![](https://images.code.org/145dfc20c086bc8fc265de47f3cfe4b0-image-1467848177684.35.51 PM.png )
      grade1_maze_sequence9_authored_hint:
        grade1_maze_sequence9_a: 如果你有困难, 试着先写下一张纸上的步骤。
      grade1_maze_sequenceA_authored_hint:
        grade1_maze_sequence10_a: 如果你有困难, 试着先写下一张纸上的步骤。
      grade1_maze_sequenceB_authored_hint:
        grade1_maze_sequenceB_a: 如果你有困难, 试着先写下一张纸上的步骤。
      grade1_maze_sequenceC_authored_hint:
        grade1_maze_sequenceC_a: 如果你有困难, 试着先写下一张纸上的步骤。
      grade2_CaringForNewPet_0_authored_hint:
        grade2_CaringForNewPet_0: If the bird isn't getting to the pig, make sure all three of the blocks have been fully clicked together, then click "Run" again.
      grade2_CaringForNewPet_1_authored_hint:
        2-3_Maze_1_a: To use a `move forward` block, drag it from the toolbox out into the workspace and connect it to the `when run` block.
      grade2_CaringForNewPet_11_authored_hint: [ ]
      grade2_CaringForNewPet_2courseC_maze_programming3_authored_hint:
        courseC_maze_programming3_a: "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\n若要从代码中间删除模块, 请将所有模块拖到工作区的右边，并先暂时放在那里。\n\n点击要删除的块，并将它拖回工具箱。\n\n最后，把其它模块放回它们应该在的地方。\n"
      grade2_CaringForNewPet_3_authored_hint:
        hint1: You can turn right or left from the bird's point of view. If you are facing right, turning right will make you point downwards.
        hint2: This path is a zig-zag. You need to move forward 3 times and turn 2 times.
        hint3: To follow the path, move forward and turn one way, then move again and turn the opposite way. Move forward one more time to reach the pig.
      grade2_CaringForNewPet_3D_authored_hint: [ ]
      grade2_CaringForNewPet_4_authored_hint:
        2-3_Maze_6_a: 有两种方法来解决这个难题 ！
      grade2_CaringForNewPet_5_authored_hint:
        grade2_CaringForNewPet_5_a: If you can't quite see what you need to do, try saying the steps that your bird will take out loud one-by-one and see if they match the blocks in the workspace.
      grade2_CaringForNewPet_6_authored_hint:
        grade2_CaringForNewPet_6_a: You don't have to code the whole solution at once!  Try running the code as you go to make sure it works at each step.
      grade2_CaringForNewPet_7D_authored_hint:
        grade2_CaringForNewPet_7D_a: 别忘了用"步进"按钮来一个模块一个模块的寻找错误。
      grade2_MakeDogTag_1_authored_hint:
        2-3_Artist_1_new_a: 如果使用模块让我 '前进 100 像素'，我会自动画一条线。
        2-3_Artist_1_new_b: 怎么才能转弯呢？使用 '向右转 90 度' 模块。
      grade2_MakeDogTag_2_authored_hint:
        2-3_Artist_2_new_a: To create this window, just draw a square with 100 pixel sides.
      grade2_MakeDogTag_3_authored_hint:
        2-3_Artist_4_a: 要完成这个火箭，只需要在最上面画个三角形！
      grade2_MakeDogTag_4_authored_hint: [ ]
      grade2_MakeDogTag_5_authored_hint:
        grade2_MakeDogTag_5a: 艺术家已经面朝着正确的方向来画第一条线。
        grade2_MakeDogTag_5b: 这颗钻石真的只是一个立起来的正方形。
        grade2_MakeDogTag_5c: 因为这个钻石也是一个正方形, 请确保在拐角处旋转90度。
      grade2_MakeDogTag_6_authored_hint:
        grade2_MakeDogTag_6a: 每个角度都是45度或90度。
        grade2_MakeDogTag_6b: "它的第一步工作吗？ \n那第二步呢？\n哪里出问题了？"
      grade2_MakeDogTag_7_authored_hint:
        2-3_Artist_11_a: The exterior angles on this triangle are 120 degrees each.
      grade2_MakeDogTag_9_authored_hint:
        2-3_Artist_Loops_New_11_a: |-
          Remember that the code from the last puzzle was:
          
          ![](https://images.code.org/e5c7492f509dd41efe2888c7e7895c28-image-1461177002636.29.02.png)
        2-3_Artist_Loops_New_11_b: 新的转向代码应该在循环的**最后**。
      grade2_MakeDogTag_BFP_authored_hint: [ ]
      grade2_PuppyLoops_10_authored_hint:
        2-3_Artist_Debugging_8_a: |-
          我的形状重复了多少次？
          
          这个形状*应该*重复多少次？
          
          你可以在程序的哪里更改？
      grade2_PuppyLoops_3_authored_hint:
        hint1: 这一关和上一关很像。
        hint2: 用一个`重复5次`模块来创建循环。
        hint3: Place a `move forward` block inside the `repeat block`.
      grade2_PuppyLoops_5_authored_hint:
        hint1: 最好的解决方案是用两个`向前移动`命令和一个循环。
      grade2_PuppyLoops_6_authored_hint:
        2-3_Maze_16_a: 如果很难看到规律，尝试把它全编出来，然后看看什么东西重复了好几遍，并把它们放进循环。
        2-3_Maze_16_b: "要在 “重复” 循环内放置许多模块，只要将一个循环拖进工作区，然后把一开始程序所有的模块拖到里面。\n\n把它接回 “当运行时” 模块就完成了！"
      grade2_PuppyLoops_7_authored_hint:
        2-3_Maze_Loops_17_a: 如果很难看到规律，尝试把它全编出来，然后看看什么东西重复了好几遍，并把它们放进循环。
        2-3_Maze_Loops_17_b: 初始的代码被删除了？点击“重新开始”来找回来吧！
      grade2_PuppyLoops_8_authored_hint:
        2-3_Artist_Debugging_2_a: '提示︰ 每根胡须有 75 个像素长。'
      grade2_PuppyLoops_9_authored_hint:
        2-3_Artist_Debugging_7_a: 如果你让小艺术家在他绘制第一条线后向后移动或跳，会发生什么？
      grade2_collector_2_authored_hint:
        hint1: 你可以使用四个`向前移动`模块或使用`重复4次`模块让程序更短。
      grade2_collector_A_authored_hint: [ ]
      grade2_collector_A_2018_authored_hint: [ ]
      grade2_maze_debuggingFP_authored_hint: [ ]
      grade2_maze_intro4_authored_hint:
        hint_1: Connect a "move forward" block to the bottom of the program.
      grade2_playlab_project_6_authored_hint:
        idea1: |-
          * 需要一个主意？*
          
          ** 谁在哪里？ ** 使演员的随机图像出现, 因此没有人知道下一个显示的是谁。
          
          ![](https://images.code.org/a56e03479801995d93ad5a4e4384a79e-image-1475340154498.gif)
        idea2: |-
          * 需要一个主意？* 
          
          ** 去冒险 **- 改变背景, 然后让人物谈论他们现在在哪里。 
          
          ![](https://images.code.org/010c4d919f841d6049caf9211ab65ccc-image-1475340583052.gif)
        idea3: |-
          *需要一个想法？*
          
          **弹球游戏**- 使用箭头键让一个人物移动（使用`当上方向键按下时`，`当下方向键按下时`模块），然后当与屏幕上的其他人物相撞的时候播放随机声音。
      grade2_puppy_loops2_authored_hint:
        hint1: 你能只用包括`当运行时`在内的三个模块通过这个关卡。
        hint2: 尝试把`向前移动`模块放在`重复`模块中来创建一个循环。
        hint3: 你需要重复`向前移动`指令5次来通过此关卡。
      grade2_puppy_loops3_authored_hint:
        hint1: 这一关和上一关很像。
        hint2: 用一个`重复5次`模块来创建循环。
        hint3: Place a `move forward` block inside the `repeat block`.
      grade2_puppy_loops4_authored_hint:
        hint1: 不是所有的命令模块都应该被重复。
        hint2: 使用两个`重复`默默快，并设置不同的数字。
        hint3: "在两个循环之间`向右转`。"
      grade2_puppy_loops5_authored_hint:
        hint1: 最好的解决方案是用两个`向前移动`命令和一个循环。
      grade2_puppy_loops6_authored_hint:
        2-3_Maze_16_a: 如果很难看到规律，尝试把它全编出来，然后看看什么东西重复了好几遍，并把它们放进循环。
        2-3_Maze_16_b: "要在 “重复” 循环内放置许多模块，只要将一个循环拖进工作区，然后把一开始程序所有的模块拖到里面。\n\n把它接回 “当运行时” 模块就完成了！"
      grade2_puppy_loops7_authored_hint:
        2-3_Maze_Loops_17_a: 如果很难看到规律，尝试把它全编出来，然后看看什么东西重复了好几遍，并把它们放进循环。
      grade3_ConditionalsElse_4_authored_hint:
        remember_quantum: "**记住：**这一关在每次运行的时候都会变化。\n\n你需要用一个条件模块（“如果”或“如果/否则”）来完成这个挑战。"
      grade3_ConditionalsElse_5_authored_hint:
        remember_quantum: "**记住：**这一关在每次运行的时候都会变化。\n\n你需要用一个条件模块（“如果”或“如果/否则”）来完成这个挑战。"
      grade3_ConditionalsElse_TeacherIDo_authored_hint:
        remember_quantum: "**记住：**这一关在每次运行的时候都会变化。\n\n你需要用一个条件模块（“如果”或“如果/否则”）来完成这个挑战。"
      grade3_Conditionals_10 BAD_authored_hint:
        4-5_Bee_Nested_Loops_Rows_a: 试着将这一关当成一个长方形，这个蜜蜂需要向前移动，向左转好几次来走完这条路。
      grade3_Conditionals_11_authored_hint:
        2-3_Bee_Conditionals_14_a: 很难琢磨出怎么将方块置下吗？试着在红色花朵上重复紫色花朵的动作！
        2-3_Bee_Conditionals_14_b: 如果红色的花是紫色，你能想出如何用一个额外的“循环”来减少代码吗？
        2-3_Bee_Conditionals_14_c: "Try breaking this up into two separate chunks:  \n\n![](https://images.code.org/670ac0889a8f523865ff4099b4c54844-image-1463445460440.36.42.png)\n\n1) Gather nectar 3 times\n  - Move forward 5 times\n  - Check to see if nectar, if so: get it\n  - Turn left\n  \n2) Make honey \n  - Move forward one time\n  - Make two honey"
      grade3_Conditionals_12_authored_hint:
        2-3_Bee_Conditionals_15_a: '记住：紫色的花只有0个或1个花蜜，而且每次运行程序时都会发生变化。'
      grade3_Conditionals_2_authored_hint:
        2-3_Bee_Conditionals_3_a: 如果用循环的话，代码会非常短。一个用来循环向前移动，另一个循环用来收集花蜜，还有一个来酿造蜂蜜。
      grade3_Conditionals_4_authored_hint:
        2-3_Bee_Conditionals_6_a: '记住：紫色的花里的花蜜数量是0或者1，会在每次运行程序时变化。'
      grade3_Conditionals_TeacherIDo_authored_hint:
        2-3_Bee_Conditionals_6_a: '记住：紫色的花里的花蜜数量是0或者1，会在每次运行程序时变化。'
      grade3_Debugging_1_authored_hint:
        2-3_Bee_Debugging_1_a: 当你找到并修复了不正确的模块，你是否发现可以用 ”重复“ 循环来简化的模式了吗？
      grade3_Debugging_10_authored_hint:
        grade3_Debugging_10_a: |-
          开始只看第一个循环。
          
          它是做什么的？
          
          它应该做什么？
          
          那告诉您什么？
        grade3_Debugging_10_b: 当第一个循环按照所希望的方式进行时，代码中还剩下什么？
        grade3_Debugging_10_c: |-
          尝试将剩余的循环环绕在完成代码的其余部分。它现在可以工作吗？ 
          
          如果没有, 还有什么地方错了？
      grade3_Debugging_11_authored_hint:
        grade3_Debugging_11_a: |-
          尝试使用"步进"按钮运行代码。是否一切在第一步的时候都是好？ 
          
          那么第二步呢？ 
          
          哪里错了？
        grade3_Debugging_11_b: 看起来所有正确的步骤都在这里了，你只是需要更多。如何能多次重复`采花蜜`和`酿蜂蜜`？
      grade3_Debugging_2_authored_hint:
        grade3_Debugging_2_a: |-
          使用"步进"按钮来查看在第一步是否一切都正确。 
          
          那第二步呢？
          
          哪里出问题了？
        grade3_Debugging_2_b: 是否看到了可以使用`重复`循环来简化事情的规律？
      grade3_Debugging_3_authored_hint:
        grade3_Debugging_3_a: |-
          使用"步进"按钮来查看在第一步是否一切都正确。 
          
          那第二步呢？
          
          哪里出问题了？
        grade3_Debugging_3_b: 看到规律了吗？请尝试使用嵌套循环来通过这个关卡。
      grade3_Debugging_4_authored_hint:
        grade3_Debugging_4_a: 蜜蜂是不是在哪个地方做了什么不合道理的事？当您更改那个模块后会发生什么？
        grade3_Debugging_4_b: 尝试使用嵌套循环简化代码。
      grade3_Debugging_8_authored_hint:
        grade3_Debugging_8_a: "尝试在一行中多次使用调试过程。\n\n是什么导致了第一个问题？\n\n一旦问题解决了，是什么地方错了？"
        grade3_Debugging_8_b: "如果很难弄清楚如何制作楼梯的步进模式, 请尝试用手指跟踪它并大声说出指令。\n\n别忘了指出转弯的方向!"
      grade3_Debugging_TeacherIDo_authored_hint:
        2-3_Bee_Debugging_4_a: 蜜蜂是不是做了什么没有道理的事情？你更改那个模块后，会发生什么？
      grade3_Loops_10_authored_hint:
        2-3_Bee_Loops_4_a: 在你的循环里应该有五个模块。
      grade3_Loops_11_authored_hint:
        2-3_Bee_Loops_5_a: 如果你不能马上发现该放进 “重复” 的模块，可以先编出每次移动之后再寻找规律。
      grade3_Loops_12_authored_hint:
        2-3_Bee_Loops_6_a: 如果你不知道应该把什么放入 “重复” 循环，尝试一个接一个地拖出模块，看看你能不能找到一种规律。
        2-3_Bee_Loops_6_b: 当你完成时，在 “重复” 循环中应有6个模块。
      grade3_Loops_4_authored_hint:
        2-3_Bee_Loops_3B_a: 你将需要两个不同的 ”重复“ 循环，一个接在另一个的后面。
      grade3_Loops_5_authored_hint:
        2-3_Bee_Loops_7_a: 第一个动作将会是转向，而不是移动。
        2-3_Bee_Loops_7_b: '如果你开始还不能想象出这个循环，试着先用长的方法把它编出来，然后寻找一个规律。  '
      grade3_Loops_6_authored_hint:
        2-3_Bee_Loops_4A_a: 第一个动作将会是转向，而不是移动。
        2-3_Bee_Loops_4A_b: 你的最后一段程序可以编写在循环外的结尾处。
        2-3_Bee_Loops_4A_c: 如果你还不能发现循环，试着先用长的代码把它编出来，最后看能不能合并成一个 “重复” 循环。
      grade3_Loops_8_authored_hint:
        2-3_Bee_Loops_2_a: 在你的循环里应该有四个模块。
      grade3_Loops_9_authored_hint:
        2-3_Bee_Loops_3_a: 在你的循环里应该有六个模块。
      grade3_RunningFarm_1_authored_hint:
        grade3_RunningFarm_1_a: 你需要使用一个重复循环来寻找玉米5次。
        grade3_RunningFarm_1_b: 请确保使用`如果在玉米上`模块，否则可能是在尝试捡起不存在的东西！
      grade3_RunningFarm_10_authored_hint:
        grade3_RunningFarm_10_a: This puzzle uses almost the exact same code as the last level, except you only need to repeat 4 times.
      grade3_RunningFarm_11a_authored_hint:
        grade3_RunningFarm_11a_a: You shouldn't need the `while path ahead` loop this time.
      grade3_RunningFarm_2_authored_hint:
        grade3_RunningFarm_2_a: '最好的方法是将`如果`语句嵌套在另一个里面。  '
        grade3_RunningFarm_2_b: 这一关卡里，应该有一个`如果/否则`语句和一个普通的`如果`语句。
      grade3_RunningFarm_3_authored_hint:
        grade3_RunningFarm_3_a: |-
          若要获取所有项目，试试将`如果`嵌套三层。
          
          这意味着你应该将一个`如果`语句放在另一个里面，然后在第二个里放上第三个`如果`语句。
        grade3_RunningFarm_3_b: 这一关卡里，应该有两个`如果/否则`语句和一个普通的`如果`语句。
      grade3_RunningFarm_4_authored_hint:
        grade3_RunningFarm_4_a: |-
          没有人知道每根芽中有多少莴苣头会长出来。
          
          请使用`当有莴苣时`循环继续采摘, 直到每一片都被收集起来。
      grade3_RunningFarm_5_authored_hint:
        grade3_RunningFarm_5_a: You will need to check for each type of crop that the farmer can pick.  Try using two `if/else` statements and one  `if` block.
      grade3_RunningFarm_6_authored_hint:
        grade3_RunningFarm_6_a: 使用`当前面有路时`循环让农民沿着每片螺旋向下移动。
        grade3_RunningFarm_6_b: 您只需要在大多收成时查找玉米。在程序的最后只采载一个南瓜。
      grade3_RunningFarm_7_authored_hint:
        grade3_RunningFarm_7_a: |-
          请注意, 获取所有农作物的最简单途径仍然是螺旋形。
          
          ![](https://images.code.org/ba8b8c624f21ade9ac823b045085c435-image-1479364378437.png)
        grade3_RunningFarm_7_b: Try using `when path ahead` to keep the farmer moving the right number of steps.
        grade3_RunningFarm_7_c: 'Use nested `if` statements and `while there is` loops to check each space for corn and lettuce, then pick only a single pumpkin at the end. '
      grade3_bee_Conditionals_new4_authored_hint:
        grade3_bee_Conditionals_new4_a: Don't forget that you can use loops for shorter code!
      grade3_bee_conditionals_new1a_authored_hint:
        grade3_bee_conditionals_new1a_a: Be sure to use an `if` statement to check each space to see if it has a flower or nothing.
      grade3_bee_conditionals_new2a_authored_hint:
        grade3_bee_conditionals_new2a_a: 哪怕可以看到整条路径，仍然可以当作每个空间上面有朵云来处理。
        grade3_bee_conditionals_new2a_b: 'Use an `if` statement inside your loop to check each space. '
      grade3_bee_conditionals_new3a_authored_hint:
        grade3_bee_conditionals_new3a_a: In this puzzle, you know that each square has either a flower or a honeycomb.  That means you can repeat your `if/else` conditional at each square.
      grade3_bee_conditionals_quantum1_authored_hint:
        grade3_bee_conditionals_quantum1_a: 在您试着得到花蜜前，您将需要使用一个`如果`模块来查看是否有花在云下面。
      grade3_bee_conditionals_quantum2_authored_hint:
        grade3_bee_conditionals_quantum2_a: 有时那里有花，有时不会。如果您希望在两种情况下都能运行代码，请确保使用`如果`语句。
      grade3_bee_conditionals_quantum3_authored_hint:
        grade3_bee_conditionals_quantum3: 请确保使用`如果`语句检查每个云下是否有蜂窝。
      grade3_bee_conditionals_quantum4_authored_hint:
        remember_quantum: "** 请记住: ** 这个关卡每次运行时都会改变。\n\n您需要使用条件模块 (`如果/否则`) 来通过此挑战。"
      grade3_bee_conditionals_quantum5_authored_hint:
        remember_quantum: "**记住：**这一关在每次运行的时候都会变化。\n\n你需要用一个条件模块（“如果”或“如果/否则”）来完成这个挑战。"
        grade3_bee_conditionals_quantum5_a: This puzzle is tricky, because you can't check blank squares, nectar *and* honey with a single conditional.
      grade3_maze_loops1_authored_hint:
        grade3_maze_loops1_a: Try using the "Step" button to find errors.
      grade3_maze_loops2_authored_hint:
        grade3_maze_loops2_a: |-
          Try using this path through the maze.
          
          ![](https://images.code.org/6a8b4b97a8eef813d8a827b0b7b2d36b-image-1480446509692.05.22.png)
        grade3_maze_loops2_b: 如果很难看到规律，尝试把它全编出来，然后看看什么东西重复了好几遍，并把它们放进循环。
        grade3_maze_loops2_c: 尝试将一个`重复`循环放到另一个循环里，来减少需要的代码。
      grade3_maze_loops2a_authored_hint:
        grade3_maze_loops2a_a: 为了通过这一关，需要在另一个`重复`循环中"嵌套"一个`重复`循环。
      grade3_maze_loops3_authored_hint:
        2-3_Maze_Loops_19_a: 如果被难住了，请试着在纸上先不用循环写下代码并寻找规律。
        2-3_Maze_Loops_19_b: 嵌套的`重复`循环可以帮助减少使用的模块数量。
        2-3_Maze_Loops_19_c: 需要两组嵌套的`重复`循环来通过这个关卡。
      grade3_maze_loops4_authored_hint:
        2-3_Maze_Loops_20_a: 在迷宫里寻找楼梯-步进规律来找到可以用嵌套循环的地方。
      grade3_maze_loops5_authored_hint:
        2-3_Maze_Loops_21_a: 如果你不能找到楼梯一样的规律，试试用手指挡上堵住的路。
      grade3_robotFarmer_ConditionalsIntro_10a_authored_hint: [ ]
      grade3_robotFarmer_ConditionalsIntro_11a_authored_hint: [ ]
      grade3_robotFarmer_ConditionalsIntro_5_authored_hint:
        grade3_robotFarmer_ConditionalsIntro_5a: 尝试在`重复`循环内嵌套一个`当`循环。
      grade3_robotFarmer_ConditionalsIntro_7_authored_hint:
        grade3_robotFarmer_ConditionalsIntro_7_a: 请确保您使用的是`当`循环来计算每个孔的填充次数。
        grade3_robotFarmer_ConditionalsIntro_7_b: 请注意, 农民需要在台阶式的图案下多次向前和向下移动。
      grade3_robotFarmer_ConditionalsIntro_8_authored_hint:
        grade3_robotFarmer_ConditionalsIntro_8_a: 即使您不知道一条路径中有多少方块，`当前面有路时`模块会让你继续前进。
      grade3_robotFarmer_ConditionalsIntro_9_authored_hint:
        grade3_robotFarmer_ConditionalsIntro_9_a: 需要使用多个`当`循环。
        grade3_robotFarmer_ConditionalsIntro_9_b: 每个洞都在路径的末尾, 所以在使用`当前面有路时`之前要用`当前面有路时`。
        grade3_robotFarmer_ConditionalsIntro_9_c: 请注意，你需要重复`当前面有路时`，`当有洞时`代码六次。
      grade4_arist_nested_loop_polygons1_authored_hint:
        4-5_Nested_Loops_7_a: |-
          这个图案会在360度里循环10次。
      grade4_arist_nested_loop_polygons2_authored_hint:
        4-5_Nested_Loops_8_a: |-
          你需要在360度里循环这个图形6次。
          
          **360 / 6 = ?**
      grade4_arist_nested_loop_triangles2_authored_hint: [ ]
      grade4_arist_nested_loop_triangles3_authored_hint:
        4-5_Nested_Loops_6_a: |-
          别忘了在里面的循环里转向。
          
          你需要在360度里画6个三角形。
          
          **360 / 6 = ?**
      grade4_arist_nested_loop_triangles6_authored_hint:
        4-5_Nested_Loops_12_a: "**360 / 36 = ?**"
      grade4_artist_functions1_authored_hint:
        2-3_Artist_Functions_1_a: 这些方块的每个边都有100个像素，这意味着你将不得不在绘制你的第二个正方形前向前移动175个像素。
        2-3_Artist_Functions_1_b: 制作你的眼镜时绘制重叠的线条是可以的。
      grade4_artist_functions2_authored_hint:
        2-3_Artist_Functions_2_a: |-
          你的程序应该：
          - 使用函数
          - 向前移动 100+75像素
          - 使用函数
      grade4_artist_functions2a_authored_hint:
        grade4_artist_functions2a_a: To get around using multiple `move forward` blocks, create a `draw triangle` function and call that multiple times.
      grade4_artist_functions3a_authored_hint:
        grade4_artist_functions2a_a: To get around using multiple `move forward` blocks, create a `draw triangle` function and call that multiple times.
      grade4_artist_functions3b_authored_hint:
        grade4_artist_functions2a_a: 为了不使用多个`向前移动`模块。创建一个`画六边形`的函数，并且多次调用这个函数。
      grade4_artist_functionsChallenge0_authored_hint:
        grade4_artist_functionsChallenge0_a: |-
          从制作一个正方形的函数开始，然后尝试为一行正方形做一个函数。
          
          如何使用`draw a line of squares`（用正方形画一条线）函数来制作此图像？
        grade4_artist_functionsChallenge0_b: 在第一行正方形之后，需要在开始第二行正方形之前将小艺术家向下并向后移动回来。
        grade4_artist_functionsChallenge0_c: 在偶数行时，与奇数行相比，应该将小艺术家往回移动不同数量的像素。
      grade4_artist_functions_challenge_authored_hint:
        Course_4_SCF_1_a: 每个六边形的边长都是40像素。
        Course_4_SCF_1_b: 每个六边形之间需平行跳转120像素。
        Course_4_SCF_1_c: "在你绘制第二排的六边形之前，你需要右转60度，然后向前跳转40像素。 \n\n一旦你到达正确的垂直位置，你需要再次转动小艺术家，向后跳转320像素。"
        Course_4_SCF_1_d: "在你绘制第三排的六边形之前，你需要右转60度，然后向前跳转40像素。 \n\n一旦你到达正确的垂直位置，你需要再次转动小艺术家，向后跳转440像素（比“向下/向前”函数多120像素）。 "
        Course_4_SCF_1_e: |-
          **Solution:**
          
          ![Solution Blocks](https://images.code.org/d64a0e22c1db1d98c35b243bca6460ab-image-1469727090121.png)
      grade4_artist_functions_challenge2_authored_hint:
        Course_4_SCF_1_a: 每个六边形的边长都是40像素。
        Course_4_SCF_1_b: 每个六边形之间需平行跳转120像素。
        Course_4_SCF_1_c: "在你绘制第二排的六边形之前，你需要右转60度，然后向前跳转40像素。 \n\n一旦你到达正确的垂直位置，你需要再次转动小艺术家，向后跳转320像素。"
        Course_4_SCF_1_d: "在你绘制第三排的六边形之前，你需要右转60度，然后向前跳转40像素。 \n\n一旦你到达正确的垂直位置，你需要再次转动小艺术家，向后跳转440像素（比“向下/向前”函数多120像素）。 "
        Course_4_SCF_1_e: |-
          **Solution:**
          
          ![Solution Blocks](https://images.code.org/d64a0e22c1db1d98c35b243bca6460ab-image-1469727090121.png)
      grade4_artist_functions_stars0_authored_hint:
        grade4_artist_functions_stars0_a: |-
          为了通过这关，你只需要添加一个循环来重复初始的代码8次。
          
          如果你不记得初始代码是什么样了，点击工作区右上角"重新开始"。
      grade4_artist_functions_stars1_authored_hint:
        grade4_artist_functions_stars1_a: 尝试使用函数！
      grade4_artist_functions_stars2_authored_hint:
        grade4_artist_functions_stars2_a: 别放弃！记住你已经学会的东西。
        grade4_artist_functions_stars2_b: 函数使它可以很容易地在任何时候调用保存的代码, 而不仅仅是从循环里！
      grade4_artist_functions_stars3_authored_hint:
        hint1: Don't give up!
      grade4_artist_functions_windows0_authored_hint:
        grade4_artist_functions_windows0_a: 现在只专注于制作一个窗口。 我们将在下一个关卡中为它创建一个函数。
        grade4_artist_functions_windows0_b: 尝试使用嵌套循环, 其中内部循环制作正方形，外循环让正方形旋转四次。
      grade4_artist_functions_windows2_authored_hint:
        grade4_artist_functions_windows2_a: 请尝试首先创建函数，然后再窗口中一次添加一个。
        grade4_artist_functions_windows2_b: 不需要添加任何额外的重复循环。 只需让小艺术家在每个上面的窗口向前跳100像素，向下跳转150 像素到达底部窗口。
      grade4_artist_nestedLoops_challenge2_authored_hint:
        Course_4_Artist_11_a: '这半个六边形有一条**30像素长**的边，并且需要向右转**60度**。  '
        Course_4_Artist_11_b: '这2/3个三角形有一条**80像素长**的边，并且需要向右转**120度**。 '
      grade4_artist_nested_loop_polygons1_authored_hint:
        4-5_Nested_Loops_7_a: |-
          这个图案会在360度里循环10次。
      grade4_artist_nested_loop_polygons2_authored_hint:
        4-5_Nested_Loops_8_a: |-
          你需要在360度里循环这个图形6次。
          
          **360 / 6 = ?**
      grade4_artist_nested_loop_triangles2_authored_hint: [ ]
      grade4_artist_nested_loop_triangles3_authored_hint:
        4-5_Nested_Loops_6_a: |-
          Don't forget to make a turn after your inner loop.
          
          You'll be looping 6 triangles over 360 degrees.
          
          **6 x ? = 360**
      grade4_artist_nested_loop_triangles6_authored_hint:
        4-5_Nested_Loops_12_a: "**360 / 36 = ?**"
      grade4_bee_conditionals_new1a_authored_hint:
        grade4_bee_conditionals_new1a_a: An `if` block will help you out in this puzzle.
      grade4_bee_conditionals_new2_authored_hint:
        grade4_bee_conditionals_new2_a: 'The flowers follow a rectangular path.  You can trace that rectangle using `while path ahead` even with a different number of squares per side. '
        grade4_bee_conditionals_new2_b: 哪怕已经知道那里没有花了，仍然可以使用`如果`模块在每个正方形那里找花。
      grade4_bee_conditionals_new3b_authored_hint:
        grade4_bee_conditionals_new3b_a: 一个`如果/否则`的语句真的可以在这里帮到您。
      grade4_bee_conditionals_quantum4_authored_hint:
        remember_quantum: "**记住：**这一关在每次运行的时候都会变化。\n\n你需要用一个条件模块（“如果”或“如果/否则”）来完成这个挑战。"
      grade4_bee_conditionals_quantum5_authored_hint:
        remember_quantum: "**记住：**这一关在每次运行的时候都会变化。\n\n你需要用一个条件模块（“如果”或“如果/否则”）来完成这个挑战。"
      grade4_bee_functions1_authored_hint:
        grade4_bee_functions1_a: There is more than one right answer to this puzzle.
      grade4_bee_functions10_authored_hint:
        grade4_bee_functions10_a: 你可以使用和上一个关卡中一样的函数。不同的是，要创建一个函数，当到了每朵花那里可以收集所有的花蜜。
      grade4_bee_functions2_authored_hint:
        grade4_bee_functions2_a: 函数已经写好了，但你需要在每朵花那里调用它。
      grade4_bee_functions3_authored_hint:
        grade4_bee_functions3_a: '在这个关卡的函数只需要收集花蜜，但不应该有任何`向前移动`或`转向`模块。 '
      grade4_bee_functions4_authored_hint:
        grade4_bee_functions4_a: Your function will travel down the side paths and return the bee back to the main road.  You don't need to add that part to your program.
      grade4_bee_functions6_authored_hint:
        grade4_bee_functions6_a: 编辑函数，这样可以在不更改主程序的情况下通过此关卡。
        grade4_bee_functions6_b: "Your function should make the bee: \n- turn\n- move forward\n- collect all of the nectar\n- turn around\n- move back to the main path\n- turn back to the direction that the bee started from"
      grade4_bee_functions7_authored_hint:
        2-3_Bee_Functions_8_a: "如果这个关卡看上去很有挑战性，尝试一点一点创建你的函数。 \n\n添加一些模块试试看。继续添加，然后再尝试。很快，你就能成功了！\n\n ![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)"
      grade4_bee_functions8_authored_hint:
        2-3_Bee_Functions_8_a: "如果这个关卡看上去很有挑战性，尝试一点一点创建你的函数。 \n\n添加一些模块试试看。继续添加，然后再尝试。很快，你就能成功了！"
        2-3_Bee_Functions_8_b: |2
          别忘了把你的代码创建在绿色的函数模块中。
          
           ![](https://images.code.org/8fe1fae5caf4ede3a9c9bd9f26940cde-image-1467996837459.gif)
        2-3_Bee_Functions_8_c: 该函数应该让蜜蜂转到路上，收集花蜜，制作蜂蜜，然后转回头并回到原位。
      grade4_bee_functions9_authored_hint:
        grade4_bee_functions9_a: Your function will only need to collect nectar... but this time, you will need to use a `while` loop instead of a `repeat` loop.
        grade4_bee_functions9_b: 使用`while nectar > 0`来确保得到所有的花蜜。
      grade4_bee_nestedLoops1_authored_hint:
        grade4_bee_nestedLoops1_a: 如果不了解如何在此处使用嵌套循环, 请尝试在一张纸上逐步写出说明。圈出所看到的规律。
      grade4_bee_nestedLoops2_authored_hint:
        grade4_bee_nestedLoops2_a: 需要在另一个里面有着‘`向前移动`模块的`重复`循环的里面重复`采花蜜`。
        grade4_bee_nestedLoops2_b: 需要使用所有的三个`重复`模块来通过这个关卡。
        grade4_bee_nestedLoops2_c: |-
          Nest your blocks three deep, like this:
          
          - repeat 3
          - repeat 3
          - move forward
          - repeat 12
          - get nectar
          - turn right
      grade4_bee_nestedLoops2a_authored_hint:
        grade4_bee_nestedLoops2a_a: 尝试使用`重复`循环来通过此关卡。
      grade4_bee_nestedLoops4_authored_hint:
        grade4_bee_nestedLoops4_a: 尝试逐行写出代码，看看是否可以发现重复，并可以缩短代码的地方!
        grade4_bee_nestedLoops4_b: |-
          需要一个嵌套循环来前进和得到花蜜, 但在最后只要一个循环来收集蜂蜜。
          
          总之, 您应该使用3个循环。
      grade4_bee_nestedLoops5_authored_hint:
        grade4_bee_nestedLoops5_a: You will need 4 repeat blocks!
      grade4_review_artist1_authored_hint:
        2-3_Artist_1_new_a: 如果使用模块让我 '前进 100 像素'，我会自动画一条线。
        2-3_Artist_1_new_b: 怎么才能转弯呢？使用 '向右转 90 度' 模块。
      grade4_review_artist2_authored_hint:
        2-3_Artist_6_a: '为了制造那些小的角度，你需要每次转比上个正方形更*多*的角度。   '
        2-3_Artist_6_b: 既然我已经面向右边了。那么先往前走，再往左转来画三角形是最容易的。
        2-3_Artist_6_c: 三角形的每一条边都跟正方形一样长...100像素！
      grade4_review_bee1_authored_hint:
        2-3_Bee_Loops_3B_a: 你将需要两个不同的 ”重复“ 循环，一个接在另一个的后面。
      grade4_review_bee2_authored_hint:
        2-3_Bee_Loops_3_a: 在你的循环里应该有六个模块。
      grade4_review_bee3_authored_hint:
        2-3_Bee_Loops_4_a: 在你的循环里应该有五个模块。
      grade5_artist_binary10_authored_hint:
        Course_4_Artist_Binary_Free_Play_2b_a: 这个程序使用了两个“计数循环”。其中一个从1数到8，另外一个从8数到1。
        Course_4_Artist_Binary_Free_Play_2b_b: 每个“计数循环”都重复3次。第一个绘制最左边的1，第二个绘制中间的0，第三个绘制右边的1。
        Course_4_Artist_Binary_Free_Play_2b_c: 在每个循环中，你要对'counter(计数器)'画1，对 `16-(2 x counter)`画0
        Course_4_Artist_Binary_Free_Play_2b_d: |-
          **Solution:**
          ![solution](https://images.code.org/866a92e042a546de3afcf462a8b5c695-image-1444438735003.58.28.png)
      grade5_artist_for_loops1_authored_hint:
        grade5_artist_for_loops1_a: |-
          If you use this `for` loop, it will run just like a `repeat 3 times` loop.
          
          ![](https://images.code.org/585d2e24f3021ac2561aec6e96dde430-image-1475906135993.54.11.png)
      grade5_artist_for_loops10_authored_hint:
        Course_4_Artist_For_Loops_Challenge_a: 最大的多边形有19条边。
        Course_4_Artist_For_Loops_Challenge_b: 每个多边形都还不完整，它们都比应有的少了一条边。
      grade5_artist_for_loops1b_authored_hint:
        grade5_artist_for_loops1b_a: |-
          你能画出这样的东西吗？
          
          ![](https://images.code.org/80ae9ab3e449db1ed4e13c86239f7617-image-1475906794954.06.12.png)
      grade5_artist_for_loops2_authored_hint:
        grade5_artist_for_loops2_a: |-
          Use `counter` for the length of your triangles inside your `repeat` loop.
          
          ![](https://images.code.org/5e9465321a0b7a4d791848a79f3e6715-image-1475908305872.31.26.png)
      grade5_artist_for_loops3_authored_hint:
        Course_4_Artist_For_Loops_3_a: |-
          To have the `for` loop drive your movement, make sure that you're using `counter` as your distance in the `move forward` block.
          
          ![](https://images.code.org/15e87fc7fe408cbf1b63e0e8e69b7ffe-image-1475908502078.31.26.png)
      grade5_artist_for_loops4_authored_hint:
        Course_4_Artist_For_Loops_4_a: "**你需要的数字最小是多少？ \n最大是多少？ \n那每次增加多少？**\n\n这些都是你在使用计数循环之前需要思考的问题。"
      grade5_artist_for_loops5_authored_hint:
        grade5_artist_for_loops5_a: You don't need the traditional repeat loop when making this spiral!
      grade5_artist_for_loops7_authored_hint:
        grade5_artist_for_loops7_a: 这个关卡里的钢笔更细。在开始之前，需要将其设置为`1`。
        grade5_artist_for_loops7_b: 请注意这个螺旋是向右转而非向左！
      grade5_artist_for_loops7a_authored_hint: [ ]
      grade5_artist_for_loops7b_authored_hint: [ ]
      grade5_artist_for_loops8_authored_hint:
        Course_4_Artist_For_Loops_11_a: "每个图型之后转角角度都会改变！ \n\n通过数学模块输入360度除以图形的边数而得到正确的转角角度。 "
      grade5_artist_for_loops9_authored_hint:
        Course_4_Artist_For_Loops_11a_a: '360度除以图形的边数得出的结果即是你需要的转角角度。 '
        Course_4_Artist_For_Loops_11a_b: '每一次你需要移动的距离相当于目前边数的10倍。 '
      grade5_artist_for_loopsfreeplay11_authored_hint:
        Course_4_Artist_For_Loops_inspire_a: 这个代码的基础跟之前的挑战关卡的解决方案大体相同，只有些许变化。
        Course_4_Artist_For_Loops_inspire_b: 尝试一个计数循环，从3到10，增量为1。
        Course_4_Artist_For_Loops_inspire_c: 这个计数循环里有两个迭代循环，但是第二个循环是相反的方向。
        Course_4_Artist_For_Loops_inspire_d: "**Solution:**  ![Solution](https://images.code.org/d619892fc17ff491c201d86bb917e523-image-1441005190828.12.30.png) "
      grade5_artist_for_loopsfreeplay12_authored_hint:
        grade5_artist_for_loopsfreeplay12_a: 这里的图片是通过一个`set alpha`（设置透明度）和`counter`/10的counter（计数器）来作为画笔尺寸来制作的。
        grade5_artist_for_loopsfreeplay12_b: 绘图中的图片使用61度转弯。
        grade5_artist_for_loopsfreeplay12_c: |-
          Want to know how the sample image was done?
          
          ![](https://images.code.org/fdc5d6c15b357ba9763ac9ea914967a9-image-1475911612774.23.51.png)
      grade5_artist_functionparameters10_authored_hint:
        brush_width: 我们在开始前，将画笔的宽度设为1，并将颜色设置为蓝色。
        double_loop: 试着将一个“计数循环”放到一个“重复”循环里。
        specifics: "画出这6个花瓣的“计数循环”，每次都会运行3到17次，然后移动到下一个位置。每个形状都应该是奇数条边。\n\n这个设置透明度的模块是用来在计数器变大时，将颜色变淡。"
        after: 当你画完每个“花瓣”后，确保在转60度前，往前移动了20像素。
        solution: |-
          **Solution**
          
          ![](https://images.code.org/7e9f4be39d45726d537fe8e6e9147986-image-1456445254361.png)
      grade5_artist_functionparameters8_authored_hint:
        NEW_Course_4_Artist_Params_13_a: 每个形状的边长是它边数的7倍。
      grade5_artist_functionparameters9_authored_hint:
        NEW_Course_4_Artist_Params_14_a: 可以运行该程序几次以找出使用不同的参数函数如何工作。
        grade5_artist_functionparameters9_b: 不需要添加任何`向前移动`或`转向`模块来完成此代码。
      grade5_artist_functionparameters9a_authored_hint:
        grade5_artist_functionparameters9a_a: 'Did the code get so scrambled up that it''s no longer recognizable?  Try clicking the "Start over" button in the upper righthand corner. '
        grade5_artist_functionparameters9a_b: 新的`min`（最小值）变量应该在函数内的`计数循环`的第一个位置上。
      grade5_artist_functionparameters9b_authored_hint:
        grade5_artist_functionparameters9b_a: 如果函数是正确的, 则不需要为这个关卡去更改它。
        grade5_artist_functionparameters9b_b: 在函数调用之间, 唯一需要做的是更改线条的颜色。
      grade5_artist_functionparameters_6_authored_hint:
        grade5_artist_functionparameters_6_a: Use a `for` loop to get the code as smooth as you can.
        grade5_artist_functionparameters_6_b: 记住**添加** 一个参数。不要删除已经在那里的那个！
      grade5_artist_parameters_squares1a_authored_hint:
        grade5_artist_parameters_squares1a_a: 请记住，你需要转90度才能画一个正方形。
        grade5_artist_parameters_squares1a_b: 你只需要重复和正方形的边数一样多的次数。
      grade5_artist_parameters_squares2_authored_hint:
        grade5_artist_parameters_squares2_a: 如果你把它都放在一个`计数循环`循环内会变得更容易些。
        grade5_artist_parameters_squares2_b: |-
          一定要在每个正方形之间转90 度！
          
          ![](https://images.code.org/97bd8eded03c5aa39740876c8e9f7ff8-image-1469224745277.gif)
      grade5_artist_parameters_squares2a_authored_hint:
        grade5_artist_parameters_squares2a_a: 你需要单击"编辑"按钮才能进入该函数。一旦进去了, 添加一个叫`长度`的参数, 并在`向前移动`模块内使用它!
        grade5_artist_parameters_squares2a_b: 调用函数时, 请使用`计数循环`来实现最佳代码！
      grade5_artist_parameters_stars1_authored_hint:
        hint1: Don't give up!
      grade5_artist_variables_freeplay10_authored_hint:
        Course_4_Artist_Vars_8_a: 如果你将起始长度除以边数，边长会随着边数的增加而缩短。
      grade5_artist_variables_freeplay15_authored_hint:
        Course_4_Artist_Inspire_a: 当绘制完成一个方形后，在转向和绘制另一个方形之前，尝试先向前跳转半个边长的长度。
        Course_4_Artist_Inspire_b: 绘制方形后跳转，以上动作重复循环四次(每次循环中间需左转)，可以得到一个完整的类似风车图案。
        Course_4_Artist_Inspire_c: 每个风车也重复四次，每次右转度数为:**360度/边数**。
        Course_4_Artist_Inspire_d: |-
          **Solution:**
          ![Blocks for solution](https://images.code.org/1865aaf1b4a8ba84a5e8a7408401092d-image-1440060930335.43.39.png)
      grade5_artist_variables_octagons13_authored_hint:
        Course_4_Artist_Vars_13_a: 你需要两个重复循环(一个循环嵌套在另外一个循环里)，两个循环重复的次数均为“边数”。
        Course_4_Artist_Vars_13_b: "内部嵌套重复循环绘制一个八边型(左转)。 \n\n然后，你需要在外部循环前行并右转。"
        Course_4_Artist_Vars_13_c: 如需在边数改变的同时保持图形的尺寸，可以使用数学模块将长度（像素为单位）除以边数。
      grade5_artist_variables_square7_authored_hint:
        Course_4_Artist_Vars_6_a: 若要绘制一个正多边形，需每次转动**360/边数**度。
      grade5_artist_variables_triangles1_authored_hint:
        grade5_artist_variables_triangles1_a: 要使这个三角形的内部角度为60度, 请记住将艺术家转120度。
        grade5_artist_variables_triangles1_b: 使用 "重复" 循环使代码更短。
        grade5_artist_variables_triangles1_c: 在循环中, 您需要向前移动50像素, 然后向左转120度。
      grade5_artist_variables_triangles1_2018_authored_hint:
        grade5_artist_variables_triangles1_a: 要使这个三角形的内部角度为60度, 请记住将艺术家转120度。
        grade5_artist_variables_triangles1_b: 使用 "重复" 循环使代码更短。
        grade5_artist_variables_triangles1_c: 在循环中, 您需要向前移动50像素, 然后向左转120度。
      grade5_bee_for_loops10_authored_hint:
        grade5_bee_for_loops10_a: "12比15少多少？ \n9比12少多少？\n\n你看到规律了吗？"
      grade5_bee_for_loops11_authored_hint:
        NEW_Course_4_Bee_For_Loops_10a_a: 你能在需要走的步数和采花蜜的数量之间找到一个规律吗？
        NEW_Course_4_Bee_For_Loops_10a_b: You'll need to have 2 repeats, one will use a math block.
      grade5_bee_for_loops3_authored_hint:
        grade5_bee_for_loops3_a: '在收集花蜜的地方，在`重复`循环内使用`counter`（计数器）变量来通过这个关卡。 '
        grade5_bee_for_loops3_b: '`计数循环`将需要从1到 5, 增量为1。'
      grade5_bee_for_loops4_authored_hint:
        grade5_bee_for_loops4_a: 使用`计数循环`从1到 7，增量为 1，来通过这个关卡。
        grade5_bee_for_loops4_b: Make sure to use the `counter` variable inside your nested `repeat` loop to get enough nectar!
      grade5_bee_for_loops5_authored_hint:
        grade5_bee_for_loops5_a: This time, your `move forward` block and your `get nectar` block will need to be in separate `repeat` loops.
      grade5_bee_for_loops6_authored_hint:
        grade5_bee_for_loops6_a: 不要忘记在`重复`循环中使用`counter`（计数器）变量。
      grade5_bee_for_loops7_authored_hint:
        grade5_bee_for_loops7_a: '`计数循环`循环需要从1到7，增量为2。'
      grade5_bee_for_loops8_authored_hint:
        NEW_Course_4_Bee_For_Loops_8_a: "如果循环往上计数，那么每次运行运行时都会将增量加到计数器变量中。 \n\n你需要将什么加到每个数字，来得到下一个花蜜的数量？"
      grade5_bee_for_loops9_authored_hint:
        NEW_Course_4_Bee_For_Loops_7_a: |-
          试着用计数器变量来做些数学。
          
          要得到和你需要收集的花蜜一样的数量，你需要对每朵花的计数器做什么？
        NEW_Course_4_Bee_For_Loops_7_b: 'Remember: If your loop is counting up, the increment is added to your `counter` variable each time through.'
      grade5_bee_parameters_new1_authored_hint:
        grade5_bee_parameters_new1_a: 使用`如果`语句确保你只从一朵花得到花蜜。
      grade5_bee_parameters_new2_authored_hint:
        grade5_bee_parameters_new2_a: "若要将其变成函数，只需将代码拖到现有的函数块中即可。    \n\n![](https://images.code.org/4d918c677ecb9f1618c1556566805b32-image-1477621874625.gif)"
        grade5_bee_parameters_new2_b: 不要忘记将`rowOfNectar`（花蜜的行）模块连接到 `当运行时`来调用刚生成的函数。
      grade5_bee_parameters_new3_authored_hint:
        grade5_bee_parameters_new3_a: 无论你面对的是哪个方向，函数都会运行。
      grade5_bee_parameters_new4_authored_hint:
        grade5_bee_parameters_new4_a: 你需要添加一个参数，并在循环中使用变量的值。
      grade5_bee_parameters_new5_authored_hint:
        grade5_bee_parameters_new5_a: 计算每个拉伸中需要的空格数, 并将这些数字用作函数调用的参数。
      grade5_bee_parameters_new6_authored_hint:
        grade5_bee_parameters_new6_a: 哪个模块自动递增一个变量，并可以把它作为参数？
      grade5_bee_parameters_new7_authored_hint:
        grade5_bee_parameters_new7_a: 这个函数不需要第二个参数，只需要第二个`如果`语句。
      grade5_bee_parameters_new8a_authored_hint:
        grade5_bee_parameters_new8a_a: This spiral can be simplified with a `for` loop.
      grade5_bee_parameters_new9a_authored_hint:
        grade5_bee_parameters_new9a_a: A `for` loop can help you with this stair step pattern, too!
        grade5_bee_parameters_new9a_b: For each stair, you'll need to call the function once, turn right, call the function again, then turn left.
      grade5_playlab_variables2_authored_hint:
        Course_4_Play_Lab_Vars_2_a: 请确保将“小狗的速度”的数值设置为大于“小猫的速度”的数值。
      gradeK_sequence_4_authored_hint:
        gradeK_sequence_4_a: 请试着在纸张上写下步骤来找到解决方法！
      gradek_adventurer_loops3_authored_hint:
        gradek_adventurer_loops3_a: 要改变冒险家走多远，需要改变循环运行的次数。
        gradek_adventurer_loops3_b: 不要忘记冒险家完成了 ' 重复 ' 循环后需要走下来, 并收集黄金!
      gradek_adventurer_loops4_authored_hint:
        gradek_adventurer_loops4_a: 如果你不能马上找到答案，试着用一张纸来找出你需要的箭头并找到一个图案。
      gradek_adventurer_loops4a_authored_hint:
        gradek_adventurer_loops4a_a: Can't figure out what's wrong? Try running the code to see what happens.
      gradek_adventurer_loops5_authored_hint:
        gradek_adventurer_loops5_a: 如果您不知道接下来会发生什么，请尝试运行代码以查看罗瑞尔结束的位置。
      gradek_adventurer_loops6_authored_hint:
        gradek_adventurer_loops6_a: If you are having trouble figuring this puzzle out, try writing the moves down on a piece of paper and look for a pattern.
      gradek_adventurer_loops7_challenge_authored_hint:
        gradek_adventurer_loops7_challenge_a: 是否感觉代码很长？ 尝试把你的两个 ' 重复 ' 循环放在另一个循环内，使它变短!
      gradek_adventurer_loops8_authored_hint:
        gradek_adventurer_loops8_a: If you can't figure out where to put the loops, try writing the code out step-by-step and look for a pattern.
      gradek_adventurer_loops9_authored_hint:
        gradek_adventurer_loops9_a: If you can't figure out where to put the loops, try writing your code step-by-step and look for patterns.
      gradek_artist_loops1_authored_hint:
        gradek_artist_loops1_a: 不知道怎么画线？ 从将模块附加到`当运行时`模块开始，看看会发生什么。
      gradek_artist_loops2_authored_hint:
        gradek_artist_loops2_a: Is something not quite right?  Use the "Step" button to see where things go wrong.
      gradek_artist_loops3_authored_hint:
        artistLoopsK2_a: 如果希望循环重复4次以上, 你可以更改该模块顶部的数字。
      gradek_artist_loops4_authored_hint:
        artistLoopsK3_a: 尝试使用您所学过的重复块来完成这个关卡!
      gradek_artist_loops5_authored_hint:
        gradek_artist_loops5_a: 无法想出如何制作山峰吗？请试着运行这些模块看它们每个是画什么的？
      gradek_artist_loops6_authored_hint:
        gradek_artist_loops6_a: 不知道在哪里放循环？尝试逐步把代码写下, 并寻找规律。
      gradek_artist_loops7_authored_hint:
        gradek_artist_loops7_a: 请尝试运行代码看已经为你写了些什么。
        gradek_artist_loops7_b: 如何循环已经给你的代码？
        gradek_artist_loops7_c: "这个代码是做什么的？\n它应该做什么？\n那告诉你什么？"
      gradek_artist_loops8_authored_hint:
        gradek_artist_loops8_a: 'You don''t have to delete everything!  Some of the code is good. Use it to build the rest of the stairs. '
      gradek_artist_loops9_authored_hint:
        artistLoopsKA_a: 使用向前跳模块来向前移动，并且不会画线。
      gradek_artist_loopsA_authored_hint:
        artistLoopsKB_a: There should be 2 blocks inside of your loop to solve this puzzle.
      gradek_artist_loopsFP_authored_hint: [ ]
      gradek_playlab_events1a_authored_hint:
        gradek_playlab_events1a_a: Attach the `move up` block to the `when click` event so that the cat moves up when the "up" button is pressed.
      gradek_playlab_events1c_authored_hint:
        gradek_playlab_events1c_a: "Here is the block you should connect to the `when run` block: \n\n![](https://images.code.org/ae72d1270ad210cd00fae7e0dfb3549a-image-1478144412134.png)"
      gradek_playlab_events2c_authored_hint:
        gradek_playlab_events2c_a: drag this block out ![](https://images.code.org/b3d6215901969328333d6393f8101c5b-image-1478142333199.png) and connect it to ![](https://images.code.org/4f2130b2a3053695414a02c3d39ef864-image-1478143461271.png)
      gradek_playlab_events3c_authored_hint:
        gradek_playlab_events3c_a: |-
          Here is the event block that you will need to get Jorge to move right:
          
          ![](https://images.code.org/cfc4b696b1ad5762ff40c1c8a17a194d-image-1478141370249.png)
        gradek_playlab_events3c_b: |-
          Here is the block you should connect to the `when right` event:
          
          ![](https://images.code.org/e5c559cc1deef643c8b997d17ecb78e3-image-1478141726783.png)
      gradek_playlab_events4c_authored_hint:
        gradek_playlab_events4c_a: "Here are the event blocks that you will need to use to move Jorge up and down:\n\n![](https://images.code.org/cf9a6992f7b4619dfb592fb6905effbb-image-1478140906017.png)\nand \n![](https://images.code.org/bb2a117cef485e79119a63e5d027968e-image-1478140979742.png)"
      gradek_playlab_events5c_authored_hint:
        gradek_playlab_events5c_a: |-
          Here is the event block that you would use to have Jorge do something when clicked:
          
          ![](https://images.code.org/6e3a654378643fd0590307ec3a0e429c-image-1478140058859.png)
        gradek_playlab_events5c_b: |-
          Here is the block you would use to change the background:
          
          ![](https://images.code.org/3f6d7a642b37c3abffe7b0de062ea076-image-1478140261440.png)
        gradek_playlab_events5c_c: |-
          Here is the block you would use to play a random sound:
          
          ![](https://images.code.org/81a8ef4f64023039438199fef67bb56b-image-1478140125332.png)
      gradek_playlab_eventsA_authored_hint:
        gradek_playlab_eventsA_a: |-
          If this seems like too much to do, try breaking it down into steps:
          
          1)  Have the actor change to a random size on click.
          2) Play a random sound when you click the actor.
          
          Now, make sure both of those actions are attached underneath the same event!
      harvester_Kahoot_authored_hint:
        courseE_farmer_functions1a_a: 一步步想清楚`如果/否则`语句。如果正站在玉米株边，应该做什么？
        courseE_farmer_functions1a_b: 使用`重复直到`模块来获得南瓜!
      harvey_snowflake_artist1_authored_hint: [ ]
      harvey_snowflake_artist2_authored_hint: [ ]
      harvey_tictactoe_authored_hint:
        harvey_tictactoe: 您可以使用 "跳转" 模块移动到其他位置。
      iceAgeLoopsforVideo_authored_hint: [ ]
      iceage_click_hello_authored_hint:
        iceage_click_hello_a: 添加一个或多个 ' 演员1说 ' 块到 ' 当点击时 ' 事件来完成这个关卡。
      iceage_click_hello_2018_authored_hint:
        iceage_click_hello_a: 添加一个或多个 ' 演员1说 ' 块到 ' 当点击时 ' 事件来完成这个关卡。
      iceage_free_play_authored_hint:
        iceage_free_play_a: '你能让希德和曼尼来个冰水晶战斗吗？  '
        iceage_free_play_b: 让格瑞尼去追迪亚哥 如果她抓住他, 就让比赛取胜结束。
        iceage_free_play_c: 你可以让喜得向迪亚哥扔雪花，而且让迪亚哥每次被击中后变大吗？如果迭戈被击中5次, 比赛就胜利结束。
      iceage_free_play_2018_authored_hint:
        iceage_free_play_a: '你能让希德和曼尼来个冰水晶战斗吗？  '
        iceage_free_play_b: 让格瑞尼去追迪亚哥 如果她抓住他, 就让比赛取胜结束。
        iceage_free_play_c: 你可以让喜得向迪亚哥扔雪花，而且让迪亚哥每次被击中后变大吗？如果迭戈被击中5次, 比赛就胜利结束。
      iceage_free_playcourseF_IceAge_11_authored_hint:
        iceage_free_play_a: '你能让希德和曼尼来个冰水晶战斗吗？  '
        iceage_free_play_b: 让格瑞尼去追迪亚哥 如果她抓住他, 就让比赛取胜结束。
        iceage_free_play_c: 你可以让喜得向迪亚哥扔雪花，而且让迪亚哥每次被击中后变大吗？如果迭戈被击中5次, 比赛就胜利结束。
      iceage_hello1_authored_hint:
        iceage_hello1_a: 你只需要添加一个模块来解决这个关卡。 将 "说" 块从工具栏中拖出, 并将其连接到工作区中已经存在的 "当运行时" 事件块。接下来, 在里面输入 "你好"!
      iceage_hello1_2018_authored_hint:
        iceage_hello1_a: 你只需要添加一个模块来解决这个关卡。 将 "说" 块从工具栏中拖出, 并将其连接到工作区中已经存在的 "当运行时" 事件块。接下来, 在里面输入 "你好"!
      iceage_hello2_authored_hint:
        iceage_hello2_a: '要解决这个关卡, 你需要使用 '' 演员1说 '' 块让 喜得 说一些话。 你还需要用'' 演员2说 '' 块也让曼尼说一些话 。 '
      iceage_hello2_2018_authored_hint:
        iceage_hello2_a: '要解决这个关卡, 你需要使用 '' 演员1说 '' 块让 喜得 说一些话。 你还需要用'' 演员2说 '' 块也让曼尼说一些话 。 '
      iceage_move_events_authored_hint:
        iceage_move_events_a: '每个 '' 当 ___ 方向 '' 事件将需要连接一个不同的 '' 移动演员 1 '' 命令，来解决这个关卡 。 '
      iceage_move_events_2018_authored_hint:
        iceage_move_events_a: '每个 '' 当 ___ 方向 '' 事件将需要连接一个不同的 '' 移动演员 1 '' 命令，来解决这个关卡 。 '
      iceage_move_to_actor_authored_hint:
        iceage_move_to_actor_a: 对于这个关卡, 你可以把迪亚哥向下移动200像素, 或将曼尼向上移动200像素。
        iceage_move_to_actor_b: 将 "播放 ___ 声音" 块连接到 "当演员1触及演员 2" 事件来完成这一挑战。
      iceage_move_to_actor_2018_authored_hint:
        iceage_move_to_actor_a: 对于这个关卡, 你可以把迪亚哥向下移动200像素, 或将曼尼向上移动200像素。
        iceage_move_to_actor_b: 将 "播放 ___ 声音" 块连接到 "当演员1触及演员 2" 事件来完成这一挑战。
      iceage_move_to_flag_authored_hint:
        iceage_hello3_a: 使用 "向右移动演员1，距离200像素" 块来解决这个关卡。
      iceage_move_to_flag_2018_authored_hint:
        iceage_hello3_a: 使用 "向右移动演员1，距离200像素" 块来解决这个关卡。
      iceage_repeat_authored_hint:
        iceage_repeat_a: 同时使用 "向左移动演员1" 和 "向右移动演员1" 方块来解决这个关卡。
      iceage_repeat_2018_authored_hint:
        iceage_repeat_a: 同时使用 "向左移动演员1" 和 "向右移动演员1" 方块来解决这个关卡。
      iceage_sound_and_points_authored_hint:
        iceage_sound_and_points_a: 您将需要添加两个模块在 ' 当演员1触及演员 2 ' 事件下面。
        iceage_sound_and_points_b: 你将需要用 ' 得一分 ' 块和 ' 播放____声音 ' 模块来通过这个关卡。
      iceage_sound_and_points_2018_authored_hint:
        iceage_sound_and_points_a: 您将需要添加两个模块在 ' 当演员1触及演员 2 ' 事件下面。
        iceage_sound_and_points_b: 你将需要用 ' 得一分 ' 块和 ' 播放____声音 ' 模块来通过这个关卡。
      iceage_throw_hearts_authored_hint:
        iceage_throw_hearts_a: 你想什么时候把心扔给格瑞尼？ 当按下箭头时？当你点击 喜得？ 当你点击格瑞尼？ 选择权在你!
        iceage_throw_hearts_b: 当她收到一颗心时，要让格瑞尼高兴。你需要将`设置演员2情绪为快乐`块放到`当演员2触及弹丸时`的事件下。
      iceage_throw_hearts_2018_authored_hint:
        iceage_throw_hearts_a: 你想什么时候把心扔给格瑞尼？ 当按下箭头时？当你点击 喜得？ 当你点击格瑞尼？ 选择权在你!
        iceage_throw_hearts_b: 当她收到一颗心时，要让格瑞尼高兴。你需要将`设置演员2情绪为快乐`块放到`当演员2触及弹丸时`的事件下。
      iceage_warn_embed_ice_age_authored_hint: [ ]
      iceage_warn_ice_age_authored_hint:
        iceage_warn_ice_age_a: '您只需要在需要的地方添加两个模块来过关。 '
        iceage_warn_ice_age_b: 在 "当运行时" 事件下添加两个新模块, 使其在程序启动后立即运行。
      iceage_warn_ice_age_2018_authored_hint:
        iceage_warn_ice_age_a: '您只需要在需要的地方添加两个模块来过关。 '
        iceage_warn_ice_age_b: 在 "当运行时" 事件下添加两个新模块, 使其在程序启动后立即运行。
      k1stickerfreeplay_authored_hint: [ ]
      level 'grade3_Loops_10_authored_hint:
        2-3_Bee_Loops_4_a: 在你的循环里应该有五个模块。
      level 'grade3_Loops_11_authored_hint:
        2-3_Bee_Loops_5_a: 如果你不能马上发现该放进 “重复” 的模块，可以先编出每次移动之后再寻找规律。
      level 'grade3_Loops_12_authored_hint:
        2-3_Bee_Loops_6_a: 如果你不知道应该把什么放入 “重复” 循环，尝试一个接一个地拖出模块，看看你能不能找到一种规律。
        2-3_Bee_Loops_6_b: 当你完成时，在 “重复” 循环中应有6个模块。
      level 'grade3_Loops_4_authored_hint:
        2-3_Bee_Loops_3B_a: 你将需要两个不同的 ”重复“ 循环，一个接在另一个的后面。
      level 'grade3_Loops_5_authored_hint:
        2-3_Bee_Loops_7_a: 第一个动作将会是转向，而不是移动。
        2-3_Bee_Loops_7_b: '如果你开始还不能想象出这个循环，试着先用长的方法把它编出来，然后寻找一个规律。  '
      level 'grade3_Loops_6_authored_hint:
        2-3_Bee_Loops_4A_a: 第一个动作将会是转向，而不是移动。
        2-3_Bee_Loops_4A_b: 你的最后一段程序可以编写在循环外的结尾处。
        2-3_Bee_Loops_4A_c: 如果你还不能发现循环，试着先用长的代码把它编出来，最后看能不能合并成一个 “重复” 循环。
      level 'grade3_Loops_8_authored_hint:
        2-3_Bee_Loops_2_a: 在你的循环里应该有四个模块。
      level 'grade3_Loops_9_authored_hint:
        2-3_Bee_Loops_3_a: 在你的循环里应该有六个模块。
      playLabDebugVideo1_authored_hint:
        courseA_playLab_events2_a: "下面是应该连接到`当运行时`模块的块：\n\n![](https://images.code.org/ae72d1270ad210cd00fae7e0dfb3549a-image-1478144412134.png)"
      sample3_authored_hint:
        sample3_a: |-
          Try writing the code once and looping it seven times:
          
          ![](https://images.code.org/2a116e75e31ee3a8a8683349c9460286-image-1464307689813.gif)
      sample5_authored_hint:
        sample5_a: Did you know that you can put as many blocks inside of a repeat loop as you want to?
        sample5_b: |-
          The bee is looping these actions over and over again:
          - move forward
          - make honey
          - turn left
          - move forward
          - turn right
      sample6_authored_hint:
        sample6_a: Did you know that you can use more than one repeat loop in a puzzle?
        sample6_b: Sometimes repeat loops have lots of blocks inside, and sometimes they might only have one!
      sample7assessment_authored_hint: [ ]
