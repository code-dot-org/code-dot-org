zh-CN:
  slides:
    maze_intro:
      1:
        image: 'notes/hoc1_1.jpg'
        text: "欢迎来到你第一个《编程一小时》课程！让我们立刻开始吧。"
      2:
        image: 'notes/hoc1_2.jpg'
        text: "我们将使用模块化的，一个可视化编程语言。你只需要拖放块来进行编程。"
      3:
        image: 'notes/hoc1_3.jpg'
        text: "大多数代码都是通过打字输入的，但模块化的是可视的。每个块对应于一行\"真正的\"代码。"
      4:
        image: 'notes/hoc1_4.jpg'
        text: "你将会学习计算机科学的基础概念。这些概念广泛的应用于各个领域，从应用程序到控制火星车。"
      5:
        image: 'notes/hoc1_5.jpg'
        text: "一个程序是一组让计算机遵循的指令。"
      6:
        image: 'notes/hoc1_6.jpg'
        text: "您的第一个程序的目标是要让愤怒的小鸟通过一个迷宫去打绿色的猪。"
      7:
        image: 'notes/hoc1_7.jpg'
        text: "左边的迷宫是运行你的程序的地方。迷宫下面是每个谜题的说明。"
      8:
        image: 'notes/hoc1_8.jpg'
        text: "中间的工具栏里有愤怒的小鸟的命令。你将用他们来生成你的代码。"
      9:
        image: 'notes/hoc1_9.jpg'
        text: "右边是工作区，你可以从工具栏里面把模块拖到上面来编程。如果要删除一个块，将它拖到角落的垃圾箱里面。"
      10:
        image: 'notes/hoc1_10.jpg'
        text: "每个模块对应一条命令。如果你把”向前移动“块拖到工作区，并按”运行程序“，这只小鸟将在迷宫里向前移动一步。"
      11:
        image: 'notes/hoc1_11.jpg'
        text: "需执行多个操作时，将多个模块拖到工作区中，并将他们连在一起。小鸟会从上到下执行所有命令。"
      12:
        image: 'notes/hoc1_12.jpg'
        text: "如果你运行了一个程序，但是想要修改它再重试，按”重置“按钮。"
      13:
        image: 'notes/hoc1_13.jpg'
        text: "让我们去抓住那些猪!"
    artist_intro:
      1:
        text: "你好，我叫 JR! 每一个赛车团队都需要计算机科学家来帮助其队伍赢得比赛。他们通过分析数据来帮助赛车跑得更快。"
      2:
        text: "在下面的这些益智游戏中，你会扮演一名小艺术家，你的任务就是在他们所到之处的后面画一条线。"
      3:
        text: "该模块的意思是\"向前移动 100 个像素。\"像素是构成你屏幕画面的一个个非常小的点。"
      4:
        text: "这个模块的意思是\"右转 90 度\"。改代码会将你的艺术家在迷宫拼图块\"转\"相同的量。"
      5:
        text: "点击任意模块上的箭头来让游戏中的艺术家转向或向前移动。试着玩几局来熟悉这些新模块。"
    farmer_intro:
      1:
        text: "你好，我是波拉！在接下来的益智游戏中，你将扮演一个准备平整土地并开始播种的农夫。"
      2:
        text: "你要帮助她移出所有的土堆和填平所有的洞。"
      3:
        text: "这个新模块会从土堆上移走一铲土并填到洞里。"
      4:
        text: "每一个小土堆和坑洞的大小都不相同，所以你必须告诉农夫要使用几铲来完成工作。"
    flappy_intro:
      1:
        image: 'notes/flappy01.jpg'
        text: "你好，我是凯蒂 ！计算机科学最令人兴奋的事情之一就是计算机程序可以与人互动。"
      2:
        image: 'notes/flappy02.jpg'
        text: "当有人在电脑或手机上点击或打字时，都会触发一个『事件』，由一些代码来决定当『事件』发生时要做什么。"
      3:
        image: 'notes/flappy03.jpg'
        text: "例如，您可能有一个《事件处理程序》，说：\"当鼠标单击时播放声音\" "
      4:
        image: 'notes/flappy04.jpg'
        text: "你听说过游戏 FlappyBird 吗? 通过使用事件处理程序，我们要学习编程让 FlappyBird 变成我们自己的版本 ！"
      5:
        image: 'notes/flappy05.jpg'
        text: "你拖放的模块代表了对计算机的命令。实际上，每个模块是真正的代码来表达的。"
      6:
        image: 'notes/flappy06.jpg'
        text: "如果你看看工作区中，有一些为您填写的绿色块-这些都是\"事件处理程序\""
      7:
        image: 'notes/flappy07.jpg'
        text: "如果要让鸟在您单击鼠标时飞行，你可以通过将\"飞行\"块附加到适当的事件处理程序中，现在在你的游戏只要你点击鼠标，鸟就会飞起来。"
      8:
        image: 'notes/flappy08.jpg'
        text: "在这项活动的每个拼图中，我们会介绍新类型的事件，在工作区中，它们是绿色模块。您可以决定添加适当的模块来响应这些事件。"
      9:
        image: 'notes/flappy09.jpg'
        text: "当你看到一个像这样的下拉箭头时，这意味着您可以更改的设置 - 比如当flappy掉到地上时播放其中的某个声音。"
      10:
        image: 'notes/flappy10.jpg'
        text: "在最后的谜题，你可以创建自己的游戏，并将它分享给你的朋友。玩得愉快！"
    loop_times:
      1:
        image: 'notes/hoc2_1.jpg'
        text: "你好，我是马克 ！让我们来学习循环。通过使用循环你可以让计算机将任何一组动作不停重复, 直至数千或甚至几十亿次。"
      2:
        image: 'notes/hoc2_2.jpg'
        text: "在这个关卡中，我们想要将这只鸟向前移动 5个空格来抓到那只猪。"
      3:
        image: 'notes/hoc2_3.jpg'
        text: "让我们使用新的”重复“模块来帮我们走出迷宫。"
      4:
        image: 'notes/hoc2_4.jpg'
        text: "尝试移除5个“向前移动”块..."
      5:
        image: 'notes/hoc2_5.jpg'
        text: "我们可以在“重复”块里放入”向前移动“块，并且在上面写一个数字来表示要重复多少次。"
      6:
        image: 'notes/hoc2_6.jpg'
        text: "这一点很重要： 你可以在\"重复\"块中放多个命令。"
      7:
        image: 'notes/hoc2_7.jpg'
        text: "试试看使用新的\"重复\"模块吧！"
    loop_until:
      1:
        image: 'notes/hoc3_1.jpg'
        text: "你好，我是克里斯。在加盟迈阿密热队之前，我在乔治亚理工学院学习计算机科学。让我们试试新的\"重复直到\"模块。"
      2:
        image: 'notes/hoc3_2.jpg'
        text: "如果我们不知道小鸟要走多少步才能到达猪呢？"
      3:
        image: 'notes/hoc3_3.jpg'
        text: "如果我们在”重复直到“块里放一个”向前移动“块，小鸟会向前移动直到它抓到猪（或者撞上一堵墙）。"
      4:
        image: 'notes/hoc3_4.jpg'
        text: '这一点很重要： 就像之前，我们可以在"重复直到"模块里放多个模块，所有这些模块都会被重复。'
    if:
      1:
        image: 'notes/hoc4_1.jpg'
        text: "你好，我是比尔！让我们来学习一个新的基本概念：\"如果\"语句。计算机通过这个语句做决定。"
      2:
        image: 'notes/hoc4_2.jpg'
        text: "你每天都在使用\"如果\"语句。在你早上出门之前，你会想如果外面在下雨，我最好穿上我的夹克。"
      3:
        image: 'notes/hoc4_3.jpg'
        text: "我们可以让僵尸去检查左边是不是有路，而且如果他发现左边确实有路，我们就让他向左转。"
      4:
        image: 'notes/hoc4_4.jpg'
        text: "要编写这段代码，我们需要拖出一个\"如果\"块，并在里面放一个\"左转\"块。"
      5:
        image: 'notes/hoc4_5.jpg'
        text: "现在，如果我们在这段代码上面放一个\"向前移动\"的块，并且用一个\"重复\"块来包含住这段代码，每一次僵尸移动时候，他就会检查是否左边有路并且向左转。要做到每一步都进行这个检查，\"重复\"命令是关键。"
      6:
        image: 'notes/hoc4_6.jpg'
        text: "如果语句是计算机科学中非常重要的一种语句。我写的第一个程序是一个井字游戏，在里面，我使用了“如果”语句说，如果对方马上就要赢了，就在那个位置上打上自己的符号。"
      7:
        image: 'notes/hoc4_7.jpg'
        text: "学习如何使用\"如果\"模块"
    if_else:
      1:
        image: 'notes/hoc5_1.jpg'
        text: "你好，我是 Saloni。我用计算机科学来帮助解决健康和医学上的问题。让我们来学习如何使用 \"如果-否则“ 模块。这个模块和\"如果\"模块类似，区别仅是在”如果“模块的结尾加上”否则”部分。"
      2:
        image: 'notes/hoc5_2.jpg'
        text: "如果我把”向前移动“块放在标注着”做“的地方，并且把”左转“块放在写着”否则“的地方，这表明僵尸将会在这两者之间做一个选择。如果前面有路，僵尸就会往前走，否则（意味着前面没有路），僵尸就会向左转。"
      3:
        image: 'notes/hoc5_3.jpg'
        text: "与“如果”模块类似，我们可以将“如果-否则”模块放在一个“循环”模块内，这样僵尸就不停的移动，“如果-否则”模块则不断的检查是否有什么方向可以拐弯。"
      4:
        image: 'notes/hoc5_4.jpg'
        text: "现在，让这些僵尸回老家吧！"
    if_else_scrat:
      1:
        text: "“如果-否则” 语句描述在两个事件间的选择。让我们看看一个例子，与我们的好朋友松鼠斯奎特一起使用“如果-否则”语句。"
      2:
        text: "这个语句块看起来和“如果”条件语句块一样，但在它的下面多出了一个“否则”语句块部分。 如果我加一个“前进”块到“做”的地方，再加一个“向左转”块到“否则”的地方，这样一来，如果小松鼠斯奎特的前方有路，那么他就会向前走。如果他前面没有路，斯科莱特就会向左转。"
      3:
        text: "它会决定并执行两个操作中的一个。就像\"如果\"模块一样，你可以把\"如果 否则\"模块放在\"重复\"模块中。"
      4:
        text: "现在 让我们来帮助小松鼠斯奎特得到那颗橡果。"
    function:
      1:
        text: "你好，我叫布丽娜，我是Instagram 的一名工程师。函数是您想要多次使用的一些代码，有了函数就不需要每次编写该代码，而只用这一个函数模块就可以了。"
      2:
        text: "我们下面学习如何定义函数。函数定义在角上有一颗星作为标示。函数的名称写在顶行。"
      3:
        text: "模块里面的定义告诉我们它的功能。该函数的定义叫做\"填充5\"而它是由\"重复\"模块和\"填充\"模块组成的。"
      4:
        text: "虽然定义放在工作区中，但农民不会运行该函数。除非我们从函数类别中拖出\"填充 5\"功能块。"
      5:
        text: "让我们将 \"fun\" 放回 \"FUNction!\" "
    loop_while:
      1:
        text: "你好，我是Makinde。让我们一起来学习“当”模块吧。 "
      2:
        text: "当顶上的语句值为真时，“当”模块将不停执行里面的任何命令。"
      3:
        text: "打个比方，如果农民站在土堆上时，只要她脚底下还有图，她就会不停的移除一铲土。"
    loop_for:
      1:
        text: "嗨，我是特里纳，我为皮克斯工作。我已经从事于许多部电影，包括《怪物史莱克》。"
      2:
        text: "这是新的“计数”循环。它能反复执行某些操作，你可以对这些操作做少量的修改。"
      3:
        text: "在此示例中，“计数器”循环的内容是：“从 50 加到 90，每次加 10。”。并在循环里面有一个“画一个正方形”模块。将\"计数器\"模块从\"变量\"单元拖动到\"长度\"处。"
      4:
        text: "这表示我们的小艺术家会先画一个边长为50像素的正方形，然后会增加10像素，画一个60像素的正方形。然后会每次增加10像素来画正方形，直到90像素。所以，我们会有50，60，70，80，90像素的正方形。"
    parameters:
      1:
        text: "嗨，我是Janete, 我是Zynga的工程师。"
      2:
        text: "如果我们要画出一大堆有着不同边长的三角形，怎么做才好呢？"
      3:
        text: "我们可以一行一行写出所有代码，也可以用用带参数的函数来完成。"
      4:
        text: "要完成此操作，点击“画一个三角形”函数定义上面的蓝色星星，然后拖动“输入名称”到“输入”模块中。"
      5:
        text: "接下来，如果你在写着“x”的区域输入“长度”，然后按下“Enter”键，就可以提你的函数建立一个名为“长度”的输入。"
      6:
        text: "然后点击星星。现在，点击的变量类别并将\"长度\"块拖动到您的函数定义中的\"向前\"模块内。最后将旧编号块移除。"
      7:
        text: "要使用有参数的函数，需要点击函数勒边，然后拖拽出“画一个长度为... 的三角形”函数。"
      8:
        text: "现在你可以使用数字模块输入不同的数字来绘制不同大小的三角形。"
    hoc_wrapup:
      1:
        image: 'notes/hoc6_1.jpg'
        text: "恭喜你！用你在上一个关卡当中写的程序，你可以让任何一个机器人（僵尸，小鸟，火星探测器，自动驾驶车），在任何一个无分支的迷宫里找到出去的路。"
      2:
        image: 'notes/hoc6_2.jpg'
        text: "你在这里所使用的基本概念是所有程序的核心。我们学习了重复循环语句，重复直到语句，如果语句，和如果否则语句。"
      3:
        image: 'notes/hoc6_3.jpg'
        text: "如果你很喜欢这一个小时的编程体验，欢迎访问 code.org 来继续你在计算机科学的学习！当你完成我们的20小时课程，你就熟练掌握了编程的基础，可以开始学习如何编写手机应用程序，机器人程序，游戏，随便你。"
      4:
        image: 'notes/hoc6_4.jpg'
        text: "技术正在改变我们所做的一切，而不管你是否年轻： 编程是一件很好玩、 很有创意的事，任何人都可以学习 ！"
    20_wrapup:
      1:
        text: "即将推出笔记版本！"
    frozen_intro:
      1:
        text: "嗨，我是Lyndsey, 我是一名模特，演员，同时我也会写自己的应用程序。让我们用编程与安娜、爱莎一起探索美丽的冰雪奇缘的世界吧！"
      2:
        text: "当你滑冰的时候你将会制造出雪花和不同的同案并且让寒冷的冬天变成童话世界，然后再将你的佳作分享给你的朋友们来欣赏。"
      3:
        text: "接下来的一个小时，你将会学习编程的基础知识。传统的编程通常是使用文本，但我们将使用模块化来编程，你可以拖放可视化的积木块来编写的程序。连大学生都是用这样的方式学习编程的基础知识。而实际上，你仍然是在创造程序代码。"
      4:
        text: "程序是一组指令，它会告诉计算机需要什么。让我们生成一段代码或者程序，帮助艾莎画出一条简单的线条。以后我们将使用这些技能去创建更多复杂的图案。"
      5:
        text: "您的屏幕被分成三个主要部分。左边是运行您程序的冰雪世界。关卡说明写在了冰雪世界的下方。"
      6:
        text: "中间的区域是工具箱，其中的模块是艾莎和安娜能做的动作。"
      7:
        text: "右边的空白称为工作区，我们将在这里构建程序。你可以使用“向前移动”模块来移动人物。"
      8:
        text: "在这里\"向前移动\"模块是指\"向前移动 100 个像素\"。当我们按下\"运行\"时，会发生呢？艾莎会向前移动一段距离，这段距离是100 个像素！像素是计算机屏幕上很小很小的一个点。"
      9:
        text: "这个关卡中的另一个模块写着：“向右转90度”。 当我们使用这块“向右转”的迷宫块时 它会使艾莎转动一定的角度。你可以试一试看你能让艾莎转动多少度。这个转动的角度是以艾莎前面的路径为基础测量的。所以说, 这个是90度的转动，而这个是120度的转动。"
      10:
        text: "请记住，您可以通过单击旁边的箭头更改像素和角度的数值。"
    frozen_loops:
      1:
        text: "你好, 我是Paola! 电脑很善于做重复性的事情。你能数到10, 20 或者100, 但是电脑却能数到十亿或者兆。他不会感到无聊而且只需要花几秒钟的时间就能完成。无论是计数、绘画或是做任何事情--电脑都能轻易的重复上百甚至数十亿次。"
      2:
        text: "在编程中, 我们称这为一个循环。 一个循环就是一遍又一遍的重复执行你的代码。在下一个关卡里, 你要做的就是帮助安娜用\"重复\"模块来做出一个方形。"
      3:
        text: "任何你写在“重复”模块里的代码都将会像你想的一样一遍遍的按顺序执行。"
      4:
        text: "如要绘制一个正方形， 你可以使用“向前移动”和“向右转”模块四次。但更简单的方法是：告诉计算机”向前移动“和”向右转90度“一次， 然后告诉它重复这一组动作4次。要做到这一点， 你需要将”向前移动“和”向右转“模块放到一个”重复“模块里。"
      5:
        text: "记住， 你可以改变”重复“模块执行的次数，那么这个模块就会将它里面的任何动作执行所指定的次数。"
    frozen_functions:
      1:
        text: "你好， 我是Chris Bosh。 我是一个职业篮球队员， 我曾在上大学的时候写过代码。"
      2:
        text: "在计算机科学中最重要的概念之一是如何定义新命令。 大多数计算机编程语言只有约100个左右的关键词和命令。而真正的艺术所在就是如何使用这些已有的模块来定义出你自己的命令。"
      3:
        text: "一旦你教会了计算机如何通过一组指令完成一件事情的命令，你就可以给它取个名字。这样，以后你就能很容易的重复它了。当你定义了这样一个命令，并给它取了名字，这就叫做函数了。"
      4:
        text: "你好，我是杰丝。当你用模块编程时，如果这里有一组指令是经常要重复使用的，可以将它们定义为函数。例如，可以用一个函数来放创建一个正方形的模块。"
      5:
        text: "你可以将这个定义为叫做”创建一个正方形“的函数。 "
      6:
        text: "现在，你有了一个能够多次使用的新模块了。你能用它创建出多个正方形了。"
      7:
        text: "很多简单的形状可以用来创建更复杂的模式。在下一关中，你可以用最近写的画圆来创造一个新的函数，并且用这个函数来画各种大小的圆。你能帮助艾莎在雪里创建复杂而又美丽的模式吗？"
    playlab_intro:
      1:
        text: "我们会用游戏实验室来创建游戏。一个好的游戏会有故事，每个故事都会有演员。我们将要学习让巫师、外星人、动物这样的演员来说话，移动，互动。在这个教程结束的时候，你能从头创建一个游戏，并且分享给朋友。"
      2:
        text: "您的屏幕分为 3 个主要部分。左边是在您的程序将运行的游戏空间。每一关的说明都是写在下面。"
      3:
        text: "中间是工具箱，每个模块都是一段代码。右边的空白区域是工作区，这是我们创建程序的地方。"
      4:
        text: "在开始以前，你需要将模块连接到橙色的“当运行时”模块下面。你可以将多个模块拖到一起，在看到黄线时松开。这样它们就能粘到一起，并按顺序运行了。"
      5:
        text: "在这一关里，我们的演员是一只企鹅，通过拖拽出“说”模块来让它说“你好”吧！将它连接到“当运行时”模块下，并且在里面打出“你好”。我们也可以用向左移动和向右移动的模块让企鹅移动。一旦你将模块放好后，点击“运行”按钮来看看你写的程序。"
      6:
        text: "从头学完后，你能用所有的演员来创建自己的游戏。你能让他们之间能够互动，高兴或伤心，获得分数，互相扔火球，甚至能够消失。你可以随便想象，并做出你的游戏。"
    playlab_events:
      1:
        text: "现在，我们来了解一个所有的游戏程序员每天都要用的东西，它被称为事件。事件可以告诉你的程序去侦听某事的发生。当那件事发生时，它执行相应的操作。"
      2:
        text: "一般事件会去侦听的动作有鼠标单击，按下方向键，屏幕触碰。"
      3:
        text: "当点击时当玩家点击这个空间机器人时，让它向人类问好。我们会加一个“说”模块到“当点击时”模块里。当玩家点击空间机器人时，所有在“当点击时”里的模块都会执行。想让你的外星人说什么?"
      4:
        text: "这里也有“当按... 方向键时”的模块。如果你将移动模块连接到它们里面后，你就能开始移动你的演员上下左右移动。一步步的，你的游戏变得更加互动了。"
    playlab_repeat_forever:
      1:
        text: "这是”一直重复“模块。在里面的任何命令都会在游戏中一直重复下去。"
      2:
        text: "如果想让一个演员在没有玩家的帮助下重复做一些事情，我们需要将这些模块放到”一直重复“模块中。"
      3:
        text: "在下移观众，我们的目标是帮助巫师巡逻王国的边界，不停的左右移动。学习重复命令的原理会让你在做自己的游戏时节省大量的时间。"
    C1_artist_intro:
      1:
        text: "这是你可以用的模块。用正确的模块来移动小艺术家，让他画出这条灰线条。"
      2:
        text: "这些是跳跃模块。当它们运行的时候，小艺术家会移动但不会画出线条。用它们跳到下一条灰线那里。"
    C1_bee_level_intro:
      1:
        text: "这些蜜蜂是不是很酷？下面的关卡中，你的目标是帮助蜜蜂到花那里采花蜜，并且到蜂窝那里酿蜂蜜。你需要用到“采花蜜”和“酿蜂蜜”模块。"
      2:
        text: "每朵花里面的花蜜数量都不一样，有可能有1，2，3或者更多的花蜜。在红色花朵上面有个小小的数字，上面写了它有多少花蜜。所以在前进到下一格之前，确保每朵花所有花蜜都被采集了。同样的，每个蜂窝只能装一定量的蜂蜜：1个，2个，3个或者更多。确保每个蜂窝不要超过它能装的蜂蜜数量。"
      3:
        text: "如果你能采集所有的花米，并且都酿成蜂蜜了，就能成功通过，并到达下一关。否则，你需要再试试这一关。玩一会儿吧，看看当程序员是什么感觉。"
    C1_bee_loops:
      1:
        text: "循环就是重复一些活动。我打开蜂箱，查看一片蜂窝，然后把它放回去，就这样我重复多次这样的活动。这样不停的循环，就是一样的活动做了多次。"
      2:
        text: "在这一关中，我们让蜜蜂从花里收集三个花蜜。应该使用一个重复模块来收集三次花蜜，而不是使用三次收集花蜜模块。点击“运行”看看是不是写对了。太好了！"
    C1_bigevent_unplugged:
      1:
        text: "这一课叫做大事件。我们会学会如何用事件来改变程序运行时的控制方法，比如点击按钮或鼠标这样的事件。"
      2:
        text: "在这一课中，你会被一张纸远程控制。这就像个真的电脑游戏一样。"
      3:
        text: "一个事件，就是导致某些事情发生的行为。就像当你点击了一个按钮后，网页就会刷新一样。点击按钮就是一个时间。当你触摸平板显示屏，让内容滚动，这也是一个事件。事件是一个伟大的方法，它让人们能够随心所欲的与程序直接进行交互。"
      4:
        text: "事情发生时，我们都会有所反应。当我们感觉饿时，就会去冰箱那里。当我们听到邮递员来了，并且将邮件放到邮箱里时，我们就会去拿邮件。这些事件就像按下按钮，或者移动游戏操纵杆一样。事件发生时，就会触发我们去做一些事情。"
      5:
        text: "在电脑游戏中，有个事件叫做“更新”，会每秒钟发生30或者60次。对于电脑游戏程序员来说，这比按钮或者操纵杆的事件要重要得多。"
      6:
        text: "我们等待的最主要的事件就是“更新”。然后我们在这时检查游戏操纵杆。我们会说，“哦，在这一帧时有没有人按了按钮？”如果没有事件，玩家不会移动，也不能跳，不能控制发生什么。电脑游戏也不会有任何动画。"
    C1_building_foundation:
      1:
        text: "在沙雕里，你会知道失败是游戏的一部分。但是如果你坚持下去，就不容易失败了，然后你会发现会越来越好玩。坚持是这个游戏名字的一部分。玩下去，你会爱上它的。"
      2:
        text: "这一课叫做打好基础。这一课里，我们要完成一个真的比较困难的任务。你需要搭出一个和这些杯子一样高的结构，而且它需要能够承受一本书的重量。"
      3:
        text: "我们创造的东西可能好多次都不能成功。可能我们会感到泄气，还想要放弃。可能很多时候都会有这样的感觉。但是如果我们不停的尝试，尽最大努力一次次尝试，成功一定不会太远！"
      4:
        text: "当你真的想要放弃时，坚持是那时候唯一要做的事情。如果你想要创造一些新的不同的东西，很多次的失败是不可避免的。"
      5:
        text: "坚持的诀窍在于不停的尝试，并从每次失败中学会东西，而不是因为挫折就停下了。挫折实际上意味着一些美好的东西还在角落里。所以不要放弃，你才能成功！加油！"
    C1_getting_loopy:
      1:
        text: "你好，我是米拉尔 克比，我是Iluminate的创作人。我的工作是通过跳舞和编程序来做出光线铠甲。这就是循环！循环就是一遍又一遍的重复一些动作。"
      2:
        text: "当你重复一些事情很多次时，就象我在不停的保持呼啦圈旋转一样，就是在执行循环的动作。这是一个循环。这是一个循环。这也是个循环。"
      3:
        text: "今天我们有一场舞会。我们会用循环表演一种新的舞蹈 - 迭代。我们会通过舞蹈来学会循环。你会学会通过一些简单的步骤，不停的重复它们来完成这个舞蹈。"
      4:
        text: "这里是你需要学习的步骤。拍拍你的手。把你的手放在脑后。把手放在你的腰上。举起你的左手。举起你的右手。很简单，对吧？你会发现你可以将一些内容放在循环中来减少一些说明。"
      5:
        text: "我们实际上在跳舞中使用循环。跳舞者戴着计算机，这些计算机都在同一个网络中。我可以让光线一遍一遍循环的穿过同样的舞者。在循环里面，可以有个迭代的循环来一遍一遍穿过6个舞者，而且在循环中还能不断地增加光线的速度。这一切都是用循环来创造的。在计算机科学中，循环非常重要，因为它让我们的工作变得更短，更容易。"
    C1_happy_maps_unplugged:
      1:
        text: "这堂课叫做快乐的地图。今天我们要帮助我们毛茸茸的小朋友福乐波到她的水果那里。"
      2:
        text: "帮助你的福乐波到水果那里。要做到这一点，需要弄清楚福乐波应该走哪条路，然后用箭头带她去。为了让福乐波得到苹果，她应该往哪个方向走？画线来让她继续走。"
      3:
        text: "为了让它到达那里，你需要把正确的方向圈起来。"
      4:
        text: "通过将箭头粘到要解决的地图上来创造你的算法。第二道题是一样的，但应该往下走。"
      5:
        text: "这就像用纸的编程。就是这样的！"
    C1_maze_debugging:
      1:
        text: "调试就是找到问题并解决问题的过程。有很多方法来调试问题。最简单的方法是一步步的前进，直到找到了哪里错了。现在，我在尝试在平衡木上后空翻，但每次都会掉下来。"
      2:
        text: "我一步步的检查了我的每个动作，然后意识到了错误在哪里了。我没有把手正确的放在平衡木上。然后，我把手放到新的位置上又试了一次，于是我成功了。我真的非常高兴我调试了后空翻！"
      3:
        text: "要了解调试，让我们从一些放好的模块开始。你会注意到这些模块并不能让你到达目标。我们需要调试现有的方案，并修好它。什么地方错了？你会注意到需要再加一个往西走的模块。"
      4:
        text: "让我们通过添加另一个向西走的模块来修好它，然后点击运行看是否正确。耶，你学会了！"
    C1_maze_intro_sequencing:
      1:
        text: "这一关中，需要让小鸟到那只猪那里。看看这道题，它应该往什么方向去。"
      2:
        text: "你需要从工具箱将模块拖到工作区。确保模块在“当运行时”模块的下面。当觉得方案正确了的时候，点击“运行”来观看小鸟走到猪那里。"
    C1_maze_loops:
      1:
        text: "电脑很擅长于重复的命令。对于人来说，如果不得不连续重复做一件事情非常非常多次时，会感到厌烦。但是电脑可以重复做一件事情上万次，甚至上亿次，不仅不会觉得厌烦，还会做的非常好。"
      2:
        text: "例如，如果我想给 Facebook 上的每个人发一封电子邮件，送上生日祝福，那我恐怕要花100多年写所有的邮件。但只用几行代码，我就能通过一个系统发电子邮件给Facebook 上的每个人，祝他们生日快乐。"
      3:
        text: "在这一关中，将小鸟带到那只猪那里。。。可以使用“重复”模块，而不是将三个向北的模块拖到工作区。将“重复”模块拖到工作区，并输入数字3。然后将“向北移动”模块拖到“重复”模块里，然后点击“运行”看看是不是正确。恭喜，你学会了！"
    C1_moveitmoveit_unplugged:
      1:
        text: "这一课叫做移动它，移动它。我们会一起写一个程序，让我们的朋友从罗盘仪到达笑脸目标那里。"
      2:
        text: "但是笑脸是朝下的，只有一个人知道怎样到达那里。让我们开始这个程序吧。"
      3:
        text: "一个程序是一些写出的代码，并能够在机器里运行的。我们大多数人认为程序是我们写给计算机的。实际上程序在其它方面也是非常有用的。你可以写一个自己的游戏，甚至写一个机器人来帮你做事情。"
    C1_going_places_safely:
      1:
        text: "我的名字是杰里迈亚。你好！我今年7岁了。我喜欢玩我妈妈的电脑，但是我总是要先获得允许才能玩。“妈妈，我可以去玩电脑吗？” “可以，宝贝！“”"
      2:
        text: "我爱妈妈的电脑，因为我能用它上网。网络就像你的邻居一样。你可以看一些很酷的地方。你也可以和家人和朋友聊天，也能学到很多新东西。"
      3:
        text: "昨天，我参观了一个我家附近的动物园。我看到了斑马宝宝。我给她照了相，还给她的条纹改了颜色，加上了顶帽子，然后把它加到我的奇怪动物收藏品里了。棒极了！以后，我要去一个很远很远的地方。我去过肯尼亚。那是一个非洲的国家，那里生活了很多斑马。"
      4:
        text: "有时候，我在互联网上和我认识的人说话，就像我住在另一个州的奶奶。你好，奶奶！她正在给我做曲奇饼，会在我生日的时候寄给我。”真好吃，我真希望互联网能够闻到味道！“我能和互联网上不同的人交谈，比如我表哥。但我只和我认识的人聊天。"
      5:
        text: "互联网让我最喜欢的一点是，我能玩到很有趣的游戏。得分！我也喜欢画画，并且创造一些新东西分享给我的朋友。太酷了！有时候，我会浏览网站学会一些新东西，但是我只会去那些我应该去的网站。哇，恐龙！"
      6:
        text: "互联网是很有趣的地方。但是就像当你穿过家附近的街道一样，在网络中也必须小心。必须记住这些规则。规则1：每次都要经过父母同意才能玩。规则2：只和你认识的人交谈。规则3：只去你应该去的网站。"
      7:
        text: "哇，太有趣了！该吃饭了，我要退出了。我下次再登录的时候，会再去四处浏览。"
    C1_pair_programming:
      1:
        text: "今天我们要学习结对编程。在结对编程中，两个人会一起工作。为什么要两个人一起用一台电脑呢？因为两个脑袋比一个要聪明。在结对编程中，你和你的伙伴会坐在一台电脑前，做同一个项目。"
      2:
        text: "在结对编程中，就像开车一样，一个人是司机，一个人是领航员。司机坐在电脑前，用键盘、鼠标、或者触摸屏来控制电脑。另一个人就是领航员。领航员帮助司机，他会回答司机的问题，指出哪些地方有潜在的问题或错误。"
      3:
        text: "沟通是结对编程成功的关键。没有冒犯，只有尊重，不要做一个指挥人的领航员，因为没有人愿意喜欢被瞎指挥。你和你的伙伴应该一直保持交谈。司机要解释他正在做什么。领航员要建议下一步应该做什么。"
      4:
        text: "领航员应该多思考全局，而司机要关注在细节上。这两个角色都很重要。结对编程一定是团队协作的。"
    C1_planting_seed:
      1:
        text: "这一课叫做种一棵种子，它能帮我们理解算法。算法是一种特殊的指令，用来解释如何有序的做一些事情。甚至想吃早餐，刷牙这样的日常生活也是可以分解成一些步骤的算法。"
      2:
        text: "计算机非常聪明，但你只有一步一步的精确告诉它们你想要做的，它们才能理解。算法的好处在于，即使是事先不明白的事情，如果你按照指令的顺序也能够做出来。这就象跟着一个菜谱做菜一样。"
      3:
        text: "今天，我们要用算法来种一些种子。将这些图片分开，来创造你自己的算法。从图片中选择种一个种子需要的步骤，然后将它们减下来，排成正确的顺序。"
      4:
        text: "现在，该试试你的算法是不是对的了。认真的按照算法一步一步的做。它们的顺序对吗？你有没有成功的跟着算法种完种子了？这就像用图片来编程序！"
      5:
        text: "当我们想要制作巧克力时，有许多大的步骤。而每一大步又可以分成很多更小的步骤，这些步骤又有不同的配方或者算法，它们会让巧克力有不同的味道。每个步骤都很重要，即使某些小步骤没有完成，可能剩下的事情都完成不了了。创建让其他人能够理解的算法真的很重要。这是为什么如果每一步都写下来了，不管谁来做，都能得到一样的结果。"
    C1_playlab_storytelling:
      1:
        text: "是时候发挥创意，并用你的编程技能来讲个故事了。你的故事里有一些演员，你能让这些演员互相交谈和动作。思考一下你想要讲一个什么样的故事吧。"
      2:
        text: "这只小猫一直害怕小狗，如果小猫了解到小狗其实想示好会怎样呢？“当运行时”模块是所有代码开始的地方。“移动”模块会让角色移动，而“说”模块会让角色说出任何你输入的内容。"
      3:
        text: "这是“当演员碰撞”模块，你能将它连接到别的模块上。"
      4:
        text: "我让那条狗过来，并且说“你好”。“啊！”，但是小猫吓了一跳，就跑掉了。如果有更多时间，这个故事会有一个快乐的结尾。结束！"
    C1_spelling_bee_intro:
      1:
        text: "这一关是拼字比赛。用拼图块来移动蜜蜂。当它移动时，会收集字母，拼出单词。"
      2:
        text: "看看你能否拼出给出的单词。但是让蜜蜂小心！移动的方向错了，就会添加不需要的字母了"
    C1_zuck_repeat_loop:
      1:
        text: "电脑很擅长于重复的命令。对于人来说，如果不得不连续重复做一件事情非常非常多次时，会感到厌烦。但是电脑可以重复做一件事情上万次，甚至上亿次，不仅不会觉得厌烦，还会做的非常好。"
      2:
        text: "例如，如果我想给 Facebook 上的每个人发一封电子邮件，送上生日祝福，那我恐怕要花100多年写所有的邮件。但只用几行代码，我就能通过一个系统发电子邮件给Facebook 上的每个人，祝他们生日快乐。"
      3:
        text: "在这个例子中，你的目标是将小鸟移动到那只猪那里。现在，为了更容易，我们会使用重复模块。虽然你可以用5次移动命令来让小鸟每次一步的移动到猪那里。但你也可以就告诉电脑移动1次，并且告诉它同样的事情要重复5次。"
      4:
        text: "要做到这一点，你需要拖动一个移动模块，然后将它放到重复模块中。然后你需要点击重复模块，告诉它要重复里面的模块多少次。"
      5:
        text: "还有一点，你应该将尽量多的模块放到重复模块中。在这个例子中，你可以告诉它重复往前移动、向左转5次。玩得开心！"
    C2_artist_intro:
      1:
        text: "如果没有计算机科学方面专家的帮助，甚至没有资格参加赛车比赛。因为汽车会产生非常多的数据，这需要人们能写出程序来分析它，从而明白怎么提高汽车的性能。"
      2:
        text: "接下来的关卡中，你会成为一个用铅笔画出不同形状的小艺术家。不管你的小艺术家走到哪里，他后面都会画出一条线。"
      3:
        text: "为了在画布上移动，你需要用到“向前移动”的模块。“向前移动”模块的意思是是向前移动100像素。当我们点击“运行”后会发生什么？小艺术家会往前移动一段距离，这段距离就是100像素。像素实际上是电脑屏幕上非常非常小的正方形。"
      4:
        text: "这一关中的另一个模块是向右转90度。当我们将这个模块拖出来时，表示需要小艺术家转一定的角度。你可以改变小艺术家需要转动的角度。在这里是转90度。"
      5:
        text: "这是转120度。技术，你可以点击数字后面的箭头来改变像素数量和度数。享受与小艺术家画画的乐趣吧！"
    C2_bee_conditionals:
      1:
        text: "这是个条件模块。它的意思是“如果”这里的花蜜或者蜂窝小于、等于或大于一个数字，“那么”就执行一些事情。"
      2:
        text: "如果我们不知道有几个花蜜或者蜂窝时，它非常有用。它能让我们明白这个问号的数量。"
      3:
        text: "在这个例子中，我们会说“如果”紫色的花有大于0个花蜜，就采集花蜜。然后告诉蜜蜂不停的采集花蜜，直到变为0。哇塞！"
    C2_binary_bracelets:
      1:
        text: "这是做二进制手链的课程。我们会从编码开始做一个能戴的手链，然后给朋友们看！"
      2:
        text: "二进制，是一种只用两个选项就表达出所有信息的方法。有时候，人们会用1和0来表示它。但你也可以将二进制表示为开/关，上/下，里/外，或者其它相反的东西。"
      3:
        text: "你好，我是奥利安，我在用Play-I机器人编程。所有电脑和机器人的大脑的最基础的原件都是很小的电路门。当门打开时，电流就能通过。门关上后，就不能通过了。"
      4:
        text: "一个二进制使用在机器人上的例子，就是机器人的眼睛。机器人的眼睛由LED灯泡组成，这些灯泡要么是开着的，要么是关着的。这就是一个二进制的系统，非此即彼。我们能用这些灯泡表达二进制的数字。如果我们有一组机器人，我们可以说第一个机器人是个位，第二个机器人是2位，第三个机器人是4位，第四个机器人是8位，以此类推。这就是一个二进制数字的表达。这些机器人会用它们的二进制眼睛来为你计数。"
    C2_conditionals_with_cards:
      1:
        text: "这一课叫做条件与扑克。每天你都会根据你看到的和听到的做出各种决定。"
      2:
        text: "我想走路去公园，但是首先我需要决定是否带伞。所以，我要看一眼窗外。如果有云，我就会带上伞。否则，我就会戴上太阳镜。我想我最好带上伞吧。我看到的和听到的决定了我会带什么去公园。"
      3:
        text: "条件也会用在游戏中。今天，我们要在一个扑克牌游戏中练习条件。在这个游戏中，我抽出的牌会决定我的朋友们做什么。如果我抽出的是7，每个人都要鼓掌欢呼，否则，每个人都要说”哦呜...“。让我们试试！”哦呜...“ ”耶！“"
      4:
        text: "我敢打赌，你能用条件做出有趣得多的游戏。试一试吧！条件让计算机看起来很聪明。使用了条件的计算机程序能响应用户，改变行动的方向。"
      5:
        text: "想想你喜欢的电子游戏。是不是有些玩法比另一些玩法能获得更多的分数？这是因为计算机在使用条件。这是电脑做出决定的方式。比如，如果你击中目标得10分，否则会失去3分。当你知道条件是如何工作的，你就能创造出各种令人兴奋的游戏了。"
    C2_artist_debugging:
      1:
        text: "在这儿，工作区里已经有些模块了。但是还有些地方不正确。"
      2:
        text: "让我们通过放慢速度，一步一步来看看它是怎么运行的来调试代码，找到错误。"
      3:
        text: "哦，问题在那里！猫的胡子是75像素长，不是25。"
    C2_bee_debugging:
      1:
        text: "你以前听说过调试程序吗？这是一种找到哪里不正确的办法。当你调试代码时，你会找到并修好错误。"
      2:
        text: "我们的工作区里已经有一些模块了。我们要用步进按钮来一步步运行这些模块，这样能看看这个是不是正确的解法，哪里需要修复。"
      3:
        text: "看起来这就是问题！我们还需要一个向前移动的模块。步进按钮通过找到哪里错了来帮助我们调试程序，所以我们才能修好它。"
    C2_digital_footprint:
      1:
        text: "抓住你头上的帽子，你的智慧会告诉你，你在哪里。再想想动物园。再和自己点头问好！当你上网的时候，要时刻保持清醒，并且知道怎样保证安全，怎样保护自己的隐私！低头看看你的脚趾头，想一想... 再从你的脚看到你的鼻子... 暂停... 想想网络！"
      2:
        text: "用心成长，让自己健康的成长，然后在情人节的时候，对某人说你是我的！当你在线的时候，也要用心，要明白什么是对的，永远是和蔼的，并且尊重你的朋友，在互联网上保持公正和友好。从低头看看你的脚趾头，想一想... 再从你的脚看到你的鼻子... 暂停... 想想网络！"
      3:
        text: "用你的装备来拥抱宠物，别让你的衣服被打湿，还要穿上你最喜欢的袖套，这会帮助你假装飞起来。当你上网的时候，也要用上你的装备。要歇一歇平衡时间。有时候要放下技术，找棵树爬一爬。低头看看你的脚趾头，想一想... 再从你的脚看到你的鼻子... 暂停... 想想网络！"
      4:
        text: "用你的肠胃来存放你的食物，听听它咆哮的声响，感觉苏打水里的气体。当上网的时候也要用你的肠胃，知道看某些信号，让它引导你的路，告诉你什么时候不行。低头看看你的脚趾头，想一想... 再从你的脚看到你的鼻子... 暂停... 想想网络！"
      5:
        text: "因此，用你的头脑来思考，感觉你的心，用手臂保持平衡，听听你的肠胃，上网。用你的腿来跑和踢，在蹦蹦跷上蹦跳，在街上跳舞，跳过你的臭袜子。当你上网的时候，要用你的腿站起来，提抗越过底线的霸道者，对大小动物都保持友好。"
      6:
        text: "低头看看你的脚趾头，暂停... 想一想... 再从你的脚看到你的鼻子... 暂停... 想想网络！用你的头脑来思考，感觉你的心，用手臂保持平衡，听听你的肠胃，用你的双腿站立。低头看看你的脚趾头，暂停... 想一想... 再从你的脚看到你的鼻子... 暂停... 想想网络！"
    C2_digital_footprint_v2:
      1:
        text: "每次你上网的时候，你都会留下一些足迹，它会被搜索，复制，分享，广播，而且是永久性的。你留下了什么样的数字足迹呢？你又想留下什么样的数字足迹呢？"
    C2_graph_paper:
      1:
        text: "这一课叫做“方格纸编程”，所学的都是关于算法的。今天我们要学习怎样用手画出箭头，创造出黑白方块的图像，然后互相展示用这种方法编写的程序。"
      2:
        text: "算法就是用来完成任务的一组指令。我们会遵循一组指令来制造碗。当你想让别人理解怎样做一件事情时，算法真的是非常有帮助。"
      3:
        text: "如果你要为计算机写一个算法，你必须将它细分为非常小的步骤。这样完成这一行，然后并下一行，然后是下一个，这样就做完了。"
      4:
        text: "我在我的工作中使用算法。如果我把所有的步骤都写下来了，我就能拼接出一样的图形，或者我也能教别人怎么做。将玻璃放到窑炉里，将它们融化到一起，按照接下来的指令来制造碗。算法会交给你怎样做完一件事情的路线图。"
    C2_artist_loops:
      1:
        text: "当我们给小艺术家编程时，我们会用“重复”模块来节省步骤。在工作区上已经有一些模块了，但这些只是最初的。"
      2:
        text: "将这些模块循环4次来画出整个正方形，我们刚刚将重复模块拖出来，并且往前移动和向右转的额模块放进去。当点击运行时，小艺术家就会重复这些步骤4次，这样整个正方形就画出来了。"
    C2_bee_loops:
      1:
        text: "循环就是一些活动的重复。我打开蜂箱，查看一片蜂窝，然后把它放回去，就这样我重复多次这样的活动。这样不停的循环，就是一样的活动做了多次。"
      2:
        text: "这是重复模块。无论你在重复模块里放了什么模块，它们都会被重复设定的次数。例如，在这一关中，与其将向前移动和收集花蜜的模块拖出来3次，不如只将它们拖出来1次，并放到循环模块中重复3次。这就变得更容易了！"
    C2_maze_intro:
      1:
        text: "通常情况下，我们使用文字来编程序。但在这里我们会使用可视化的模块化编程，这样就能通过拖拽它们来编程了。但实际上，你仍然在创造代码。开始吧，我们要用代码写个程序，它能帮助愤怒的小鸟走过迷宫，抓住那只偷了它的蛋的坏猪。"
      2:
        text: "模块化编程的界面分成三部分。左边小鸟的迷宫是程序运行的地方。迷宫下面是每一关的说明。中间是工具箱，里面的每个模块都是一个小鸟能够理解的命令。右边的白色区域叫做工作区，是我们编写程序的地方。"
      3:
        text: "如果我将移动模块拖到工作区并点击“运行“，会发生什么呢？小鸟在网格中往前移动了一格。如果我想让小鸟在移动后再做点什么呢？我可以往程序里加入另一个模块。"
      4:
        text: "我需要用”向右转“模块，我会将它拖到移动模块下，直到出现黄色的箭头。然后我会放下它，这两个模块就会粘到一起。当我再次点击“运行”，小鸟就会从上到下执行工作区里的所有命令。"
      5:
        text: "如果你想要删除模块，只需要把它从模块中移出来，然后拖到工具箱的垃圾桶里。在点击运行后，随时可以点击“重置”按钮来让小鸟返回起始点。现在，让我们抓住那些猪吧！"
    C2_paper_airplanes:
      1:
        text: "这一课叫做现实生活中的算法。算法描述了人们每天做的事情。饼干配方，鸟舍的建造方法都是日常生活中的算法。"
      2:
        text: "今天我们要为一架纸飞机创建并测试算法。但是首先，我们需要将这个大计划分成容易遵循的小步骤。为了制作一架纸飞机，我们需要决定需要什么步骤，这些步骤是什么顺序。"
      3:
        text: "创建算法的第一步是先将这些图剪下来。然后，你要选择其中制作纸飞机必须的6个步骤，然后将它们排列成正确的顺序。等它们都排列好以后，你要和另一个学生团队交换算法，来测试是否算法可以工作。一个好的算法对于做出最好的纸飞机是非常重要的。"
      4:
        text: "当我们想要制作巧克力时，有许多大的步骤。而每一大步又可以分成很多更小的步骤，这些步骤又有不同的配方或者算法，它们会让巧克力有不同的味道。每个步骤都很重要，即使某些小步骤没有完成，可能剩下的事情都完成不了了。创建让其他人能够理解的算法真的很重要。这是为什么如果每一步都写下来了，不管谁来做，都能得到一样的结果。"
    C2_playlab_createstory:
      1:
        image: 'notes/C2_playlab_createastory_1.png'
        text: "你已经能做一个动画或者故事了，它每次都能在运行它的时候做出一样的动作。但现在你能做一个可以互动的，能玩的游戏了。"
      2:
        image: 'notes/C2_playlab_createastory_2.png'
        text: "这里有些新模块可以试试，例如“当方向键”模块和“移动演员”模块。你能通过将这些模块放到一起来用方向键移动演员。还有些别的模块能在演员被点击或者碰撞时执行一些动作。试试它们，玩得愉快！"
    C2_relay_programming:
      1:
        text: "今天我们要进行编程接力。它是如何在压力下编程和调试错误的关键，这有时会发生在时间很紧迫或团队工作时。我们要用图纸编程来模拟写代码，然后用接力比赛来模拟截止时间。"
      2:
        text: "在接力编程中，团队会在比赛中完成一个图纸程序。你必须检查你队友的工作，如果有错误，要调试并修好它。然后加上你的箭头，然后跑回来拍一下你的队友。"
      3:
        text: "程序员经常使用调试来找到并修好他们算法和代码里的问题。有很多种调试的方法。其中最简单的一种是一步步的移动，直到找到哪里错了，并且修好它。"
      4:
        text: "现在，我在尝试在平衡木上后空翻，但每次都会掉下来。我一步步的检查了我的每个动作，然后意识到了错误在哪里了。我没有把手正确的放在平衡木上。然后，我把手放到新的位置上又试了一次，于是我成功了。我真的非常高兴我调试了后空翻！我们找出了问题！调试是找到并修复问题。干得好！"
    C2_zuck_repeat_loop:
      1:
        text: "电脑很擅长于重复的命令。对于人来说，如果不得不连续重复做一件事情非常非常多次时，会感到无聊。但是电脑可以重复做一件事情上万次，甚至上亿次，不仅不会觉得厌烦，还会做的非常好。"
      2:
        text: "因此，例如，如果我想给 Facebook 上的每个人发一封电子邮件，送上生日祝福，那我恐怕要花100多年写所有的邮件。但只用几行代码，我就能通过一个系统发电子邮件给Facebook 上的每个人，祝他们生日快乐。这就是循环的价值，是电脑能做得非常好的事情。"
      3:
        text: "在这个例子中，你的目标是将小鸟移动到那只猪那里。现在，为了更容易，我们会使用重复模块。虽然你可以用5次移动命令来让小鸟每次一步的移动到猪那里。"
      4:
        text: "但你也可以就告诉电脑移动1次，并且告诉它同样的事情要重复5次。因此，为了做到这一点，需要拖动“向前移动”模块，然后将它放到“重复”模块中。然后点击这个“重复”模块，告诉它你想要重重复的次数，也就是你想让小鸟前进多少步。"
      5:
        text: "还有一件事，就是你想放多少命令到“重复”模块里都可以。在这个例子中，你可以让它有“向前移动”和“向左转”，它都会做5次。做得好，玩的高兴！"
    C3_artist_functions:
      1:
        text: "在计算机编程中最棒的就是，一旦你教会了电脑怎么做某件事情，你就可以再次调用同样的功能。你要给它一个名字，然后就可以调用它了。这就像在扩展编程语言一样。"
      2:
        text: "在我们已经写好的程序中，我们学会了怎样通过移动和转弯4次来画一个正方形。我们可以将它变成一个函数，然后将它叫做“画一个正方形”，这样任何时候我们都可以用它了。我们简单的说“画一个正方形”，然后它就会被调用了。函数就会将正方形画好。这样，我们就给编程语言加了一个新的概念。"
    C3_artist_intro:
      1:
        text: "如果没有计算机科学方面专家的帮助，甚至没有资格参加赛车比赛。因为汽车会产生非常多的数据，这需要人们能写出程序来分析它，从而明白怎么提高汽车的性能。"
      2:
        text: "接下来的关卡中，你会成为一个用铅笔画出不同形状的小艺术家。不管你的小艺术家走到哪里，他后面都会画出一条线。"
      3:
        text: "为了在画布上移动，你需要用到“向前移动”的模块。“向前移动”模块的意思是是向前移动100像素。当我们点击“运行”后会发生什么？小艺术家会往前移动一段距离，这段距离就是100像素。像素实际上是电脑屏幕上非常非常小的正方形。"
      4:
        text: "这一关中的另一个模块是向右转90度。当我们将这个模块拖出来时，表示需要小艺术家转一定的角度。你可以改变小艺术家需要转动的角度。在这里是转90度。"
      5:
        text: "这是转120度。技术，你可以点击数字后面的箭头来改变像素数量和度数。享受与小艺术家画画的乐趣吧！"
    C3_artist_nested_loops:
      1:
        text: "当把一个循环放到另一个循环中时，我们将它叫做嵌套循环。例如，我们这里已经有了画一个边长100像素三角形的代码了，它会循环三次，每次画出三角形的一条边。"
      2:
        text: "但是我们想要画6个三角形。为了做到这一点，我们要将这个循环放到另一个重复模块中。太酷了！"
    C3_bee_conditionals:
      1:
        text: "这是个条件模块。它的意思是“如果”这里的花蜜或者蜂窝小于、等于或大于一个数字，“那么”就执行一些事情。"
      2:
        text: "如果我们不知道有几个花蜜或者蜂窝时，它非常有用。它能让我们明白这个问号的数量。"
      3:
        text: "在这个例子中，我们会说“如果”紫色的花有大于0个花蜜，就采集花蜜。然后告诉蜜蜂不停的采集花蜜，直到变为0。哇塞！"
    C3_bee_debugging:
      1:
        image: 'notes/C3_debugging_bee_1.png'
        text: "你以前听说过调试程序吗？这是一种找到哪里不正确的办法。当你调试代码时，你会找到并修好错误。"
      2:
        image: 'notes/C3_debugging_bee_2.png'
        text: "我们的工作区里已经有一些模块了。我们要用步进按钮来一步步运行这些模块，这样能看看这个是不是正确的解法，哪里需要修复。"
      3:
        image: 'notes/C3_debugging_bee_3.png'
        text: "看起来这就是问题！我们还需要一个向前移动的模块。步进按钮通过找到哪里错了来帮助我们调试程序，所以我们才能修好它。"
    C3_bee_functions:
      1:
        text: "在计算机科学中最重要的概念之一就是如何定义新的命令，即怎样把你自己的话加到计算机语言中。大多数计算机语言只有大约100个关键字或者命令。在这些模块之外定义你自己的命令模块是艺术也是魔术。"
      2:
        text: "我们一直在运动中做这件事。例如，在篮球中，你要先学会如何运球，如何上篮，如何反弹。一旦你熟练地学会了基本的移动，你会学会新的移动，并且将它们和已有的模块放到一起，比如捡球，滚动，传球，跑动等。你就可以去参加一些更复杂的比赛。一旦你学会了一种新的玩法，给它一个名字，这样你的团队就都会知道怎样做到它。"
      3:
        text: "同样，一旦你通过命令序列教会一台电脑执行一个动作，你可以自己给这个动作起一个名字，这样以后可以很容易地重复它。当你定义了自己的动作并且给了它一个名字，这就称做函数。现在我们将用这些函数来帮助蜜蜂。"
      4:
        text: "在此示例中，我们的函数叫做get 2 nectar，在绿色区域块里。我们可以通过在函数定义即灰色框处查找，来得知get 2 nectar是做什么的。如果我们看其定义，我们知道get 2 nectar将得到一滴花蜜然后再得到一滴。总是在灰色框里查找，这样你将会知道这些绿色函数块可以做什么。"
    C3_bee_nested_loops:
      1:
        text: "现在我们要对蜜蜂使用嵌套循环。这里已经有一些初始代码了，它告诉蜜蜂前进并采集花蜜三次，然后右转。让我们将整块代码嵌套在一个重复模块中，让它重复3次。完成！"
    C3_bounce:
      1:
        text: "现在你可以随意创造自己的弹球游戏了。你还可以将它共享给你的朋友！太酷了！"
      2:
        text: "若要开始，我们要将球拍控制和键盘上的方向键连接起来。"
      3:
        text: "我们可以将“向左移动”模块连接到“当左方向键按下时”模块上，然后将“向右移动”模块连接到“当右方向键按下时”模块上。试一试，马上你就能有自己的弹球游戏了！"
    C3_computational_thinking:
      1:
        text: "这节课是计算式思维技巧。有时候，学习新游戏是不是很难？首先，它确实难以理解，而且有时候没有人教你这些规则，所以你必须自己去弄清楚。"
      2:
        text: "好消息是，当你学会了一些思考的诀窍后，你能更容易的把事情搞清楚。这些技巧是用看问题和解决问题的独特方法。在这一课中，你会学会这4个技巧，并且通过和你的朋友一起练习来了解一个游戏的规则。"
      3:
        text: "当你将一个大难题分解成很多小块时，你就是在用你的大脑来“分解”难题。一旦你将一个大难题分解成了几个小难题，我们就可以开始下一个技巧——“模式匹配”。"
      4:
        text: "这时候就需要寻找事物之间的相似性。一旦我找到了一些事物的相同点，我就能明白什么是不同点。当我把不同点去掉的时候，就叫做“抽象”。"
      5:
        text: "当我找到了解决难题的步骤后，我要这些步骤按照一定的顺序组合起来，这叫做“算法”，这样任何人都能用我的方法来解决这个难题了。我们会通过这4步来在没有指导的情况下学会怎么玩这个游戏。在游戏结束的时候，你就能玩一些看起来这样的东西了！"
    C3_crowdsourcing:
      1:
        text: "这一课叫做众包。在这一课中，我们要用扑克牌来学习团队做事情是多么的简单，而不是依靠个人单打独斗。所以，找一些朋友来，一起做一些令人惊叹的事情。众包是通过一大堆人的帮助来更快的完成一件事。"
      2:
        text: "在计算机科学中，我们一直在使用众包。成千上万个业余爱好者和专家们将他们的电脑连接在一起，来从上亿万的信息中搜索。例如，搜索下一个梅森素数，甚至外星人的通信信号。"
      3:
        text: "你看到的电影中，每一秒都是由24张单独的图片组成的，也将它们称为帧。每一张图片都需要被创建出来，渲染，然后组合到一起。我和我的团队都是软件工程师。我们一起工作来编写一些软件能创造图片，就像你在屏幕上最终看到的图像一样。这些软件工具，能够让艺术家和其他开发人员通过团队合作和流程，制造出他们想在屏幕上播放的图像。"
      4:
        text: "例如，在《海底总动员》中，当柯路西，斯库特和他们朋友在东澳大利亚洋流里面穿梭时，你会看见在海龟背上和小鱼的两边都看见水流的倒影。所有这些，都是通过数学和我们的电脑程序来生成的。艺术家们用这些软件调整最终图像，让它看起来更美，更有趣。"
    C3_dice_race:
      1:
        text: "这课叫做掷骰子比赛。几乎每个人都喜欢玩电脑游戏。你有没有想过程序员是怎样将游戏的步骤编程一个程序的？创造电脑游戏以及解决问题的第一步，就是要思考和计划。"
      2:
        text: "解决问题时的思考会产生算法，也就是解决问题或者完成任务的一步一步的计划。在这一课中，你会给掷骰子游戏创建一个算法。然后你可以让你的朋友来试试你的计划，看看他们能否根据你的步骤来玩这个游戏。一旦程序员确定了步骤都是对的，就可以将算法转变为计算机能够理解的编程语言了。"
      3:
        text: "几乎我们每天做的每件事情都需要算法，也就是遵循一系列步骤，才能完成任务。想想上学前的准备工作，或者和你的朋友如何度过快乐的一天，或者吃点东西。为了完成任何任务，都需要将它变成小一些的步骤，有时这些步骤还必须有一定的顺序。"
      4:
        text: "考虑一下制作三明治的过程。首先无所谓它中间夹的是什么。在打开花生酱罐子之前，是没法涂酱的。即使是对于人们来说非常简单的，不需要思考的事情，我们也需要用算法和程序来告诉计算机怎么做。"
      5:
        text: "算法就是做一件事情背后所需要的想法，而程序就是实际上让计算机执行的指令，用来做到这件事情。算法只有在被翻译成了程序，计算机才能运行它。有时，将一个任务细分成算法的步骤是很困难的。但是这就像学习任何新技能一样，它会随着不断练习越来越简单。"
    C3_farmer_while:
      1:
        text: "“当”循环和你每天生活中做的事情很像。想象你在洗车的时候，你会不断的擦洗车辆，直到它变干净了。“当”它不干净时，就接着擦。你会不停的评估它。"
      2:
        text: "我们有一个新的循环来帮助你的农夫摆脱困境。这叫做“当”模块。其实它非常简单。当上面的语句结果成立时（为“真”），就做一些事情。比如，当这里有一堆东西时，挪掉一部分。继续和农夫试试它吧。"
    C3_functional_suncatchers:
      1:
        image: 'notes/C3_functional_suncatchers_1.png'
        text: "这一课叫做函数化的吊饰。你将会通过函数来创建漂亮的吊饰。这里有创建吊饰的步骤，有些步骤可能需要重复很多次。"
      2:
        image: 'notes/C3_functional_suncatchers_2.png'
        text: "简化创建过程的第一步，是要找出哪些步骤会重复多次。我们可以把这些步骤组合起来放到一个叫做函数的部分里。"
      3:
        image: 'notes/C3_functional_suncatchers_3.png'
        text: "如果要创建一个漂亮的吊饰，不能仅仅是完全精确一样的步骤。有时候，我们需要创造新的改变珠子的颜色。通过使用不同的颜色，我们可以让每个吊饰都独一无二。"
      4:
        image: 'notes/C3_functional_suncatchers_4.png'
        text: "当你学会使用叫做“珠子”的变量时，你就能让你的吊饰独一无二了。变量表示一个可以改变的东西，每个变量都有自己的名字。通过使用函数和变量，尽情发挥、做出美丽的吊饰吧！"
    C3_internet:
      1:
        text: "这节课是关于互联网的。互联网是一个非常繁忙的地方，就像繁忙的马路一样。上面的消息就像汽车一样，嗡嗡的跑向它们的目的地。消息在互联网上传送得非常快。"
      2:
        text: "表演互联网的工作，会帮助你理解当你在使用互联网时，究竟发生了什么。你会学到消息是怎样从你的电脑到你喜爱的网站的，或者是怎么从你朋友那里到电子信箱的。这就像当你认识路并能看懂信号灯后，在繁忙的马路上驾驶一样简单。在互联网上浏览也一样，当你理解了后面发生了什么，会发现也不是那么复杂。"
      3:
        text: "在互联网上发送消息，有点像通过邮件发送消息，虽然还是有一点不同。我现在在google.com。这个网站的网络协议地址（也叫做IP地址）是一个数字。你可以想象这个地址就像是邮件中的回信地址一样。让我们想象，我想要通过邮件发一个消息给办公室那边的人。你能看到门上的链接和网络地址吗？我已经写好了消息，点击发送。"
      4:
        text: "和邮政系统不同的是，首先发生的事情是互联网会将消息分成更小的部分，以便它能更容易发送出去。这些小的部分叫做数据包。这个消息的数据包会一个一个的发到目的地。这些数据包都会被排成正确的顺序，以便接收者能够正确的读出消息。当然，我们还有很多很多关于互联网如何工作的知识要学，但这是一个很好的开始。你已经在成为一个机智的互联网用户的路上了！别忘了告诉你的家人和朋友，你学到了什么！"
      5:
        text: "我是阿曼达·坎普，我是谷歌的软件工程师。我在一个用来存放简介和联系人的后台服务器团队工作。在我的工作中，我们非常仔细的思考如何让联系人数据能被发送到其它设备，例如手机。大多数人都有很多联系人，你可能会说，有1000个联系人，但我们没法通过一条消息就把它们发送到你的手机上，因为这实在是太大了。和互联网将消息拆分成数据包一样，我们用叫做“分页”的概念来每次发送100个联系人，等待手机响应以后，再发送下100个。"
      6:
        text: "关于软件最令人激动的事情是它能够影响整个世界。我在19岁的时候第一次编写了程序。我想我那时候已经是大学二年级或者三年级了。我记得我写的第一个程序能把摄氏度转变成华氏度。我喜欢编程序，因为我希望能帮到别人。我能在谷歌写程序，帮助到全世界的人，这真令人难以置信和兴奋。"
    C3_maze_conditionals:
      1:
        text: "人们每天都要做决定。例如，在出门前，你会用一个“如果”判断语句来说，如果下雨，我就需要穿上戴帽子的夹克。电脑令人惊奇的地方是，一旦你确定了这类判断语句，它们能用难以置信的速度可靠的执行下去。电脑程序，只需要一点点数学和一些“如果”判断语句就能帮忙做决定了。"
      2:
        text: "“如果”模块帮助僵尸做决定。它会检查一些事情。比如，让我们使用模块来制造如果左边有路，放一个向左转的模块进去。这就告诉了僵尸检查它的周围，如果左边右路，就转弯。"
      3:
        text: "然后我们用重复模块里面的向前移动模块来让它在直路上一直往前走。当有转弯的时候，“如果”模块会告诉它向左转。你会看见如果照这么做——能向左转就向左转，否则就向前走，就能到达目的地了。"
      4:
        text: "这是使用“如果”语句的一个例子，“如果”语句是计算机编程里的一个非常基本的概念。我学会的第一件事是如何写一个井字游戏的程序。我通过“如果”语句来做到，如果另一个人要赢了，就往那里下子阻止他。祝你学习“如果”时找到乐趣，这是一个关键的概念。"
    C3_maze_level_4:
      1:
        text: "在这个例子中，你的目标是让僵尸到达太阳花那里。我们可以用5个向前移动的模块，也可以告诉计算机往前移动并用重复模块重复5次。"
      2:
        text: "这会节约时间，并更容易。要使用它，只用将向前移动模块放到重复模块里。点击运行，僵尸就会向前移动5次，到达美味的太阳花了。"
    C3_playlab_create_game:
      1:
        text: "你已经能做一个动画或者故事了，它每次都能在运行它的时候做出一样的动作。但现在你能做一个可以互动的，能玩的游戏了。"
      2:
        text: "这里有些新模块可以试试，例如“当方向键”模块和“移动演员”模块。你能通过将这些模块放到一起来用方向键移动演员。还有些别的模块能在演员被点击或者碰撞时执行一些动作。试试它们，玩得愉快！"
    C3_songwriting_with_parameters:
      1:
        text: "这一课我们要写歌。音乐非常像电脑程序。这些写好的注释和词语能够帮助歌手精确的明白应该做什么。音乐的有些部分还被用到了多次。"
      2:
        text: "我们管这部分叫做副歌。在计算机程序中，能够被多次调用的部分叫做函数。当你读歌词时，你看到副歌这个词语时，会将它唱出来吗？不会，你会从歌词开始的地方找到哪里被标记成了副歌。"
      3:
        text: "在这一课中，你会学到一首儿歌，叫做小兔子拂拂。这首歌有一段副歌会被唱好几遍。函数就是一段会用到好几遍的代码。它让编程更容易，更有效率，这样就不用将你的函数一遍一遍重写出来了。只需要写一次！"
    C4_bee_conditional:
      1:
        text: "这是条件模块。它的意思是，如果在一朵花或者蜂窝这里，就做某些事情。这在当我们不知道有多少蜂蜜或花蜜时非常有用，因为有些地方只有问号。"
      2:
        text: "在这个例子中，我们会说，如果是一朵花，就采集所有花蜜。然后用另一个说，如果是蜂窝就酿蜂蜜。哒哒~~~"
    C4_conditionals:
      1:
        text: "我们有个新的叫做“如果/否则”的模块了。它像你用过的如果模块一样，是个条件语句。但是它下面多了个叫做否则的部分。这个如果/否则模块会让蜜蜂在两组行动中做出决定。如果蜜蜂在花这里，就执行在第一部分中的行动，如果在这里不是花，蜜蜂就要执行放在否则部分里的另一组行动。"
      2:
        text: "如果模块是电脑如何能做决定的语句。人们给电脑设定好，如果电脑处于某种状态下就做这个。否则，就是另一种情况，就做另一个。上面我们的如果/否则模块说，如果在花上。但上面的模块也可以说一些其它事情，比如如果花蜜等于2，或者如果前面有路，我们的模块就会用同样的方式行动。如果最上面语句的结果为真，就执行第一部分行动。但是如果条件为假，就执行第二部分的行动。"
    C4_for_loops:
      1:
        text: "当你用重复模块来循环你的代码时，计算机如何知道是否重复了足够多的次数了呢？重复模块实际上隐藏了一个更复杂的部分，叫做计数循环。它会从一个起始数值，每次增加一定的值，直到结束的数值。"
      2:
        text: "例如，一个循环3次的模块实际上是从1增加到3，每次加1。每次它数数时，就会运行循环里面的代码。计数循环通过一个计数器变量来知道它应该循环多少次。这个变量会在循环开始的时候设置为起始值，然后按照增量值，每次增加，直到它大于结束值。这时，循环就停止了。"
      3:
        text: "和重复循环相比，计数循环的好处在于你能看到计数器变量，并能在循环中使用它。例如，如果你有一排花，第一朵有一个花蜜，第二朵有两个花蜜，第三朵有三个。我可以用计数循环来告诉蜜蜂每次收集计数器变量这么多花蜜。它就会在第一朵收集一个，第二朵两个，第三朵三个。"
      4:
        text: "而且，在计数循环中，你也可以不让计数器每次加一。你也许可以让它每次加二，加三，甚至每次都变化它。"
    C4_for_loops_bee:
      1:
        text: "当你用重复模块来循环你的代码时，计算机如何知道是否重复了足够多的次数了呢？重复模块实际上隐藏了一个更复杂的部分，叫做计数循环。它会从一个起始数值，每次增加一定的值，直到结束的数值。"
      2:
        text: "例如，一个循环3次的模块实际上是从1增加到3，每次加1。每次它数数时，就会运行循环里面的代码。计数循环通过一个计数器变量来知道它应该循环多少次。这个变量会在循环开始的时候设置为起始值，然后按照增量值，每次增加，直到它大于结束值。这时，循环就停止了。"
      3:
        text: "和重复循环相比，计数循环的好处在于你能看到计数器变量，并能在循环中使用它。例如，如果你有一排花，第一朵有一个花蜜，第二朵有两个花蜜，第三朵有三个。我可以用计数循环来告诉蜜蜂每次收集计数器变量这么多花蜜。它就会在第一朵收集一个，第二朵两个，第三朵三个。"
      4:
        text: "而且，在计数循环中，你也可以不让计数器每次加一。你也许可以让它每次加二，加三，甚至每次都变化它。"
    C4_for_loops_no_bee:
      1:
        text: "当你用重复模块来循环你的代码时，计算机如何知道是否重复了足够多的次数了呢？重复模块实际上隐藏了一个更复杂的部分，叫做计数循环。它会从一个起始数值，每次增加一定的值，直到结束的数值。"
      2:
        text: "例如，一个重复3次的模块从1增加到3，每次增加1。每次它计数时，就会运行循环里面的代码。这个计数循环会通过一个计数器变量来知道要运行多少次，这个值会在循环运行前设置为初始值，并在每次运行时增加增量值。一旦计数器变量的值大于结束值，和重复循环相比，计数循环的好处在于你能看到计数器变量，并能在循环中使用它。"
    C4_function_create:
      1:
        text: "现在你已经能编辑函数模块了。是时候从头创建一个新函数模块了。这真的很简单。你会看到工具箱里有个分类叫做函数。如果你点击这里，就能看到一个橙色的按钮叫做创建函数。点击这个，会出来函数编辑对话框，它和你编辑函数用过的对话框是同样的。"
      2:
        text: "像以前一样，一开始要命名你的函数，然后写一个描述来说明函数是做什么用的。例如，它是用来画正方形，还是画三角形，然后从工具箱里拖出模块，放到下面白色的区域里。计数将模块拖到函数绿色环绕的部分里。"
      3:
        text: "一旦完成后，点击保存并退出。这会返回这一关的主工作区。你创建的新函数会在工具箱的函数分类里显示为一个绿色的模块。将它拖放到主工作区，可以像其它模块一样使用它来解决问题。"
    C4_function_edit:
      1:
        text: "在计算机编程中最棒的就是，一旦你教会了电脑怎么做某件事情，你就可以再次调用同样的功能。你要给它一个名字，然后就可以调用它了。这就像在扩展编程语言一样。"
      2:
        text: "在我们已经写好的程序中，我们学会了怎样通过移动和转弯4次来画一个正方形。我们可以将它变成一个函数，然后将它叫做“画一个正方形”，这样任何时候我们都可以用它了。我们简单的说“画一个正方形”，然后它就会被调用了。函数就会将正方形画好。这样，我们就给编程语言加了一个新的概念。"
      3:
        text: "在这一关中，我们已经创建了一个“画正方形”的函数。你会在工具箱里看见它，是一个绿色模块。你需要做的是，将你以前写的画一个正方形的代码写到这个函数里。为了做到这一点，点击“画一个正方形”模块的编辑按钮。这会打开函数编辑器。函数编辑器有3个部分。一个是命名函数的地方，它会在函数的绿色模块里显示。然后写一个简短的描述，说明函数是做什么的。"
      4:
        text: "这次，应该是“画一个正方形”。底下白色的区域是工作区，和你用过的工作区是类似的。从工具箱中拖放模块到这个工作区中。记住将创建一个正方形的模块放到这个函数的绿色环绕的模块中。一旦完成后，点击保存并退出。这会返回这一关的主工作区。现在，你可以像其它模块一样使用它来解决问题。"
    C4_function_parameters:
      1:
        text: "这个函数画了一个边长50像素的正方形。这非常好，但是如果我们想画一个边长50像素的正方形，再画一个边长100像素的呢？我们不应该需要创建两个单独的函数来做几乎一样的事情。相反，我们能用同一个函数，再加上参数来实现。"
      2:
        text: "参数允许我们将数值传到一个函数中，这个值会做为一个变量在函数中被使用。让我们试试加一个参数叫做“长度”到这个函数中，从而我们能用它来创造不同大小的正方形。在函数编辑器中，你可以像以前一样编辑函数名称和描述，但现在你也可以增加一个参数了。在空间里写下你的参数的名字，然后点击添加参数。这会创建一个红色模块，他的名字就是你刚刚写的参数名字。现在我们能将向前移动100的模块的值变为参数“长度”了，这样它就能按照“长度”移动了。"
      3:
        text: "点击保存并关闭，然后从工具箱的函数分类中拖出你的新“创建一个正方形”模块。你会注意到这里长度旁边有一个空白区域，因为这个函数想知道这个“长度”参数的值应该是多少。从数学分类中拖动一个数字模块，放到这里。看看你会怎样一次又一次的给这个函数赋予不同的长度来创造不同大小的正方形？自己试试吧！"
    C4_intro:
      1:
        text: "通常情况下，我们使用文字来编程序。但在这里我们会使用可视化的模块化编程，这样就能通过拖拽它们来编程了。但实际上，你仍然在创造代码。开始吧，我们要用代码写个程序，它能帮助愤怒的小鸟走过迷宫，抓住那只偷了它的蛋的坏猪。"
      2:
        text: "模块化编程的界面分成三部分。左边小鸟的迷宫是程序运行的地方。迷宫下面是每一关的说明。中间是工具箱，里面的每个模块都是一个小鸟能够理解的命令。右边的白色区域叫做工作区，是我们编写程序的地方。"
      3:
        text: "如果我将移动模块拖到工作区并点击“运行“，会发生什么呢？小鸟在网格中往前移动了一格。如果我想让小鸟在移动后再做点什么呢？我可以往程序里加入另一个模块。"
      4:
        text: "我需要用”向右转“模块，我会将它拖到移动模块下，直到出现黄色的箭头。然后我会放下它，这两个模块就会粘到一起。当我再次点击“运行”，小鸟就会从上到下执行工作区里的所有命令。"
      5:
        text: "如果你想要删除模块，只需要把它从模块中移出来，然后拖到工具箱的垃圾桶里。在点击运行后，随时可以点击“重置”按钮来让小鸟返回起始点。现在，让我们抓住那些猪吧！"
    C4_math_artist:
      1:
        text: "如果我想画一个长方形，它有50像素高，而宽度是高度的两倍。我应该怎么编写程序来让计算机做到这一点？好吧，我可以告诉小艺术家，往上走50，向右转，然后走过100，并将整件事情做两次。但是我在为计算机做这个数学题。"
      2:
        text: "在你头脑中用50乘以2也许不难，但是计算机真的很擅长做这样的数学题，因此我们应该尽量让计算机来做这些运算。如果我就用一个叫做高度的变量，然后我能很容易的将它改成50，并且将我的算法改为，告诉小艺术家往上走高度，向右转，然后走高度的2倍。这也会给我们一个宽度是高度的两倍的长方形。"
    C4_unplugged_algorithms:
      1:
        text: "这一个叫做七巧板算法。七巧板是一个有七块板子的谜题，它需要用这7块板子放到一起拼出各种形状。你需要用算法来给你的伙伴解释，怎样将这些难题都拼起来。"
      2:
        text: "一个算法就是一系列的步骤，这能用来完成一个任务。我们每天都在使用它，例如购物清单，或是菜谱。如果你让一个算法保持简单，这样就会有很多方法来解释它，并且有可能别人无法按照算法精确做到你想的那样。如果你想要每个人都能精确做到你想的事情，那么你的算法需要很详细，很具体。"
      3:
        text: "今天我用算法来完成一幅画。我会试着涂一些狼，但我其实不是一流的画家。幸运的是，能够通过数字来画画。这里有40种颜色，还有些小字母和数字告诉你哪种颜色用来画哪个部分。按照数字来涂颜色，让我精确的明白了哪个颜色应该被涂到哪里。"
      4:
        text: "这非常具体，所以我能按照指示来做，涂的画会看起来很棒。这是个非常好的算法。如果指令不够详细，我的狼看起来就不会很好。当你真的想让一些事情精确的按照计划好的那样发生，最好是及其的精确。"
    C4_unplugged_binary:
      1:
        text: "每个团队里有一个人指示，他会拿着这张纸，必须指明他们的“关闭”符号是什么样的，“打开”符号是什么样的。在二进制中，这就像一个字母表里只有两个字母。就像整个字母表里只有A和B，但你已经明白了一个0和一个1。"
      2:
        text: "使用二进制最常用的例子就是在“如果”语句中。它是编程里的经典。程序会一直往前运行，它会说，如果某件事情为真，那么做这个。否则，它不为真，就做别的。如果你想做一些复杂的事情要怎样。除了如果语句，你想在计算机里使用图片或者声音。"
      3:
        text: "计算机只知道二进制，不知道图片，它不是二进制的，这里面没有1和0。那么你应该怎么办？这里有个例子：你有一张美丽的图片。现在这个图片实际上是某种形式的信息。所有信息都能被编码为二进制或别的，你刚刚已经弄清楚怎么做了。"
      4:
        text: "想象一下，我们将一个网格放到修毛上面，对于每个方格，我们要决定这里面是黑色多，还是白色多。我们要按照这种方法来涂色。现在，网格的每个单元格都是黑的或者白的了，然后我们说黑找那个方形就是0（二进制数字的0），白方块是1，另一个二进制的数字。你已经留下了很多1和0了。这就是你怎样用二进制表达这幅画。"
    C4_unplugged_forloops:
      1:
        text: "这一课叫做“循环”的乐趣。在本课中，我们会用一串数字来玩骰子游戏。每个玩家将掷三次骰子来确定起始值、 终止值和间隔值。在每一轮中，我们从起始值开始循环，并且每次向前走间隔值那么多步。当我们到达停止值时，就停止循环。得分最高的人获胜！"
      2:
        text: "计数循环可以在很多场合的派上用途。如果你是要成为一位气象学家，你总是会用上计数循环。你好，我是贝琪。我在恒力可再生能源当一名风气象学家。我为公司位于格尔地区哥伦比亚河的风力发电厂预测风速。"
      3:
        text: "我们试图理解有多少风量要经过那里，以便知道会输出多少电能。我们把这些信息交给实时能源交易商。他们根据我们告诉他们的数字来交易电能，以确保你的电灯接入的电网平衡。并且我们能让风力发电厂的电能输出量最大化。"
      4:
        text: "我们在恒力可再生能源位于波特兰的国家控制中心，它的所有信息都来源于全国各地的风力发电站。当今，即使性能最好的计算机业不能模拟各处的大气气象。在电脑的预测模型里，有我们称之为网格的东西。网格里的每个点是一个经纬度的位置。我们必须按照物理学计算，并算出风速，温度，压力之类的东西。"
      5:
        text: "因为这是一个相当大的网格，里面有非常多的点，我们会进行万亿次循环来计算这些值。这些值的计算都需要计数循环。这就是一个计数循环的例子。当你试图预测风时，会有很多不同的参数会影响它。人类基本上是不可能坐下来算出这些数据的。有如此多的不同因素影响了风的产生和发展，所以我们必须有一个计算机模型才能预测它。"
    C4_unplugged_madlibs:
      1:
        text: "这节课，我们将玩一些有可以填写的空白的故事的游戏。你有一个模板，你可以填写它们来创造一些相似但有非常有趣的差异的故事。"
      2:
        text: "在这课中，我们也会从两个我们已经创建的故事中学到如何构造一个抽象的模板。抽象是一门删除不同点和细节的艺术，从而能找到一个解决方案能够用来解决许多不同的问题。它在计算机科学中非常有用，因为它能让我们创建函数来用在不同的情况下。"
    C4_unplugged_parameters:
      1:
        text: "这一课叫做用参数作曲。我们要在这里写一些歌。有时，副歌在每次唱的时候只有一点点不同。你记得《老迈克唐纳有个农场》这首歌吗？每个动物都有个稍微有点不同的副歌部分。在那个农场上，他有一头奶牛，咿呀咿呀呦。每个副歌中的不同之处，可以通过我们称作参数的部分来表达。"
      2:
        text: "有时候，函数需要参数。而参数是额外需要传递到函数中的信息，从而能够为了特定的需求定制这个函数。当你和朋友做圣代冰淇淋时，你会用和计算机程序中参数类似的流程。"
      3:
        text: "每个香草冰淇淋圣代的基本组成基本都是一样的，但当你让朋友放上两种自己喜欢的点缀时，你会看到很多不同的组合。冰淇淋的点缀就像是函数的名字，但是点缀的类型就是参数。函数和参数在一起成为了非常好的计算机程序和非常好的圣代。"
    C4_unplugged_variables:
      1:
        text: "这一课叫做信封中的变量。我们需要学习在缺少信息的情况下，如何构造句子。我们大部分人已经熟悉了如何填空。我们会在家庭作业中将自己的姓名写到空白处。有时，我们需要填写不止一处空白处，这种情况下，我们会给每个空白一个标签，这样我们就知道每处空白应该填写什么内容了。"
      2:
        text: "变量是一个可变的信息的占位符。通过将变量用到缺失信息处，我们能够继续工作，然后让别人晚些时候再来填写缺失的信息。在软件中，我们大量使用了变量。我们将变量作为名字、电子邮件地址、甚至用户名的占位符。这样，我们可以让程序知道当用户填写了这些信息后，它们应该出现在何处。我们一直在工作中使用变量。"
      3:
        text: "任何时候，你需要储存一个信息过会儿再用时，就要用到变量。比如果，我们需要统计用户发推特的次数。每次用户发了推特，我们会将这个次数加1，每次用户删除一条推特，我们会将这个数字减1。任何时候，我们需要知道用户发了多少条推特时，只用看看这个变量就可以了。"
    C4_variables_artist:
      1:
        text: "变量是一个你能存放数值的容器。当你在算法中用到变量时，它会打开容器，看看里面的数值。这让你能写出聪明的算法，会根据存在变量里的值，有不同的行为。"
      2:
        text: "例如，如果你想写个算法说：“生日快乐，你10岁了！”给我的小弟。这非常棒，但当我明年再使用它时，我希望它说：“生日快乐，你11岁了！”我会创建一个叫做“年龄”的变量来存放我弟弟的年龄，然后写出我的算法：“生日快乐，你‘年龄’岁了！”因为变量能够改变，每年我会将变量“年龄”赋值为“年龄”加1。"
      3:
        text: "在这一关中，我们会用变量来设置小艺术家画线的长度。随后在我们的代码里，向前移动模块将检查长度变量来看看里面设置为什么数值了。"
    C4_variables_playlab:
      1:
        text: "变量是一个你能存放数值的容器。当你在算法中用到变量时，它会打开容器，看看里面的数值。这让你能写出聪明的算法，会根据存在变量里的值，有不同的行为。"
      2:
        text: "现在，你会试试游戏实验室里的不同游戏。为了改变游戏，你可以给速度、高度、分数这些变量不同的值。你不需要改变游戏的算法来改变整个游戏，仅仅通过修改变量就足够了。"
      3:
        text: "在我为kindle和x-ray for books功能开发时，我们用很多不同的方式使用了变量。一种方法是你能用变量来储存书的页码。用户可以增加或者减小每页的字体大小。根据字体的大小，整本书的页数就会发生变量，我们能通过改变在变量中储存的页数来改变它。"
    infinity_playlab_events:
      1:
        text: "现在，我们会学习到所有游戏程序员每天都要用到的一些东西。它们被称为事件。事件告诉你的程序来倾听某件事情什么时候发生。然后，当它发生时，会执行一些动作。事件的一些例子包括，鼠标点击，方向键按钮，或者点击了屏幕。"
      2:
        text: "这里，我们要让大白当用户使用上下方向键，或者上下按钮时，往上移动来碰到阿宽，然后往下移动来碰到长发公主。我们会用“当上方向键按下时”模块，然后将演员往上移动的模块加到里面。这样，当玩家按上方向键时，所有加到“当上方向键按下时”的模块都会被运行。我们会做东阳的事情让大白能够往下移动。一步步的，你的游戏会变得更具互动性。"
    infinity_playlab_intro:
      1:
        text: "那么，你是哪个年级的？二年级。十年级。一年级。我在八年级的时候学习的编程。我六年级的时候有了自己的第一台计算机。让我感到激动的是，我能解决人们的问题。你可以表达自己，为一个想法做一些事情。"
      2:
        text: "计算机科学是接下来二三十年，大学生和专业人士要做的很多事情的基础。我喜欢编程序，因为我喜欢帮助别人。我有机会创造一些东西，能让人们的生活变得更容易。我想这是最接近超能力的事情。现在开始做是最重要的部分。我是一个初学者，我希望你也和我一起学习。"
      3:
        text: "我是约翰·维奇。我是宝开游戏公司的联合创始人之一。我们制作了像植物大战僵尸，宝石迷阵，幻幻球这样的游戏。关于游戏，不在于你能写出多好的代码，不在于你的艺术水平如何，而是你怎样让它被感到有趣，有多有趣。唯一能够检验的办法，就是多尝试，多做。通过多学习，多调整，提高你自己制作游戏的技能。"
      4:
        text: "你有喜欢的电子游戏吗？好吧，我们会用游戏实验室，在创造游戏的路上往前一步。一个好游戏需要一个故事，每个故事都需要演员。演员会做些像说话、移动、相互交互这样的事情。也许还需要一些游戏规则来得分。今天，我们会和迪斯尼的演员们，安娜、艾莎、阿宽、大白、长发公主，来一样一样的学到怎样做到这些事情。我们会从头创造一个游戏，你可以将它共享出来，在手机上玩。"
      5:
        text: "你的屏幕被分成了三个主要的部分。左边是游戏区，是你的程序运行的地方。每一关的说明都是写在下面。中间是工具箱，里面的每个模块都是一段代码。右边的白色区域叫做工作区，是我们编写程序的地方。"
      6:
        text: "在开始的时候，你需要将你的模块连接到橙色的“当运行时”模块上。通过拖出模块并在看到黄色的轮廓线后，可以将模块连接到一起，这样也可以将多个模块逐步连接起来。在第一关中，阿宽是演员1，大白是演员2。我们需要通过拖动“向右移动”模块，然后将它连接到“当运行时”模块上，这样来让阿宽移动到大白那里。一旦你的模块都放对了，点击\"运行\"来看看你写好的程序。"
      7:
        text: "开始吧，最后你会用这些令人惊奇的演员们创造出自己的游戏，他们能够互动，得分，扔小机器人、樱桃、平底锅、火花和冰...，有时候还会消失。这都由你决定！"
    infinity_playlab_repeat_forever:
      1:
        text: "你能想象如果永远重复某些事情吗？希望你永远不需要，因为电脑真的非常擅长重复事情。这是“一直重复”模块。任何在模块你的东西都会在游戏中永远重复下去。"
      2:
        text: "因此，如果我们想让演员在玩家不用做任何事情的情况下就重复一些事情，我们需要将那些模块放到一直重复模块中。在这一关中，我们的目标是帮安娜一直上下走动。学习了重复命令是如何工作后，你会在以后编写自己的游戏时节约大量的时间。"
    tutorial_puzzle_challenge:
      1:
        text: "奥莉维亚，你长大后想干什么？当宇航员。你知道电脑程序是什么吗？嗯，不知道。等等，是什么？我真的不确定怎么解释，但电脑程序挺简单的。它就是一组像食谱一样的指令，你只要一步步的遵循它们，就能得到你想要的结果。"
      2:
        text: "用这个下拉框能改变像素的数量，线段的长度。开始说是多长来着？你能在运行按钮下再看到指示。在这里，我用了向前移动的模块，然后选择了100像素。我能通过将一个模块拖到工具箱或垃圾箱里来删除它。让我们把它放回来。"
      3:
        text: "点击“运行”来运行代码。好吧，没有奏效！我会点击重置按钮，然后找找哪里错了。只要你愿意，就可以尝试同一关很多次，也可以跳过某一关，以后再回来看看。一定要尽最大的努力，不要放弃。让我们添加另一个向前移动的模块。还是不行。我能将一个模块放到其他模块之间。"
      4:
        text: "让我们拖出一个转向模块，然后将它放到两个向前移动模块之间。向左转45度。让我们再运行一次。重置，运行，棒极了！这是另一关。有时候这里面在开始前会有些代码。这次，我需要添加合适的长度和度数。"
      5:
        text: "有时候你也许会不小心删除了开始的代码。那该怎么办呢？你可以点击“清除”按钮，然后重新开始。我要将这个数字模块拖到不同的像素区域里。选择100像素，45度，再选择100像素。棒极了！这是代码工作室的蜜蜂。我需要将蜜蜂挪到每朵花那里，然后收集花蜜。"
      6:
        text: "第一朵花有三个模块那么远，所以我需要三个向前移动模块。1，2，3。那么，采集花蜜，然后另一个采集花蜜。嗯，没有做到。。。我想在采集花蜜之间放另一个向前移动模块，然后再运行一次。耶，成功了！你刚刚学到了怎样使用代码工作室的小艺术家和蜜蜂的关卡。祝你在代码工作室关卡的挑战中有好运。"
    unplug1:
      1:
        text: "奥莉维亚，你长大后想干什么？当宇航员。你知道电脑程序是什么吗？嗯，不知道。等等，是什么？我真的不确定怎么解释，但电脑程序挺简单的。它就是一组像食谱一样的指令，你只要一步步的遵循它们，就能得到你想要的结果。"
      2:
        text: "计算机科学是影响世界的一种方式。它在音乐电视中，在游戏中，能检测两人是否有关联。找到你认识的人的朋友。你能做到所有这类疯狂的事情，来节约你生命的时间。我想，你必须开车。这对于我来说就像是画笔。我想最棒的程序和最伟大的艺术之间没什么不同。"
      3:
        text: "当我最后学到了一点编程后，就像白色的墙变成了好多扇门。当你打开它们，你又会发现它们后面又是一个有很多扇门的通道。编程很有趣，而且很容易。你可以做到头脑里想到的任何事情。最终，当你打开足够多的门以后，光就能进来了。对于我来说，完成一个程序就像给一个建筑物填满光一样。所有角落都被照亮了。你能接触和交流的人的数量是以前从来没有过的。"
      4:
        text: "这个系列的第一课是关于计算机科学是什么，计算机科学做什么，和怎样你才能对自己使用的技术更负责。虽然这是非常重要的一课，但没有很多文字。结束的时候，你能够得到你的名字首字母组成的个性化的编码。这是由有趣的活动，而且它非常有用，因为二进制是让人感到非常有技术性的东西之一。一旦你理解了它，就像会说一种秘密语言了一样。"
    unplug2:
      1:
        text: "这一课是关于计算式思维技巧，会教你如何将一个大的难的问题分解成几个简单的问题。这课的目标是写一组指令，然后别人能够跟随这些指令画出课程计划中的一个怪物出来。"
      2:
        text: "同学们会被分成几个小组来写指令，然后他们会互相交换来画出怪物。小组们会使用计算式思维技巧中的4个步骤来写指令：分解和寻找模式、抽象、算法。"
      3:
        text: "首先，小组需要分解任务，这意味着要做一个行动计划。然后他们需要在目录里所有怪物中寻找模式。当他们找到怪物间的不同点后，他们需要抽象，或者移除那些细节。例如，目录中的怪物有不同的眼睛。但他们都有眼睛，因此我们能画出一条线，表明怪物都有眼睛。"
      4:
        text: "这样同学们就能写出一组指令，被称为算法，列出了怪物的每个部分，并用空白来表示可以选择不同风格。这是一组能够交给别的学生的指令来重新创造他们自己的怪物。"
    unplug3:
      1:
        text: "在图纸编程中，我们会通过怎么只用箭头和涂鸦帮助别人重新画出图画来解释了代码是如何工作的。一个人会有一张小的图画，他们要通过只用明确的箭头来试图描述怎样重新这张图。"
      2:
        text: "在这个活动中，你只能使用这些符号：向前移动一个正方形，向后移动，向上移动，向下移动，改变颜色，和用颜色填充正方形。一旦你写好代码后，将它交给另一个人来读代码，并试着重新画出这张图。"
    unplug4:
      1:
        text: "在图纸编程中，我们会通过怎么只用箭头和涂鸦帮助别人重新画出图画来解释了代码是如何工作的。一个人会有一张小的图画，他们要通过只用明确的箭头来试图描述怎样重新这张图。"
      2:
        text: "在活动的第二部分，我们要问同学们有多少种方法能将折叠一张纸来创建16个一样的长方形。然后你们可以讨论多个解决方案怎样才能达到同样的结果，为什么有些方案在某些情况下会更好。"
    unplug5:
      1:
        text: "在图纸编程中，我们会通过怎么只用箭头和涂鸦帮助别人重新画出图画来解释了代码是如何工作的。一个人会有一张小的图画，他们要通过只用明确的箭头来试图描述怎样重新这张图。"
      2:
        text: "在活动的第二部分，我们要问同学们有多少种方法能将折叠一张纸来创建16个一样的长方形。然后你们可以讨论多个解决方案怎样才能达到同样的结果，为什么有些方案在某些情况下会更好。"
    unplug6:
      1:
        text: "这个活动叫做用扑克牌编程序，适合任何年龄。就像你在前面模块化编程中学到的“如果”语句一样，“如果”语句中有一块是关于怎样求出真假值得部分。这就是条件，它能被用在很多不同的地方。"
      2:
        text: "我们会充分利用它，用随机抽取的扑克牌在纸上编程序。你可能需要一个“如果”语句来表达，如果抽出的扑克牌大于8，就得一分。否则，你的对手得一分。你可以让它变得更简单或者复杂，来让你感觉更好。"
    unplug7:
      1:
        text: "你知道吗，当你查阅歌词时，会发现副歌会被定义在最开始处，然后在歌词中只有它们的引用？这就像调用函数一样。"
      2:
        text: "在本节课中，我们在一首歌的开头就定义了副歌部分，我们唱一遍然后再回来，我们注意到班级并没有唱“副歌”这个词，他们自动到了我们定义副歌的地方并且唱了一遍。我们将这个作为一个很好的介绍，来理解当一个程序定义并调用一个函数时做了什么。"
      3:
        text: "我们用熟悉的曲子，如老麦克唐纳，来谈一谈副歌是如何被一遍一遍的重复以及有时它是如何能改变的。当有首像老麦克唐纳的歌时，某些地方会有单词的改变，这是最恰当的地方来引入参数概念。传入某些单词，就像就可以向函数传达额外信息。一旦确信每个人都明白它了，我们可以取一些熟悉的歌曲，分解它们。看看你能否重新组合它们。"
    unplug8:
      1:
        text: "我们在“抽象”这个课程中会用到和疯狂字谜类似的概念。你在故事中的空白处可以填上很多不一样的词。我们用这个注意来让孩子们用自己的词语来创建自己的故事，而且真的能够解释了“抽象”这个概念。"
      2:
        text: "它是关于函数和怎样创建一个函数。就像老麦克唐纳，可以让副歌有一个结构，但每次都可以有一点不一样。然后将不一样的部分抽象出来，然后每次填上自己的词。但是有时候会有三个词不一样，所以将它们写到三个参数中会更好。"
      3:
        text: "你可以用一个函数来处理很多不一样的问题。很多时候，人们会为这些问题写出不同的函数，而没意识到其实只有一点不同。如果他们能找到一个方法来处理这一点点的不同，就能一次次的重用同一个函数，而不是由14个不同的函数。"
    unplug9:
      1:
        text: "接力编程是一个非常有趣的课程，不只是有计算机科学。有时候，每个人都有有点烦躁不安，你想让他们站起来。这是一个很好的办法，能给计算机科学带来兴奋。"
      2:
        text: "你需要将所有人分成两组，他们会排成两列，准备好接力比赛。每个组的第一个人会跑到场地的另一边，那里会有准备好的图纸，和一张白纸等着他们。他们会写下创建这个图像的第一步，然后跑回他们的队伍，拍到下一个人。下一个人一样跑过去再写一步。"
      3:
        text: "这是一个搞明白调试的好办法，你需要校对你自己的工作，然后需要检查前面的人是否做对了。你需要马上明白，认真的写好你的代码有多重要，因为整个团队都依靠你。"
    unplug10:
      1:
        text: "这个活动用一个容易理解的方式解释了互联网是怎么工作的。我们解释了所有的术语，你需要用简单的术语来让学生能够模拟传送像电子邮件这样的消息。"
      2:
        text: "学生们将假装用下面的方式之一来传送消息。无线互联网，数字用户线路（DSL），或者光纤。代表无线传输的学生会将消息放到头上，因为无线网络最有可能丢失一些信息。"
      3:
        text: "假装用数字用户线路或者电缆传输消息的学生会将消息放在手背上，这里不容易丢失消息。代表用光纤传递消息的学生会用双手传递消息。这个活动是理解每天使用的互联网的一个好办法。"
    unplug11:
      1:
        text: "现在是时候回顾一下，纵观一下你在前面19课做过的东西了。这是让学生们知道他们有一个多么大的成就的好时机。他们已经从这些课程中学到了比成年人还多的计算机科学知识。"
      2:
        text: "在班级或者小组里面讨论他们喜欢的课程。一旦你回顾已经学到的东西，你会发现学生们的创造力是如何发光的。将它们分成小组，让他们创造一个自己的线下课程。给每个小组分派一个关键的概念，比如函数、算法，再给他们一些手工艺的材去使用。让每个小组都演示他们新的线下活动，甚至在某天让大家参与一下他们自己创造的活动。"
      3:
        text: "对于Code.org的每个人来说，我们希望你能在课程中获得大量的乐趣。不管你的梦想是不是创建最好的应用，还是用程序来帮助治疗疾病，或者你只是想成为一个明星般的善于解决问题的人，这个课程都是实现这些梦想的第一步。"
    starwars_intro:
      1:
        text: "嗨，我是凯瑟琳 · 肯尼迪，我是《星球大战：原力觉醒》的制作人。今天你将与我们的明星之一--BB-8--合作。BB-8 是一个球形的机器人。他所做的每一个动作都由计算机软件控制。计算机影响着每一个行业，从市场营销到健康再到电影。事实上，一部像《原力觉醒》一样的电影需要数以百计的电脑工程师一起工作才能完成。"
      2:
        text: "Hi，我是Rachel Rose，我是ILM的一名高级研发工程师，我带领动画和生物开发团队。在《原力觉醒》中，我负责帮助艺术家开发飞船的一部分，这让角色移动起来象是真的在非常遥远的星系上。"
      3:
        text: "在随后的一个小时里，我们要建立我们自己的星球大战游戏。我们会教你编程的基本概念。通常编程都是用文本的，但我们要在这里使用块，我们可以通过拖放来编写程序。在模块后面，你创建的仍然是代码。你试着用块来学好基础知识后，我们将给你转换到在网络上最流行的编程语言之一 JavaScript。"
      4:
        text: "开始的时候，我们将同雷伊一起写程序，让BB-8去收集所有废零件。您的屏幕被分成三个部分。左边是运行代码的星球大战空间。为每个关卡写的说明列在了游戏空间的下面。"
      5:
        text: "中间的区域是工具箱，这些块都是 BB-8 可以理解的命令。"
      6:
        text: "在右边的空白称为工作区，这是我们构建程序的地方。"
      7:
        text: "如果我拖拽“移动 向左”块到我们的工作区，并点运行，会发生什么? BB-8 在网格上往左移动了一块。"
      8:
        text: "但如果我想 BB-8 在“移动 向左”块之后再做些什么该怎么做呢? 我可以将另一个块添加到我们的程序中。我要选择 “移动 向上” 块，并把它拖到 “移动 向左” 块下面，直到高亮显示出现。然后放下它，这两个块会自动连接在一起。"
      9:
        text: "当我再次按下运行时，BB-8 将从上到下执行工作区里连在一起的命令。如果你想要从中删除一个块，只要把它拖回到工具箱就可以了。"
      10:
        text: "点击运行后，您总是可以按下复位按钮，让BB-8 回到开始状态。现在让我们继续吧!"
    starwars_typing:
      1:
        text: "模块里面实际上使用的是 JavaScript 命令。JavaScript 是当今在专业开发人员中最流行的编程语言。模块是一个学习编程的伟大方式，事实上，顶尖大学如哈佛和伯克利学校都开始用这种方式教学。一旦了解了基本知识，工程师就开始通过打字来编写代码，因为打字会更快。"
      2:
        text: "我们可以通过键盘输入数以百计的命令，而无需在工具箱中找到并将它们拖出来。因为一开始从打字开始学习可能会慢一些，所以我们希望你要先试一下模块方式。"
      3:
        text: "在工作区的右上角，您可以在任何关卡中点击显示代码按钮将模块以代码形式显示。"
      4:
        text: "在下一课中，我们将以打字模式开始。在这里你还可以从工具箱拖动块或您可以键入命令名称。当您开始键入，您将看到所有可能的命令会显示在你打字的下面。你可以从中选择命令而无需 键入整个命令名，从而能更快写出代码。我在写代码时候，总是会使用这样的自动完成功能。"
      5:
        text: "当你输入代码时，计算机需要你要输的非常精确。你的拼写和大小写名称要完全正确，包括圆括号和分号。即使一个小小的打字错误，BB-8就不能理解代码，也就不能移动。"
      6:
        text: "当你某行上出错时，编辑器会以突出来显示它，这样你就可以试着改变你的文本修复它。"
      7:
        text: "如果你卡住了，你总是可以用重新开始按钮重新开始，你也通过点击右上角在任何时候切换到块模式。好了，让我们用打字来试一试! 如果出现了错误，别气馁。每个人都是试了几次才对的。"
    starwars_events:
      1:
        text: "你好，我的名字叫 Charita Carter。我是华特迪士尼影像的的高级创意制片人。负责领导团队开发吸引我们客户进行体验的景点。我们总是在寻找为我们的客人提高更好体验的方法，而技术就是它的核心。"
      2:
        text: "恭喜，你做到了! 你编写了 BB-8。我认为我们现在该准备做更难点的事情。让我们继续吧！既然你已经学会了编程的基础知识，是时候回来创建由R2-D2 和 C3PO主演的你自己的游戏了。"
      3:
        text: "要制作一个游戏，我们需要了解的游戏程序员每天在使用的东西: 他们被称为事件。事件告诉你的程序侦听并等待其发生。当它发生时，就会执行对应的动作。"
      4:
        text: "一些事件的例子：侦听鼠标单击，方向键或触碰屏幕。"
      5:
        text: "在这里，我们要使 R2-D2 往 上移动并给反叛军飞行员一个消息，然后向下移动到其他的反叛军飞行员。当玩家使用向上/向下箭头键或向上/向下按钮时，将使用事件让它移动。"
      6:
        text: "我们使用 whenUp() 事件块并将 goUp() 块附在上面。当玩家按下向上箭头键时，附加到 whenUp() 块中的代码将运行。我们要使 R2-D2 向下移动也会做同样的事。"
      7:
        text: "为此，我们将使用一个叫做 whenUp() 命令。当您从工具箱中拖出这个命令时，您会看到它开头和结尾是用花括号而不是分号。这给了我们可以放其它命令的空间。当玩家按下向上箭头，这些运行括号内的每一个命令。"
      8:
        text: "我们想要 R2-D2 往上，所以让我们把 “移动 向上” 块放到这个命令中。我们会用同样的方式让 R2-D2往下。"
      9:
        text: "现在，在编写所有的代码来控制我们的机器人之前，我们可以让 R2-D2 对按钮按下事件做出反应。一步一步的走，这样你的游戏就有互动性了。"
    starwars_congrats:
      1:
        text: "嗨，我叫Alice，我领导着Code.org的产品和工程团队，你现在正在玩的教程正是我们做的。"
      2:
        text: "你刚刚完成了最后一关。祝贺你! 你已经学到了制作自己的星球大战游戏的所有东西。现在无需更多的指示，也没有关卡需要通过。你可以做出你自己的游戏，由你决定它如何运行。对了，你已经解锁新的声音和新的命令，你可以做更多的事了。"
      3:
        text: "[学生发言]我们制作一个游戏，大体上是当你抓到澎澎猪时获得分数。同时每当你获得河豚猪时，一个暴风突击队员会出现。实际上整个屏幕全是澎澎猪，当你得到 10,000分时就赢了。"
      4:
        text: "[学生发言] 我们做的游戏中，你不能输，你消灭任何东西都会得分。我把按键反转了，每当您单击向上时，你的角色会往下，而当你点击向右时，你的角色却往会左。它是真的很难! 如果你是游戏开发者，有时候你会得到不公平的优势。是不是呀？耶!"
      5:
        text: "当你完成你的游戏后，选择共享，就会获取一个链接，你可以与朋友分享或在您的手机上玩你做的游戏。玩得开心！"
    starwars_blocks_intro:
      1:
        text: "嗨，我是凯瑟琳 · 肯尼迪，我是《星球大战：原力觉醒》的制作人。今天你将与我们的明星之一--BB-8--合作。BB-8 是一个球形的机器人。他所做的一切和每一个动作都由计算机软件控制。计算机影响着每一个行业，从市场营销到生理健康再到电影。事实上，一部像《原力觉醒》一样的电影需要数以百计的电脑工程师一起工作才能完成。"
      2:
        text: "Hi，我是Rachel Rose，我是ILM的一名高级研发工程师，我带领动画和生物开发团队。在The Force Awaken原力唤醒中，我负责帮助艺术家开发飞船，那些角色中的一部分，让它们移动起来象是真的在非常遥远的星系上。"
      3:
        text: "在随后的一个小时，我们要建立我们自己的星球大战游戏，将教你编程的基本概念。通常编程我们全都是用文本，但我们要在这里使用块，这样我们可以通过拖放来编写程序。开始吧，我们同雷伊一起编写 BB-8 收集所有废零件的程序。"
      4:
        text: "您的屏幕分成三个部分。左边是运行代码的星球大战游戏空间。每个关卡的说明写在游戏空间的下面。"
      5:
        text: "中间的区域是工具箱，这些块都是 BB-8 可以理解的命令。"
      6:
        text: "在右边的空白称为工作区，这是我们构建我们程序的地方。"
      7:
        text: "如果我拖 “移动 向左” 块到我们的工作区中，会发生什么? BB-8 将在网格上向左移动一块。"
      8:
        text: "如果我想在 BB-8 “移动 向左” 块后再做一些事呢? 我可以将另一个块添加到我们的程序中。我要去选择 “移动 向上” 块并将它拖到我的 “移动 向左” 块下面，直到高亮显示出现。然后我放下它则两个块将扣合在一起。当我再次按下运行时，BB-8 将从上到下执行工作区里的命令。"
      9:
        text: "如果你想要删除一个块，只要把它从工作区拖回到工具箱即可删除。"
      10:
        text: "您你点击运行后，您总是可以按下复位按钮，让BB-8 回到开始状态。现在让我们继续吧!"
    starwars_blocks_events:
      1:
        text: "你好，我的名字叫 Charita Carter。我是华特迪士尼影像的的高级创意制片人。负责领导团队开发吸引我们客户进行体验的景点。我们总是在寻找为我们的客人提高更好体验的方法，而技术就是它的核心。"
      2:
        text: "恭喜，你做到了! 你编写了 BB-8。我认为我们现在该准备做更难点的事情。让我们继续吧！既然你已经学会了编程的基础知识，是时候回来创建由R2-D2 和 C3PO主演的你自己的游戏了。"
      3:
        text: "要制作一个游戏，我们需要了解的游戏程序员每天在使用的东西: 他们被称为事件。事件告诉你的程序侦听并等待其发生。当它发生时，就会执行对应的动作。"
      4:
        text: "一些事件的例子：侦听鼠标单击，方向键或触碰屏幕。"
      5:
        text: "在这里，我们要使 R2-D2 往 上移动并给反叛军飞行员一个消息，然后向下移动到其他的反叛军飞行员。当玩家使用向上/向下箭头键或向上/向下按钮时，将使用事件让它移动。"
      6:
        text: "我们使用 whenUp() 事件块并将 goUp() 块附在它上面。当玩家按下向上箭头键时，附加在 whenUp() 块中的代码将运行。为使 R2-D2 向下移我们可同样做。现在取代事先编写所有的代码控制我们的机器人，我们可以让 R2-D2 对按钮按下事件做出反应在屏幕中移动。"
      7:
        text: "逐步的，你的游戏变得更具互动性。"
    starwars_blocks_congrats:
      1:
        text: "嗨，我叫Alice，我领导着Code.org的产品和工程团队，你现在正在玩的教程正是我们做的。"
      2:
        text: "你刚刚完成了最后一关。祝贺你! 你已经学到了制作自己的星球大战游戏的所有东西。现在无需更多的指示，也没有关卡需要通过。你可以做出你自己的游戏，由你决定它如何运行。对了，你已经解锁新的声音和新的命令，你可以做更多的事了。"
      3:
        text: "[学生发言]我们制作一个游戏，大体上是当你抓到澎澎猪时获得分数。同时每当你获得河豚猪时，一个暴风突击队员会出现。实际上整个屏幕全是澎澎猪，当你得到 10,000分时就赢了。"
      4:
        text: "[学生发言] 我们做的游戏中，你不能输，你消灭任何东西都会得分。我把按键反转了，每当您单击向上时，你的角色会往下，而当你点击向右时，你的角色却往会左。它是真的很难! 如果你是游戏开发者，有时候你会得到不公平的优势。是不是呀？耶!"
      5:
        text: "当你完成你的游戏后，选择共享，就会获取一个链接，你可以与朋友分享或在您的手机上玩你做的游戏。玩得开心！"
    mc_intro:
      1:
        text: "我叫 Jens Bergensten，不过大家都叫我 Jeb。我就职于斯德哥尔摩 Mojang，是这款 我的世界 的首席开发人员。我大概是在 11 或 12 岁的时候开始编程的，因为我想做游戏。我父亲的一个朋友告诉我，要想做游戏，就需要学习编程。所以我就那样开始了。我喜欢设计和考虑事物的建筑式样。那也是我真正喜欢 我的世界 的地方。"
      2:
        text: "在随后一小时里，你要通过对艾莉克斯或史蒂夫编程，使其在一个 我的世界 的世界中移动，来学习计算机科学的基础知识。"
      3:
        text: "传统编程通常是文本形式的，不过今天我们要使用模块化：这个系统可以使用方块拖放来编写程序。在方块下面，你创建的就是 JavaScript 代码。"
      4:
        text: "你要学习的理念就是计算机程序员每天用到的东西，也是计算机科学的基础。在 Mojang，我们也用相同的理念完成 我的世界 的工作。"
      5:
        text: "在开始之前，你要选择角色。我要选的是艾莉克斯。我们来建立一个程序代码，帮助她在屏幕上移动。"
      6:
        text: "你的屏幕划分成三个主要部分。左边是 我的世界 游戏区，也就是程序运行的地方。每一级的指令写在下面。"
      7:
        text: "中间区域是工具箱，这些方块每个都是指示艾莉克斯行动的命令。"
      8:
        text: "右边的空白区域称为工作区，是我们建立程序的地方。"
      9:
        text: "如果我们将 前进(); 方块拖到工作区，然后单击“运行”，会发生什么？艾莉克斯向前移动了一格。"
      10:
        text: "那如果我们想让她在移动一格后做点别的呢？我们可以在程序中添加另一个方块。我要选择 向右转(); 方块，然后将它拖动到 前进(); 方块下面，直到这个桔黄色行出现。然后我放下它，两个方块就会卡到一起。再次按“运行”时，艾莉克斯就会按工作区从上到下堆叠的顺序执行命令。"
      11:
        text: "如果要删除方块，只要将它从堆栈拖回工具箱就行了。"
      12:
        text: "要想撤销更改，回到关卡开始时，使用工作区右上角的“重头开始”按钮。还有一件事，你们看到转向方块上的小三角了吗？任何时候只要看到这类三角，就表示你可以选择其他选项。我们开始编码吧！"
    mc_repeat:
      1:
        text: "我是 Mojang 品牌总监 Lydia Winters，我们制作了一款小游戏，名字叫作 我的世界。"
      2:
        text: "在 我的世界 中，我最喜欢的事情就是探索。我喜欢在洞穴中冒险，看看能找到些什么。跟本身不是程序员的人一样，我非常期待能学习 我的世界 课程，并真正学到了一些编码知识。"
      3:
        text: "最后关卡需要大量 moveForward(); 块。如果我们能告诉计算机执行四或五次前进命令，就会简单得多。幸运的是，计算机真的非常擅于重复执行具有重复循环的命令。"
      4:
        text: "在建造 我的世界 时，我们使用重复循环放置所有用于创造新世界的原始材料。那可是成千上万的方块。在细小的环节上，我们也会使用循环，例如让艾莉克斯的腿在走路时反复交替。重复循环可是编程的一大利器。"
      5:
        text: "夜幕降临了，那么在随后几关中，我们要建一座房子，保持安全。我们要用重复方块来完成，这样非常简单。"
      6:
        text: "要给我们的房子建一面墙，我们可以告诉艾莉克斯 向前移动();，然后放下木板四次， 也可以告诉她向前移动 并放下一块木板(); 并放下一块木板，然后拿上这个命令，用重复方块让她多次执行这一行动。现在我们单击重复方块，告诉她我们想让她将这一行动执行多少次。那么，就赶在夜晚到来之前，建好我们的房子吧！祝大家游戏愉快。"
    mc_if_statements:
      1:
        text: "现在我们要学习如果语句。如果语句是学习编程的基础部分。它们可以帮助计算机做出决定。"
      2:
        text: "所有计算机都会使用如果语句，包括我的手机。例如，当我解锁手机时，它会运行某些代码，只要我正确输入密码，就会解锁手机。否则，就会显示错误消息。"
      3:
        text: "你可以在代码中使用如果语句，让史蒂夫和艾莉丝对他们在世界中看到的东西做出反应。例如，如果他们前面有块石头，可以向左转。或者如果他们碰到一棵树，可以向右转。"
      4:
        text: "这样一来，就不会掉到岩浆里了。为岩浆订计划很简单。我们可以在屏幕上看到。但石头下面我们看不到的岩浆怎么办？ "
      5:
        text: "开采石头后，在向前移动之前，我们需要检查那个地方有没有岩浆。如果那儿有岩浆，我们在向前移动之前，就需要在角色前面放下一块石头。这样的话，我们就能安全移动了。开采的时刻来啦！要记得用如果语句，小心脚下哦。"
    mc_congrats_share:
      1:
        text: "恭喜啦！你刚刚学习了计算机科学的初级建造方块。"
      2:
        text: "现在你可以用这些方块，发挥自己的创意了。不会再有指令，也没有谜题要解决。你可以随意建造任何东西。选择权完成在你手上。"
      3:
        text: "[学生交谈] 好有真实感。剪。我用火把做了一个 L。还用桦木板做了一个 A。有用了，有用了。我们用羊毛建了一座房子！"
      4:
        text: "完成创意后，你可以选择分享，将链接分享给自己的好友。祝大家玩得开心！"
    mc_congrats_no_share:
      1:
        text: "恭喜啦！你刚刚学习了计算机科学的初级建造方块。"
      2:
        text: "现在你可以用这些方块，发挥自己的创意了。不会再有指令，也没有谜题要解决。你可以随意建造任何东西。选择权完成在你手上。"
      3:
        text: "[学生交谈] 好有真实感。剪。我用火把做了一个 L。还用桦木板做了一个 A。有用了，有用了。我们用羊毛建了一座房子！"
      4:
        text: "现在你可以随心所欲建造一切。玩得开心点！"
    gumball_intro:
      1:
        text: "如果你想创造自己的游戏，那真的很容易。所有你需要的只是一些基础的编程知识，然后你就可以开始玩你创造的游戏了。"
      2:
        text: "你有喜欢的电子游戏吗？我们会用游戏实验室，在创造游戏的路上往前一步。一个好游戏需要一个故事，每个故事都需要演员。演员会做些像说话、移动、相互交互这样的事情。也许还需要一些游戏规则来得分。今天，我们会一样一样的学到怎样做这些事情。我们会从头创造一个游戏，你可以将它共享出来，在手机上玩。"
      3:
        text: "今天，我们会一样一样的学到怎样做这些事情，然后会从头创造一个游戏。你可以将它共享出来，在手机上玩。"
      4:
        text: "您的屏幕分为 3 个主要部分。左边是在您的程序将运行的游戏空间。每一关的说明都是写在下面。"
      5:
        text: "中间是工具箱，那里的每个模块都是一段代码。"
      6:
        text: "右边的空白区域称为工作区，是我们建立程序的地方。"
      7:
        text: "在开始以前，你需要将模块连接到橙色的“当运行时”模块下面。你可以将多个模块拖到一起，在看到黄线时松开。这样它们就能粘到一起了。"
      8:
        text: "第一关中，我们会将“说”模块连接到“当运行时”模块下面，并输入你的消息，这样演员就能说话了。一旦你的模块都放好了，点击“运行”按钮来看看你编写的程序。"
      9:
        text: "从头学完后，你能用所有的演员来创建自己的游戏。你能让他们之间能够互动，获得分数，互相扔东西，甚至能够消失。这都由你决定！"
    gumball_events:
      1:
        text: "现在，我们会学习到所有游戏程序员每天都要用到的一些东西。它们被称为事件。事件告诉你的程序来倾听某件事情什么时候发生。然后，当它发生时，会执行一些动作。"
      2:
        text: "事件的一些例子包括，点击鼠标，按下了上或下方向键，或者点击了屏幕。"
      3:
        text: "这里，我们会在玩家点击演员时，让他说些什么。我们会用到“当点击时”模块，然后将“说”模块加上去。当玩家点击时，所有在这个模块下的模块都会被执行。"
      4:
        text: "这里也有“当按... 方向键时”的模块。如果你将移动模块连接到它们后，你就能开始移动你的演员上下左右移动。一点点的，你的游戏变得更加互动了。"
    gumball_repeat:
      1:
        text: "你能想象如果永远重复某些事情吗？希望你永远不需要，因为电脑真的非常擅长重复事情。"
      2:
        text: "这是“一直重复”模块。任何在模块你的东西都会在游戏中永远重复下去。如果想让一个演员在没有玩家的操作下重复做一些事情，我们需要将那些模块放到”一直重复“模块中。"
      3:
        text: "在下一关中，我们的目标是帮助演员不停的做一件事。学习怎样通过使用重复按钮，在你创建自己的游戏时，节约下大量的时间。"
    iceage_intro:
      1:
        text: "如果你想创造自己的游戏，那真的很容易。所有你需要的只是一些基础的编程知识，然后你就可以开始玩你创造的游戏了。"
      2:
        text: "你有喜欢的电子游戏吗？我们会用游戏实验室，在创造游戏的路上往前一步。一个好游戏需要一个故事，每个故事都需要演员。演员会做些像说话、移动、相互交互这样的事情。也许还需要一些游戏规则来得分。今天，我们会一样一样的学到怎样做这些事情。我们会从头创造一个游戏，你可以将它共享出来，在手机上玩。"
      3:
        text: "今天，我们会一样一样的学到怎样做这些事情，然后会从头创造一个游戏。你可以将它共享出来，在手机上玩。"
      4:
        text: "您的屏幕分为 3 个主要部分。左边是在您的程序将运行的游戏空间。每一关的说明都是写在下面。"
      5:
        text: "中间是工具箱，那里的每个模块都是一段代码。"
      6:
        text: "右边的空白区域称为工作区，是我们建立程序的地方。"
      7:
        text: "在开始以前，你需要将模块连接到橙色的“当运行时”模块下面。你可以将多个模块拖到一起，在看到黄线时松开。这样它们就能粘到一起了。"
      8:
        text: "第一关中，我们会将“说”模块连接到“当运行时”模块下面，并输入你的消息，这样演员就能说话了。一旦你的模块都放好了，点击“运行”按钮来看看你编写的程序。"
      9:
        text: "从头学完后，你能用所有的演员来创建自己的游戏。你能让他们之间能够互动，获得分数，互相扔东西，甚至能够消失。这都由你决定！"
    iceage_events:
      1:
        text: "现在，我们会学习到所有游戏程序员每天都要用到的一些东西。它们被称为事件。事件告诉你的程序来倾听某件事情什么时候发生。然后，当它发生时，会执行一些动作。"
      2:
        text: "事件的一些例子包括，点击鼠标，按下了上或下方向键，或者点击了屏幕。"
      3:
        text: "这里，我们会在玩家点击演员时，让他说些什么。我们会用到“当点击时”模块，然后将“说”模块加上去。当玩家点击时，所有在这个模块下的模块都会被执行。"
      4:
        text: "这里也有“当按... 方向键时”的模块。如果你将移动模块连接到它们后，你就能开始移动你的演员上下左右移动。一点点的，你的游戏变得更加互动了。"
    iceage_repeat:
      1:
        text: "你能想象如果永远重复某些事情吗？希望你永远不需要，因为电脑真的非常擅长重复事情。"
      2:
        text: "这是“一直重复”模块。任何在模块你的东西都会在游戏中永远重复下去。如果想让一个演员在没有玩家的操作下重复做一些事情，我们需要将那些模块放到”一直重复“模块中。"
      3:
        text: "在下一关中，我们的目标是帮助演员不停的做一件事。学习怎样通过使用重复按钮，在你创建自己的游戏时，节约下大量的时间。"
    mc_2016_intro:
      1:
        text: "嗨，我叫 Jens，是 我的世界 的主创意设计师。在接下来的一小时里，您将会制作自己的 我的世界 游戏。这看起来很像 我的世界，但整个世界停止了。羊没有移动，鸡没有生蛋，僵尸也傻站着不动。要让 我的世界 运转起来，全靠您添加代码。"
      2:
        text: "我叫梅丽莎（Melissa）我是一个我的世界研究员。我真正感兴趣的是人们如何思考以及与技术的相互作用，所以这是一份很好的工作让我如何把电子工程与心理学的结合：人们如何思考和行动。"
      3:
        text: "您会看到屏幕分成三个主要部分。1) 左边是 我的世界 游戏。现在这个世界冻住了，不过我们会用代码来修好。"
      4:
        text: "2) 中间的区域是工具箱。这里每个方块都是鸡、羊和其他 我的世界 生物能够理解的命令。"
      5:
        text: "3) 右边的空间称为工作区，这也是我们建立程序的地方。"
      6:
        text: "如果您忘记要做什么，顶部会显示每一关的说明。"
      7:
        text: "首先，我们要给一只鸡编程。我们将 \"向前移动\" 命令拖入工作区。当我点击 \"运行\" 时，鸡就会向前移动一步。然后，我将另一个 \"向前移动\" 方块拖到第一个 \"向前移动\" 方块下面，直到出现高亮显示。然后我把它放下，两个方块就扣在了一起。如果我再次点击 \"运行\"，鸡就会走两步。"
      8:
        text: "如果您想删除一个方块，只要将它从堆栈中移除，然后拖回工具箱就行了。"
      9:
        text: "在点击 \"运行\" 后，您随时可以点击 \"重置\" 按钮，重置游戏并重新开始。现在，轮到您制作自己版本的 我的世界 了。祝您玩得愉快！"
    mc_2016_loops:
      1:
        text: "嗨，我叫 Lisa。我是 我的世界 的软件开发人员，主要负责游戏中的一些动物和敌人。我参与制作的动物中有一种叫豹猫。我负责的部分是，您可以给豹猫喂鱼，将它驯化成自己的猫。"
      2:
        text: "对人来说，如果我们要反反复复做同样的事情，真的会很无聊。而计算机的好处就在于，它们可以数百万甚至数十亿次连续做相同的事情，还不会觉得无聊。这种重复称之为循环，我的世界 中每种生物都要用到循环。"
      3:
        text: "之前，我们让一只鸡跨屏幕移动，但之后它就停下来了。在 我的世界 中，鸡永远走来走去。我们用工具箱中的 \"永远执行\" 循环，让我们的鸡也一直走来走去吧。在您建立自己的 我的世界 时，循环的强大力量将为您节省大把的时间，开启各种简洁选项。"
    mc_2016_events:
      1:
        text: "在接下来这一关中，您可以选择扮演史蒂夫或艾莉克斯。按下键盘上的方向键可以上下左右移动。现在您可以在一个关卡中随意移动。要使用生物，只要走到它面前，面对它按空格即可。"
      2:
        text: "如果您用的是触摸屏，上下左右扫动即可四处移动。然后轻按游戏，使用您前面的物品。"
      3:
        text: "不过您使用它时会发生什么？在 我的世界 中，当您修剪羊时，它们会掉落羊毛，当您击中牛时，它们会跑开，当您接近爬行者时，它们会爆炸。正因为有这些称之为事件的东西，这些反应才得以发生。事件会告诉您的程序倾听或等待某件事情发生。当它来临时，便执行一种行为。"
      4:
        text: "到目前为止，您已经用过一次事件。您在 \"当生成时\" 栏中放入的代码，会在有生物生成或游戏开始时运行。在随后几关中，您会遇到新的事件栏，比如 \"当触摸时\" 会在您触摸生物时运行，或 \"当使用时\" 会在您使用生物时运行。或者，如果您想让僵尸在太阳出来后消失，就将它放入 \"当白天时\" 栏中"
    mc_2016_spawn:
      1:
        text: "在游戏中，生成就是创造这样事物的意思。在这个关卡中，我们让僵尸在太阳落山时生成。为此，我们要使用 \"当夜晚时\" 方块。"
      2:
        text: "由于我们想让僵尸在夜晚生成，所以我们在 \"当夜晚时\" 方块下面添加 \"生成僵尸\" 方块。它们生成后，每只僵尸都会运行您放入 \"当生成时\" 事件栏中的代码。祝您生成僵尸愉快！"
    mc_2016_congrats:
      1:
        text: "恭喜！您已经学会用计算机科学命令，赋予 我的世界 生命力。您现在也是开发人员了。您已解锁所有命令和所有生物。命运由您而定。"
      2:
        text: "完成自己的游戏制作后，选择分享可获得一个链接，您可以与好友分享，或在手机上玩自己的游戏。祝您玩得愉快！我很期待玩一玩您的 我的世界 版本哦。"
    applab_intro_welcome:
      1:
        image: 'notes/applab_intro_welcome_1.png'
        text: "我的名字叫Mei'lani。 我是code.org 的一名实习生，也是一名计算机科学的学生。 我喜欢计算机科学因为它很富有创造性。 我会成为问题解决的能手。我要按我的想法制作任何的事物。 但我也想成为设计师。我要成为艺术家并选择任何有创意的事。"
      2:
        image: 'notes/applab_intro_welcome_2.png'
        text: "使用应用程序实验室来制作你自己的应用程序很容易！不管编程对你来说是新的，还是你已经有了一些经验。应用程序实验室是帮助你创建新应用程序，并和你的朋友们一起分享的好工具。"
      3:
        image: 'notes/applab_intro_welcome_3.png'
        text: "这是一个应用程序实验室。左边的是你的应用程序。右边的是能够让你的应用程序运行的代码。你从工具箱里把模块拖出来生成你自己的程序。 从一块叫作'设置属性'的模块开始吧。"
      4:
        image: 'notes/applab_intro_welcome_4.png'
        text: "设置属性模块可以更改屏幕上的元素外观，像按钮，标签或者甚至是屏幕本身。 首先你要决定所要更改的元素。 如果你把鼠标悬停在应用程序的某个元素上，就可以在此处看到名称或标识。然后从第一个下拉中选择该标识。"
      5:
        image: 'notes/applab_intro_welcome_5.png'
        text: "元素有很多属性是可以改变的，比如他们的文本颜色，背景色或字体大小。你可以看到完整的列表并在第二个下拉中选择你所要更改的属性。"
      6:
        image: 'notes/applab_intro_welcome_6.png'
        text: "最后一个下拉框是你要书写你所要使用的数值的地方。 模块会为你推荐一个建议。但你总是可以自己输入不同的颜色或数字。"
      7:
        image: 'notes/applab_intro_welcome_7.png'
        text: "完成后，该模块读起来有点像句子：‘设置按钮1 的背景色为绿色。’ 点击运行查看你在代码中所做的更改。 如果重新设置，你可以拖入更多的模块来改变你应用程序的其他东西。比如文本！"
      8:
        image: 'notes/applab_intro_welcome_8.png'
        text: "对于此教程，我们将在模块模式下工作。但是应用程序实验室也支持用文本编程。"
      9:
        image: 'notes/applab_intro_welcome_9.png'
        text: "无论哪种方法，你都将用JavaScript网络语言编程。每个级别都有他们的目标，指令以及你想要创建的图像。"
      10:
        image: 'notes/applab_intro_welcome_10.png'
        text: "如果你被难到了，可以点击此图片。它将显示具体如何来完成这关卡。 但试着看你是否可以先自己解决。"
      11:
        image: 'notes/applab_intro_welcome_11.png'
        text: "一旦你完成此关卡的目标后，请点击完成来继续。就是这样简单！点击橙色的“继续”按钮到下一个级别。开始你应用程序实验室的冒险吧！"
    applab_intro_events:
      1:
        image: 'notes/applab_intro_events_1.png'
        text: "应用程序真的很酷，因为它有点象开始你自己的生意一样。我的意思是，你将从零开始设计每个事物，你要管理所有的一切。你是你刚用代码创建起来的作品的主人。"
      2:
        image: 'notes/applab_intro_events_2.png'
        text: "现在你可以改变你的应用程序的外观。让我们通过响应事件来进行互动！ 事件是用户行为，比如点击按钮，滚动菜单，或者悬停在某张图片上。互动式应用程序需要响应事件的方法，比如当点击此按钮时会发出声音。要在应用程序实验室里做到这个，需要使用一个新的模块叫 'onEvent（当事件发生时）'。"
      3:
        image: 'notes/applab_intro_events_3.png'
        text: "该程序把屏幕设置成蓝色。 当我点击此按钮时，我希望屏幕变绿色。首先，我需要拖进一个onEvent（当事件发生时）模块。 把鼠标悬停在它上面，我知道按钮的ID 是\"bigButton\"（大按钮） ，所以我会在第一个下拉菜单中选择它。"
      4:
        image: 'notes/applab_intro_events_4.png'
        text: "接下来，我将选择事件的种类。有很多你可以选择的选项。但现在我先保留传统的老式点击的方法。"
      5:
        image: 'notes/applab_intro_events_5.png'
        text: "最后, 我将在\"打开\"事件中添加更改屏幕背景颜色的代码。您可将代码块读作一句话：\"在单击按钮时运行所有这些代码。“"
      6:
        image: 'notes/applab_intro_events_6.png'
        text: "我们来测试一下。`onEvent()`（当事件发生时）以外的代码块即刻运行, 所以屏幕变为蓝色。"
      7:
        image: 'notes/applab_intro_events_7.png'
        text: "当我点击大按钮时, 在`onEvent()`（当事件发生时）中的代码运行了，所以我的屏幕变成绿色。"
      8:
        image: 'notes/applab_intro_events_8.png'
        text: "如果你想在事件发生后改变更多的东西，比如屏幕上的文本，在onEvent里增加更多的代码就行。"
      9:
        image: 'notes/applab_intro_events_9.png'
        text: "为了让你的程序能够响应更多的时间，可以增加更多的onEvent模块。但要确保不要将它们相互嵌套了。现在是时候自己试试了！好好玩！"
    applab_intro_sounds:
      1:
        image: 'notes/applab_intro_sounds_1.png'
        text: "现在你会学习往应用里增加图片和声音。让我们先看看声音的选项。"
      2:
        image: 'notes/applab_intro_sounds_2.png'
        text: "在工具箱中，你会找到一个叫做\"playSound\"的新模块。将它拖拽到工作区中。你可以通过点击下拉框，然后点击\"选择\"来选择一个声音播放。"
      3:
        image: 'notes/applab_intro_sounds_3.png'
        text: "在这里，你可以选择从电脑里上传一个声音，或者从声音库里搜索一个声音。声音库有很多不同类别，比如指令，背景音乐或动画。"
      4:
        image: 'notes/applab_intro_sounds_4.png'
        text: "一旦你选好了声音，点击\"选择\"。当模块开始运行时，它会播放你选择的声音。"
      5:
        image: 'notes/applab_intro_sounds_5.png'
        text: "为了往你的元素里添加图片，你可以使用setProperty（设置属性）模块。在第二个下拉框中选择image（图片）属性。"
      6:
        image: 'notes/applab_intro_sounds_6.png'
        text: "然后从第三个下拉框中\"选择\"。"
      7:
        image: 'notes/applab_intro_sounds_7.png'
        text: "在这里，你能从电脑里上传一张图片，或者从巨大的图标库中选择一个。"
      8:
        image: 'notes/applab_intro_sounds_8.png'
        text: "返回代码模式，你能使用\"setProperty\"（设置属性）来改变图标的颜色。一旦你选好了使用什么图片，点击\"运行\"来看看它是否工作。"
      9:
        image: 'notes/applab_intro_sounds_9.png'
        text: "就这些了！现在开始增加图片和声音来让你的应用更有趣，并有更多变化吧。"
    applab_intro_designmode:
      1:
        image: 'notes/applab_intro_designmode_1.png'
        text: "为了建立你自己的应用，你要从头开始设计屏幕和元素。使用应用实验室的设计模式会更容易。"
      2:
        image: 'notes/applab_intro_designmode_2.png'
        text: "用你应用上的这个开关来进入设计模式。"
      3:
        image: 'notes/applab_intro_designmode_3.png'
        text: "你能通过将新元素拽到屏幕上来增加它。你也能将他们挪动到不同的地方，通过拖拽他们的右下角来改变尺寸。"
      4:
        image: 'notes/applab_intro_designmode_4.png'
        text: "用右边的控制台能够改变一个元素的属性。例如，这里很容易能改变按钮的文本、颜色和字体。"
      5:
        image: 'notes/applab_intro_designmode_5.png'
        text: "当你将一个新元素添加到屏幕上后，它会有一个通用的ID（标识），如button1（按钮1）。最好将这个按钮的ID改为有意义的内容，比如\"右按钮\"。这样返回程序时能知道这个哪一个按钮。"
      6:
        image: 'notes/applab_intro_designmode_6.png'
        text: "如果你不小心添加了一个错误的元素到应用里，只需要将它拖出来，或者点击\"删除\"。"
      7:
        image: 'notes/applab_intro_designmode_7.png'
        text: "你能通过往应用里拖出一个screen（屏幕）元素来增加一整个新屏幕。"
      8:
        image: 'notes/applab_intro_designmode_8.png'
        text: "从最上面的下拉框里，你能很快的在创建的屏幕间切换。"
      9:
        image: 'notes/applab_intro_designmode_9.png'
        text: "在你的应用里，你需要一个方法在所有这些屏幕间切换。工具箱中的setScreen（设置屏幕）模块能做到这一点。将\"setScreen\"（设置屏幕）放到\"onEvent\"（当事件发生时）模块中，当点击按钮时切换屏幕。"
      10:
        image: 'notes/applab_intro_designmode_10.png'
        text: "在接下来的几关里，你会一直做一个项目。首先，你会添加一个按钮，然后添加一个新屏幕。最后你会写一些代码，在按下这个按钮时切换到这个新屏幕。"
    applab_intro_share:
      1:
        image: 'notes/applab_intro_share_1.png'
        text: "现在，你已经学会了应用实验室的一些基础知识，比如添加按钮，声音，图片，文本和新屏幕。你可以做任何应用了。"
      2:
        image: 'notes/applab_intro_share_2.png'
        text: "在下一关，你能找到刚刚创建的应用。加上一点小创新，你能将它变成一个给朋友的小测试，一张分享给家庭的贺卡，或者一个《惊险岔路口》游戏。所有这些应用，通过你已经学会的技巧来组合一下就可以做到，你一定有更多的主意。"
      3:
        image: 'notes/applab_intro_share_3.png'
        text: "一旦你完成了应用，就能很容易的发到手机上看看效果。只需要点击\"分享\"，然后输入你的手机号码。"
      4:
        image: 'notes/applab_intro_share_4.png'
        text: "你会收到一条短信，让你能立刻打开你的应用。"
      5:
        image: 'notes/applab_intro_share_5.png'
        text: "你也可以把应用的链接通过社交媒体分享，或者将它发布到code.org的公开应用库里，这样其他人就能玩了。"
      6:
        image: 'notes/applab_intro_share_6.png'
        text: "你刚刚接触的是应用实验室能够做的一小部分。完整的应用实验室的功能能够进行更高级的用户交互，有新的屏幕元素，甚至可以内建一个数据库，这样你能够很快创建一个有完整功能的应用。如果你继续下去，就能在\"code.org/applab\"你能够找到所有的工具，以及大量的创意。"
      7:
        image: 'notes/applab_intro_share_7.png'
        text: "感谢你看完整个介绍。现在，去应用实验室创建并分享你的第一个应用，然后接着创建更多的吧！"
    mc_2017_agent_intro:
      1:
        image: 'notes/mc_2017_agent_intro_1.png'
        text: "史黛西：斯坦佩，丽琪，普雷斯顿 - 谢谢你们和我一起来。我想给你们看看这个平台高原。我想你们会爱上它的。"
      2:
        image: 'notes/mc_2017_agent_intro_2.png'
        text: "等等 - 轨道上有个洞！（尖叫）"
      3:
        image: 'notes/mc_2017_agent_intro_3.png'
        text: "大家都还好吗？斯坦佩：啊，我看到问题了。看！轨道上有个洞。史黛西：斯坦佩，真的？丽琪：也许我们能收集一些方块来修好它。普雷斯顿：我们来比赛吧，第一个返回上面的人算赢。史黛西，好，各就各位，预备，开始！好，我要手机一些粘土。等等。伙计们，我挖不动！普雷斯顿：我也是。丽琪：我也挖不动。史黛西：好了，这也太奇怪了。斯坦佩，你能挖吗？斯坦佩：我也不能！史黛西：好吧，大家先冷静一下。斯坦佩：这个游戏坏了吧？史黛西：如果是的话，我们能修好它吗？丽琪：我不知道。斯坦佩：有谁知道怎么写《我的世界》代码吗？"
      4:
        image: 'notes/mc_2017_agent_intro_4.png'
        text: "（嗖）普雷斯顿：那是什么？斯坦佩：我从没见过这个。丽琪：太可爱了！史黛西：这个可以驯服吗？普雷斯顿：好吧，怎么回事？有人需要返回真实世界，并且修好它。大家说：不！史黛西：我不去 - （唉）好吧，我去。"
      5:
        image: 'notes/mc_2017_agent_intro_5.png'
        text: "哦，好了。嗨，我现在在真实世界里了。我要去找找《我的世界》的办公室。"
      6:
        image: 'notes/mc_2017_agent_intro_6.png'
        text: "但是 ，我需要你的帮助。从教程开始，学习如何编写代码，我会在几关之后赶上你的进度。好吗？祝我好运！我觉得应该是这条路。嗷！仙人掌！我还好！"
      7:
        image: 'notes/mc_2017_agent_intro_7.png'
        text: "为了完成编程一小时挑战，你需要写代码来给代理人变成。你要和代理人一起协作，来清除路径上的任何路障，让你能捡起探险需要的物品。只有代理人能够放置或摧毁方块，而你只能收集它们。你的屏幕被分成了三个部分。左边是《我的世界》。"
      8:
        image: 'notes/mc_2017_agent_intro_8.png'
        text: "中间区域是代理人能够理解的命令的工具箱。"
      9:
        image: 'notes/mc_2017_agent_intro_9.png'
        text: "右边是工作区。这是你堆放命令来构建程序，控制代理人的地方。"
      10:
        image: 'notes/mc_2017_agent_intro_10.png'
        text: "代理人可可以走，转向，激活压力板。他也能摧毁、放置方块。当它将方块像这些铁轨一样放下时，方块会被放到它下面。"
      11:
        image: 'notes/mc_2017_agent_intro_11.png'
        text: "如果您忘记要做什么，顶部会显示每一关的说明。"
      12:
        image: 'notes/mc_2017_agent_intro_12.png'
        text: "如果你想再来一次，你可以点击蓝色的重置按钮来将所有东西恢复到开始的状态。如果你需要删除一个代码模块，就将它从工作区拖回工具箱。记住点击运行来让代理人移动。好了，开始尝试前几关吧。祝你好运！"
    mc_2017_repeat:
      1:
        image: 'notes/mc_2017_repeat_1.png'
        text: "斯坦佩：我想知道史黛西在干什么？"
      2:
        image: 'notes/mc_2017_repeat_2.png'
        text: "史黛西：哇哦，我觉得我到了。真是太棒了！"
      3:
        image: 'notes/mc_2017_repeat_3.png'
        text: "我觉得我还在《我的世界》里！你好吗？你好？"
      4:
        image: 'notes/mc_2017_repeat_4.png'
        text: "哦，这是个苦力怕。别做任何事情…… 凯蒂：史黛西？ 史黛西：你好，凯蒂？ 凯蒂：是的，欢迎来到《我的世界》！"
      5:
        image: 'notes/mc_2017_repeat_5.png'
        text: "史黛西：这太棒了。所以你是个程序员，每天都在这里工作，对吗？ 凯蒂：是的，的确非常棒。我是一个《我的世界》市场团队的程序源。 史黛西：你会多少种编程语言？ 凯蒂：在我的整个职业生涯中，我可能使用过超过一打的语言。 史黛西：一打？ 凯蒂：是啊。 史黛西：所以现在，你不会正好知道这个管自己叫做”代理人“的小机器人的事情吧？ 凯蒂：我们用代理人来做一些斯蒂夫和艾利克斯不能做的事情，比如穿过熔岩。 史黛西：好的，我想学一些代码了，并且他们也想学习如何写代码。那么当你开始学习时，什么是首先需要知道的事情？"
      6:
        image: 'notes/mc_2017_repeat_6.png'
        text: "凯蒂：嗯，你需要学习如何使用循环。循环让程序员写给计算机的命令能够一遍又一遍的执行。 史黛西：明白了，所以我想实际上在接下来的几关里，会开始尝试循环。"
      7:
        image: 'notes/mc_2017_repeat_7.png'
        text: "在下一关中，你会用循环来让代理人沿着路径移动。将重复模块拖拽到工作区中，并将向前移动模块放到重复模块中。这告诉计算机连续的做一件事情多次，而不用将一大堆同样的模块拖入工作区中。你可以通过在重复模块中放一个数字来选择重复多少次。"
      8:
        image: 'notes/mc_2017_repeat_8.png'
        text: "你也能在重复模块中放上转向、和多个命令。但现在，我们只需要试着用重复来将代理人向前移动几步。记住。如果你在某关被男主了，随时可以点击重置按钮来重试。"
      9:
        image: 'notes/mc_2017_repeat_9.png'
        text: "如果你想有一份像凯蒂一样酷的工作，当你完成每个关卡后，点击显示代码按钮。这会让你看看像凯蒂一样的程序员，在《我的世界》编程时，所使用的真正的Javascript代码。 凯蒂：是的，祝大家好运！"
    mc_2017_functions:
      1:
        image: 'notes/mc_2017_functions_1.png'
        text: "普雷斯顿：我不是在吹牛，但我确实很擅长跑酷。 丽琪：让我们睡一下吧，这样史黛西回来的时候会是白天的。"
      2:
        image: 'notes/mc_2017_functions_2.png'
        text: "史黛西：好了，伙计们，我从《我的世界》办公室回来了。我也想到了应该如何解决我的游戏里的这个问题了。我想我能用一个函数。让我先打开这个。"
      3:
        image: 'notes/mc_2017_functions_3.png'
        text: "函数是完成一个特殊任务的一系列指令的集合，就像一个食谱。在接下来的几关里，你会使用函数来通过这些关卡。"
      4:
        image: 'notes/mc_2017_functions_4.png'
        text: "看看工作区里函数的代码，来理解它做了些什么。"
      5:
        image: 'notes/mc_2017_functions_5.png'
        text: "然后，在工具箱里找找有这个名字的模块，将它从工具箱里拖出来，放到当运行时模块下。"
      6:
        image: 'notes/mc_2017_functions_6.png'
        text: "记住，你每次需要运行同一组指令来做什么事情时，就可以用同一个函数了。比如建造一座桥。祝你好运，我知道你能做到！"
    mc_2017_congratulations:
      1:
        image: 'notes/mc_2017_congratulations_1.png'
        text: "普雷斯顿：祝贺你！"
      2:
        image: 'notes/mc_2017_congratulations_2.png'
        text: "丽琪：祝贺你！"
      3:
        image: 'notes/mc_2017_congratulations_3.png'
        text: "斯坦佩：祝贺你，你做到了！"
      4:
        image: 'notes/mc_2017_congratulations_4.png'
        text: "史黛西：祝贺你，伙计。你完全做到了！现在你已经完成了编程一小时，你可以开始在《我的世界》写代码了。你已经学到了循环，函数和一个软件代理人能够做到的事情。"
      5:
        image: 'notes/mc_2017_congratulations_5.png'
        text: "现在，是时候作为一个程序员，进行自由发挥了。用接下来的时间写你自己的函数来探索，采矿，并创建吧。"
      6:
        image: 'notes/mc_2017_congratulations_6.png'
        text: "你可以将这个关卡的代码写的代码放到你的《我的世界》：教育版中。只用点击完成，然后跟着说明来获得链接，并在你的世界中使用。继续用代理人编程。做得好，好好玩！"
      7:
        image: 'notes/mc_2017_congratulations_7.png'
        text: "史黛西：我回来了！好的，伙计们，这是代理人！让我给你们展示一下它能做什么。看，它在干活儿！我告诉它用粘土块做一个楼梯，现在，我们可以用它离开这里了。伙计们，它不仅仅能做楼梯，我能让代理人做任何我想的事情，它都能帮我做到。"
      8:
        image: 'notes/mc_2017_congratulations_8.png'
        text: "斯坦佩：你是怎样做到的？ 史黛西：很简单。实际上，我在使用代码！"
    csd_concept_how_computers_work:
      1:
        image: 'notes/csd_concept_how_computers_work_1.png'
        text: "你能看到的每个地方，计算机都在改变世界。无论它们在我们的桌子上，家里，口袋里，或者别的地方，今天，我们大部分人都在用这些革命性的技术。我们不常说：“计算机是如何工作的？“在这一系列中，从计算机由什么组成来开始，你会学习到计算机实际上是如何工作的。然后，你会看到信息是如何在计算机内部表达的，即如何通过微小的电信号超高速的开和关来实现的。"
      2:
        image: 'notes/csd_concept_how_computers_work_2.png'
        text: "这之后，你会学习到计算机如何通过电路来做到从简单的数学计算到模拟整个虚拟世界的所有事情。然后，你会从概括的角度看到计算机的不同部分，包括输入、输出、计算和存储所有的信息。最后，你会看看代码实际上是什么，软件是如何控制硬件的。你是否好奇你每天使用的谁，或者你还想做一些未来的创新，那么，第一步就是学习计算机是如何工作的。"
    csd_concept_computer:
      1:
        image: 'notes/csd_concept_computer_1.png'
        text: "我是May-Li Khoe，我是一名设计师，也是一位发明家。我以前是在苹果做设计，现在我为孩子们做设计，让他们能够在学校里更容易的学习。除此之外，我的工作还包括音乐主持人和跳舞。"
      2:
        image: 'notes/csd_concept_computer_2.png'
        text: "计算机无处不在！它们在人们的口袋里，汽车里，手腕上。它们也许现在就在你的背包里。但是，计算机是由什么组成的呢？什么是计算机呢？而且，计算机是如何工作的呢?"
      3:
        image: 'notes/csd_concept_computer_3.png'
        text: "大家好，我是Nat！我原来是一名Xbox的设计师。我从7岁大时就开始用电脑工作，现在我在做虚拟现实方面的工作。作为人类，我们一直都在构建工具来帮助我们解决问题。比如，手推车，锤子，或者印刷机，再比如载重拖车。"
      4:
        image: 'notes/csd_concept_computer_4.png'
        text: "所有这些都能帮助我们做体力劳动。随着时间的过去，人们开始好奇，是否机器能够帮助我们设计，或做一些脑力劳动，比如解决方程，或者跟踪天上的星星。除了被用来移动或操作物质，如泥土、石头，这些机器也许能够被设计来操作信息。计算机科学的先驱们开始探索如何设计一台会思考的机器，他们也意识到，它应该能执行4种不同的任务。"
      5:
        image: 'notes/csd_concept_computer_5.png'
        text: "它应该能获取输入，存储并处理信息，然后输出结果。现在，这个也许听起来很简单。但这是所有计算机都具有的功能，是计算机不可或缺的部分。"
      6:
        image: 'notes/csd_concept_computer_6.png'
        text: "计算机从最简单的基本的计算器开始，虽然他们只能操作一些数字，这在当时也是非常令人震惊的。但现在，我们能用计算机互相聊天，玩游戏，控制机器人，做任何你可能想到的疯狂的事情。现代计算机一点也不像最早的笨重的计算机，但它们一样拥有这4样东西。"
      7:
        image: 'notes/csd_concept_computer_7.png'
        text: "首先，我们来谈谈输入。你能通过键盘告诉计算机做什么，也能通过鼠标、麦克风、摄像头告诉计算机。这些不同的输入都给了计算机信息，计算机将信息存入存储中。"
      8:
        image: 'notes/csd_concept_computer_8.png'
        text: "计算机的处理器从存储中获取信息。然后操作它，或者用一系列命令构成的算法来改变它。然后将处理玩的信息再返回到存储中。这个过程不停的重复，直到信息准备好输出了。"
      9:
        image: 'notes/csd_concept_computer_9.png'
        text: "计算机如何输出信息，是取决于计算机被用来做什么。计算机能够显示文本、照片、视频或者交互游戏 -- 甚至虚拟现实！计算机的输出甚至包括用信号来控制机器人。"
      10:
        image: 'notes/csd_concept_computer_10.png'
        text: "谁能知道未来的计算机长什么样子呢？我希望你能够帮助决定未来的计算机是什么样的。但是所有的计算机，不管用了什么用的技术，他们都会有这4样相同的东西。它们会获取信息，存储成数据，处理它，然后再输出结果。"
    csd_concept_binary_data:
      1:
        image: 'notes/csd_concept_binary_data_1.png'
        text: "嗨！我是Limomr Fried，我是Adafruit工业的一名工程师。这是我做工程和设计的地方，我为时尚、音乐和科技设计电路。"
      2:
        image: 'notes/csd_concept_binary_data_2.png'
        text: "我叫Federico Gomez Suarez，我是微软编程至善的一名软件开发工程师。我通过使用技术来解决当前时代的一些大的社会问题。"
      3:
        image: 'notes/csd_concept_binary_data_3.png'
        text: "你可能听说过计算机是通过1和0来工作的。但今天，几乎没人直接使用这些1和0与据算计打交道。但是1和0在计算机内部的工作原理上，发挥了巨大的作用。"
      4:
        image: 'notes/csd_concept_binary_data_4.png'
        text: "在计算机里，电线和电路运送所有的信息。那我们是如何用电流来存储或表达信息的呢？"
      5:
        image: 'notes/csd_concept_binary_data_5.png'
        text: "如果你有一条线，当有电流通过它时，电信号要么是开，要么是关。这没有太多的选择，但这是非常重要的开始。通过一条电线，我们能表达是或否，真或假，1或0，或者别的有两个选项的东西。单条线路的开/关状态被称作一个比特，它是计算机能够存储的信息的最小单元。"
      6:
        image: 'notes/csd_concept_binary_data_6.png'
        text: "如果用更多的线路，就能得到更多的比特：也就是更多的1和0。有了更多的比特，你就能表达更复杂的信息了，但是为了理解这些，我们需要学习二进制数字系统。"
      7:
        image: 'notes/csd_concept_binary_data_7.png'
        text: "在十进制系统中，我们有从0到9的10个数字，这是我们学到的如何来计数的方式。在二进制系统中，我们只有两个数字：0和1。用这两个数字，我们能数出任何数字。"
      8:
        image: 'notes/csd_concept_binary_data_8.png'
        text: "它是这样工作的。在一个我们常用的十进制数字系统中，每一位数字都表达bu不同的数值。有个位、十位、百位等等。例如，百位上的9表示900。在二进制中，每一位也表达一个值。但它不像十进制系统那样每次乘以10，而是乘以2。因此，有1位，2位，4位，8位等等。例如，十进制的数字9在二进制系统中是1001。为了计算这样一个数，我们加上了1个8，0个4，0个2，1个1。几乎没人这样数数，因为计算机会帮我们数。最重要的是，任何数字都能只用1和0，或者通过一系列的线路的开和关来表示。你用的线路越多，存储的数字就越大。用8条线，你就能存储0到255之间的数字。这是8个1。只用32条线，你能存储从0到超过40亿的数字。通过二进制数字系统，你能表达任何数字。"
      9:
        image: 'notes/csd_concept_binary_data_9.png'
        text: "但是别的类型的信息怎么办呢？比如文本、图片或声音？所有这些都会被表达成数字。思考一下字母表中的所有字母。你可以给每个字母都分派一个数字。1表示A，2表示B，等等。然后你能用一系列的数字表示任何词语或段落。正如我们开始提到的，这些数字能被存储成电信号的开或关。你看到的网页上的每一个词，或你的电话使用的系统，都是这样的。"
      10:
        image: 'notes/csd_concept_binary_data_10.png'
        text: "现在，让我们思考一下图片、视频、以及屏幕上，你能看到的所有图形。"
      11:
        image: 'notes/csd_concept_binary_data_11.png'
        text: "所有这些图片都是由叫做像素的微小的点组成的，每个像素都有一个颜色。每种颜色都能表达位数字。想象一下，一张普通的图片有几百万个像素，一个普通的视频每秒会显示30张图片，这是非常多的数据。"
      12:
        image: 'notes/csd_concept_binary_data_12.png'
        text: "每个声音实际上都是空气中一系列的振动。振动能够被表达为波形。波形上的任何一点都能够被表示为一个数字。通过这种方法，任何声音都能够被分解成一系列的数字。如果你想听到高质量的声音，你可以用32位的音频或者8位的音频。更多的比特意味着更大范围的数字。"
      13:
        image: 'notes/csd_concept_binary_data_13.png'
        text: "当你用计算机写代码或者制作自己的应用时，你不会直接处理1和0。但你需要处理图片、声音或视频。因此，如果你希望理解计算机内部时如何工作的，这都可以归结为简单的1和0，以及它们后面的线路上的电信号。"
    csd_concept_circuits_logic:
      1:
        image: 'notes/csd_concept_circuits_logic_1.png'
        text: "关于电路，我发现最酷的事情之一，就是如果我有了一个创意，电路能用来表现艺术。我也能用电路来获得灵感。因此，如果你有了好主意，你可以通过技术来实现这些创意。"
      2:
        image: 'notes/csd_concept_circuits_logic_2.png'
        text: "计算机的每个输入输出实际上都是一种信息，都是通过电信号的开或关，或者叫做1和0来表示的。"
      3:
        image: 'notes/csd_concept_circuits_logic_3.png'
        text: "为了处理输入的信息，并且输出信息，计算机需要修改并混合输入信号。为了做到这点，计算机有数百万个微小的电子组件，来组成整个电路。"
      4:
        image: 'notes/csd_concept_circuits_logic_4.png'
        text: "让我们更深入的看看线路如何更改并处理这些用1和0表达的信息的。这是一个非常简单的线路。它输入了一个电信号，开或关，然后翻转了它。因此，如果你给它的信号是1，那么电路会给你0，并且如果你给电路一个0，它会给你一个1。进去的信号总是和输出的信号不同，我们称它为”否“。"
      5:
        image: 'notes/csd_concept_circuits_logic_5.png'
        text: "更复杂的一些线路能够获取多个输入，并很合它们，然后给出一个不同的结果。在这个例子中，线路有两个电信号输入，每一个都有可能是1或0。如果其中一个信号是0，那么结果就是0。只有第一个和第二个信号都是1时，它才会给你1。我们将这个电路叫做”与“。"
      6:
        image: 'notes/csd_concept_circuits_logic_6.png'
        text: "这里有非常多像这样执行简单逻辑的微小的线路。通过将这些线路连接到一起，我们能制造出更复杂的线路，执行更复杂的计算。"
      7:
        image: 'notes/csd_concept_circuits_logic_7.png'
        text: "例如，你能制造一个电路将两个比特加到一起，这叫做加法器。这个电路有两个独立的输入的比特，每一个都能是1或0，将它们加到一起来计算和。和有可能是0加0等于0，0加1等于1，或者1加1等于2。你需要两条线路输出，因为它有可能需要两个二进制位来表达和。一旦你有了一个加法器能将两个比特的信息加到一起，你能将多个加法电路并排到一起，将更大的数字加到一起。"
      8:
        image: 'notes/csd_concept_circuits_logic_8.png'
        text: "例如，这是一个8比特的加法器，将25和50加到一起。每个数字都用8比特来表示，需要16个不同的电信号进入电路。这个8比特的加法器内部由很多小加法器组合在一起，来计算结果。"
      9:
        image: 'notes/csd_concept_circuits_logic_9.png'
        text: "不同的电路能够执行不同的简单计算，比如减法或乘法。事实上，你的计算机在处理信息时所做的，就是将许多简单的操作放到一起。每个独立的操作通过计算机完成的操作，对于人来说都非常简单，但计算机里的电路非常的快。"
      10:
        image: 'notes/csd_concept_circuits_logic_10.png'
        text: "以前，这些电路非常的杯中，一个8位的加法器和bing'xiang冰箱一样大，并且需要数分钟才能完成一个简单的额计算。今天，计算机的电路非常的小，而且比以前快了很多。为什么越小的计算机越快呢？因为电路越小，电信号需要走过的距离就越小。电子移动速度和光速差不多，这也是为什么现代电路每秒能执行数十亿次计算的原因。"
      11:
        image: 'notes/csd_concept_circuits_logic_11.png'
        text: "因此，无论是你玩游戏、录视频，或是探索太空，每一件事情都需要技术用非常快的速度处理非常多的信息。在这些复杂的事务背后，是非常多的微小的电路来将二进制信号转换为网站、视频、音乐和游戏。这些电路也帮助我们解码DNS来诊断并治疗疾病。那么，你想用这些线路做什么呢？"
    csd_concept_memory_cpu_input_output:
      1:
        image: 'notes/csd_concept_memory_cpu_input_output_1.png'
        text: "嗨，我是Madison Maxey。我有一家公司，叫做Loomia，我们在制作一些聪明的布料，从而制作出聪明的衣服和软的产品。当它做好后，能够颠覆整个纺织行业。"
      2:
        image: 'notes/csd_concept_memory_cpu_input_output_2.png'
        text: "我是Danielle Applestone，我是Othermachine公司的CEO。我们在制作桌面级的铣床。铣床有一个旋转的切割工具，通过移动它来切割材料，创建3D物体。"
      3:
        image: 'notes/csd_concept_memory_cpu_input_output_3.png'
        text: "在这之下，所有计算机都在做同样的4件基础的事情。它们输入信息，存储和处理信息，然后输出信息。这些每一件事情都是由计算机的不同部分完成的。"
      4:
        image: 'notes/csd_concept_memory_cpu_input_output_4.png'
        text: "输入设备从外部世界获取输入，并转换为二进制信息。存储用来存下这些信息。还有一个中央处理单元（CPU），处理所有的计算。最后，输出设备将这些信息转换为物理的输出。"
      5:
        image: 'notes/csd_concept_memory_cpu_input_output_5.png'
        text: "让我们先说说输入。计算机能够huo获取很多不同种类的输入，例如计算机的键盘，手机的触摸屏，照相机，麦克风或者GPS。甚至是汽车上的传感器，恒温器或无人飞机也是不同的输入设备。"
      6:
        image: 'notes/csd_concept_memory_cpu_input_output_6.png'
        text: "现在，让我们看一个简单的例子，看看输入是如何在计算机中旅行，并变成输出的。当你按下键盘上的键时 - 比如字母”B“。键盘会将这个字母转换为一个数字。这个数字通过二进制，1和0，来发送至计算机。"
      7:
        image: 'notes/csd_concept_memory_cpu_input_output_7.png'
        text: "从这个数字开始，CPU开始计算如何显示字母\"B\"的每个像素。计算器从内存中请求一步步的指令，然后告诉它如何画出字母”B”。CPU运行这些指令，然后将结果按照像素存在存储中。"
      8:
        image: 'notes/csd_concept_memory_cpu_input_output_8.png'
        text: "最后，这些像素信息作为二进制信息发送给屏幕。屏幕是一个输出设备，能够将二进制信号转换为有颜色的小光点，从而让你能看见。"
      9:
        image: 'notes/csd_concept_memory_cpu_input_output_9.png'
        text: "这些发生得非常快，感觉是实时的。但计算机在你的手指按下字母开始，显示每个字母都需要运行好几千条指令。"
      10:
        image: 'notes/csd_concept_memory_cpu_input_output_10.png'
        text: "在那个例子中，输出设备是屏幕。还有很多中不同的输出设备，它们从计算机接收二进制信号，然后输出到物理世界中。例如，扬声器能播放声音，3D打印机能够打印物体。输出设备也能控制物理世界的移动，比如机器人的手臂，汽车的马达，或者我的公司的铣床切割工具。通过提高计算与存储的尺寸和速度，各种新的输入和输出让计算机能够与世界进行全新的交互方法。"
      11:
        image: 'notes/csd_concept_memory_cpu_input_output_11.png'
        text: "越复杂的任务，就越需要更多的输入输出的信息，更强大的处理能力和存储。往屏幕上打印字母可能很容易，但是做出复杂的三维图像或录制高清电影，现代计算机经常也需要多个CPU来处理所有的信息，还需要好几十亿字节的存储来保存它。"
      12:
        image: 'notes/csd_concept_memory_cpu_input_output_12.png'
        text: "无论你用计算机做什么，都有这些单独的步骤：从物理世界输入信息，存储和处理这些信息，然后输出到物理世界。"
    csd_concept_hardware_software:
      1:
        image: 'notes/csd_concept_hardware_software_1.png'
        text: "嗨，我是Erica Gomez，我是亚马逊网站的一名工程师经理。做技术工作最好的一件事，就是每天我都能带上我的狗一起去上班。我的工作是保证软件产品能够正常发布，而她的工作是躺在我的桌下打盹，还大声的打鼾。"
      2:
        image: 'notes/csd_concept_hardware_software_2.png'
        text: "我是Jerome Holman，我是Xbox团队的一名产品经理，我在做一项非常有趣的工作：基本上是将硬件和软件组合到一起，成为你喜爱的Xbox上的游戏。"
      3:
        image: 'notes/csd_concept_hardware_software_3.png'
        text: "当你观察计算机设备内部时，能够看到一大堆电路、芯片，电线，扬声器，插头等等所有东西。这些都是硬件。"
      4:
        image: 'notes/csd_concept_hardware_software_4.png'
        text: "但你看不见软件。软件是所有的计算机程序，或者叫做代码，它们在机器上运行。软件从应用程序、游戏到网页无所不包，还有我们亚马逊团队用来理解客户行为的数据科学程序也是软件。"
      5:
        image: 'notes/csd_concept_hardware_software_5.png'
        text: "但是硬件和软件是如何交互的呢？让我们先看看计算机的中央处理单元，或者成为CPU。"
      6:
        image: 'notes/csd_concept_hardware_software_6.png'
        text: "CPU是计算机的主芯片，控制了所有其它部分。一个CPU需要做不同的事情，因此它的里面会有小一点的，能够处理更简单一些的特定任务的部分。它有电路来做简单的数学和逻辑运算。还有其它电路向计算机的其它部分发送和接收信息。"
      7:
        image: 'notes/csd_concept_hardware_software_7.png'
        text: "CPU最神奇的地方是，它知道何时用哪部分线路。CPU接收简单的命令来明白用哪一部分来完成一个特定的任务。例如，一个“add”（加法）命令告诉计算机用它的外电路来计算一个新的数字，然后用\"store\"（存储）命令来告诉CPU用不同的电路来将结果放到存储中。"
      8:
        image: 'notes/csd_concept_hardware_software_8.png'
        text: "像数字一样，所有这些简单的命令都被表达为1和0，或电信号的开关。二进制命令被存储在内存中，CPU将它们一条条取出并执行。实际上，命令序列就是一个非常简单的计算机程序。"
      9:
        image: 'notes/csd_concept_hardware_software_9.png'
        text: "二进制代码是最基本的软件形式，它控制着计算机的所有硬件。现在，没人再用二进制编写软件了。它太费时间了！"
      10:
        image: 'notes/csd_concept_hardware_software_10.png'
        text: "今天，我们用这个（Python），或这个（Ruby），甚至这个（模块化编程）来写软件。像这些一样的程序语言让你能输入像英语一样的命令。"
      11:
        image: 'notes/csd_concept_hardware_software_11.png'
        text: "要在屏幕上画一个矩形，你只需要一个命令。高级的命令会转换为几百条，甚至几千条CPU能够理解的简单的二进制命令。软件告诉CPU要做什么。当你一边听音乐，一边浏览网页，还一边和朋友聊天，你的计算机在同时运行多个软件。"
      12:
        image: 'notes/csd_concept_hardware_software_12.png'
        text: "那么，计算机如何在同时处理所有这些程序，CPU又是如何同时运行它们呢？为了理解它，我们需要看一看操作系统。"
      13:
        image: 'notes/csd_concept_hardware_software_13.png'
        text: "操作系统是计算机的主程序，它管理着其它软件如何使用计算机的硬件。例如，我帮助创建了运行在大多数个人电脑上的Windows操作系统。"
      14:
        image: 'notes/csd_concept_hardware_software_14.png'
        text: "操作系统是一个有着特殊能力的程序，它会控制计算机上的其它软件。它让你通过将新程序读入计算机的存储来安装它。它决定了什么时候一个程序能被中央处理器运行，是否这个程序能存储计算机的输入和输出设备。当你认为你的计算机同时在运行多个程序时，实际上，你的操作系统只是在非常快速的在这些程序间切换，将一秒分成多个部分来共享CPU。"
      15:
        image: 'notes/csd_concept_hardware_software_15.png'
        text: "每个计算机都有一个操作系统来管理软件，控制硬件。"
      16:
        image: 'notes/csd_concept_hardware_software_16.png'
        text: "软件是一系列命令组成的简单的二进制代码，而二进制代码只是流动在几十亿个微小电路上的电信号。"
      17:
        image: 'notes/csd_concept_hardware_software_16.png'
        text: "计算机有潜力能做各种令人惊奇的事情。但能让计算机变聪明，或者有用处的，只有你。当你学学习编程序时，你会定义想要解决的问题，然后写软件来将这些想法变为现实。"
