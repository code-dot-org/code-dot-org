zh:
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: 欢迎来到你第一个《编程一小时》课程！让我们立刻开始吧。
      2:
        image: notes/hoc1_2.jpg
        text: 我们将使用模块化的，一个可视化编程语言。你只需要拖放块来进行编程。
      3:
        image: notes/hoc1_3.jpg
        text: '大多数代码都是通过打字输入的，但模块化的是可视的。每个块对应于一行"真正的"代码。'
      4:
        image: notes/hoc1_4.jpg
        text: 你将会学习计算机科学的基础概念。这些概念广泛的应用于各个领域，从应用程序到控制火星车。
      5:
        image: notes/hoc1_5.jpg
        text: 一个程序是一组让计算机遵循的指令。
      6:
        image: notes/hoc1_6.jpg
        text: 您的第一个程序的目标是要让愤怒的小鸟通过一个迷宫去打绿色的猪。
      7:
        image: notes/hoc1_7.jpg
        text: 左边的迷宫是运行你的程序的地方。迷宫下面是每个谜题的说明。
      8:
        image: notes/hoc1_8.jpg
        text: 中间的工具栏里有愤怒的小鸟的命令。你将用他们来生成你的代码。
      9:
        image: notes/hoc1_9.jpg
        text: 右边是工作区，你可以从工具栏里面把模块拖到上面来编程。如果要删除一个块，将它拖到角落的垃圾箱里面。
      10:
        image: notes/hoc1_10.jpg
        text: 每个模块对应一条命令。如果你把”向前移动“块拖到工作区，并按”运行程序“，这只小鸟将在迷宫里向前移动一步。
      11:
        image: notes/hoc1_11.jpg
        text: 需执行多个操作时，将多个模块拖到工作区中，并将他们连在一起。小鸟会从上到下执行所有命令。
      12:
        image: notes/hoc1_12.jpg
        text: 如果你运行了一个程序，但是想要修改它再重试，按”重置“按钮。
      13:
        image: notes/hoc1_13.jpg
        text: 让我们去抓住那些猪!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: 你好，我叫 JR! 每一个赛车团队都需要计算机科学家来帮助其队伍赢得比赛。他们通过分析数据来帮助赛车跑得更快。
      2:
        image: notes/stage5_2.jpg
        text: 在下面的这些益智游戏中，你会扮演一名画家，你的任务就是在他们所到之处的后面画一条线。
      3:
        image: notes/stage5_3.jpg
        text: '该模块的意思是"向前移动 100 个像素。"像素是构成你屏幕画面的一个个非常小的点。'
      4:
        image: notes/stage5_4.jpg
        text: '这个模块的意思是"右转 90 度"。改代码会将你的艺术家在迷宫拼图块"转"相同的量。'
      5:
        image: notes/stage5_5.jpg
        text: 点击任意模块上的箭头来让游戏中的艺术家转向或向前移动。试着玩几局来熟悉这些新模块。
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: 你好，我是波拉！在接下来的益智游戏中，你将扮演一个准备平整土地并开始播种的农夫。
      2:
        image: notes/stage9_2.jpg
        text: 你要帮助她移出所有的土堆和填平所有的洞。
      3:
        image: notes/stage9_3.jpg
        text: 这个新模块会从土堆上移走一铲土并填到洞里。
      4:
        image: notes/stage9_4.jpg
        text: 每一个小土堆和坑洞的大小都不相同，所以你必须告诉农夫要使用几铲来完成工作。
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: 你好，我是凯蒂 ！计算机科学最令人兴奋的事情之一就是计算机程序可以与人互动。
      2:
        image: notes/flappy02.jpg
        text: 当有人在电脑或手机上点击或打字时，都会触发一个『事件』，由一些代码来决定当『事件』发生时要做什么。
      3:
        image: notes/flappy03.jpg
        text: '例如，您可能有一个《事件处理程序》，说："当鼠标单击时播放声音" '
      4:
        image: notes/flappy04.jpg
        text: 你听说过游戏 FlappyBird 吗? 通过使用事件处理程序，我们要学习编程让 FlappyBird 变成我们自己的版本 ！
      5:
        image: notes/flappy05.jpg
        text: 你拖放的模块代表了对计算机的命令。实际上，每个模块是真正的代码来表达的。
      6:
        image: notes/flappy06.jpg
        text: '如果你看看工作区中，有一些为您填写的绿色块-这些都是"事件处理程序"'
      7:
        image: notes/flappy07.jpg
        text: '如果要让鸟在您单击鼠标时飞行，你可以通过将"飞行"块附加到适当的事件处理程序中，现在在你的游戏只要你点击鼠标，鸟就会飞起来。'
      8:
        image: notes/flappy08.jpg
        text: 在这项活动的每个拼图中，我们会介绍新类型的事件，在工作区中，它们是绿色模块。您可以决定添加适当的模块来响应这些事件。
      9:
        image: notes/flappy09.jpg
        text: '当你看到一个像这样的下拉箭头时，这意味着您可以更改的设置 - 比如当flappy掉到地上时播放其中的某个声音。'
      10:
        image: notes/flappy10.jpg
        text: 在最后的谜题，你可以创建自己的游戏，并将它分享给你的朋友。玩得愉快！
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: 你好，我是马克 ！让我们来学习循环。通过使用循环你可以让计算机将任何一组动作不停重复, 直至数千或甚至几十亿次。
      2:
        image: notes/hoc2_2.jpg
        text: 在这个关卡中，我们想要将这只鸟向前移动 5个空格来抓到那只猪。
      3:
        image: notes/hoc2_3.jpg
        text: 让我们使用新的”重复“模块来帮我们走出迷宫。
      4:
        image: notes/hoc2_4.jpg
        text: 尝试移除5个“向前移动”块...
      5:
        image: notes/hoc2_5.jpg
        text: 我们可以在“重复”块里放入”向前移动“块，并且在上面写一个数字来表示要重复多少次。
      6:
        image: notes/hoc2_6.jpg
        text: '这一点很重要： 你可以在"重复"块中放多个命令。'
      7:
        image: notes/hoc2_7.jpg
        text: '试试看使用新的"重复"模块吧！'
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: '你好，我是克里斯。在加盟迈阿密热队之前，我在乔治亚理工学院学习计算机科学。让我们试试新的"重复直到"模块。'
      2:
        image: notes/hoc3_2.jpg
        text: 如果我们不知道小鸟要走多少步才能到达猪呢？
      3:
        image: notes/hoc3_3.jpg
        text: 如果我们在”重复直到“块里放一个”向前移动“块，小鸟会向前移动直到它抓到猪（或者撞上一堵墙）。
      4:
        image: notes/hoc3_4.jpg
        text: '这一点很重要： 就像之前，我们可以在"重复直到"模块里放多个模块，所有这些模块都会被重复。'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: '你好，我是比尔！让我们来学习一个新的基本概念："如果"语句。计算机通过这个语句做决定。'
      2:
        image: notes/hoc4_2.jpg
        text: '你每天都在使用"如果"语句。在你早上出门之前，你会想如果外面在下雨，我最好穿上我的夹克。'
      3:
        image: notes/hoc4_3.jpg
        text: 我们可以让僵尸去检查左边是不是有路，而且如果他发现左边确实有路，我们就让他向左转。
      4:
        image: notes/hoc4_4.jpg
        text: '要编写这段代码，我们需要拖出一个"如果"块，并在里面放一个"左转"块。'
      5:
        image: notes/hoc4_5.jpg
        text: '现在，如果我们在这段代码上面放一个"向前移动"的块，并且用一个"重复"块来包含住这段代码，每一次僵尸移动时候，他就会检查是否左边有路并且向左转。要做到每一步都进行这个检查，"重复"命令是关键。'
      6:
        image: notes/hoc4_6.jpg
        text: 如果语句是计算机科学中非常重要的一种语句。我写的第一个程序是一个井字游戏，在里面，我使用了“如果”语句说，如果对方马上就要赢了，就在那个位置上打上自己的符号。
      7:
        image: notes/hoc4_7.jpg
        text: '学习如何使用"如果"块'
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: '你好，我是 Saloni。我用计算机科学来帮助解决健康和医学上的问题。让我们来学习如何使用 "如果-否则“ 模块。这个模块和"如果"模块类似，区别仅是在”如果“模块的结尾加上”否则”部分。'
      2:
        image: notes/hoc5_2.jpg
        text: 如果我把”向前移动“块放在标注着”做“的地方，并且把”左转“块放在写着”否则“的地方，这表明僵尸将会在这两者之间做一个选择。如果前面有路，僵尸就会往前走，否则（意味着前面没有路），僵尸就会向左转。
      3:
        image: notes/hoc5_3.jpg
        text: 与“如果”模块类似，我们可以将“如果-否则”模块放在一个“循环”模块内，这样僵尸就不停的移动，“如果-否则”模块则不断的检查是否有什么方向可以拐弯。
      4:
        image: notes/hoc5_4.jpg
        text: 现在，让这些僵尸回老家吧！
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: “如果-否则” 语句描述在两个事件间的选择。让我们看看一个例子，与我们的好朋友松鼠斯奎特一起使用“如果-否则”语句。
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: 这个语句块看起来和“如果”条件语句块一样，但在它的下面多出了一个“否则”语句块部分。 如果我加一个“前进”块到“做”的地方，再加一个“向左转”块到“否则”的地方，这样一来，如果小松鼠斯奎特的前方有路，那么他就会向前走。如果他前面没有路，斯科莱特就会向左转。
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: '它会决定并执行两个操作中的一个。就像"如果"模块一样，你可以把"如果 否则"模块放在"重复"模块中。'
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: 现在 让我们来帮助小松鼠斯奎特得到那颗橡果。
    function:
      1:
        image: notes/stage13_1.jpg
        text: "Hi, I'm Brina, an engineer at Instagram. A function is certain lines of code that you want to use over and over again, so instead of writing that code out everytime, you can just use one block."
      2:
        image: notes/stage13_2.jpg
        text: "We're going to learn how to define functions. Function definitions have a star in the corner. The name of the function is written on the top line."
      3:
        image: notes/stage13_3.jpg
        text: |-
          The blocks that go inside the definition tell us what it does. So this function definition is called "fill 5" and it's made up of a "repeat" block and a "fill" block.
      4:
        image: notes/stage13_4.jpg
        text: '虽然定义放在工作区中，但农民不会运行该函数。除非我们从函数类别中拖出"填充 5"功能块。'
      5:
        image: notes/stage13_5.jpg
        text: '让我们将 "fun" 放回 "FUNction!" '
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: '你好，我是Makinde。让我们一起来学习“当”模块吧。 '
      2:
        image: notes/stage9_6.jpg
        text: 'The "while block" will do whatever you put inside it AS LONG AS the statement on the top is TRUE.'
      3:
        image: notes/stage9_7.jpg
        text: 打个比方，如果农民站在土堆上时，只要她脚底下还有图，她就会不停的移除一铲土。
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: "Hi, I'm Trina, and I work for Pixar. I've worked on a bunch of movies, including Shrek."
      2:
        image: notes/stage11_2.jpg
        text: 这是新的“计数”循环。它能反复执行某些操作，你可以对这些操作做少量的修改。
      3:
        image: notes/stage11_3.jpg
        text: 'In this example, our "counter" loop says "count with counter from 50 to 90 by 10" and inside it, we have our "draw a square" block. Drag the "counter" block from the "Variables" section into the "length" spot.'
      4:
        image: notes/stage11_4.jpg
        text: "This means our artist is going to draw a square that has 50 pixel length sides, then it will add 10 to that and draw a square with 60 pixel length sides. Then it will keep adding 10 and drawing squares until it reaches 90. So we'll have squares of 50, 60, 70, 80, and 90."
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: "Hi, I'm Janete, and I'm an engineer at Zynga."
      2:
        image: notes/stage15_2.jpg
        text: 如果我们要画出一大堆有着不同边长的三角形，怎么做才好呢？
      3:
        image: notes/stage15_3.jpg
        text: We could write all that code out by hand or we can use a function with parameters.
      4:
        image: notes/stage15_4.jpg
        text: 'To do this, click the blue star on the "draw a triangle" function definition. Then drag "input name" into the "input" block.'
      5:
        image: notes/stage15_5.jpg
        text: 接下来，如果你在写着“x”的区域输入“长度”，然后按下“Enter”键，就可以提你的函数建立一个名为“长度”的输入。
      6:
        image: notes/stage15_6.jpg
        text: '然后点击星星。现在，点击的变量类别并将"长度"块拖动到您的函数定义中的"向前"模块内。最后将旧编号块移除。'
      7:
        image: notes/stage15_7.jpg
        text: 'To use your function with parameters, click on the functions category and drag out your "draw a triangle with length" function.'
      8:
        image: notes/stage15_8.jpg
        text: 现在你可以使用数字模块输入不同的数字来绘制不同大小的三角形。
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: 恭喜你！用你在上一个关卡当中写的程序，你可以让任何一个机器人（僵尸，小鸟，火星探测器，自动驾驶车），在任何一个无分支的迷宫里找到出去的路。
      2:
        image: notes/hoc6_2.jpg
        text: 你在这里所使用的基本概念是所有程序的核心。我们学习了重复循环语句，重复直到语句，如果语句，和如果否则语句。
      3:
        image: notes/hoc6_3.jpg
        text: 如果你很喜欢这一个小时的编程体验，欢迎访问 code.org 来继续你在计算机科学的学习！当你完成我们的20小时课程，你就熟练掌握了编程的基础，可以开始学习如何编写手机应用程序，机器人程序，游戏，随便你。
      4:
        image: notes/hoc6_4.jpg
        text: 技术正在改变我们所做的一切，而不管你是否年轻： 编程是一件很好玩、 很有创意的事，任何人都可以学习 ！
    20_wrapup:
      1:
        image: notes/bird.png
        text: 即将推出笔记版本！
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: 嗨，我是Lyndsey, 我是一名模特，演员，同时我也会写自己的应用程序。让我们用编程与安娜、爱莎一起探索美丽的冰雪奇缘的世界吧！
      2:
        image: notes/frozen1_2.jpg
        text: 当你滑冰的时候你将会制造出雪花和不同的同案并且让寒冷的冬天变成童话世界，然后再将你的佳作分享给你的朋友们来欣赏。
      3:
        image: notes/frozen1_3.jpg
        text: 接下来的一个小时，你将会学习编程的基础知识。传统的编程通常是使用文本，但我们将使用模块化来编程，你可以拖放可视化的积木块来编写的程序。连大学生都是用这样的方式学习编程的基础知识。而实际上，你仍然是在创造程序代码。
      4:
        image: notes/frozen1_4.jpg
        text: 程序是一组指令，它会告诉计算机需要什么。让我们生成一段代码或者程序，帮助艾莎画出一条简单的线条。以后我们将使用这些技能去创建更多复杂的图案。
      5:
        image: notes/frozen1_5.jpg
        text: 您的屏幕被分成三个主要部分。左边是运行您程序的冰雪世界。关卡说明写在了冰雪世界的下方。
      6:
        image: notes/frozen1_6.jpg
        text: 中间的区域是工具箱，其中的模块是艾莎和安娜能做的动作。
      7:
        image: notes/frozen1_7.jpg
        text: 右边的空白称为工作区，我们将在这里构建程序。你可以使用“向前移动”模块来移动人物。
      8:
        image: notes/frozen1_8.jpg
        text: '在这里"向前移动"模块是指"向前移动 100 个像素"。当我们按下"运行"时，会发生呢？艾莎会向前移动一段距离，这段距离是100 个像素！像素是计算机屏幕上很小很小的一个点。'
      9:
        image: notes/frozen1_9.jpg
        text: 这个关卡中的另一个模块写着：“向右转90度”。 当我们使用这块“向右转”的迷宫块时 它会使艾莎转动一定的角度。你可以试一试看你能让艾莎转动多少度。这个转动的角度是以艾莎前面的路径为基础测量的。所以说, 这个是90度的转动，而这个是120度的转动。
      10:
        image: notes/frozen1_10.jpg
        text: 请记住，您可以通过单击旁边的箭头更改像素和角度的数值。
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: 你好, 我是Paola! 电脑很善于做重复性的事情。你能数到10, 20 或者100, 但是电脑却能数到十亿或者兆。他不会感到无聊而且只需要花几秒钟的时间就能完成。无论是计数、绘画或是做任何事情--电脑都能轻易的重复上百甚至数十亿次。
      2:
        image: notes/frozen2_2.jpg
        text: '在编程中, 我们称这为一个循环。 一个循环就是一遍又一遍的重复执行你的代码。在下一个关卡里, 你要做的就是帮助安娜用"重复"模块来做出一个方形。'
      3:
        image: notes/frozen2_3.jpg
        text: 任何你写在“重复”模块里的代码都将会像你想的一样一遍遍的按顺序执行。
      4:
        image: notes/frozen2_4.jpg
        text: 如要绘制一个正方形， 你可以使用“向前移动”和“向右转”模块四次。但更简单的方法是：告诉计算机”向前移动“和”向右转90度“一次， 然后告诉它重复这一组动作4次。要做到这一点， 你需要将”向前移动“和”向右转“模块放到一个”重复“模块里。
      5:
        image: notes/frozen2_5.jpg
        text: 记住， 你可以改变”重复“模块执行的次数，那么这个模块就会将它里面的任何动作执行所指定的次数。
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: 你好， 我是Chris Bosh。 我是一个职业篮球队员， 我曾在上大学的时候写过代码。
      2:
        image: notes/frozen3_2.jpg
        text: 在计算机科学中最重要的概念之一是如何定义新命令。 大多数计算机编程语言只有约100个左右的关键词和命令。而真正的艺术所在就是如何使用这些已有的模块来定义出你自己的命令。
      3:
        image: notes/frozen3_3.jpg
        text: "Once you've taught a computer how to do an action once using this sequence of commands, you can make up your own name for that action so it's easy to repeat it later. When you define your own command and give it a name, that's called a function."
      4:
        image: notes/frozen3_4.jpg
        text: "Hi, I’m Jess. When programming with blocks, you would use functions if there are a set of actions you would like to use lots of times. For example, you've written code to create a square."
      5:
        image: notes/frozen3_5.jpg
        text: 'You can define this as a function called "create a square." '
      6:
        image: notes/frozen3_6.jpg
        text: Now you have a new block that you can use multiple times to create multiple squares.
      7:
        image: notes/frozen3_7.jpg
        text: A lot of simple shapes can be used to create more complex patterns. In the next puzzle, the code you recently wrote to make a circle is available to you as a new function that can make circles of different sizes. Can you use it to help Elsa create intricate and beautiful patterns in the snow?
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: "We're going to create games using Play Lab. Good games have a story, and every story has actors. We'll learn how to make our actors like witches, alinens, and animals speak, move, and interact with each other. By the end of this tutorial, you can build a game from scratch and share it with your friends."
      2:
        image: notes/playlab_intro_2.png
        text: Your screen is split into 3 main parts. On the left is the game space where your program will run. The instructions for each level are written below.
      3:
        image: notes/playlab_intro_3.png
        text: "The middle area is the toolbox, and each of these blocks is a piece of code. The white space on the right is called the workspace and this is where we'll build our program."
      4:
        image: notes/playlab_intro_4.png
        text: |-
          To start off, you'll need to link your blocks to the orange "when run" block. You can link multiple blocks together by dragging them out until you see the yellow line, and then they'll snap together.
      5:
        image: notes/playlab_intro_5.png
        text: |-
          In this first puzzle, our actor is a penguin and we'll be making it say "Hello!" by dragging the say block out, linking it to the when run block, and typing in "Hello." We can also make the penguin move by using the move right and move left blocks. Once you have your blocks in place, hit the run button to see what you've programmed.
      6:
        image: notes/playlab_intro_6.png
        text: "Get started and by the end, you'll be able to create your own game with all kinds of players that can interact, turn happy or sad, score points, or throw fireballs, or even vanish each other. It's all up to you and the game you want to make."
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: 现在，我们来了解一个所有的游戏程序员每天都要用的东西，它被称为事件。事件可以告诉你的程序去侦听某事的发生。当那件事发生时，它执行相应的操作。
      2:
        image: notes/playlab_events_2.png
        text: 一般事件会去侦听的动作有鼠标单击，按下方向键，屏幕触碰。
      3:
        image: notes/playlab_events_3.png
        text: |-
          Here, we're going to make the space bot greet the earthlings when a player clicks on him. We'll use the "when clicked" block and attach the "say" block to it. When the player clicks on the space bot, everything attached to this "when clicked" event block will be performed. What does your alien say?
      4:
        image: notes/playlab_events_4.png
        text: 'There are also "when arrow" blocks. If you link the "move" blocks to these, you can start to move your actors up, down, left, or right. Step by step, your game is getting more interactive.'
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: 'This is the "repeat forever" block. Anything inside this block will happen forever in the game.'
      2:
        image: notes/playlab_repeat_forever_2.png
        text: |-
          If we want an actor to do something repeatedly, without the player having to do anything, we'll put those blocks inside the "repeat forever" block.
      3:
        image: notes/playlab_repeat_forever_3.png
        text: In this next puzzle, our goal is to help the wizard patrol the boundaries of the kingdom, left and right continuously. Learning how the repeat commands works, will save you a ton of time later when you build your own game.
    C1_artist_intro:
      1:
        image: notes/C1_artist_intro_1.png
        text: These are your draw blocks. Use the correct one to move the artist where he needs to go to fill in the grey lines.
      2:
        image: notes/C1_artist_intro_2.png
        text: "These are jump blocks. When you use these, your artist moves but doesn't draw, so use these to jump to the next grey line."
    C1_bee_level_intro:
      1:
        image: notes/C1_bee_level_intro_1.png
        text: |-
          Aren't bees super cool? In this next set of puzzles, your goal is to help the bee get to the flowers and get nectar from the flowers and fly over to the honeycomb to make honey. You'll need to use the "get nectar" and the "make honey" blocks for this exercise.
      2:
        image: notes/C1_bee_level_intro_2.png
        text: 'Every flower has a different number of nectars: 1, 2, 3, or more. We know how much nectar is in the red flowers, by the little number in the corner. So be sure to get all the nectar from the flower before you move forward. Also, every honeycomb can only hold so much honey: 1, 2, 3, or more. So be sure to make as much honey as the honeycomb can hold.'
      3:
        image: notes/C1_bee_level_intro_3.png
        text: |-
          If you're able to get all the nectar and make all the honey, you succeed and go to the next level. Otherwise, you need to try this puzzle again. Play around a while and see what it feels like to "bee" a programmer!
    C1_bee_loops:
      1:
        image: notes/C1_bee_loops_1.png
        text: "A loop is a repetition of activity. So going into a hive to inspect, I look at a frame and then I put it back, so I repeat that same activity multiple times. It's looping around, doing the same activity multiple times."
      2:
        image: notes/C1_bee_loops_2.png
        text: |-
          In this level, we want the bee to collect three nectars from the flower. Instead of using three "get nectar" blocks, you're going to use the repeat block to get nectar three times. Hit "Run" and see if you got it right. Nice!
    C1_bigevent_unplugged:
      1:
        image: notes/C1_bigevent_unplugged_1.png
        text: "This lesson is called the big event. It's all about how we can control our programs and actually change the way a program runs on the fly using events, like the push of a button or the click of a mouse."
      2:
        image: notes/C1_bigevent_unplugged_2.png
        text: "For this lesson, you'll be controlled with a paper remote control. It's just like a real-live video game."
      3:
        image: notes/C1_bigevent_unplugged_3.png
        text: "An event is an action  that causes something to happen. It's like when you click the button on a mouse and a webpage loads. That's an event. When you touch your screen on a tablet to scroll, that's an event also. Events are a great way of letting the user direct your program whenever they need or want to."
      4:
        image: notes/C1_bigevent_unplugged_4.png
        text: 'Things happen that we all respond to. We feel hungry and we go to the fridge. We hear the mailman come and he puts our mail in the mailbox  and then we go get our mail. Those are just like the events of pushing a button or moving a joystick. They are something that happens that triggers us to do something.'
      5:
        image: notes/C1_bigevent_unplugged_5.png
        text: |-
          In video games, there's an event called "Update" and it happens 30 or 60 times a second. For videogame programmers that's almost more important as an event than the buttons or the joystick.
      6:
        image: notes/C1_bigevent_unplugged_6.png
        text: |-
          The main event we're watching for is that "Update" tick happening. And then we check the joystick in the tick. So we say, "Oh, has somebody pushed the button this frame? Yes or no?" Without events, the player couldn't move, you couldn't jump, you wouldn't be able to control what's going on. The videogame wouldn't be able to animate anything.
    C1_building_foundation:
      1:
        image: notes/C1_building_foundation_1.jpg
        text: "In sand sculpture you've got to know that failure is part of the program. But if you persist, it's just going to get nothing but better and more exciting for you. Persistence is the name of the game. Stay with it, you'll love it."
      2:
        image: notes/C1_building_foundation_2.jpg
        text: "This lesson is called building a foundation. In this lesson, we'll work on a task that is meant to be really difficult. You will figure out how to make a structure at least as tall as one of these cups and it's got to be strong enough to hold the weight of a book."
      3:
        image: notes/C1_building_foundation_3.jpg
        text: "There might be times that our creation doesn't work out. There might be times that we get frusrated and want to give up. There might be a lot of those moments. But if we keep on trying, give it our best shot over and over again, then we're sure to get it before long."
      4:
        image: notes/C1_building_foundation_4.jpg
        text: "Persistence is all about hanging in there when you really want to give up. If you want to create something new and different, there's going to be a lot of failures along the way."
      5:
        image: notes/C1_building_foundation_5.jpg
        text: "The trick to persistence is choosing to keep on going and learn from your failures instead of quitting because you're frustrated. Frustration actually just means there's something wonderful around the corner. So don't quit before you get to it. Wooo!"
    C1_getting_loopy:
      1:
        image: notes/C1_getting_loopy_1.png
        text: "Hi, my name is Miral Kotb and I'm the creator of Iluminate. In my work, there is something we use in both dances and in programming lightsuits. And that is loops! Loops are repeating an action over and over."
      2:
        image: notes/C1_getting_loopy_2.png
        text: "When you repeat something multiple times, like my actions to keep the hula hoop spinning, I'm performing a loop of that action. This is a loop. This is a loop. And this is a loop."
      3:
        image: notes/C1_getting_loopy_3.png
        text: "Today we're going to have a dance party. We'll act out loops with a new dance. The Iteration. We're going to learn about loops using a dance. You will learn a couple of easy steps and repeat them over and over to complete the dance."
      4:
        image: notes/C1_getting_loopy_4.png
        text: Here are the steps you need to learn. Clap your hands. Put your hands behind your head. Put your hands on your waist. Lift your left hand up. Lift your right hand up. Pretty simple, right? You will discover that you can shorten the directions by putting some dance steps in loops.
      5:
        image: notes/C1_getting_loopy_5.png
        text: "We actually do use loops in our dancing. The dancers are wearing computers, all in the same network. I might loop the lights through to the same dancers over and over again. In the loop I might have an iteration where I'll say you want to go loop through these six dancers over and over again and then within the loop you want to increase the speed of the light. And that's all created through loops. Loops are important in computer science because they make our work shorter and easier."
    C1_happy_maps_unplugged:
      1:
        image: notes/C1_happy_maps_unplugged_1.png
        text: "This lesson is called Happy Maps. Today we're gonna help our furry little friend Flurb get to her fruit."
      2:
        image: notes/C1_happy_maps_unplugged_2.png
        text: "Make your Flurb go to your fruit. To do this you'll need to figure out which way the Flurb needs to go and direct her with arrows. In order for the Flurb to get to the apple, what direction does the Flurb have to go? Line to make it go up."
      3:
        image: notes/C1_happy_maps_unplugged_3.png
        text: To get it there you circle the direction that it has to go.
      4:
        image: notes/C1_happy_maps_unplugged_4.png
        text: "Create your algorithm by gluing arrows next to the map that you're trying to solve. The second one it's the same but it's going down."
      5:
        image: notes/C1_happy_maps_unplugged_5.png
        text: "It's like programming with paper. And that's it!"
    C1_maze_debugging:
      1:
        image: notes/C1_maze_debugging_1.png
        text: "Debugging is finding and fixing problems. There are lots of ways to debug problems. One of the easiest is to move step by step until where you find where something goes wrong. Here I'm trying to do a back handspring on the beam but I keep falling off."
      2:
        image: notes/C1_maze_debugging_2.png
        text: "I walked through each part step by step and realized where my mistake was. I wasn't putting my hands on the beam correctly. So I tried another back handspring on the beam with my new hand position and I got it. I was really glad I debugged my back handspring."
      3:
        image: notes/C1_maze_debugging_3.png
        text: "To learn about debugging, we start with a set of blocks already on the stage. You'll notice that these blocks won't get you to the goal. We need to debug the solution and fix it. What went wrong? You'll notice that you needed to keep going west one more block."
      4:
        image: notes/C1_maze_debugging_4.png
        text: "Let's fix this by adding another west block and hitting run to see if you got it right. Yay, you got it!"
    C1_maze_intro_sequencing:
      1:
        image: notes/C1_maze_intro_sequencing_1.png
        text: For this puzzle, you need to get the bird to the pig. Look at the puzzle and see what directions it needs to take.
      2:
        image: notes/C1_maze_intro_sequencing_2.png
        text: |-
          You need to drag the blocks over from the toolbox to the workspace. Make sure it's under the "when run" block and when you think you've got the right solution, then you can click "Run" and watch the bird go to the pig.
    C1_maze_loops:
      1:
        image: notes/C1_maze_loops_1.png
        text: "One that computers are really good at is repeating commands. As a person, you'd get really bored if you had to do the same thing lots and lots of times in a row. But a computer can do the same thing millions or even billions of times and not get bored and be able to carry that out really well."
      2:
        image: notes/C1_maze_loops_2.png
        text: For example, if I wanted to wish everyone on Facebook a happy birthday by sending them an email, it might take me more than century to actually write out all those emails to everyone. But with just a few lines of code, I can have a system send an email to everyone on Facebook wishing them a happy birthday.
      3:
        image: notes/C1_maze_loops_3.png
        text: 'To get the bird to the pig in this level... rather than drag three North blocks on to the workspace, you will use the "repeat" block. Drag the "repeat" block on to the workspace and enter the number 3. Then drag the "move North" block into the "repeat" block and hit "Run" to see if you got it right. Congratulations, you got it!'
    C1_moveitmoveit_unplugged:
      1:
        image: notes/C1_moveitmoveit_unplugged_1.png
        text: "This lesson is called move it, move it. Together we're going to write a program to get our friends from the starting with the compass rose to the smiley face goal."
      2:
        image: notes/C1_moveitmoveit_unplugged_2.png
        text: "But the smiley is face down and only one person knows how to get there. Let's get this program started."
      3:
        image: notes/C1_moveitmoveit_unplugged_3.png
        text: "A program is an algorithm that has been coded into something that can be run by a machine. Most of us think of a program as something that we write for a computer. Programs are really good for that but they're also helpful in other places. You can make your own game or even program a robot to do things for you."
    C1_going_places_safely:
      1:
        image: notes/C1_going_places_safely_1.png
        text: |-
          My name is Jeremiah. Hi! I am seven years old. I love playing on my mom's computer but I always get permission first. "Mom, can I go on the computer? Sure honey!"
      2:
        image: notes/C1_going_places_safely_2.png
        text: "I love my mom's computer because I can go on the Internet. The Internet is kind of like your neighborhood. You can visit cool places, you can talk to family and friends and you can learn lots of new things."
      3:
        image: notes/C1_going_places_safely_3.png
        text: "Yesterday, I visited a zoo that's near my house. I saw a baby zebra. I took her picture and changed the color of her stripes, then added a hat and added it to my collection of wacky animals. Awesome! Later, I went to a place far far away. I visited Kenya. That's a country in Africa. Lots of zebras live there."
      4:
        image: notes/C1_going_places_safely_4.png
        text: |-
          Sometimes on the Internet I talk to people I know, like my grandma who lives in another state. Hi grandma! She's making me cookies that she'll send me for my birthday. "Yummy, I wish the Internet had smellorama!" I can talk to different people on the Internet, like my cousin but I only talk to people I know.
      5:
        image: notes/C1_going_places_safely_5.png
        text: What I like most on the interent is that I get to play fun games. Score! I also like to draw and create new things and share it with my friends. Cool! Sometimes I visit websites where I learn new things but I always stick to websites that are just right for me. Wow, dinosaurs!
      6:
        image: notes/C1_going_places_safely_6.png
        text: 'The Internet is a super fun place. But just like when you cross a street in your neighborhood, you also have to be careful when you go online. Here are three rules to remember. Rule number 1: Always ask your parents first. Rule number 2: Only talk to people you know. Rule number 3: Stick to places that are just right for you.'
      7:
        image: notes/C1_going_places_safely_7.png
        text: "Wow, that was fun! Dinnertime. I'm logging off now. I can't wait to log on again to see where I can visit next."
    C1_pair_programming:
      1:
        image: notes/C1_pair_programming_1.png
        text: "Today we're going to learn about Pair Programming. In pair programming you work as a team. Why should two people use one computer? Because two heads are better than one. In pair programming you and your partner are going to sit down together at one computer and you are both going to work on the same project."
      2:
        image: notes/C1_pair_programming_2.png
        text: "In pair programming, one person is the driver and the other person is the navigator, just like driving a car. The driver sits at the computer and is the one using the keyboard and mouse or touchscreen and controlling the main actions of the computer. The other person is the navigator. The navigator helps the driver by answering the driver's questions and pointing out potential problems or mistakes."
      3:
        image: notes/C1_pair_programming_3.png
        text: "Communication is key to successful pair programming. No insults, be respectful, don't be a bossy navigator, because nobody likes a backseat driver. You and your partner should always be talking. The driver can explain what she or he is doing. And the navigator can help suggest what to do next."
      4:
        image: notes/C1_pair_programming_4.png
        text: The navigator should be thinking about the big picture and the driver focuses on the details. Both roles are important. Pair programming is all about working together as a team.
    C1_planting_seed:
      1:
        image: notes/C1_planting_seed_1.png
        text: "This lesson is called planting a seed and it's going to help us understand algorithms. Algorithms are specific instructions that explain the order in which to do something. Even everyday things like eating breakfast or brushing your teeth are algorithms that require small steps to get a job done."
      2:
        image: notes/C1_planting_seed_2.png
        text: "Computers can be really smart but they can only understand you if you tell them exactly what you want step by step. The great thing about algorithms is that if you follow the instructions in order, you can do something that you didn't know how to do ahead of time. It's like following a recipe."
      3:
        image: notes/C1_planting_seed_3.png
        text: "Today we're going to plant our own seeds using an algorithm. Create your own algorithm by cutting apart the pictures. Select the pictures that show steps in planting a seed and arrange those pictures in the correct order."
      4:
        image: notes/C1_planting_seed_4.png
        text: "Now, it's time for you to see if your algorithm works. Follow the steps in the algorithm very carefully. Are they in the correct order? Did you succeed in planting a seed by following the algorithm? It's like programming with pictures!"
      5:
        image: notes/C1_planting_seed_5.png
        text: "When we want to make chocolate, there are many big steps to that process and each of those big steps has a set of smaller steps and there are different recipes or algorithms depending on how we want the chocolate to taste. Each step is important, even the small ones, so that without one step, the rest of them cannot be completed. Creating algorithms that others can understand is really important. That's why each step has to be written down so that no matter who does it, the result is the same."
    C1_playlab_storytelling:
      1:
        image: notes/C1_playlab_storytelling_1.png
        text: Time to get creative and use your coding skills to tell a story. Your story will have actors and you will be able to make these actors talk and interact with each other. Start thinking of what kind of story you want to tell.
      2:
        image: notes/C1_playlab_storytelling_2.png
        text: |-
          The cat's always been afraid of the dog and what if the cat figures out that the dog is trying to be nice? The "when run" block starts everything. The "move" block will move your character and the "say" block will make your character say whatever you type.
      3:
        image: notes/C1_playlab_storytelling_3.png
        text: 'This is the "when actors collide" block which you can link up to the other blocks.'
      4:
        image: notes/C1_playlab_storytelling_4.png
        text: 'I was making the dog come over and say "Hi" but then the cat got scared so it ran away. "Ahh" If there was more time, it would have been a happy ending. The end!'
    C1_spelling_bee_intro:
      1:
        image: notes/C1_spelling_bee_intro_1.png
        text: This is the spelling bee level. Use the puzzle pieces to move the bee. As it moves, it will collect letters to spell words.
      2:
        image: notes/C1_spelling_bee_intro_2.png
        text: "See if you can spell the word they give you in the box below the stage. But bee careful! Moving the wrong direction will add letters you don't want."
    C1_zuck_repeat_loop:
      1:
        image: notes/C1_zuck_repeat_loop_1.png
        text: "One that computers are really good at is repeating commands. As a person, you'd get really bored if you had to do the same thing lots and lots of times in a row. But a computer can do the same thing millions or even billions of times and not get bored and be able to carry that out really well."
      2:
        image: notes/C1_zuck_repeat_loop_2.png
        text: For example, if I wanted to wish everyone on Facebook a happy birthday by sending them an email, it might take me more than century to actually write out all those emails to everyone. But with just a few lines of code, I can have a system send an email to everyone on Facebook wishing them a happy birthday.
      3:
        image: notes/C1_zuck_repeat_loop_3.png
        text: "In this example, your goal is going to be to move the bird to get the pig. Now, we're going to be able to use the repeat block in order to be able to do this very easily. You can either do this by giving the computer a move forward command five times in order to advance the bird one step each time to the pig or you can just tell the computer to move forward once, and then tell it to repeat that five times and it'll do the same thing."
      4:
        image: notes/C1_zuck_repeat_loop_4.png
        text: 'In order to do this, you drag your move forward command and then you put it inside the repeat block. And you can click on it and tell it how many times you  to repeat the block to tell it how many steps you want it to take forward.'
      5:
        image: notes/C1_zuck_repeat_loop_5.png
        text: "One more thing is you can put as many commands as you want inside the repeat block. So in this example, you're telling it to move forward and turn left, which it'll do five times. Have fun!"
    C2_artist_intro:
      1:
        image: notes/C2_artist_intro_1.png
        text: "You wouldn't even qualify for the race if you don't have people who are proficient in computer science because of how much data the cars collect and the necessity to be able to have people that can write programs to figure out how you continue to figure out how to build performance."
      2:
        image: notes/C2_artist_intro_2.png
        text: "In these puzzles, you'll be an artist that uses a pencil to draw different shapes. Wherever your artist goes, it will draw a line behind you."
      3:
        image: notes/C2_artist_intro_3.png
        text: "To move around the canvas, you'll use the move forward block. Here the move forward block says move forward by 100 pixels. When we hit run, what happens? The artist moves forward a certain amount and that amount is 100 pixels. Pixels are basically very tiny squares on your computer screen."
      4:
        image: notes/C2_artist_intro_4.png
        text: The other block we have in this puzzle says turn right by 90 degrees. And when we drag that out that makes our artist turn a certain amount. So you can play around with how far you want the artist to turn. This is a 90 degree turn.
      5:
        image: notes/C2_artist_intro_5.png
        text: And this is a 120 degree turn. And remember, you can change these values by clicking the arrows next to the numbers for pixels and degrees. Enjoy drawing with your artist!
    C2_bee_conditionals:
      1:
        image: notes/C2_bee_conditionals_1.png
        text: This is the conditional block. It says IF there is nectar or honey that is less than, equal to or greater than a number, THEN do something.
      2:
        image: notes/C2_bee_conditionals_2.png
        text: "This is useful when we don't know how much nectar or honey to get, as we see here with this question mark."
      3:
        image: notes/C2_bee_conditionals_3.png
        text: "In this example, we're going to say IF the purple flower has nectar greater than 0, get nectar. That will tell our bee to keep getting nectar as long as it's there. Ta-dah!"
    C2_binary_bracelets:
      1:
        image: notes/C2_binary_bracelets_1.png
        text: This is the binary bracelets lesson. We are going to code our initials on a bracelet we can wear and show all our friends!
      2:
        image: notes/C2_binary_bracelets_2.png
        text: Binary is a way of representing information using only two options. Sometimes people think of this as only 1s and 0s. But you can represent binary with combinations of on or off, up and down, in and out or really any set of opposites.
      3:
        image: notes/C2_binary_bracelets_3.png
        text: "Hi, I'm Orion and I program robots here at Play-im. All computer and robot brains at their most fundamental level are little electronic gates. When the gate is open, electricity can flow through and when it's closed, electricity can't."
      4:
        image: notes/C2_binary_bracelets_4.png
        text: "An example of binary on the robot is the robot's eyes. The robot's eyes are LEDs and those are lights that are either on or off. It's a binary system, one or the other. We can use the lights to represent binary numbers. If we have a set of robots, we can say that the first robot is the 1s place and the second robot is the 2s place, the third robot is the 4s place and so on. That's how you represent a binary number. The robots will do it with their binary eyes and count it out for you."
    C2_conditionals_with_cards:
      1:
        image: notes/C2_conditionals_with_cards_1.png
        text: This lesson is called conditionals with cards. Every day you make decisions based on what you see and hear.
      2:
        image: notes/C2_conditionals_with_cards_2.png
        text: "I want to walk to the park but first I have to decide whether I should bring an umbrella or not. So I look out the window. If it's cloudy, I'm going to take my umbrella. Else, I'll take some sunglasses. I think I'd better take the umbrella. What I see and hear determines what I take to the park."
      3:
        image: notes/C2_conditionals_with_cards_3.png
        text: |-
          Conditionals are used in games too. Today we're going to practice using conditionals with a card game. In this game, the card that I draw determines what my friends are going to do. If I draw a seven, everyone claps. Else, everyone says "awww." Let's try it! "Awww" "cheers"
      4:
        image: notes/C2_conditionals_with_cards_4.png
        text: I bet you can make up games that are even more fun with conditionals. Give it a try! Conditionals are what make computers seem smart. A computer program that includes conditionals can react to the user and change its course of action.
      5:
        image: notes/C2_conditionals_with_cards_5.png
        text: "Think about your favorite video game. Do you earn more points for some actions than you do for others? This occurs because the computer is using conditionals. It's the way a computer makes a decision. How about, if you hit the target, you earn ten points. Else, you lose three. When you know how conditionals work, you can create all kinds of exciting games."
    C2_artist_debugging:
      1:
        image: notes/C2_artist_debugging_1.png
        text: Here we already have some blocks out in our work space. But there is something wrong.
      2:
        image: notes/C2_artist_debugging_2.png
        text: "Let's debug this code by slowing down the speed and watching it as it goes through each block step by step."
      3:
        image: notes/C2_artist_debugging_3.png
        text: "Oh, there's the problem! The cat's whiskers are 75 pixels long, not 25."
    C2_bee_debugging:
      1:
        image: notes/C2_bee_debugging_1.png
        text: "Have you ever heard of debugging a program? This is the way you figure out what's not working. When you debug code, you identify and remove errors."
      2:
        image: notes/C2_bee_debugging_2.png
        text: "Here we're given a few blocks already in our workplace. We're going to use the step button to walk through the blocks, step by step, to see if this is the right solution and where we may need to fix it."
      3:
        image: notes/C2_bee_debugging_3.png
        text: "Looks like there's our problem! We need one more move forward block. The step button helps us debug our problem by identifying where the error is so we can fix it."
    C2_digital_footprint:
      1:
        image: notes/C2_digital_footprint_1.png
        text: "On your head you hold your hat and your smarts will tell you where you're at and to think about the zoo, and to nod hello to you and you! Use your head when you're online to keep what's yours inside your mind and to know how to be safe, how to give your life some private space! From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      2:
        image: notes/C2_digital_footprint_2.png
        text: "Use your heart to grow and grow, and to give yourself a healthy glow, and to make a valentine, tell someone that you'll be mine! Use your heart when you're online, feel what's right and always kind, and show your friends respect, to be fair and nice on the Internet. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      3:
        image: notes/C2_digital_footprint_3.png
        text: "Use your arms to hug your pet, to keep your clothes from getting wet, and to wear your favorite sleeves and to help you fly and make believe. Use your arms when you're online, to take break and balance time and leave your tech behind and to find yourself a tree to climb. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      4:
        image: notes/C2_digital_footprint_4.png
        text: "Use your gut to store your food, and to listen to its growling mood, to make a belly flop, and to feel the gas in soda pop. Use your gut when you're online, to know to watch for certain signs, and to let it guide the way and tell you when it's not ok. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      5:
        image: notes/C2_digital_footprint_5.png
        text: "So think with your head, and feel with your heart, balance with your arms, listen to your gut, online. Use your legs to run and kick, and to jump and bounce on a pogo stick, and to dance around the block, and to skip along in your smelly socks. Use your legs when you're online, to stand up to bullies who cross the line, and remember to stand tall, be nice to creatures great and small."
      6:
        image: notes/C2_digital_footprint_6.png
        text: From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online! So think with your head, and feel with your heart, balance with your arms, listen to your gut, stand up with your legs. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!
    C2_digital_footprint_v2:
      1:
        image: notes/C2_digital_footprint_v2_1.png
        text: Everytime you go online, you leave a footprint that can be searched, copied, shared, broadcast and is permanent. What kind of digital footprint are you leaving? What kind of digital footprint do you want to leave?
    C2_graph_paper:
      1:
        image: notes/C2_graph_paper_1.png
        text: |-
          This lesson is called "Graph Paper Programming" and it's all about algorithms. Today we're going to learn how to write programs that show each other how to recreate simple black and white images, using only hand drawn arrows.
      2:
        image: notes/C2_graph_paper_2.png
        text: "An algorithm is a list of instructions for completing a task. We'll follow this set of instructions to make the bowl. Algorithms are really helpful when you need someone else to understand how to do something."
      3:
        image: notes/C2_graph_paper_3.png
        text: "If you're writing an algorithm for a computer, you have to break it down to little tiny steps. So finish this row and go to the next, then the next one, and you'll be done."
      4:
        image: notes/C2_graph_paper_4.png
        text: I use algorithms in my work. If I write down all of the steps I can recreate that same piece again, or I can teach someone else to do it. Put the glass in the kiln, fuse it together, follow the rest of the instructions to make the bowl. Algorithms give you a road map for getting something done.
    C2_artist_loops:
      1:
        image: notes/C2_artist_loops_1.png
        text: Here we are going to use the repeat block to help us save steps when we are programming our artist. We already have some blocks out on our stage but they are just there to get us started.
      2:
        image: notes/C2_artist_loops_2.png
        text: To loop those blocks four times to draw the whole square, we just drag out the repeat block and put the moveforward and turn right blocks inside the repeat block. When we hit run, the artist will repeat those steps four times to complete the square.
    C2_bee_loops:
      1:
        image: notes/C2_bee_loops_1.png
        text: "A loop is a repetition of activity. Going into a hive to inspect, I look at a frame, and then I put it back. I repeat that same activity multiple times. It's looping around, doing the same activity multiple times."
      2:
        image: notes/C2_bee_loops_2.png
        text: "This is the repeat block. Whatever you put inside the repeat block will repeat those actions the number of times that you tell it to. For example, in this level, rather than drag out move forward and get nectar three times, we're going to just drag them out once each and repeat the action three times. That made it easy!"
    C2_maze_intro:
      1:
        image: notes/C2_maze_intro_1.png
        text: "Usually programming is all in text but we'll use Blockly which uses visual blocks that you drag and drop to write programs. Under the hood, you're still creating code. To start off, we're going to build code for a program that will help this Angry Bird move through a maze to get to the evil pigs that stole its eggs."
      2:
        image: notes/C2_maze_intro_2.png
        text: "Blockly is split into three main parts. On the left is the bird's maze, where your program will run. The instructions for each level are written below the maze. This middle area is the toolbox and each of these blocks is a command that the bird can understand. The white space on the right is called the workspace and this is where we'll build our program."
      3:
        image: notes/C2_maze_intro_3.png
        text: 'If I drag the move block to our work space and press "Run", what happens? The bird moves forward one box on the grid. And what if I want the bird to do something after it moves forward one box? I can add another block to our program.'
      4:
        image: notes/C2_maze_intro_4.png
        text: |-
          I'm going to choose the "turn right" block and I'll drag it under my move block until the yellow arrow appears. Then I'll drop it and the two blocks will snap together. When I press "Run" again,  the bird will perform the commands that are stacked from top to bottom on our work space.
      5:
        image: notes/C2_maze_intro_5.png
        text: "If you ever want to delete a block, just remove it from the stack and drag it to the trash can. After you've hit run, you can always hit the reset button to get the bird back to the start. Now let's get those pigs!"
    C2_paper_airplanes:
      1:
        image: notes/C2_paper_airplanes_1.png
        text: This lesson is called Real Life Algorithms. Algorithms describe things that people do everyday. Cookie recipes and directions for building a birdhouse are both everyday algorithms.
      2:
        image: notes/C2_paper_airplanes_2.png
        text: "Today we're gonna make, create, and test an algorithm for a paper airplane. But first, we need to break this big project into easy to follow small steps. For making a paper airplane, we need to decide what steps to take and in what order to take them."
      3:
        image: notes/C2_paper_airplanes_3.png
        text: "You'll create your algorithm by first cutting apart the pictures. Next, you'll select the 6 pictures that show the steps needed to make a paper airplane and arrange those pictures in the correct order. After you have everything in order, you will trade algorithms with another student team to test out the algorithm to see if the algorithm works. A well designed algorithm is super important to making the best paper airplane."
      4:
        image: notes/C2_paper_airplanes_4.png
        text: "When we want to make chocolate, there are many big steps to that process. And each of those big steps has its own set of smaller steps. And there are different recipes, or algorithms, depending on how we want the chocolate to taste. Each step is important, even the small ones. So without one step, the rest of them cannot be completed. Creating algorithms that others can understand is really important. That's why each step has to be written down, so no matter who does it, the result is the same."
    C2_playlab_createastory:
      1:
        image: notes/C2_playlab_createastory_1.png
        text: "So far you've been making an animation or a story that does the exact same thing every time you run it. Now you can make an interactive game that you can actually play."
      2:
        image: notes/C2_playlab_createastory_2.png
        text: |-
          There are some new blocks to try out. There's the "when arrow" block and the "move actor" block. You can put these blocks together to move the actors around with the arrow keys. And there are some blocks that do stuff when actors collide or are clicked. Check them out and have fun!
    C2_relay_programming:
      1:
        image: notes/C2_relay_programming_1.png
        text: "Today we're going to do relay programming. It's all about programming under pressure and debugging the mistakes that sometimes happen when you work really quickly or in teams. We'll use graph paper programming to simulate coding, and use relay races to simulate having a deadline."
      2:
        image: notes/C2_relay_programming_2.png
        text: "In relay programming, teams will be racing to finish a graph paper program. You have to check your teammate's work, or debug it, fix it if there's a mistake, add your arrow, and run back and tag your teammate."
      3:
        image: notes/C2_relay_programming_3.png
        text: Programmers use debugging a lot to find and fix problems in their algorithms or code. There are lots of ways to debug problems. One of the easiest is to move step by step until you find where something goes wrong, then fix it.
      4:
        image: notes/C2_relay_programming_4.png
        text: "Here, I'm trying to do a back handspring, but I keep falling off. I walk through each part, step by step, and realize where my mistake was. My coach showed me I wasn't putting my hands on the beam correctly. So I tried another back handspring on the beam with my new hand position, and I stuck it! I was really glad I debugged my back  handspring. We figured it out! Debugging is finding and fixing problems. Nice, good job!"
    C2_zuck_repeat_loop:
      1:
        image: notes/C2_zuck_repeat_loop_1.png
        text: "One thing that computers are really good at is repeating commands. As a person, you'd get really bored if you had to do the same thing lots of times in a row. But a computer can do the same thing millions or even billions of times, and not get bored and be able to carry that out really well."
      2:
        image: notes/C2_zuck_repeat_loop_2.png
        text: "So for example if I wanted to wish everyone on Facebook a happy birthday by sending them an email, it might take me more than a century to actually write out all of those emails to everyone. But with just a few lines of code, I can have a system send an email to everyone on Facebook wishing them a happy birthday. So that's what loops are, and why they're valuable, and something that computers can do very well."
      3:
        image: notes/C2_zuck_repeat_loop_3.png
        text: |-
          In this example your goal is going to be to move the bird to get the pig.  Now we're gonna be able to use the "repeat" block in order to be able to do this very easily. You can either do this by giving the computer a "move forward" command five times in order to advance the bird one step each time to the pig.
      4:
        image: notes/C2_zuck_repeat_loop_4.png
        text: 'Or you can just tell the computer to "move forward" once, and then tell it to "repeat" that 5 times, and it will do the same thing. So in order to do this you drag your "move forward" command, and then you put it inside the "repeat" block.And you can click on it and tell it how many times you want to repeat the block to tell it how many steps you want it to take forward.'
      5:
        image: notes/C2_zuck_repeat_loop_5.png
        text: |-
          Now one more thing is you can put as many commands as you want inside the "repeat" block. So in this example you're telling it to move forward and turn left, which it will do five times. All right good job and have fun!
    C3_artist_functions:
      1:
        image: notes/C3_artist_functions_1.png
        text: "One of the great things in computer programming is once you've taught a computer how to do an action, you can call that function again. You give it a name and then you can call it. That's really like extending the language."
      2:
        image: notes/C3_artist_functions_2.png
        text: "In the program we built, we learned how to draw a square by moving and turning four times. We can take that function and give it a name, draw a square, so that any time we want to do that, we simply say draw a square and it will go back and invoke that function, that code. It will get done for us. We've added that concept to our programming language."
    C3_artist_intro:
      1:
        image: notes/C3_artist_intro_1.png
        text: "You wouldn't even qualify for the race if you don't have people who are proficient in computer science because of how much data the cars collect and the necessity to be able to have people that can write programs to figure out how you continue to figure out how to build performance."
      2:
        image: notes/C3_artist_intro_2.png
        text: "In these puzzles, you'll be an artist that uses a pencil to draw different shapes. Wherever your artist goes, it will draw a line behind you."
      3:
        image: notes/C3_artist_intro_3.png
        text: "To move around the canvas, you'll use the move forward block. Here the move forward block says move forward by 100 pixels. When we hit run, what happens? The artist moves forward a certain amount and that amount is 100 pixels. Pixels are basically very tiny squares on your computer screen."
      4:
        image: notes/C3_artist_intro_4.png
        text: The other block we have in this puzzle says turn right by 90 degrees. And when we drag that out that makes our artist turn a certain amount. So you can play around with how far you want the artist to turn. This is a 90 degree turn.
      5:
        image: notes/C3_artist_intro_5.png
        text: And this is a 120 degree turn. And remember, you can change these values by clicking the arrows next to the numbers for pixels and degrees. Enjoy drawing with your artist!
    C3_artist_nested_loops:
      1:
        image: notes/C3_artist_nested_loops_1.png
        text: "When you put a loop inside of another loop, we call that a nested loop. For example, here we're given the code already to draw one triangle with sides of length 100 pixels using the repeat times block set to three, once for each side of a triangle."
      2:
        image: notes/C3_artist_nested_loops_2.png
        text: "But we want to draw six triangles. In order to do that, we're going to take that loop and place it inside of another repeat times block. Pretty cool!"
    C3_bee_conditionals:
      1:
        image: notes/C3_bee_conditionals_1.png
        text: This is the conditional block. It says IF there is nectar or honey that is less than, equal to or greater than a number, THEN do something.
      2:
        image: notes/C3_bee_conditionals_2.png
        text: "This is useful when we don't know how much nectar or honey to get, as we see here with this question mark."
      3:
        image: notes/C3_bee_conditionals_3.png
        text: "In this example, we're going to say IF the purple flower has nectar greater than 0, get nectar. That will tell our bee to keep getting nectar as long as it's there. Ta-dah!"
    C3_debugging_bee:
      1:
        image: notes/C3_debugging_bee_1.png
        text: "Have you ever heard of debugging a program? This is the way you figure out what's not working. When you debug code, you identify and remove errors."
      2:
        image: notes/C3_debugging_bee_2.png
        text: "Here we're given a few blocks already in our workplace. We're going to use the step button to walk through the blocks, step by step, to see if this is the right solution and where we may need to fix it."
      3:
        image: notes/C3_debugging_bee_3.png
        text: "Looks like there's our problem! We need one more move forward block. The step button helps us debug our problem by identifying where the error is so we can fix it."
    C3_bee_functions:
      1:
        image: notes/C3_bee_functions_1.png
        text: One of the most important concepts in computer science is how to define new commands, how to add your own words to a computer language. Most computer languages have only about one hundred words or commands. The art and magic is in defining your own new words out of these building blocks.
      2:
        image: notes/C3_bee_functions_2.png
        text: "We do this all the time in sports. For example, in basketball, you start by learning how to dribble, how to do a lay-up, how to rebound. Once you've learned these really basic moves, you learn new moves and put together these building blocks, like a pick and roll or give and go. You can then go from there to do more complex plays. Once you learn that play and give it a name, everybody on the team knows how to do it."
      3:
        image: notes/C3_bee_functions_3.png
        text: "Similarly once you've taught a computer how to do an action once using these sequences of commands, you can make up your own name for that action so it's easy to repeat it later. When you define your own command and give it a name, that's called a function. Now we're going to use functions to help the bee."
      4:
        image: notes/C3_bee_functions_4.png
        text: "In this example, our function is called get 2 nectar, this green block right here. We know what get 2 nectar does by looking at this grey box which is the function definition. If we look inside there, the get 2 nectar is going to get nectar and then get nectar again. Always look at what's inside the grey box so that you know what these green function blocks can do."
    C3_bee_nested_loops:
      1:
        image: notes/C3_bee_nested_loops_1.png
        text: "Now we're going to use nested loops with the bee. We're given some starter code which tells the bee to move forward and get nectar three times and then turn right. Let's take that whole piece of code and nest it inside another repeat block and set to repeat three times. Done!"
    C3_bounce:
      1:
        image: notes/C3_bounce_1.png
        text: "You're going to be creating your very own bounce game that you'll be able to share with your friends! How cool!"
      2:
        image: notes/C3_bounce_2.png
        text: To get started, we have to link up the paddle controls to the arrow keys on our keyboard.
      3:
        image: notes/C3_bounce_3.png
        text: "We can do this by linking the when left arrow block to the move left block and the when right arrow block to the move right block. Give it a go and you'll be programming your own bounce game in no time!"
    C3_computational_thinking:
      1:
        image: notes/C3_computational_thinking_1.png
        text: "This lesson is computational thinking. Sometimes learning a new game can be tough, right? At first it might seem really confusing and sometimes, there's no one there to teach you the rules, so you have to figure it out on your own."
      2:
        image: notes/C3_computational_thinking_2.png
        text: "The good news is that you can get better at figuring things out on your own when you know a few thinking tricks. These tricks are unique ways for looking at and solving problems. In this lesson, you'll learn about four tricks and practice them with your friends to figure out the rules to a game."
      3:
        image: notes/C3_computational_thinking_3.png
        text: "When you break down a big problem into smaller pieces, you're using your brain to decompose the big problem. Once we've decomposed the big problem into several smaller problems, we can go on to our next trick, which is called pattern match."
      4:
        image: notes/C3_computational_thinking_4.png
        text: "That's when we look for similarities between things. Once I find the things that are the same, I can figure out what things are different. When I remove those differences, that's called abstraction."
      5:
        image: notes/C3_computational_thinking_5.png
        text: "After I have figured out the steps to solving a problem, I can put those steps in a specific order called an algorithm so that anyone can use my directions to solve that problem. We're going to use these four steps to figure out how to play the game with no rules. By the end of the game, you'll be able to play something that looks like this!"
    C3_crowdsourcing:
      1:
        image: notes/C3_crowdsourcing_1.png
        text: "This lesson is called crowdsourcing. In this lesson we'll use a deck of cards to learn about how much easier some things can be to do in groups instead of trying to do them all alone. So grab some friends and make something awesome. Crowdsourcing is getting help from a large group of people to finish something faster."
      2:
        image: notes/C3_crowdsourcing_2.png
        text: In computer science, we use crowdsourcing all the time. Thousands of amateurs and professionals link their computers together to search through billions and billions of pieces of information. Looking for things like the next Marsenne prime number, or even possible alien communications.
      3:
        image: notes/C3_crowdsourcing_3.png
        text: "When you see a movie, each second of the movie is 24 individual pictures, we call those frames. So every one of those pictures needs to be created and rendered and put all together. My team and I, we're all software developers. We all work together to create a piece of software that actually creates an image, creates the final image that you see on screen. That's a tool that artists and other developers can use as part of their teamwork and their process to be able to create the images that they want on screen."
      4:
        image: notes/C3_crowdsourcing_4.png
        text: "For example, in Finding Nemo, when Crush and Squirt and all their friends are flying through the East Australian Current. You're seeing images of water flowing by, you're seeing the colors on the back of the turtle, you're seeing the sides of the fish. All of those things are generated through math and computer programs that we write, that we then give to the artist and they take that to create that final image and tweak it and make it look beautiful and look fun."
    C3_dice_race:
      1:
        image: notes/C3_dice_race_1.png
        text: This lesson is called dice race. Almost everyone likes to play computer games. Have you ever thought about how computer programmers turn the steps of a game into a program? The first step in creating computer games and in solving any problem requires thinking and planning.
      2:
        image: notes/C3_dice_race_2.png
        text: "The thinking step of problem solving produces an algorithm, which is a step by step plan for solving a problem or finishing a task. In this lesson, you'll create an algorithm for a dice race game. Then you'll ask your friends to try out your plan to see if they can follow the steps to play the game. After the programmer is sure the steps are correct, it's time to translate the algorithm into a program with language that the computer can understand."
      3:
        image: notes/C3_dice_race_3.png
        text: "Almost everything we do every day requires an algorithm, a list of steps you can follow to finish a task. Think about getting ready for school or planning a fun day with your friends or fixing a snack. To complete any of those tasks, you'll need to break it down into smaller steps and sometimes the steps must be in a specific order."
      4:
        image: notes/C3_dice_race_4.png
        text: "Think about making a sandwich. It doesn't matter which ingredient you get out of the cabinet first. But you can't spread the peanut butter until you open the jar. Computers need algorithms and programs to show them how to do even simple things that we can do without thinking about it."
      5:
        image: notes/C3_dice_race_5.png
        text: An algorithm is the thinking behind what needs to happen while the program is the actual instructions given to the computer to make it happen. An algorithm has to be translated into a program before a computer can run it. Breaking a task into steps called an algorithm is sometimes difficult. But like any new skill, it gets easier and easier with practice.
    C3_farmer_while:
      1:
        image: notes/C3_farmer_while_1.png
        text: "While loops are pretty similar to what you do in everyday life. Imagine you are washing your car, you'll keep scrubbing until it's clean. While it's not clean, continue to scrub. You're evaluating these things all the time."
      2:
        image: notes/C3_farmer_while_2.png
        text: "We've got a new look to help your farmer out. It's called a while-block. It's pretty simple actually. While a statement at the top is true, do something. For example, while there's a pile move one hayful. Go ahead and give it a try with your farmer."
    C3_functional_suncatchers:
      1:
        image: notes/C3_functional_suncatchers_1.png
        text: "This lesson is functional suncatchers. You'll be creating these pretty suncatchers using functions. There are several steps in creating one of these suncatchers. Some of the steps you have to repeat many times."
      2:
        image: notes/C3_functional_suncatchers_2.png
        text: The first step in simplifying the process of making a suncatcher is figure out what we have to repeat over and over again. We can group these steps into what we call a function.
      3:
        image: notes/C3_functional_suncatchers_3.png
        text: "But there is more to creating a beautiful suncatcher than following precise steps. Sometimes we want to be creative and change the color of the beads we're using. We can make every suncatcher unique if we use different colored beads."
      4:
        image: notes/C3_functional_suncatchers_4.png
        text: Your suncatcher will be uniquely yours when you learn to think of the beads as variables which is a word that means a placeholder for information that can change. Have fun creating beautiful suncatchers using functions and variables!
    C3_internet:
      1:
        image: notes/C3_internet_1.png
        text: This lesson is all about the internet. The internet is a very busy place and similar to this busy road. Messages like cars are zooming along to get to their destinations. Messages move through the internet very quickly.
      2:
        image: notes/C3_internet_2.png
        text: "Acting out how the internet works will help you understand what's happening when you use the internet. You'll learn how messages get from your computer to a favorite website or from a friend to an email inbox. Just like it's easier to navigate busy roads when you know the roads and can read the signs, traveling the internet is not so complicated when you know what goes on behind the scenes."
      3:
        image: notes/C3_internet_3.png
        text: "Sending messages on the internet is a little bit like sending messages in the mail but with a few differences. I'm here at Google.com. The IP address for this website is this number. You can think of an IP address as your return address in the mail. Let's imagine that I want to send a message in the mail to someone in the office down the there. Do you see URL and the IP address on that door? I've written this message and hit send."
      4:
        image: notes/C3_internet_4.png
        text: "Unlike the Postal Service, the first thing that happens is that the internet breaks the message into smaller parts so it can be sent more easily. These small parts are called packets. Each packet of the message is delivered to the destination one at a time. These packets are all put together in the right order so that the receiver can read the message correctly. Of course, there are many more things to learn about how the internet works but this is a great start. You're on your way to becoming a savvy internet user! Be sure to tell your family and friends what you've learned!"
      5:
        image: notes/C3_internet_5.png
        text: "My name is Amanda Camp and I'm a software engineer at Google. I work on a team that works on a backend server that stores profiles and contacts. In my job, we think a lot about how contacts can be sent to other devices, such as your phone. Most people have a lot of contacts, you might have say, 1000 contacts and we don't want to send all of those contacts at once to your phone because it's too large of a message. Similar to the way the internet breaks large messages down into packets, we use a concept called paging where we might only send your phone 100 contacts at a time and let your phone respond to us and ask for the next 100."
      6:
        image: notes/C3_internet_6.png
        text: "The most exciting thing about software is the fact that it can impact the entire world. I first learned to program when I was about nineteen. I think I was already a sophomore or a junior in college. The first program I remember writing is something that converted Celsius to Fahrenheit. I like programming because I like helping people. I can write programs at Google that help people all over the world and that's really mind-boggling and exciting."
    C3_maze_conditionals:
      1:
        image: notes/C3_maze_conditionals_1.png
        text: "People make decisions everyday. For example, before you go outside, you have an if statement that says if it's raining, then I need to get my jacket. Computers are amazing once you decide those kinds of statements that they can reliably execute those things and unbelievable speed. A computer program really is a little bit of math and some if statements where the decision gets made."
      2:
        image: notes/C3_maze_conditionals_2.png
        text: "The if block helps the zombie make a decision. It checks something. For example, let's use the block that says if there's a path to the left, and put a turn left command inside it. We're telling the zombie to check its surroundings, see if there's a path on the left and if so, make that turn."
      3:
        image: notes/C3_maze_conditionals_3.png
        text: "Then we use the move forward block inside this repeat to get it to keep moving forward as long as it just wants to go straight. Then when there's a turn, the if block will tell it to make that turn to the left. You can see that if we do that, if we take the turn to the left and otherwise moving forward, we'll achieve our goal."
      4:
        image: notes/C3_maze_conditionals_4.png
        text: "It's an example of using an if statement which is really a fundamental concept in computer programming. One of the first things I learned was how to write a program that played tic-tac-toe. I had if statements to say, ok, if the other person is about to win, go ahead and block that spot. Have fun learning how to use if statements, it's a key concept."
    C3_maze_level_4:
      1:
        image: notes/C3_maze_level_4_1.png
        text: In this example, your goal is to get zombie to the sunflower. We could use five move forward blocks or we could tell the computer to move forward and repeat five times using the one repeat block.
      2:
        image: notes/C3_maze_level_4_2.png
        text: This saves time and makes it way easier. To use it, just put the move forward block inside the repeat block. Hit run and the zombie will move forward five times to the yummy sunflower.
    C3_playlab_create_game:
      1:
        image: notes/C3_playlab_create_game_1.png
        text: "So far you've been making an animation or a story that does the exact same thing every time you run it. Now you can make an interactive game that you can actually play."
      2:
        image: notes/C3_playlab_create_game_2.png
        text: |-
          There are some new blocks to try out. There's the "when arrow" block and the "move actor" block. You can put these blocks together to move the actors around with the arrow keys. And there are some blocks that do stuff when actors collide or are clicked. Check them out and have fun!
    C3_songwriting_with_parameters:
      1:
        image: notes/C3_songwriting_with_parameters_1.png
        text: This is the song writing lesson. Music is a lot like a computer program. The written notes and words tell the singer exactly what to do. Some parts of music are used over and over again.
      2:
        image: notes/C3_songwriting_with_parameters_2.png
        text: We call this the chorus. In a computer program, the parts of the program that are used over and over again are called functions. When you read song lyrics and it says the word chorus, do you sing the word chorus? No, you look at the top of the page to see what words make up the chorus.
      3:
        image: notes/C3_songwriting_with_parameters_3.png
        text: "In this lesson, you'll learn a silly little song called little bunny foo foo. The song has a chorus that you will sing several times over and over again. A function is a piece of code that you can call and use over and over again. It makes programming easier and more efficient so you don't have to write out the steps of your function over and over again. You can just write it once!"
    C4_bee_conditional:
      1:
        image: notes/C4_bee_conditional_1.png
        text: "This is the conditional block. It says if you're at the flower or the honeycomb, then do something. This is useful when we don't know how much honey or nectar to get as we see here with this question mark."
      2:
        image: notes/C4_bee_conditional_2.png
        text: "In this example, we're going to say, if it's a flower, get all the nectar and then use another one to say, if it's a honeycomb, make honey. Ta-dah!"
    C4_conditionals:
      1:
        image: notes/C4_conditionals_1.png
        text: "We have a new block that's called the if/else block. It's a conditional statement just like the if block you've used in the puzzles before. But now there's a new part at the bottom that says else. The if/else block lets the bee make a decision between two sets of actions. If the bee is at a flower, the bee will do the set of actions you put in the first part where it says do. If the bee is not at a flower, the bee will do the set of actions you put in the slot where it says else."
      2:
        image: notes/C4_conditionals_2.png
        text: "If statements are how computers are able to make decisions. Humans set up conditions for the computer that say if the computer is presented with a certain situation do this. Else, which just means otherwise, do that. The top of our if/else block says if at flower. But the top of our block could say other things, like if nectar equals 2 or if there's a path ahead, our block will behave in the same way. That if the statement at the top is true it will do the first set of actions. But if the statement at the top is false, it will do the second set of actions."
    C4_for_loops:
      1:
        image: notes/C4_for_loops_1.png
        text: "When you use a repeat block to loop your code, how does the computer know when it's repeated enough times? The repeat block is actually hiding a more sophisticated piece of code called a for loop which counts from a starting value up to an ending value by a specific increment."
      2:
        image: notes/C4_for_loops_2.png
        text: For example, a repeat three block counts from 1 to 3 by 1. Every time it counts, it runs the code inside the loop. The for loop knows how many times it has run by using a counter variable which is set to the starting value at the beginning of the loop and has the increment added to it each time the loop is run. As soon as the counter variable is greater than the ending value, the loop stops running.
      3:
        image: notes/C4_for_loops_3.png
        text: "The benefit of using a real for loop instead of the repeat block is that you can actually see the counter variable and use it in your loop. For example, if I have a series of flowers and the first one has one nectar, the second one has two nectars and the third one has three, I can use the for loop to tell the bee to collect 'counter' nectars each time, which would one at the first flower, two at the second and three at the third."
      4:
        image: notes/C4_for_loops_4.png
        text: Also in a for loop, you can increment the counter by a number other than one each time. You can potentially count by 2s, 4s or even an amount that changes every time through.
    C4_for_loops_bee:
      1:
        image: notes/C4_for_loops_bee_1.png
        text: "When you use a repeat block to loop your code, how does the computer know when it's repeated enough times? The repeat block is actually hiding a more sophisticated piece of code called a for loop which counts from a starting value up to an ending value by a specific increment."
      2:
        image: notes/C4_for_loops_bee_2.png
        text: For example, a repeat three block counts from 1 to 3 by 1. Every time it counts, it runs the code inside the loop. The for loop knows how many times it has run by using a counter variable which is set to the starting value at the beginning of the loop and has the increment added to it each time the loop is run. As soon as the counter variable is greater than the ending value, the loop stops running.
      3:
        image: notes/C4_for_loops_bee_3.png
        text: "The benefit of using a real for loop instead of the repeat block is that you can actually see the counter variable and use it in your loop. For example, if I have a series of flowers and the first one has one nectar, the second one has two nectars and the third one has three, I can use the for loop to tell the bee to collect 'counter' nectars each time, which would one at the first flower, two at the second and three at the third."
      4:
        image: notes/C4_for_loops_bee_4.png
        text: Also in a for loop, you can increment the counter by a number other than one each time. You can potentially count by 2s, 4s or even an amount that changes every time through.
    C4_for_loops_no_bee:
      1:
        image: notes/C4_for_loops_no_bee_1.png
        text: "When you use a repeat block to loop your code, how does the computer know when it's repeated enough times? The repeat block is actually hiding a more sophisticated piece of code called a for loop which counts from a starting value up to an ending value by a specific increment."
      2:
        image: notes/C4_for_loops_no_bee_2.png
        text: For example, a repeat three block counts from 1 to 3 by 1. Every time it counts, it runs the code inside the loop. The for loop knows how many times it has run by using a counter variable which is set to the starting value at the beginning of the loop and has the increment added to it each time the loop is run. As soon as the counter variable is greater than the ending value, the loop stops running. The benefit of using a real for loop instead of the repeat block is that you can actually see the counter variable and use it in your loop.
    C4_function_create:
      1:
        image: notes/C4_function_create_1.png
        text: "Now that you've edited function blocks, it's time to create a new function block from scratch. It's really simple. You'll see the toolbox has a category called functions. If you click on this, you'll see an orange button called create a function. Clicking on this brings up the function editor that you've already used to edit existing function blocks."
      2:
        image: notes/C4_function_create_2.png
        text: "Just like before, you started by naming your function, writing down a description for what the function is supposed to do. For instance, it's supposed to draw a square or draw a triangle and then drag blocks from the toolbox into the white work space below. Remember to drag these blocks inside the green wrapping block for the function."
      3:
        image: notes/C4_function_create_3.png
        text: "Once you're done, click on save and exit. This will take you back to the main puzzle work space. The new function you created will show up as a green block in the function category in your toolbox. Drag and drop this into the main work space and use it like any other block to solve the puzzle."
    C4_function_edit:
      1:
        image: notes/C4_function_edit_1.png
        text: "One of the great things in computer programming is once you've taught a computer how to do an action, you can call that function again. You give it a name and then you can call it. That's really like extending the language."
      2:
        image: notes/C4_function_edit_2.png
        text: "In the program we built, we learned how to draw a square by moving and turning four times. We can take that function and give it a name, draw a square so that any time we want to do that, we simply say draw a square and it will go back and invoke that function, that code and it will get done for us. We've added that concept to our programming language."
      3:
        image: notes/C4_function_edit_3.png
        text: "In this puzzle, we have already created a draw a square function for you. You'll see it in the toolbox as a green block. What you'll need to do is write the same code you wrote before to draw a square and put it in this function. To do that, click on the edit option in the green draw a square block. This will open up the function editor. The function editor has three parts. A place where you name your function. This will appear on the green block before that function. Then write out a short description of what your function is supposed to do."
      4:
        image: notes/C4_function_edit_4.png
        text: "In this case, it's supposed to draw a square. The white space below this is the work space and works just like the work space you've already been using. Drag and drop blocks from the toolbox into this work space. Remember to put the blocks that create a square inside the green wrapping block for the function. Once you're done, click on save and exit. This will take you back to the main puzzle work space. Now you can use the draw the square function block just like any other block to solve the puzzle."
    C4_function_parameters:
      1:
        image: notes/C4_function_parameters_1.png
        text: "Here's a function that draws a square with 50 pixel sides. That's great but what if I wanted to draw a square with sides 50 pixels and another square with sides of 100 pixels? We shouldn't have to make two separate functions that do almost the same thing. Instead, we can use one function with a parameter."
      2:
        image: notes/C4_function_parameters_2.png
        text: "Parameters allow us to pass values into a function that get used as variables inside the function. Let's try adding a parameter called like to this function so we can use it to create squares of different sizes. In the function editor, you can edit the name and description like before but now you can also add a parameter. Write the name of your parameter in the space and click Add Parameter. This will create a red block with the name of the parameter you just created. Now we can replace the move forward by 100 block with the parameter Length so it will move forward by Length."
      3:
        image: notes/C4_function_parameters_3.png
        text: "Click save and close and drag out your new create a square block from the functions category in the toolbox. You'll notice there's an empty space next to length because the function wants to know what value the parameter Length should have. Drag a number block from the Math category and place it in this space. See how you can use the function again and again with different lengths to make squares of different sizes? Try it for yourself!"
    C4_intro:
      1:
        image: notes/C4_intro_1.png
        text: "Usually programming is all in text but we'll use Blockly which uses visual blocks that you drag and drop to write programs. Under the hood, you're still creating code. To start off, we're going to build code for a program that will help this Angry Bird move through a maze to get to the evil pigs that stole its eggs."
      2:
        image: notes/C4_intro_2.png
        text: "Blockly is split into three main parts. On the left is the bird's maze, where your program will run. The instructions for each level are written below the maze. This middle area is the toolbox and each of these blocks is a command that the bird can understand. The white space on the right is called the workspace and this is where we'll build our program."
      3:
        image: notes/C4_intro_3.png
        text: 'If I drag the move block to our work space and press "run", what happens? The bird moves forward one box on the grid. And what if I want the bird to do something after it moves forward one box? I can add another block to our program.'
      4:
        image: notes/C4_intro_4.png
        text: |-
          I'm going to choose the "turn right" block and I'll drag it under my move block until the yellow arrow appears. Then I'll drop it and the two blocks will snap together. When I press "run" again,  the bird will perform the commands that are stacked from top to bottom on our work space.
      5:
        image: notes/C4_intro_5.png
        text: "If you ever want to delete a block, just remove it from the stack and drag it to the trash can. After you've hit run, you can always hit the reset button to get the bird back to the start. Now let's get those pigs!"
    C4_math_artist:
      1:
        image: notes/C4_math_artist_1.png
        text: "If I want to draw a rectangle 50 pixels tall and that is twice as wide as it is tall, how would I program the computer to do that? Well, I could tell the artist to go up fifty, turn right, and then go over 100 and move the whole thing twice. But then I'm doing the math for the computer."
      2:
        image: notes/C4_math_artist_2.png
        text: Multiplying fifty by two in your head may not that hard but computers are really good at doing math so we should leave it to them whenever possible. If I just used a variable called height instead, then I could easily change height to fifty and then change my algorithm to tell the artist to go up by height, turn right and then go over by height times 2, which gives us a rectangle that is twice as wide as it is tall.
    C4_unplugged_algorithms:
      1:
        image: notes/C4_unplugged_algorithms_1.png
        text: "This lesson is called Tangram Algorithms. A tangram is a puzzle with seven pieces that can be put together to make other shapes. You'll be using an algorithm to explain to your partner how to put the puzzle together."
      2:
        image: notes/C4_unplugged_algorithms_2.png
        text: An algorithm is just a of list steps that you can take to complete a task. We use them every day with things like shopping lists and recipes. If you keep an algorithm simple, there are lots of ways to interpret it and whoever performs that algorithm might not get exactly what you wanted. If you want to make sure that everyone ends up with the exact same thing, then your algorithm will need to be detailed and very specific.
      3:
        image: notes/C4_unplugged_algorithms_3.png
        text: "I'm using an algorithm today to complete a painting. I wanted to try doing a painting of some wolves but I'm not the most amazing painter. Luckily for people by me, there is paint by numbers. There are forty colors and it has little letters and numbers that tell you which color to paint each section. Paint by numbers tells me exactly what color to use and where."
      4:
        image: notes/C4_unplugged_algorithms_4.png
        text: "It's very specific so I'm able to follow directions and the painting will come out looking awesome. It's a great algorithm. If the instructions weren't specific enough, my wolves wouldn't look as good. When you really want something to turn out exactly the way that you planned it, it's best to be extremely precise."
    C4_unplugged_binary:
      1:
        image: notes/C4_unplugged_binary_1.png
        text: "Each team, the person who's instructing that's the person who's holding the paper, has to figure out what their off symbol is going to be and what their on symbol is going to be. In binary, it's kind of like an alphabet with two letters. Like having A and B be your entire alphabet but you've got a 0 and a 1."
      2:
        image: notes/C4_unplugged_binary_2.png
        text: "The most common way you use binary is in an if statement. It's a classic thing from programming. The program runs along and it says if something is true, then do this. Or it's not true and you do something else. What if you want to do something maybe a little more complicated. Instead an if statement, you want to work with something like an image or a sound in a computer."
      3:
        image: notes/C4_unplugged_binary_3.png
        text: "A computer only knows binary but an image, it's not binary, it's not ones and zeros so how do you do that? Here's an example: You have this beautiful picture. Now a picture is basically a form of information. All information can be encoded in binary one way or another, you just have to figure out how to do it."
      4:
        image: notes/C4_unplugged_binary_4.png
        text: "You imagine that we're going to put a grid over this panda bear and for each square, we're going to decide whether that square is more black or more white. And then we're going to color it that way. Now each cell on the grid is either black or white and then the black squares we say those are zeros (binary digit) and the white squares are ones, the other binary digit. At the end, you're left with just a bunch of ones and zeros. That's how you represent this image in binary."
    C4_unplugged_forloops:
      1:
        image: notes/C4_unplugged_forloops_1.png
        text: "This lesson is called for loop fun. In this lesson, we'll use a number line to play a dice game. Each player will roll three times to assign a starting value, a stopping value, and our interval. During each turn, we circle our starting value, and every value that is the same number of steps forward as our interval value. We stop circling when we get to our stopping value. The person with the highest score wins!"
      2:
        image: notes/C4_unplugged_forloops_2.png
        text: "For loops can come in handy a lot of places and if you were to become a meteorologist, you would use for loops all the time. Hi, I'm Becky. I work at EverPower Renewables as a wind meteorologist. I forecast wind speeds for the Columbia River Gorge area where the company owns wind farms."
      3:
        image: notes/C4_unplugged_forloops_3.png
        text: "We're trying to understand how much wind is going to be there so that we know how much power is going to be outputted. We give that information to real time energy traders. They buy and sell power based on how much power we tell them is going to be there in order to make sure the power grid is balanced, your lights stay on, and that we maximize the amount of energy we get out of our farms."
      4:
        image: notes/C4_unplugged_forloops_4.png
        text: "We're at the national control center for EverPower Renewables here in Portland and this is where we have information coming in from all our farms across the country. Even the highest power computers today can't simulate the atmosphere everywhere. In computer forecasting models, we have what we call a grid. Each grid point is a latitude, longitude. We have to calculate the physics and try and figure out the wind speed, temperature,  pressure, that sort of thing."
      5:
        image: notes/C4_unplugged_forloops_5.png
        text: "Since these are fairly big grids and we're doing this in a lot of points we're looping over these things millions and millions of times. Everything I do I'll use for loops. Here for example is a for loop right there. When you're forecasting wind, there's so many different parameters that go into it it would be impossible for a human to sit down and do all those calculations. There's so many different aspects to what's going to be affecting what's happening to the wind that we need a computer model in order to forecast it."
    C4_unplugged_madlibs:
      1:
        image: notes/C4_unplugged_madlibs_1.png
        text: "In this lesson, we'll be playing with some fill in the blank stories. You have a template that you can fill in to create similar stories that have very amusing differences."
      2:
        image: notes/C4_unplugged_madlibs_2.png
        text: "In this lesson, we also learned how to make an abstracted template from two stories that have already been created. Abstraction is the art of removing differences and details so that you can see how one solution might work for many different problems. It's very helpful in computer science because it allows us to create functions that may be useful in several different situations."
    C4_unplugged_parameters:
      1:
        image: notes/C4_unplugged_parameters_1.png
        text: "This lesson is called songwriting with parameters. We're going to be writing some songs here. Sometimes the chorus is just a little bit different each time you sing it. Do you remember Old Macdonald Had a Farm? The chorus is slightly different for each animal. And on that farm, he had a cow, e-i-e-i-o. The small change in each chorus can be shown using something we call parameters."
      2:
        image: notes/C4_unplugged_parameters_2.png
        text: Sometimes a function needs a parameter. A parameter is an extra piece of information you can pass to a function to customize it for a special need. When you make ice cream sundaes with your friends, you are using a process similar to parameters in a computer program.
      3:
        image: notes/C4_unplugged_parameters_3.png
        text: "The disk of vanilla ice cream might be the same for every sundae but when you ask your friends which two toppings they'd like, you could get lots of different combinations. Topping is the function name but each type of topping is a parameter. Functions and parameters work together to make great computer programs and great sundaes too."
    C4_unplugged_variables:
      1:
        image: notes/C4_unplugged_variables_1.png
        text: "This lesson is called variables in envelopes. We're going to learn how we can build sentences when we're still missing pieces of information. Most of us are already familiar with the idea of filling in a blank. We do it when we're putting our name on our homework. Sometimes there's more than one word that needs to be filled out and in that case, we give that blank a label so that we know which piece of information goes where."
      2:
        image: notes/C4_unplugged_variables_2.png
        text: Variables are placeholders for pieces of information that can change. By using a variable for the missing information, we can continue working on whatever we were doing and let someone else fill in the missing information later. In software, we use variables a lot. We use variables as placeholders for name, email address, and even username. That way we can let the program know where those details will appear after the user fills them in. We use variables all the time in our work.
      3:
        image: notes/C4_unplugged_variables_3.png
        text: "Any time you need to store a piece of information for later, we use a variable. Let's say we need to count the number of times the user has tweeted. Every time that user tweets, we'll add one to that number and every time the user deletes a tweet, we'll decrease that number by one. Anytime we need to know how many times that user has tweeted, we'll just look at that variable."
    C4_variables_artist:
      1:
        image: notes/C4_variables_artist_1.png
        text: A variable is a container you can store a value in. When you use that variable in an algorithm, it opens up the container and looks at the value inside. This lets you write smarter algorithms that behave differently depending on the value stored in the variable.
      2:
        image: notes/C4_variables_artist_2.png
        text: "For example, if you wanted to write an algorithm to say Happy birthday, you're turning 10! to my little brother, that's great now but when I run it next year I'd want it to say, Happy birthday, you're turning 11! I could create a variable called age to store my brother's age and write my algorithm to say Happy birthday, you're turning 'age' instead. Because variable can change, every year I can update the variable 'age' to equal 'age' plus 1."
      3:
        image: notes/C4_variables_artist_3.png
        text: "In this puzzle, we're going to be using a variable that will set the length of the line our artist draws. Later on in our code, the move forward block will look at that length variable to see what value you've set it to."
    C4_variables_playlab:
      1:
        image: notes/C4_variables_playlab_1.png
        text: A variable is a container that you can store a value in. When you use that variable in an algorithm, it opens up the container and looks at the value inside. This lets you write smarter algorithms that behave differently depending on the value stored in the variable.
      2:
        image: notes/C4_variables_playlab_2.png
        text: "Now you're going to try playlab where you are given different games and you can change the values of variables like speed, height, score, in order to change the game. You won't have to change the algorithm of the game to change how it plays, just the variable."
      3:
        image: notes/C4_variables_playlab_3.png
        text: In my work for Kindle and on X-ray for books, we apply variables in many different ways. One way that you can use a variable is to store page numbers of a book. A user can increase and decrease the size of the font on a page. Based on the font size, the number of pages in the book can change. We can adjust it by storing the number of pages in the variable.
    infinity_playlab_events:
      1:
        image: notes/infinity_playlab_events_1.png
        text: "Now we're going to learn about something that all game programmers use everyday. They're called events. An event tells your program to listen for when something happens. And then when it does, it performs an action. Some examples of events are listening for a mouse click, an arrow button, or a tap on the screen."
      2:
        image: notes/infinity_playlab_events_2.png
        text: |-
          Here, we're going to make Baymax move up to touch Hiro and move down to touch Rapunzel when the player uses the up/down arrow keys or the up/down buttons. We'll use the when up arrow block and attach the move actor up block to it, so when the player presses the up arrow key, everything attached to the "when up arrow" block is run. We'll do the same thing to make Baymax move down. Step by step your game is getting more interactive.
    infinity_playlab_intro:
      1:
        image: notes/infinity_playlab_intro_1.png
        text: "So what grade are you in? Second. Tenth grade. First grade. I was in eighth grade when I learned to program. I got my first computer when I was in sixth grade. What gets me excited is being able to fix people's problems. You can express yourself, you can build things from an idea."
      2:
        image: notes/infinity_playlab_intro_2.png
        text: "Computer science is the basis for a lot of the things that college students and professionals will do for the next twenty or thirty years. I like programming because I like helping people. I get the opportunity to build something that's gonna make people's lives easier. I think it's the closest thing we have to a superpower. Getting started is the most important part. I'm a beginner myself and I want you to learn with me."
      3:
        image: notes/infinity_playlab_intro_3.png
        text: "I'm John Vechey, I'm one of the co-founders of PopCap Games. We make games like Plants vs. Zombies, Bejeweled, and Peggle. A lot about games isn't how perfect your code is, it's not how perfect your art is, it's about how does it feel and how much fun it is. You can only get that sense by trying it, by doing it, by learning and adapting and iterating your own skills of making games."
      4:
        image: notes/infinity_playlab_intro_4.png
        text: "Do you have a favorite video game? Well, we're going to take one step towards creating games just like that using Play Lab. Good games have a story and every story has actors. Actors do things like speak, move, and interact with each other. Maybe even score points based on the rules of the game. Today we'll be learning how to do all these things, one by one, with Disney's characters like Anna, Elsa, Hiro, Baymax, and Rapunzel. We'll build a game from scratch that can be shared and played on a phone."
      5:
        image: notes/infinity_playlab_intro_5.png
        text: "Your screen is split into three main parts. On the left is the gamespace, where your program will run. The instructions for each level are written below. This middle area is the toolbox, and each of these blocks is a piece of code. The white space on the right is called the workspace, and this is where we'll build our program."
      6:
        image: notes/infinity_playlab_intro_6.png
        text: |-
          To start off, you'll need to link your blocks to the orange "when run" block. You can link multiple blocks together by dragging them out until you see the yellow outline, and then they'll snap together. In this first puzzle, Hiro is Actor 1 and Baymax is Actor 2. We need to move Hiro to get to Baymax by dragging the "move right" block out and linking it to the "when run" block. Once you have your blocks in place, hit the "Run" button to see what you've programmed.
      7:
        image: notes/infinity_playlab_intro_7.png
        text: "Get started and by the end you'll be able to create your own game with these amazing actors that can interact, score points, throw microbots, cherries, saucepans, sparkles, and ice.. and vanish each other. It's all up to you!"
    infinity_playlab_repeat_forever:
      1:
        image: notes/infinity_playlab_repeat_forever_1.png
        text: "Can you imagine if you had to repeat something forever and ever? Hopefully you'll never have to because computers are really good at repeating things. This is the repeat forever block. Anything inside this block will happen forever in the game."
      2:
        image: notes/infinity_playlab_repeat_forever_2.png
        text: "So if we wanted an actor to do something repeatedly without the player having to do anything, we'll put those blocks inside the repeat forever block. In this next puzzle, our goal is to help Anna walk up and down continuously. Learning how the repeat commands work will save you a ton of time later when you build your own game."
    tutorial_puzzle_challenge:
      1:
        image: notes/tutorial_puzzle_challenge_1.png
        text: "What do you want to be when you grow up Olivia? An astronaut. Do you happen to know what a computer programmer is? Yeah um no. Ummm wait what? I'm not really sure how to explain it computer programming is pretty simple. It's a set of instructions like a recipe, you have to follow them step-by-step to get the end result you want."
      2:
        image: notes/tutorial_puzzle_challenge_2.png
        text: "I can change the number of pixels, the length of the line, using this dropdown. How long was it again? You can see the instructions again by looking under the run button. Here I used the move forward block and I'm going to select 100 pixels. I can delete a block by dragging it into the toolbox or the trash can. Let's put it back."
      3:
        image: notes/tutorial_puzzle_challenge_3.png
        text: "Run the code by pressing run. Well that didn't work! I'll press reset and figure out what's wrong. You can try a puzzle as many times as you'd like and skip puzzles and come back to them. Just make sure to try your best and don't give up. Let's add another move forward. That still didn't work. I can place a block between other blocks."
      4:
        image: notes/tutorial_puzzle_challenge_4.png
        text: "Let's take a turn block and place it in between the move forwards. Turn left 45 degrees. Let's run it again. Reset, run, awesome! Here's another puzzle. Sometimes you are given starter code to complete. Here I need to add the appropriate lengths and degrees."
      5:
        image: notes/tutorial_puzzle_challenge_5.png
        text: "You may sometimes accidentally trash the starter code. What do you do then? You can press clear puzzle and start all over again. I'm going to drag this number block into the different pixel areas. Select 100 for pixels, 45 for degrees and 100 for pixels again. Awesome! Here is the Code Studio bee. I need to move the bee to each flower and get nectar."
      6:
        image: notes/tutorial_puzzle_challenge_6.png
        text: "The first flower is three blocks away so I need three move forwards. 1, 2, 3. Then a get nectar, then another get nectar. Well that didn't work! I'll place another move forward between the get nectars and run it again. Yay, it works! You just learned how to use the Code Studio artist and bee puzzles. Good luck on the Code Studio puzzle challenge."
    unplug1:
      1:
        image: notes/unplug1_1.png
        text: "What do you want to be when you grow up Olivia? Umm, an astronaut! Do you happen to know what a computer programmer is? Yeahh, umm, no. Umm, what what? I'm not really sure how to explain it. Computer programming is pretty simple. It's a set of instructions, like a recipe. You have to follow them step by step to get the end result you want."
      2:
        image: notes/unplug1_2.png
        text: "Computer science is a way to impact the world. It can be music videos, it can be games, detect whether or not someone is related to someone else. Find you know, people's friends. You can do all sorts of other crazy things that actually save lives. You do have to have a drive I think. It is to me like a paintbrush. I think great programming is not all that dissimilar from great art."
      3:
        image: notes/unplug1_3.png
        text: When I finally learned a little bit of programming, that blank wall resolved into a bunch of doors and you open them and of course then you find behind them is another hallway filled with a bunch of doors. Programming is fun and easy. You can do anything your mind wants to do. Finally you start to open enough doors the light comes in. To me a finished program is like a structure filled with light. All the corners are illuminated. The number of people that you can touch and interact with is something the world has never seen before.
      4:
        image: notes/unplug1_4.png
        text: "Our first lesson in this series is all about what computer science is, what a computer scientist does and how you can be more responsible in your use of technology. It's a very important lesson but it is a little text-heavy. At the end, you get to make your very own customized encoding using your initials. It's a fun activity and it's very empowering because binary is one of those things that feels very technical but once you understand it, it's like you speak a secret language."
    unplug2:
      1:
        image: notes/unplug2_1.png
        text: The lesson on computational thinking is intended to teach you how to take a big difficult problem and break it down into several simpler problems. The goal of this lesson is to write a set of instructions that someone can follow to draw one of the monsters included in the lesson plan.
      2:
        image: notes/unplug2_2.png
        text: "Students will break into groups to write instructions and then they'll switch them with another group that will have to draw the monster. Groups will write instructions using the four steps of computational thinking: decomposition, pattern location, abstraction and algorithms."
      3:
        image: notes/unplug2_3.png
        text: "First groups will decompose the task which means make a game plan. Then they'll look for patterns between all the monsters in the catalog. When they come across differences between the monsters, they'll abstract or remove those details. For instance, one monster in the catalog has vegitas eyes and another has spritem eyes. But they both have eyes so we can write a line that says the monster has blank eyes."
      4:
        image: notes/unplug2_4.png
        text: "So students will be able to write a set of instructions, called an algorithm, that list the monsters' parts with blanks for what the styles should be. This is the set of instructions they'll pass to other students to recreate their very own monster."
    unplug3:
      1:
        image: notes/unplug3_1.png
        text: In graph paper programming, we help explain how coding works by trying to help people recreate drawings using only arrows and scribbles. One person is given a small drawing on graph paper and they need to go through using only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug3_2.png
        text: 'In this activity, the only symbols you can use are these: move one square forward, one square backward, move one square up, move one square down, change to next color, and fill in your square with color. Once we have that coded up, we can hand it off to another person who can read the code and try and recreate the picture.'
    unplug4:
      1:
        image: notes/unplug4_1.png
        text: In graph paper programming, we help explain how coding works by trying to help people recreate drawings using only arrows and scribbles. One person is given a small drawing on graph paper and they need to go through using only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug4_2.png
        text: "In the second half of the activity, we ask students how many different ways they can fold a piece of paper to create sixteen identical rectangles. Then you'll discuss how multiple solutions can lead to the same end result and why some solutions are better in certain situations."
    unplug5:
      1:
        image: notes/unplug5_1.png
        text: In graph paper programming, we help explain how coding works by trying to help people recreate drawings using only arrows and scribbles. One person is given a small drawing on graph paper and they need to go through using only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug5_2.png
        text: "In the second half of the activity, we ask students how many different ways they can fold a piece of paper to create sixteen identical rectangles. Then you'll discuss how multiple solutions can lead to the same end result and why some solutions are better in certain situations."
    unplug6:
      1:
        image: notes/unplug6_1.png
        text: "This activity is called coding with cards and it's great for any age. Like you learned with the if statements in earlier lessons,  during Blockly, if statements have a piece about them you have to evaluate to find out if it's true or false. That's the conditional and it can be used in lots of different ways."
      2:
        image: notes/unplug6_2.png
        text: We take advantage of that by creating programs on paper that you run using a random draw of playing cards. You might have an if statement that says something like if the card you draw is greater than 8, you get a point. Otherwise, your opponent gets a point. You can make it as simple or as complicated as you feel comfortable.
    unplug7:
      1:
        image: notes/unplug7_1.png
        text: "You know how when you look up the lyrics for a song and they define the chorus at the very beginning and then for the rest of the song, they just refer you back to the chorus? That's how you call a function."
      2:
        image: notes/unplug7_2.png
        text: "In this lesson, we define the chorus at the beginning of our song and then we sing through our song and go back and we notice that the class doesn't sing the word chorus, they automatically go up to the top where we define the chorus and sing through that. We use that as a great introduction to how to understand what a program is doing when it defines and calls a function."
      3:
        image: notes/unplug7_3.png
        text: "We use familiar songs including Old Macdonald to talk about how a chorus is called over and over and how sometimes a chorus can change. When you have a song like Old Macdonald, where certain words change, that's a great place to introduce the idea of parameters. Passing certain words through so that you can send extra information to your function. Once we're sure everybody gets it, you can take your own familiar songs and break them up yourself. See if you can figure it out together."
    unplug8:
      1:
        image: notes/unplug8_1.png
        text: Our lesson on abstraction uses the familiar concept of madlibs, where you basically insert a blank in a story that can be filled with lots of different words. We take that idea, challenge kids to come up with their own words for their own stories, and really explain the concept of abstraction.
      2:
        image: notes/unplug8_2.png
        text: "It's all about functions and how you can have a function, like in Old Macdonald, where you have a structure for your chorus but you have something little that changes and you abstract out that little thing that changes and you can fill it in with your own word every time through. But sometimes you have three words that change and so you fill those in with three parameters, that's still pretty helpful."
      3:
        image: notes/unplug8_3.png
        text: "You can have one function that handles lots of different problems. Lots of times people will write separate functions for all those problems, not realizing there's only one little difference. If they could just find a way to handle that one little difference, they could just reuse one function over and over again, instead of having 14 different functions."
    unplug9:
      1:
        image: notes/unplug9_1.png
        text: Relay programming is an extremely fun lesson that gets across way more than computer science. Sometimes everybody is getting a little bit antsy and you want to get them up on their feet. This is a great way to add some excitement to computer science.
      2:
        image: notes/unplug9_2.png
        text: You break everyone up into two groups where they stand in a line and run relay style. The first person in each group runs to the other side of the room where you have a graph paper drawing and a blank piece of paper waiting for them. They write down the first step to creating that image, run back to their line, tag the next player who goes back up to write the next step.
      3:
        image: notes/unplug9_3.png
        text: "This is a great way to get across the idea of debugging, needing to proofread your own work, and needing to check the work of the people done before you. You'll quickly understand how important it is that you be careful in your coding when a whole team is depending on you."
    unplug10:
      1:
        image: notes/unplug10_1.png
        text: "This activity explains in an easy-to-understand way how the internet works. We explain all the terminology you'll need in simple terms so that students can simulate transmitting messages, like an email."
      2:
        image: notes/unplug10_2.png
        text: "Students will transmit messages while pretending to be one of three transmission methods. Wireless internet, DSL or fiber optic. The students who represent wi-fi will have to wear the message they're transmitting on their head because wifi is the most likely to drop some information."
      3:
        image: notes/unplug10_3.png
        text: "The students pretending to be DSL or cable will carry the message on the back of their hand, where they're slightly less likely to drop information. And the students representing fiber optic will get to carry them with both hands. This activity is a great way to understand something that many of us use every day."
    unplug11:
      1:
        image: notes/unplug11_1.png
        text: "So now it's time to step back and take a birds eye view of everything you've done in these past nineteen lessons. This is a great time to call out to students that what they've just done is a huge achievement. They've learned more over these lessons than most adults know about computer science."
      2:
        image: notes/unplug11_2.png
        text: "Discuss as a class or in small groups about their favorite lessons. Once you take a look back at everything you've learned, this is where your students' creativity can shine. Split them into groups and have them create an unplugged lesson of their own. Assign each group a key concept, like functions or algorithms and have lots of craft materials on hand for them to use. Have each group present their new unplugged activity or even set aside another day to do a few of the student created activities."
      3:
        image: notes/unplug11_3.png
        text: "From everyone here at Code.org, we hope you've had a TON of fun during this course. And whether your dream is to create the best new app, use programming to help cure diseases, or you just want to be a stellar problem-solver, this course was the first step in achieving those dreams."
    starwars_intro:
      1:
        image: notes/starwars_intro_1.JPG
        text: 嗨，我是凯瑟琳 · 肯尼迪，我是《星球大战：原力觉醒》的制作人。今天你将与我们的明星之一--BB-8--合作。BB-8 是一个球形的机器人。他所做的每一个动作都由计算机软件控制。计算机影响着每一个行业，从市场营销到生理健康再到电影。事实上，一部像《原力觉醒》一样的电影需要数以百计的电脑工程师一起工作才能完成。
      2:
        image: notes/starwars_intro_2.JPG
        text: Hi，我是Rachel Rose，我是ILM的一名高级研发工程师，我带领动画和生物开发团队。在《原力觉醒》中，我负责帮助艺术家开发飞船的一部分，这让角色移动起来象是真的在非常遥远的星系上。
      3:
        image: notes/starwars_intro_3.JPG
        text: 在随后的一个小时里，我们要建立我们自己的星球大战游戏。我们会教你编程的基本概念。通常编程都是用文本的，但我们要在这里使用块，我们可以通过拖放来编写程序。在模块后面，你创建的仍然是代码。你试着用块来学好基础知识后，我们将给你转换到在网络上最流行的编程语言之一 JavaScript。
      4:
        image: notes/starwars_intro_4.JPG
        text: 开始的时候，我们将同雷伊一起写程序，让BB-8去收集所有废零件。您的屏幕被分成三个部分。左边是运行代码的星球大战空间。为每个关卡写的说明列在了游戏空间的下面。
      5:
        image: notes/starwars_intro_5.JPG
        text: 中间的区域是工具箱，这些块都是 BB-8 可以理解的命令。
      6:
        image: notes/starwars_intro_6.JPG
        text: 在右边的空白称为工作区，这是我们构建程序的地方。
      7:
        image: notes/starwars_intro_7.JPG
        text: 如果我拖拽“移动 向左”块到我们的工作区，并点运行，会发生什么? BB-8 在网格上往左移动了一块。
      8:
        image: notes/starwars_intro_8.JPG
        text: 但如果我想 BB-8 在“移动 向左”块之后再做些什么该怎么做呢? 我可以将另一个块添加到我们的程序中。我要选择 “移动 向上” 块，并把它拖到 “移动 向左” 块下面，直到高亮显示出现。然后放下它，这两个块会自动连接在一起。
      9:
        image: notes/starwars_intro_9.JPG
        text: 当我再次按下运行时，BB-8 将从上到下执行工作区里连在一起的命令。如果你想要从中删除一个块，只要把它拖回到工具箱就可以了。
      10:
        image: notes/starwars_intro_10.JPG
        text: 点击运行后，您总是可以按下复位按钮，让BB-8 回到开始状态。现在让我们继续吧!
    starwars_typing:
      1:
        image: notes/starwars_typing_1.JPG
        text: 模块里面实际上使用的是 JavaScript 命令。JavaScript 是当今在专业开发人员中最流行的编程语言。模块是一个学习编程的伟大方式，事实上，顶尖大学如哈佛和伯克利学校都开始用这种方式教学。一旦了解了基本知识，工程师就开始通过打字来编写代码，因为打字会更快。
      2:
        image: notes/starwars_typing_2.JPG
        text: 我们可以通过键盘输入数以百计的命令，而无需在工具箱中找到并将它们拖出来。因为一开始从打字开始学习可能会慢一些，所以我们希望你要先试一下模块方式。
      3:
        image: notes/starwars_typing_3.JPG
        text: 在工作区的右上角，您可以在任何关卡中点击显示代码按钮将模块以代码形式显示。
      4:
        image: notes/starwars_typing_4.JPG
        text: 在下一课中，我们将以打字模式开始。在这里你还可以从工具箱拖动块或您可以键入命令名称。当您开始键入，您将看到所有可能的命令会显示在你打字的下面。你可以从中选择命令而无需 键入整个命令名，从而能更快写出代码。我在写代码时候，总是会使用这样的自动完成功能。
      5:
        image: notes/starwars_typing_5.JPG
        text: 当你输入代码时，计算机需要你要输的非常精确。你的拼写和大小写名称要完全正确，包括圆括号和分号。即使一个小小的打字错误，BB-8就不能理解代码，也就不能移动。
      6:
        image: notes/starwars_typing_6.JPG
        text: 当你某行上出错时，编辑器会以突出来显示它，这样你就可以试着改变你的文本修复它。
      7:
        image: notes/starwars_typing_7.JPG
        text: 如果你卡住了，你总是可以用重新开始按钮重新开始，你也通过点击右上角在任何时候切换到块模式。好了，让我们用打字来试一试! 如果出现了错误，别气馁。每个人都是试了几次才对的。
    starwars_events:
      1:
        image: notes/starwars_events_1.JPG
        text: 你好，我的名字叫 Charita Carter。我是华特迪士尼影像的的高级创意制片人。负责领导团队开发吸引我们客户进行体验的景点。我们总是在寻找为我们的客人提高更好体验的方法，而技术就是它的核心。
      2:
        image: notes/starwars_events_2.JPG
        text: 恭喜，你做到了! 你编写了 BB-8。我认为我们现在该准备做更难点的事情。让我们继续。既然你已经学会了编程的基础知识，是时候回来创建由R2-D2 和 C3PO主演的你自己的游戏了。
      3:
        image: notes/starwars_events_3.JPG
        text: '要制作一个游戏，我们需要了解的游戏程序员每天在使用的东西: 他们被称为事件。事件告诉你的程序侦听并等待其发生。当它发生时，就会执行对应的动作。'
      4:
        image: notes/starwars_events_4.JPG
        text: 一些事件的例子：侦听鼠标单击，方向键或触碰屏幕。
      5:
        image: notes/starwars_events_5.JPG
        text: 在这里，我们要使 R2-D2 往 上移动并给反叛军飞行员一个消息，然后向下移动到其他的反叛军飞行员。当玩家使用向上/向下箭头键或向上/向下按钮时，将使用事件让它移动。
      6:
        image: notes/starwars_events_6.JPG
        text: 我们使用 “当箭头键向上” 事件块并将 “移动 向上” 块附在上面。当玩家按下向上箭头键时，附加到 “当箭头键向上” 块中的代码将运行。我们要使 R2-D2 向下移动也会做同样的事。
      7:
        image: notes/starwars_events_7.JPG
        text: 为此，我们将使用一个叫做“当箭头键向上”的命令。当您从工具箱中拖出这个命令时，您会看到它开头和结尾是用花括号而不是分号。这给了我们可以放其它命令的空间。当玩家按下向上箭头，这些运行括号内的每一个命令。
      8:
        image: notes/starwars_events_8.JPG
        text: 我们想要 R2-D2 往上，所以让我们把 “移动 向上” 块放到这个命令中。我们会用同样的方式让 R2-D2往下。
      9:
        image: notes/starwars_events_9.JPG
        text: 现在，在编写所有的代码来控制我们的机器人之前，我们可以让 R2-D2 对按钮按下事件做出反应。一步一步的走，这样你的游戏就有互动性了。
    starwars_congrats:
      1:
        image: notes/starwars_congrats_1.JPG
        text: 嗨，我叫Alice，我领导着Code.org的产品和工程团队，你现在正在玩的教程正是我们做的。
      2:
        image: notes/starwars_congrats_2.JPG
        text: 你刚刚完成了最后一关。祝贺你! 你已经学到了制作自己的星球大战游戏的所有东西。现在无需更多的指示，也没有关卡需要通过。你可以做出你自己的游戏，由你决定它如何运行。对了，你已经解锁新的声音和新的命令，你可以做更多的事了。
      3:
        image: notes/starwars_congrats_3.JPG
        text: '[学生发言]我们制作一个游戏，大体上是当你抓到澎澎猪时获得分数。同时每当你获得河豚猪时，一个暴风突击队员会出现。实际上整个屏幕全是澎澎猪，当你得到 10,000分时就赢了。'
      4:
        image: notes/starwars_congrats_4.JPG
        text: '[学生发言] 我们做的游戏中，你不能输，你消灭任何东西都会得分。我把按键反转了，每当您单击向上时，你的角色会往下，而当你点击向右时，你的角色却往会左。它是真的很难! 如果你是游戏开发者，有时候你会得到不公平的优势。是不是呀？耶!'
      5:
        image: notes/starwars_congrats_5.JPG
        text: 当你完成你的游戏后，选择共享，就会获取一个链接，你可以与朋友分享或在您的手机上玩你做的游戏。玩得开心！
    starwars_blocks_intro:
      1:
        image: notes/starwars_blocks_intro_1.JPG
        text: 嗨，我是凯瑟琳 · 肯尼迪，我是《星球大战：原力觉醒》的制作人。今天你将与我们的明星之一--BB-8--合作。BB-8 是一个球形的机器人。他所做的一切和每一个动作都由计算机软件控制。计算机影响着每一个行业，从市场营销到生理健康再到电影。事实上，一部像《原力觉醒》一样的电影需要数以百计的电脑工程师一起工作才能完成。
      2:
        image: notes/starwars_blocks_intro_2.JPG
        text: Hi，我是Rachel Rose，我是ILM的一名高级研发工程师，我带领动画和生物开发团队。在The Force Awaken原力唤醒中，我负责帮助艺术家开发飞船，那些角色中的一部分，让它们移动起来象是真的在非常遥远的星系上。
      3:
        image: notes/starwars_blocks_intro_3.JPG
        text: 在随后的一个小时，我们要建立我们自己的星球大战游戏，将教你编程的基本概念。通常编程我们全都是用文本，但我们要在这里使用块，这样我们可以通过拖放来编写程序。开始吧，我们同雷伊一起编写 BB-8 收集所有废零件的程序。
      4:
        image: notes/starwars_blocks_intro_4.JPG
        text: 您的屏幕分成三个部分。左边是运行代码的星球大战游戏空间。每个关卡的说明写在游戏空间的下面。
      5:
        image: notes/starwars_blocks_intro_5.JPG
        text: 中间的区域是工具箱，这些块都是 BB-8 可以理解的命令。
      6:
        image: notes/starwars_blocks_intro_6.JPG
        text: 在右边的空白称为工作区，这是我们构建我们程序的地方。
      7:
        image: notes/starwars_blocks_intro_7.JPG
        text: 如果我拖 “移动 向左” 块到我们的工作区中，会发生什么? BB-8 将在网格上向左移动一块。
      8:
        image: notes/starwars_blocks_intro_8.JPG
        text: 如果我想在 BB-8 “移动 向左” 块后再做一些事呢? 我可以将另一个块添加到我们的程序中。我要去选择 “移动 向上” 块并将它拖到我的 “移动 向左” 块下面，直到高亮显示出现。然后我放下它则两个块将扣合在一起。当我再次按下运行时，BB-8 将从上到下执行工作区里的命令。
      9:
        image: notes/starwars_blocks_intro_9.JPG
        text: 如果你想要删除一个块，只要把它从工作区拖回到工具箱即可删除。
      10:
        image: notes/starwars_blocks_intro_10.JPG
        text: 您你点击运行后，您总是可以按下复位按钮，让BB-8 回到开始状态。现在让我们继续吧!
    starwars_blocks_events:
      1:
        image: notes/starwars_blocks_events_1.JPG
        text: 你好，我的名字叫 Charita Carter。我是华特迪士尼影像的的高级创意制片人。负责领导团队开发吸引我们客户进行体验的景点。我们总是在寻找为我们的客人提高更好体验的方法，而技术就是它的核心。
      2:
        image: notes/starwars_blocks_events_2.JPG
        text: 恭喜，你做到了! 你编写了 BB-8。我认为我们现在该准备做更难点的事情。让我们继续。既然你已经学会了编程的基础知识，是时候回来创建由R2-D2 和 C3PO主演的你自己的游戏了。
      3:
        image: notes/starwars_blocks_events_3.JPG
        text: '要制作一个游戏，我们需要了解的游戏程序员每天在使用的东西: 他们被称为事件。事件告诉你的程序侦听并等待其发生。当它发生时，就会执行对应的动作。'
      4:
        image: notes/starwars_blocks_events_4.JPG
        text: 一些事件的例子：侦听鼠标单击，方向键或触碰屏幕。
      5:
        image: notes/starwars_blocks_events_5.JPG
        text: 在这里，我们要使 R2-D2 往 上移动并给反叛军飞行员一个消息，然后向下移动到其他的反叛军飞行员。当玩家使用向上/向下箭头键或向上/向下按钮时，将使用事件让它移动。
      6:
        image: notes/starwars_blocks_events_6.JPG
        text: 我们使用 “当箭头键向上” 事件块并将 “移动 向上” 块附在它上面。当玩家按下向上箭头键时，附加在 “当箭头键向上” 块中的代码将运行。为使 R2-D2 向下移我们可同样做。现在取代事先编写所有的代码控制我们的机器人，我们可以让 R2-D2 对按钮按下事件做出反应在屏幕中移动。
      7:
        image: notes/starwars_blocks_events_7.JPG
        text: 逐步的，你的游戏变得更具互动性。
    starwars_blocks_congrats:
      1:
        image: notes/starwars_blocks_congrats_1.JPG
        text: 嗨，我叫Alice，我领导着Code.org的产品和工程团队，你现在正在玩的教程正是我们做的。
      2:
        image: notes/starwars_blocks_congrats_2.JPG
        text: 你刚刚完成了最后一关。祝贺你! 你已经学到了制作自己的星球大战游戏的所有东西。现在无需更多的指示，也没有关卡需要通过。你可以做出你自己的游戏，由你决定它如何运行。对了，你已经解锁新的声音和新的命令，你可以做更多的事了。
      3:
        image: notes/starwars_blocks_congrats_3.JPG
        text: '[学生发言]我们制作一个游戏，大体上是当你抓到澎澎猪时获得分数。同时每当你获得河豚猪时，一个暴风突击队员会出现。实际上整个屏幕全是澎澎猪，当你得到 10,000分时就赢了。'
      4:
        image: notes/starwars_blocks_congrats_4.JPG
        text: '[学生发言] 我们做的游戏中，你不能输，你消灭任何东西都会得分。我把按键反转了，每当您单击向上时，你的角色会往下，而当你点击向右时，你的角色却往会左。它是真的很难! 如果你是游戏开发者，有时候你会得到不公平的优势。是不是呀？耶!'
      5:
        image: notes/starwars_blocks_congrats_5.JPG
        text: 当你完成你的游戏后，选择共享，就会获取一个链接，你可以与朋友分享或在您的手机上玩你做的游戏。玩得开心！
    mc_intro:
      1:
        image: notes/mc_intro_1.JPG
        text: 我叫 Jens Bergensten，不过大家都叫我 Jeb。我就职于斯德哥尔摩 Mojang，是这款 我的世界 的首席开发人员。我大概是在 11 或 12 岁的时候开始编程的，因为我想做游戏。我父亲的一个朋友告诉我，要想做游戏，就需要学习编程。所以我就那样开始了。我喜欢设计和考虑事物的建筑式样。那也是我真正喜欢 我的世界 的地方。
      2:
        image: notes/mc_intro_2.JPG
        text: 在随后一小时里，你要通过对艾莉克斯或史蒂夫编程，使其在一个 我的世界 的世界中移动，来学习计算机科学的基础知识。
      3:
        image: notes/mc_intro_3.JPG
        text: 传统编程通常是文本形式的，不过今天我们要使用模块化：这个系统可以使用方块拖放来编写程序。在方块下面，你创建的就是 JavaScript 代码。
      4:
        image: notes/mc_intro_4.JPG
        text: 你要学习的理念就是计算机程序员每天用到的东西，也是计算机科学的基础。在 Mojang，我们也用相同的理念完成 我的世界 的工作。
      5:
        image: notes/mc_intro_5.JPG
        text: 在开始之前，你要选择角色。我要选的是艾莉克斯。我们来建立一个程序代码，帮助她在屏幕上移动。
      6:
        image: notes/mc_intro_6.JPG
        text: 你的屏幕划分成三个主要部分。左边是 我的世界 游戏区，也就是程序运行的地方。每一级的指令写在下面。
      7:
        image: notes/mc_intro_7.JPG
        text: 中间区域是工具箱，这些方块每个都是指示艾莉克斯行动的命令。
      8:
        image: notes/mc_intro_8.JPG
        text: 右边的空白区域称为工作区，是我们建立程序的地方。
      9:
        image: notes/mc_intro_9.JPG
        text: 如果我们将 前进(); 方块拖到工作区，然后单击“运行”，会发生什么？艾莉克斯向前移动了一格。
      10:
        image: notes/mc_intro_10.JPG
        text: 那如果我们想让她在移动一格后做点别的呢？我们可以在程序中添加另一个方块。我要选择 向右转(); 方块，然后将它拖动到 前进(); 方块下面，直到这个桔黄色行出现。然后我放下它，两个方块就会卡到一起。再次按“运行”时，艾莉克斯就会按工作区从上到下堆叠的顺序执行命令。
      11:
        image: notes/mc_intro_11.JPG
        text: 如果要删除方块，只要将它从堆栈拖回工具箱就行了。
      12:
        image: notes/mc_intro_12.JPG
        text: 要想撤销更改，回到关卡开始时，使用工作区右上角的“重头开始”按钮。还有一件事，你们看到转向方块上的小三角了吗？任何时候只要看到这类三角，就表示你可以选择其他选项。我们开始编码吧！
    mc_repeat:
      1:
        image: notes/mc_repeat_1.JPG
        text: 我是 Mojang 品牌总监 Lydia Winters，我们制作了一款小游戏，名字叫作 我的世界。
      2:
        image: notes/mc_repeat_2.JPG
        text: 在 我的世界 中，我最喜欢的事情就是探索。我喜欢在洞穴中冒险，看看能找到些什么。跟本身不是程序员的人一样，我非常期待能学习 我的世界 课程，并真正学到了一些编码知识。
      3:
        image: notes/mc_repeat_3.JPG
        text: 最后关卡需要大量 前进(); 方块。如果我们能告诉计算机执行四或五次前进命令，就会简单得多。幸运的是，计算机真的非常擅于重复执行具有重复循环的命令。
      4:
        image: notes/mc_repeat_4.JPG
        text: 在建造 我的世界 时，我们使用重复循环放置所有用于创造新世界的原始材料。那可是成千上万的方块。在细小的环节上，我们也会使用循环，例如让艾莉克斯的腿在走路时反复交替。重复循环可是编程的一大利器。
      5:
        image: notes/mc_repeat_5.JPG
        text: 夜幕降临了，那么在随后几关中，我们要建一座房子，保持安全。我们要用重复方块来完成，这样非常简单。
      6:
        image: notes/mc_repeat_6.JPG
        text: 要给我们的房子建一面墙，我们可以告诉艾莉克斯 向前移动();，然后放下木板四次， 也可以告诉她向前移动 并放下一块木板(); 并放下一块木板，然后拿上这个命令，用重复方块让她多次执行这一行动。现在我们单击重复方块，告诉她我们想让她将这一行动执行多少次。那么，就赶在夜晚到来之前，建好我们的房子吧！祝大家游戏愉快。
    mc_if_statements:
      1:
        image: notes/mc_if_statements_1.JPG
        text: 现在我们要学习如果语句。如果语句是学习编程的基础部分。它们可以帮助计算机做出决定。
      2:
        image: notes/mc_if_statements_2.JPG
        text: 所有计算机都会使用如果语句，包括我的手机。例如，当我解锁手机时，它会运行某些代码，只要我正确输入密码，就会解锁手机。否则，就会显示错误消息。
      3:
        image: notes/mc_if_statements_3.JPG
        text: 你可以在代码中使用如果语句，让史蒂夫和艾莉丝对他们在世界中看到的东西做出反应。例如，如果他们前面有块石头，可以向左转。或者如果他们碰到一棵树，可以向右转。
      4:
        image: notes/mc_if_statements_4.JPG
        text: '这样一来，就不会掉到岩浆里了。为岩浆订计划很简单。我们可以在屏幕上看到。但石头下面我们看不到的岩浆怎么办？ '
      5:
        image: notes/mc_if_statements_5.JPG
        text: 开采石头后，在向前移动之前，我们需要检查那个地方有没有岩浆。如果那儿有岩浆，我们在向前移动之前，就需要在角色前面放下一块石头。这样的话，我们就能安全移动了。开采的时刻来啦！要记得用如果语句，小心脚下哦。
    mc_congrats_share:
      1:
        image: notes/mc_congrats_share_1.JPG
        text: 恭喜啦！你刚刚学习了计算机科学的初级建造方块。
      2:
        image: notes/mc_congrats_share_2.JPG
        text: 现在你可以用这些方块，发挥自己的创意了。不会再有指令，也没有谜题要解决。你可以随意建造任何东西。选择权完成在你手上。
      3:
        image: notes/mc_congrats_share_3.JPG
        text: '[学生交谈] 好有真实感。剪。我用火把做了一个 L。还用桦木板做了一个 A。有用了，有用了。我们用羊毛建了一座房子！'
      4:
        image: notes/mc_congrats_share_4.JPG
        text: 完成创意后，你可以选择分享，将链接分享给自己的好友。祝大家玩得开心！
    mc_congrats_no_share:
      1:
        image: notes/mc_congrats_no_share_1.JPG
        text: 恭喜啦！你刚刚学习了计算机科学的初级建造方块。
      2:
        image: notes/mc_congrats_no_share_2.JPG
        text: 现在你可以用这些方块，发挥自己的创意了。不会再有指令，也没有谜题要解决。你可以随意建造任何东西。选择权完成在你手上。
      3:
        image: notes/mc_congrats_no_share_3.JPG
        text: '[学生交谈] 好有真实感。剪。我用火把做了一个 L。还用桦木板做了一个 A。有用了，有用了。我们用羊毛建了一座房子！'
      4:
        image: notes/mc_congrats_no_share_4.JPG
        text: 现在你可以随心所欲建造一切。玩得开心点！
    gumball_intro:
      1:
        image: notes/gumball_intro_1.JPG
        text: "If you'd like to make your own game, it's really easy. All you need are just a few basics of programming and you can start playing a game that you created."
      2:
        image: notes/gumball_intro_2.JPG
        text: "Do you have a favorite video game? We're going to take one step toward creating games just like that in PlayLab. Good games have a story and every story has actors. Actors that do things like speak, move and interact with each other. Maybe even score points based on the rules of the game. Today, we'll be learning how to do all these things one by one with fun actors and then build a game from scratch that can be shared and played on a phone."
      3:
        image: notes/gumball_intro_3.JPG
        text: "Today, we'll be learning how to do all these things one by one with fun actors and then build a game from scratch that can be shared and played on a phone."
      4:
        image: notes/gumball_intro_4.JPG
        text: Your screen is split into three main parts. On the left is the gamespace where your program will run. The instructions for each level are written below.
      5:
        image: notes/gumball_intro_5.JPG
        text: This middle area is the tool box and each of these blocks is a piece of code.
      6:
        image: notes/gumball_intro_6.JPG
        text: 右边的空白区域称为工作区，是我们建立程序的地方。
      7:
        image: notes/gumball_intro_7.JPG
        text: "To start off, you'll need to link your blocks to the orange when run block. You can link multiple blocks together by dragging them out until you see the yellow line and then they'll snap together."
      8:
        image: notes/gumball_intro_8.JPG
        text: |-
          In this first puzzle, we'll make the actors say something by linking the "say" block to the when run block and typing in your message. Once you have your blocks in place, hit the run button to see what you programmed.
      9:
        image: notes/gumball_intro_9.JPG
        text: "Get started and by the end you'll be able to create your own game with all kinds of players that can interact, score points, throw things, and vanish each other. It's all up to you!"
    gumball_events:
      1:
        image: notes/gumball_events_1.JPG
        text: "Now we're going to learn about something all game programmers use everyday. They're called events. An event tells your program to listen for when something happens and then when it does, the game performs an action."
      2:
        image: notes/gumball_events_2.JPG
        text: Some examples of events are listening for a mouse click or an up or down arrow key or even a tap on the screen.
      3:
        image: notes/gumball_events_3.JPG
        text: |-
          Here, we're going to make the actor say something when the player clicks on it. We will use the when clicked block and attach the "say" block to it. When the player clicks, all the blocks attached to this block will be performed.
      4:
        image: notes/gumball_events_4.JPG
        text: There are also when arrow blocks. If you link move blocks to those, you can start to move your actors up, down, left, right, with the arrow keys. Little by little your game is getting more interactive.
    gumball_repeat:
      1:
        image: notes/gumball_repeat_1.JPG
        text: Can you imagine if you had to repeat something forever and ever? Hopefully you never have to because computers are really good at repeating things.
      2:
        image: notes/gumball_repeat_2.JPG
        text: "This is the repeat forever block. Anything inside this block will happen forever in the game. If we want an actor to do something repeatedly without the player having to do anything, we'll put those blocks inside the repeat forever block."
      3:
        image: notes/gumball_repeat_3.JPG
        text: In this next puzzle, our goal is to help the actor do a job continuously. Learning how the repeat commands work will save you a ton of time later when you build your own game.
    iceage_intro:
      1:
        image: notes/iceage_intro_1.JPG
        text: "If you'd like to make your own game, it's really easy. All you need are just a few basics of programming and you can start playing a game that you created."
      2:
        image: notes/iceage_intro_2.JPG
        text: "Do you have a favorite video game? We're going to take one step toward creating games just like that in PlayLab. Good games have a story and every story has actors. Actors that do things like speak, move and interact with each other. Maybe even score points based on the rules of the game. Today, we'll be learning how to do all these things one by one with fun actors and then build a game from scratch that can be shared and played on a phone."
      3:
        image: notes/iceage_intro_3.JPG
        text: "Today, we'll be learning how to do all these things one by one with fun actors and then build a game from scratch that can be shared and played on a phone."
      4:
        image: notes/iceage_intro_4.JPG
        text: Your screen is split into three main parts. On the left is the gamespace where your program will run. The instructions for each level are written below.
      5:
        image: notes/iceage_intro_5.JPG
        text: This middle area is the tool box and each of these blocks is a piece of code.
      6:
        image: notes/iceage_intro_6.JPG
        text: "The white space on the right is called the work space and this is where we'll build our program."
      7:
        image: notes/iceage_intro_7.JPG
        text: "To start off, you'll need to link your blocks to the orange when run block. You can link multiple blocks together by dragging them out until you see the yellow line and then they'll snap together."
      8:
        image: notes/iceage_intro_8.JPG
        text: |-
          In this first puzzle, we'll make the actors say something by linking the "say" block to the when run block and typing in your message. Once you have your blocks in place, hit the run button to see what you programmed.
      9:
        image: notes/iceage_intro_9.JPG
        text: "Get started and by the end you'll be able to create your own game with all kinds of players that can interact, score points, throw things, and vanish each other. It's all up to you!"
    iceage_events:
      1:
        image: notes/iceage_events_1.JPG
        text: "Now we're going to learn about something all game programmers use everyday. They're called events. An event tells your program to listen for when something happens and then when it does, the game performs an action."
      2:
        image: notes/iceage_events_2.JPG
        text: Some examples of events are listening for a mouse click or an up or down arrow key or even a tap on the screen.
      3:
        image: notes/iceage_events_3.JPG
        text: |-
          Here, we're going to make the actor say something when the player clicks on it. We will use the when clicked block and attach the "say" block to it. When the player clicks, all the blocks attached to this block will be performed.
      4:
        image: notes/iceage_events_4.JPG
        text: There are also when arrow blocks. If you link move blocks to those, you can start to move your actors up, down, left, right, with the arrow keys. Little by little your game is getting more interactive.
    iceage_repeat:
      1:
        image: notes/iceage_repeat_1.JPG
        text: Can you imagine if you had to repeat something forever and ever? Hopefully you never have to because computers are really good at repeating things.
      2:
        image: notes/iceage_repeat_2.JPG
        text: "This is the repeat forever block. Anything inside this block will happen forever in the game. If we want an actor to do something repeatedly without the player having to do anything, we'll put those blocks inside the repeat forever block."
      3:
        image: notes/iceage_repeat_3.JPG
        text: In this next puzzle, our goal is to help the actor do a job continuously. Learning how the repeat commands work will save you a ton of time later when you build your own game.
