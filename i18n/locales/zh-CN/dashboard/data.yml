zh:
  data:
    script:
      name:
        20-hour:
          desc: K-8 计算机科学课程简介
          Unplug1: 第一阶段
          Maze: 第二阶段
          Unplug2: 第三阶段
          Unplug3: 第四阶段
          Artist: 第五阶段
          Unplug4: 第六阶段
          Artist2: 第七阶段
          Unplug5: 第八阶段
          Farmer: 第九阶段
          Unplug6: 阶段 10
          Artist3: 阶段 11
          Unplug7: 阶段 12
          Farmer2: 阶段 13
          Unplug8: 阶段 14
          Artist4: 阶段 15
          Unplug9: 阶段 16
          Farmer3: 阶段 17
          Unplug10: 阶段 18
          Artist5: 阶段 19
          Unplug11: 阶段 20
        Hour of Code:
          desc: 编程一小时
          Maze: 第一阶段
        Edit Code:
          desc: |
            编辑代码 (测试版)
            
          MazeEC: 第一阶段
        2014 Levels:
          desc: 反弹 (测试版)
          Bounce: 第一阶段
        Builder Levels:
          desc: 用户创建的关卡 （测试版）
          Custom: 第一阶段
        Flappy Levels:
          desc: Flappy Bird
          Flappy: 第一阶段
        Jigsaw Levels:
          desc: 拼图 (测试版)
          Jigsaw: 第一阶段
        Step Levels:
          desc: 迷宫 (测试版)
          MazeStep: 阶段步骤
        edit-code:
          desc: |
            编辑代码 (测试版)
            
          MazeEC: 第一阶段
          Applab: 第二阶段
          ArtistEC: 第三阶段
          StudioEC: 第四阶段
        events:
          desc: 反弹 (测试版)
          Bounce: 第一阶段
          Studio: 第二阶段
        builder:
          desc: 创建用户的谜题 （测试版）
          Custom: 第一阶段
        flappy:
          desc: Flappy Bird
          Flappy: 第一阶段
        jigsaw:
          desc: 拼图 (测试版)
          Jigsaw: 第一阶段
        step:
          desc: 迷宫 (测试版)
          MazeStep: 阶段步骤
        wordsearch:
          desc: 拼字比赛 (测试版)
          WordSearch: 第一阶段
    game:
      name:
        Unplug1: 计算机科学导论
        Maze: 迷宫
        Multi: 多选项目
        Unplug2: 计算式思维
        Unplug3: 图纸上编程
        Artist: 艺术家
        Unplug4: 算法
        Artist2: 艺术家 2
        Unplug5: 函数
        Farmer: 农夫
        Unplug6: 条件语句
        Artist3: 艺术家 3
        Unplug7: 歌曲创作
        Farmer2: 农民 2
        Unplug8: 抽象化
        Artist4: 艺术家 4
        Unplug9: 编程接力
        Farmer3: ' 农夫3'
        Unplug10: 互联网
        Artist5: 艺术家 5
        Unplug11: 总结
        MazeEC: 迷宫
        Bounce: 弹跳
        Flappy: Flappy Bird
        Jigsaw: 拼图
        MazeStep: 单步迷宫模式
        Wordsearch: 字谜
        Webapp: 应用实验室
        ArtistEC: 艺术家
        TextMatch: 文本匹配
        StudioEC: 游戏实验室
        Applab: 应用实验室
        NetSim: 互联网模拟器
        Custom: 艺术家
        CustomStudio: 游戏实验室
    trophy:
      name:
        Bronze: 铜牌
        Silver: 银牌
        Gold: 金牌
    concept:
      description:
        sequence: 序列
        if: 如果块
        if_else: ”如果-否则“模块
        loop_times: 重复次数块
        loop_until: 重复直到块
        loop_while: 当块
        loop_for: “计数器”块
        function: 函数
        parameters: 有参数的函数
    level:
      instructions:
        maze_2_2: '你可以帮我抓住这只淘气猪吗？把两个“向前移动”模块堆在一起，然后按"运行程序"来帮我到达那里。 '
        maze_2_1: 这只猪把我的羽毛弄乱了。帮我抓住他！
        maze_2_2_5: 沿着这条路带我去找那只笨猪。躲开 TNT 炸药，不然我的羽毛就要被炸飞了！
        maze_2_3: 带我去找那个绿色的小恶魔！（小心 TNT 炸药）
        maze_2_4: 保持冷静，帮我找到那只坏猪。不然我要被它气死了！
        maze_2_5: 有一种方法可以只用两个模块就抓到这只笨猪。你能想出怎么做么？
        maze_2_6: 只用3个模块，帮我抓住那只绿色的人侵者！
        maze_2_7: 用尽量少的模块帮我驱逐这只坏猪。试试看使用“重复多次”块。
        maze_2_8: '当一个块是灰色的，这表示你不能删除它。解决这个难题，使用"重复"块，重复 3 次。试着把这3个区块放在灰色的"重复"块中： 移动、 移动、 转向。'
        maze_2_9: 好的，试试看新的“重复直到”模块，它会一直重复直到我抓到那只讨人厌的猪。
        maze_2_10: 好了，最后一次的练习 —— 你可以只用 4个模块来解决这个问题吗？
        maze_2_11: 亲爱的人类。我是一只僵尸。我饿了。我必须...... 得到向日葵...... 你可以用5个模块让我到达那里吗？
        maze_2_12: 好的，这道题目很相似，但略有不同。你可以只用5块块解决它吗？
        maze_2_13: '用新的"如果"模块让我来决定什么时候转弯。提示： 你只需要加一个模块，但记住其它模块是怎么排列的，这样下次你就会自己写了。'
        maze_2_14: '好啦，这是最后一个谜题了，但你学会怎么一起使用"如果"模块和"重复"模块了么？'
        maze_2_15: '我想要向日葵 ！使用"如果"模块，让我用最少的模块到达那里。'
        maze_2_16: 好啦，让我们再来练习一次 —— 这和之前的差不多，但是小心别被食人花吃了！
        maze_2_17: '“如果 - 否则”块检查当前是否满足一个条件，并根据结果执行相应模块。试试用这个新的模块让我得到那个向日葵。'
        maze_2_18: '让我们来再练习一次使用“如果 - 否则”块，你能试一次就成功么？'
        maze_2_19: 你能不能加三个块来帮我走出这个复杂的迷宫？如果你做对了，那我就可以通过任何长度的弯曲路径了。
        turtle_1_1: 你好，我是一个艺术家。您可以用代码让我画任何东西。使用几个模块让我画出图中的灰色线条。
        turtle_1_2: '现在，让我们来画个正方形。注意： 你可以用新的"设置颜色"块选择你最喜欢的颜色。'
        turtle_1_3: 只用三个模块画一个正方形。
        turtle_1_4: 让我们来画一个三条边都是不同颜色的三角形。你可以用“随机颜色”块来选择不同的颜色。提示：你得在“转向”块上写上需要转多少度。
        turtle_1_5: 现在，让我们来画一个信封。先画一个三角形，再画一个正方形。
        turtle_1_6: 你能想出来怎么能画个三角形和正方形吗？提示： 第一，先画三角形，然后转个弯，来画正方形。
        turtle_1_7: 好的，让我们来试试更难一点的 —— 看看你能不能画一个绿色的眼镜。正方形的每边长为100个像素。两个正方形之间相距50像素。别忘了把它画成绿色！
        turtle_1_8: '好的，试试看运行这段代码会发生什么（按下"运行"）。然后，重复它来完成我们要画的图。每次的颜色都会不同。'
        turtle_1_9: 如果要画一个圆，你知道应该在画问号的地方填上什么数字么？
        turtle_1_10: '你成功了 ！现在，画你想要画的吧。一些有趣的想法： 棒图、 雪花、 或螺旋线。记得试试看新的"设置宽度"块。玩得愉快！'
        turtle_4_1: 你能只用三个模块来画一个三角形么（每边100像素）？提示：使用“重复”模块。
        turtle_4_2: 在工作区已有的代码里的某处加上“向右转90度”的模块，从而画出这些三角形。
        turtle_4_3: '好的，这里是你写的画一个三角形的代码。你可以加上"重复"和"转向"块来画一朵漂亮的花吗？'
        turtle_4_4: 这个是之前关卡的代码，但每画一个三角形只旋转36度。我们需要重复这段代码多少次呢?（提示： 画一个圆需要转360度)
        turtle_4_5: 这个是之前关卡的代码，但是重复了36度。我们每次需要转多少度呢?（提示： 画一个圆需要转360度)
        turtle_4_6: 你可以只用3个块来画一个边长为20像素的正方形吗？
        turtle_4_7: 这是你在上一个关卡写的画正方形的代码。你能重复它来画一个由10个相邻的正方形组成的梯子么？提示：只需要再加两个模块。
        turtle_4_8: 这是你在上一个关卡写的代码。你能只加2个块来完成这幅画么？
        turtle_4_9: 这是你在上一个关卡写的代码。要完成这幅画，你需要转多少度呢？（你可能需要猜几次）
        turtle_4_10: 这是你在上一个关卡写的代码。你需要重复多少次来完成这幅画呢？
        turtle_4_11: 试试看改变“转向”块和“重复”块上的数字来画不同的花样。或者，试试看改变其余的代码来画你想要画的东西。
        maze_karel_1_1: '你好，我是一个农夫。我需要你帮我把一块地翻平来为种植做准备。把我移动到那堆土上面，并使用"删除"块来移除它。'
        maze_karel_1_2: 下一步，把我移动到那个洞，并且用“填充”块来把它填平。这个洞需要两铲子土。
        maze_karel_1_3: 把我移到那堆土那里，告诉我需要多少铲子才能把这堆土移除。尽量使用少的块来解开这个谜题。
        maze_karel_1_4: 你能帮我移除这所有四堆土么？提示：试试用”重复“块。
        maze_karel_1_5: '帮我用五铲子的土来填充这些洞。提示： 你可以把"重复"块放在"当"块里面试试。'
        maze_karel_1_6: 删除所有的土堆，尽可能使用尽量少的块。在”当“块的下拉菜单中有新的选项，它能告诉我现在是否站在一个土堆或一个洞上。
        maze_karel_1_7: 哇，我发现一个很深的洞 ！我不知道它需要多少铲子的土。您能不能编一个程序，往洞里填土直到地面被填平？
        maze_karel_1_8: 用尽量少的块帮我把田地那边的洞填平。
        maze_karel_1_9: "请尝试用尽可能少的块来移除所有的土堆。提示：请尝试使用‘当'块"
        maze_karel_1_10: 我工作的太晚了，外面天都黑了。我没办法知道那些土堆有多大了。所以”当“块上的某些选项消失了。把我挪到田地的另一头，如果遇到一个土堆，就移除它。
        maze_karel_1_11: 外面还是一片漆黑。让我移动到田地的另一边。如果遇到一个土堆，就移除它。相对的，如果遇到一个洞，就填平他。提示：你可以使用”如果“块的下拉菜单中的选项。
        turtle_2_1: 你好。我是僵尸艺术家。我喜欢画画 ！帮我画一个有颜色的正方形。说明： 现在你可以用的块都在了目录里了。
        turtle_2_2: 欢迎使用函数功能来定义新的块！在”函数“目录下，找到”画一个正方形“块，用它画一个 50 x 50 的绿色小正方形。
        turtle_2_3: '用 （在"循环"目录下） 的"重复"块画 3 个大小为100的正方形，每个相隔120度。试试用3种不同的随机颜色。'
        turtle_2_4: 现在，让我们画更复杂的图案吧。更改代码来画36个正方形，100像素大小，每个相差10度。提示： 你可以使用滑块来让我走得更快。
        turtle_2_5: '试试画大小为50，60，70，80，和90的正方形。你可以使用五次"画一个正方形"的函数。'
        turtle_2_6: 好的，在这个程序中将要使用计数器，来画一个和上次一样的正方形。你要画的正方形大小和计数器当前数字的大小相同。试试看怎么用“计数器”块。提示： 它是在『变量』分类中。
        turtle_2_7: '这个程序可以画一个螺旋，但我们已经禁用了这些块，所以它们不能运行。你能不能试试看用 (在循环目录下的）"计数"块 和(在变量类别）"计数器"块 画一个相同的螺旋。'
        turtle_2_7_5: '(在函数目录中）有一个新的函数："画一个雪人"。画两个雪人，一个高为250像素，一个高为100像素。'
        turtle_2_8: '这个题目有点儿难。试试使用"画一个雪人"的函数和（在动作目录中）新的"向前跳"块。画3个颜色不同的雪人，每两个之间相隔 100 个像素。'
        turtle_2_9: '用一个"计数"循环块来画雪人一家人。他们的高度分别是110， 100， 90， 80，和 70，每两个之间相隔60像素。'
        turtle_2_10: 试试用这些代码来画不同的螺旋。如果你改变旋转的次数会怎么样？或者在循环中设置随机的颜色？画你喜欢的。
        maze_karel_2_1: 请帮助我移除所有的土堆，填平地上所有的洞。 尝试使用循环来减少块。提示：你可以将一个循环放在另一个循环里。
        maze_karel_2_2: '我们定义了一个新块："填充5"，在函数目录中。用它来帮我把这个洞填平。'
        maze_karel_2_3: '使用新的"填充 5"函数块来帮我填平所有的洞。你需要从函数目录里拖出"填充 5"块。'
        maze_karel_2_4: 定义一个新的函数：“移除7铲土”。然后用它编写一个程序来帮我删除所有土堆。
        maze_karel_2_5: 创建一个新的函数，从一个土堆中“移除6铲土”，并用它来帮我移平所有的土堆。
        maze_karel_2_6: '用这两个新的函数，"填充 8"和"移除 8"，帮我移除所有的土堆并填平所有的洞。'
        maze_karel_2_7: 在我的田里有一头牛！编写一个新的函数，帮助我躲开牛并且移除一个土堆。把你所有需要用到的块都放到新函数块里面。
        maze_karel_2_8: '使用这个新功能，"避免母牛和移除 1"，来帮我移除所有的土堆。'
        maze_karel_2_9: 好的，这个函数能移除4个一列的土堆。试试把它放在循环里面，看看你能不能只用几个新的块来移除所有的土堆。
        maze_karel_2_10: 我要走到田地的另一边，用这两个函数帮我来移除所有的土堆并且填充所有的洞。
        turtle_3_1: '我们在这个关卡里给了你两个函数，"画一个正方形"和"画一个圆"的定义。只是定义一个函数是不会运行其中的块的。你必须拖出来"画一个正方形"函数块才能让它画一个正方形给你。'
        turtle_3_2: 用”画一个正方形“作为例子，创建一个新的函数，”画一个三角形“，并使用它。
        turtle_3_3: 在猫周围画一个三角形围栏，然后在牛周围画一个四方形围栏。提示：请边做边测试。
        turtle_3_4: 你能否使用“画一个正方形”和“画一个三角形”（和其他一些块）来在狮子周围画一座房子？
        turtle_3_5: '现在创建一个新的"画房子"函数，使用它来圈住两只猫。提示： 使用"做点什么"块创建一个新的函数，并给它命名。'
        turtle_3_6: '以"画一个正方形"为例，给"画一个三角形"加一个“长度”变量。然后画出不同大小的三角形。（提示： 请单击星星标志来为一个函数添加输入)'
        turtle_3_7: 为“画房子”函数添加一个“长度”变量。给大象建一所大房子（边长150像素）
        turtle_3_8: '修改函数"画一座房子"，当绘制完一所新房子后，光标最终会在右下角。使用此修改后的函数来绘制三所房子。'
        turtle_3_9: 你能在不看帮助的情况下自己重新创建“画房子”函数吗？试试看！然后画一排房子。
        turtle_3_10: 你已经学会了很多东西了！试着用他们画任何你想画的图案。试着画一颗星星，一个螺旋或者一片好看的雪花。
        maze_karel_debug_seq_1: 欢迎来到代码调试环节！我的代码不能正常工作。你能研究并且解决一下这个问题吗？我想要把地面铲平以便种植作物。
        maze_karel_debug_seq_2: 这段程序错在哪里？你应该怎么修改才能让我移除那块土堆？
        maze_karel_debug_repeat: 帮我调试一下这段程序。我希望我的地看起来很平整。
        maze_karel_debug_while: 怎么修改这段程序才能帮我填上这个洞？
        maze_karel_debug_if: 求助！请调试这段程序使得我的地完全平整。
        maze_karel_debug_if_else: 请调试这段程序，使得我能把洞填上并且移除所有的土堆。
        maze_karel_debug_function_1: 你应该怎么修改这段程序才能够帮我移除所有的土堆呢？
        maze_karel_debug_function_2: 你能调试一下这段程序来帮助我铲平我的地吗？
        maze_karel_debug_function_3: 请编辑这段程序来使得我能够移除地上所有的土堆。
        turtle_5_1: 请尝试运行此程序，并进行更改，看看会发生什么。你能弄清楚它是如何工作的吗？（或者你可以把这段程序删掉并且重写成其他任何你想要的程序）
        turtle_5_2: 请尝试运行此程序，并进行更改，看看会发生什么。你能弄清楚它是如何工作的吗？（或者你可以把这段程序删掉并且重写成其他任何你想要的程序）
        turtle_5_3: 请尝试运行此程序，并进行更改，看看会发生什么。你能弄清楚它是如何工作的吗？（或者你可以把这段程序删掉并且重写成其他任何你想要的程序）
        turtle_5_4: 请尝试运行此程序，并进行更改，看看会发生什么。你能弄清楚它是如何工作的吗？（或者你可以把这段程序删掉并且重写成其他任何你想要的程序）
        turtle_5_5: 请尝试运行此程序，并进行更改，看看会发生什么。你能弄清楚它是如何工作的吗？（或者你可以把这段程序删掉并且重写成其他任何你想要的程序）
        turtle_5_6: 请尝试运行此程序，并进行更改，看看会发生什么。你能弄清楚它是如何工作的吗？（或者你可以把这段程序删掉并且重写成其他任何你想要的程序）
        maze_3_1: 我想要抓住那只猪！输入几个调用 move(); 的语句，我就可以拿回我的蛋了。
        maze_3_2: 写一个程序，让我能够到达那只猪。
        maze_3_3: 我怎样才能抓住那只猪？小心别让我撞上TNT炸弹！
        maze_3_4: 写个程序，让我绕过那些TNT炸药，抓住那只猪。
        bounce_1: 在“左箭头时”模块下面添加模块，然后按“运行”。使用左箭头来移动挡板来到达终点目标。
        bounce_2: '在"当左箭头"块和“当右键头”块下面添加块，然后按"运行程序"。移动球拍到达两边的目标。'
        bounce_3: '现在，尝试类似的做法用"当上箭头"块，来移动球拍到顶部目标。'
        bounce_4: 这次你需要添加四个块。移动到所有四个球拍完成目标，以完成这个关卡。
        bounce_5: '我们要将球发向球拍。将一个模块附加到"当球击中桨"模块以确保球能到达目标。'
        bounce_6: '现在完成的目标是在顶上。您需要将模块附加到这两个"当球击中"模块中以通过这关。'
        bounce_7: '将模块附加到每个"当"模块。弹起球，直到它击中目标。'
        bounce_10: '现在有一个目标在顶部。附加上"得分点"和"对手得分"块到“当进球得分”和"当球未命中桨"块去做一场游戏。看看在对手获得两分时，你可以获得多少分。'
        bounce_11: '现在，你可以在"运行时"模块下附加模块了. 你必须在多个地方附加新的"启动新球"模块. 此外，试着改变场景或球拍和球的速度，看看在你对手得两分之前你能得多少分.'
        bounce_12: 创建您自己的弹跳游戏。您可以更改所有的视觉效果和规则。单击完成，让朋友在手机上试试你的游戏。
        Custom_builder: '将模块从工具箱中拖动到工作区来绘制你想创建的关卡。当你准备好时, 按"运行"。'
        flappy_1: '将一个模块附加到"单击时"模块上，然后按"运行"。单击或点击屏幕去移动Flappy到目标.'
        flappy_2: |-
          现在我们已经添加了一些地面。将一个块附加到"撞到地面时"块。当Flappy 撞地时，您的代码需要 ' 结束游戏 '。
        flappy_3: “运行时”块允许你在游戏开始时运行你的代码. 尝试设置水平速度和扑向目标。
        flappy_4: |-
          Flappy将会穿越障碍，除非你编写代码使他碰撞上。将一个模块附加到"当击中一个障碍"块。当Flappy 撞上到第一组管道时，您的代码需要 ' 结束游戏 '。
        flappy_5: '让我们添加一个记分牌。当 Flappy 穿过障碍计分数。将添加到"当通过一个障碍"块，然后当 Flappy 通过第一个管道后得分。'
        flappy_6: 在使得 Flappy 飞得距离更小或更大之后，看看是否你仍然能得分。
        flappy_7: '接下来, 请尝试将另一个块附加到"运行时"块来更改场景.'
        flappy_8: 不只是在游戏开始时，您可以随时设置的视觉效果。请尝试在其他事件发生时设置一个随机场景，例如，在通过障碍时。
        flappy_9: 现在我们要把前面学的全部混在一起啦，当击中一个障碍物，请尝试把分数设置回0分，而不是将游戏结束。
        flappy_11: 创建你自己的Flappy游戏。你可以改变所有的有视效果，所有的规则，甚至重力。当你完成后，单击完成，让朋友在他们手机上试试你的手机游戏。
        flappy_k1_1: 玩Flappy游戏
        flappy_k1_2: '将一个模块附加到"单击时"模块上，然后按"运行"。单击或点击屏幕去移动Flappy到目标.'
        flappy_k1_3: |-
          现在我们已经添加了一些地面。将一个块附加到"撞到地面时"块。Flappy 撞了时，您的代码需要 ' 结束游戏 '。
        flappy_k1_4: “运行时”块允许你在游戏开始时运行你的代码. 尝试设置水平速度和扑向目标。
        flappy_k1_5: |-
          Flappy将会穿越障碍，除非你编写代码使他崩溃。将一个块附加到"命中障碍时"块。当Flappy 撞上到第一组管道时，您的代码需要 ' 结束游戏 '。
        flappy_k1_6: '让我们添加一个记分牌。当 Flappy 穿过障碍计分数。将添加到"当通过障碍"块，然后得分当 Flappy 通过第一套管道。'
        flappy_k1_7: 看看你能不能超越障碍来加倍分数。
        flappy_k1_8: '接下来, 请尝试将另一个块附加到"运行时"块来更改场景.'
        flappy_k1_9: 试图附加一个“设置玩家”块到“当运行时”块上来更改玩家.
        jigsaw_1: 单击块
        jigsaw_2: 将块拖到目标
        jigsaw_3: 排列块以形成图像
        jigsaw_4: 排列块以形成图像
        jigsaw_5: 排列块以形成图像
        jigsaw_6: 排列块以形成图像
        jigsaw_7: 排列块以形成图像
        jigsaw_8: 排列块以形成图像
        jigsaw_9: 排列块以形成图像
        jigsaw_10: 排列块以形成图像
        jigsaw_11: 排列块以形成图像
        jigsaw_12: 排列块以形成图像
        jigsaw_13: 解决这一难题 ！
        mazestep_1: 迷宫步骤说明在这里
        mazestep_2: 迷宫步骤说明在这里
        mazestep_3: 迷宫步骤说明在这里
        mazestep_4: 迷宫步骤说明在这里
        mazestep_5: 迷宫步骤说明在这里
        studio_c2_1: '你可以让这个狗说"你好世界"吗？'
        studio_c2_2: 你可以让狗说些什么，然后让猫说些什么吗？
        studio_c2_3: 你可以写一个程序来将这只狗移动到那只猫处吗？
        studio_c2_4: 你可以写一个程序来将这只狗移动到那只猫处, 当狗到达时, 让猫对他说“你好”?
        studio_c2_5: 你可以写一个程序来使章鱼被点击时说“你好”吗？
        studio_c2_6: 你可以写一个程序，用上/下/左/右按键使这个企鹅到达所有目标吗？
        studio_c2_7: '"永远重复"块允许您连续运行代码。您可以附加块来使这只恐龙反复向上向下移动吗？'
        studio_c2_8: '如果他碰到恐龙时，你可以让企鹅说: "哎哟!" 并播放“打”的声音，然后将企鹅按照箭头移动使这种情况发生吗？'
        studio_c2_9: 你可以添加一个模块, 当企鹅碰到章鱼时得一分点，然​​后将企鹅按照箭头移动，直到你获得分数?
        studio_c2_10: 你可以添加模块, 以更改背景和企鹅的速度，然​​后将企鹅按照箭头移动，直到你获得分数?
        studio_c2_11: 创建你自己的故事。当你完成后，单击完成，让朋友在他们手机上试试你的故事.
        studio_c3_story_1: '你可以让这个狗说"你好世界"吗？'
        studio_c3_story_2: 你可以让狗说些什么，然后让猫说些什么吗？
        studio_c3_story_3: 你可以写一个程序来将这只狗移动到那只猫处吗？
        studio_c3_story_4: 你可以写一个程序来将这只狗移动到那只猫处, 当狗到达时, 让猫对他说“你好”?
        studio_c3_story_5: 你可以添加一个能使章鱼快乐的模块吗？
        studio_c3_story_6: 创建你自己的故事。当你完成后，单击完成，让朋友在他们手机上试试你的故事.
        studio_c3_game_1: 你可以写一个程序来使章鱼被点击时说“你好”吗？
        studio_c3_game_2: 你可以写一个程序，用上/下/左/右按键使这个企鹅到达所有目标吗？
        studio_c3_game_3: '"永远重复"块允许您连续运行代码。您可以附加块来使这只恐龙反复向上向下移动吗？'
        studio_c3_game_4: '如果他碰到恐龙时，你可以让企鹅说: "哎哟!" 并播放“打”的声音，然后将企鹅按照箭头移动使这种情况发生吗？'
        studio_c3_game_5: 你可以添加一个模块, 当企鹅碰到章鱼时得一分点，然​​后将企鹅按照箭头移动，直到你获得分数?
        studio_c3_game_6: 你可以添加模块, 以更改背景和企鹅的速度，然​​后将企鹅按照箭头移动，直到你获得分数?
        studio_c3_game_7: 创建你自己的游戏。当你完成后时，单击完成，让朋友在他们手机上试试你的游戏。
        studio_playlab_1: '企鹅想要说"你好"— — 你能帮助他吗？'
        studio_playlab_2: '洞穴男孩 （演员 1） 和洞穴女孩 （演员 2） 想向对方说"你好"。你能通过使用"说"块两次来帮助他们吗？'
        studio_playlab_3: 你能帮网球女孩到达旗子标志吗？
        studio_playlab_4: 你能帮网球男孩 (演员 1) 到达网球女孩 （演员 2）那里，并且当他到达时播放一个声音吗？
        studio_playlab_5: '你能当空间机器人被点击时, 帮他说"问候地球人"吗? 点击运行后, 别忘了点击它.'
        studio_playlab_6: 你可以帮助女巫使用上/下/左/右方向键来走动到达所有的魔法火球吗?
        studio_playlab_7: '"永远重复"块允许您连续运行代码。您可以附加块来帮助巫師反复向右和左移动吗？'
        studio_playlab_8: 当独角兽跑近巫师时，添加一个模块来得分和一个模块播放声音，然后你能用箭头移动它们直到得分吗？
        studio_playlab_9: 为这次外星人入侵事件设置背景画面，并通过加快空间机器人的速度来使到达外星人。通过方向键来移动太空机器人，并警告其它人。
        studio_playlab_10: 创建你自己的游戏。当你完成后时，单击完成，让朋友在他们手机上试试你的游戏。
        studio_iceage_hello1: '喜得想要召集大家一起去探险。你可以帮助他跟大家打招呼吗？把“语言”模块拖放到工作区，然后在里面输入"你好"。'
        studio_iceage_hello2: '喜得(角色1) 发现了曼尼(角色2)，并想邀请他一同冒险。帮助他们彼此打个招呼吧，使用"演员 说"块两次。'
        studio_iceage_move_to_flag: '斯奎特正在找他的橡子！使用"移动"模块帮他移动到最后200像素位置。'
        studio_iceage_move_to_actor: 'Diego (actor 1) is searching for Manny (actor 2). Help Diego move 200 pixels down to Manny using the "move actor" block. Next, connect a block to the "when actor touches" event to play a sound when they find each other.'
        studio_iceage_repeat: 'The "repeat forever" block allows you to run code continuously. Can you attach blocks to it to help Granny get some exercise by moving left and right repeatedly?'
        studio_iceage_click_hello: Can you help Sid do a final call for friends when clicked? Don’t forget to click on him after you hit Run.
        studio_iceage_move_events: 'Scrat is still looking for acorns! Help him scamper around by attaching the "move" block to each of the events and changing the direction to work for each arrow key. When you’re done, click Run and try to collect all of the acorns.'
        studio_iceage_sound_and_points: 'We’ve provided most of the code that keeps Granny moving left and right, as well as the code to move Sid around the screen. Can you finish the code and add blocks to the "when actor touches" event to make it so that you both play a sound and score a point when Sid and Granny collide? Press Run to play the game.'
        studio_iceage_warn_ice_age: Everyone needs to move faster because an ice age is coming! Change the background to an icy background and set Sid’s speed to fast, then press Run and move him to Diego to warn him.
        studio_iceage_throw_hearts: |-
          Sid wants to let his grandmother, Granny, know that he loves her. Use the "actor throw" command to have Sid (actor 1) throw hearts at Granny (actor 2)! Set Granny's mood to happy when she gets hit with the hearts.
        studio_iceage_free_play: "Time to create your own game or story! When you're done, click Finish to let friends try your game on their phones, tablets, or computers!"
        studio_gumball_hello1: 'Anais wants to make some new friends. Can you help her say "hello" by dragging the "say" block out into the work area and typing the word "hello" inside?'
        studio_gumball_hello2: 'Darwin (actor 1) and his brother Gumball (actor 2) are heading to school.  Help them greet each other by using the "actor say" block twice.'
        studio_gumball_move_to_flag: 'Banana Joe is about to win a field day race!  Help him go the last 200 pixels using the "move" block.'
        studio_gumball_move_to_actor: 'Gumball (actor 1) and Darwin (actor 2) are late for the field day! Help Gumball move 200 pixels down to Darwin using the "move actor" block.  Next, connect a block to the "when actor touches" event to play a sound when they find each other.'
        studio_gumball_repeat: 'The "repeat forever" block allows you to run code continuously.  Can you attach blocks to it to help Gumball warm up for his race by moving left and right repeatedly?'
        studio_gumball_click_hello: 'Can you help Anton announce the start of a race by saying "Ready, set, go!"? To test your program, don’t forget to click Anton after you click Run!'
        studio_gumball_move_events: 'Darwin is in the flag gathering contest! Help him run around by attaching the "move" block to each of the events. When you’re done, click Run and try to collect all of the flags.'
        studio_gumball_sound_and_points: 'We’ve provided most of the code that keeps Anton (actor 2) moving left and right, as well as the code to move Banana Joe (actor 1) around the screen.  Can you finish the code and add blocks to the "when actor touches" event to make it so that you both play a sound and score a point when Banana Joe and Anton collide?  Press Run to play the game.'
        studio_gumball_warn_food_fight: 'Darwin just escaped a food fight! Change the background to "characters" and set Darwin’s speed to fast, then press Run and move him to Penny to warn her.'
        studio_gumball_join_food_fight: 'Join the food fight! Use the "actor throw item right" command to have Banana Joe (actor 1) throw food at Anton (actor 2)! Set Anton’s mood to angry when he gets hit.'
        studio_gumball_free_play: "Create your own game or story. When you're done, click Finish to let friends try your game on their phones, tablets, or computers!"
        studio_full_sandbox: 创建你自己的游戏。当你完成后时，单击完成，让朋友在他们手机上试试你的游戏。
        studio_k1_1: '你可以让这个狗说"你好世界"吗？'
        studio_k1_2: 你可以让狗说些什么，然后让猫说些什么吗？
        studio_k1_3: 你可以写一个程序来将这只狗移动到那只猫处吗？
        studio_k1_4: '把狗移动到猫那处, 当他到达时让猫说"你好".'
        studio_k1_5: 你可以添加一个能使章鱼快乐的模块吗？
        studio_k1_6: 创建你自己的故事 ！上下左右移动猫和狗，让他们说点什么。
        maze_wordsearch_k_1: 移动我拼写单词EAST
        maze_wordsearch_k_2: 移动我拼写单词SOUTH
        maze_wordsearch_k_3: 移动我拼写单词WEST
        maze_wordsearch_k_4: 移动我拼写单词NORTH
        maze_wordsearch_k_6: 把我向东移动，然后向南移动来拼写单词JUMP
        maze_wordsearch_k_9: 把我向这边 然后向另一边移动来拼写单词CODE
        maze_wordsearch_k_13: 把我向这边 然后向另一边移动来拼写单词DEBUG
        maze_wordsearch_k_15: 把我向这边 然后向另一边移动来拼写单词ABOVE
        maze_wordsearch_k_16: 把我向这边 然后向另一边移动来拼写单词BELOW
        maze_wordsearch_k_20: 试验以下！先把我往一个方向移动，然后再往另一个方向移动，来拼写单词STORY
        applab_ec_simple: 使用工具箱中的积木块来创建您的应用程序吧。
        turtle_ec_1_2: 现在，画个正方形。注意：从新的《penColor》模块中选用你最喜欢的颜色。
        turtle_ec_1_10: 你成功了！现在任由你随意画你喜欢的东西。你可以尝试画个火柴人、雪花、旋螺型或其他有趣的图画。还有，可别忘了试用新的 penWidth 模块哦！玩乐愉快！
        studio_ec_sandbox: 创建你自己的游戏。当你完成后时，单击完成，让朋友在他们手机上试试你的游戏。
    video:
      name:
        maze_intro: 迷宫简介
        artist_intro: 艺术家简介
        farmer_intro: 农夫简介
        flappy_intro: Flappy简介
        loop_times: 重复次数块
        loop_until: 重复直到块
        if: 如果模块
        if_else: 如果/否则模块
        if_else_scrat: 如果/否则模块
        function: 函数
        loop_while: 当 模块
        loop_for: “计数”块
        parameters: 有参数的函数
        hoc_wrapup: 编程一小时总结
        Unplug1: 什么是计算机科学?
        Unplug2: 计算性思维
        Unplug3: 方格纸编程
        Unplug4: 算法
        Unplug5: 函数
        Unplug6: 条件语句
        Unplug7: 写歌
        Unplug8: 抽象化
        Unplug9: Relay programming
        Unplug10: 互联网
        Unplug11: 总结
        C1_happy_maps_unplugged: 快乐地图
        C1_moveitmoveit_unplugged: 移动它，移动它！
        C1_bigevent_unplugged: 大事件
        C1_getting_loopy: 越来越糊涂
        C1_pair_programming: 结对编程
        C1_maze_intro_sequencing: 迷宫测序介绍
        C1_maze_debugging: 迷宫： 调试中
        C1_bee_level_intro: 蜜蜂级别-简介
        C1_artist_intro: 艺术家简介
        C1_spelling_bee_intro: 拼字游戏简介
        C1_zuck_repeat_loop: 迷宫循环
        C1_bee_loops: 蜜蜂循环
        C1_maze_loops: 迷宫循环
        C1_playlab_storytelling: '游戏实验室: 创建一个故事'
        C1_planting_seed: 种植一颗种子
        C1_building_foundation: 打基础
        C1_going_places_safely: 去安全的地方
        C2_maze_intro: 迷宫简介
        C2_artist_intro: 艺术家简介
        C2_zuck_repeat_loop: 迷宫循环
        C2_artist_loops: 艺术家循环
        C2_artist_debugging: Artist Debugging
        C2_bee_loops: 蜜蜂循环
        C2_bee_debugging: 蜜蜂调试
        C2_bee_conditionals: Bee Conditionals
        C2_playlab_createstory: '游戏实验室: 创建一个故事'
        C2_graph_paper: 方格纸编程
        C2_conditionals_with_cards: 条件语句
        C2_binary_bracelets: Binary Bracelets
        C2_relay_programming: 编程接力
        C2_paper_airplanes: 纸飞机
        C2_digital_footprint: 你的数字足迹
        C2_digital_footprint_v2: 你的数字足迹
        C3_maze_level_4: 迷宫循环
        C3_artist_intro: 艺术家简介
        C3_artist_functions: 艺术家函数
        C3_bee_functions: 蜜蜂函数
        C3_bee_conditionals: Bee Conditionals
        C3_maze_conditionals: Maze Conditionals
        C3_artist_nested_loops: 循环嵌套
        C3_farmer_while: 当循环
        C3_bee_nested_loops: 循环嵌套
        C3_bee_debugging: 蜜蜂调试
        C3_bounce: 跳
        C3_playlab_create_game: 游戏实验室 — 创建一个游戏
        C3_computational_thinking: 计算性思维
        C3_dice_race: 骰子比赛
        C3_internet: 互联网
        C3_crowdsourcing: Crowdsourcing
        C3_functional_suncatchers: Functional Suncatchers
        C3_songwriting_with_parameters: 通过输入参数来作曲。
        C4_intro: 介绍
        C4_loops_zombie: 循环
        C4_bee_conditional: Bee Conditionals
        C4_variables_artist: 变量 —— 艺术家
        C4_variables_playlab: 变量 — — 游戏实验室
        C4_for_loops: For 循环
        C4_for_loops_bee: For 循环
        C4_for_loops_no_bee: For 循环
        C4_math_artist: 会使用数学来编程的艺术家。
        C4_function_edit: 编辑函数
        C4_function_create: 创建函数
        C4_function_parameters: 有参数的函数
        C4_conditionals: 条件语句
        C4_unplugged_algorithms: 七巧板算法
        C4_unplugged_madlibs: 疯狂字谜
        C4_unplugged_variables: 信封中的变量
        C4_unplugged_forloops: For 循环
        C4_unplugged_parameters: Songwriting with Parameters
        C4_unplugged_binary: 二进制
        frozen_intro: 编程一小时介绍
        frozen_loops: 循环介绍
        frozen_functions: 函数介绍
        playlab_intro: 游戏实验室的介绍
        playlab_events: 游戏实验室 事件
        playlab_repeat_forever: 游戏实验室 不断重复
        tutorial_puzzle_challenge: 拼图挑战教程
        infinity_playlab_intro: '游戏实验室 -- 简介'
        infinity_playlab_events: '游戏实验室 - 事件'
        infinity_playlab_repeat_forever: '游戏实验室 - 不断重复'
        csp_applab_conditionals_1: 'Introduction to Conditionals - Part 1'
        csp_applab_conditionals_2: 'Introduction to Conditionals - Part 2'
        csp_applab_conditionals_3: 'Introduction to Conditionals - Part 3'
        csp_applab_design: Introduction to Design Mode
        csp_applab_variables_1: 'Introduction to Variables - Part 1'
        csp_applab_variables_2: 'Introduction to Variables - Part 2'
        csp_applab_functions: 函数介绍
        csp_applab_functions_parameters: 有参数的函数
        csp_applab_loops: 循环
        csp_applab_turtle: Turtle Programming
        csp_concept_rgb: A Little Bit About Pixels
        csp_pixelation_color_1: 'Color pixelation widget - Part 1'
        csp_pixelation_color_2: 'Color pixelation widget - Part 2'
        csp_pixelation_color_3: 'Color pixelation widget - Part 3'
        csp_pixelation_bw: Black and white pixelation widget
        csp_U1L14_tipstricks: 'Unit 1 Lesson 14 Teacher Tips & Tricks'
        csp_textcompression: Text compression widget
        csp_textcompression_new: Text compression widget
        csp_internetsimulator_1: 'Internet Simulator - Part 1'
        csp_internetsimulator_2: 'Internet Simulator - Part 2'
        csp_internetsimulator_3: 'Internet Simulator - Part 3'
        alg_1_intro: 'CS in Algebra - Introduction'
        alg_2_eval_block: 'CS in Algebra - Evaluation Blocks'
        alg_3_pemdas: 'CS in Algebra - Order of Operations'
        alg_4_data_types: 'CS in Algebra - Data Types'
        alg_5_contracts: 'CS in Algebra - Contracts'
        alg_6_variables: 'CS in Algebra - Variables'
        alg_7_function: 'CS in Algebra - Functions'
        alg_8_design_recipe: 'CS in Algebra - Design Recipe'
        alg_9_booleans: 'CS in Algebra - Booleans'
        alg_10_conditionals: 'CS in Algebra - Conditionals'
        alg_11_coordinate_plane: 'CS in Algebra - Coordinate Plane'
        alg_12_biggame_variables: 'CS in Algebra - Big Game Variables'
        alg_13_biggame_animation: 'CS in Algebra - Big Game Animation'
        alg_14_biggame_booleans: 'CS in Algebra - Big Game Booleans'
        alg_15_biggame_update_player: 'CS in Algebra - Big Game Update Player'
        alg_16_biggame_collision_detection: 'CS in Algebra - Big Game Collision Detection'
        alg_17_sambat_compound_booleans: 'CS in Algebra - Compound Booleans'
        hoc2015_preview_blocks: Make your own game blocks
        hoc2015_preview_typing: Make your own game typing
        hoc2015_preview_conclusion: Make your own game conclusion
        starwars_intro: '星球大战: 用代码构建一个星系-介绍'
        starwars_typing: '星球大战: 用代码构建一个星系-JavaScript'
        starwars_events: '星球大战: 用代码构建一个星系-事件'
        starwars_congrats: '星球大战: 用代码构建一个星系-恭喜'
        starwars_blocks_intro: '星球大战: 用代码构建一个星系-介绍'
        starwars_blocks_events: '星球大战: 用代码构建一个星系-事件'
        starwars_blocks_congrats: '星球大战: 用代码构建一个星系-恭喜'
        mc_intro: '我的世界 - 简介'
        mc_repeat: '我的世界 - 重复'
        mc_if_statements: '我的世界 - 如果语句'
        mc_congrats_share: '我的世界 - 贺词'
        mc_congrats_no_share: '我的世界 - 贺词'
        gumball_intro: 'Gumball Hour of Code - Introduction'
        gumball_events: 'Gumball Hour of Code - Events'
        gumball_repeat: 'Gumball Hour of Code - Repeat statements'
        iceage_intro: 'Ice Age Hour of Code - Introduction'
        iceage_events: 'Ice Age Hour of Code - Events'
        iceage_repeat: 'Ice Age Hour of Code - Repeat statements'
    callout:
      text:
        drag_blocks: '拖动一个"移动"的块，并将它吸到别的模块下面'
        run: '点击"运行"以尝试您的程序'
        watch_again: 单击此处可再次观看视频
        gray_block_explanation: 你不能删除灰色的积木块哦。 这样你还能解开这个谜题吗？
        show_code_explanation: 单击此处查看你的程序的代码
        instructions_repeat_explanation: 每个关卡的说明在这里都会再写一次
        category_explanation: 你有所有一样的块，但它们现在按类别放置着。
        set_sprite_image: '把一个 “设置图像为演员”模块拼合到 "当故事开始"块下，来为这个故事添加一个演员。'
        studio_say_text: 你希望你的演员说些什么话呢，在引号中键入吧。
        jigsaw_click: 单击此块 ！
        move_elsa_forward: 拖动“向前移动”积木块，并把它拼在“当运行时”块下面，来让爱莎向前移动。
        turn_elsa: 'Use the "Turn" block to make Elsa turn. The number in the drop-down determines how much Elsa turns'
        replace_questions: 'Use the drop-down to replace "???" with a number'
        replace_questions_degree: 'Use the drop-down to replace "???" with the correct degree to turn'
        repeat_blocks: 'Use the "Repeat" block and wrap it around the blocks in the workspace'
        repeat_blocks_1: (1) Use this block and put it around the grey blocks in the workspace
        repeat_blocks_2: '(2) 移动"重复"块到这里, 然后将灰色方块放到它里面.'
        snowflake_dropdown: Use this drop-down to create different snowflakes!
        degrees_per_side: Divide 360 by the number of sides to get the size of each angle in degrees.
        set_sides: 'Use this block to set "sides" to the number needed to complete the puzzle.'
        set_length: 'Use this block to set "length" to the correct value.'
        which_equation: Which equation makes each side shorter for shapes with more sides?
        get_nectar: '使用新的"得到花蜜"块。'
        actions_category: 'The tool box got a new look! The "Actions" blocks are in here now.'
        draw_square_hint: '提示: 用你刚才在上一关中制作的方形循环。'
        edit_function: 单击此处来编辑您的函数。
        create_function: 'Click here to open the "Functions" flyout, then click the "Create a Function" button.'
        house_hint: "It's ok if the picture doesn't look like a house yet. We will fix it in the next puzzle."
        edit_draw_square: Use this button to edit the function and add the loop.
        edit_get_nectar: Use this button to edit the function and change the direction the Bee will turn to get the nectar.
        logic_category: 'Open the "Logic" flyout to find the "if/else" block.'
        length_parameter: 'Can you update this function so it uses the "length" parameter?'
        frozen_diamond_repeat: Use the repeat block to create this shape.
        frozen_circle_function_in_circle_turn: "Don't forget to turn after creating each circle."
        frozen_circle_function_with_parameter_circle: 'Use the "create a circle" block and change the size.'
        frozen_snowflake_branch: 'Use the "create a snowflake branch" block'
        frozen_create_square: Attach more blocks here to create a square
        playlab_drag_say: 'Drag the "say" block here and type "hello"'
        playlab_use_twice: Use this block twice and remember to change the actor number
        playlab_move_girl: 'Use the "move right" block to move Tennis Girl'
        playlab_play_sound: '添加"播放声音"的块'
        playlab_arrow_keys: Remember to use these to move the witch after clicking on Run
        playlab_add_move: 'Add "move" blocks inside this repeat block'
        playlab_add_score: 添加分数块到这里
        playlab_add_blocks: 添加您的模块到这里
        set_variable: Drag a number block here to set your variable
        place_variable: Drag your variable inside this block
        bee_for_loop: Drag the largest number of nectar you want the bee to collect here
        place_counter_variable: Drag your counter variable inside this block
        function_editor_draw_square: 'This is your function definition. These blocks run everytime you use the "draw a square" block'
        change_here: 在这里进行更改
        write_draw_square_function: Drag blocks from the toolbox into here that draw a square
        write_draw_triangle_function: 将模块从工具箱中拖动到这里画一个三角形
        edit_add_parameter: 点击编辑，在你的函数中添加参数
        add_and_drag_parameter: 在这里填写参数的名称，点击添加，然后将它拖动到函数定义中
        fill_in_actor: 在??? 处填写数字，使其对应到每个演员 (1、 2 和 3)
        repeat: 在循环中放入模块来重复执行命令
        if_bee_nectar: '使用"如果"模块来决定蜜蜂是否应该得到花蜜'
        if_else_bee: |-
          Use the "if/else" block so that the Bee gets nectar from a flower, and makes honey if it's not a flower
        repeat_full_circle: 输入僵尸至少需要移动多少次才能完成一个完整的循环
        place_length_variable: Drag the length variable here to replace the question marks
        arrows_move_actor: 使用箭头移动演员
        right_arrow_fireball: 使用右箭头来射击火球
        name_function: 在这里填写函数的名称
        Infinity_move_right_runbutton: 在这里添加移动模块
        Infinity_move_directions_callout: 当按下上箭头键时，哪个模块将会让大白向上移动？
        Infinity_move_directions_callout_arrow: 使用这些箭头键引导
        Infinity_move_collide_callout: 发生此事件时播放声音。
        Infinity_repeat_callout: 放置移动模块到这里面
        craft_run_button_callout: 点击“运行”，试试你的程序
        craft_drag_block_callout: 拖动一个“前进();”方块，将它卡在其他方块下方
        craft_callout_preplaced: 我们已将一些方块放在这儿，好方便你开始
        craft_inside_repeat: 将方块放在这里可以重复行动
        craft_callout_preplaced_house: 此代码将开始建造你的房子。你能完成吗？
        craft_what_is_iron: 开采这块铁矿！
        craft_callout_moveforward: 此代码会检查岩浆，你能添加一条向前移动的命令吗？
