---
zh-CN:
  data:
    long_instructions:
      "'pre-assessment survey q25A'": 如果是，在当前的计算机科学课程前，你还学过什么计算机科学课程？
      "(joshl) Dance Party 1-validated_2019": "**猜猜看：** 这个图形名叫`外星人一号`！当点击她时猜猜会发生什么？"
      2-3 Artist 1 new: |-
        嗨，我是一个艺术家。您可以编写代码来让我画几乎任何东西。使用几个块，让我在这幅画中沿成灰色线条画。（每条线是 100 像素长）\\r
        \\r
      2-3 Artist 11: '为停止标志画一个八边形的边，边长为100像素。 '
      2-3 Artist 12: "画一个圆圈来完成这个眼球！\\\\r\n\\\\r\n如果每次都是转1度，你需要重复次才能完成这个圈？ "
      2-3 Artist 2 new: 这所房子的墙已经完成了一半。每边都是 100，但是完成了一半的墙是只有 50。把剩下的墙补充完整。
      2-3 Artist 3.4: |-
        “跳”模块会移动艺术家但不画线。通过使用“向前跳”块和“向前移动”块来画出虚线。
        每行是50像素长。
      2-3 Artist 3new: |-
        红色帽子的高度是 100 像素。请绘制一顶高度矮70个像素的黑色帽子。\\r
        \\r
        _(注意：每顶帽子的宽度是50像素。)_
      2-3 Artist 4: 帮我为小猫盖好房子
      2-3 Artist 6: |-
        这所房子需要一个屋顶 ！绘制三角形。 \\r
        \\r
        提示︰ 所有三条边是相同的长度。 \\r
        \\r
        <img src="https://images.code.org/8b10073fd1a7fe53b4da33ec2229894b-image-1468018903891.gif"
        width="300"/>
      2-3 Artist 7: "画完学校窗户的最后一部分，这样班级里的每个人都可以看到外面了。\\\\r\n\\\\r\n每个正方形窗户的边长都是25像素。 "
      2-3 Artist 8: |-
        是时候盖个谷仓了！\\r
        \\r
        将这个谷仓分成两个此存相同的正方形。\\r
        \\r
        提示：正方形宽200像素，高100像素。\\r
        \\r
        有很多方法来完成这一关。
      2-3 Artist 9 NEW: 完成这只风筝
      2-3 Artist 9 REPLACEMENT: 绘制完这些楼梯 ！
      2-3 Artist 9: 完成这只风筝
      2-3 Artist Assessment 1: 评估： 完成绘制最后一个齿。宽度为25像素并且高度为25像素。
      2-3 Artist Debugging 1: |-
        这顶帽子应该只有50像素宽。\\r
        你能改好它吗？\\r
        \\r
        <br/>\\r
      2-3 Artist Debugging 10: |-
        我的游戏控制器方向键太窄了。\\r
        \\r
        你能让它增加 10 像素吗？ \\r
        \\r
        试试先运行代码看看哪里有问题。
      2-3 Artist Debugging 11: |-
        我的雪花在崩塌！\\r
        \\r
        你能找到哪里错了吗？
      2-3 Artist Debugging 2: |-
        这只猫的三条胡须的代码是错误的。
        \\r
        \\r
        修改代码来画出一样长的胡须。
      2-3 Artist Debugging 3: |-
        我的船有个洞!\\r
        \\r
        你可以帮我修好它吗?
      2-3 Artist Debugging 5: |-
        画腿和脚的程序是错误的。\\r
        \\r
        你能改对它吗？
      2-3 Artist Debugging 6: |-
        好像我坐的椅子少了一条腿！\\r
        \\r
        编辑代码来画出最后一条腿。
      2-3 Artist Debugging 7: |-
        代码里面的这个“C”看起来像是画反了！\\r
        \\r
        你能把它再改成“C”吗？
      2-3 Artist Debugging 8: |-
        我的老师说应该有始有终！\\r
        \\r
        帮我完成我的风车。你能找出哪里错了吗？
      2-3 Artist Debugging 9: |-
        有东西断了！\\r
        \\r
        茎的代码错了。你能让小画家画出正确的茎吗？
      2-3 Artist Debugging Assessment 1: |-
        评估：为什么每条边75像素太短了？\\r
        \\r
        代码哪里错了？
      2-3 Artist Free Play: 自己玩吧！想画什么就画什么。
      2-3 Artist Functions 1 a: |-
        “我，僵尸艺术家。我，爱画画 ！”\\r
        \\r
        请帮它画副方形眼镜。\\r
        \\r
        正方形的宽度是100像素，而眼镜间的桥比它短25像素。\\r
        \\r
      2-3 Artist Functions 1: |-
        “我，僵尸艺术家。我，爱画画 ！”\\r
        \\r
        请帮它画副方形眼镜。\\r
        \\r
        正方形的宽度是100像素，而眼镜间的桥比它短25像素。\\r
        \\r
      2-3 Artist Functions 10: |-
        自由发挥：这里有两个函数，一个是绘制一个大齿轮，另一个是画一个小齿轮。\\r
        \\r
        用它们来绘制一个机器的内部结构！
      2-3 Artist Functions 11 a: |-
        我们将`draw a square`（画一个正方形）的函数改成了`draw a hexagon`（画一个六边形），但它实际上还是只能画正方形！\\r
        \\r
        你能把`draw a hexagon`（画一个六方形）的函数改成能画边长50像素的六边形吗？\\r
        \\r
        用新函数来画这个图形吧！
      2-3 Artist Functions 11.5 a: |-
        这里同样是"画一个六边形"的功能。\\r
        \\r
        如果在循环中每次转**60**度，一共转**6**次，会发生什么呢？
      2-3 Artist Functions 11.5: |-
        这里同样是"画一个六边形"的功能。\\r
        \\r
        如果在循环中每次转 60 度，一共转6次，会发生什么呢？
      2-3 Artist Functions 11: |-
        我们将`draw a square`（画一个正方形）的函数改成了`draw a hexagon`（画一个六边形），但它实际上还是只能画正方形！\\r
        \\r
        你能把`draw a hexagon`（画一个六方形）的函数改成能画边长50像素的六边形吗？\\r
        \\r
        用新函数来画这个图形吧！
      2-3 Artist Functions 12 Mike: |-
        函数对于多次画一个复杂的事物非常有帮助。\\r
        \\r
        你能用“画一朵花”函数来填满整个花盆吗？\\r
        提示：每株花应该相隔100像素。
      2-3 Artist Functions 12 a: |-
        函数对于多次画一个复杂的事物非常有帮助。\\r
        \\r
        你能用“画一朵花”函数来填满整个花盆吗？\\r
        提示：每株花应该相隔100像素。
      2-3 Artist Functions 12: |-
        函数对于多次画一个复杂的事物非常有帮助。\\r
        \\r
        你能用“画一朵花”函数来填满整个花盆吗？\\r
        提示：每株花应该相隔100像素。
      2-3 Artist Functions 2 a: |-
        函数能让你定义新的模块。\\r
        \\r
        我们将画正方形的模块挪到了一个叫做“画一个正方形”的函数里。这次，用“画一个正方形”小的绿模块来调用新函数，并创建眼镜。
        \\r
        \\r
        图像中的正方形间隔75像素。
      2-3 Artist Functions 2: |-
        函数能让你定义新的模块。\\r
        \\r
        我们将画正方形的模块挪到了一个叫做“画一个正方形”的函数里。这次，用“画一个正方形”函数来画个眼镜吗。
        \\r
        \\r
        正方形间隔75像素。
      2-3 Artist Functions 3 a: |-
        编辑"draw a square 20"（画一个边长20像素的正方形）函数来画一个每边是115像素的有框架的眼镜。\\r
        \\r
        正方形相隔45像素。
      2-3 Artist Functions 3: |-
        编辑这个函数来画一个边长115像素的正方形，从而能够画出一个更大的眼镜。\\r
        \\r
        正方形的间隔为45个像素。
      2-3 Artist Functions 4 a: 现在，将函数放到一个循环中，并再加一个转向来画这三个正方形。
      2-3 Artist Functions 4: 现在，将函数放到循环里来画这三个正方形。
      2-3 Artist Functions 9: |-
        自由发挥：这里有个雪花函数。试试用它创造出冬季的景色！\\r
        \\r
        这是一个自由关卡，不需要解决问题。随便玩吧！
      2-3 Artist Loops 1: 可以做出一个边长100像素的六边形吗？记住，这代表每次只能转60度。
      2-3 Artist Loops 2: 现在用重复模块来给单元加个壳。
      2-3 Artist Loops New 1: |-
        让我们来画一个机器人的头！你可以创建一个100像素边的正方形。\\r
        \\r
        <br/>\\r
      2-3 Artist Loops New 10: 现在，让我们把这一堆V用循环连在一起。
      2-3 Artist Loops New 11: |-
        是时候做一些漂亮的东西了！
        \\r
        \\r
        重构刚刚那一关的代码，但是这次，加一个左转30度到循环里。现在，重复24次，而不是8次。
      2-3 Artist Loops New 12: '画一个边长100像素的菱形。 '
      2-3 Artist Loops New 13: |-
        现在，我们从一些（灰色的）代码开始来画一个菱形。\\r
        \\r
        循环灰色的代码来创造一个有趣的图形！
      2-3 Artist Loops New 14: |-
        改一改画菱形的代码，看看能画出什么别的形状。 \\r
        \\r
        试试改变转向的度数和循环的次数。
      2-3 Artist Loops New 15: "现在，画任何你喜欢的东西 ！ \\\\r \n<br/> <br/>\\\\r\n\\\\r"
      2-3 Artist Loops New 2: |-
        这是一个以前解决过的问题，但是这次，我们只用一个“向前移动”和一个“转向”模块。\\r
        \\r
        你能用一个“重复”模块来解决这个问题吗？
      2-3 Artist Loops New 9: 画一个简单的V（两边都是50像素）来完成这个箭头。
      2-3 Artist Nested Loops 1: |-
        你已经用循环画过图形了，但现在我们要将循环放到循环中！\\r
        \\r
        将这一整段代码放到一个“重复”模块中来画这个图形。\\r
        \\r
        <br/>\\r
        \\r
      2-3 Artist Nested Loops 10: 让这段代码循环12次来完成这个图案。
      2-3 Artist Nested Loops 11: 让这段代码循环4次可以完成该图案，在每个圆圈后要旋转 90 度哦。
      2-3 Artist Nested Loops 12: 让这段代码循环12次就可完成曲线。
      2-3 Artist Nested Loops 2: |-
        现在，循环这个三角形6次。\\r
        \\r
        在画完每个三角形后，需要转60度。
      2-3 Artist Nested Loops 3: |-
        你需要循环这个三角形12次来画出图形。\\r
        \\r
        将圆周（360度）除以要画形状的数量（12）来算算每次画完后应该转多少度。
      2-3 Artist Nested Loops 4: |-
        将菱形循环12次来画出一朵花!\\r
        \\r
        提示：我们会用和画12个三角形一样的角度来画12个菱形。\\r
        \\r
        画出每个形状后应该转多少度？
      2-3 Artist Nested Loops 5: |-
        用嵌套循环来填满建筑物的窗户。\\r
        \\r
        这些窗户长20像素，相隔20像素。
      2-3 Artist Nested Loops 6: |-
        这只恐龙的尾巴上有8个尖刺。\\r
        \\r
        每根刺有30像素长。\\r
        \\r
        将三角形循环8次，但确保画出每个三角形之后向前跳！
      2-3 Artist Nested Loops 7: |-
        循环这个三角形10次来画出太阳。\\r
        \\r
        画出每个三角形后，需要移动并转向。\\r
        \\r
        你可以用圆圈的度数（360）除以三角形的数量，来算算每次需要转多少度。
      2-3 Artist Nested Loops 8: |-
        现在我们加一些草到图画中。
        \\r
        \\r
        每一簇草相隔50像素。
      2-3 Artist Nested Loops 9: |-
        再加上一朵花，这幅图就完成了。\\r
        \\r
        将菱形循环12次来画出这朵花。
      2-3 Artist Nested Loops Free Play: 自由发挥，用嵌套循环画一些很酷的东西。
      2-3 Bee Conditionals 11: "我想知道那里有什么！\\\\r\n\\\\r\n帮我飞到院子里，只从有花蜜的花里收集花蜜。 "
      2-3 Bee Conditionals 13: |-
        这里有好多！\\r
        \\r
        用你学到的知识来收集所有的花蜜，并制作蜂蜜。
      2-3 Bee Conditionals 14: |-
        让我们把东西都放到一起！\\r
        \\r
        用你学到的知识只从有花蜜的花里收集，用的模块越少越好。\\r
        \\r
        别忘了最后制作蜂蜜。
      2-3 Bee Conditionals 15: |-
        这个像阶梯一样的图形看起来很熟悉。\\r
        \\r
        你能用尽量少的模块从花里收集一些花蜜吗？
      2-3 Bee Conditionals 2: |-
        我是一只饥饿的蜜蜂！\\r
        \\r
        \\r
        帮我用最少的模块从花朵中采集花蜜。
      2-3 Bee Conditionals 3: "查看所有的花蜜！\\\\r\n\\\\r\n帮我用尽可能少的模块来收集花蜜并酿成蜂蜜。  "
      2-3 Bee Conditionals 5: |-
        这些神奇的紫花会变化！\\r
        \\r
        每次你尝试这个关卡时，紫花有可能由1个花蜜，或根本没有花蜜...但是你在运行代码之前是不知道的！\\r
        \\r
        小心不要从没有花蜜的紫花里收集花蜜。\\r
        你必须先用“如果有花蜜”模块，来检查花蜜数量是否等于1.
      2-3 Bee Conditionals Assessment 1: |-
        评估：收集所有的花蜜。\\r
        小心，不要采集没有花蜜的紫花。
      2-3 Bee Debugging 1: |-
        这些模块真的让我很困扰。\\r
        \\r
        改正错误，从而能够采集所有花蜜。
      2-3 Bee Debugging 10: |-
        这些模块真的让我很困扰！
        \\r
        \\r
        改正错误，从而能够采集所有花蜜，并酿成蜂蜜。
      2-3 Bee Debugging 2: |-
        你能找到问题吗？\\r
        \\r
        改正错误，从而能够采集所有花蜜。
      2-3 Bee Debugging 3: |-
        哎呀，被蛰了！\\r
        \\r
        改正错误，从而能够采集所有花蜜。
      2-3 Bee Debugging 5: |-
        那朵花看起来很好吃！\\r
        \\r
        改正错误，从而能够采集所有花蜜。\\r
        你可以用“运行”和“下一步”了。
      2-3 Bee Debugging 6: |-
        真是一个甜蜜的挑战！\\r
        \\r
        改正错误，从而能够采集所有花蜜。
      2-3 Bee Debugging 9: |-
        有点耐心！\\r
        \\r
        你需要修复这个程序的一些问题，，从而能够采集所有花蜜，并酿成蜂蜜。
      2-3 Bee Debugging Assessment 1: |-
        评估：现在是时候看看你学会了什么了！\\r
        \\r
        改正错误，从而能够采集所有花蜜，并酿成蜂蜜。
      2-3 Bee Functions 1: |-
        函数能执行多个模块来完成一个任务。\\r
        \\r
        使用`采2个花蜜`函数来从每朵花采花蜜。
      2-3 Bee Functions 10: |-
        每次你运行关卡的时候，紫色花朵内的花蜜都会在 1 和 0 中变动。 \\r
        \\r
        创建一个函数，使小蜜蜂只从有花蜜的紫色花收集花蜜。
      2-3 Bee Functions 2: |-
        函数是由多个模块组合起来完成同一个任务。\\r
        \\r
        用“get 5”函数来一次得到5个花蜜。
      2-3 Bee Functions 4: |-
        “移动并获得花蜜”函数会让蜜蜂转身并收集花蜜，然后会让蜜蜂返回出发的地方。\\r
        \\r
        用这个函数收集所有的花蜜。
      2-3 Bee Functions Assessment 1: 评估：用给定的函数从每朵花上收集花蜜。
      2-3 Bee Functions Assessment 2: 评估：创建一个函数来转向、往前移动、并酿造三个蜂蜜，然后让蜜蜂返回出发的位置并向后转。
      2-3 Bee Loops 1: |-
        这些花看上去很好吃！\\r
        \\r
        用尽可能少的模块，从每朵花里收集蜂蜜。
      2-3 Bee Loops 13: 评估：用尽可能少的模块来收集所有的花蜜。
      2-3 Bee Loops 3A: 用一个“重复”循环来收集所有花蜜。
      2-3 Bee Loops 3B: 现在，用“重复”模块来收集花蜜，并酿造蜂蜜。
      2-3 Bee Loops 4: |-
        忙碌的蜜蜂！\\r
        \\r
        帮助蜜蜂用尽可能少的模块来收集花蜜并酿蜂蜜。
      2-3 Bee Loops 4A: |-
        这个谜题中的循环应该进行多少次？\\r
        \\r
        循环是你的朋友！用一些循环来减少模块，并完成这道谜题。
      2-3 Bee Loops 5: |-
        这条路的形状和其它的不一样。\\r
        \\r
        你能用尽量少的模块来收集所有花蜜吗？
      2-3 Bee Loops 7: |-
        多美的花园啊！\\r
        \\r
        帮助蜜蜂访问每一朵。\\r
        \\r
        你能找到只用7个模块就实现的方法吗？
      2-3 Bee Loops 8: |-
        在每次你游玩这个谜题时紫色花里的花蜜数量都是不一样的。\\r
        \\r
        使用“当有花蜜时”循环来收集所有花蜜。\\r
        \\r
        循环在条件为真时会不停的运行，在这里条件为“花蜜数量大于0”。
      2-3 Bee Loops Assessment 1: 评估 - 用“当”循环来收集所有花蜜。
      2-3 Maze 1: "可以帮我抓住这只顽皮的猪吗？\\\\r\n\\\\r\n在“当运行时”模块下放几个“向前移动”的模块，然后点击“运行”。 "
      2-3 Maze 12 - One Move Block: |-
        抓住那只坏猪！但这次，你只能用一个“向前移动”模块...\\r
        \\r
        啊哈，仔细看

        -   你有没有看到什么别的模块能帮你到达那里？
      2-3 Maze 12: |-
        突然，一个神奇的模块出现了！用“重复”模块，你能一次次的循环代码。\\r
        \\r
        你能通过创建一个重复循环，里面只包含一个“向前移动”模块，来抓住那只猪吗？
      2-3 Maze 13: 帮我到达猪那里！这次只能用一个“向前移动”模块。
      2-3 Maze 15: 在这道题里，两个“重复”循环能够让你用最少数量的模块来到达猪那里！
      2-3 Maze Loops 18: |-
        用最少的模块帮我到达太阳花！\\r
        \\r
        试着在一个“重复”循环里添加另一个，这样来减少所需要模块的数量。
      2-3 Maze Loops 19: |-
        让我们到达下一级！
        \\r
        \\r
        用循环来使用尽可能少的模块，帮我到达太阳花！
      2-3 Maze Loops Assessment 1: '评估：只用5个模块帮我到达太阳花！ '
      4-5 Artist 1: |-
        帮我完成画我的箱子。(每一行是300像素长)\\r
        \\r
      4-5 Artist 10: 点击“运行”来试试代码。然后，重复它足够多的次数来完成这幅画。每次的颜色都会不一样。
      4-5 Artist 11: |-
        完成这些绿线。\\r
        \\r
        它们有300像素长，相隔15像素。
      4-5 Artist 2: 你能用“重复”模块来完成这个正方形吗？
      4-5 Artist 3.5: |-
        试着了解这段代码会发生什么（或者点击"运行"来试试）。\\r
        \\r
        然后，重复它来完成这幅图！
      4-5 Artist 3: |-
        这个长方形的花床周长是600。\\r
        长边是200。\\r
        \\r
        用最少的模块来画出这个长方形。
      4-5 Artist 4: |-
        一个圆有多少度？\\r
        \\r
        循环这些模块来创造一个彩色的圆圈。
      4-5 Artist 5: 在“???”里应该放什么，才能让僵尸用循环来完成这幅画呢？
      4-5 Artist 6: 等边三角形每个角的度数都是60。每条边是200像素。完成这幅画。
      4-5 Artist 7: |-
        直角三角形的各个角分别是30、60、90度。斜边（弦）的长度是200像素。\\r
        \\r
        完成这幅画。
      4-5 Artist 8: |-
        足球场中线与边线是 _垂直_ 的。\\r
        这个场地的周长是800像素，长是240像素。它有多高？\\r
        \\r
        画出球场的边线和中线。
      4-5 Artist 9: |-
        画出这幅图的另一半，使得这个图变得对称。\\r
        这些是等边三角形，边长是50像素。
      4-5 Artist Assessment 1: 评估：用循环来画等边三角形。每条边是300像素。
      4-5 Artist Free Draw 1: 自由发挥！想画什么就画什么。
      4-5 Artist Patterns 1: |-
        用循环来画出正方形。\\r
        \\r
        每条边是20像素长。
      4-5 Artist Patterns 10: |-
        这个代码画了两行六边形 - 循环整个代码4次来画一个蜂窝。\\r
        \\r
        你需要在最外层的的循环里往回跳120像素，确保小艺术家不会画到屏幕外面去。
      4-5 Artist Patterns 11: 需要重复多少次才能画出一个半圆？
      4-5 Artist Patterns 12: |-
        如果你创建一个和这个很像的循环，但是往左转，而不是往右转，会怎样呢？\\r
        \\r
        你能重复它来画出波浪吗？
      4-5 Artist Patterns 13: |-
        现在，让我们把所有东西重复4次来画出这个画框。小心转角 -- 你不能只转90度！\\r
        \\r
        如果转60次3度，就会创建出一个半圆，什么样的代码能创建出1/4圆的转角？
      4-5 Artist Patterns 2: |-
        如果将你的正方形循环放到另一个循环中，我们称之为嵌套循环。\\r
        \\r
        在外面的循环里需要加上什么代码，才能让15个正方形一个挨一个的排成一条线？
      4-5 Artist Patterns 3: 现在，让我们增加难度！我们已经将所有模块嵌套到另一个循环里了，但是你需要让小艺术家回来画下一行。哪些代码模块能放在最外层循环的下面来画出整个网格？
      4-5 Artist Patterns 4: |-
        菱形的边长是50像素，角度是120度和60度。\\r
        \\r
        用循环来画出它。
      4-5 Artist Patterns 5: |-
        让我们重复这个来画出一行6个菱形。\\r
        \\r
        \\r
        注意：我们需要改动菱形的代码来重复3次，而不是两次。想想为什么要这么改呢？
      4-5 Artist Patterns 6: |-
        需要重复多少次这个模块才能画出网格中所有的菱形？\\r
        \\r
      4-5 Artist Patterns 7: |-
        让我们来修改上一关的代码来适应更复杂的这一关。注意这些菱形的重叠方式，尝试将第一个“向后跳跃”的距离从100变到50(一半的距离)-那么现在小艺术家在第二个“向后跳跃”的时候应该跳多远。\\r
        \\r
      4-5 Artist Patterns 8: 用一个循环来画出这个边长为40像素，角度为60的六边形。
      4-5 Artist Patterns 9.5: |-
        让我们循环此代码来画两行六边形。\\r
        \\r
        请注意第二行是如何被移动到右边的。
      4-5 Artist Patterns 9: |-
        现在，重复三次代码来画出整行。\\r
        \\r
        每个六边形从最左到最右的宽度是80像素。
      4-5 Artist Patterns Free Play: 自由发挥 - 试着亲手画一个自己的图案！
      4-5 Bee Conditionals 1: |-
        云朵挡住了我的视线！
        \\r
        \\r
        检查一下云下面是否有花，然后只从有花的地方收集花蜜。\\r
        小心，它是变化的！
      4-5 Bee Conditionals 2: |-
        更多的云！\\r
        \\r
        检查每朵云下面是不是藏着花。如果是的话，再采集花蜜。\\r
        \\r
        记住：
        不是所有云下面都是一样的东西！
      4-5 Bee Conditionals 4: |-
        有时云下面是花，有时云下面是蜂蜜！\\r
        \\r
        使用“如果/否则”模块，如果是一朵花，就收集花里的花蜜。\\r
        否则酿蜂蜜（因为它是蜂巢）。
      4-5 Bee Conditionals 5: |-
        在云底下要么是花，要么是蜂巢！\\r
        \\r
        如果是花，用“如果/否则”模块来收集花蜜。\\r
        否则酿蜂蜜（因为它是蜂巢）。
      4-5 Bee Conditionals 6: |-
        我不确定这朵花有多少花蜜， 但我知道它可能有1个，两个或3个花蜜。\\r
        \\r
        将一个“如果/否则”模块和另一个“如果/否则”模块混合在一起，成为了一个“如果，否则如果，否则”模块，来采集花里的所有花蜜。\\r
        \\r
        记住，每次你运行谜题时，花蜜的数量都会变化的！
      4-5 Bee Conditionals 7: |-
        这些花里可能有一个，两个或三个花蜜。
        \\r
        \\r
        完成“检查紫色花朵”的函数，然后用它来从所有花里收集花蜜。
      4-5 Bee Conditionals 8: |-
        完成“检查花朵，酿造蜂蜜”的函数。\\r
        \\r
        你的函数应该检查紫色的花是否有3个，2个或1个花蜜，然后收集所有的花蜜。\\r
        然后，往前移动并酿造蜂蜜。
      4-5 Bee Conditionals Assessment 1: |-
        评估：这朵云要么藏着一朵有一个花蜜的花，或者有一个蜂蜜的蜂蜜罐。
        \\r
        \\r
        完成这个“采集花蜜或酿造蜂蜜”的函数，然后调用它来采集所有花蜜，并且酿蜂蜜。\\r
      4-5 Bee Debugging 1: |-
        这些模块真的让我很苦恼。\\r
        \\r
        你能修好它们吗？
      4-5 Bee Debugging 6: |-
        紫色花的花蜜数量在每次运行谜题的时候都是不一样的。\\r
        \\r
        修好这些模块来收集到所有花里的花蜜。
      4-5 Bee Debugging Assessment 1: '评估: 修复代码。'
      4-5 Bee Nested Loops 2: "从每朵花里收集所有的花蜜。\\\\r\n\\\\r\n用嵌套循环。 "
      4-5 Bee Nested Loops 4: "从所有的花里收集花蜜，然后在每个蜂窝那里酿花蜜。\\\\r\n\\\\r\n用嵌套循环。 "
      4-5 Bee Nested Loops Assessment 1: 评估 - 收集所有花蜜，然后用循环来酿造蜂蜜。
      4-5 Maze 7: |-
        让僵尸快速的到达太阳花！\\r
        \\r
        你能用少于等于11个模块来解决这道题吗？
      4-5 Maze 9: |-
        现在，我们用一个新的，叫做“重复直到”的模块。\\r
        \\r
        这个模块保持循环命令，直到僵尸到达太阳花那里。\\r
        \\r
        用新的“重复直到”模块来用尽可能少的模块来解决这道题。
      4-5 Maze Assessment 1: 评估：用尽可能少的模块到达太阳花。
      4-5 Maze Conditionals 1: 用“重复直到”模块让僵尸到达太阳花。
      4-5 Maze Conditionals 10: |-
        能不能加三个块来帮僵尸走出这个复杂的迷宫？\\r
        \\r
        如果你做对了，那它就可以通过任何长度的弯曲路径了！
      4-5 Maze Conditionals 2: 用“重复直到”模块让僵尸到达太阳花。
      4-5 Maze Conditionals 3: 用新的"如果"模块让我来决定什么时候转弯。\\r
      4-5 Maze Conditionals 4: 好啦，这是最后一个关卡了，但你需要记住如何一起使用"如果"模块和"重复"模块。
      4-5 Maze Conditionals 5: |-
        “我，想要向日葵” ！\\r
        \\r
        使用"如果"模块，让僵尸用最少的模块到达太阳花那里。
      4-5 Maze Conditionals 6: |-
        “吃掉向日葵 ！”\\r
        \\r
        使用"如果"模块，让僵尸用最少的模块到达太阳花那里。
      4-5 Maze Conditionals 7: 这个关卡的解决方案不是非常不同，但是要小心食人花！
      4-5 Maze Conditionals 8: |-
        “如果/否则”否则模块会检查一个条件，然后根据结果执行相应的部分。\\r
        \\r
        用这个新的模块让我到达太阳花那里。
      4-5 Maze Conditionals 9: |-
        让我们来再练习一次使用“如果/否则”块！
        \\r
        \\r
        用你的手指头比划一下，看看你能否试一次就成功。
      4-5 Maze Conditionals Assessment 1: 评估：用一个“重复直到”和一个“如果/否则”模块，并用尽量少的模块来帮我到达太阳花。
      4-5 Nested Loops 1: |-
        完成代码来画出这些三角形。第一个三角形已经帮你画好了。提示：三个三角形一共旋转了360度。\\r
        \\r
      4-5 Nested Loops 11: |-
        你能用嵌套循环画出人行道上的十个正方形吗？\\r
        \\r
        每个正方形是30像素。
      4-5 Nested Loops 12: 你能用嵌套循环画出36个三角形吗？
      4-5 Nested Loops 2: "现在，把这个循环放到另一个循环里，来画出10个三角形。\\\\r\n这就叫做嵌套循环。  "
      4-5 Nested Loops 3: |-
        通过将开始的代码嵌套到另一个循环中来画一个太阳。\\r
        \\r
        如果要画出这个很酷的中空设计，你需要在转弯前往前跳三角形长度那么多。
      4-5 Nested Loops 5: 循环下面的代码来创建一个风车。
      4-5 Nested Loops 6: 你可以通过循环三角形代码来画一个六边形吗?
      4-5 Nested Loops 7: |-
        循环这个图形10次。\\r
        \\r
        你的循环里每次需要转多少度呢？
      4-5 Nested Loops 8: "循环这个图形6次。\\\\r\n\\\\r\n你的循环里每次需要转多少度呢？ "
      4-5 Nested Loops 9: 在鳄鱼嘴里画上牙齿！
      4-5 Nested Loops Assessment 1: 评估：用嵌套循环来完成这幅画。
      4-5 While Loops 1: 将我移到坑旁边，并且使用“填满”模块来用两铲土填满它。
      4-5 While Loops 2: 将我移到土堆那里，然后用“移除”模块来移除五铲土。
      4-5 While Loops 3: |-
        用尽可能少的模块来完成这一关！\\r
        \\r
        将我移到土堆那里，并将所有土移除。然后将我移动坑旁边，然后完全填满它。
      4-5 While Loops 4: "哇，瞧瞧这里！\\\\r\n\\\\r\n我不知道要多少铲土才能填满它。\\\\r\n你能写一个程序用“填充”模块，直到它和地面一样平吗？  "
      AWS applab: |-
        # 现在这样做\\r

        \\r

        -   第一步\\r
        -   \*
            第二步
      AWS link: "# 使用这个工具"
      AlgPD DR Free Play: 用现有课程中或者别的什么地方的单词问题，来完成设计，并编写一个函数。可以使用工作簿中的设计表格，或者从[这里]('https://code.org/curriculum/algebra/docs/worksheets/design_recipe.pdf')下载副本。
      Alien Defender: "**项目想法**: 在游戏实验室创建一个防守游戏！"
      Alien Defender_2018: "**项目想法**: 在游戏实验室创建一个防守游戏！"
      AllTheThings Applab - Turtle move with button: |-
        # 测试应用实验室制作应用前请登录(应用实验室被设计为仅在登陆后可用。/_通常我们可以让人们自动登录，但是这个实现必须要让所有脚本都变成可强制执行的，显然对所有脚本都做一次这样的更改会很麻烦_/)。

        # 你的第一个可交互应用！

        <img src='https://images.code.org/3fad83213ae72073251c4d5abc1f048a-image-1444060521578.png' style='float: right; width: 250px'>一组新模块_用户界面控制(UI Controls)_已加入到工具箱中，该模块使您能与应用的用户交互。为了让学习难度尽量低，我们从这两个模块开始：

        -   `onEvent`（当事件发生时）：在某些事件发生时（比如按钮被按下）调用指定的函数。
        -   `button`(按钮)：在屏幕上放置一个按钮

        # 这样做

        尝试复刻这个简单的应用（如下图所示），让乌龟在按钮点击时移动。你需要做三件事：

        -   添加一个`button`
        -   添加一个`onEvent`（当事件发生时）模块
            \*添加`moveForward`到onEvent（当事件发生时）模块的函数中

        成品图-随时可查看
        <img src="https://images.code.org/1cdc8cfbcef2a43f84b11ebdf14aed0c-image-1444061731350.gif" style="border: solid 1px black; width: 500px; margin: auto">
      AllTheThings Applab DesignModeDefault: "<img src=\"https://images.code.org/117a2a8e098760173f16048fde721295-image-1479829058899.gif\" style=\"float: right; width: 150px\">\n\n## 试试看 -- 文本密码检查器\n\n\\*\\*关键 \\*\\*: 您可以使用 `==` 来比较字符串和数字。  \n\n-   在事件处理程序中使用 如果语句来比较用户在界面元素中输入的文本。\n\n\\*\\* 设置: \\*\\*\n\n-   注意设计模式下的设置\n-   有两个图像: 一个红色的锁和一个绿色的 \"解锁\"。\n-   绿色 \"解锁\" 开始是 _隐藏_ 状态。\n\n## 这样做:\n\n\\*\\* 将如果语句添加到事件处理程序，来检查密码。并仅在密码正确时显示 \"解锁\" \\*\\*  \n\n-   可以使用`==` 来比较从 *password\\_input* 文本框中获得的文本和要用作密码的字符串。应使用的布尔表达式应如下所:\n\n![](https://images.code.org/9124274f38ed19bdae6cfc4b492162b6-image-1479828796051.png)\n\n-   如果用户输入了正确的密码, 则 **显示** 绿色的\"解锁\" 并 **隐藏** 红色锁。\n    \\\\t\\* 我们提供了隐藏和显示图像的代码。只需要添加如果语句。\n-   否则不执行任何操作。 可以再试一次。"
      'AllTheThings: Pixelation - Lesson 14 - Make the Letter A': "<img\nalign=\"right\" src=\"https://code.org/images/cspunit1/letterA.png\" width=\"150\"\nhspace=\"20\">\\\\r\n\n# 任务1： 做一个3x5的字母 \"A\"\\\\r\n\n从试着用像素化的小工具来重建3x5的字母\"A\"开始\\\\r\n\\\\r\n这幅图从_不正确_的维度开始的。你的第一个任务是将第二个字节设置成5，即：0000 0101，然后你能开始键入像素数据来创建A。\\\\r            "
      'AllTheThings: Pixelation - Lesson 15 - Color Shades 4x4': "# 像素: 任务 3\n\n<img src = \"https://code.org/images/cspunit1/ColorTask3.png\" align=right width=200 hspace=20> \n* * 方向: ** 开始先看麦迪在视频中创建的 4x4 图像。\n\n任务是用 _每像素12位_ 来填充 4x4 网格的颜色。最后的结果应该看起来像是 (但不完全一样) 显示在右边的图像。 \n\n有以下要求: \n\n-   第1行-用红色填充阴影。\n-   第2行-填充绿色阴影。\n-   第3行-填充蓝色阴影。\n-   第4行-填充灰色阴影。"
      'AllTheThings: Pixelation - Lesson 15 - Complete 3-bit color': "# \n\n颜色像素: 任务 1 \n\\*\\* 方向: \\*\\*\n\n-   我们请您以玛蒂创建的 4x2 图像开始， 但我们已经把最后两个方块拿掉。\n-   找到丢失的两个颜色并对其进行编码来完成图像。"
      App Lab test: <a href="https://docs.google.com/document/d/1HgSfQeUI1zxo-3bL-9jhff0jI2um2A-3vwpvy3JAD38" target="_blank">创新项目</a>
      AppLab Intro 1 - Add Button: "# 开始-添加一个按钮\\\\r\n\n\\\\r\n你需要主屏幕上有一个按钮来进入你的新屏幕。您可以通过两种方式来制作一个新按钮。\\\\r\n\\\\r\n\n1.  如果你喜欢的 \"狗\" 按钮的风格, 你可以做一个副本。单击该按钮, 然后单击 \"复制\"。\\\\r\n    \\\\t![](<https://images.code.org/171aa97d90014f66f999ecf929b672c0-image-1504289310310.08.10 AM.png>)\\\\r\n    \\\\r\n    2.也可以从头开始，通过从 \"设计工具箱\" 中拖进新按钮来制作。\\\\r\n    \\\\r\n    \\\\t![](<https://images.code.org/501c9ddd3e5b737df5b9cf053ae198a7-image-1504289359851.09.09 AM.png>) \\\\r\n    \\\\r\n2.  单击并拖动新按钮到你所需的位置. \\\\r\n    \\\\r\n3.  3.\n    一旦你有一个新的按钮，给它一个清楚的名称, \"猫按钮\"。您也可以将改为 \"猫\"!\\\\r\n    \\\\r\n    \\\\t![](<https://images.code.org/87586b18b001fae0001d2243f6d09889-image-1504289448320.10.14 AM.png>)\\\\r\n    \\\\r\n    4.还有很多其他的方法可以改变你的按钮的外观。使用完整的选项菜单进行试验. \n4.  一旦你做完了，运行你的应用程序来确保你的按钮出现。然后单击 \"完成\" 并继续学习如何使您的按钮真正工作。"
      AppLab Intro 1 - Add Event: |-
        # 开始- onEvent（当事件发生时）\\r

        \\r
        你回到了 "代码模式"。您会发现这个应用程序中已经有了一些代码。此`onEvent()`（当事件发生时）模块在单击 "狗按钮" 时运行一些代码。您需要第二个`onEvent()`（当事件发生时）模块来使按钮正常工作。有两种方法可以做到这一点. \\r
        \\r

        1.  从代码模式中, 您可以把模块拉进来\\r
            \\r
            \\t![](<https://images.code.org/c1ca564880152242c3bf92b2b9ad4fca-image-1504290427563.26.56 AM.png>) \\r
            \\r
        2.  从设计模式中, 您的按钮有一个 "事件" 选项卡. 单击 "插入并显示代码" 来添加代码。\\r
            \\r
            \\t![](<https://images.code.org/90d6c0cb723ee4317244f99dcfbd3a66-image-1504290568475.29.18 AM.png>)\\r
            \\r
        3.  运用下拉, 以确保您正在使事件回应 "猫按钮"。\\r
            \\r
            \\t![](<https://images.code.org/ebef61f18259a2fb0d8addb90d9d8ba4-image-1504290674099.31.03 AM.png>) \\r
            \\r
        4.  `setScreen()`（设置屏幕）模块更改屏幕。将此块拖到`onEvent()`（当事件发生时）模块里, 然后从列表中选择您的 "猫屏幕"。\\r
            \\r
            \\t![](<https://images.code.org/00433d32665ec6f2aa6a0caac2626568-image-1504290788639.33.02 AM.png>)\\r
            \\r
        5.  运行您的应用程序。如果一切正常, 当你点击它的时候，你的猫按钮现在应该带你到你的猫屏幕, 。当您准备好，继续学习如何添加声音到您的应用程序!
      AppLab Intro 1 - Add Screen: |-
        # 开始-添加猫屏幕

        \\r
        \\r

        1.  你要做一个猫屏幕。这是 "设计模式", 您可以在其中添加和编辑屏幕。要添加屏幕, 请单击屏幕下拉列表并选择 "新屏幕".\\r
            \\r
            \\t![expandable] \(<https://图像>. 代码. org/4e90c1d897ede63403a1351f5ec3bfae-图像-1504288061907.47.33AM. png)\\r
            \\r
        2.  然后命名您的新屏幕为 "猫屏幕"。
            \\r
            \\r
            \\t![expandable] \(<https://图像>. 代码. org/966a2563aaf8a59a983fe6417d01dae9-图像-1504288205242.49.33AM. png)\\r
            \\r
        3.  最后, 选择屏幕的 猫背景图像\\r
            \\r
            \\t![expandable] \(<https://图像>, 代码. 组织/ff8509146b8a249973498af63f41b08d-图像-1504288758611.51.40AM. png)\\r
            \\r
            一旦您添加了新的屏幕，点击 "完成"来了解如何将按钮添加到屏幕中。
      AppLab Intro 1 - Add Sound: |-
        # 开始-添加声音\\r

        \\r
        应用程序实验室也可以播放声音。您需要使用`playSound()`（播放声音） 块来执行此操作。\\r
        \\r

        1.  将`playSound()`（播放声音）块拖到您的`onEvent`（当事件发生时）中。当用户单击按钮，会播放声音。然后单击菜单中的 "选择..."\\r
            \\r
            \\t\!\[](\<<https://images.code.org/9c84293859317f7ae46391a28c5a51e7-image-1504291688560.47.41>
            AM.png>)\\r
            \\r
        2.  通过 "声音库", 找到您想要的声音。有成千上万种!\\r
            \\r
            \\t\!\[](\<<https://images.code.org/5393762b4f31fa4f09040ca8b09ca91c-image-1504291692587.47.52>
            AM.png>)\\r
            \\r
        3.  运行你的应用程序, 看看你的声音工作如何。
      AppLab Intro 1 - Build Your Adventure: |-
        # 构建您的冒险活动\\r

        \\r
        使用此空白项目来创建你的项目。为了让你开始, 已经有一个主屏幕和一些按钮。如果你需要的话，可以用**快速复制屏幕** 来建立你的世界。你想创造什么？！\\r
        \\r完成后, 您可以通过电话或链接与朋友 "共享" 您的工作。创建自己的帐户, 来持续的在应用程序实验室创作！
      AppLab Intro 1 - Template: |-
        # 开始-尝试这个应用程序\\r

        \\r
        在你建立自己的《惊险岔路口》之前，用应用程序实验室来实践，来创建这个关于参观宠物店的项目。开始先点击 "运行", 然后导航到 "狗" 屏幕。一旦你完成了, 点击 "完成" 继续前进。
      AppLab Intro 1 - Try App: |-
        # 开始-尝试这个应用程序\\r

        \\r
        在你建立自己的《惊险岔路口》之前，用应用程序实验室来实践，来创建这个关于参观宠物店的项目。开始先点击 "运行", 然后导航到 "狗" 屏幕。一旦你完成了, 点击 "完成" 继续前进。
      AppLab Intro 2 - Edit place1 2: |-
        考虑一下你想如何在屏幕上继续冒险。然后添加一些文字来讲述你的故事! \\r
        \\r

        1.  使用 "屏幕选择器" 选择您刚才所做的屏幕 ([显示在哪里](#triggercallout=selector))\\r
        2.  将一个新的 "文本区域" 拖到屏幕上来添加它。([显示在哪里](#triggercallout=textAre))\\r
        3.  拖动文本区域的右下角以更改其大小。\\r
        4.  更改文本来告诉用户在此屏幕上发生了什么。然后将文本改成你想要的颜色！\\r
            \\r
            单击 "运行", 然后 "完成" 以继续。\\r
            \\r
            ![expandable](https://images.code.org/8ba0d4f0eccaf83163e86d10eec3a291-image-1505766539456.gif) 单击查看这些步骤的动画图
      AppLab Intro 2 - Edit place1: |-
        在最后一个屏幕上, 你让你的角色在行动或地点之间做选择。选择其中之一, 并开始为它做一个屏幕!\\r
        \\r

        1.  在屏幕选择器中选取 "新屏幕..."([显示在哪里](#triggercallout=selector))\\r
        2.  将屏幕的 "标识" 更改为清楚的名字，例如新位置的名称 ([显示在哪里](<#triggercallout = idChange>))\\r
        3.  您可以从屏幕选择器里将两个屏幕来回切换。([显示在哪里](#triggercallout=selector))\\r
        4.  如果您喜欢, 可以选择屏幕的 "背景色"。\\r
            \\r
            单击 "运行", 然后 "完成" 以继续进行，并开始把它添加到屏幕。
      AppLab Intro 2 - Edit startScreen: |-
        欢迎来到 App 实验室!
        现在你在 **设计模式**下 ，这里你可以个性化你的应用程序的外观。通过挑选一个有趣的标题来开始你的冒险吧！\\r
        \\r

        1.  单击您的应用程序的标题。 ([显示在哪里](#triggercallout=titleCallout))\\r
        2.  更改 "文本" 以选择您喜欢的任何名称!([显示在哪里](#triggercallout=designMenu))\\r
        3.  向下滚动菜单以更改标题的颜色 ([显示在哪里](#triggercallout=changeTextColor))\\r
            \\r
            一旦你觉得标题好看了，就点击一下"运行"，以确保它看起来不错。然后点击 "完成" 继续下去！\\r
            \\r
            ![expandable](https://images.code.org/47c8fc2986226beaa39e382bc0759797-image-1505765264098.com-gif-maker.gif)
            单击此处可查看动画中的所有三个步骤。
      AppLab Intro 2 - Edit startScreen2: |-
        干得好! 是时候开始填写你的故事了。
        \\r
        \\r

        1.  单击此屏幕上的文本。([显示在哪里](#triggercallout=storyText)\\r
        2.  填写你的故事([显示在哪里](#triggercallout=editStoryText))\\r
        3.  浏览菜单中可以更改的不同属性。个性化此屏幕的外观！([显示在哪里](#triggercallout=changeTextColor))\\r
            \\r
            点一次"运行"按钮，看看是不是都对了。然后点击 "完成" 继续前进!
      AppLab Intro 2 - Template: |-
        # 开始-尝试这个应用程序\\r

        \\r
        在你建立自己的《惊险岔路口》之前，用应用程序实验室来实践，来创建这个关于参观宠物店的项目。开始先点击 "运行", 然后导航到 "狗" 屏幕。一旦你完成了, 点击 "完成" 继续前进。
      AppLab Intro 2 - Try App: |-
        <img src="https://images.code.org/1f43ffc6a6da4c3a7644802cdbbff58b-image-1504737782528.jpg" style="float:right;width:200px">

        # 开始 - 尝试此应用程序

        你将要通过扩展这个项目来构建一个《惊险岔路口》应用程序。开始时，你已经有了蓝色的项目概览部分。点击 "运行" 并单击已创建的内容。

        一旦看到项目已经对了，就可以点击 "完成"来开始创造自己的。
      AppLab Intro 2 - Try Cat Commander: |-
        猫司令的代码看起来是这样的。花一分钟滚动代码, 看看你是否能理解它是如何工作的。和一个搭档谈谈你看到了什么模式？\\r
        \\r
        一旦你完成了, 点击 "运行" 然后 "完成", 来学习建立自己的冒险。
      AppLab Intro 2 - add Button: |-
        现在你有两个屏幕, 但没有办法在两者之间作业。是时候添加按钮了！\\r
        \\r

        1.  使用屏幕选择器返回到您的 "开始屏幕" ([显示在哪里](#triggercallout=selector))\\r
        2.  2.
            将一个按钮拖到屏幕上 ([显示在哪里](#triggercallout=dragButton))\\r
        3.  3.
            给你的按钮一个明确的 "标识", 描述它做什么 ([显示我在哪里](#triggercallout=changeButtonID))\\r
        4.  4.
            更改按钮的 "文本", 以描述它将把用户带到哪里。
        5.  个性化您按钮的其他属性, 如 "文本颜色" 或 "背景颜色"。\\r
            \\r
            单击 "运行" 然后 "完成" 以继续前进，开始编写将使您的按钮起作用的代码\\r
            \\r
            ![expandable](https://images.code.org/43f2678e4748a1fa09556f75cad65e97-image-1505766882756.gif)
            单击以查看所有步骤的动画
      AppLab Intro 2 - add images: |-
        你现在知道如何制作一个简单的《惊险岔路口》应用程序, 但你可以加更多的内容！如果你想添加图像到你的屏幕, 这是非常容易的!\\r
        \\r
        1.
        在浏览器中的另一个选项卡上联机, 查找要使用的图像\\r
        2.
        右键单击图像并保存其地址 (通常为 "复制链接地址" 或 "复制图片地址") \\r

        3.  回到应用程序实验室，并进入设计模式\\r
        4.  将一个 "图像" 元素拖到屏幕上\\r
        5.  将您复制的 URL 粘贴到 "图像"属性\\r
            \\r
            "运行" 应用程序一次来测试它。然后点击 "完成" ，并继续学习添加声音。\\r
            \\r
            ![expandable](https://images.code.org/5b977b1c127b3fcb1761aadcb74c79e8-image-1505772215256.gif)
            单击查看所有步骤的动画
      AppLab Intro 2 - add more buttons 2: |-
        该添加第二个按钮，并编写代码使它能正常工作了。\\r
        \\r

        1.  将第二个按钮拖到"startScreen"（开始屏幕）上, 并给它定义一个清晰的"id"（标识） \\r
            2 更改按钮的文本和颜色\\r
        2.  在代码模式中, 拖进第二个`onEvent()`（当事件发生时）块, 并在它的内部拖进一个`setScreen()`（设置屏幕）\\r
            \\r
        3.  将您的`onEvent()`（当事件发生时）和`setScreen()`（设置屏幕）块的"id"（标识）设置到您添加的按钮和屏幕上\\r
            \\r
            如果运行运作正常, 你现在应该有一个可以改变屏幕的第二个按钮。"运行" 你的应用程序, 如果它正常的话，点击 "完成".\\r
            \\r
            ![expandable](https://images.code.org/33d1a6d2dcc81ed8ecd0966d2f0682ca-image-1505770427380.gif)
            单击查看所有步骤的动画
      AppLab Intro 2 - add more buttons: |-
        如果要做一个真正的《惊险岔路口》, 你需要添加更多的选择！从添加你的玩家的第二个选择开始。\\r
        \\r

        1.  使用屏幕选择器添加新屏幕。给它一个明确的 "标识"。\\r
        2.  2.
            设置屏幕的 "背景颜色"\\r
        3.  在屏幕上添加一个 "文本区域", 描述会发生的事情。\\r
            \\r
            单击 "运行" 然后 "完成" 以继续。您需要添加另一个按钮，并写代码让它工作。\\r
            \\r
            ![expandable](https://images.code.org/f1c83578a245d832c94c78aeba6ef317-image-1505768404048.gif)
            单击以查看所有步骤的动画
      AppLab Intro 2 - add onEvent: |-
        <img src="https://images.code.org/89a0cddfc305cb44a3d888c5de864d2e-image-1505423852271.17.02
        PM.png" style="float:right;height:120px">\\r
        \\r
        这是您可以在其中编写应用程序的代码模式,。您将添加类似于图片的代码. \\r
        \\r

        1.  单击并将一个"onEvent"（当事件发生时）模块拖到您的工作区 ([显示在哪里](#triggercallout=onEvent))\\r
        2.  使用左变得下拉菜单选择您的按钮的标识\\r
        3.  单击并拖动"setScreen"（设置屏幕）块到"onEvent"（当事件发生时）模块中 ([显示在哪里](#triggercallout=setScreen))\\r
        4.  用下拉列表选择新屏幕的标识\\r
            \\r
            你的应用程序现在能切换屏幕了！
            通过点击“运行”来尝试一下。然后点击"完成" 继续。\\r
            \\r
            ![expandable](https://images.code.org/b9970c3478dfb15e7531034d26fbcc40-image-1505767231404.gif)
            单击以查看动画中的所有步骤
      AppLab Intro 2 - add sound: |-
        <img src="https://images.code.org/3c1d6506a6a3c350380b921e08588a2b-image-1505429594117.52.37
        PM.png" style="float:right;height:100px">\\r
        \\r
        您也可以将声音添加到应用程序中！将它们添加到`onEvent()`（当事件发生时）之外, 冒险开始时 (适合背景音乐) 播放，或在`onEvent()`（当事件发生时）中播放，当单击该按钮时 (适合 "赢"/"输" 声音) 。\\r
        \\r

        1.  将`playSound()`（播放声音）模块拖到程序中\\r
        2.  单击下拉列表, 然后 "选择...", 然后 到"声音库" 来查找内置在应用程序实验室的声音\\r
        3.  尝试在 "背景" 类别里找到更长的，可以在整个冒险过程中播放的声音。\\r
        4.  点击 "选择" 来选择你喜欢的声音。\\r
        5.  您还可以将代码拖动到`onEvent`（当事件发生时）模块中, 以便仅在事件发生时播放声音。这里最好播放短一点的声音。\\r
            \\r
            运行您的应用程序。现在应该有声音了!
      AppLab Intro 2 - finish and share: |-
        恭喜你完成了编程一小时! 你可以和朋友分享你的工作! 单击 "共享" 以获取链接, 或者可以将文本分享给他们。\\r
        \\r
        你能继续在这里工作。每当你的朋友使用共享的链接, 他们会得到你所做的最新版本。你将在建立多宏大的冒险？
      AppLab Intro 3 - Change Screen Color: |-
        将屏幕的 `"background-color"` 设置为 `"red"`（红色）。单击图片查看如何操作。\\r
        \\r
        ![expandable](https://images.code.org/8b1d99aa6bd6274e05b1844fab7e8b2a-image-1505870100643.gif)
      AppLab Intro 3 - Change Text 2: |-
        给 `"label1"`（标签1） 一个 `"font-size"`（字体大小） 40, 并将其 `"text-color"`（文本颜色） 设置为`"blue"`（蓝色）。不要忘记在颜色上使用双引号`"`。单击该图片以查看如何进行\\r
        \\r
        ![expandable](https://images.code.org/70f1ef9698ff41c15f9825755fde3782-image-1505958989565.gif)</details>
      AppLab Intro 3 - Change Text: |-
        使 `"label1"`（标签1）的`"font-size"`（字体大小）更大。单击图片以查看如何进行。\\r
        \\r
        ![expandable](https://images.code.org/6125888ad13353978132b19dfca8cc49-image-1505953367275.gif)
      AppLab Intro 3 - Change Two Buttons: |-
        将左按钮的`"background-color"`（背景颜色）设置为`"red"`（红色），并将右按钮设为`"blue"`（蓝色）。鼠标悬停在按钮上可读取其`"id"`标识。单击图片查看帮助。\\r
        \\r
        ![expandable](https://images.code.org/d6418be215384e89872a72c2bd6d4a8a-image-1505875864576.gif)
      AppLab Intro 3 - Full Text: |-
        将此标签的`"text"`（文本） 设置为您想要的任何内容 (例如 `" 嗨!"`).请确保包括引号 `"`。单击图片以查看如何进行。\\r
        \\r
        ![expandable](https://images.code.org/4e8549acbca3449cb336fe0ed495f8f3-image-1505878779849.gif)
      AppLab Intro 3 - onEvent before: |-
        将屏幕的`"background-color"`（背景颜色）设置为`"orange"`（橙色）。然后在`onEvent()`（当事件发生时）中添加代码, 这样按钮就会将屏幕的`"background-color"`（背景颜色）设置为`"pink"`（粉红色）。单击图片以查看如何进行。\\r
        \\r
        ![expandable](https://images.code.org/6c338185d7fe959daed2465c4f91fb55-image-1505888600472.gif)
      AppLab Intro 3 - onEvent intro: |-
        在新的`onEvent()`（当事件发生时）块中放置的块将只在`"click"`（点击）`"bigButton"`（大按钮）时运行。添加代码, 以便该按钮将使屏幕的`"background-color"`（背景颜色）变为`"green"`（绿色）。记住要对颜色使用引号 `"`。单击图片以查看如何进行。\\r
        \\r
        ![expandable](https://images.code.org/bbb452fdee5c546894a4f2025024ace3-image-1505882181893.gif)
      AppLab Intro 3 - onEvent mouseInOut: |-
        您的程序可以有多个`onEvent()`（当事件发生时）块。左按钮已将两个按钮 `"background-color"`（背景颜色）设置为`"purple"`（紫色）。添加代码以使右按钮将两个按钮`"background-color"`（背景颜色）设置为`"green"`（绿色）。单击图片以查看如何进行。\\r
        \\r
        ![expandable](https://images.code.org/5cd0c24b0f7f855daa2225a4b6a08087-image-1505932139152.gif)
      AppLab Intro 3 - onEvent mouseOut: |-
        当鼠标移出按钮时, `"mouseout"`（鼠标移出）事件将触发。编写代码, 将屏幕的`"background-color"`（背景颜色）设置为 `"black"`（黑色）, 并当鼠标移出按钮时，将按钮的`"text"`（文本）设置为`"关闭！"`。请记住使用双引号`"`。单击图片以查看如何进行。\\r
        \\r
        ![expandable](https://images.code.org/a3403900844f631cc2579539c8d68ed1-image-1505937421979.gif)
      AppLab Intro 3 - onEvent mouseOver: |-
        `"click"`（点击）只是一种类型的事件。当鼠标位于按钮上时, 即使您没有单击它, `"mouseover"`（鼠标悬停）事件也会运行。添加代码当鼠标位于`"offButton"`（关闭按钮）时，将屏幕的`"background-color"`（背景颜色）设置为`"black"`（黑色）。单击图片以查看如何进行。\\r
        \\r
        ![expandable](https://images.code.org/756e2c5ee19fd94963ca364fd46bcbd8-image-1505935772425.gif)
      AppLab Intro 3 - onEvent twoButtons: |-
        您的程序可以有多个`onEvent()`（当事件发生时）块。左按钮已将两个按钮 `"background-color"`（背景颜色）设置为`"purple"`（紫色）。添加代码以使右按钮将两个按钮`"background-color"`（背景颜色）设置为`"green"`（绿色）。单击图片以查看如何进行。\\r
        \\r
        ![expandable](https://images.code.org/5cd0c24b0f7f855daa2225a4b6a08087-image-1505932139152.gif)
      AppLab Intro 3 - playSound: |-
        `"playSound()"`（播放声音）模块播放声音。`"horseButton"`（马按钮）已经播放了马的声音。添加代码，使`"duckButton"`（鸭子按钮）播放鸭子的声音。单击图片以查看如何进行。\\r
        \\r
        ![expandable](https://images.code.org/30e35a2c35ac309545d90af9330ba76d-image-1505939876315.gif)
      AppLab Intro 3 - share and keep going: |-
        做这个或那个应用程序。决定当用户单击每个按钮时, 屏幕和文本会出现什么。\\r
        \\r
        当你完成应用程序后，点击顶部的"分享" 发送给朋友玩！单击图片以查看如何分享。\\r
        \\r
        ![expandable](https://images.code.org/c1d23a0288a42d48963053e0d9a1002e-image-1505943063546.gif)
      AppLab Intro 3 - stopSound: |-
        `stopSound()`（停止播放声音）块会停止所有的声音。`"playButton"`（播放按钮）能播放非常长的声音。添加代码, 使`"stopButton"`（停止按钮）停止所有的声音。单击图片以查看如何进行。\\r
        \\r
        ![expandable](https://images.code.org/a5081cce1969c5a784b4440369706801-image-1505941723405.gif)
      AppLab Intro 3 - thisOrThat: |-
        做这个或那个应用程序。决定当用户单击每个按钮时, 屏幕和文本会出现什么。\\r
        \\r
        当你完成应用程序后，点击顶部的"分享" 发送给朋友玩！单击图片以查看如何分享。\\r
        \\r
        ![expandable](https://images.code.org/c1d23a0288a42d48963053e0d9a1002e-image-1505943063546.gif)
      AppLab Intro 4 - Change Screen Color: |-
        <div style="float:right">\r
        \t<img
        src="https://images.code.org/1c2a02a2caebbda2be4e537ab5087dcd-image-1506613875548.50.54
        AM.png" style="height:150px"> \r
        </div>\r
        \r
        ** 目标: ** 将屏幕变成`"red"`（红色）。\r
        \r
        **如何做到：**拖入模块中并点击"运行"。\r
        \r
        **让我看看: ** ![expandable](https://images.code.org/8b1d99aa6bd6274e05b1844fab7e8b2a-image-1505870100643.gif)
      AppLab Intro 4 - Change Text 2: |-
        <div style="float:right">\r
        <img
        src="https://images.code.org/39ead723fbd2b047aa2d1e401cbfec8a-image-1506545619076.34.29
        PM.png" style="height:150px;">\r
        </div>\r
        \r
        ** 目标: ** 使文本变大并成为蓝色\r
        \r
        **如何做到：** 给`"label1"`（标签1）一个 80的 `"font-size"`（字体大小） 和 `"blue"`（蓝色）的 `"text-color"`（文本颜色）\r
        \r
        **让我看看：**![expandable](https://images.code.org/70f1ef9698ff41c15f9825755fde3782-image-1505958989565.gif)</details>
      AppLab Intro 4 - Change Text: |-
        <div style="float:right">\r
        \t<img
        src="https://images.code.org/7435f9effd46381a1d7d0c9078d6db78-image-1506554154216.15.23
        PM.png" style="height:150px">\r
        </div>\r
        \r
        **目标：** 使文本变大\r
        \r
        **如何做到：**拖进模块中, 然后给`"label1"`（标签1）选择更大的`"font-size"`（字体大小）。\r
        \r
        **让我看看：** ![expandable](https://images.code.org/6125888ad13353978132b19dfca8cc49-image-1505953367275.gif)
      AppLab Intro 4 - Change Two Buttons: |-
        <div style="float:right">\r
        \t<img
        src="https://images.code.org/a35a27104ec33f192971be1cd8d28a6a-image-1506617895943.57.33
        AM.png" style="height:150px">\r
        </div>\r
        \r
        **目标：**让按钮变成`"red"`（红色）和`"blue"`（蓝色）\r
        \r
        **如何做到：**把鼠标放在按钮上面来读取其`"id"`标识。然后设置每个模块的`"background-color"`（背景颜色） \r
        \r
        **让我看看：** ![expandable](https://images.code.org/d6418be215384e89872a72c2bd6d4a8a-image-1505875864576.gif)
      AppLab Intro 4 - Full Text: |-
        <div style="float:right">\r
        <img
        src="https://images.code.org/9109abf972acc093fd591eb56619aee5-image-1506617570302.52.18
        AM.png" style="height:150px">\r
        </div>\r
        \r
        **目标：**更改屏幕上的单词 \r
         \r**如何做到：**对你想要的任何东西设置`"text"`（文本）标签, 比如`"我的程序真~好~! "!\r
        \r
        **让我看看：**![expandable](https://images.code.org/4e8549acbca3449cb336fe0ed495f8f3-image-1505878779849.gif)</details>\r
        \r
      AppLab Intro 4 - Video designMode: "# 设计模式抢先看"
      AppLab Intro 4 - Video onEvent: "# 使用onEvent（当事件发生时）"
      AppLab Intro 4 - Video share your work: "# 制作并分享你的应用程序!"
      AppLab Intro 4 - Video share: "# 制作并分享你的应用程序!"
      AppLab Intro 4 - onEvent before: |-
        <img src="https://images.code.org/d1d4126613db6bc3db331d47eecf0748-image-1506619589642.gif"
        style="float:right;height:150px">\\r
        \\r
        \*\*目标: \*\* 屏幕开始为`"orange"`（橙色）。该按钮会使屏幕变成`"pink"`（粉红色）。\\r
        \\r
        指南：在`onEvent()`（当事件发生时）之前, 将屏幕的`"background-color"`（背景颜色）设置为`"orange"`（橙色）。在`onEvent()`（当事件发生时）中, 将其设置为`"pink"`（粉红色）。\\r
        \\r
        \*\* 让我看看: \*\*![expandable]
        (<https://images.code.org/6c338185d7fe959daed2465c4f91fb55-image-1505888600472.gif>)
      AppLab Intro 4 - onEvent intro: |-
        <img src="https://images.code.org/d793e711e9e2ea74f68cebf228fcb360-image-1506618780451.gif"
        style="float:right;height:150px">\\r
        \\r
        **目标：**当单击按钮时, 屏幕会变成`"green"`（绿色）\\r
        \\r
        **如何做到：**在"onEvent"（当事件发生时）中添加代码将屏幕的`"background-color"`（背景颜色）设置为`"green"`（绿色）。\\r
        \\r
        \*\*让我看看: \*\* ![expandable](https://images.code.org/bbb452fdee5c546894a4f2025024ace3-image-1505882181893.gif)
      AppLab Intro 4 - onEvent mouseOver: |-
        `"click"`（点击）只是一种类型的事件。当鼠标位于按钮上时, 即使您没有单击它, `"mouseover"`（鼠标悬停）事件也会运行。添加代码当鼠标位于`"offButton"`（关闭按钮）时，将屏幕的`"background-color"`（背景颜色）设置为`"black"`（黑色）。单击图片以查看如何进行。\\r
        \\r
        ![expandable](https://images.code.org/756e2c5ee19fd94963ca364fd46bcbd8-image-1505935772425.gif)
      AppLab Intro 4 - onEvent twoButtons: |-
        <img src="https://images.code.org/624964d54e36fe248f91f08563a57c4b-image-1506620778039.gif"
        style="float:right;height:150px">\\r
        \\r
        **目标：**右按钮使两个按钮变成`"green"`（绿色）\\r
        \\r**如何做到：**在第一个下添加第二个`onEvent()`（当事件发生时）。将`"id"`标识设置为`"rightButton"`（"对"按钮）。在它的内部添加代码，更改两个按钮`"background-color"`（背景颜色）\\r
        \\r
        **让我看看：** ![expandable](https://images.code.org/5cd0c24b0f7f855daa2225a4b6a08087-image-1505932139152.gif)
      AppLab Intro 4 - playSound: |-
        \*\* 目标: \*\* 右键播放鸭子的声音 \\r
        \\r
        **如何做到：**`playSound()`（播放声音）模块播放声音。为右按钮添加一个`onEvent()`（当事件发生时）, 并在其中使用`playSound()`（播放声音）模块。\\r
        \\r
        **让我看看：**![expandable](https://images.code.org/30e35a2c35ac309545d90af9330ba76d-image-1505939876315.gif)
      AppLab Intro 4 - stopSound: |-
        \*\* 目标: \*\* 右按钮停止所有声音\\r
        \\r
        **如何做到：**为右按钮添加`onEvent()`（当事件发生时）, 并在其中使用`stopSound()`（停止播放声音）模块。\\r
        \\r
        **让我看看：** ![expandable](https://images.code.org/a5081cce1969c5a784b4440369706801-image-1505941723405.gif)
      AppLab Intro 4 - thisOrThat design: |-
        \*\* 目标: \*\* 尝试设计模式, 继续对你的这个或那个 App. 做修改。你的工具箱里还有一些新的模块! 在以后的课程中, 您将了解更多有关这些内容的信息. \\r
        \\r
        **如何做到：**单击 "设计" 以快速编辑应用程序的外观或添加屏幕元素。尝试使用工具箱中的一些新模块。
      AppLab Intro 4 - thisOrThat template: |-
        \*\* 目标: \*\* 尝试设计模式, 继续对你的这个或那个 App做修改。在以后的课程中你会学到更多的东西.\\r
        \\r
        **如何做到：**点击进入 "设计", 快速编辑你的应用程序的外观或添加自己的屏幕元素。
      AppLab Intro 4 - thisOrThat: |-
        \*\* 目标: \*\* 制作 "这个或那个" 应用程序, 然后与朋友分享 \\r
        \\r
        **如何做到：**您知道了怎样使用`"background-color"`（背景颜色）、`"font-size"`（字体大小）、`"text-color"`（文本颜色）、`"text"`（文本）、`playSound()`（播放声音）和`onEvent()`（当事件发生时）。用它们来设置应用程序的外观, 并在用户单击按钮时进行更改。单击 "共享" 将其发送给朋友.\\r
        \\r
        **让我看看：**![expandable](https://images.code.org/c1d23a0288a42d48963053e0d9a1002e-image-1505943063546.gif)
      AppLab Intro 5 - Change Screen Color: |-
        <div style="float:right">\r
        \t<img
        src="https://images.code.org/1c2a02a2caebbda2be4e537ab5087dcd-image-1506613875548.50.54
        AM.png" style="height:150px"> \r
        </div>\r
        \r
        **目标：**将屏幕改为`"red"`（红色）。\r
        \r
        **如何做到：**拖进模块中，更改颜色, 然后点击 "运行" \r
        \r
        **让我看看：** ![expandable](https://images.code.org/8b1d99aa6bd6274e05b1844fab7e8b2a-image-1505870100643.gif)
      AppLab Intro 5 - Change Text 2: |-
        <div style="float:right">\r
        <img
        src="https://images.code.org/39ead723fbd2b047aa2d1e401cbfec8a-image-1506545619076.34.29
        PM.png" style="height:150px;">\r
        </div>\r
        \r
        ** 目标: ** 使文本变大并成为蓝色\r
        \r
        **如何做到：** 给`"label1"`（标签1）一个 80的 `"font-size"`（字体大小） 和 `"blue"`（蓝色）的 `"text-color"`（文本颜色）\r
        \r
        **让我看看：**![expandable](https://images.code.org/70f1ef9698ff41c15f9825755fde3782-image-1505958989565.gif)</details>
      AppLab Intro 5 - Change Text: |-
        <div style="float:right">\r
        \t<img
        src="https://images.code.org/7435f9effd46381a1d7d0c9078d6db78-image-1506554154216.15.23
        PM.png" style="height:150px">\r
        </div>\r
        \r
        **目标：** 使文本变大\r
        \r
        **如何做到：**拖进模块中, 然后给`"label1"`（标签1）选择更大的`"font-size"`（字体大小）。\r
        \r
        **让我看看：** ![expandable](https://images.code.org/6125888ad13353978132b19dfca8cc49-image-1505953367275.gif)
      AppLab Intro 5 - Change Two Buttons: |-
        <div style="float:right">\r
        \t<img
        src="https://images.code.org/a35a27104ec33f192971be1cd8d28a6a-image-1506617895943.57.33
        AM.png" style="height:150px">\r
        </div>\r
        \r
        **目标：**让按钮变成`"red"`（红色）和`"blue"`（蓝色）\r
        \r
        **如何做到：**把鼠标放在按钮上面来读取其`"id"`标识。然后设置每个模块的`"background-color"`（背景颜色） \r
        \r
        **让我看看：** ![expandable](https://images.code.org/d6418be215384e89872a72c2bd6d4a8a-image-1505875864576.gif)
      AppLab Intro 5 - Full Text: |-
        <div style="float:right">\r
        <img
        src="https://images.code.org/1e81d5bcdd69172f4127de55d045225f-image-1507565161167.05.19
        AM.png" style="height:200px">\r
        </div>\r
        \r
        **目标：** 更改屏幕上的单词和按钮的颜色. \r
        \r
        **如何做到：**将标签的`"text"`（文本）设置为您想要的任何内容, 如`"欢迎使用我的应用程序!"`.然后设置按钮的`"background-color"`（背景颜色）.\r\r
        **让我看看：** ![expandable](https://images.code.org/709ff200e5b5f553b24d1d0a769db6ed-image-1507565545993.gif)
      AppLab Intro 5 - addButton: |-
        **目标：**将右箭头添加到屏幕上, 以便切换下一幅图像。在下一阶段, 你会让它起作用。 \\r
        \\r
        **如何做到：**使用设计模式来拖入一个`"image"`（图片）的元素。图标库有许多不同的箭头可供选择。\\r
        \\r
        **让我看看：** ![expandable](https://images.code.org/066245e52135c038502620a19f961667-image-1507570682956.gif)
      AppLab Intro 5 - go further: "\\*\\* 目标: \\*\\* 这是一个空白的应用程序实验室项目。在这里建造你喜欢的任何东西! 你也有几个模块, 可以按你的喜好进行尝试。别忘了分享你的工作成果!"
      AppLab Intro 5 - onEvent intro: |-
        <img src="https://images.code.org/d793e711e9e2ea74f68cebf228fcb360-image-1506618780451.gif"
        style="float:right;height:150px">\\r
        \\r
        **目标：**当单击按钮时, 屏幕会变成`"green"`（绿色）\\r
        \\r
        **如何做到：**在"onEvent"（当事件发生时）中添加代码将屏幕的`"background-color"`（背景颜色）设置为`"green"`（绿色）。\\r
        \\r
        \*\*让我看看: \*\* ![expandable](https://images.code.org/bbb452fdee5c546894a4f2025024ace3-image-1505882181893.gif)
      AppLab Intro 5 - onEvent twoButtons: |-
        <img src="https://images.code.org/158c9258bfff18c2177440f201446c47-image-1507566793890.gif"
        style="float:right;height:200px">\\r
        \\r
        **目标: \*\* 完成这个手电筒应用程序。右键应该将屏幕变成`"black"`（黑色），文本变为`"white"`（白色）\\r\\r
        \*\*如何做到：**在下面先添加第二个`onEvent()`（当事件发生时）模块。然后设置屏幕的`"background-color"`（背景颜色）和标签的`"text-color"`（文本颜色）.\\r
        \\r
        **让我看看：** ![expandable](https://images.code.org/64c83d66a723eae01d09e4aea38fbad1-image-1507567249833.gif)
      AppLab Intro 5 - playSound: |-
        <img src="https://images.code.org/cdc81e79687693db50383a41894d6679-image-1507566452258.26.22
        AM.png" style="float:right;height:200px">\\r
        \\r
        **目标：**在声音面板上添加两个动物。\\r
        \\r
        **如何做到：**您需要添加两个`onEvent()`（当事件发生时）块到程序里。然后在其中加入 `playSound()`（播放声音）。\\r
        \\r
        **让我看看：**
        ![expandable](https://images.code.org/b0f254d319f788f832553648db6fb13c-image-1507566138094.gif)
      AppLab Intro 5 - rate it app: |-
        <img src="https://images.code.org/74c675e72f33fa368057d7b783e50e31-image-1507568235560.gif"
        style="float:right;height:200px">\\r
        \\r
        **目标: \*\* 完成简单的个人资料。设置用户名。选择主图像。当你点击心脏的时候, 它应该切换到一个实心的心脏图标, 然后变成红色. \\r
        \\r
        \*\*如何做到：**你需要使用`"image"`（图片）属性. \\r
        \\r
        **让我看看：** ![expandable](https://images.code.org/217e10ec9ac91037b80b963fab299a60-image-1507568801064.gif)
      AppLab Intro 5 - setScreen: |-
        **目标：**编写代码, 让用户切换到您的第二个屏幕.\\r
        \\r
        **如何做到：**为刚刚创建的按钮添加一个`onEvent()`（当事件发生时）。使用`setScreen()`（设置屏幕）在屏幕之间切换. \\r
        \\r
        **让我看看：** ![expandable](https://images.code.org/9ac5102ec678c1ecd0278446560ba617-image-1507571425597.gif)
      AppLab Intro 5 - share keep going: "**目标：**与某人共享您的应用程序, 或只发送给自己！然后就继续建设吧! \\\\r\n\\\\r\n**如何做到：**单击 \"共享\" 以找到许多共享应用程序的方法。以下是一些尝试的想法 \\\\r\n\\\\r \n\n-   添加一个按钮, 将您从`\"screen2\"`（屏幕2）带回到`\"screen1\"`（屏幕1）\\\\r\n-   用更多的图像添加更多的屏幕\\\\r\n-   添加更多类型的用户可以点击的按钮"
      AppLab Intro 5 - socialTemplate: "**目标：**在屏幕上添加一个按钮, 以便滚动到下一个图像。给它一个好的图标, 比如一个右箭头。在下一关卡, 你将使它起作用。\\\\r\n\\\\r\n**如何做到：**使用设计模式拖入按钮。图标库有许多不同的箭头可供选择。别忘了你可以搜索他们。\\\\r\n\\\\r\n**让我看看：** "
      AppLab Intro 6 - Change Screen Color: |-
        <div style="float:right">\r
        \t<img
        src="https://images.code.org/1c2a02a2caebbda2be4e537ab5087dcd-image-1506613875548.50.54
        AM.png" style="height:150px"> \r
        </div>\r
        \r
        **目标：**将屏幕改为`"red"`（红色）。\r
        \r
        **如何做到：**拖进模块中，更改颜色, 然后点击 "运行" \r
        \r
        **难住了？点这里** ![expandable](https://images.code.org/8b1d99aa6bd6274e05b1844fab7e8b2a-image-1505870100643.gif)
      AppLab Intro 6 - Change Text 2: "<div style=\"float:right\"> \\r <img src=\"https://images.code.org/39ead723fbd2b047aa2d1e401cbfec8a-image-1506545619076.34.29 PM.png\" style=\"height:150px;\"> \\r </div> \\r\\r\n**目标: ** 使文本变大和蓝色 \\r\\r \n**如何: ** \"定义label1\" ' a '字体为 \"80\" 和 \"\" 文本颜色 \"为\" \"蓝色\" \"\"。\\r\\r\n**难住了？点这里：** ![expandable](https://images.code.org/70f1ef9698ff41c15f9825755fde3782-image-1505958989565.gif)</details>"
      AppLab Intro 6 - Full Text: "<div style=\"float:right\">\\r\n<img\nsrc=\"https://images.code.org/1e81d5bcdd69172f4127de55d045225f-image-1507565161167.05.19\nAM.png\" style=\"height:200px\">\\r\n</div>\\r\n\\r\n**目标: ** 更改屏幕上的单词和按钮的颜色。\\r\n\\r \n**如何做到：** 将标签的`\"text\"`（文本）设置为您想要的任何内容, 如 \"欢迎使用我的应用程序!`.然后设置按钮的`\"background-color\"`（背景颜色）。\\r\n\\r\n**难住了? 点这里:** ![expandable](https://images.code.org/709ff200e5b5f553b24d1d0a769db6ed-image-1507565545993.gif)"
      AppLab Intro 6 - animalSoundBoard: |-
        **目标：** 继续建立动物的声音板。然后确保 "共享" 它. \\r
        \\r
        **如何做到：**为更多的动物添加新的按钮。或者把声板建成完全不同的东西！
      AppLab Intro 6 - blankApp: |-
        \*\* 目标: \*\* 这是一个完全空白的应用程序实验室 App. 从头开始构建任何你想要的!？\\r
        \\r
        **如何做到：**这里由你控制。你决定你想做什么!
      AppLab Intro 6 - onEvent intro: |-
        <img src="https://images.code.org/d793e711e9e2ea74f68cebf228fcb360-image-1506618780451.gif"
        style="float:right;height:150px">\\r
        \\r
        **目标：**当您单击该按钮时, 屏幕会变成`"green"`（绿色）\\r
        \\r
        **如何做到：**将屏幕的`"background-color"`（背景颜色）设置为`"green"`（绿色）的代码加入到"onEvent"（当事件发生时）中。\\r
        \\r
        \*\*难住了？点这里: \*\* ![expandable](https://images.code.org/bbb452fdee5c546894a4f2025024ace3-image-1505882181893.gif)
      AppLab Intro 6 - onEvent twoButtons: |-
        <img src="https://images.code.org/158c9258bfff18c2177440f201446c47-image-1507566793890.gif"
        style="float:right;height:200px">\\r
        \\r
        **目标: \*\* 完成这个手电筒应用程序。右键应该将屏幕变成`"black"`（黑色），文本变为`"white"`（白色）\\r\\r
        \*\*如何做到：**在下面先添加第二个`onEvent()`（当事件发生时）模块。然后设置屏幕的`"background-color"`（背景颜色）和标签的`"text-color"`（文本颜色）.\\r
        \\r
        **难住了？点这里：** ![expandable](https://images.code.org/64c83d66a723eae01d09e4aea38fbad1-image-1507567249833.gif)
      AppLab Intro 6 - playSound Template: "<img src=\"https://images.code.org/2bb21cff40cc9823a4ae370895de2953-image-1508294971111.49.16\nPM.png\" style=\"float:right;height:200px\">\\\\r\n\\\\r\n**目标：**将动物添加到声音面板上。如果你不想找动物的图片, 那就把扬声器图标的颜色改成你喜欢的.\\\\r\n\\\\r\n**如何做到：**在`onEvent()`（当事件发生时）里面添加一个`playSound()`（播放声音） 。对于图片你可以在声音库中查找您喜欢的动物声音并更改按钮的`\"image\"`（图片）属性, 或者只是更改`\"icon-color\"`（图标颜色）。\\\\r\\\\r \n\\*\\*难住了？点这里: \\*\\* ![expandable](https://images.code.org/b0f254d319f788f832553648db6fb13c-image-1507566138094.gif)"
      AppLab Intro 6 - playSound: "<img src=\"https://images.code.org/2bb21cff40cc9823a4ae370895de2953-image-1508294971111.49.16\nPM.png\" style=\"float:right;height:200px\">\\\\r\n\\\\r\n**目标：**将动物添加到声音面板上。如果你不想找动物的图片, 那就把扬声器图标的颜色改成你喜欢的.\\\\r\n\\\\r\n**如何做到：**在`onEvent()`（当事件发生时）里面添加一个`playSound()`（播放声音） 。对于图片你可以在声音库中查找您喜欢的动物声音并更改按钮的`\"image\"`（图片）属性, 或者只是更改`\"icon-color\"`（图标颜色）。\\\\r\\\\r \n\\*\\*难住了？点这里: \\*\\* ![expandable](https://images.code.org/80b30e5bd85dd5430e2c375568d53580-image-1508432171734.gif)"
      AppLab Intro 6 - quizApp: |-
        \*\* 目标: \*\* 在这个测验App中建立三问题 。你随时可以通过复制屏幕来提出更多的问题。然后发送给朋友! \\r
        \\r
        **如何做到：**先运行应用程序, 然后尝试单击所有按钮以查看它的工作原理。然后, 从设计模式中, 您可以更改问题和按钮的默认文本。在代码模式下, 创建当用户单击不同的按钮时响应文本。自定义颜色或添加图像!
      AppLab Intro 6 - thisOrThatAddButton Template: "**目标：**在屏幕上添加第二个按钮，说\"右边\"！\\\\r\\\\r\n\\*\\* 如何: \\*\\* 在设计模式中拖进新按钮。定位并调整其大小。然后设置其 `\"text\"`（文本）、`\"background-color\"`（背景颜色）和`\"font-size\"`（字体大小）\\\\r\n\\\\r\n\\*\\* 让我看看: \\*\\* "
      AppLab Intro 6 - thisOrThatAddButton: "<img src=\"https://images.code.org/3feb07aaf3d933b094647479673a3293-image-1508373443129.37.00\nPM.png\" style=\"float:right;height:200px\">\\\\r\n\\\\r\n\\*\\* 目标: \\*\\* 在屏幕上添加第二个按钮，说：\"右边“！\\\\r\n\\\\r\n**如何做到：**在设计模式中拖进新按钮。定位并调整其大小。然后设置其`\"text\"`（文本）、`\"background-color\"`（背景颜色）和`\"font-size\"`（字体大小）\\\\r\n\\\\r \n\\*\\*难住了？点击这里: \\*\\* ![expandable](https://images.code.org/7035ad0445984cf889b159cf5682e35a-image-1508383186447.gif)"
      AppLab Intro 6 - thisOrThatAddScreen: |-
        <img src="https://images.code.org/f102a1363aa575cc530379d9a4ee378c-image-1508382068883.00.59
        PM.png" style="float:right;height:200px">\\r
        \\r
        **目标: \*\* 创建一个叫做`"rightScreen"`（右屏幕）的新屏幕。在屏幕上添加一个简短的文本标签. \\r
        \\r
        \*\*如何做到：**在设计模式中添加新屏幕。将其`"id"`标识更改为`"rightScreen"`（右屏幕）。然后将标签拖到屏幕上, 并向用户发送一条短消息。您还可以复制`"leftScreen"`（左屏幕）来执行此操作。\\r
        \\r
        \*\*难住了？点击这里: \*\*
        ![expandable](https://images.code.org/11cf186acb0453cf9ec46929b763f568-image-1508383646159.gif)
      AppLab Intro 6 - thisOrThatPersonalize: "<img src=\"https://images.code.org/762507aef26d512f820c42fb2e7fc6f1-image-1508386296370.11.19 PM.png\" style=\"float:right;height:200px\">\n\n**目标：**开始构建自己的《惊险岔路口》应用程序. 别忘了和别人\"分享\"！\n\n**如何做到：**选择你想讲的基本故事, 比如你的角色是谁和一些设置。然后更改您的应用程序的文本和图像来匹配所要说的故事。您可以不断冒险中在添加更多的屏幕。\n\n<details><summary><b>难住了? 点这里获得一些主意</b></summary>\n\n<li>为最喜欢的虚构角色做个冒险</li>\n<li>做一个关于你偶像的著名 (或不出名的人) 的冒险</li>\n<li>做个有很多意想不到的曲折或有一个困难的道德选择的冒险</li> \n\n</details>"
      AppLab Intro 6 - thisOrThatSetScreen: |-
        <img src="https://images.code.org/acd1acf659a2504d38ff80256d8e870f-image-1508374065550.com-crop
        (1).gif" style="float:right;height:200px">\\r
        \\r
        **目标: \*\* 当用户单击"对！"按钮时, 屏幕切换到`"rightScreen"`（右屏幕）。\\r
        \\r
        \*\*如何做到：**在代码模式中为您的 "对！" 按钮添加一个新的`onEvent()`（当事件发生时）模块。在其中添加一个`setScreen()`（设置屏幕）块, 将屏幕切换到`"thatScreen"`（那个屏幕）。\\r
        \\r
        \*\*难住了？点这里: \*\* ![expandable](https://images.code.org/64dfec0d9f9c2fc237abb90ef6a72f0e-image-1508384166252.gif)
      AppLab Intro 7 - Change Screen Color: "<div style=\"float:right\">\\r\n\\t<img\nsrc=\"https://images.code.org/bf9b1fb57751fa90c9b786339914ad70-image-1508521068798.34.54\nAM.png\" style=\"height:150px\"> \\r\n</div>\\r\n\\r\n**目标: ** 使屏幕变绿. \\r\n\\r\n** 如何: ** 拖入`setProperty()`（设置属性）模块.使用下拉键将屏幕的`\"background-color\"`（背景颜色）设置为`\"green\"`（绿色）。然后点击 \"运行\" \\r\n\\r \n**难住了？点击这里 ** ![expandable](https://images.code.org/3b5e70522b02867a1df1d5b5e481785e-image-1511279858395.gif)"
      AppLab Intro 7 - Change Text 2: "<div style=\"float:right\">\\r\n<img\nsrc=\"https://images.code.org/39ead723fbd2b047aa2d1e401cbfec8a-image-1506545619076.34.29\nPM.png\" style=\"height:200px;\">\\r\n</div>\\r\n\\r\n**目标: ** 使文本变大和变蓝。\\r\n\\r \n**如何做到：**你需要两行的代码。让`\"label1\"`（标签1）的`\"font-size\"`（字体大小）设为80，`\"text-color\"`（文本颜色）设为`\"blue\"`（蓝色）。\\r\n\\r\n**难住了？**点击这里: ** ![expandable](https://images.code.org/2d5d46a03082af3b01847aad6602e2ea-image-1511280140482.gif)"
      AppLab Intro 7 - Full Text: "<div style=\"float:right\">\\r\n<img\nsrc=\"https://images.code.org/1e81d5bcdd69172f4127de55d045225f-image-1507565161167.05.19\nAM.png\" style=\"height:200px\">\\r\n</div>\\r\n\\r\n**目标: ** 将按钮设为`\"red\"`（红色）和`\"blue\"`（蓝色）。然后在大橙色标签中更改文本.\\r\n\\r \n**如何做到：**\n\\r\n* 记住你能将鼠标移动到任何元素上看它们的`\"id\"`标识\\r\n* 将按钮的`\"background-color\"`（背景颜色）设置为`\"red\"`（红色）和`\"blue\"`（蓝色）\\r\n* 将标签的`\"text\"`（文本）属性设置成任何文本，比如`\"欢迎来到我的应用！\"`\\r\n\\r\n**难住了？点这里: ** ![expandable](https://images.code.org/4bf99e7352e7c17a5bf73ced80171f6a-image-1511280628092.gif)"
      AppLab Intro 7 - onEvent intro: |-
        <img src="https://images.code.org/3d8c8487ea669563d3401c0009cd9462-image-1511281194897.gif"
        style="float:right;height:200px">\\r
        \\r
        **目标: \*\* 屏幕将从蓝色开始。添加代码, 当您单击 "绿色如果" 按钮时, 它会变成绿色。\\r
        \\r
        \*\*如何做到：**在`onEvent()`（当事件发生时）中添加代码, 将屏幕的`"background-color"`（背景颜色）设置为`"green"`（绿色）。\\r
        \\r
        \*\*难住了？点这里: \*\* ![expandable](https://images.code.org/5ddf6b129bc04b79839b3661ccef788b-image-1511281012076.gif)
      AppLab Intro 7 - onEvent twoButtons: |-
        <img src="https://images.code.org/158c9258bfff18c2177440f201446c47-image-1507566793890.gif"
        style="float:right;height:200px">\\r
        \\r
        **目标: \*\* 帮助完成这个手电筒应用程序。"打开" 按钮已设为将屏幕变成白色。运行应用程序并试试它。然后编写代码, 用 "关闭" 按钮再次使屏幕变得黑色。\\r
        \\r
        \*\*如何做到：**
        在空的`onEvent()`（当事件发生时）中添加代码, 将屏幕的`"background-color"`（背景颜色）设置为 `"black"`（黑色）以及标签的`"text-color"`（文本颜色）为`"white"`（白色）。\\r
        \\r
        \*\*难住了？点这里: \*\* ![expandable](https://images.code.org/020b1d9b465aaf35967a528a92961c13-image-1511281772276.gif)
      AppLab Intro 7 - playSound: |-
        <img src="https://images.code.org/28176329f15dea1a863564b069e72aab-image-1511282702534.44.52
        AM.png" style="float:right;height:200px">\\r
        \\r
        **目标: \*\* 这个声音面板几乎完成了!将图像、文本和声音添加到后面的按钮上。\\r
        \\r
        \*\*如何做到：**\\r

        -   添加一个`onEvent()`（当事件发生时），并设置它的"id"（标识）为`"button4"`（按钮4）, 并拖入一个`playSound()`（播放声音）。从库里选择任何你喜欢的动物声音。\\r
        -   添加一个`setProperty()`（设置属性）到`onEvent()`（当事件发生时）之外，来设置按钮的`"image"`（图片）属性设置。从第三个下拉框中选择一张图片。\\r
        -   再添加一个`setProperty()`（设置属性）来改动按钮的`"text"`（文本）。\\r
            \\r
            \*\*难住了？点击这里: \*\* ![expandable](https://images.code.org/a3fdcb8954c5e8d585bef64df1ec5b1a-image-1511285408512.gif)
      AppLab Intro 7 - thisOrThatAddButton: "<img src=\"https://images.code.org/3feb07aaf3d933b094647479673a3293-image-1508373443129.37.00\nPM.png\" style=\"float:right;height:200px\">\\\\r\n\\\\r\n\\*\\* 目标: \\*\\* 在屏幕上添加第二个按钮，说：\"右边“！将其`\"id\"`标识设置为`\"rightButton\"`（\"右边\"按钮）\\\\r\n\\\\r\n**如何做到：**\n在设计模式中拖进新按钮。定位并调整其大小。然后设置其`\"text\"`（文本）、`\"background-color\"`（背景颜色）和`\"font-size\"`（字体大小）。\\\\r\n\\\\r \n\\*\\*难住了？点这里: \\*\\* ![expandable](https://images.code.org/7035ad0445984cf889b159cf5682e35a-image-1508383186447.gif)"
      AppLab Intro 7 - thisOrThatAddScreen: |-
        <img src="https://images.code.org/f102a1363aa575cc530379d9a4ee378c-image-1508382068883.00.59
        PM.png" style="float:right;height:200px">\\r
        \\r
        **目标: \*\* 创建一个叫做`"rightScreen"`（右屏幕）的新屏幕。在屏幕上添加一个文本标签，说“你对了！” \\r
        \\r
        \*\*如何做到：**
        在设计模式中添加新屏幕。将其`"id"`标识更改为`"rightScreen"`（右屏幕）。然后将标签拖到屏幕上, 将文本改为“你对了！”。\\r
        \\r
        \*\*难住了？点击这里: \*\* ![expandable](https://images.code.org/11cf186acb0453cf9ec46929b763f568-image-1508383646159.gif)
      AppLab Intro 7 - thisOrThatPersonalize: |-
        <a href="https://studio.code.org/projects/applab/gx21oCP10-V4GlNMlSpwdQ" target="_blank"><img src="https://images.code.org/ba6c0db48cc1c3c28c135f1c2f67f361-image-1511244802597.10.18 PM.png" style="float:right;height:200px"></a>
        <a href="https://studio.code.org/projects/applab/SM_edi1btguZZiQaTtUT9Q" target="_blank"><img src="https://images.code.org/284b55697d786e0cd64350d0967c5dda-image-1511244806272.11.05 PM.png" style="float:right;height:200px"></a>
        <a href="https://studio.code.org/projects/applab/SMvVhgBX_GGyxg5LSEMrgg" target="_blank"><img src="https://images.code.org/445181ff8d84861919512ba9b8e09586-image-1511244809994.12.40 PM.png" style="float:right;height:200px"></a>

        **目标：**通过扩展这个项目来创建你自己的应用程序。然后“分享”给其他人！

        **如何做到：**
        首选确定你对创建哪种应用程序感兴趣。然后通过添加更多的屏幕，按钮，文本，声音和用户交互来创建它。工具箱有更多的模块，你可以试一试。一旦完成后，你可以点击“分享”来发给自己或朋友！

        <details>

        <summary>

        <b>《惊险岔路口》创意</b>

        </summary>

        试试这个<a href="https://studio.code.org/projects/applab/SMvVhgBX_GGyxg5LSEMrgg" target="_blank">《惊险岔路口》应用示例</a>让你看看是怎样工作的。这里有些创意来帮助你做自己的故事。

        <li>创建一个你最喜欢的角色的冒险，真实的、虚构的都可以。</li>
        <li>创建一个讲述你最喜欢的电影、书籍或自己创造的故事。</li>
        <li>创建一个有很多曲折的或是很难的抉择的冒险故事。</li>
        <br>
        </details>

        <details><summary>

        <b>贺卡创意</b>

        </summary>

        试试这个<a href="https://studio.code.org/projects/applab/SM_edi1btguZZiQaTtUT9Q"
        target="_blank">贺卡应用创意示例</a>让你看看是如何工作的。这里有些主意来帮助你做自己的卡片。

        <li>想象一个生日、节日或其它特殊的日志要来临了，做一张卡片来庆贺！</li>
        <li>创建一张感谢卡片，给你想感谢的人。</li>
        <li>创建一个即将来临的活动的邀请卡。</li>
        <br>
        </details>

        <details><summary><b>个人的测验创意</b></summary>

        试试这个<a href="https://studio.code.org/projects/applab/gx21oCP10-V4GlNMlSpwdQ"
        target="_blank">个人创意应用示例</a>让你看看是如何工作的。这里有些主意来帮助你制作自己的测验题。

        <li>创造一个关于大家喜欢的东西，例如事物、团队、书或地点的测验。</li>
        <li>创造一个通过答案来预测未来的的测验。</li>
        <li>创造一个帮助人们做出艰难抉择的测验。</li>

        </details>
      AppLab Intro 7 - thisOrThatSetScreen: |-
        <img src="https://images.code.org/acd1acf659a2504d38ff80256d8e870f-image-1508374065550.com-crop
        (1).gif" style="float:right;height:200px">\\r
        \\r
        **目标: \*\* 当用户单击`"rightButton"`（"对"按钮）时, 屏幕切换到`"rightScreen"`（右屏幕）。\\r
        \\r
        \*\*如何做到：**在代码模式中为您的 "对！" 按钮添加一个新的`onEvent()`（当事件发生时）模块。在其中添加一个`setScreen()`（设置屏幕）块, 将屏幕切换到`"rightScreen"`（右屏幕）。\\r
        \\r
        \*\*难住了？点这里: \*\* ![expandable](https://images.code.org/64dfec0d9f9c2fc237abb90ef6a72f0e-image-1508384166252.gif)
      AppLab_test02: "# 这是标题\n\n-   项目符号 1 \n-   执行\n-   然后\n\n![](https://images.code.org/982f9167cf54c24251922fbd0a7f60b3-image-1436470853351.png)"
      Applab AllTheThings ResourcesTab AllResources: |-
        <img
        src="https://images.code.org/0aca9e3ba0945f31ddd56438a45ed69c-image-1436286498758.png"
        align=right>

        只用4个乌龟命令，在应用实验室写代码来完成下面每个画图挑战。目标是用尽可能高效的代码，只用提供的命令来解决问题。

        "高效"的意思是什么？在计算机科学中，根据不同的出发点，这意味着不同的事情。在这些挑战上，用你觉得最好的方法来解决，我们会在最后来提出关于效率的问题。

        <img src="https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif"
        align=right>

        # 这样做：

        用尽可能高效的办法在乌龟的左前方画一个 1x1 的正方形。程序在停止时，乌龟应该在出发的位置，并面朝原来的方向。

        一旦你觉得找到了解决方案，点击完成 - 它会在你运行了程序之后出现。
      Applab AllTheThings ResourcesTab MapReference: |-
        <img
        src="https://images.code.org/0aca9e3ba0945f31ddd56438a45ed69c-image-1436286498758.png"
        align=right>

        只用4个乌龟命令，在应用实验室写代码来完成下面每个画图挑战。目标是用尽可能高效的代码，只用提供的命令来解决问题。

        "高效"的意思是什么？在计算机科学中，根据不同的出发点，这意味着不同的事情。在这些挑战上，用你觉得最好的方法来解决，我们会在最后来提出关于效率的问题。

        <img src="https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif"
        align=right>

        # 这样做：

        用尽可能高效的办法在乌龟的左前方画一个 1x1 的正方形。程序在停止时，乌龟应该在出发的位置，并面朝原来的方向。

        一旦你觉得找到了解决方案，点击完成 - 它会在你运行了程序之后出现。
      Applab AllTheThings ResourcesTab ReferenceLinks: |-
        <img
        src="https://images.code.org/0aca9e3ba0945f31ddd56438a45ed69c-image-1436286498758.png"
        align=right>

        只用4个乌龟命令，在应用实验室写代码来完成下面每个画图挑战。目标是用尽可能高效的代码，只用提供的命令来解决问题。

        "高效"的意思是什么？在计算机科学中，根据不同的出发点，这意味着不同的事情。在这些挑战上，用你觉得最好的方法来解决，我们会在最后来提出关于效率的问题。

        <img src="https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif"
        align=right>

        # 这样做：

        用尽可能高效的办法在乌龟的左前方画一个 1x1 的正方形。程序在停止时，乌龟应该在出发的位置，并面朝原来的方向。

        一旦你觉得找到了解决方案，点击完成 - 它会在你运行了程序之后出现。
      Applab allthethings onRecordEvent: 测试应用实验室制作应用前请登录(应用实验室被设计为仅在登陆后可用。/_通常我们可以让人们自动登录，但是这个实现必须要让所有脚本都变成可强制执行的，显然对所有脚本都做一次这样的更改会很麻烦_/)。
      Artist Autorun Test: 现在，将函数放到循环里来画这三个正方形。
      Artist Inspiration: "<img src=\"https://images.code.org/1df195df9d808f0dd539bef0f5c2958b-image-1443049871563.02.54.png\"\nwidth=\"250px\"/>\\\\r\n\\\\r\n自由发挥灵感：你已经学会了所有需要创建这个模式的知识了！\\\\r\n\\\\r\n如果这个图形引起了你的联想，试试画出一些类似的图像。要不然，就画画你想画的一些东西。 \n\\\\r\n\\\\r\n注意：我们已经用`set alpha`（设置透明度）模块来让花瓣慢慢淡出。"
      Bergeron Robot Maze1: "可以帮我抓住这只顽皮的猪吗？\\\\r\n\\\\r\n在“当运行时”模块下放几个“向前移动”的模块，然后点击“运行”。 "
      Big Game Animation 1: 现在, 你已经学会了编写简单的线性函数, 让我们运用这些函数让游戏运动起来。点击 "运行" 查看游戏当前可以做什么 (不是太多!), 可以尝试更改任意变量，看看变化, 然后单击“完成”继续下一步。
      Big Game Animation 2: |-
        `更新目标`函数采用目标的当前 x 值, 并返回更新后的值。

        完成 `更新目标`, 以便每次调用时都增加 x 值。x 越大, 目标就运动得越快。
      Big Game Animation 3: |-
        `更新-危险`函数应该像`更新-目标` 一样工作, 只不过危险应该从右侧移向左侧。

        完成`更新-危险`, 使`危险`飞过屏幕。
      Big Game Animation 4: |-
        这时，危险应该从右向左穿过屏幕，目标应该从左到右运动。

        他们离开后不会再返回屏幕，我们将稍后处理它。

        花点时间来确保游戏像我们预期的那样工作，然后点击 "完成" 继续。
      Big Game Booleans 1: 在上一次编程游戏的过程中, 我们看到了目标以及危险的精灵穿过了屏幕，但永远不会飞回来。单击 "运行" 查看你的程序究竟是怎样运行的, 然后单击完成，让那些已经离开屏幕的精灵重新出现。
      Big Game Booleans 5: 这时，危险应该从右向左运行, 你的目标应该从左到右运行, 它们都应该返回到对面的位置上，并反复执行。花一分钟来确保游戏像想要的那样工作, 然后点击 "完成" 继续。
      Big Game Final: |-
        你做到了！

        此时, 游戏应实现了所有的功能, 花点时间享受新游戏，并对其进行任何最后的微调。

        当对最终产品感到满意时, 单击 "完成", 将有机会共享该游戏的链接。

        干得漂亮！
      Big Game Player 1: |-
        即将完成这个游戏!

        上次在游戏编写过程时, 使用布尔值使“目标”和“危险”在它们离开后返回屏幕。点击 "运行", 看看你的游戏现在看起来如何, 然后我们会让玩家上下移动。
      Big Game Player 2: |-
        要上下移动玩家, 需要使用条件模块来确定按下哪个键，并进行相应的反馈。

        计算机将按键读取为数字键代码-向上箭头为 \*\* 38 \*\*, 向下箭头为 \*\* 40 \*\*。可以在学习工作簿中查找其他关键代码。

        编辑 `更新-玩家` 函数, 以便在按下向上箭头 (键码 38) 时玩家向上移动, 并在按下向下箭头时向下移动 (键码 40)。
      Big Game Vars 1: 让我们开始游戏吧! 在这里, 将看到一大堆占位符代码, 它们最终被自己的代码替换, 但现在先从定义变量开始。单击 "运行" ，查看使用默认值运行的游戏是什么样子。
      Big Game Vars 2: 制作一个属于自己的游戏，第一步就是给它一个好的标题。单击 `标题` 和 `副标题` 变量上的编辑按钮, 输入标题内容。
      Big Game Vars 3: 现在, 让我们为新游戏设置背景。编辑 `bg` 变量, 然后从下拉列表中选择新的背景图像。
      Big Game Vars 4: 太棒了！现在, 可以更新玩家、目标和危险的变量。尽情尝试改变这些变量, 把游戏变成喜欢的样子。完成后单击 "完成"。
      Boolean Expressions: |-
        ### 注意事项:

        1.  什么是 \* 布尔表达式？ \*
        2.  为什么它被称为 "布尔"？
        3.  这样表达是合法的吗？ `10 > 25`？
      Brad Spooky House Copy: 自由发挥：这里除了写的函数，还有更多的函数发挥。用不同的笔宽度来看看能画出什么不一样的图形！
      Brad Spooky House: 自由发挥：这里除了写的函数，还有更多的函数发挥。用不同的笔宽度来看看能画出什么不一样的图形！
      CDU U6 Playground Sound Board: |-
        # 声音面板 2.0\\r

        \\r
        现在可以播放声音、音符、和歌曲了！利用这些新知识，你甚至可以把主板变成声音面板。\\r
        \\r
        在工具箱中，你可以处置所有的蜂鸣器和相关的模块。看看你能做出些什么很酷东西！\\r
        \\r

        # 这样做\\r

        \\r

        -   使用所有有关板事件的按钮(上，下) 来为每一个事件演奏一段独特的声音或歌曲。\\r
        -   有没有可以演奏更多声音/歌曲的任何其他事件？
      CDU U6 Playground Sound Board_2018: |-
        # 声音面板 2.0\\r

        \\r
        现在可以播放声音、音符、和歌曲了！利用这些新知识，你甚至可以把主板变成声音面板。\\r
        \\r
        在工具箱中，你可以处置所有的蜂鸣器和相关的模块。看看你能做出些什么很酷东西！\\r
        \\r

        # 这样做\\r

        \\r

        -   使用所有有关板事件的按钮(上，下) 来为每一个事件演奏一段独特的声音或歌曲。\\r
        -   有没有可以演奏更多声音/歌曲的任何其他事件？
      CDU U6 Playground Sound Board_2019: |-
        # 声音面板 2.0\\r

        \\r
        现在可以播放声音、音符、和歌曲了！利用这些新知识，你甚至可以把主板变成声音面板。\\r
        \\r
        在工具箱中，你可以处置所有的蜂鸣器和相关的模块。看看你能做出些什么很酷东西！\\r
        \\r

        # 这样做\\r

        \\r

        -   使用所有有关板事件的按钮(上，下) 来为每一个事件演奏一段独特的声音或歌曲。\\r
        -   有没有可以演奏更多声音/歌曲的任何其他事件？
      CSD - Predict List Accessing: |-
        # 预测

        下面的代码有4个事件，将被输出打印到控制台界面。根据此处代码的逻辑, 将在控制台中打印什么内容？
      CSD U1 - Image Filter Demo show Binary: |-
        # 哦, 不是吧

        这棵树应该是绿色的, 但它现在是蓝色的。是否可以使用滤镜模块将所有蓝色像素更改为绿色？
      CSD U1 - Image Filter Demo: |-
        # 哦, 不是吧

        这棵树应该是绿色的, 但它现在是蓝色的。是否可以使用滤镜模块将所有蓝色像素更改为绿色？
      CSD U1 - PixFilter FreePlay: |-
        # 自由发挥\\r

        \\r
        按照你的想象，做一些令人惊叹的东西。
      CSD U1 - Single Pixel: |-
        # 3 比特颜色

        每个像素都是屏幕上发出光的正方形。每个像素通过一定数量的比特表达呈现相应的颜色，这些比特决定了最终屏幕上最终渲染出来的像素颜色。

        在此工具中, 我们使用3个比特位来定义一个大的蓝色像素。第一个比特位影响红色色调。第二个比特位影响绿色色调。第三个比特位影响蓝色色调。

        # 这样做

        -   单击灯泡可打开或关闭每种颜色, 并查看像素的变化
        -   仅使用三个比特位，尝试看看能创建多少不同的颜色
      CSD U2  layout style body: |-
        <div style="float: right; height: 150px; width: 400px; overflow-y: scroll; margin-left: 20px;">
        <details>

        <summary>

        \*\* 什么是 CSS 规则集？\*\*

        </summary>
        等等， 诸如此类答案
        </details>
        <details>
        <summary>

        \*\* 什么是选择器？ \*\*

        </summary>
        等等， 诸如此类答案
        </details>
        <details>
        <summary>

        \*\* 什么是声明模块？ \*\*

        </summary>
        等等， 诸如此类答案
        </details>
        <details>
        <summary>

        \*\* 什么是成对的“属性-值”？ \*\*

        </summary>
        等等， 诸如此类答案
        </details>
        <details>
        <summary>

        \*\* 如何创建新的规则集？ \*\*

        </summary>
        等等， 诸如此类答案
        </details>
        <details>
        <summary>

        \*\* 为什么 "样式. css" 文件用不同的语言？ \*\*

        </summary>
        等等， 诸如此类答案
        </details>
        <details>
        <summary>

        \*\* 为什么 "样式. css" 文件用不同的语言？ \*\*

        </summary>
        等等， 诸如此类答案
        </details>
        <details>
        <summary>

        \*\* 为什么 "样式. css" 文件用不同的语言？ \*\*

        </summary>
        等等， 诸如此类答案
        </details>
        <details>
        <summary>

        \*\* 为什么是 "样式. css"文件以不同的语言？ \*\*

        </summary>
        等等， 诸如此类答案
        </details>
        <details>
        <summary>

        \*\* 为什么 "样式. css" 文件用不同的语言？ \*\*

        </summary>

        等等诸如此类答案

        </details>
        </div>

        # 文本对齐

        -   在 "p" 规则集中查找 "样式. css" 中的 "文本对齐" 属性。
        -   将“文本对齐”属性值更改为 "居中" 或 "右"。
        -   在 "正文" 规则集中添加 "文本对齐" 规则
      CSD U2  layout style textalign: |-
        <div style="float: right; height: 150px; width: 400px; overflow-y: scroll; margin-left: 20px;">
        <details>

        <summary>

        \*\* 什么是 CSS 规则集？\*\*

        </summary>
        等等， 诸如此类答案
        </details>
        <details>
        <summary>

        \*\* 什么是选择器？ \*\*

        </summary>
        等等， 诸如此类答案
        </details>
        <details>
        <summary>

        \*\* 什么是声明模块？ \*\*

        </summary>
        等等， 诸如此类答案
        </details>
        <details>
        <summary>

        \*\* 什么是成对的“属性-值”？ \*\*

        </summary>
        等等， 诸如此类答案
        </details>
        <details>
        <summary>

        \*\* 如何创建新的规则集？ \*\*

        </summary>
        等等， 诸如此类答案
        </details>
        <details>
        <summary>

        \*\* 为什么 "样式. css" 文件用不同的语言？ \*\*

        </summary>
        等等， 诸如此类答案
        </details>
        <details>
        <summary>

        \*\* 为什么 "样式. css" 文件用不同的语言？ \*\*

        </summary>
        等等， 诸如此类答案
        </details>
        <details>
        <summary>

        \*\* 为什么 "样式. css" 文件用不同的语言？ \*\*

        </summary>
        等等， 诸如此类答案
        </details>
        <details>
        <summary>

        \*\* 为什么是 "样式. css"文件以不同的语言？ \*\*

        </summary>
        等等， 诸如此类答案
        </details>
        <details>
        <summary>

        \*\* 为什么 "样式. css" 文件用不同的语言？ \*\*

        </summary>

        等等诸如此类答案

        </details>
        </div>

        # 文本对齐

        -   在 "p" 规则集中查找 `style. css` 中的 `text-align` 属性。
        -   将text-align属性值更改为 `center` 或 `right`。
        -   在 `body` 规则集中添加 `text-align` 规则
      CSD U2 CSS explore CSS: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n\n<summary>\n\n\\*\\* 如何在文件之间切换？ \\*\\* \n\n</summary> \n单击要查看的文件的名称。菜单在屏幕左侧. \n\n</details> \n</div> \n\n# 添加样式\n\n此 Web 实验室项目正在使用一种新语言向页面添加样式。与伙伴一起探索 `index.html`和 `style.css`文件。准备好讨论以下问题。\n\n-   这个新的语言对页面有什么变化？\n-   这个语言与 html 的区别是什么？\n-   `index.html`和`style.css`文件是怎样联系起来的？"
      CSD U2 CSS explore CSS_2018: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n\n<summary>\n\n\\*\\* 如何在文件之间切换？ \\*\\* \n\n</summary> \n单击要查看的文件的名称。菜单在屏幕左侧. \n\n</details> \n</div> \n\n# 添加样式\n\n此 Web 实验室项目正在使用一种新语言向页面添加样式。与伙伴一起探索 `index.html`和 `style.css`文件。准备好讨论以下问题。\n\n-   这个新的语言对页面有什么变化？\n-   这个语言与 html 的区别是什么？\n-   `index.html`和`style.css`文件是怎样联系起来的？"
      CSD U2 CSS explore CSS_2019: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n\n<summary>\n\n\\*\\* 如何在文件之间切换？ \\*\\* \n\n</summary> \n单击要查看的文件的名称。菜单在屏幕左侧. \n\n</details> \n</div> \n\n# 添加样式\n\n此 Web 实验室项目正在使用一种新语言向页面添加样式。与伙伴一起探索 `index.html`和 `style.css`文件。准备好讨论以下问题。\n\n-   这个新的语言对页面有什么变化？\n-   这个语言与 html 的区别是什么？\n-   `index.html`和`style.css`文件是怎样联系起来的？"
      CSD U2 Debugging 1: |-
        # 调试

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>

        \*\* 什么是bug（缺陷）？ \*\*

        </summary>
        缺陷是代码中的错误，导致代码不按照计划起作用。
        </details>
        <details>
        <summary>

        \*\* 什么是debugging（调试缺陷）？ \*\*

        </summary>
        调试缺陷是查找和修复缺陷的过程。调试是一个解决问题的过程，因此请在调试时使用您的问题解决流程。
        </details>
        <details>
        <summary>**有没有缺陷的例子？**</summary>
        缺陷是任何可能导致代码不按计划运行的原因。有些是拼写错误，有些事将代码放到了错误的地方，使用了错误的标签，或者忘了关闭一个标签。
        </details>
        </div>

        计算机代码是由人写的，所有人都会犯错误。作为一个好的计算机科学家，其中一部分是发现你代码里的错误，并修复它们。在计算机科学中，我们将错误称为**bugs（缺陷）**。查找和修复这些缺陷的过程称为 \*\* debugging（调试） \*\*。 在接下来的两个级别中，您将要锻炼你的调试技能。

        # 这样做

        <img src="https://images.code.org/9c4d90a5a8293c5aee56e6cb81dae689-image-1500915264278.52.56
        AM.png" style="float:right;border:black solid 5px;">

        -   看看网页代码，并与您的伙伴讨论导致以下两个bug的原因：
            \\t \* 标题不够大。
            \\t \* 列表中的第二项没有编号。
            \\t \* 修复代码中的所有缺陷，以便最终结果与图像匹配在右边。
      CSD U2 Debugging 1_2018: |-
        # 调试

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>

        \*\* 什么是bug（缺陷）？ \*\*

        </summary>
        缺陷是代码中的错误，导致代码不按照计划起作用。
        </details>
        <details>
        <summary>

        \*\* 什么是debugging（调试缺陷）？ \*\*

        </summary>
        调试缺陷是查找和修复缺陷的过程。调试是一个解决问题的过程，因此请在调试时使用您的问题解决流程。
        </details>
        <details>
        <summary>**有没有缺陷的例子？**</summary>
        缺陷是任何可能导致代码不按计划运行的原因。有些是拼写错误，有些事将代码放到了错误的地方，使用了错误的标签，或者忘了关闭一个标签。
        </details>
        </div>

        计算机代码是由人写的，所有人都会犯错误。作为一个好的计算机科学家，其中一部分是发现你代码里的错误，并修复它们。在计算机科学中，我们将错误称为**bugs（缺陷）**。查找和修复这些缺陷的过程称为 \*\* debugging（调试） \*\*。 在接下来的两个级别中，您将要锻炼你的调试技能。

        # 这样做

        <img src="https://images.code.org/9c4d90a5a8293c5aee56e6cb81dae689-image-1500915264278.52.56
        AM.png" style="float:right;border:black solid 5px;">

        -   看看网页代码，并与您的伙伴讨论导致以下两个bug的原因：
            \\t \* 标题不够大。
            \\t \* 列表中的第二项没有编号。
            \\t \* 修复代码中的所有缺陷，以便最终结果与图像匹配在右边。
      CSD U2 Debugging 1_2019: |-
        # 调试

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>

        \*\* 什么是bug（缺陷）？ \*\*

        </summary>
        缺陷是代码中的错误，导致代码不按照计划起作用。
        </details>
        <details>
        <summary>

        \*\* 什么是debugging（调试缺陷）？ \*\*

        </summary>
        调试缺陷是查找和修复缺陷的过程。调试是一个解决问题的过程，因此请在调试时使用您的问题解决流程。
        </details>
        <details>
        <summary>**有没有缺陷的例子？**</summary>
        缺陷是任何可能导致代码不按计划运行的原因。有些是拼写错误，有些事将代码放到了错误的地方，使用了错误的标签，或者忘了关闭一个标签。
        </details>
        </div>

        计算机代码是由人写的，所有人都会犯错误。作为一个好的计算机科学家，其中一部分是发现你代码里的错误，并修复它们。在计算机科学中，我们将错误称为**bugs（缺陷）**。查找和修复这些缺陷的过程称为 \*\* debugging（调试） \*\*。 在接下来的两个级别中，您将要锻炼你的调试技能。

        # 这样做

        <img src="https://images.code.org/9c4d90a5a8293c5aee56e6cb81dae689-image-1500915264278.52.56
        AM.png" style="float:right;border:black solid 5px;">

        -   看看网页代码，并与您的伙伴讨论导致以下两个bug的原因：
            \\t \* 标题不够大。
            \\t \* 列表中的第二项没有编号。
            \\t \* 修复代码中的所有缺陷，以便最终结果与图像匹配在右边。
      CSD U2 Debugging 2: |-
        # 调试

        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary> ** 什么是bug（缺陷）？ ** </summary>
        缺陷是代码中的错误，导致代码不按照计划起作用。
        </details>
        <details>
        <summary> ** 什么是debugging（调试缺陷）？ ** </summary>
        调试缺陷是查找和修复缺陷的过程。调试是一个解决问题的过程，因此请在调试时使用您的问题解决流程。
        </details>
        <details>
        <summary>**有没有缺陷的例子？**</summary>
        缺陷是任何可能导致代码不按计划运行的原因。有些是拼写错误，有些事将代码放到了错误的地方，使用了错误的标签，或者忘了关闭一个标签。
        </details>
        </div>

        继续练习调试技能！这个页面比上一个有更多的调试挑战。

        # 这样做

        <img src="https://images.code.org/61190513dba270c731251df168b98f80-image-1474383960371.02.38
        AM.png" style="float:right;border:5px black solid;width:250px">

        -   与你的伙伴讨论这个页面有些什么缺陷。
        -   找到并修复这些缺陷，使得这个页面和右边的一样。
      CSD U2 Debugging 2_2018: |-
        # 调试

        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary> ** 什么是bug（缺陷）？ ** </summary>
        缺陷是代码中的错误，导致代码不按照计划起作用。
        </details>
        <details>
        <summary> ** 什么是debugging（调试缺陷）？ ** </summary>
        调试缺陷是查找和修复缺陷的过程。调试是一个解决问题的过程，因此请在调试时使用您的问题解决流程。
        </details>
        <details>
        <summary>**有没有缺陷的例子？**</summary>
        缺陷是任何可能导致代码不按计划运行的原因。有些是拼写错误，有些事将代码放到了错误的地方，使用了错误的标签，或者忘了关闭一个标签。
        </details>
        </div>

        继续练习调试技能！这个页面比上一个有更多的调试挑战。

        # 这样做

        <img src="https://images.code.org/61190513dba270c731251df168b98f80-image-1474383960371.02.38
        AM.png" style="float:right;border:5px black solid;width:250px">

        -   与你的伙伴讨论这个页面有些什么缺陷。
        -   找到并修复这些缺陷，使得这个页面和右边的一样。
      CSD U2 Debugging 2_2019: |-
        # 调试

        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary> ** 什么是bug（缺陷）？ ** </summary>
        缺陷是代码中的错误，导致代码不按照计划起作用。
        </details>
        <details>
        <summary> ** 什么是debugging（调试缺陷）？ ** </summary>
        调试缺陷是查找和修复缺陷的过程。调试是一个解决问题的过程，因此请在调试时使用您的问题解决流程。
        </details>
        <details>
        <summary>**有没有缺陷的例子？**</summary>
        缺陷是任何可能导致代码不按计划运行的原因。有些是拼写错误，有些事将代码放到了错误的地方，使用了错误的标签，或者忘了关闭一个标签。
        </details>
        </div>

        继续练习调试技能！这个页面比上一个有更多的调试挑战。

        # 这样做

        <img src="https://images.code.org/61190513dba270c731251df168b98f80-image-1474383960371.02.38
        AM.png" style="float:right;border:5px black solid;width:250px">

        -   与你的伙伴讨论这个页面有些什么缺陷。
        -   找到并修复这些缺陷，使得这个页面和右边的一样。
      CSD U2 Debugging 3: |-
        # 调试

        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>

        <summary>

        \*\* 什么是bug（缺陷）？ \*\*

        </summary>
        缺陷是代码中的错误，导致代码不按照计划起作用。
        </details>
        <details>
        <summary>

        \*\* 什么是debugging（调试缺陷）？ \*\*

        </summary>
        调试缺陷是查找和修复缺陷的过程。调试是一个解决问题的过程，因此请在调试时使用您的问题解决流程。
        </details>
        <details>
        <summary>

        **有没有缺陷的例子？**

        </summary>
        缺陷是任何可能导致代码不按计划运行的原因。有些是拼写错误，有些事将代码放到了错误的地方，使用了错误的标签，或者忘了关闭一个标签。
        </details>
        <details>
        <summary>

        **为什么有时检查器停止工作了？**

        </summary>
        有时候，即使HTML中有部分代码是正确的，但也有太多的缺陷了，以至于检查器不能正确的读取代码，而完全无法工作。一旦这些缺陷被修复了，检查器就能继续工作了。
        </details>
        </div>

        这个页面有些图片。图片上有些难对付的缺陷。你能调试这个页面吗？

        # 这样做

        -   和你的伙伴讨论一下，是什么造成了这个页面的一些缺陷。
        -   修复这些缺陷，使得这个页面和下面的目标页面一致。

        ![](<https://images.code.org/4a9ac71bcf6c04775df791516562cd47-image-1508779270522.56.24 AM.png>)
      CSD U2 Debugging 3_2018: |-
        # 调试

        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>

        <summary>

        \*\* 什么是bug（缺陷）？ \*\*

        </summary>
        缺陷是代码中的错误，导致代码不按照计划起作用。
        </details>
        <details>
        <summary>

        \*\* 什么是debugging（调试缺陷）？ \*\*

        </summary>
        调试缺陷是查找和修复缺陷的过程。调试是一个解决问题的过程，因此请在调试时使用您的问题解决流程。
        </details>
        <details>
        <summary>

        **有没有缺陷的例子？**

        </summary>
        缺陷是任何可能导致代码不按计划运行的原因。有些是拼写错误，有些事将代码放到了错误的地方，使用了错误的标签，或者忘了关闭一个标签。
        </details>
        <details>
        <summary>

        **为什么有时检查器停止工作了？**

        </summary>
        有时候，即使HTML中有部分代码是正确的，但也有太多的缺陷了，以至于检查器不能正确的读取代码，而完全无法工作。一旦这些缺陷被修复了，检查器就能继续工作了。
        </details>
        </div>

        这个页面有些图片。图片上有些难对付的缺陷。你能调试这个页面吗？

        # 这样做

        -   和你的伙伴讨论一下，是什么造成了这个页面的一些缺陷。
        -   修复这些缺陷，使得这个页面和下面的目标页面一致。

        ![](<https://images.code.org/4a9ac71bcf6c04775df791516562cd47-image-1508779270522.56.24 AM.png>)
      CSD U2 Debugging 3_2019: |-
        # 调试

        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>

        <summary>

        \*\* 什么是bug（缺陷）？ \*\*

        </summary>
        缺陷是代码中的错误，导致代码不按照计划起作用。
        </details>
        <details>
        <summary>

        \*\* 什么是debugging（调试缺陷）？ \*\*

        </summary>
        调试缺陷是查找和修复缺陷的过程。调试是一个解决问题的过程，因此请在调试时使用您的问题解决流程。
        </details>
        <details>
        <summary>

        **有没有缺陷的例子？**

        </summary>
        缺陷是任何可能导致代码不按计划运行的原因。有些是拼写错误，有些事将代码放到了错误的地方，使用了错误的标签，或者忘了关闭一个标签。
        </details>
        <details>
        <summary>

        **为什么有时检查器停止工作了？**

        </summary>
        有时候，即使HTML中有部分代码是正确的，但也有太多的缺陷了，以至于检查器不能正确的读取代码，而完全无法工作。一旦这些缺陷被修复了，检查器就能继续工作了。
        </details>
        </div>

        这个页面有些图片。图片上有些难对付的缺陷。你能调试这个页面吗？

        # 这样做

        -   和你的伙伴讨论一下，是什么造成了这个页面的一些缺陷。
        -   修复这些缺陷，使得这个页面和下面的目标页面一致。

        ![](<https://images.code.org/4a9ac71bcf6c04775df791516562cd47-image-1508779270522.56.24 AM.png>)
      CSD U2 Debugging 4: |-
        # 格式

        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>**什么是空白符?**</summary>
        空白符指任何显示为空白空间的字符，例如空格、制表符、或是换行符。空白符能够将文档中几个不同的部分分开，使得阅读起来更容易。例如，在HTML代码中，新元素通常都放在新行，虽然这并不会让页面显示上有什么不同。
        </details>
        <details>
        <summary>**什么是缩进？**</summary>
        缩进是在文本到右边缘或左边缘之间，分隔文本的部分。缩进能够表达程序的结构。在HTML中，如果一个元素在其它元素中，通常会进行缩进。这是个例子：
        <pre>
        &lt;body&gt;
        &lt;p&gt;这个段落在"body"元素中。&lt;/p&gt;
        &lt;/body&gt;
        </pre>

        </details>
        <details>
        <summary>**什么是格式化?**</summary>
        格式化是将文本排列成易于理解方式的方法。HTML通常用缩进格式化。这意味着元素里面的子元素都会更靠右一些。这是一个例子：
        <pre>
        &lt;body&gt;
        &lt;p&gt;这个段落在"body"元素中。&lt;/p&gt;
        &lt;/body&gt;
        </pre>
        </details>
        <details>
        <summary>**为什么有时检查器停止工作了？**</summary>
        有时候，即使HTML中有部分代码是正确的，但也有太多的缺陷了，以至于检查器不能正确的读取代码，而完全无法工作。一旦这些缺陷被修复了，检查器就能继续工作了。
        </details>
        </div>

        你写代码的方式会影响调试代码的难易程度。如果你使用**空白符**和**缩进**，这将让你的代码更容易阅读，易于调试。

        # 这样做

        -   和你的伙伴看看这个代码，并讨论应该如何格式化这个代码使其更易阅读。
        -   通过添加新行和缩进来让代码更易阅读。
        -   修复所有的缺陷，让这个页面和下面的目标页面一致。

        \!\[](\<<https://images.code.org/7e194db101f71235340fc075bf09776c-image-1508777739384.46.13>
        AM.png>)
      CSD U2 Debugging 4_2018: |-
        # 格式

        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>**什么是空白符?**</summary>
        空白符指任何显示为空白空间的字符，例如空格、制表符、或是换行符。空白符能够将文档中几个不同的部分分开，使得阅读起来更容易。例如，在HTML代码中，新元素通常都放在新行，虽然这并不会让页面显示上有什么不同。
        </details>
        <details>
        <summary>**什么是缩进？**</summary>
        缩进是在文本到右边缘或左边缘之间，分隔文本的部分。缩进能够表达程序的结构。在HTML中，如果一个元素在其它元素中，通常会进行缩进。这是个例子：
        <pre>
        &lt;body&gt;
        &lt;p&gt;这个段落在"body"元素中。&lt;/p&gt;
        &lt;/body&gt;
        </pre>

        </details>
        <details>
        <summary>**什么是格式化?**</summary>
        格式化是将文本排列成易于理解方式的方法。HTML通常用缩进格式化。这意味着元素里面的子元素都会更靠右一些。这是一个例子：
        <pre>
        &lt;body&gt;
        &lt;p&gt;这个段落在"body"元素中。&lt;/p&gt;
        &lt;/body&gt;
        </pre>
        </details>
        <details>
        <summary>**为什么有时检查器停止工作了？**</summary>
        有时候，即使HTML中有部分代码是正确的，但也有太多的缺陷了，以至于检查器不能正确的读取代码，而完全无法工作。一旦这些缺陷被修复了，检查器就能继续工作了。
        </details>
        </div>

        你写代码的方式会影响调试代码的难易程度。如果你使用**空白符**和**缩进**，这将让你的代码更容易阅读，易于调试。

        # 这样做

        -   和你的伙伴看看这个代码，并讨论应该如何格式化这个代码使其更易阅读。
        -   通过添加新行和缩进来让代码更易阅读。
        -   修复所有的缺陷，让这个页面和下面的目标页面一致。

        \!\[](\<<https://images.code.org/7e194db101f71235340fc075bf09776c-image-1508777739384.46.13>
        AM.png>)
      CSD U2 Debugging 4_2019: |-
        # 格式

        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>**什么是空白符?**</summary>
        空白符指任何显示为空白空间的字符，例如空格、制表符、或是换行符。空白符能够将文档中几个不同的部分分开，使得阅读起来更容易。例如，在HTML代码中，新元素通常都放在新行，虽然这并不会让页面显示上有什么不同。
        </details>
        <details>
        <summary>**什么是缩进？**</summary>
        缩进是在文本到右边缘或左边缘之间，分隔文本的部分。缩进能够表达程序的结构。在HTML中，如果一个元素在其它元素中，通常会进行缩进。这是个例子：
        <pre>
        &lt;body&gt;
        &lt;p&gt;这个段落在"body"元素中。&lt;/p&gt;
        &lt;/body&gt;
        </pre>

        </details>
        <details>
        <summary>**什么是格式化?**</summary>
        格式化是将文本排列成易于理解方式的方法。HTML通常用缩进格式化。这意味着元素里面的子元素都会更靠右一些。这是一个例子：
        <pre>
        &lt;body&gt;
        &lt;p&gt;这个段落在"body"元素中。&lt;/p&gt;
        &lt;/body&gt;
        </pre>
        </details>
        <details>
        <summary>**为什么有时检查器停止工作了？**</summary>
        有时候，即使HTML中有部分代码是正确的，但也有太多的缺陷了，以至于检查器不能正确的读取代码，而完全无法工作。一旦这些缺陷被修复了，检查器就能继续工作了。
        </details>
        </div>

        你写代码的方式会影响调试代码的难易程度。如果你使用**空白符**和**缩进**，这将让你的代码更容易阅读，易于调试。

        # 这样做

        -   和你的伙伴看看这个代码，并讨论应该如何格式化这个代码使其更易阅读。
        -   通过添加新行和缩进来让代码更易阅读。
        -   修复所有的缺陷，让这个页面和下面的目标页面一致。

        \!\[](\<<https://images.code.org/7e194db101f71235340fc075bf09776c-image-1508777739384.46.13>
        AM.png>)
      CSD U2 Debugging comments: |-
        # 调试\\r

        \\r
        这个页面上有一些图片。图片让找到缺陷变得更棘手。你能调试这个页面吗？\\r
        \\r
        当你调试的时候，你可能会注意到这里有一些新的符号：\\r

        <pre>\r
        &lt;!-- 这是一行注释 --&gt;\r
        </pre>\r

        \\r
        这是一条**注释**。注释是计算机科学家们写给自己，或者其他可能要看这个HTML文件的人看的。注释解释了代码的不同部分，每部分应该创建什么。注释能帮你调试程序。\\r
        \\r

        # 这样做\\r

        \\r

        -   找到并修复开始的HTML\\r
        -   当你的页面和这个<a href="https://thimbleprojects.org/danimcavoy/103295/" target="_blank">
            目标页面</a>一样时，就表示你找到了所有的缺陷。
      CSD U2 HTML Add Content: "# 添加内容\\\\r\n\n\\\\r\n开始创造你的第一个网页吧！试着创建一个有标题和两段文字的页面。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n\n-   写一个关于你喜欢的动物的句子\\\\r\n-   在另一行里写一句关于你最不喜欢的动物的句子。\\\\r\n-   在这两句话上面加一个标题：“动物”\\\\r\n-   别忘了点击\n    <img src=\"https://images.code.org/6a35d13b10ed2029a9323c9cb555e39e-image-1477681291001.01.12\n    PM.png\" style=\"width:100px\">\\\\r\n-   **你注意到自己写的内容的结构了吗？**"
      CSD U2 HTML Adding Paragraphs Template: "# 添加文本到正文中\\\\r\n\n\\\\r\n当你开始任何新的网络实验室项目时，它会自动添加\n`<!DOCTYPE>`, `<html>`, `<head>`, 和 `<body>` 标签到这个项目里。当你需要在其中添加自己的内容时，所有内容都要在`<body>`\n和 `</body>` 标签之间，因为这是网页正文的一部分。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n\n-   在你网页里的body标签里写上分开的三句话。\\\\r\n-   如果你没能在预览区看见变化，就点击“刷新并保存”按钮\\\\r\n-   把你的作品和旁边的比一比，确保内容都放在了同样的地方。\\\\r"
      CSD U2 HTML Adding Paragraphs Template_2018: "# 添加文本到正文中\\\\r\n\n\\\\r\n当你开始任何新的网络实验室项目时，它会自动添加\n`<!DOCTYPE>`, `<html>`, `<head>`, 和 `<body>` 标签到这个项目里。当你需要在其中添加自己的内容时，所有内容都要在`<body>`\n和 `</body>` 标签之间，因为这是网页正文的一部分。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n\n-   在你网页里的body标签里写上分开的三句话。\\\\r\n-   如果你没能在预览区看见变化，就点击“刷新并保存”按钮\\\\r\n-   把你的作品和旁边的比一比，确保内容都放在了同样的地方。\\\\r"
      CSD U2 HTML Adding Paragraphs Template_2019: "# 添加文本到正文中\\\\r\n\n\\\\r\n当你开始任何新的网络实验室项目时，它会自动添加\n`<!DOCTYPE>`, `<html>`, `<head>`, 和 `<body>` 标签到这个项目里。当你需要在其中添加自己的内容时，所有内容都要在`<body>`\n和 `</body>` 标签之间，因为这是网页正文的一部分。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n\n-   在你网页里的body标签里写上分开的三句话。\\\\r\n-   如果你没能在预览区看见变化，就点击“刷新并保存”按钮\\\\r\n-   把你的作品和旁边的比一比，确保内容都放在了同样的地方。\\\\r"
      CSD U2 HTML Adding Paragraphs pt 2: |-
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>

        **什么是段落元素？**

        </summary>
        段落是通过开始的(`<p>`)和关闭的(`</p>`)标签来表示的。在HTML里的段落可以是从一个单词到一大堆句子，任何长度的文本。段落能将句子分组，在不同组之间加上一些空间。
        </details>
        <details>
        <summary>

        **我该如何创建多个段落呢？**

        </summary>
        这是一行里有多个段落标签的例子。这个代码会放在你的网页的body部分里。

        <pre>
        `<p>这是一个有两句话的段落</p>`
        `<p>这是另一个段落。</p>`
        </pre>

        </details>

        </div>

        # 使用段落标签

        `<p>`标签或者叫"段落"标签会将一段文本包围起来，这表示这段文本是一个段落。在段落标签里加入文本让计算机知道应该显示时有点不同。通常是在其它文本间增加空间。

        # 这样做

        -   通过添加`<p>`和`</p>`将你刚才写的代码里分成至少两个段落。
        -   与旁边的相比较。与你的文本显示方法相比，有什么变化了？
      CSD U2 HTML Adding Paragraphs pt 2_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>

        **什么是段落元素？**

        </summary>
        段落是通过开始的(`<p>`)和关闭的(`</p>`)标签来表示的。在HTML里的段落可以是从一个单词到一大堆句子，任何长度的文本。段落能将句子分组，在不同组之间加上一些空间。

        </details>
        <details>
        <summary>

        **我该如何创建多个段落呢？**

        </summary>
        这是一行里有多个段落标签的例子。这个代码会放在你的网页的body部分里。

            <p>这是一个有两句话的段落</p>
            <p>这是另一个段落。</p>

        </details>
        </div>

        # 使用段落标签

         `<p>` `</p>`标签或者叫"段落"标签会将一段文本包围起来，这表示这段文本是一个段落。在段落标签里加入文本让计算机知道应该显示时有点不同。通常是在其它文本间增加空间。

        # 这样做

        -   通过添加`<p>`和`</p>`将你刚才写的代码里分成至少两个段落。
        -   与旁边的相比较。与你的文本显示方法相比，有什么变化了？
      CSD U2 HTML Adding Paragraphs pt 2_2019: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>

        **什么是段落元素？**

        </summary>
        段落是通过开始的(`<p>`)和关闭的(`</p>`)标签来表示的。在HTML里的段落可以是从一个单词到一大堆句子，任何长度的文本。段落能将句子分组，在不同组之间加上一些空间。

        </details>
        <details>
        <summary>

        **我该如何创建多个段落呢？**

        </summary>
        这是一行里有多个段落标签的例子。这个代码会放在你的网页的body部分里。

            <p>这是一个有两句话的段落</p>
            <p>这是另一个段落。</p>

        </details>
        </div>

        # 使用段落标签

         `<p>` `</p>`标签或者叫"段落"标签会将一段文本包围起来，这表示这段文本是一个段落。在段落标签里加入文本让计算机知道应该显示时有点不同。通常是在其它文本间增加空间。

        # 这样做

        -   通过添加`<p>`和`</p>`将你刚才写的代码里分成至少两个段落。
        -   与旁边的相比较。与你的文本显示方法相比，有什么变化了？
      CSD U2 HTML Adding Paragraphs: "# 添加文本到正文中\\\\r\n\n\\\\r\n当你开始任何新的网络实验室项目时，它会自动添加\n`<!DOCTYPE>`, `<html>`, `<head>`, 和 `<body>` 标签到这个项目里。当你需要在其中添加自己的内容时，所有内容都要在`<body>`\n和 `</body>` 标签之间，因为这是网页正文的一部分。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n\n-   在你网页里的body标签里写上分开的三句话。\\\\r\n-   如果你没能在预览区看见变化，就点击“刷新并保存”按钮\\\\r\n-   把你的作品和旁边的比一比，确保内容都放在了同样的地方。\\\\r"
      CSD U2 HTML Adding Paragraphs_2018: "# 添加文本到正文中\\\\r\n\n\\\\r\n当你开始任何新的网络实验室项目时，它会自动添加\n`<!DOCTYPE>`, `<html>`, `<head>`, 和 `<body>` 标签到这个项目里。当你需要在其中添加自己的内容时，所有内容都要在`<body>`\n和 `</body>` 标签之间，因为这是网页正文的一部分。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n\n-   在你网页里的body标签里写上分开的三句话。\\\\r\n-   如果你没能在预览区看见变化，就点击“刷新并保存”按钮\\\\r\n-   把你的作品和旁边的比一比，确保内容都放在了同样的地方。\\\\r"
      CSD U2 HTML Adding Paragraphs_2019: "# 添加文本到正文中\\\\r\n\n\\\\r\n当你开始任何新的网络实验室项目时，它会自动添加\n`<!DOCTYPE>`, `<html>`, `<head>`, 和 `<body>` 标签到这个项目里。当你需要在其中添加自己的内容时，所有内容都要在`<body>`\n和 `</body>` 标签之间，因为这是网页正文的一部分。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n\n-   在你网页里的body标签里写上分开的三句话。\\\\r\n-   如果你没能在预览区看见变化，就点击“刷新并保存”按钮\\\\r\n-   把你的作品和旁边的比一比，确保内容都放在了同样的地方。\\\\r"
      CSD U2 HTML Debug Paragraphs: |-
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>
        <strong>什么是段落元素？</strong>
        </summary>
        段落是通过开始的(`<p>`)和关闭的(`</p>`)标签来表示的。在HTML里的段落可以是从一个单词到一大堆句子，任何长度的文本。段落能将句子分组，在不同组之间加上一些空间。
        </details>
        <details>
        <summary>
        <strong>为什么有时HTML不正确，页面也能显示出来？</strong>
        </summary>
        HTML被你的网络浏览器所读取，来生成网页。因为人们经常会犯一些小错误，浏览器被开发成可以猜测网页代码的行为。有时，不同的浏览器会作出不同的猜测！让代码行为一致的唯一办法，是总是正确的使用标签。
        </details>
        <details>
        <summary>
        <strong>为什么代码有时候会变成粉红色？</strong>
        </summary>
        网络实验室被开发成能够自动检测一些HTML中的错误。当它注意到一个错误时，就会将代码显示为粉色。这表示粉色的地方或者粉色的代码之前有错误。你需要仔细的调试，来找到错误。
        </details>
        </div>

        # 调试：修复缺失的标签

        这个简单的网页有些问题，这会造成内容显示不正确。找到并修复问题。这个过程叫做“调试”你的代码。

        # 这样做

        -   修复缺失的代码，让网页能够正确的显示
        -   将你修复的问题与旁边的同学进行比较
      CSD U2 HTML Debug Paragraphs_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>

        <strong>什么是段落元素？</strong>

        </summary>

        段落是通过开始的(`<p>`)和关闭的(`</p>`)标签来表示的。在HTML里的段落可以是从一个单词到一大堆句子，任何长度的文本。段落能将句子分组，在不同组之间加上一些空间。

        </details>
        <details>
        <summary>

        <strong>为什么有时HTML不正确，页面也能显示出来？</strong>

        </summary>

        HTML 被网络浏览器所读取，来生成网页。因为人们经常会犯一些小错误，浏览器被开发成可以猜测网页代码的行为。有时，不同的浏览器会作出不同的猜测！让代码行为一致的唯一办法，是总是正确的使用标签。

        </details>
        <details>
        <summary>

        <strong>为什么代码有时候会变成粉红色？</strong>

        </summary>

        网络实验室被开发成能够自动检测一些HTML中的错误。当它注意到一个错误时，就会将代码显示为粉色。这表示粉色的地方或者粉色的代码之前有错误。你需要仔细的调试，来找到错误。

        </details>
        </div>

        # 调试：修复缺失的标签

        这个简单的网页有些问题，这会造成内容显示不正确。找到并修复问题。这个过程叫做“调试”你的代码。

        # 这样做

        -   修复缺失的代码，让网页能够正确的显示
        -   将你修复的问题与旁边的同学进行比较
      CSD U2 HTML Debug Paragraphs_2019: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>

        <strong>什么是段落元素？</strong>

        </summary>

        段落是通过开始的(`<p>`)和关闭的(`</p>`)标签来表示的。在HTML里的段落可以是从一个单词到一大堆句子，任何长度的文本。段落能将句子分组，在不同组之间加上一些空间。

        </details>
        <details>
        <summary>

        <strong>为什么有时HTML不正确，页面也能显示出来？</strong>

        </summary>

        HTML 被网络浏览器所读取，来生成网页。因为人们经常会犯一些小错误，浏览器被开发成可以猜测网页代码的行为。有时，不同的浏览器会作出不同的猜测！让代码行为一致的唯一办法，是总是正确的使用标签。

        </details>
        <details>
        <summary>

        <strong>为什么代码有时候会变成粉红色？</strong>

        </summary>

        网络实验室被开发成能够自动检测一些HTML中的错误。当它注意到一个错误时，就会将代码显示为粉色。这表示粉色的地方或者粉色的代码之前有错误。你需要仔细的调试，来找到错误。

        </details>
        </div>

        # 调试：修复缺失的标签

        这个简单的网页有些问题，这会造成内容显示不正确。找到并修复问题。这个过程叫做“调试”你的代码。

        # 这样做

        -   修复缺失的代码，让网页能够正确的显示
        -   将你修复的问题与旁边的同学进行比较
      CSD U2 Header Demo: |-
        # 标头

        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>**什么是Header（标头）？**</summary>
        标头是一个网页中不同大小的章节的标题。标头通过在网页中加入这些结构来分隔内容，从而帮助读者阅读。
        </details>
        <details>
        <summary>**如何制作不同大小的标头？**</summary>
        标头有6个不同的尺寸。最常用的标头是&lt;h1&gt; 在HTML标签中的数字1指明这是最大的标头。最小的标头是&lt;h6&gt;。
        你也可以试试&lt;h2&gt;，&lt;h3&gt;，&lt;h4&gt;，和&lt;h5&gt; 标签，数字越小，标头尺寸越大。
        </h1>
        </details>
        <details>
        <summary>**什么是HTML？**</summary>
        HTML是Hypertext Markup Language（超文本标记语言）的缩写。HTML用来向网页中加入结构。THML通过标签来表明某个特定结构的开始和结束。这些标签用了不是英文字母的字符组成，这样就能将结构与内容区分开了。
        </details>
        <details>
        <summary>**什么是HTML元素？**</summary>
        一个HTML元素是网站的一小部分，它有一个开始标签，有时还有一个结束标签。这个元素也会在标签中包含一些内容。例如：
        <img src="https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png"
        style="width:500px">
        </details>
        <details>
        <summary>**什么是HTML标签？**</summary>
        一个HTML标签是一组特殊的字符的集合，它告诉机器，一个HTML元素的开始和结束的位置，以及这个HTML元素是什么。
        </details>
        </div>

        好了，你已经能将你的内容组织进段落了。另一种组织代码的方式是使用**标头**。一个标头是一小段放在章节最顶上的文本，就像标题一样。

        这样做：

        -   用检查器来找到下面代码中用到的标头，并看看它们的代码。
        -   确保你和你的伙伴对标签能做什么达成共识。
        -   修改代码，使得“Drawing”（画画）和"2 years"（两年）和页面其它部分的标头一致。
      CSD U2 Header Sizes: |-
        # 标头尺寸

        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>**什么是Header（标头）？**</summary>
        标头是一个网页中不同大小的章节的标题。标头通过在网页中加入这些结构来分隔内容，从而帮助读者阅读。
        </details>
        <details>
        <summary>**如何制作不同大小的标头？**</summary>
        标头有6个不同的尺寸。最常用的标头是&lt;h1&gt; 在HTML标签中的数字1指明这是最大的标头。最小的标头是&lt;h6&gt;。
        你也可以试试&lt;h2&gt;，&lt;h3&gt;，&lt;h4&gt;，和&lt;h5&gt; 标签，数字越小，标头尺寸越大。
        </details>
        <details>
        <summary>**什么是HTML？**</summary>
        HTML是Hypertext Markup Language（超文本标记语言）的缩写。. HTML用来向网页中加入结构。THML通过标签来表明某个特定结构的开始和结束。这些标签用了不是英文字母的字符组成，这样就能将结构与内容区分开了。
        </details>
        <details>
        <summary>**什么是HTML元素？**</summary>
        一个HTML元素是网站的一小部分，它有一个开始标签，有时还有一个结束标签。这个元素也会在标签中包含一些内容。例如：
        <img src="https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png"
        style="width:500px">
        </details>
        <details>
        <summary>**什么是HTML标签？**</summary>
        一个HTML标签是一组特殊的字符的集合，它告诉机器，一个HTML元素的开始和结束的位置，以及这个HTML元素是什么。
        </details>

        </div>

        标头有不同的尺寸。在这个页面中，有6个不同尺寸的标头，但它们都混起来了。你和你的伙伴能指出如何修复它们吗？

        这样做：

        -   用检查器来找到什么让这些标头有不一样的尺寸
        -   确保你和你的伙伴能在不同的标头标签有什么作用上达成共识。
        -   改动这些标签，让这些标头从大到小排列，并让这些图片下的文本表明了正确的尺寸。

        <img
        src="https://images.code.org/762022f97a355dd63dce5ecc8d0127aa-image-1493161154608.58.15
        PM.png" style="width:100px" style="float:left">
      CSD U2 Header Test: |-
        # 标头和段落

        <div
        style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px" markdown="1">
        <details>
        <summary>**什么是段落元素？**</summary>
        段落是通过开始的(`<p>`)和关闭的(`</p>`)标签来表示的。在HTML里的段落可以是从一个单词到一大堆句子，任何长度的文本。在网页中的所有文本都应该被HTML元素所包含（标头或者段落元素）段落能将句子分组，在不同组之间加上一些空间。
        </details>
        <details>
        <summary>**我该如何创建多个段落呢？**</summary>
        段落是通过开始的(`<p>`)和关闭的(`</p>`)标签来表示的。你需要用多组开始、关闭的<p>标签来创建多个段落。例如
        <pre>
        \t&lt;p&gt;
        \t这是一个段落。
        &lt;/p&gt;
        \t&lt;p&gt;
        \t这是另一个段落。
        &lt;/p&gt;
        </pre>
        </details>
        <details>
        <summary>**什么是Header（标头）？**</summary>
        标头是一个网页中不同大小的章节的标题。标头通过在网页中加入这些结构来分隔内容，从而帮助读者阅读。
        </details>
        <details>
        <summary>**如何制作不同大小的标头？**</summary>
        标头有6个不同的尺寸。最常用的标头是&lt;h1&gt; 在HTML标签中的数字1指明这是最大的标头。最小的标头是&lt;h6&gt;。你也可以试试&lt;h2&gt;，&lt;h3&gt;，&lt;h4&gt;，和&lt;h5&gt; 标签，数字越小，标头尺寸越大。
        </h1>
        </details>
        <details>
        <summary>**什么是HTML？**</summary>
        HTML是Hypertext Markup Language（超文本标记语言）的缩写。HTML用来向网页中加入结构。THML通过标签来表明某个特定结构的开始和结束。这些标签用了不是英文字母的字符组成，这样就能将结构与内容区分开了。
        </details>
        <details>
        <summary>**什么是HTML元素？**</summary>
        一个HTML元素是网站的一小部分，它有一个开始标签，有时还有一个结束标签。这个元素也会在标签中包含一些内容。例如：
        <img src="https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png"
        style="width:500px">
        </details>
        <details>
        <summary>**什么是HTML标签？**</summary>
        一个HTML标签是一组特殊的字符的集合，它告诉机器，一个HTML元素的开始和结束的位置，以及这个HTML元素是什么。
        </details>

        </div>

        这个页面的作者加入了许多的东西，但没有想过结构。所有的文本都混在一起。

        这样做：

        -   和你的伙伴一起看一下这些内容，然后想一下最好的结构应该是什么样的。
        -   用你的标头和段落标签来给这个页面的内容加上结构。
      CSD U2 Heading Demo: |-
        # 标头

        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>**什么是Header（标头）？**</summary>
        标头是一个网页中不同大小的章节的标题。标头通过在网页中加入这些结构来分隔内容，从而帮助读者阅读。.
        </details>
        <details>
        <summary>**如何制作不同大小的标头？**</summary>
        标头有6个不同的尺寸。最常用的标头是&lt;h1&gt; 在HTML标签中的数字1指明这是最大的标头。最小的标头是&lt;h6&gt;。
        你也可以试试&lt;h2&gt;，&lt;h3&gt;，&lt;h4&gt;，和&lt;h5&gt; 标签，数字越小，标头尺寸越大。
        </h1>
        </details>
        <details>
        <summary>**什么是HTML？**</summary>
        HTML是Hypertext Markup Language（超文本标记语言）的缩写。HTML用来向网页中加入结构。THML通过标签来表明某个特定结构的开始和结束。这些标签用了不是英文字母的字符组成，这样就能将结构与内容区分开了。
        </details>
        <details>
        <summary>**什么是HTML元素？**</summary>
        一个HTML元素是网站的一小部分，它有一个开始标签，有时还有一个结束标签。这个元素也会在标签中包含一些内容。例如：
        <img src="https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png"
        style="width:500px">
        </details>
        <details>
        <summary>**什么是HTML标签？**</summary>
        一个HTML标签是一组特殊的字符的集合，它告诉机器，一个HTML元素的开始和结束的位置，以及这个HTML元素是什么。
        </details>
        </div>

        好了，你已经能将你的内容组织进段落了。另一种组织代码的方式是使用**标头**。一个标头是一小段放在章节最顶上的文本，就像标题一样。

        这样做：

        -   用检查器来找到下面代码中用到的标头，并看看它们的代码。
        -   确保你和你的伙伴对标签能做什么达成共识。
        -   修改代码，使得“Drawing”（画画）和"2 years"（两年）和页面其它部分的标头一致。
      CSD U2 Heading Demo_2018: |-
        # 标头

        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>**什么是Header（标头）？**</summary>
        标头是一个网页中不同大小的章节的标题。标头通过在网页中加入这些结构来分隔内容，从而帮助读者阅读。.
        </details>
        <details>
        <summary>**如何制作不同大小的标头？**</summary>
        标头有6个不同的尺寸。最常用的标头是&lt;h1&gt; 在HTML标签中的数字1指明这是最大的标头。最小的标头是&lt;h6&gt;。
        你也可以试试&lt;h2&gt;，&lt;h3&gt;，&lt;h4&gt;，和&lt;h5&gt; 标签，数字越小，标头尺寸越大。
        </h1>
        </details>
        <details>
        <summary>**什么是HTML？**</summary>
        HTML是Hypertext Markup Language（超文本标记语言）的缩写。HTML用来向网页中加入结构。THML通过标签来表明某个特定结构的开始和结束。这些标签用了不是英文字母的字符组成，这样就能将结构与内容区分开了。
        </details>
        <details>
        <summary>**什么是HTML元素？**</summary>
        一个HTML元素是网站的一小部分，它有一个开始标签，有时还有一个结束标签。这个元素也会在标签中包含一些内容。例如：
        <img src="https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png"
        style="width:500px">
        </details>
        <details>
        <summary>**什么是HTML标签？**</summary>
        一个HTML标签是一组特殊的字符的集合，它告诉机器，一个HTML元素的开始和结束的位置，以及这个HTML元素是什么。
        </details>
        </div>

        好了，你已经能将你的内容组织进段落了。另一种组织代码的方式是使用**标头**。一个标头是一小段放在章节最顶上的文本，就像标题一样。

        这样做：

        -   用检查器来找到下面代码中用到的标头，并看看它们的代码。
        -   确保你和你的伙伴对标签能做什么达成共识。
        -   修改代码，使得“Drawing”（画画）和"2 years"（两年）和页面其它部分的标头一致。
      CSD U2 Heading Demo_2019: |-
        # 标头

        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>**什么是Header（标头）？**</summary>
        标头是一个网页中不同大小的章节的标题。标头通过在网页中加入这些结构来分隔内容，从而帮助读者阅读。.
        </details>
        <details>
        <summary>**如何制作不同大小的标头？**</summary>
        标头有6个不同的尺寸。最常用的标头是&lt;h1&gt; 在HTML标签中的数字1指明这是最大的标头。最小的标头是&lt;h6&gt;。
        你也可以试试&lt;h2&gt;，&lt;h3&gt;，&lt;h4&gt;，和&lt;h5&gt; 标签，数字越小，标头尺寸越大。
        </h1>
        </details>
        <details>
        <summary>**什么是HTML？**</summary>
        HTML是Hypertext Markup Language（超文本标记语言）的缩写。HTML用来向网页中加入结构。THML通过标签来表明某个特定结构的开始和结束。这些标签用了不是英文字母的字符组成，这样就能将结构与内容区分开了。
        </details>
        <details>
        <summary>**什么是HTML元素？**</summary>
        一个HTML元素是网站的一小部分，它有一个开始标签，有时还有一个结束标签。这个元素也会在标签中包含一些内容。例如：
        <img src="https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png"
        style="width:500px">
        </details>
        <details>
        <summary>**什么是HTML标签？**</summary>
        一个HTML标签是一组特殊的字符的集合，它告诉机器，一个HTML元素的开始和结束的位置，以及这个HTML元素是什么。
        </details>
        </div>

        好了，你已经能将你的内容组织进段落了。另一种组织代码的方式是使用**标头**。一个标头是一小段放在章节最顶上的文本，就像标题一样。

        这样做：

        -   用检查器来找到下面代码中用到的标头，并看看它们的代码。
        -   确保你和你的伙伴对标签能做什么达成共识。
        -   修改代码，使得“Drawing”（画画）和"2 years"（两年）和页面其它部分的标头一致。
      CSD U2 Heading Sizes: |-
        # Heading Sizes

        <div
        style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px" markdown="1">
        <details>
        <summary>**什么是Heading（标头）？**</summary>
        标头是一个网页中不同大小的章节的标题。标头通过在网页中加入这些结构来分隔内容，从而帮助读者阅读。
        </details>
        <details>
        <summary>**如何制作不同大小的标头？**</summary>
        标头有6个不同的尺寸。最常用的标头是&lt;h1&gt; 在HTML标签中的数字1指明这是最大的标头。最小的标头是&lt;h6&gt;。
        你也可以试试&lt;h2&gt;，&lt;h3&gt;，&lt;h4&gt;，和&lt;h5&gt; 标签，数字越小，标头尺寸越大。
        </details>
        <details>
        <summary>**什么是HTML？**</summary>
        HTML是Hypertext Markup Language（超文本标记语言）的缩写。. HTML用来向网页中加入结构。THML通过标签来表明某个特定结构的开始和结束。这些标签用了不是英文字母的字符组成，这样就能将结构与内容区分开了。
        </details>
        <details>
        <summary>**什么是HTML元素？**</summary>
        一个HTML元素是网站的一小部分，它有一个开始标签，有时还有一个结束标签。这个元素也会在标签中包含一些内容。例如：
        <img src="https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png"
        style="width:500px">
        </details>
        <details>
        <summary>**什么是HTML标签？**</summary>
        一个HTML标签是一组特殊的字符的集合，它告诉机器，一个HTML元素的开始和结束的位置，以及这个HTML元素是什么。
        </details>

        </div>

        标头有不同的尺寸。在这个页面中，有6个不同尺寸的标头，但它们都混起来了。你和你的伙伴能指出如何修复它们吗？

        这样做：

        -   用检查器来找到什么让这些标头有不一样的尺寸
        -   确保你和你的伙伴能在不同的标头标签有什么作用上达成共识。
        -   改动这些标签，让这些标头从大到小排列，并让这些图片下的文本表明了正确的尺寸。

        <img src="https://images.code.org/762022f97a355dd63dce5ecc8d0127aa-image-1493161154608.58.15
        PM.png" style="width:100px" style="float:left">
      CSD U2 Heading Sizes_2018: |-
        # Heading Sizes

        <div
        style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px" markdown="1">
        <details>
        <summary>**什么是Heading（标头）？**</summary>
        标头是一个网页中不同大小的章节的标题。标头通过在网页中加入这些结构来分隔内容，从而帮助读者阅读。
        </details>
        <details>
        <summary>**如何制作不同大小的标头？**</summary>
        标头有6个不同的尺寸。最常用的标头是&lt;h1&gt; 在HTML标签中的数字1指明这是最大的标头。最小的标头是&lt;h6&gt;。
        你也可以试试&lt;h2&gt;，&lt;h3&gt;，&lt;h4&gt;，和&lt;h5&gt; 标签，数字越小，标头尺寸越大。
        </details>
        <details>
        <summary>**什么是HTML？**</summary>
        HTML是Hypertext Markup Language（超文本标记语言）的缩写。. HTML用来向网页中加入结构。THML通过标签来表明某个特定结构的开始和结束。这些标签用了不是英文字母的字符组成，这样就能将结构与内容区分开了。
        </details>
        <details>
        <summary>**什么是HTML元素？**</summary>
        一个HTML元素是网站的一小部分，它有一个开始标签，有时还有一个结束标签。这个元素也会在标签中包含一些内容。例如：
        <img src="https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png"
        style="width:500px">
        </details>
        <details>
        <summary>**什么是HTML标签？**</summary>
        一个HTML标签是一组特殊的字符的集合，它告诉机器，一个HTML元素的开始和结束的位置，以及这个HTML元素是什么。
        </details>

        </div>

        标头有不同的尺寸。在这个页面中，有6个不同尺寸的标头，但它们都混起来了。你和你的伙伴能指出如何修复它们吗？

        这样做：

        -   用检查器来找到什么让这些标头有不一样的尺寸
        -   确保你和你的伙伴能在不同的标头标签有什么作用上达成共识。
        -   改动这些标签，让这些标头从大到小排列，并让这些图片下的文本表明了正确的尺寸。

        <img src="https://images.code.org/762022f97a355dd63dce5ecc8d0127aa-image-1493161154608.58.15
        PM.png" style="width:100px" style="float:left">
      CSD U2 Heading Sizes_2019: |-
        # Heading Sizes

        <div
        style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px" markdown="1">
        <details>
        <summary>**什么是Heading（标头）？**</summary>
        标头是一个网页中不同大小的章节的标题。标头通过在网页中加入这些结构来分隔内容，从而帮助读者阅读。
        </details>
        <details>
        <summary>**如何制作不同大小的标头？**</summary>
        标头有6个不同的尺寸。最常用的标头是&lt;h1&gt; 在HTML标签中的数字1指明这是最大的标头。最小的标头是&lt;h6&gt;。
        你也可以试试&lt;h2&gt;，&lt;h3&gt;，&lt;h4&gt;，和&lt;h5&gt; 标签，数字越小，标头尺寸越大。
        </details>
        <details>
        <summary>**什么是HTML？**</summary>
        HTML是Hypertext Markup Language（超文本标记语言）的缩写。. HTML用来向网页中加入结构。THML通过标签来表明某个特定结构的开始和结束。这些标签用了不是英文字母的字符组成，这样就能将结构与内容区分开了。
        </details>
        <details>
        <summary>**什么是HTML元素？**</summary>
        一个HTML元素是网站的一小部分，它有一个开始标签，有时还有一个结束标签。这个元素也会在标签中包含一些内容。例如：
        <img src="https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png"
        style="width:500px">
        </details>
        <details>
        <summary>**什么是HTML标签？**</summary>
        一个HTML标签是一组特殊的字符的集合，它告诉机器，一个HTML元素的开始和结束的位置，以及这个HTML元素是什么。
        </details>

        </div>

        标头有不同的尺寸。在这个页面中，有6个不同尺寸的标头，但它们都混起来了。你和你的伙伴能指出如何修复它们吗？

        这样做：

        -   用检查器来找到什么让这些标头有不一样的尺寸
        -   确保你和你的伙伴能在不同的标头标签有什么作用上达成共识。
        -   改动这些标签，让这些标头从大到小排列，并让这些图片下的文本表明了正确的尺寸。

        <img src="https://images.code.org/762022f97a355dd63dce5ecc8d0127aa-image-1493161154608.58.15
        PM.png" style="width:100px" style="float:left">
      CSD U2 Heading Test: |-
        # 标头和段落

        <div
        style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px" markdown="1">
        <details>
        <summary>**什么是段落元素？**</summary>
        段落是通过开始的(`<p>`)和关闭的(`</p>`)标签来表示的。在HTML里的段落可以是从一个单词到一大堆句子，任何长度的文本。段落能将句子分组，在不同组之间加上一些空间。在网页中的所有文本都应该被HTML元素所包含（标头或者段落元素）段落能将句子分组，在不同组之间加上一些空间。
        </details>
        <details>
        <summary>**我该如何创建多个段落呢？**</summary>
        段落是通过开始的(`<p>`)和关闭的(`</p>`)标签来表示的。你需要用多组开始、关闭的<p>标签来创建多个段落。例如
        <pre>
        \t&lt;p&gt;
        \t这是一个段落。
        &lt;/p&gt;
        \t&lt;p&gt;
        \t这是另一个段落。
        &lt;/p&gt;
        </pre>
        </details>
        <details>
        <summary>**什么是headings（标头）？**</summary>
        标头是一个网页中不同大小的章节的标题。标头通过在网页中加入这些结构来分隔内容，从而帮助读者阅读。
        </details>
        <details>
        <summary>**如何制作不同大小的标头？**</summary>
        标头有6个不同的尺寸。最常用的标头是&lt;h1&gt; 在HTML标签中的数字1指明这是最大的标头。最小的标头是&lt;h6&gt;。你也可以试试&lt;h2&gt;，&lt;h3&gt;，&lt;h4&gt;，和&lt;h5&gt; 标签，数字越小，标头尺寸越大。
        </h1>
        </details>
        <details>
        <summary>**什么是HTML？**</summary>
        HTML是Hypertext Markup Language（超文本标记语言）的缩写。HTML用来向网页中加入结构。THML通过标签来表明某个特定结构的开始和结束。这些标签用了不是英文字母的字符组成，这样就能将结构与内容区分开了。
        </details>
        <details>
        <summary>**什么是HTML元素？**</summary>
        一个HTML元素是网站的一小部分，它有一个开始标签，有时还有一个结束标签。这个元素也会在标签中包含一些内容。例如：
        <img src="https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png"
        style="width:500px">
        </details>
        <details>
        <summary>**什么是HTML标签？**</summary>
        一个HTML标签是一组特殊的字符的集合，它告诉机器，一个HTML元素的开始和结束的位置，以及这个HTML元素是什么。
        </details>

        </div>

        这个页面的作者加入了许多的东西，但没有想过结构。所有的文本都混在一起。

        这样做：

        -   和你的伙伴一起看一下这些内容，然后想一下最好的结构应该是什么样的。
        -   用你的标头和段落标签来给这个页面的内容加上结构。
      CSD U2 Heading Test_2018: |-
        # 标头和段落

        <div
        style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px" markdown="1">
        <details>
        <summary>**什么是段落元素？**</summary>
        段落是通过开始的(`<p>`)和关闭的(`</p>`)标签来表示的。在HTML里的段落可以是从一个单词到一大堆句子，任何长度的文本。段落能将句子分组，在不同组之间加上一些空间。在网页中的所有文本都应该被HTML元素所包含（标头或者段落元素）段落能将句子分组，在不同组之间加上一些空间。
        </details>
        <details>
        <summary>**我该如何创建多个段落呢？**</summary>
        段落是通过开始的(`<p>`)和关闭的(`</p>`)标签来表示的。你需要用多组开始、关闭的<p>标签来创建多个段落。例如
        <pre>
        \t&lt;p&gt;
        \t这是一个段落。
        &lt;/p&gt;
        \t&lt;p&gt;
        \t这是另一个段落。
        &lt;/p&gt;
        </pre>
        </details>
        <details>
        <summary>**什么是headings（标头）？**</summary>
        标头是一个网页中不同大小的章节的标题。标头通过在网页中加入这些结构来分隔内容，从而帮助读者阅读。
        </details>
        <details>
        <summary>**如何制作不同大小的标头？**</summary>
        标头有6个不同的尺寸。最常用的标头是&lt;h1&gt; 在HTML标签中的数字1指明这是最大的标头。最小的标头是&lt;h6&gt;。你也可以试试&lt;h2&gt;，&lt;h3&gt;，&lt;h4&gt;，和&lt;h5&gt; 标签，数字越小，标头尺寸越大。
        </h1>
        </details>
        <details>
        <summary>**什么是HTML？**</summary>
        HTML是Hypertext Markup Language（超文本标记语言）的缩写。HTML用来向网页中加入结构。THML通过标签来表明某个特定结构的开始和结束。这些标签用了不是英文字母的字符组成，这样就能将结构与内容区分开了。
        </details>
        <details>
        <summary>**什么是HTML元素？**</summary>
        一个HTML元素是网站的一小部分，它有一个开始标签，有时还有一个结束标签。这个元素也会在标签中包含一些内容。例如：
        <img src="https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png"
        style="width:500px">
        </details>
        <details>
        <summary>**什么是HTML标签？**</summary>
        一个HTML标签是一组特殊的字符的集合，它告诉机器，一个HTML元素的开始和结束的位置，以及这个HTML元素是什么。
        </details>

        </div>

        这个页面的作者加入了许多的东西，但没有想过结构。所有的文本都混在一起。

        这样做：

        -   和你的伙伴一起看一下这些内容，然后想一下最好的结构应该是什么样的。
        -   用你的标头和段落标签来给这个页面的内容加上结构。
      CSD U2 Heading Test_2019: |-
        # 标头和段落

        <div
        style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px" markdown="1">
        <details>
        <summary>**什么是段落元素？**</summary>
        段落是通过开始的(`<p>`)和关闭的(`</p>`)标签来表示的。在HTML里的段落可以是从一个单词到一大堆句子，任何长度的文本。段落能将句子分组，在不同组之间加上一些空间。在网页中的所有文本都应该被HTML元素所包含（标头或者段落元素）段落能将句子分组，在不同组之间加上一些空间。
        </details>
        <details>
        <summary>**我该如何创建多个段落呢？**</summary>
        段落是通过开始的(`<p>`)和关闭的(`</p>`)标签来表示的。你需要用多组开始、关闭的<p>标签来创建多个段落。例如
        <pre>
        \t&lt;p&gt;
        \t这是一个段落。
        &lt;/p&gt;
        \t&lt;p&gt;
        \t这是另一个段落。
        &lt;/p&gt;
        </pre>
        </details>
        <details>
        <summary>**什么是headings（标头）？**</summary>
        标头是一个网页中不同大小的章节的标题。标头通过在网页中加入这些结构来分隔内容，从而帮助读者阅读。
        </details>
        <details>
        <summary>**如何制作不同大小的标头？**</summary>
        标头有6个不同的尺寸。最常用的标头是&lt;h1&gt; 在HTML标签中的数字1指明这是最大的标头。最小的标头是&lt;h6&gt;。你也可以试试&lt;h2&gt;，&lt;h3&gt;，&lt;h4&gt;，和&lt;h5&gt; 标签，数字越小，标头尺寸越大。
        </h1>
        </details>
        <details>
        <summary>**什么是HTML？**</summary>
        HTML是Hypertext Markup Language（超文本标记语言）的缩写。HTML用来向网页中加入结构。THML通过标签来表明某个特定结构的开始和结束。这些标签用了不是英文字母的字符组成，这样就能将结构与内容区分开了。
        </details>
        <details>
        <summary>**什么是HTML元素？**</summary>
        一个HTML元素是网站的一小部分，它有一个开始标签，有时还有一个结束标签。这个元素也会在标签中包含一些内容。例如：
        <img src="https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png"
        style="width:500px">
        </details>
        <details>
        <summary>**什么是HTML标签？**</summary>
        一个HTML标签是一组特殊的字符的集合，它告诉机器，一个HTML元素的开始和结束的位置，以及这个HTML元素是什么。
        </details>

        </div>

        这个页面的作者加入了许多的东西，但没有想过结构。所有的文本都混在一起。

        这样做：

        -   和你的伙伴一起看一下这些内容，然后想一下最好的结构应该是什么样的。
        -   用你的标头和段落标签来给这个页面的内容加上结构。
      CSD U2 Image Tag 1: |-
        <div style="float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>**如何添加图片？**</summary>
        `<img>`让你在网页中能够加入图片。<br><br>

        例如：

        <pre>&lt;img
        src="dog.png" alt="跳跃的狗"/&gt;</pre><br><br>

        为了让浏览器知道应该用哪个文件，这里有些额外的信息，叫做 **attribute**（属性），它被加到了\<img>标签的括号里属性`src`是**s**ou**rc**e（来源）的缩写，里面写了图片的名字。图片文件名包括了它的扩展名，即这个图片的编码类型。常见的图片扩展名有：.jpg, .jpeg, .png。<br><br>

        除了src属性，图片还可以有`alt`（替换文本)属性来描述图片。这个属性对于图片不能正确加载时，和有视觉障碍的人特别重要。<br><br>

        因为`<img>`的开始和关闭都在同一个标签里，所以它是一个**自闭和标签**。通常，我们会在图片标签结束前加入`/`来表示这个标签关闭了。

        </details>
        <details>
        <summary>**为什么图片标签没有关闭标签呢？**</summary>
        图片标签不需要关闭标签，因为它没有必须包含的文本内容。这种标签显示的内容是通过它的属性来决定的。
        </details>
        <details>
        <summary>**什么是attribute（属性）？**</summary>
        属性是包含在标签里的额外信息。属性有名字和值两个部分。名字说明了属性信息的类型，值是对于这个标签的实际信息。

        例如\<img>标签有两个属性，src和alt。
        src表明了图片文件的名字，而alt表明了图片所表达的文字含义。

        </details>
        </div>

        # 图片

        狗和猫的网页已经开始制作了。下面的网页里已经加上了狗的图片。用一个图片标签将`cat.jpeg`加到页面里猫标头的下面。
      CSD U2 Image Tag 1_2018: |-
        <div style="float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>**如何添加图片？**</summary>
        `<img>`让你在网页中能够加入图片。<br><br>

        例如：

        <pre>&lt;img
        src="dog.png" alt="跳跃的狗"/&gt;</pre><br><br>

        为了让浏览器知道应该用哪个文件，这里有些额外的信息，叫做 **attribute**（属性），它被加到了\<img>标签的括号里属性`src`是**s**ou**rc**e（来源）的缩写，里面写了图片的名字。图片文件名包括了它的扩展名，即这个图片的编码类型。常见的图片扩展名有：.jpg, .jpeg, .png。<br><br>

        除了src属性，图片还可以有`alt`（替换文本)属性来描述图片。这个属性对于图片不能正确加载时，和有视觉障碍的人特别重要。<br><br>

        因为`<img>`的开始和关闭都在同一个标签里，所以它是一个**自闭和标签**。通常，我们会在图片标签结束前加入`/`来表示这个标签关闭了。

        </details>
        <details>
        <summary>**为什么图片标签没有关闭标签呢？**</summary>
        图片标签不需要关闭标签，因为它没有必须包含的文本内容。这种标签显示的内容是通过它的属性来决定的。
        </details>
        <details>
        <summary>**什么是attribute（属性）？**</summary>
        属性是包含在标签里的额外信息。属性有名字和值两个部分。名字说明了属性信息的类型，值是对于这个标签的实际信息。

        例如\<img>标签有两个属性，src和alt。
        src表明了图片文件的名字，而alt表明了图片所表达的文字含义。

        </details>
        </div>

        # 图片

        狗和猫的网页已经开始制作了。下面的网页里已经加上了狗的图片。用一个图片标签将`cat.jpeg`加到页面里猫标头的下面。
      CSD U2 Image Tag 1_2019: |-
        <div style="float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>**如何添加图片？**</summary>
        `<img>`让你在网页中能够加入图片。<br><br>

        例如：

        <pre>&lt;img
        src="dog.png" alt="跳跃的狗"/&gt;</pre><br><br>

        为了让浏览器知道应该用哪个文件，这里有些额外的信息，叫做 **attribute**（属性），它被加到了\<img>标签的括号里属性`src`是**s**ou**rc**e（来源）的缩写，里面写了图片的名字。图片文件名包括了它的扩展名，即这个图片的编码类型。常见的图片扩展名有：.jpg, .jpeg, .png。<br><br>

        除了src属性，图片还可以有`alt`（替换文本)属性来描述图片。这个属性对于图片不能正确加载时，和有视觉障碍的人特别重要。<br><br>

        因为`<img>`的开始和关闭都在同一个标签里，所以它是一个**自闭和标签**。通常，我们会在图片标签结束前加入`/`来表示这个标签关闭了。

        </details>
        <details>
        <summary>**为什么图片标签没有关闭标签呢？**</summary>
        图片标签不需要关闭标签，因为它没有必须包含的文本内容。这种标签显示的内容是通过它的属性来决定的。
        </details>
        <details>
        <summary>**什么是attribute（属性）？**</summary>
        属性是包含在标签里的额外信息。属性有名字和值两个部分。名字说明了属性信息的类型，值是对于这个标签的实际信息。

        例如\<img>标签有两个属性，src和alt。
        src表明了图片文件的名字，而alt表明了图片所表达的文字含义。

        </details>
        </div>

        # 图片

        狗和猫的网页已经开始制作了。下面的网页里已经加上了狗的图片。用一个图片标签将`cat.jpeg`加到页面里猫标头的下面。
      CSD U2 Image Tag 2: |-
        <div style="float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>**如何添加图片？**</summary>
        `<img>`让你在网页中能够加入图片。<br><br>

        例如：

        <pre>&lt;img
        src="dog.png" alt="跳跃的狗"/&gt;</pre><br><br>

        为了让浏览器知道应该用哪个文件，这里有些额外的信息，叫做 **attribute**（属性），它被加到了\<img>标签的括号里属性`src`是**s**ou**rc**e（来源）的缩写，里面写了图片的名字。图片文件名包括了它的扩展名，即这个图片的编码类型。常见的图片扩展名有：.jpg, .jpeg, .png。<br><br>

        除了src属性，图片还可以有`alt`（替换文本)属性来描述图片。这个属性对于图片不能正确加载时，和有视觉障碍的人特别重要。<br><br>

        因为`<img>`的开始和关闭都在同一个标签里，所以它是一个**自闭和标签**。通常，我们会在图片标签结束前加入`/`来表示这个标签关闭了。

        </details>
        <details>
        <summary>**为什么图片标签没有关闭标签呢？**</summary>
        图片标签不需要关闭标签，因为它没有必须包含的文本内容。这种标签显示的内容是通过它的属性来决定的。
        </details>
        <details>
        <summary>**什么是attribute（属性）？**</summary>
        属性是包含在标签里的额外信息。属性有名字和值两个部分。名字说明了属性信息的类型，值是对于这个标签的实际信息。

        例如\<img>标签有两个属性，src和alt。
        src表明了图片文件的名字，而alt表明了图片所表达的文字含义。

        </details>
        </div>

        # 上传图片

        你可能已经发现有些地方可以通过**添加图片**按钮来上传图片。区照一张你喜欢的，不同类型的宠物铺前，并将它下载到你的电脑里（通过右键的“另存为”）。

        一旦图片准备好后，点击 \!\[](\<<https://images.code.org/c35789d00e59b0dbe42879390dabf925-image-1493240590385.01.49>
        PM.png>) 并且将你的图片从计算机上传到你的项目中，需要用到它的位置。

        # 这样做

        -   上传至少一张图片到这个网页中。
        -   用`<img>`标签在你的网页中显示图片。
        -   确保图片有`alt`属性。
      CSD U2 Image Tag 2_2018: |-
        <div style="float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>**如何添加图片？**</summary>
        `<img>`让你在网页中能够加入图片。<br><br>

        例如：

        <pre>&lt;img
        src="dog.png" alt="跳跃的狗"/&gt;</pre><br><br>

        为了让浏览器知道应该用哪个文件，这里有些额外的信息，叫做 **attribute**（属性），它被加到了\<img>标签的括号里属性`src`是**s**ou**rc**e（来源）的缩写，里面写了图片的名字。图片文件名包括了它的扩展名，即这个图片的编码类型。常见的图片扩展名有：.jpg, .jpeg, .png。<br><br>

        除了src属性，图片还可以有`alt`（替换文本)属性来描述图片。这个属性对于图片不能正确加载时，和有视觉障碍的人特别重要。<br><br>

        因为`<img>`的开始和关闭都在同一个标签里，所以它是一个**自闭和标签**。通常，我们会在图片标签结束前加入`/`来表示这个标签关闭了。

        </details>
        <details>
        <summary>**为什么图片标签没有关闭标签呢？**</summary>
        图片标签不需要关闭标签，因为它没有必须包含的文本内容。这种标签显示的内容是通过它的属性来决定的。
        </details>
        <details>
        <summary>**什么是attribute（属性）？**</summary>
        属性是包含在标签里的额外信息。属性有名字和值两个部分。名字说明了属性信息的类型，值是对于这个标签的实际信息。

        例如\<img>标签有两个属性，src和alt。
        src表明了图片文件的名字，而alt表明了图片所表达的文字含义。

        </details>
        </div>

        # 上传图片

        你可能已经发现有些地方可以通过**添加图片**按钮来上传图片。区照一张你喜欢的，不同类型的宠物铺前，并将它下载到你的电脑里（通过右键的“另存为”）。

        一旦图片准备好后，点击 \!\[](\<<https://images.code.org/c35789d00e59b0dbe42879390dabf925-image-1493240590385.01.49>
        PM.png>) 并且将你的图片从计算机上传到你的项目中，需要用到它的位置。

        # 这样做

        -   上传至少一张图片到这个网页中。
        -   用`<img>`标签在你的网页中显示图片。
        -   确保图片有`alt`属性。
      CSD U2 Image Tag 2_2019: |-
        <div style="float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>**如何添加图片？**</summary>
        `<img>`让你在网页中能够加入图片。<br><br>

        例如：

        <pre>&lt;img
        src="dog.png" alt="跳跃的狗"/&gt;</pre><br><br>

        为了让浏览器知道应该用哪个文件，这里有些额外的信息，叫做 **attribute**（属性），它被加到了\<img>标签的括号里属性`src`是**s**ou**rc**e（来源）的缩写，里面写了图片的名字。图片文件名包括了它的扩展名，即这个图片的编码类型。常见的图片扩展名有：.jpg, .jpeg, .png。<br><br>

        除了src属性，图片还可以有`alt`（替换文本)属性来描述图片。这个属性对于图片不能正确加载时，和有视觉障碍的人特别重要。<br><br>

        因为`<img>`的开始和关闭都在同一个标签里，所以它是一个**自闭和标签**。通常，我们会在图片标签结束前加入`/`来表示这个标签关闭了。

        </details>
        <details>
        <summary>**为什么图片标签没有关闭标签呢？**</summary>
        图片标签不需要关闭标签，因为它没有必须包含的文本内容。这种标签显示的内容是通过它的属性来决定的。
        </details>
        <details>
        <summary>**什么是attribute（属性）？**</summary>
        属性是包含在标签里的额外信息。属性有名字和值两个部分。名字说明了属性信息的类型，值是对于这个标签的实际信息。

        例如\<img>标签有两个属性，src和alt。
        src表明了图片文件的名字，而alt表明了图片所表达的文字含义。

        </details>
        </div>

        # 上传图片

        你可能已经发现有些地方可以通过**添加图片**按钮来上传图片。区照一张你喜欢的，不同类型的宠物铺前，并将它下载到你的电脑里（通过右键的“另存为”）。

        一旦图片准备好后，点击 \!\[](\<<https://images.code.org/c35789d00e59b0dbe42879390dabf925-image-1493240590385.01.49>
        PM.png>) 并且将你的图片从计算机上传到你的项目中，需要用到它的位置。

        # 这样做

        -   上传至少一张图片到这个网页中。
        -   用`<img>`标签在你的网页中显示图片。
        -   确保图片有`alt`属性。
      CSD U2 Image Tag Attribution: |-
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>**如何添加图片？**</summary>
        `<img>`让你在网页中能够加入图片。<br><br>

        例如：

        <pre>&lt;img
        src="dog.png" alt="dog jumping"/&gt;</pre><br><br>

        为了让浏览器知道应该用哪个文件，这里有些额外的信息，叫做 **attribute**（属性），它被加到了\<img>标签的括号里属性`src`是**s**ou**rc**e（来源）的缩写，里面写了图片的名字。图片文件名包括了它的扩展名，即这个图片的编码类型。常见的图片扩展名有：.jpg, .jpeg, .png。<br><br>

        除了src属性，图片还可以有`alt`（替换文本)属性来描述图片。这个属性对于图片不能正确加载时，和有视觉障碍的人特别重要。<br><br>

        因为`<img>`的开始和关闭都在同一个标签里，所以它是一个**自闭和标签**。通常，我们会在图片标签结束前加入`/`来表示这个标签关闭了。

        </details>
        <details>
        <summary>**为什么图片标签没有关闭标签呢？**</summary>
        图片标签不需要关闭标签，因为它没有必须包含的文本内容。这种标签显示的内容是通过它的属性来决定的。
        </details>
        <details>
        <summary>**什么是attribute（属性）？**</summary>
        属性是包含在标签里的额外信息。属性有名字和值两个部分。名字说明了属性信息的类型，值是对于这个标签的实际信息。

        例如\<img>标签有两个属性，src和alt。
        src表明了图片文件的名字，而alt表明了图片所表达的文字含义。

        </details>
        </div>

        # 给予功劳

        当你使用一张知识共享许可的图片时，你需要给原始作者以功劳，（这也被叫做 _署名_ ）。这里有很多方法来提供书名，但最简单的方法是在图片下标识出作者和来源网站。

        # 这样做

        在这个页面中，我们已经添加并署名了一张青蛙的图片。用知识共享引擎找到另一张凉席动物的图片。将找到的图片加入到页面中，并且进行正确的署名，包括：

        -   创作者的名字（如果有的话）
        -   来源网站(例如：commons.wikimedia.org)
        -   它发布时的许可协议 (如： CC-BY)
      CSD U2 Image Tag Attribution_2018: |-
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>**如何添加图片？**</summary>
        `<img>`让你在网页中能够加入图片。<br><br>

        例如：

        <pre>&lt;img
        src="dog.png" alt="dog jumping"/&gt;</pre><br><br>

        为了让浏览器知道应该用哪个文件，这里有些额外的信息，叫做 **attribute**（属性），它被加到了\<img>标签的括号里属性`src`是**s**ou**rc**e（来源）的缩写，里面写了图片的名字。图片文件名包括了它的扩展名，即这个图片的编码类型。常见的图片扩展名有：.jpg, .jpeg, .png。<br><br>

        除了src属性，图片还可以有`alt`（替换文本)属性来描述图片。这个属性对于图片不能正确加载时，和有视觉障碍的人特别重要。<br><br>

        因为`<img>`的开始和关闭都在同一个标签里，所以它是一个**自闭和标签**。通常，我们会在图片标签结束前加入`/`来表示这个标签关闭了。

        </details>
        <details>
        <summary>**为什么图片标签没有关闭标签呢？**</summary>
        图片标签不需要关闭标签，因为它没有必须包含的文本内容。这种标签显示的内容是通过它的属性来决定的。
        </details>
        <details>
        <summary>**什么是attribute（属性）？**</summary>
        属性是包含在标签里的额外信息。属性有名字和值两个部分。名字说明了属性信息的类型，值是对于这个标签的实际信息。

        例如\<img>标签有两个属性，src和alt。
        src表明了图片文件的名字，而alt表明了图片所表达的文字含义。

        </details>
        </div>

        # 给予功劳

        当你使用一张知识共享许可的图片时，你需要给原始作者以功劳，（这也被叫做 _署名_ ）。这里有很多方法来提供书名，但最简单的方法是在图片下标识出作者和来源网站。

        # 这样做

        在这个页面中，我们已经添加并署名了一张青蛙的图片。用知识共享引擎找到另一张凉席动物的图片。将找到的图片加入到页面中，并且进行正确的署名，包括：

        -   创作者的名字（如果有的话）
        -   来源网站(例如：commons.wikimedia.org)
        -   它发布时的许可协议 (如： CC-BY)
      CSD U2 Image Tag Attribution_2019: |-
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>**如何添加图片？**</summary>
        `<img>`让你在网页中能够加入图片。<br><br>

        例如：

        <pre>&lt;img
        src="dog.png" alt="dog jumping"/&gt;</pre><br><br>

        为了让浏览器知道应该用哪个文件，这里有些额外的信息，叫做 **attribute**（属性），它被加到了\<img>标签的括号里属性`src`是**s**ou**rc**e（来源）的缩写，里面写了图片的名字。图片文件名包括了它的扩展名，即这个图片的编码类型。常见的图片扩展名有：.jpg, .jpeg, .png。<br><br>

        除了src属性，图片还可以有`alt`（替换文本)属性来描述图片。这个属性对于图片不能正确加载时，和有视觉障碍的人特别重要。<br><br>

        因为`<img>`的开始和关闭都在同一个标签里，所以它是一个**自闭和标签**。通常，我们会在图片标签结束前加入`/`来表示这个标签关闭了。

        </details>
        <details>
        <summary>**为什么图片标签没有关闭标签呢？**</summary>
        图片标签不需要关闭标签，因为它没有必须包含的文本内容。这种标签显示的内容是通过它的属性来决定的。
        </details>
        <details>
        <summary>**什么是attribute（属性）？**</summary>
        属性是包含在标签里的额外信息。属性有名字和值两个部分。名字说明了属性信息的类型，值是对于这个标签的实际信息。

        例如\<img>标签有两个属性，src和alt。
        src表明了图片文件的名字，而alt表明了图片所表达的文字含义。

        </details>
        </div>

        # 给予功劳

        当你使用一张知识共享许可的图片时，你需要给原始作者以功劳，（这也被叫做 _署名_ ）。这里有很多方法来提供书名，但最简单的方法是在图片下标识出作者和来源网站。

        # 这样做

        在这个页面中，我们已经添加并署名了一张青蛙的图片。用知识共享引擎找到另一张凉席动物的图片。将找到的图片加入到页面中，并且进行正确的署名，包括：

        -   创作者的名字（如果有的话）
        -   来源网站(例如：commons.wikimedia.org)
        -   它发布时的许可协议 (如： CC-BY)
      CSD U2 Image Tag Debug: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>**如何添加图片？**</summary>

        例如：

        <pre>&lt;img
        src="dog.png" alt="跳跃的狗"/&gt;</pre><br><br>

        为了让浏览器知道应该用哪个文件，这里有些额外的信息，叫做 **attribute**（属性），它被加到了\<img>标签的括号里属性`src`是**s**ou**rc**e（来源）的缩写，里面写了图片的名字。图片文件名包括了它的扩展名，即这个图片的编码类型。常见的图片扩展名有：.jpg, .jpeg, .png。<br><br>

        除了src属性，图片还可以有`alt`（替换文本)属性来描述图片。这个属性对于图片不能正确加载时，和有视觉障碍的人特别重要。<br><br>

        因为`<img>`的开始和关闭都在同一个标签里，所以它是一个**自闭和标签**。通常，我们会在图片标签结束前加入`/`来表示这个标签关闭了。

        </details>
        <details>
        <summary>**为什么图片标签没有关闭标签呢？**</summary>
        图片标签不需要关闭标签，因为它没有必须包含的文本内容。这种标签显示的内容是通过它的属性来决定的。
        </details>
        <details>
        <summary>**什么是attribute（属性）？**</summary>
        属性是包含在标签里的额外信息。属性有名字和值两个部分。名字说明了属性信息的类型，值是对于这个标签的实际信息。

        例如\<img>标签有两个属性，src和alt。
        src表明了图片文件的名字，而alt表明了图片所表达的文字含义。

        </details>
        </div>

        # 细节问题

        `src`属性需要填上要使用图片的 _完全匹配的_ 文件名。 这意味着你要注意图片的拼写，大消息，以及扩展名。这个页面上的三个图片都被破坏了，因为它们的`src`属性都不正确。参考文件菜单来修复这些图片标签。

        _注意：虽然图片没能正确加载，但我们的网站仍然能在图片位置显示出描述文本。这是因为我们用了`alt`属性。太棒了！_
      CSD U2 Image Tag Debug_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>
        <summary>
        <strong>**如何添加图片？**</strong>
        </summary>

        `<img>`标签能在网页中显示图片。<br><br>

        例如：

        <pre>&lt;img
        src="dog.png" alt="跳跃的狗"/&gt;</pre><br><br>

        为了让浏览器知道应该用哪个文件，这里有些额外的信息，叫做 **attribute**（属性），它被加到了\<img>标签的括号里属性`src`是**s**ou**rc**e（来源）的缩写，里面写了图片的名字。图片文件名包括了它的扩展名，即这个图片的编码类型。常见的图片扩展名有：.jpg, .jpeg, .png。<br><br>

        除了src属性，图片还可以有`alt`（替换文本)属性来描述图片。这个属性对于图片不能正确加载时，和有视觉障碍的人特别重要。<br><br>

        因为`<img>`的开始和关闭都在同一个标签里，所以它是一个**自闭和标签**。通常，我们会在图片标签结束前加入`/`来表示这个标签关闭了。

        </details>
        <details>
        <summary><strong>**为什么图片标签没有关闭标签呢？**</strong></summary>
        图片标签不需要关闭标签，因为它没有必须包含的文本内容。这种标签显示的内容是通过它的属性来决定的。
        </details>
        <details>
        <summary><strong>**什么是attribute（属性）？**</strong></summary>
        属性是包含在标签里的额外信息。属性有名字和值两个部分。名字说明了属性信息的类型，值是对于这个标签的实际信息。

        例如\<img>标签有两个属性，src和alt。
        src表明了图片文件的名字，而alt表明了图片所表达的文字含义。

        </details>
        </div>

        # 细节问题

        `src`属性需要填上要使用图片的 _完全匹配的_ 文件名。 这意味着你要注意图片的拼写，大消息，以及扩展名。这个页面上的三个图片都被破坏了，因为它们的`src`属性都不正确。参考文件菜单来修复这些图片标签。

        _注意：虽然图片没能正确加载，但我们的网站仍然能在图片位置显示出描述文本。这是因为我们用了`alt`属性。太棒了！_
      CSD U2 Image Tag Debug_2019: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>
        <summary>
        <strong>**如何添加图片？**</strong>
        </summary>

        `<img>`标签能在网页中显示图片。<br><br>

        例如：

        <pre>&lt;img
        src="dog.png" alt="跳跃的狗"/&gt;</pre><br><br>

        为了让浏览器知道应该用哪个文件，这里有些额外的信息，叫做 **attribute**（属性），它被加到了\<img>标签的括号里属性`src`是**s**ou**rc**e（来源）的缩写，里面写了图片的名字。图片文件名包括了它的扩展名，即这个图片的编码类型。常见的图片扩展名有：.jpg, .jpeg, .png。<br><br>

        除了src属性，图片还可以有`alt`（替换文本)属性来描述图片。这个属性对于图片不能正确加载时，和有视觉障碍的人特别重要。<br><br>

        因为`<img>`的开始和关闭都在同一个标签里，所以它是一个**自闭和标签**。通常，我们会在图片标签结束前加入`/`来表示这个标签关闭了。

        </details>
        <details>
        <summary><strong>**为什么图片标签没有关闭标签呢？**</strong></summary>
        图片标签不需要关闭标签，因为它没有必须包含的文本内容。这种标签显示的内容是通过它的属性来决定的。
        </details>
        <details>
        <summary><strong>**什么是attribute（属性）？**</strong></summary>
        属性是包含在标签里的额外信息。属性有名字和值两个部分。名字说明了属性信息的类型，值是对于这个标签的实际信息。

        例如\<img>标签有两个属性，src和alt。
        src表明了图片文件的名字，而alt表明了图片所表达的文字含义。

        </details>
        </div>

        # 细节问题

        `src`属性需要填上要使用图片的 _完全匹配的_ 文件名。 这意味着你要注意图片的拼写，大消息，以及扩展名。这个页面上的三个图片都被破坏了，因为它们的`src`属性都不正确。参考文件菜单来修复这些图片标签。

        _注意：虽然图片没能正确加载，但我们的网站仍然能在图片位置显示出描述文本。这是因为我们用了`alt`属性。太棒了！_
      CSD U2 Info Page Content: "# 添加您的内容\\\\r\n\n\\\\r\n你现在应该已经找到了一些网站，你可以用来帮助你的已选案例的作业。如果还没有，请继续寻找！否则, 就该开始构建页面内容了. \\\\r\n\\\\r\n对于您在外部找到的所有内容, 您需要提供原始创建者的署名。现在, 在括号中提供你找到站点的地址。例如\\\\r\n\\\\r\n\n-   根据 ASPCA, 进入庇护所的动物中只有10% 被阉或绝育 (<http://www.aspca.org/animal-homelessness>).\\\\r\n-   捕杀收容所每年给270万只动物做安乐死 (<http://www.aspca.org/animal-homelessness>)。\\\\r\n    \\\\r\n    # \n    这样做\\\\r\n    \\\\r\n    您的页面布局的细节将取决于您的主题和目标, 但一般来说, 您应该创建以下结构\\\\r\n    \\\\r\n-   具有醒目标题的第一级标头\\\\r\n-   支持你的结论的每个论点的二级标头\\\\r\n-   每个二级标头下的段落\\\\r\n-   您找到信息的所有站点地址\\\\r\n-   暂时不用担心样式，你可以先完善内容\\\\r"
      CSD U2 Info Page Create: |-
        # 信息性页面\\r

        \\r
        让我们从您将用于创建信息的页面开始。\\r
        \\r

        # 这样做\\r

        \\r

        -   请在信息页面的项目中添加一个新的 HTML 文件。\\r
        -   添加标题和说明
      CSD U2 Info Page Final Touches: "<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\\r\n\\r\n<h2>\\r\n检查清单\\r\n</h2>\\r\n\\r\n<input\ntype=\"checkbox\" style=\"float: left\"><span style=\"display: block; margin-left:\n20px; margin-bottom: 10px\">确保您的图片已被正确授权 </span>\\r \n<input type=\"checkbox\" style=\"float: left\"><span style=\"display: block; margin-left: 20px; margin-bottom: 10px\">将图像上传到网络实验室 </span>\\r\n<input type=\"checkbox\" style=\"float: left\"> <span style=\"display: block; margin-left: 20px; margin-bottom: 10px\"> 创建带有描述性的alt属性的图片标签 </span>\\r\n<input type=\"checkbox\" style=\"float: left\"> <span style=\"display: block; margin-left: 20px; margin-bottom: 10px\">如果该图像不是您自己的, 请在下面添加署名<br/>\\r\n\\r\n</div>\\r\n\\r\n\\r\n# 将图片添加您的网站\\r\n\\r\n你已经创建了一些有着很好内容的网页，现在你可以添加一些图像! \\r\n\\r\n# 这样做\\r\n\\r\n使用您自己的或通过共享搜索找到的那些图片, 在您已经创建的页面上添加一些图像。有点创意！请使用右侧的核对清单来跟踪添加图像时需要遵循的步骤。\\r"
      CSD U2 Info Page Final Touches_2018: "<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\\r\n\\r\n<h2>\\r\n检查清单\\r\n</h2>\\r\n\\r\n<input\ntype=\"checkbox\" style=\"float: left\"><span style=\"display: block; margin-left:\n20px; margin-bottom: 10px\">确保您的图片已被正确授权 </span>\\r \n<input type=\"checkbox\" style=\"float: left\"><span style=\"display: block; margin-left: 20px; margin-bottom: 10px\">将图像上传到网络实验室 </span>\\r\n<input type=\"checkbox\" style=\"float: left\"> <span style=\"display: block; margin-left: 20px; margin-bottom: 10px\"> 创建带有描述性的alt属性的图片标签 </span>\\r\n<input type=\"checkbox\" style=\"float: left\"> <span style=\"display: block; margin-left: 20px; margin-bottom: 10px\">如果该图像不是您自己的, 请在下面添加署名<br/>\\r\n\\r\n</div>\\r\n\\r\n\\r\n# 将图片添加您的网站\\r\n\\r\n你已经创建了一些有着很好内容的网页，现在你可以添加一些图像! \\r\n\\r\n# 这样做\\r\n\\r\n使用您自己的或通过共享搜索找到的那些图片, 在您已经创建的页面上添加一些图像。有点创意！请使用右侧的核对清单来跟踪添加图像时需要遵循的步骤。\\r"
      CSD U2 Info Page Final Touches_2019: "<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\\r\n\\r\n<h2>\\r\n检查清单\\r\n</h2>\\r\n\\r\n<input\ntype=\"checkbox\" style=\"float: left\"><span style=\"display: block; margin-left:\n20px; margin-bottom: 10px\">确保您的图片已被正确授权 </span>\\r \n<input type=\"checkbox\" style=\"float: left\"><span style=\"display: block; margin-left: 20px; margin-bottom: 10px\">将图像上传到网络实验室 </span>\\r\n<input type=\"checkbox\" style=\"float: left\"> <span style=\"display: block; margin-left: 20px; margin-bottom: 10px\"> 创建带有描述性的alt属性的图片标签 </span>\\r\n<input type=\"checkbox\" style=\"float: left\"> <span style=\"display: block; margin-left: 20px; margin-bottom: 10px\">如果该图像不是您自己的, 请在下面添加署名<br/>\\r\n\\r\n</div>\\r\n\\r\n\\r\n# 将图片添加您的网站\\r\n\\r\n你已经创建了一些有着很好内容的网页，现在你可以添加一些图像! \\r\n\\r\n# 这样做\\r\n\\r\n使用您自己的或通过共享搜索找到的那些图片, 在您已经创建的页面上添加一些图像。有点创意！请使用右侧的核对清单来跟踪添加图像时需要遵循的步骤。\\r"
      CSD U2 Info Page Images: |-
        # 添加图片\\r

        \\r
        你有了图片及其署名信息，现在是时候开始装扮你的新网页了。 \\r
        \\r

        # 这样做\\r

        \\r
        把你的图片上传到网站实验室中， 并使用`<img>`标签,把它们添加到需要的地方。 对于每张图片:\\r
        \\r

        -   添加一个描述性的`alt`属性\\r
        -   在图片下添加归属来源，包含\\r
            \\t\*
            原创者的名字 (如果有的话)\\r
            -   图片的标题 (如果有的话)\\r
            -   \*
                原网站的地址\\r
            -   原图片发布的版权,可以用文字(如 CC-BY) 或者使用 [Creative Commons website](https://creativecommons.org/about/downloads/) 的标志\\r
                \\r
                例如\\r
                \\r
                ![Sad Dog](https://upload.wikimedia.org/wikipedia/commons/thumb/b/b2/Longhaired_Dachshund_portrait.jpg/629px-Longhaired_Dachshund_portrait.jpg)\\r
                \\r
                Flickr 用户 Soggydan 的长毛达克斯猎狗画像(ht<span>tps://</span>commons.wikimedia.org/wiki/File:Longhaired_Dachshund_portrait.jpg)
        -   CC-BY
      CSD U2 Inspector Warm Up: "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n<details>\n\n<summary>\n\n**<span>\n如何使用检查器工具？ </span>**\n\n</summary>\n\n检查器是在网络实验室里学习你不太熟悉的编码的一种有效途径。 点击<img src=\"https://images.code.org/188579d7c6e7645d0d2edd203a33bd63-image-1480361561351.31.56\nPM.png\" style=\"width:100px\">打开检验工具。通过按钮将变白色并注明\"检查器：打开\"，可以知道检验工具是否是开着的。打开检查器后，就可以把鼠标放在任何元素上查看预览。网络实验室将突出显示页面上指到部分的代码。 \n\n</details>\n</div>\n\n# 探索 HTML\n\n这是个HTML格式书写的网页，你将学习如何用它，但让我们先探索一下如何使用检查器。 \n\n# 这样做\n\n-   点击右边的\"如何使用检查器？\"的提示来了解如何使用它。 \n-   参照网页上的指示来探索网页并和合作伙伴讨论如何使用它。"
      CSD U2 Inspector Warm Up_2018: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n<details>\n<summary>**<span>\n如何使用检查器工具？ </span>**</summary>\n检查器是在网络实验室里学习你不太熟悉的编码的一种有效途径。 要打开检验工具， 请点击<img src=\"https://images.code.org/188579d7c6e7645d0d2edd203a33bd63-image-1480361561351.31.56\nPM.png\" style=\"width:100px\">。你会知道检验工具是否是开着的，因为按钮将变白色并注明\"检查器：打开\"。 一旦你打开检查器，你可以把鼠标放在任何事物的上面查看预览。网络实验室将突出显示页面上指到部分的代码。 \n</details>\n\n</div>\n\n# \n\n探索 HTML\n\n这是个HTML格式书写的网页，你将学习如何用它，但让我们先探索一下如何使用检查器。 \n\n# 这样做\n\n-   点击右边的\"如何使用检查器？\"的提示来了解如何使用它。 \n-   \\*\n    参照网页上的指示来探索网页并和合作伙伴讨论如何使用它。"
      CSD U2 Inspector Warm Up_2019: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n<details>\n<summary>**<span>\n如何使用检查器工具？ </span>**</summary>\n检查器是在网络实验室里学习你不太熟悉的编码的一种有效途径。 要打开检验工具， 请点击<img src=\"https://images.code.org/188579d7c6e7645d0d2edd203a33bd63-image-1480361561351.31.56\nPM.png\" style=\"width:100px\">。你会知道检验工具是否是开着的，因为按钮将变白色并注明\"检查器：打开\"。 一旦你打开检查器，你可以把鼠标放在任何事物的上面查看预览。网络实验室将突出显示页面上指到部分的代码。 \n</details>\n\n</div>\n\n# \n\n探索 HTML\n\n这是个HTML格式书写的网页，你将学习如何用它，但让我们先探索一下如何使用检查器。 \n\n# 这样做\n\n-   点击右边的\"如何使用检查器？\"的提示来了解如何使用它。 \n-   \\*\n    参照网页上的指示来探索网页并和合作伙伴讨论如何使用它。"
      CSD U2 Project Start: "# 开始你的项目\\\\r\n\n\\\\r\n现在你计划好要如何设计你的个人网页，就可以在这里开始了。不要担心如果你无法做完你所要的一切。 在你学到更多关于网页开发的知识后，你有足够的机会可以改善你的作业。 \\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\n-   使用HTML来创建你计划的页面。 请确保它含：\\\\r\n-   至少\\*_两个不同大小的标头_\\\\r\n-   至少**一个段落**\\\\r\n-   比对你的草图，**反想**你做出的网页，并把它给你的伙伴看。"
      CSD U2 Project Start_2018: "# 开始你的项目\\\\r\n\n\\\\r\n现在你计划好要如何设计你的个人网页，就可以在这里开始了。不要担心如果你无法做完你所要的一切。 在你学到更多关于网页开发的知识后，你有足够的机会可以改善你的作业。 \\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\n-   使用HTML来创建你计划的页面。 请确保它含：\\\\r\n-   至少\\*_两个不同大小的标头_\\\\r\n-   至少**一个段落**\\\\r\n-   比对你的草图，**反想**你做出的网页，并把它给你的伙伴看。"
      CSD U2 Project Start_2019: "# 开始你的项目\\\\r\n\n\\\\r\n现在你计划好要如何设计你的个人网页，就可以在这里开始了。不要担心如果你无法做完你所要的一切。 在你学到更多关于网页开发的知识后，你有足够的机会可以改善你的作业。 \\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\n-   使用HTML来创建你计划的页面。 请确保它含：\\\\r\n-   至少\\*_两个不同大小的标头_\\\\r\n-   至少**一个段落**\\\\r\n-   比对你的草图，**反想**你做出的网页，并把它给你的伙伴看。"
      CSD U2 RGB intro_2018: |-
        # RGB（红绿蓝）颜色

        所有的颜色，不管它们有没有名字，都可以用不同水平的红、绿、蓝色的光混合起来显示。这叫做RGB值（这是Red-Green-Blue，也就是红-绿-蓝的简称）。你可以用左边的小部件来试试不同的RGB值，看看能做出什么样的颜色。

        -   **点击"运行"来开始左边的小部件**，并用滑动条来改变红、绿、蓝光的水平。
        -   对于下面每个颜色，用RGB值来匹配它。

        A) 红: 216, 绿: 191, 蓝: 216 - rgb(216,191,216)

        B) 红: 255, 绿: 239, 蓝: 213 - rgb(255,239,213)

        C) 红: 250, 绿:128, 蓝: 114 - rgb(250,128,114)

        D) 红: 70, 绿: 130, 蓝: 180 - rgb(70, 130, 180)

        E) 红: 107, 绿: 142, 蓝: 35 - rgb(107,142,35)

        <div
        style="font-size: 16px">
        <br />
        <details>
        <summary><strong>**为什么红色和绿色能组合出黄色？**</strong></summary>
        <p>当你用颜料画画时，红色和绿色混合出棕色，但RGB颜色用来直接发光，而不是颜料的反光，因此混合起来的颜色是完全不同的。RGB用_加色法混合_。在加色法混合中，红色和绿色混合出黄色，红色和蓝色混合出紫红色，而蓝和绿混合出青色当你将这三个三原色（红绿蓝）混合到一起，就会出现白色。了解更多知识，可以打开<a href="https://zh.wikipedia.org/wiki/%E5%8A%A0%E8%89%B2%E6%B3%95">维基百科 - 加色法</a>
        </p> </details>
        <details>
        <summary><strong>**我能用RGB组合出多少种颜色？**</strong></summary>
        <p>
        用RGB大概能组合出一千六百万种不同的颜色。
        </p></details>
        </div>
      CSD U2 RGB intro_2019: |-
        # RGB（红绿蓝）颜色

        所有的颜色，不管它们有没有名字，都可以用不同水平的红、绿、蓝色的光混合起来显示。这叫做RGB值（这是Red-Green-Blue，也就是红-绿-蓝的简称）。你可以用左边的小部件来试试不同的RGB值，看看能做出什么样的颜色。

        -   **点击"运行"来开始左边的小部件**，并用滑动条来改变红、绿、蓝光的水平。
        -   对于下面每个颜色，用RGB值来匹配它。

        A) 红: 216, 绿: 191, 蓝: 216 - rgb(216,191,216)

        B) 红: 255, 绿: 239, 蓝: 213 - rgb(255,239,213)

        C) 红: 250, 绿:128, 蓝: 114 - rgb(250,128,114)

        D) 红: 70, 绿: 130, 蓝: 180 - rgb(70, 130, 180)

        E) 红: 107, 绿: 142, 蓝: 35 - rgb(107,142,35)

        <div
        style="font-size: 16px">
        <br />
        <details>
        <summary><strong>**为什么红色和绿色能组合出黄色？**</strong></summary>
        <p>当你用颜料画画时，红色和绿色混合出棕色，但RGB颜色用来直接发光，而不是颜料的反光，因此混合起来的颜色是完全不同的。RGB用_加色法混合_。在加色法混合中，红色和绿色混合出黄色，红色和蓝色混合出紫红色，而蓝和绿混合出青色当你将这三个三原色（红绿蓝）混合到一起，就会出现白色。了解更多知识，可以打开<a href="https://zh.wikipedia.org/wiki/%E5%8A%A0%E8%89%B2%E6%B3%95">维基百科 - 加色法</a>
        </p> </details>
        <details>
        <summary><strong>**我能用RGB组合出多少种颜色？**</strong></summary>
        <p>
        用RGB大概能组合出一千六百万种不同的颜色。
        </p></details>
        </div>
      CSD U2 RGB others: |-
        # 春天和秋天的颜色

        选择春天和秋天颜色的RGB（红、蓝、绿）值。

        -   点击"运行"来启动小部件。
        -   调节小部件的水平值，直到找到喜欢的春天的颜色，然后在活动指南上写下这些值。
        -   用同样的方法为秋天找到颜色。会在下个活动中用到这些RBG值。

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>

        **哪里能看到所有颜色类型的范围？**

        </summary>
        可以在 <a href="http://www.w3schools.com/colors/colors_picker.asp" target="_new">W3Schools - HTML颜色选择器</a> 找到可选择的很多颜色。</details>
        <details>
        <summary>

        **为什么红色和绿色能组合出黄色？**

        </summary>
        <p>当你用颜料画画时，红色和绿色混合出棕色，但RGB颜色的混合是通过自发光，而不是颜料的反光，因此混合起来的颜色是完全不同的。RGB用_加色法混合_。在加色法混合中，红色和绿色混合出黄色，红色和蓝色混合出紫红色，而蓝和绿混合出青色当你将这三个三原色（红绿蓝）混合到一起，就会出现白色。了解更多知识，可以打开<a href="https://zh.wikipedia.org/wiki/%E5%8A%A0%E8%89%B2%E6%B3%95">维基百科 - 加色法</a></p> </details>
        <details>
        <summary>

        **我能用RGB组合出多少种颜色？**</summary>

        <p>用RGB大概能组合出一千六百万种不同的颜色。</p></details>
        </div>
      CSD U2 RGB others_2018: |-
        # 春天和秋天的颜色

        选择春天和秋天颜色的RBG值。

        -   点击"运行"来启动小部件。
        -   调节小部件的水平值，直到找到喜欢的春天的颜色，然后在活动指南上写下这些值。
        -   用同样的方法为秋天找到颜色。会在下个活动中用到这些RBG值。

        <div style="font-size: 16px">
        <br />
        <details><summary>
        <strong>**哪里能看到所有颜色类型的范围？**</strong>
        </summary>

        可以在 <a href="http://www.w3schools.com/colors/colors_picker.asp" target="_new">W3Schools - HTML颜色选择器</a> 找到可选择的很多颜色。</details>

        <details>
        <summary>
        <strong>**为什么红色和绿色能组合出黄色？**</strong>
        </summary>
        <p>当你用颜料画画时，红色和绿色混合出棕色，但RGB颜色用来直接发光，而不是颜料的反光，因此混合起来的颜色是完全不同的。RGB用_加色法混合_。在加色法混合中，红色和绿色混合出黄色，红色和蓝色混合出紫红色，而蓝和绿混合出青色当你将这三个三原色（红绿蓝）混合到一起，就会出现白色。了解更多知识，可以打开<a href="https://zh.wikipedia.org/wiki/%E5%8A%A0%E8%89%B2%E6%B3%95">维基百科 - 加色法</a></p> </details>
        <details>
        <summary>
        <strong>**我能用RGB组合出多少种颜色？**</strong></summary>

        <p>用RGB大概能组合出一千六百万种不同的颜色。</p></details>
        </div>
      CSD U2 RGB others_2019: |-
        # 春天和秋天的颜色

        选择春天和秋天颜色的RBG值。

        -   点击"运行"来启动小部件。
        -   调节小部件的水平值，直到找到喜欢的春天的颜色，然后在活动指南上写下这些值。
        -   用同样的方法为秋天找到颜色。会在下个活动中用到这些RBG值。

        <div style="font-size: 16px">
        <br />
        <details><summary>
        <strong>**哪里能看到所有颜色类型的范围？**</strong>
        </summary>

        可以在 <a href="http://www.w3schools.com/colors/colors_picker.asp" target="_new">W3Schools - HTML颜色选择器</a> 找到可选择的很多颜色。</details>

        <details>
        <summary>
        <strong>**为什么红色和绿色能组合出黄色？**</strong>
        </summary>
        <p>当你用颜料画画时，红色和绿色混合出棕色，但RGB颜色用来直接发光，而不是颜料的反光，因此混合起来的颜色是完全不同的。RGB用_加色法混合_。在加色法混合中，红色和绿色混合出黄色，红色和蓝色混合出紫红色，而蓝和绿混合出青色当你将这三个三原色（红绿蓝）混合到一起，就会出现白色。了解更多知识，可以打开<a href="https://zh.wikipedia.org/wiki/%E5%8A%A0%E8%89%B2%E6%B3%95">维基百科 - 加色法</a></p> </details>
        <details>
        <summary>
        <strong>**我能用RGB组合出多少种颜色？**</strong></summary>

        <p>用RGB大概能组合出一千六百万种不同的颜色。</p></details>
        </div>
      CSD U2 RGB summer_2018: |-
        # 夏天的颜色

        找到夏天的黄色的RGB值。

        -   点击"运行"来启动小部件。
        -   调节小部件下的水平值，直到找到和夏天的黄色一样的颜色。
        -   在活动指南上写上RGB值，会在下个活动中需要它。

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>**为什么红色和绿色能组合出黄色？**</strong>
        </summary>
        <p>当你用颜料画画时，红色和绿色混合出棕色，但RGB颜色用来直接发光，而不是颜料的反光，因此混合起来的颜色是完全不同的。RGB用_加色法混合_。在加色法混合中，红色和绿色混合出黄色，红色和蓝色混合出紫红色，而蓝和绿混合出青色当你将这三个三原色（红绿蓝）混合到一起，就会出现白色。了解更多知识，可以打开<a href="https://zh.wikipedia.org/wiki/%E5%8A%A0%E8%89%B2%E6%B3%95">维基百科 - 加色法</a></p> </details>
        <details>
        <summary>
        <strong>**我能用RGB组合出多少种颜色？**</strong>
        </summary>
        <p>用RGB大概能组合出一千六百万种不同的颜色。</p></details>
        </div>
      CSD U2 RGB summer_2019: |-
        # 夏天的颜色

        找到夏天的黄色的RGB值。

        -   点击"运行"来启动小部件。
        -   调节小部件下的水平值，直到找到和夏天的黄色一样的颜色。
        -   在活动指南上写上RGB值，会在下个活动中需要它。

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>**为什么红色和绿色能组合出黄色？**</strong>
        </summary>
        <p>当你用颜料画画时，红色和绿色混合出棕色，但RGB颜色用来直接发光，而不是颜料的反光，因此混合起来的颜色是完全不同的。RGB用_加色法混合_。在加色法混合中，红色和绿色混合出黄色，红色和蓝色混合出紫红色，而蓝和绿混合出青色当你将这三个三原色（红绿蓝）混合到一起，就会出现白色。了解更多知识，可以打开<a href="https://zh.wikipedia.org/wiki/%E5%8A%A0%E8%89%B2%E6%B3%95">维基百科 - 加色法</a></p> </details>
        <details>
        <summary>
        <strong>**我能用RGB组合出多少种颜色？**</strong>
        </summary>
        <p>用RGB大概能组合出一千六百万种不同的颜色。</p></details>
        </div>
      CSD U2 RGB winter_2018: |-
        # 冬天的颜色

        在接下来的几关中，你会为一个网站找到季节的颜色。这里，你需要找到冬天蓝色的RGB值。

        -   点击"运行"来启动这个小部件。
        -   调节小部件下的水平值，让它的颜色时冬天的蓝色。
        -   将RGB值写到你的活动指南里。你会在下一个活动中用到它们。

        <div
        style="font-size: 16px">
        <br />
        <details><summary>
        <strong>**如何让颜色变浅?**</strong></summary>
        <p>为了让颜色变浅，需要让它更淡（增加滑块的水平值)。如果你已经将蓝光增加到了最大值，你需要增加更多的红色和绿色来让蓝色更淡。</p></details>
        <details>
        <summary>
        <strong>**为什么红色和绿色能组合出黄色？**</strong></summary>
        <p>当你用颜料画画时，红色和绿色混合出棕色，但RGB颜色用来直接发光，而不是颜料的反光，因此混合起来的颜色是完全不同的。RGB用_加色法混合_。在加色法混合中，红色和绿色混合出黄色，红色和蓝色混合出紫红色，而蓝和绿混合出青色当你将这三个三原色（红绿蓝）混合到一起，就会出现白色。了解更多知识，可以打开<a href="https://zh.wikipedia.org/wiki/%E5%8A%A0%E8%89%B2%E6%B3%95">维基百科 - 加色法</a></p> </details>
        <details>
        <summary><strong>**我能用RGB组合出多少种颜色？**</strong></summary>
        <p>用RGB大概能组合出一千六百万种不同的颜色。</p></details>
        </div>
      CSD U2 RGB winter_2019: |-
        # 冬天的颜色

        在接下来的几关中，你会为一个网站找到季节的颜色。这里，你需要找到冬天蓝色的RGB值。

        -   点击"运行"来启动这个小部件。
        -   调节小部件下的水平值，让它的颜色时冬天的蓝色。
        -   将RGB值写到你的活动指南里。你会在下一个活动中用到它们。

        <div
        style="font-size: 16px">
        <br />
        <details><summary>
        <strong>**如何让颜色变浅?**</strong></summary>
        <p>为了让颜色变浅，需要让它更淡（增加滑块的水平值)。如果你已经将蓝光增加到了最大值，你需要增加更多的红色和绿色来让蓝色更淡。</p></details>
        <details>
        <summary>
        <strong>**为什么红色和绿色能组合出黄色？**</strong></summary>
        <p>当你用颜料画画时，红色和绿色混合出棕色，但RGB颜色用来直接发光，而不是颜料的反光，因此混合起来的颜色是完全不同的。RGB用_加色法混合_。在加色法混合中，红色和绿色混合出黄色，红色和蓝色混合出紫红色，而蓝和绿混合出青色当你将这三个三原色（红绿蓝）混合到一起，就会出现白色。了解更多知识，可以打开<a href="https://zh.wikipedia.org/wiki/%E5%8A%A0%E8%89%B2%E6%B3%95">维基百科 - 加色法</a></p> </details>
        <details>
        <summary><strong>**我能用RGB组合出多少种颜色？**</strong></summary>
        <p>用RGB大概能组合出一千六百万种不同的颜色。</p></details>
        </div>
      CSD U2 add content: |-
        # 添加 HTML\\r

        \\r
        接下来，你要添加HTML 到你的网页中。\\r
        \\r

        # 这样做\\r

        -   在你创建的每一新网页上添加HTML 来做你在你的项目指南中画的页面草图。 \\r
        -   你也可能要在你已经创建的页面上多添加一些HTML。\\r
      CSD U2 add content_2018: |-
        # 添加 HTML\\r

        \\r
        接下来，你要添加HTML 到你的网页中。\\r
        \\r

        # 这样做\\r

        -   在你创建的每一新网页上添加HTML 来做你在你的项目指南中画的页面草图。 \\r
        -   你也可能要在你已经创建的页面上多添加一些HTML。\\r
      CSD U2 add content_2019: |-
        # 添加 HTML\\r

        \\r
        接下来，你要添加HTML 到你的网页中。\\r
        \\r

        # 这样做\\r

        -   在你创建的每一新网页上添加HTML 来做你在你的项目指南中画的页面草图。 \\r
        -   你也可能要在你已经创建的页面上多添加一些HTML。\\r
      CSD U2 add file - OLD: "<div style=\"float: right; height:\n250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n<summary>**什么是样式表?**</summary>\n样式表是一个控制网页要如何显示的文档。 外部格式表是连接到HTML网页的单独文档。 \n</details>\n<details>\n<summary>**什么是CSS?**</summary>\nCSS是控制网页上内容出现格式的语言。 它通过规则集来改变网页的外观。 每个规则集都有一个选择器，它指定在哪个元素上起作用，而规则解释了如何显示这个元素。每个规则都含有一个属性及它的取值。 \n\n这里是一个规则集的例子。它让`h2` 标签中的文体变蓝并变成草书：\n\n<pre>h2\n{\n   color: blue;\n   font-family: cursive;\n</pre>\n\n在这个例子里， `h2`是个选择器，`color`（颜色）和字体族是属性，`blue` （蓝色）和`cursive`（草书）是这两个属性的值。 \n\n</details>\n<details>\n<summary>**如何创建新的样式表?**</summary>\n要创建一个新的格式表，点击代码区的\"添加 CSS\"按钮。\n</details>\n<details>\n<summary>**如何命名我的样式表?**</summary>\n你可以随意命名，但最好选一个相关的名字例如 \"style.css\"（样式表）\n或\"aboutmestyles.css\"（关于我的样式表） 这样可以清楚知道这个文件用在什么地方。这些文件需要以以\".css\"扩展名结尾。.\n</details>\n<details>\n<summary>**如何重新命名文件?**</summary>\n要重新命名文件，你可以右键点击(或用控制键点击)文件名，选择”重新命名“选项。 这将让你可以输入新的文件名。 在点击的文件高亮后再点击它，就可以重新命名了。\n</details>\n<details>\n<summary>**如何在网页里添加样式表?**</summary>\n要在网页里添加样式表， 先打开网页的代码。在标题标签中，添加以下代码`<link rel=\"stylesheet\" href=\"style.css\">`.  然后把\"style.css\" 改成你的样式表的名字。\n</details>\n</div>\n# 添加样式表\n\n这是你之前的”关于我“的网页。 在下一关里，你将有机会添加一些不同的样式进去。但开始前，你要添加样式表，并给它命名，把它连到你的HTML页面中。\n\n1.  为你的项目创建新的格式表。.\n2.  重新命名格式表文档.\n3.  把你的格式表添加到你的HTML网页。\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/weblab_stylesheet.png\"\nstyle=\" max-width:500px\">"
      CSD U2 add file: "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n\n**什么是样式表?**\n\n</summary>\n样式表是一个控制网页要如何显示的文档。 外部格式表是连接到HTML网页的单独文档。 \n</details>\n<details>\n<summary>\n\n**什么是CSS?**\n\n</summary>\nCSS是控制网页上内容出现格式的语言。 它通过规则集来改变网页的外观。 每个规则集都有一个选择器，它指定在哪个元素上起作用，而规则解释了如何显示这个元素。每个规则都含有一个属性及它的取值。 \n\n这里是一个规则集的例子。它让`h2` 标签中的文体变蓝并变成草书：\n\n<pre>h2 {\n   color: blue;\n   font-family: cursive;\n</pre>\n\n在这个例子里， `h2`是个选择器，`color`（颜色）和字体族是属性，`blue` （蓝色）和`cursive`（草书）是这两个属性的值。 \n\n</details>\n<details>\n<summary>\n\n**如何创建新的样式表?**\n\n</summary>\n要创建一个新的格式表，点击代码区的\"添加 CSS\"按钮。\n</details>\n<details>\n<summary>\n\n**如何命名我的样式表?**\n\n</summary>\n你可以随意命名，但最好选一个相关的名字例如 \"style.css\"（样式表）\n或\"aboutmestyles.css\"（关于我的样式表） 这样可以清楚知道这个文件用在什么地方。这些文件需要以以\".css\"扩展名结尾。\n</details>\n<details>\n<summary>\n\n**如何重新命名文件?**\n\n</summary>\n要重新命名文件，你可以右键点击(或用控制键点击)文件名，选择”重新命名“选项。 这将让你可以输入新的文件名。 在点击的文件高亮后再点击它，就可以重新命名了。\n</details>\n<details>\n<summary>\n\n**如何在网页里添加样式表?**\n\n</summary>\n\n要在网页里添加样式表， 先打开网页的代码。在标题标签中，添加以下代码`<link rel=\"stylesheet\" href=\"style.css\">`.  然后把\"style.css\" 改成你的样式表的名字。\n\n</details>\n</div>\n# 添加样式表\n\n这是你之前的项目。 在下一关里，你将有机会添加一些不同的样式进去。但开始前，你要添加样式表，并给它命名，把它连到你的HTML页面中。\n\n1.  为你的项目创建新的格式表。\n2.  重新命名格式表文档。\n3.  把你的格式表添加到你的HTML网页。\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/weblab_stylesheet.png\" style=\" max-width:500px\">"
      CSD U2 add file_2018: "<div style=\"float: right; height:\n250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n<summary><strong>**什么是样式表?**</strong></summary>\n样式表是一个控制网页要如何显示的文档。 外部格式表是连接到HTML网页的单独文档。 \n</details>\n<details>\n<summary><strong>**什么是CSS?**</strong></summary>\nCSS是控制网页上内容出现格式的语言。 它通过规则集来改变网页的外观。 每个规则集都有一个选择器，它指定在哪个元素上起作用，而规则解释了如何显示这个元素。每个规则都含有一个属性及它的取值。 \n\n这里是一个规则集的例子。它让`h2` 标签中的文体变蓝并变成草书：\n\n<pre>h2\n{\n   color: blue;\n   font-family: cursive;\n</pre>\n\n在这个例子里， `h2`是个选择器，`color`（颜色）和字体族是属性，`blue` （蓝色）和`cursive`（草书）是这两个属性的值。 \n\n</details>\n<details>\n<summary><strong>**如何创建新的样式表?**</strong></summary>\n要创建一个新的格式表，点击代码区的\"添加 CSS\"按钮。\n</details>\n<details>\n<summary><strong>**如何命名我的样式表?**</strong></summary>\n你可以随意命名，但最好选一个相关的名字例如 \"style.css\"（样式表）\n或\"aboutmestyles.css\"（关于我的样式表） 这样可以清楚知道这个文件用在什么地方。这些文件需要以以\".css\"扩展名结尾。.\n</details>\n<details>\n<summary><strong>**如何重新命名文件?**</strong></summary>\n要重新命名文件，你可以右键点击(或用控制键点击)文件名，选择”重新命名“选项。 这将让你可以输入新的文件名。 在点击的文件高亮后再点击它，就可以重新命名了。\n</details>\n<details>\n<summary><strong>**如何在网页里添加样式表?**</strong></summary>\n要在网页里添加样式表， 先打开网页的代码。在标题标签中，添加以下代码`<link rel=\"stylesheet\" href=\"style.css\">`.  然后把\"style.css\" 改成你的样式表的名字。\n</details>\n</div>\n\n# 添加样式表\n\n这是你之前的项目。 在下一关里，你将有机会添加一些不同的样式进去。但开始前，你要添加样式表，并给它命名，把它连到你的HTML页面中。\n\n1.  为你的项目创建新的格式表。.\n2.  重新命名格式表文档.\n3.  把你的格式表添加到你的HTML网页。\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/weblab_stylesheet.png\"\nstyle=\" max-width:500px\">"
      CSD U2 add file_2019: "<div style=\"float: right; height:\n250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n<summary><strong>**什么是样式表?**</strong></summary>\n样式表是一个控制网页要如何显示的文档。 外部格式表是连接到HTML网页的单独文档。 \n</details>\n<details>\n<summary><strong>**什么是CSS?**</strong></summary>\nCSS是控制网页上内容出现格式的语言。 它通过规则集来改变网页的外观。 每个规则集都有一个选择器，它指定在哪个元素上起作用，而规则解释了如何显示这个元素。每个规则都含有一个属性及它的取值。 \n\n这里是一个规则集的例子。它让`h2` 标签中的文体变蓝并变成草书：\n\n<pre>h2\n{\n   color: blue;\n   font-family: cursive;\n</pre>\n\n在这个例子里， `h2`是个选择器，`color`（颜色）和字体族是属性，`blue` （蓝色）和`cursive`（草书）是这两个属性的值。 \n\n</details>\n<details>\n<summary><strong>**如何创建新的样式表?**</strong></summary>\n要创建一个新的格式表，点击代码区的\"添加 CSS\"按钮。\n</details>\n<details>\n<summary><strong>**如何命名我的样式表?**</strong></summary>\n你可以随意命名，但最好选一个相关的名字例如 \"style.css\"（样式表）\n或\"aboutmestyles.css\"（关于我的样式表） 这样可以清楚知道这个文件用在什么地方。这些文件需要以以\".css\"扩展名结尾。.\n</details>\n<details>\n<summary><strong>**如何重新命名文件?**</strong></summary>\n要重新命名文件，你可以右键点击(或用控制键点击)文件名，选择”重新命名“选项。 这将让你可以输入新的文件名。 在点击的文件高亮后再点击它，就可以重新命名了。\n</details>\n<details>\n<summary><strong>**如何在网页里添加样式表?**</strong></summary>\n要在网页里添加样式表， 先打开网页的代码。在标题标签中，添加以下代码`<link rel=\"stylesheet\" href=\"style.css\">`.  然后把\"style.css\" 改成你的样式表的名字。\n</details>\n</div>\n\n# 添加样式表\n\n这是你之前的项目。 在下一关里，你将有机会添加一些不同的样式进去。但开始前，你要添加样式表，并给它命名，把它连到你的HTML页面中。\n\n1.  为你的项目创建新的格式表。.\n2.  重新命名格式表文档.\n3.  把你的格式表添加到你的HTML网页。\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/weblab_stylesheet.png\"\nstyle=\" max-width:500px\">"
      CSD U2 challenge: |-
        # 挑战\\r

        \\r
        在开始这一挑战之前与您的老师进行核对。\\r
        \\r
        此页仅完成了一部分，并且有一些 bug。幸运的是, 有些注释应该能帮助你按照作者的意图来完成这个页面。\\r
        \\r

        # 这样做\\r

        \\r

        -   与您的伙伴一起查看该代码, 并讨论该页面应是什么样子。\\r
        -   请共同完成页面, 注意格式化。\\r
        -   与另一组对比看看页面是否相同。\\r
      CSD U2 challenge_2018: |-
        # 挑战

        在开始这一挑战之前与老师确认一下。

        此页仅完成了一部分，并且有一些缺陷。幸运的是, 有些注释应该能帮助你按照作者的意图来完成这个页面。

        # 这样做

        -   与您的伙伴一起查看该代码, 并讨论该页面应是什么样子。
        -   请共同完成页面, 注意格式化。
        -   与另一组对比看看页面是否相同。
      CSD U2 challenge_2019: |-
        # 挑战

        在开始这一挑战之前与老师确认一下。

        此页仅完成了一部分，并且有一些缺陷。幸运的是, 有些注释应该能帮助你按照作者的意图来完成这个页面。

        # 这样做

        -   与您的伙伴一起查看该代码, 并讨论该页面应是什么样子。
        -   请共同完成页面, 注意格式化。
        -   与另一组对比看看页面是否相同。
      CSD U2 classes modify: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>

        **代码是如何起作用的？**

        </summary>
        为了让代码起作用，你需要创建一个winter（冬天）的类（class），并将元素加到这个类中。

        样式表中的类是像下面的代码。

        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        这段代码创建了一个叫做`winter`的类。并在类中放上了冬天蓝的元素，即RGB值(195,230,255)。

        将winter类加到一个`h5`元素的代码是`<h5 class="winter">`。标签中的`class=winter`会将类的所有内容加到这个标签上。

        </details>
        <details>
        <summary>

        **什么样的规则能够加到类的规则组里？**

        </summary>
        选择器中的任何类型都可以作为类的规则组。如果一条规则不能被应用到类的内容上（比如，在没有文本的元素上加入了`font-size`），那么计算机会忽略这条规则，而采用其它能起作用的规则。
        </details>
        <details>
        <summary>

        **为什么选择器前面有个句点？**

        </summary>
        在CSS中，选择器前面的句点表示这个选择器是类的名字。如果没有句点，就表示这个选择器是HTML标签的名字。
        </details>
        <details>
        <summary>

        **为什么网页开发人员需要用类？**

        </summary>
        即使有时候一些元素的标签是一样的，网页开发人员也能用类来将一些元素应用上和其它元素不同的样式。类也能给不同的标签应用上相同的样式。
        </details>
        <details>
        <summary>

        **我的RBG值不一样，但也是对的。**

        </summary>
        因为RGB能够组合出几百万种不同的颜色，有些颜色之间非常相近，以至于人类很难区分它们。这意味着，会有多个RGB值和我们要找的冬天的颜色很接近。

        </details>
        </div>
        # 添加规则

        冬天的词语应该用同样的颜色和字体。

        -   在样式表种找到给冬天的词语的样式组。
        -   增加一条规则来改变冬天词语的字体。可以选择任何字体，但应该和其它三个季节的都不一样。
        -   为冬天词语添加任何你喜欢的规则。
      CSD U2 classes modify_2018: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>

        <summary><strong>**代码是如何起作用的？**</strong></summary>
        为了让代码起作用，你需要创建一个winter（冬天）的类（class），并将元素加到这个类中。

        样式表中的类是像下面的代码。

        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        这段代码创建了一个叫做`winter`的类。并在类中放上了冬天蓝的元素，即RGB值(195,230,255)。

        将winter类加到一个`h5`元素的代码是`<h5 class="winter">`。标签中的`class=winter`会将类的所有内容加到这个标签上。

        </details>
        <details>
        <summary><strong>**什么样的规则能够加到类的规则组里？**</strong>
        </summary>
        选择器中的任何类型都可以作为类的规则组。如果一条规则不能被应用到类的内容上（比如，在没有文本的元素上加入了`font-size`），那么计算机会忽略这条规则，而采用其它能起作用的规则。
        </details>
        <details>
        <summary><strong>**为什么选择器前面有个句点？**</strong></summary>
        在CSS中，选择器前面的句点表示这个选择器是类的名字。如果没有句点，就表示这个选择器是HTML标签的名字。
        </details>
        <details>
        <summary><strong>**为什么网页开发人员需要用类？**</strong></summary>
        即使有时候一些元素的标签是一样的，网页开发人员也能用类来将一些元素应用上和其它元素不同的样式。类也能给不同的标签应用上相同的样式。
        </details>
        <details>
        <summary><strong>**我的RBG值不一样，但也是对的。**</strong></summary>
        因为RGB能够组合出几百万种不同的颜色，有些颜色之间非常相近，以至于人类很难区分它们。这意味着，会有多个RGB值和我们要找的冬天的颜色很接近。

        </details>
        </div>
        # 添加规则

        冬天的词语应该用同样的颜色和字体。

        -   在样式表种找到给冬天的词语的样式组。
        -   增加一条规则来改变冬天词语的字体。可以选择任何字体，但应该和其它三个季节的都不一样。
        -   为冬天词语添加任何你喜欢的规则。
      CSD U2 classes modify_2019: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>

        <summary><strong>**代码是如何起作用的？**</strong></summary>
        为了让代码起作用，你需要创建一个winter（冬天）的类（class），并将元素加到这个类中。

        样式表中的类是像下面的代码。

        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        这段代码创建了一个叫做`winter`的类。并在类中放上了冬天蓝的元素，即RGB值(195,230,255)。

        将winter类加到一个`h5`元素的代码是`<h5 class="winter">`。标签中的`class=winter`会将类的所有内容加到这个标签上。

        </details>
        <details>
        <summary><strong>**什么样的规则能够加到类的规则组里？**</strong>
        </summary>
        选择器中的任何类型都可以作为类的规则组。如果一条规则不能被应用到类的内容上（比如，在没有文本的元素上加入了`font-size`），那么计算机会忽略这条规则，而采用其它能起作用的规则。
        </details>
        <details>
        <summary><strong>**为什么选择器前面有个句点？**</strong></summary>
        在CSS中，选择器前面的句点表示这个选择器是类的名字。如果没有句点，就表示这个选择器是HTML标签的名字。
        </details>
        <details>
        <summary><strong>**为什么网页开发人员需要用类？**</strong></summary>
        即使有时候一些元素的标签是一样的，网页开发人员也能用类来将一些元素应用上和其它元素不同的样式。类也能给不同的标签应用上相同的样式。
        </details>
        <details>
        <summary><strong>**我的RBG值不一样，但也是对的。**</strong></summary>
        因为RGB能够组合出几百万种不同的颜色，有些颜色之间非常相近，以至于人类很难区分它们。这意味着，会有多个RGB值和我们要找的冬天的颜色很接近。

        </details>
        </div>
        # 添加规则

        冬天的词语应该用同样的颜色和字体。

        -   在样式表种找到给冬天的词语的样式组。
        -   增加一条规则来改变冬天词语的字体。可以选择任何字体，但应该和其它三个季节的都不一样。
        -   为冬天词语添加任何你喜欢的规则。
      CSD U2 classes sample: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n<summary>\n\n**代码是如何起作用的？**\n\n</summary>\n为了让代码起作用，你需要创建一个winter（冬天）的类（class），并将元素加到这个类中。\n\n样式表中的类是像下面的代码。\n\n<pre>.winter {\n  color: rgb(195,230,255);\n}</pre>\n\n这段代码创建了一个叫做`winter`的类。并在类中放上了冬天蓝的元素，即RGB值(195,230,255)。\n\n将winter类加到一个`h5`元素的代码是`<h5 class=\"winter\">`。标签中的`class=winter`会将类的所有内容加到这个标签上。\n\n</details>\n<details>\n<summary>\n\n**为什么选择器前面有个句点？**\n\n</summary>\n在CSS中，选择器前面的句点表示这个选择器是类的名字。如果没有句点，就表示这个选择器是HTML标签的名字。\n</details>\n<details>\n<summary>\n\n**为什么网页开发人员需要用类？**\n\n</summary>\n即使有时候一些元素的标签是一样的，网页开发人员也能用类来将一些元素应用上和其它元素不同的样式。类也能给不同的标签应用上相同的样式。\n</details>\n<details>\n<summary>\n\n**我的RBG值不一样，但也是对的。**\n\n</summary>\n因为RGB能够组合出几百万种不同的颜色，有些颜色之间非常相近，以至于人类很难区分它们。这意味着，会有多个RGB值和我们要找的冬天的颜色很接近。\n\n</details>\n</div>\n# 类(Class)\n\n在这个页面中，网页开发人员用类来给冬天颜色一些词语。\n\n-   看一看冬天词语的HTML代码。为什么\"snowy\"（下雪的）是唯一一个没有冬天颜色的词语？\n-   添加HTML代码，来让\"snowy\"和其它词语一样用上同样的冬天的蓝色。\n-   看看样式表，来找到让所有词语都是冬季蓝的类，并检查你的RGB数字是否和这个接近。  \n-   和伙伴讨论一下这些代码是如何起作用的。"
      CSD U2 classes sample_2018: "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n<strong>代码是如何起作用的？</strong>\n</summary>\n为了让代码起作用，你需要创建一个winter（冬天）的类（class），并将元素加到这个类中。\n\n样式表中的类是像下面的代码。\n\n<pre>.winter {\n  color: rgb(195,230,255);\n}</pre>\n\n这段代码创建了一个叫做`winter`的类。并在类中放上了冬天蓝的元素，即RGB值(195,230,255)。\n\n将winter类加到一个`h5`元素的代码是`<h5 class=\"winter\">`。标签中的`class=winter`会将类的所有内容加到这个标签上。\n\n</details>\n<details>\n<summary>\n<strong>为什么选择器前面有个句点？</strong>\n</summary>\n在CSS中，选择器前面的句点表示这个选择器是类的名字。如果没有句点，就表示这个选择器是HTML标签的名字。\n</details>\n<details>\n<summary>\n<strong>为什么网页开发人员需要用类？</strong>\n</summary>\n即使有时候一些元素的标签是一样的，网页开发人员也能用类来将一些元素应用上和其它元素不同的样式。类也能给不同的标签应用上相同的样式。\n</details>\n<details>\n<summary>\n<strong>我的RBG值不一样，但也是对的。</strong>\n</summary>\n\n因为RGB能够组合出几百万种不同的颜色，有些颜色之间非常相近，以至于人类很难区分它们。这意味着，会有多个RGB值和我们要找的冬天的颜色很接近。\n\n</details>\n</div>\n# 类(Class)\n\n在这个页面中，网页开发人员用类来给冬天颜色一些词语。\n\n-   看一看冬天词语的HTML代码。为什么\"snowy\"（下雪的）是唯一一个没有冬天颜色的词语？\n-   添加HTML代码，来让\"snowy\"和其它词语一样用上同样的冬天的蓝色。\n-   看看样式表，来找到让所有词语都是冬季蓝的类，并检查你的RGB数字是否和这个接近。  \n-   和伙伴讨论一下这些代码是如何起作用的。"
      CSD U2 classes sample_2019: "<div style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n<strong>代码是如何起作用的？</strong>\n</summary>\n为了让代码起作用，你需要创建一个winter（冬天）的类（class），并将元素加到这个类中。\n\n样式表中的类是像下面的代码。\n\n<pre>.winter {\n  color: rgb(195,230,255);\n}</pre>\n\n这段代码创建了一个叫做`winter`的类。并在类中放上了冬天蓝的元素，即RGB值(195,230,255)。\n\n将winter类加到一个`h5`元素的代码是`<h5 class=\"winter\">`。标签中的`class=winter`会将类的所有内容加到这个标签上。\n\n</details>\n<details>\n<summary>\n<strong>为什么选择器前面有个句点？</strong>\n</summary>\n在CSS中，选择器前面的句点表示这个选择器是类的名字。如果没有句点，就表示这个选择器是HTML标签的名字。\n</details>\n<details>\n<summary>\n<strong>为什么网页开发人员需要用类？</strong>\n</summary>\n即使有时候一些元素的标签是一样的，网页开发人员也能用类来将一些元素应用上和其它元素不同的样式。类也能给不同的标签应用上相同的样式。\n</details>\n<details>\n<summary>\n<strong>我的RBG值不一样，但也是对的。</strong>\n</summary>\n\n因为RGB能够组合出几百万种不同的颜色，有些颜色之间非常相近，以至于人类很难区分它们。这意味着，会有多个RGB值和我们要找的冬天的颜色很接近。\n\n</details>\n</div>\n# 类(Class)\n\n在这个页面中，网页开发人员用类来给冬天颜色一些词语。\n\n-   看一看冬天词语的HTML代码。为什么\"snowy\"（下雪的）是唯一一个没有冬天颜色的词语？\n-   添加HTML代码，来让\"snowy\"和其它词语一样用上同样的冬天的蓝色。\n-   看看样式表，来找到让所有词语都是冬季蓝的类，并检查你的RGB数字是否和这个接近。  \n-   和伙伴讨论一下这些代码是如何起作用的。"
      CSD U2 classes spring: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>

        **这些代码是如何起作用的？**

        </summary>
        为了让代码起作用，你需要创建一个spring（春天）的类（class），并将元素加到这个类中。

        spring类已经在样式表中创建好了，但还没有任何规则。

        <pre>.spring {
          color: rgb(195,230,255);
        }</pre>

        看看`winter`类里的规则，参考它来看看如何制作spring（春天）类的规则。

        你还需要添加一些元素到HTML文件里的spring类中。

        HTML文件的代码添加了一个有winter类的`h5`元素`<h5 class="winter">`。用这个模式来为spring类添加一个元素。

        </details>
        <details>
        <summary>

        **什么样的规则能够加到类的规则组里？**

        </summary>
        选择器中的任何类型都可以作为类的规则组。如果一条规则不能被应用到类的内容上（比如，在没有文本的元素上加入了`font-size`），那么计算机会忽略这条规则，而采用其它能起作用的规则。
        </details>
        <details>
        <summary>

        **为什么选择器前面有个句点？**

        </summary>
        在CSS中，选择器前面的句点表示这个选择器是类的名字。如果没有句点，就表示这个选择器是HTML标签的名字。
        </details>
        <details>
        <summary>

        **为什么网页开发人员需要用类？**

        </summary>
        即使有时候一些元素的标签是一样的，网页开发人员也能用类来将一些元素应用上和其它元素不同的样式。类也能给不同的标签应用上相同的样式。
        </details>
        </div>
        # 春天类

        现在，你的春天类已经准备好了，可以开始其它季节了。

        -   在样式表中，找到春天词语样式的空的规则集。
        -   在其中加上两条规则，一条将课程中早先的春天的颜色设置到文本上，另一条给文本一个不同的字体，字体大小或其它修饰。
        -   将spring类增加到HTML页面的春天元素上。
      CSD U2 classes spring_2018: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>**这些代码是如何起作用的？**</summary>
        For
        为了让代码起作用，你需要创建一个spring（春天）的类（class），并将元素加到这个类中。r

        spring类已经在样式表中创建好了，但还没有任何规则。

        <pre>.spring {
          color: rgb(195,230,255);
        }</pre>

        看看`winter`类里的规则，参考它来看看如何制作spring（春天）类的规则。

        你还需要添加一些元素到HTML文件里的spring类中。

        HTML文件的代码添加了一个有winter类的`h5`元素`<h5 class="winter">`。用这个模式来为spring类添加一个元素。

        </details>
        <details>
        <summary>***什么样的规则能够加到类的规则组里？**</summary>
        选择器中的任何类型都可以作为类的规则组。如果一条规则不能被应用到类的内容上（比如，在没有文本的元素上加入了`font-size`），那么计算机会忽略这条规则，而采用其它能起作用的规则。
        </details>
        <details>
        <summary>**为什么选择器前面有个句点？**</summary>
        在CSS中，选择器前面的句点表示这个选择器是类的名字。如果没有句点，就表示这个选择器是HTML标签的名字。
        </details>
        <details>
        <summary>**为什么网页开发人员需要用类？**</summary>
        即使有时候一些元素的标签是一样的，网页开发人员也能用类来将一些元素应用上和其它元素不同的样式。类也能给不同的标签应用上相同的样式。
        </details>
        </div>
        # 春天类

        现在，你的春天类已经准备好了，可以开始其它季节了。

        -   在样式表中，找到春天词语样式的空的规则集。
        -   在其中加上两条规则，一条将课程中早先的春天的颜色设置到文本上，另一条给文本一个不同的字体，字体大小或其它修饰。
        -   将spring类增加到HTML页面的春天元素上。
      CSD U2 classes spring_2019: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>**这些代码是如何起作用的？**</summary>
        For
        为了让代码起作用，你需要创建一个spring（春天）的类（class），并将元素加到这个类中。r

        spring类已经在样式表中创建好了，但还没有任何规则。

        <pre>.spring {
          color: rgb(195,230,255);
        }</pre>

        看看`winter`类里的规则，参考它来看看如何制作spring（春天）类的规则。

        你还需要添加一些元素到HTML文件里的spring类中。

        HTML文件的代码添加了一个有winter类的`h5`元素`<h5 class="winter">`。用这个模式来为spring类添加一个元素。

        </details>
        <details>
        <summary>***什么样的规则能够加到类的规则组里？**</summary>
        选择器中的任何类型都可以作为类的规则组。如果一条规则不能被应用到类的内容上（比如，在没有文本的元素上加入了`font-size`），那么计算机会忽略这条规则，而采用其它能起作用的规则。
        </details>
        <details>
        <summary>**为什么选择器前面有个句点？**</summary>
        在CSS中，选择器前面的句点表示这个选择器是类的名字。如果没有句点，就表示这个选择器是HTML标签的名字。
        </details>
        <details>
        <summary>**为什么网页开发人员需要用类？**</summary>
        即使有时候一些元素的标签是一样的，网页开发人员也能用类来将一些元素应用上和其它元素不同的样式。类也能给不同的标签应用上相同的样式。
        </details>
        </div>
        # 春天类

        现在，你的春天类已经准备好了，可以开始其它季节了。

        -   在样式表中，找到春天词语样式的空的规则集。
        -   在其中加上两条规则，一条将课程中早先的春天的颜色设置到文本上，另一条给文本一个不同的字体，字体大小或其它修饰。
        -   将spring类增加到HTML页面的春天元素上。
      CSD U2 classes summer: |-
        <div style="float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>

        **代码是如何起作用的？**

        </summary>
        为了让winter类起作用，需要创建一个winter类，并为这个类增加元素。

        这个类需要在样式表中用下面的代码来创建。

        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        This
        这段代码创建了一个叫做`winter`的类。并在类中放上了冬天蓝的元素，即RGB值(195,230,255)。

        将winter类加到一个`h5`元素的代码是`<h5 class="winter">`。标签中的`class=winter`会将类的所有内容加到这个标签上。

        </details>
        <details>
        <summary>

        **如何创建一个新的规则集（rule-set）？**

        </summary>
        可以按照样式表中的`winter`和`spring`类的形式来创建一个新的规则集。
        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        选择器和颜色的值会有所不同，但形式是一样的。

        <pre>.classname {
          property1: value1;
          property2:
        value2;
        }</pre>

        </details>
        <details>
        <summary>

        **为什么选择器前面有个句点？**

        </summary>
        在CSS中，选择器前面的句点表示这个选择器是类的名字。如果没有句点，就表示这个选择器是HTML标签的名字。
        </details>
        <details>
        <summary>

        **为什么网页开发人员需要用类？**

        </summary>
        即使有时候一些元素的标签是一样的，网页开发人员也能用类来将一些元素应用上和其它元素不同的样式。类也能给不同的标签应用上相同的样式。
        </details>
        </div>

        # 夏天和秋天的类

        -   在样式表里，为"summer"（夏天）类创建一个新的规则集。
        -   在夏天类里创建一个规则来使用夏天的RGB颜色。
        -   将夏天类添加到HTML的夏天元素里。
        -   为autumn（秋天）类应用同样的步骤。
      CSD U2 classes summer_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>**代码是如何起作用的？**</strong>
        </summary>
        为了让winter类起作用，需要创建一个winter类，并为这个类增加元素。

        这个类需要在样式表中用下面的代码来创建。

        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        This
        这段代码创建了一个叫做`winter`的类。并在类中放上了冬天蓝的元素，即RGB值(195,230,255)。

        将winter类加到一个`h5`元素的代码是`<h5 class="winter">`。标签中的`class=winter`会将类的所有内容加到这个标签上。

        </details>
        <details>
        <summary>

        <strong>**如何创建一个新的规则集（rule-set）？**</strong>

        </summary>
        你能按照样式表中的`winter`和`spring`类的形式来创建一个新的规则集。
        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        选择器和颜色的值会有所不同，但形式是一样的。

        <pre>.classname {
          property1: value1;
          property2:
        value2;
        }</pre>

        </details>
        <details>
        <summary>

        **为什么选择器前面有个句点？**

        </summary>
        在CSS中，选择器前面的句点表示这个选择器是类的名字。如果没有句点，就表示这个选择器是HTML标签的名字。
        </details>
        <details>
        <summary>
        <strong>**为什么网页开发人员需要用类？**</strong>
        </summary>
        即使有时候一些元素的标签是一样的，网页开发人员也能用类来将一些元素应用上和其它元素不同的样式。类也能给不同的标签应用上相同的样式。

        </details>
        </div>

        # 夏天和秋天的类

        -   在样式表里，为"summer"（夏天）类创建一个新的规则集。
        -   在夏天类里创建一个规则来使用夏天的RGB颜色。
        -   将夏天类添加到HTML的夏天元素里。
        -   为autumn（秋天）类应用同样的步骤。
      CSD U2 classes summer_2019: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>**代码是如何起作用的？**</strong>
        </summary>
        为了让winter类起作用，需要创建一个winter类，并为这个类增加元素。

        这个类需要在样式表中用下面的代码来创建。

        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        This
        这段代码创建了一个叫做`winter`的类。并在类中放上了冬天蓝的元素，即RGB值(195,230,255)。

        将winter类加到一个`h5`元素的代码是`<h5 class="winter">`。标签中的`class=winter`会将类的所有内容加到这个标签上。

        </details>
        <details>
        <summary>

        <strong>**如何创建一个新的规则集（rule-set）？**</strong>

        </summary>
        你能按照样式表中的`winter`和`spring`类的形式来创建一个新的规则集。
        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        选择器和颜色的值会有所不同，但形式是一样的。

        <pre>.classname {
          property1: value1;
          property2:
        value2;
        }</pre>

        </details>
        <details>
        <summary>

        **为什么选择器前面有个句点？**

        </summary>
        在CSS中，选择器前面的句点表示这个选择器是类的名字。如果没有句点，就表示这个选择器是HTML标签的名字。
        </details>
        <details>
        <summary>
        <strong>**为什么网页开发人员需要用类？**</strong>
        </summary>
        即使有时候一些元素的标签是一样的，网页开发人员也能用类来将一些元素应用上和其它元素不同的样式。类也能给不同的标签应用上相同的样式。

        </details>
        </div>

        # 夏天和秋天的类

        -   在样式表里，为"summer"（夏天）类创建一个新的规则集。
        -   在夏天类里创建一个规则来使用夏天的RGB颜色。
        -   将夏天类添加到HTML的夏天元素里。
        -   为autumn（秋天）类应用同样的步骤。
      CSD U2 commenting: "# 注释\n\n<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n<summary>**什么是空白符?**\n</summary>\n空白符指任何显示为空白空间的字符，例如空格、制表符、或是换行符。空白符能够将文档中几个不同的部分分开，使得阅读起来更容易。例如，在HTML代码中，新元素通常都放在新行，虽然这并不会让页面显示上有什么不同。\n</details>\n<details>\n<summary>**什么是缩进？**</summary>\n缩进是在文本到右边缘或左边缘之间，分隔文本的部分。缩进能够表达程序的结构。在HTML中，如果一个元素在其它元素中，通常会进行缩进。这是个例子：\n<pre>\n&lt;body&gt;\n&lt;p&gt;这个段落在\"body\"元素中。&lt;/p&gt;\n&lt;/body&gt;\n</pre>\n\n</details>\n<details>  \n<summary> ** 什么是格式化？ ** </summary>  \n格式化是将文本排列成易于理解方式的方法。HTML通常用缩进格式化。这意味着元素里面的子元素都会更靠右一些。这是一个例子：\n<pre> \n<pre>\n&lt;body&gt;\n&lt;p&gt;这个段落在\"body\"元素中。&lt;/p&gt;\n&lt;/body&gt;\n</pre>\n</details>\n</div>\n\n你可以向代码中添加 **comments**（注释）, 以解释代码的不同部分及其应该要创建些什么。注释可以帮助您进行调试，并且还将帮助试图理解代码的其他人。\n\n<pre>\n&lt;!--\n这是一条注释 --&gt;\n</pre>\n\n# 这样做\n\n-   和你的伙伴一起查看代码并找到注释。\n-   使用注释来帮助修复 HTML 中的缺陷。"
      CSD U2 commenting_2018: "# 注释\n\n<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n<summary>**什么是空白符?**\n</summary>\n空白符指任何显示为空白空间的字符，例如空格、制表符、或是换行符。空白符能够将文档中几个不同的部分分开，使得阅读起来更容易。例如，在HTML代码中，新元素通常都放在新行，虽然这并不会让页面显示上有什么不同。\n</details>\n<details>\n<summary>**什么是缩进？**</summary>\n缩进是在文本到右边缘或左边缘之间，分隔文本的部分。缩进能够表达程序的结构。在HTML中，如果一个元素在其它元素中，通常会进行缩进。这是个例子：\n<pre>\n&lt;body&gt;\n&lt;p&gt;这个段落在\"body\"元素中。&lt;/p&gt;\n&lt;/body&gt;\n</pre>\n\n</details>\n<details>  \n<summary> ** 什么是格式化？ ** </summary>  \n格式化是将文本排列成易于理解方式的方法。HTML通常用缩进格式化。这意味着元素里面的子元素都会更靠右一些。这是一个例子：\n<pre> \n<pre>\n&lt;body&gt;\n&lt;p&gt;这个段落在\"body\"元素中。&lt;/p&gt;\n&lt;/body&gt;\n</pre>\n</details>\n</div>\n\n你可以向代码中添加 **comments**（注释）, 以解释代码的不同部分及其应该要创建些什么。注释可以帮助您进行调试，并且还将帮助试图理解代码的其他人。\n\n<pre>\n&lt;!--\n这是一条注释 --&gt;\n</pre>\n\n# 这样做\n\n-   和你的伙伴一起查看代码并找到注释。\n-   使用注释来帮助修复 HTML 中的缺陷。"
      CSD U2 commenting_2019: "# 注释\n\n<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n<summary>**什么是空白符?**\n</summary>\n空白符指任何显示为空白空间的字符，例如空格、制表符、或是换行符。空白符能够将文档中几个不同的部分分开，使得阅读起来更容易。例如，在HTML代码中，新元素通常都放在新行，虽然这并不会让页面显示上有什么不同。\n</details>\n<details>\n<summary>**什么是缩进？**</summary>\n缩进是在文本到右边缘或左边缘之间，分隔文本的部分。缩进能够表达程序的结构。在HTML中，如果一个元素在其它元素中，通常会进行缩进。这是个例子：\n<pre>\n&lt;body&gt;\n&lt;p&gt;这个段落在\"body\"元素中。&lt;/p&gt;\n&lt;/body&gt;\n</pre>\n\n</details>\n<details>  \n<summary> ** 什么是格式化？ ** </summary>  \n格式化是将文本排列成易于理解方式的方法。HTML通常用缩进格式化。这意味着元素里面的子元素都会更靠右一些。这是一个例子：\n<pre> \n<pre>\n&lt;body&gt;\n&lt;p&gt;这个段落在\"body\"元素中。&lt;/p&gt;\n&lt;/body&gt;\n</pre>\n</details>\n</div>\n\n你可以向代码中添加 **comments**（注释）, 以解释代码的不同部分及其应该要创建些什么。注释可以帮助您进行调试，并且还将帮助试图理解代码的其他人。\n\n<pre>\n&lt;!--\n这是一条注释 --&gt;\n</pre>\n\n# 这样做\n\n-   和你的伙伴一起查看代码并找到注释。\n-   使用注释来帮助修复 HTML 中的缺陷。"
      CSD U2 create page: |-
        # 创建并命名你的新页面\\r

        \\r
        在开始写代码之前，你应该确保将所有需要的页面都添加到了项目中\\r
        \\r

        # 这样做\\r

        -   创建一个新的HTML页面，并重命名它。(如果忘了的话，可以看看 <a href="/s/csd2/stage/6/puzzle/8" target="_new">课程6
            关卡8</a>。)\\r
        -   对所有你想添加的页面重复这个操作。\\r
            \\r
      CSD U2 create page_2018: |-
        # 创建并命名你的新页面\\r

        \\r
        在开始写代码之前，你应该确保将所有需要的页面都添加到了项目中\\r
        \\r

        # 这样做\\r

        -   创建一个新的HTML页面，并重命名它。(如果忘了的话，可以看看 <a href="/s/csd2/stage/6/puzzle/8" target="_new">课程6
            关卡8</a>。)\\r
        -   对所有你想添加的页面重复这个操作。\\r
            \\r
      CSD U2 create page_2019: |-
        # 创建并命名你的新页面\\r

        \\r
        在开始写代码之前，你应该确保将所有需要的页面都添加到了项目中\\r
        \\r

        # 这样做\\r

        -   创建一个新的HTML页面，并重命名它。(如果忘了的话，可以看看 <a href="/s/csd2/stage/6/puzzle/8" target="_new">课程6
            关卡8</a>。)\\r
        -   对所有你想添加的页面重复这个操作。\\r
            \\r
      CSD U2 debug comments: |-
        # 调试\\r

        \\r
        这个页面上有一些图片。图片让找到缺陷变得更棘手。你能调试这个页面吗？\\r
        \\r
        当你调试的时候，你可能会注意到这里有一些新的符号：\\r

        <pre>\r
        &lt;!-- 这是一行注释 --&gt;\r
        </pre>\r

        \\r
        这是一条**注释**。注释是计算机科学家们写给自己，或者其他可能要看这个HTML文件的人看的。注释解释了代码的不同部分，每部分应该创建什么。注释能帮你调试程序。\\r
        \\r

        # 这样做\\r

        \\r

        -   找到并修复开始的HTML\\r
        -   当你的页面和这个<a href="https://thimbleprojects.org/danimcavoy/103295/" target="_blank">
            目标页面</a>一样时，就表示你找到了所有的缺陷。
      CSD U2 header footer: |-
        # 导航栏和页脚\\r

        \\r
        你的每个页面都需要导航栏和页脚。\\r
        \\r

        # 这样做\\r

        -   确保每个页面都有一个导航栏，能够跳转到站点的其它页面。回顾导航栏，点击<a href="/s/csd2/stage/9/puzzle/4"
            target="_new">课程9关卡4</a>.\\r
        -   确保每个页面的底部都有一个页脚，解释了你页面的版权信息。
            (浏览<a href="https://creativecommons.org/choose/" target="_new">知识共享</a> 获得创建这个HTMl的帮助。)
      CSD U2 header footer_2018: |-
        # 导航栏和页脚\\r

        \\r
        你的每个页面都需要导航栏和页脚。\\r
        \\r

        # 这样做\\r

        -   确保每个页面都有一个导航栏，能够跳转到站点的其它页面。回顾导航栏，点击<a href="/s/csd2/stage/9/puzzle/4"
            target="_new">课程9关卡4</a>.\\r
        -   确保每个页面的底部都有一个页脚，解释了你页面的版权信息。
            (浏览<a href="https://creativecommons.org/choose/" target="_new">知识共享</a> 获得创建这个HTMl的帮助。)
      CSD U2 header footer_2019: |-
        # 导航栏和页脚\\r

        \\r
        你的每个页面都需要导航栏和页脚。\\r
        \\r

        # 这样做\\r

        -   确保每个页面都有一个导航栏，能够跳转到站点的其它页面。回顾导航栏，点击<a href="/s/csd2/stage/9/puzzle/4"
            target="_new">课程9关卡4</a>.\\r
        -   确保每个页面的底部都有一个页脚，解释了你页面的版权信息。
            (浏览<a href="https://creativecommons.org/choose/" target="_new">知识共享</a> 获得创建这个HTMl的帮助。)
      CSD U2 images intro: |-
        # 图片

        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">
        <details>
        <summary>**如何添加图片？**</summary>
        `<img>`让你在网页中能够加入图片。<br><br>

        例如：

        <pre>&lt;img
        src="dog.png" alt="跳跃的狗"/&gt;</pre><br><br>

        为了让浏览器知道应该用哪个文件，这里有些额外的信息，叫做 **attribute**（属性），它被加到了\<img>标签的括号里属性`src`是**s**ou**rc**e（来源）的缩写，里面写了图片的名字。图片文件名包括了它的扩展名，即这个图片的编码类型。常见的图片扩展名有：.jpg, .jpeg, .png。<br><br>

        除了src属性，图片还可以有`alt`（替换文本）属性来描述图片。这个属性对于图片不能正确加载时，和有视觉障碍的人特别重要。<br><br>

        因为`<img>`的开始和关闭都在同一个标签里，所以它是一个**自闭和标签**。通常，我们会在图片标签结束前加入`/`来表示这个标签关闭了。

        </details>
        <details>
        <summary>**什么是空元素？**</summary>
        `<img>` 标签是一个**空元素**的例子，因为它的开始、关闭都在同一个标签里。为了标记它，我们将通常放在结束标签里的`/`放到了图片标签的结尾处。空元素不需要关闭标签，因为它不需要再标签之间插入文本内容。影响内容显示的都在属性中进行了设置。
        </details>
        <details>
        <summary>**为什么图片标签没有结束元素？**</summary>
        图片标签是一个空标签，而空标签不需要结束标签。因为它里面不需要有文本内容。影响显示的数据都设置到了标签的属性里。
        </details>
        <details>
        <summary>**什么是attribute（属性）？**</summary>
        属性是包含在标签里的额外信息。属性有名字和值两个部分。名字说明了属性信息的类型，值是对于这个标签的实际信息。

        例如\<img>标签有两个属性，src和alt。
        src表明了图片文件的名字，而alt表明了图片所表达的文字含义。

        </details>
        </div>

        如果这个配方页面有一张图片，那会看起来更好。图片能让这个页面看起来更好。

        # 这样做

        -   看看你左边的工作区，并找出名为"scotcheroos.jpeg"的文件
        -   用检查器工具来找到让这张图片显示出来的代码。
        -   确保你的你的伙伴对图片的标签是如何起作用的达成共识。
        -   试着将图片挪到页面的顶上。
      CSD U2 layout style bgcolor_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>**代码如何起作用？**</strong>
        </summary>
        这是让页面背景变成蓝色的代码：

        <pre>body
        {
          background-color: lightblue;
        }</pre>

        -   `body`是一个_选择器_。它指定了哪些元素应该遵循花括号里的规则。在这里，body（正文）元素是整个页面。
        -   `background-color: lightblue;`是让整个页面变成淡蓝色的规则。
        -   `background-color`（背景-颜色）是_属性_。它解释了这条是什么规则。在这里，表示背景的颜色。
        -   `lightblue`是_值_。它解释了这条规则会被怎么应用，在这里，表示背景的淡蓝色。
            </details>
            <details>
            <summary>
            <strong>**我能在CSS中使用什么颜色？**</strong>
            </summary>
            CSS包括了大部分常用的颜色名字（red - 红，blue - 蓝， green - 绿，等等），还有很多其它不常用的。你能在<a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools
        -   HTML颜色名称</a>找到CSS颜色的完整列表。你还能用没有包括在这里的颜色，但需要用它们的RGB颜色。关于CSS中的颜色，可以在<a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools
        -   CSS正确的颜色值</a>查看更多信息。
            </details>
            <details>
            <summary>
            <strong>**`background-color`属性做了什么？**</strong></summary>
            `background-color`属性决定了一个元素的背景颜色。可以在<a href="http://www.w3schools.com/cssref/pr_background-color.asp">W3Schools
        -   CSS background-color 属性</a>查看关于这个属性的更多信息。
            </details>
            <details>
            <summary>
            <strong>**如果页面里的元素有着与body不同的背景颜色会怎样？**</strong></summary>
            你可以通过为`p`标签增加一个`background-color`规则来寻找答案。这个段落会有`p`标签上的颜色，而页面的剩余部分会遵循`body`标签的规则。
            </details>
            <details>
            <summary>
            <strong>**什么是样式表？**</strong>
            </summary>
            样式表是一个控制网页如何显示的文档。外部样式表会作为单独的文件，并被链接到HTML页面上。
            </details>
            <details>
            <summary>
            <strong>**CSS是什么？**</strong>
            </summary>
            CSS是一个控制网站上的内容如何显示的语言。它通过规则集（rule-set）来改变页面的外观。每个规则集都有一个选择器（selector），它会指定页面上的哪些元素会被影响，以及包含用来解释如何显示元素的规则。 每条规则由一个属性和属性值组成。

        这是一个规则集的例子，它让`h2`标签里的文本成为蓝色，并采用了草书：

        <pre>h2
        {
           color: blue;
           font-family: cursive;
        </pre>

        在这个例子中，`h2`是选择器，`color`和`font-family`是属性，而`blue`和`cursive`是对应属性的值。

        </details>
        </div>

        # 背景颜色

        -   在岩石表中找到让整个页面背景是蓝色的代码。
        -   改动代码，让页面成为不同的颜色。
        -   试着只改动这些段落的背景颜色。
      CSD U2 layout style bgcolor_2019: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>**代码如何起作用？**</strong>
        </summary>
        这是让页面背景变成蓝色的代码：

        <pre>body
        {
          background-color: lightblue;
        }</pre>

        -   `body`是一个_选择器_。它指定了哪些元素应该遵循花括号里的规则。在这里，body（正文）元素是整个页面。
        -   `background-color: lightblue;`是让整个页面变成淡蓝色的规则。
        -   `background-color`（背景-颜色）是_属性_。它解释了这条是什么规则。在这里，表示背景的颜色。
        -   `lightblue`是_值_。它解释了这条规则会被怎么应用，在这里，表示背景的淡蓝色。
            </details>
            <details>
            <summary>
            <strong>**我能在CSS中使用什么颜色？**</strong>
            </summary>
            CSS包括了大部分常用的颜色名字（red - 红，blue - 蓝， green - 绿，等等），还有很多其它不常用的。你能在<a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools
        -   HTML颜色名称</a>找到CSS颜色的完整列表。你还能用没有包括在这里的颜色，但需要用它们的RGB颜色。关于CSS中的颜色，可以在<a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools
        -   CSS正确的颜色值</a>查看更多信息。
            </details>
            <details>
            <summary>
            <strong>**`background-color`属性做了什么？**</strong></summary>
            `background-color`属性决定了一个元素的背景颜色。可以在<a href="http://www.w3schools.com/cssref/pr_background-color.asp">W3Schools
        -   CSS background-color 属性</a>查看关于这个属性的更多信息。
            </details>
            <details>
            <summary>
            <strong>**如果页面里的元素有着与body不同的背景颜色会怎样？**</strong></summary>
            你可以通过为`p`标签增加一个`background-color`规则来寻找答案。这个段落会有`p`标签上的颜色，而页面的剩余部分会遵循`body`标签的规则。
            </details>
            <details>
            <summary>
            <strong>**什么是样式表？**</strong>
            </summary>
            样式表是一个控制网页如何显示的文档。外部样式表会作为单独的文件，并被链接到HTML页面上。
            </details>
            <details>
            <summary>
            <strong>**CSS是什么？**</strong>
            </summary>
            CSS是一个控制网站上的内容如何显示的语言。它通过规则集（rule-set）来改变页面的外观。每个规则集都有一个选择器（selector），它会指定页面上的哪些元素会被影响，以及包含用来解释如何显示元素的规则。 每条规则由一个属性和属性值组成。

        这是一个规则集的例子，它让`h2`标签里的文本成为蓝色，并采用了草书：

        <pre>h2
        {
           color: blue;
           font-family: cursive;
        </pre>

        在这个例子中，`h2`是选择器，`color`和`font-family`是属性，而`blue`和`cursive`是对应属性的值。

        </details>
        </div>

        # 背景颜色

        -   在岩石表中找到让整个页面背景是蓝色的代码。
        -   改动代码，让页面成为不同的颜色。
        -   试着只改动这些段落的背景颜色。
      CSD U2 layout style body_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>**`body`选择器做什么？**</strong>
        </summary>
        由于网站的内容全都包含在`body` 标签中, body选择器给出网页上所有内容的样式。</details>
        <details>
        <summary>
        <strong>**`color`属性做什么？**</strong>
        </summary>
        `color`属性决定文本的颜色。如果那里没有文本，那么看起来就像无事发生。了解更多在<a href="http://www.w3schools.com/cssref/pr_text_color.asp" target="_new"> W3Schools - CSS color Property</a>，中文教程请搜索菜鸟教程。
        </details>
        <details>
        <summary>
        <strong>**`text-align`属性做什么？**</strong>
        </summary>
        `text-align`属性使文本左对齐，右对齐，或居中.了解更多在<a href="http://www.w3schools.com/cssref/pr_text_text-align.asp" target="_new">W3Schools - CSS text-align Property</a>
        </details>
        <details>
        <summary>
        <strong>**`text-decoration`属性做什么？**</strong>
        </summary>
        `text-decoration`属性会在文本的上面，下面，或中间划一道线.  了解更多在<a href="http://www.w3schools.com/cssref/pr_text_text-decoration.asp" target="_new">W3Schools - CSS text-decoration Property</a>
        </details>
        <details>
        <summary>
        <strong>**`font-family`属性做什么？**</strong>
        </summary>
        `font-family`属性改变文本的字体。这给出了对应使用字体的大致描述， 但在不同的浏览器中识别可能有差异。了解更多在<a href="http://www.w3schools.com/cssref/pr_font_font-family.asp" target="_new">W3chools - CSS font-family Property</a>
        </details>
        <details>
        <summary>
        <strong>**`font-size`属性做什么？**</strong>
        </summary>
        `font-size` 属性改变文本的大小。您可以使用通用术语，如“小”、“中”和“大”，也可以指定精确的大小(以像素为单位)，如“20px”。 了解更多在<a href="http://www.w3schools.com/cssref/pr_font_font-size.asp" target="_new">W3Schools - CSS font-size Property</a>
        </details>
        <details>
        <summary>
        <strong>**样式表是什么？**</strong>
        </summary>
        样式表是控制网页如何显示的文档。外部样式表是链接到HTML页面的独立文件。
        </details>
        <details>
        <summary>
        <strong>**CSS是什么？**</strong>
        </summary>

        CSS是一种决定网站上的内容如何显示的语言。它使用规则集来改变页面的样子。每个规则集都有一个选择器，他决定了页面上的哪些元素会受到影响，规则解释如何显示元素。每条规则都由一个属性和该属性的值组成。

        例子：这是一个将文本打上`h2`标签，字体颜色为蓝色，字体为cursive的规则集：

        <pre>h2 {
        color: blue;
        font-family: cursive;
        </pre>

        本例中，`h2`是选择器，`color`和`font-family`是属性，`blue`和`cursive`是这些属性的值。

        </details>
        </div>

        # Body 元素

        -   在样式表中找到`body`规则集。
        -   和同伴讨论若在`body`规则集中添加`text-align`，`color`或其他文本属性会发生什么。
        -   尝试其他属性来检验你的猜测。
      CSD U2 layout style body_2019: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>**`body`选择器做什么？**</strong>
        </summary>
        由于网站的内容全都包含在`body` 标签中, body选择器给出网页上所有内容的样式。</details>
        <details>
        <summary>
        <strong>**`color`属性做什么？**</strong>
        </summary>
        `color`属性决定文本的颜色。如果那里没有文本，那么看起来就像无事发生。了解更多在<a href="http://www.w3schools.com/cssref/pr_text_color.asp" target="_new"> W3Schools - CSS color Property</a>，中文教程请搜索菜鸟教程。
        </details>
        <details>
        <summary>
        <strong>**`text-align`属性做什么？**</strong>
        </summary>
        `text-align`属性使文本左对齐，右对齐，或居中.了解更多在<a href="http://www.w3schools.com/cssref/pr_text_text-align.asp" target="_new">W3Schools - CSS text-align Property</a>
        </details>
        <details>
        <summary>
        <strong>**`text-decoration`属性做什么？**</strong>
        </summary>
        `text-decoration`属性会在文本的上面，下面，或中间划一道线.  了解更多在<a href="http://www.w3schools.com/cssref/pr_text_text-decoration.asp" target="_new">W3Schools - CSS text-decoration Property</a>
        </details>
        <details>
        <summary>
        <strong>**`font-family`属性做什么？**</strong>
        </summary>
        `font-family`属性改变文本的字体。这给出了对应使用字体的大致描述， 但在不同的浏览器中识别可能有差异。了解更多在<a href="http://www.w3schools.com/cssref/pr_font_font-family.asp" target="_new">W3chools - CSS font-family Property</a>
        </details>
        <details>
        <summary>
        <strong>**`font-size`属性做什么？**</strong>
        </summary>
        `font-size` 属性改变文本的大小。您可以使用通用术语，如“小”、“中”和“大”，也可以指定精确的大小(以像素为单位)，如“20px”。 了解更多在<a href="http://www.w3schools.com/cssref/pr_font_font-size.asp" target="_new">W3Schools - CSS font-size Property</a>
        </details>
        <details>
        <summary>
        <strong>**样式表是什么？**</strong>
        </summary>
        样式表是控制网页如何显示的文档。外部样式表是链接到HTML页面的独立文件。
        </details>
        <details>
        <summary>
        <strong>**CSS是什么？**</strong>
        </summary>

        CSS是一种决定网站上的内容如何显示的语言。它使用规则集来改变页面的样子。每个规则集都有一个选择器，他决定了页面上的哪些元素会受到影响，规则解释如何显示元素。每条规则都由一个属性和该属性的值组成。

        例子：这是一个将文本打上`h2`标签，字体颜色为蓝色，字体为cursive的规则集：

        <pre>h2 {
        color: blue;
        font-family: cursive;
        </pre>

        本例中，`h2`是选择器，`color`和`font-family`是属性，`blue`和`cursive`是这些属性的值。

        </details>
        </div>

        # Body 元素

        -   在样式表中找到`body`规则集。
        -   和同伴讨论若在`body`规则集中添加`text-align`，`color`或其他文本属性会发生什么。
        -   尝试其他属性来检验你的猜测。
      CSD U2 layout style border_2018: |-
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>

        <summary>
        <strong>**我能在CSS里使用什么颜色？**</strong></summary>
        CSS包括了大部分常用的颜色名字（red - 红，blue - 蓝， green - 绿，等等），还有很多其它不常用的。你能在<a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools
        - HTML颜色名称</a>找到CSS颜色的完整列表。你还能用没有包括在这里的颜色，但需要用它们的RGB颜色。关于CSS中的颜色，可以在<a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools
        - CSS正确的颜色值</a>查看更多信息。
        </details>
        <details>
        <summary>
        <strong>**这些代码是如何起作用的？**</strong>
        </summary>
        这是实现图片边框的代码：

        <pre>img {
          border-color: saddlebrown;
          border-width: 4px;
          border-style: solid;
          border-radius: 10px;
        }</pre>

        -   `img`是一个_选择器_。它指定了哪些元素上会应用花括号里的规则，在这里，指定的是图片。
        -   `border-color:
            saddlebrown;`,`border-width: 4px;`,`border-style: solid;`，和`border-radius: 10px;`是制作边框的规则。
            </details>
            <details>
            <summary>
            <strong>**`border-style`（边框-样式）属性有什么用？**</strong>
            </summary>
            `border-style`属性决定了元素使用什么种类的边框（实线、点线，等等）。可以阅读<a href="http://www.w3schools.com/cssref/pr_border-style.asp">W3Schools - CSS border-style属性</a>了解更多。
            </details>
            <details>\
            <summary>
            <strong>**`border-radius`属性有什么用？**</strong>
            </summary>
            `border-radius`属性决定了元素角上的圆弧的半径。大一点的半径会形成大一点的，软一点的曲线。零半径意味着正常的直角。可以阅读<a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp">W3Schools
        -   CSS3 border-radius属性</a>了解更多。
            </details>
            <details>
            <summary>
            <strong>**`float`属性有什么用？**</strong>
            </summary>
            `float`属性会让元素"浮动"，意思是这个元素会往某个方向流动一点。如果`float`是`left`（左），那么元素会往左边浮动，并且它之后的元素会在它右边显示出来。如果`float`值是`right`（右），那么元素会往右边浮动，它之后的元素会在它左边显示出来。可以阅读<a href="http://www.w3schools.com/cssref/pr_class_float.asp">W3Schools - CSS float 属性</a>了解更多。
            </details>
            </div>

        # 边框

        -   在样式表中找到设置图片边框颜色和宽度的规则。
        -   改变边框的颜色和宽度。
        -   试试不同的边框样式。
        -   从`dotted`, `dashed`, `solid`, 和`double`中选择。
        -   将边框应用到另一种页面元素上，比如某个标题或段落。
      CSD U2 layout style border_2019: |-
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>

        <summary>
        <strong>**我能在CSS里使用什么颜色？**</strong></summary>
        CSS包括了大部分常用的颜色名字（red - 红，blue - 蓝， green - 绿，等等），还有很多其它不常用的。你能在<a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools
        - HTML颜色名称</a>找到CSS颜色的完整列表。你还能用没有包括在这里的颜色，但需要用它们的RGB颜色。关于CSS中的颜色，可以在<a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools
        - CSS正确的颜色值</a>查看更多信息。
        </details>
        <details>
        <summary>
        <strong>**这些代码是如何起作用的？**</strong>
        </summary>
        这是实现图片边框的代码：

        <pre>img {
          border-color: saddlebrown;
          border-width: 4px;
          border-style: solid;
          border-radius: 10px;
        }</pre>

        -   `img`是一个_选择器_。它指定了哪些元素上会应用花括号里的规则，在这里，指定的是图片。
        -   `border-color:
            saddlebrown;`,`border-width: 4px;`,`border-style: solid;`，和`border-radius: 10px;`是制作边框的规则。
            </details>
            <details>
            <summary>
            <strong>**`border-style`（边框-样式）属性有什么用？**</strong>
            </summary>
            `border-style`属性决定了元素使用什么种类的边框（实线、点线，等等）。可以阅读<a href="http://www.w3schools.com/cssref/pr_border-style.asp">W3Schools - CSS border-style属性</a>了解更多。
            </details>
            <details>\
            <summary>
            <strong>**`border-radius`属性有什么用？**</strong>
            </summary>
            `border-radius`属性决定了元素角上的圆弧的半径。大一点的半径会形成大一点的，软一点的曲线。零半径意味着正常的直角。可以阅读<a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp">W3Schools
        -   CSS3 border-radius属性</a>了解更多。
            </details>
            <details>
            <summary>
            <strong>**`float`属性有什么用？**</strong>
            </summary>
            `float`属性会让元素"浮动"，意思是这个元素会往某个方向流动一点。如果`float`是`left`（左），那么元素会往左边浮动，并且它之后的元素会在它右边显示出来。如果`float`值是`right`（右），那么元素会往右边浮动，它之后的元素会在它左边显示出来。可以阅读<a href="http://www.w3schools.com/cssref/pr_class_float.asp">W3Schools - CSS float 属性</a>了解更多。
            </details>
            </div>

        # 边框

        -   在样式表中找到设置图片边框颜色和宽度的规则。
        -   改变边框的颜色和宽度。
        -   试试不同的边框样式。
        -   从`dotted`, `dashed`, `solid`, 和`double`中选择。
        -   将边框应用到另一种页面元素上，比如某个标题或段落。
      CSD U2 layout style freeplay - OLD: |-
        # 客人网站\\r

        \\r
        在你的个人网站上试试一些新的CSS（样式表）属性。\\r
        \\r

        -   将你选择的样式加到网站中，确保至少有三种不同的新CSS属性。\\r
            \\r
            # 检查清单\\r
            \\r

        -   至少使用了三种CSS样式：\\r
            \\r

        -   `background-color`\\r

        -   `height`\\r

        -   `width`\\r

        -   \*
            `border-style`\\r

        -   `border-radius`\\r

        -   `border-width`\\r

        -   `float`\\r

        -   `margin`\\r
            \\r
            \\r
            如果你从列表中用了至少三种属性，你可以浏览一下其它的CSS属性了，并将它们加到你的关于我页面中。
      CSD U2 layout style margin: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>代码如何工作?</strong></summary>

        下面的这段代码定义了在图片四周留白的边距:

        <pre>img {
        \tmargin: 10px;
        }</pre>

        -   `img` 是 _selector_.  该元素应该遵循花括弧里面定义的规则，在这个例子中是图片。
        -   `margin: 10px;` 定义在图片四周空白边距为 10 个像素点.
            </details>
            <details>
            <summary><strong> `margin` 属性如何工作?</strong></summary>

        这里的 `margin` 作为这个元素的一个属性，决定了图片四周的边距大小。通常用于定义边距的大小单位是像素。你可以从 <a href="http://www.w3schools.com/cssref/pr_margin.asp">W3Schools - CSS margin Property</a> 学习‘margin’的更多信息。

        </details>
        <details>
        <summary><strong> `px` 代表什么 / 什么是像素?</strong></summary>

        像素, 缩写为 `px`, 是CSS里定义元素大小的单位.  它是屏幕上一个单一光点的大小.

        </details>
        </div>

        # Margin

        边距指定了一个元素周围应该有多少空间。

        -   在`img`规则集中找到`margin`属性。
        -   将边距改大点儿，然后和同伴讨论一下影响。
        -   改变另一个元素类型，并也给它加上边距属性。
      CSD U2 layout style margin_2018: |-
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>
        <summary>
        <strong>**这些代码如何起作用？**</strong>
        </summary>
        这是在图片周围产生一定宽度的空白的代码：

        <pre>img
        {
        \tmargin: 10px;
        }</pre>

        -   `img`是_选择器_ 。它指定了元素必须遵循花括号里的规则，在这里是图片。
        -   `margin: 10px;`是一条规则，它会在图片周围留出10像素的空间。
            </details>
            <details>
            <summary>
            <strong>**`margin`属性有什么用？**</strong>
            </summary>
            `margin`（边缘）属性决定了图片周围有多少空间。大多数情况下，需要用像素来定义边缘属性。阅读<a href="http://www.w3schools.com/cssref/pr_margin.asp">W3Schools
        -   CSS margin 属性</a>来了解更多。
            </details>
            <details>
            <summary>
            <strong>**`px`是什么意思？什么是像素？**</strong>
            </summary>
            Pixel（像素）的缩写是`px`，这是在CSS中丈量元素的单位。这是屏幕上的一个点的尺寸。
            </details>
            </div>
            # 边缘

        边缘指定了一个元素周围应该有多少空间。

        -   在`img`规则集中找到`margin`属性。
        -   将边缘改大点，然后和同伴讨论一下影响。
        -   改变另一个元素类型，并也给它加上边缘属性。
      CSD U2 layout style margin_2019: |-
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>
        <summary>
        <strong>**这些代码如何起作用？**</strong>
        </summary>
        这是在图片周围产生一定宽度的空白的代码：

        <pre>img
        {
        \tmargin: 10px;
        }</pre>

        -   `img`是_选择器_ 。它指定了元素必须遵循花括号里的规则，在这里是图片。
        -   `margin: 10px;`是一条规则，它会在图片周围留出10像素的空间。
            </details>
            <details>
            <summary>
            <strong>**`margin`属性有什么用？**</strong>
            </summary>
            `margin`（边缘）属性决定了图片周围有多少空间。大多数情况下，需要用像素来定义边缘属性。阅读<a href="http://www.w3schools.com/cssref/pr_margin.asp">W3Schools
        -   CSS margin 属性</a>来了解更多。
            </details>
            <details>
            <summary>
            <strong>**`px`是什么意思？什么是像素？**</strong>
            </summary>
            Pixel（像素）的缩写是`px`，这是在CSS中丈量元素的单位。这是屏幕上的一个点的尺寸。
            </details>
            </div>
            # 边缘

        边缘指定了一个元素周围应该有多少空间。

        -   在`img`规则集中找到`margin`属性。
        -   将边缘改大点，然后和同伴讨论一下影响。
        -   改变另一个元素类型，并也给它加上边缘属性。
      CSD U2 layout style sample_2018: |-
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>
        <strong>**`body`选择器做了什么？**</strong>
        </summary>
        因为网页的所有内容都在`body`（正文）标签里，正文选择器能为网页中所有内容应用样式规则。
        </details>
        <details>
        <summary>
        <strong>**`border-style`属性有什么用？ **</strong>
        </summary>
        `border-style`属性决定了元素使用什么种类的边框（实线、点线，等等）。可以阅读<a href="http://www.w3schools.com/cssref/pr_border-style.asp">W3Schools
        - CSS border-style属性</a>了解更多。
        </details>
        <details>
        <summary>
        <strong>**`border-radius`属性有什么用？**</strong>
        </summary>
        `border-radius`属性决定了元素角上的圆弧的半径。大一点的半径会形成大一点的，软一点的曲线。零半径意味着正常的直角。可以阅读<a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp">W3Schools - CSS3 border-radius属性</a>了解更多。
        </details>
        <details>
        <summary>
        <strong>**`float`属性有什么用？**</strong>
        </summary>
        `float`属性会让元素"浮动"，意思是这个元素会往某个方向流动一点。如果`float`是`left`（左），那么元素会往左边浮动，并且它之后的元素会在它右边显示出来。如果`float`值是`right`（右），那么元素会往右边浮动，它之后的元素会在它左边显示出来。可以阅读<a href="http://www.w3schools.com/cssref/pr_class_float.asp">W3Schools - CSS float 属性</a>了解更多。
        </details>
        </div>

        # 布局和样式

        -   浏览一下下面网页的新样式。
        -   打开样式表。
        -   和你的伙伴讨论一下，你认为CSS代码中的哪部分让页面显示得不同。
        -   如何让整个页面变蓝？
        -   如何让图片放在所有内容的左边？
        -   什么让图片的角是圆的？

        在下一关中，你会更改并添加这个页面中的新样式。
      CSD U2 layout style sample_2019: |-
        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>
        <strong>**`body`选择器做了什么？**</strong>
        </summary>
        因为网页的所有内容都在`body`（正文）标签里，正文选择器能为网页中所有内容应用样式规则。
        </details>
        <details>
        <summary>
        <strong>**`border-style`属性有什么用？ **</strong>
        </summary>
        `border-style`属性决定了元素使用什么种类的边框（实线、点线，等等）。可以阅读<a href="http://www.w3schools.com/cssref/pr_border-style.asp">W3Schools
        - CSS border-style属性</a>了解更多。
        </details>
        <details>
        <summary>
        <strong>**`border-radius`属性有什么用？**</strong>
        </summary>
        `border-radius`属性决定了元素角上的圆弧的半径。大一点的半径会形成大一点的，软一点的曲线。零半径意味着正常的直角。可以阅读<a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp">W3Schools - CSS3 border-radius属性</a>了解更多。
        </details>
        <details>
        <summary>
        <strong>**`float`属性有什么用？**</strong>
        </summary>
        `float`属性会让元素"浮动"，意思是这个元素会往某个方向流动一点。如果`float`是`left`（左），那么元素会往左边浮动，并且它之后的元素会在它右边显示出来。如果`float`值是`right`（右），那么元素会往右边浮动，它之后的元素会在它左边显示出来。可以阅读<a href="http://www.w3schools.com/cssref/pr_class_float.asp">W3Schools - CSS float 属性</a>了解更多。
        </details>
        </div>

        # 布局和样式

        -   浏览一下下面网页的新样式。
        -   打开样式表。
        -   和你的伙伴讨论一下，你认为CSS代码中的哪部分让页面显示得不同。
        -   如何让整个页面变蓝？
        -   如何让图片放在所有内容的左边？
        -   什么让图片的角是圆的？

        在下一关中，你会更改并添加这个页面中的新样式。
      CSD U2 link demo: |-
        # 制作多个网页的网站

        <div
        style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px" markdown="1">
        <details>
        <summary>**什么是超链接？**</summary>
        超链接能连接到本站点或其它站点的网页上。你需要通过增加连接到各个网页的超链接来制作网站的导航。你可以**用`<a>`元素来给网页增加超链接**。需要在超链接中现实的文本在开/闭的标签中。`<a>`标签有一个`href`属性，这是放置链接到哪个页面的地方。本网站页面的地址就是这个页面的文件路径。<br> <br>

        例如，连接到独一无二的别墅页面上，你需要在`<body>` 元素里增加如下的代码。 <br><br>

        <pre>
        &lt;a href=”houses.html”&gt; 独一无二的别墅 &lt;/a&gt;
        </pre>

        </details>
        <details>
        <summary>**怎样增加一个超链接？**</summary>
        你可以**用`<a>`元素来给网页增加超链接**。需要在超链接中现实的文本在开/闭的标签中。`<a>`标签有一个`href`属性，这是放置链接到哪个页面的地方。本网站页面的地址就是这个页面的文件路径。 <br> <br>

        例如，连接到独一无二的别墅页面上，你需要在`<body>` 元素里增加如下的代码。 <br><br>

        <pre>
        &lt;a href=”houses.html”&gt; 独一无二的别墅&lt;/a&gt;
        </pre>

        </details>
        </div>

        一个网站会包括一个以上的页面，它们应该相互之间连接起来。这是一个项目的例子，它有多个页面，并用超链接连起来了。（当你点击有蓝色下划线的单词会到达另一个页面）。

        # 这样做

        -   用检查器来看看在index.html创建超链接的代码。
        -   和你的伙伴讨论一下，这个代码是如何工作的。
        -   点击左边文件列表的recipe.html页面。在这个页面顶端加一个超链接回到index.html页面。
      CSD U2 link demo_2018: |-
        # 制作多个网页的网站

        <div
        style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px" markdown="1">
        <details>

        <summary>
        **什么是超链接？**
        </summary>

        超链接能连接到本站点或其它站点的网页上。你需要通过增加连接到各个网页的超链接来制作网站的导航。你可以**用`<a>`元素来给网页增加超链接**。需要在超链接中现实的文本在开/闭的标签中。`<a>`标签有一个`href`属性，这是放置链接到哪个页面的地方。本网站页面的地址就是这个页面的文件路径。<br> <br>

        例如，连接到独一无二的别墅页面上，你需要在`<body>` 元素里增加如下的代码。 <br><br>

        <pre>
        &lt;a href=”houses.html”&gt; 独一无二的别墅 &lt;/a&gt;
        </pre>

        </details>
        <details>
        <summary>
        <strong>怎样增加一个超链接？</strong>
        </summary>
        你可以<strong>用`<a>`元素来给网页增加超链接</strong>。需要在超链接中现实的文本在开/闭的标签中。`<a>`标签有一个`href`属性，这是放置链接到哪个页面的地方。本网站页面的地址就是这个页面的文件路径。 <br> <br>

        例如，连接到独一无二的别墅页面上，你需要在`<body>` 元素里增加如下的代码。 <br><br>

        <pre>
        &lt;a href=”houses.html”&gt; 独一无二的别墅&lt;/a&gt;
        </pre>

        </details>
        </div>

        一个网站会包括一个以上的页面，它们应该相互之间连接起来。这是一个项目的例子，它有多个页面，并用超链接连起来了。（当你点击有蓝色下划线的单词会到达另一个页面）。

        # 这样做

        -   用检查器来看看在index.html创建超链接的代码。
        -   和你的伙伴讨论一下，这个代码是如何工作的。
        -   点击左边文件列表的recipe.html页面。在这个页面顶端加一个超链接回到index.html页面。
      CSD U2 link demo_2019: |-
        # 制作多个网页的网站

        <div
        style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px" markdown="1">
        <details>

        <summary>
        **什么是超链接？**
        </summary>

        超链接能连接到本站点或其它站点的网页上。你需要通过增加连接到各个网页的超链接来制作网站的导航。你可以**用`<a>`元素来给网页增加超链接**。需要在超链接中现实的文本在开/闭的标签中。`<a>`标签有一个`href`属性，这是放置链接到哪个页面的地方。本网站页面的地址就是这个页面的文件路径。<br> <br>

        例如，连接到独一无二的别墅页面上，你需要在`<body>` 元素里增加如下的代码。 <br><br>

        <pre>
        &lt;a href=”houses.html”&gt; 独一无二的别墅 &lt;/a&gt;
        </pre>

        </details>
        <details>
        <summary>
        <strong>怎样增加一个超链接？</strong>
        </summary>
        你可以<strong>用`<a>`元素来给网页增加超链接</strong>。需要在超链接中现实的文本在开/闭的标签中。`<a>`标签有一个`href`属性，这是放置链接到哪个页面的地方。本网站页面的地址就是这个页面的文件路径。 <br> <br>

        例如，连接到独一无二的别墅页面上，你需要在`<body>` 元素里增加如下的代码。 <br><br>

        <pre>
        &lt;a href=”houses.html”&gt; 独一无二的别墅&lt;/a&gt;
        </pre>

        </details>
        </div>

        一个网站会包括一个以上的页面，它们应该相互之间连接起来。这是一个项目的例子，它有多个页面，并用超链接连起来了。（当你点击有蓝色下划线的单词会到达另一个页面）。

        # 这样做

        -   用检查器来看看在index.html创建超链接的代码。
        -   和你的伙伴讨论一下，这个代码是如何工作的。
        -   点击左边文件列表的recipe.html页面。在这个页面顶端加一个超链接回到index.html页面。
      CSD U2 link pages: |-
        # 为你的网站创建一个新页面。\\r

        \\r
        这是你以前的项目。你需要添加另一个页面。你的页面可以是排行榜，配方，或者其它你想加的东西。\\r
        \\r

        # 这样做\\r

        \*
        通过点击 \!\[](\<<https://images.code.org/9b9f9f78962ef77664333d1b0f762ff1-image-1493252448756.19.38>
        PM.png>)添加一个新页面。新页面会出现在左边工作区中的文件列表里。\\r

        -   通过右击它或者选择"重命名"来给它重新命名。**确保这个文件名是唯一的，有描述性的，并以".html"结尾**.\\r
        -   在新页面中加入HTML。它应该包括：\\r
        -   一个列表\\r
        -   一个标头\\r
            \\r
      CSD U2 lists intro: |-
        # 列表

        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>

        **什么是列表的两种类型？**

        </summary>

        HTML中有两种类型的列表，有序的和无序的列表。

        </details>

        <details>
        <summary>

        **什么是无序的列表？**

        </summary>
        无序列表就是一组符号列表。
        <br /><br />
        无序列表元素的标签是`<ul> </ul>`。这是<strong>U</strong>nordered <strong>L</strong>ist（无序列表）的缩写。列表中的每个条目都通过元素`<li> </li>`来标记。这是<strong>L</strong>ist <strong>I</strong>tem（列表条目）的缩写。列表条目元素是子元素，这意味着它会在父元素，无序列表里。
        </details>

        <details>
        <summary>

        **我该如何增加一个无序列表？**

        </summary>
        制作一个无序列表需要两步：制作列表和增加列表条目。先写上无序列表标签 `<ul> </ul>`来增加无序列表。接着将你的列表条目加到无序列表标签的**里面**。用标签`<li>
        </li>` 来增加列表条目，将内容都加到这对标签里。
        <br /><br />
        给你的`<li> </li>`标签加上缩进会有助于表达这些条目是在`<ul> </ul>`标签里面的。
        </details>

        <details>
        <summary>

        **什么是有序列表？**

        </summary>
        有序列表是一组数字符号的列表。
        <br /><br />
        有序列表元素的标签是`<ol> </ol>`。这是<strong>O</strong>rdered <strong>L</strong>ist（有序列表）的缩写。列表中的每个条目都通过元素`<li> </li>`来标记。这是<strong>L</strong>ist <strong>I</strong>tem（列表条目）的缩写。列表条目元素是子元素，这意味着它会在父元素，有序列表里。
        </details>

        <details>
        <summary>**我该如何增加一个有序列表？**</summary>
        制作一个有序列表需要两步：制作列表和增加列表条目。先写上有序列表标签 `<ol> </ol>`来增加有序列表。接着将你的列表条目加到有序列表标签的**里面**。用标签`<li>
        </li>` 来增加列表条目，将内容都加到这对标签里。
        <br /><br/>
        给你的`<li> </li>`标签加上缩进会有助于表达这些条目是在`<ol> </ol>` 标签里面的。
        </details>
        </div>

        你也能用HTML来给页面增加不同类型的列表。这个配方页面包括两种类型的列表，一个有序的（数字的），一个无序的（符号的）。

        # 这样做

        -   用检查器来看看这两种不同类型的列表
        -   确保你和你的伙伴都对这不同类型的标签是什么达成一致。
        -   修复代码，使得每个列表中的第二个条目能正确显示。
      CSD U2 lists intro_2018: |-
        # Lists

        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>
        <strong>什么是列表的两种类型？</strong>
        </summary>

        HTML中有两种类型的列表，有序的和无序的列表。

        </details>

        <details>
        <summary>
        <strong>什么是无序的列表？</strong>
        </summary>
        无序列表就是一组符号列表。
        <br /><br />
        无序列表元素的标签是`<ul> </ul>`。这是<strong>U</strong>nordered <strong>L</strong>ist（无序列表）的缩写。列表中的每个条目都通过元素`<li> </li>`来标记。这是<strong>L</strong>ist <strong>I</strong>tem（列表条目）的缩写。列表条目元素是子元素，这意味着它会在父元素，无序列表里。
        </details>

        <details>
        <summary>
        <strong>我该如何增加一个无序列表？</strong>
        </summary>
        制作一个无序列表需要两步：制作列表和增加列表条目。先写上无序列表标签 `<ul> </ul>`来增加无序列表。接着将你的列表条目加到无序列表标签的**里面**。用标签`<li>
        </li>` 来增加列表条目，将内容都加到这对标签里。
        <br /><br />
        给你的`<li> </li>`标签加上缩进会有助于表达这些条目是在`<ul> </ul>`标签里面的。
        </details>

        <details>
        <summary>
        <strong>什么是有序列表？</strong>
        </summary>
        有序列表是一组数字符号的列表。
        <br /><br />
        有序列表元素的标签是`<ol> </ol>`。这是<strong>O</strong>rdered <strong>L</strong>ist（有序列表）的缩写。列表中的每个条目都通过元素`<li> </li>`来标记。这是<strong>L</strong>ist <strong>I</strong>tem（列表条目）的缩写。列表条目元素是子元素，这意味着它会在父元素，有序列表里。
        </details>

        <details>
        <summary>
        <strong>我该如何增加一个有序列表？</strong>
        </summary>
        制作一个有序列表需要两步：制作列表和增加列表条目。先写上有序列表标签 `<ol> </ol>`来增加有序列表。接着将你的列表条目加到有序列表标签的**里面**。用标签`<li>
        </li>` 来增加列表条目，将内容都加到这对标签里。
        <br /><br/>
        给你的`<li> </li>`标签加上缩进会有助于表达这些条目是在`<ol> </ol>` 标签里面的。
        </details>
        </div>

        你也能用HTML来给页面增加不同类型的列表。这个配方页面包括两种类型的列表，一个有序的（数字的），一个无序的（符号的）。

        # 这样做

        -   用检查器来看看这两种不同类型的列表
        -   确保你和你的伙伴都对这不同类型的标签是什么达成一致。
        -   修复代码，使得每个列表中的第二个条目能正确显示。
      CSD U2 lists intro_2019: |-
        # Lists

        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>
        <strong>什么是列表的两种类型？</strong>
        </summary>

        HTML中有两种类型的列表，有序的和无序的列表。

        </details>

        <details>
        <summary>
        <strong>什么是无序的列表？</strong>
        </summary>
        无序列表就是一组符号列表。
        <br /><br />
        无序列表元素的标签是`<ul> </ul>`。这是<strong>U</strong>nordered <strong>L</strong>ist（无序列表）的缩写。列表中的每个条目都通过元素`<li> </li>`来标记。这是<strong>L</strong>ist <strong>I</strong>tem（列表条目）的缩写。列表条目元素是子元素，这意味着它会在父元素，无序列表里。
        </details>

        <details>
        <summary>
        <strong>我该如何增加一个无序列表？</strong>
        </summary>
        制作一个无序列表需要两步：制作列表和增加列表条目。先写上无序列表标签 `<ul> </ul>`来增加无序列表。接着将你的列表条目加到无序列表标签的**里面**。用标签`<li>
        </li>` 来增加列表条目，将内容都加到这对标签里。
        <br /><br />
        给你的`<li> </li>`标签加上缩进会有助于表达这些条目是在`<ul> </ul>`标签里面的。
        </details>

        <details>
        <summary>
        <strong>什么是有序列表？</strong>
        </summary>
        有序列表是一组数字符号的列表。
        <br /><br />
        有序列表元素的标签是`<ol> </ol>`。这是<strong>O</strong>rdered <strong>L</strong>ist（有序列表）的缩写。列表中的每个条目都通过元素`<li> </li>`来标记。这是<strong>L</strong>ist <strong>I</strong>tem（列表条目）的缩写。列表条目元素是子元素，这意味着它会在父元素，有序列表里。
        </details>

        <details>
        <summary>
        <strong>我该如何增加一个有序列表？</strong>
        </summary>
        制作一个有序列表需要两步：制作列表和增加列表条目。先写上有序列表标签 `<ol> </ol>`来增加有序列表。接着将你的列表条目加到有序列表标签的**里面**。用标签`<li>
        </li>` 来增加列表条目，将内容都加到这对标签里。
        <br /><br/>
        给你的`<li> </li>`标签加上缩进会有助于表达这些条目是在`<ol> </ol>` 标签里面的。
        </details>
        </div>

        你也能用HTML来给页面增加不同类型的列表。这个配方页面包括两种类型的列表，一个有序的（数字的），一个无序的（符号的）。

        # 这样做

        -   用检查器来看看这两种不同类型的列表
        -   确保你和你的伙伴都对这不同类型的标签是什么达成一致。
        -   修复代码，使得每个列表中的第二个条目能正确显示。
      CSD U2 navigation: |-
        <div style="float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>

        **什么是超链接？**

        </summary>
        超链接能够连接到本站网页或是外面的网页。要增加到本站网页的导航，你需要增加一些能够链接到本站网页的超链接。你可以**用`<a>`元素来给你的网页增加超链接**。你想在超链接中显示的文本，要放在超链接的开、闭标签之间。`<a>`元素有一个`href`属性能够定位到链接到的位置。本站网页的位置只是到那个页面的文件地址。<br> <br>

        例如，链接到独特的房子页面，需要将下面的代码增加到`<body>`元素里。<br><br>

        <pre>
        &lt;a
        href=”houses.html”&gt; 独特的房子 &lt;/a&gt;
        </pre>

        </details>
        <details>
        <summary>

        **如何增加一个超链接？**

        </summary>
        你可以**用`<a>`元素来给你的网页增加超链接**。你想在超链接中显示的文本，要放在超链接的开、闭标签之间。`<a>`元素有一个`href`属性能够定位到链接到的位置。本站网页的位置只是到那个页面的文件地址。<br> <br>

        例如，链接到独特的房子页面，需要将下面的代码增加到`<body>`元素里。 <br><br>

        <pre>
        &lt;a href=”houses.html”&gt; 独特的房子 &lt;/a&gt;
        </pre>

        </details>
        </div>

        # 创建导航栏

        这是你以前的项目。你要将两个页面通过页面顶部的**导航栏**连接在一起。网站通常会有一个所有页面都有的，相同的导航栏。这样就能在网站中的不同页面间跳转了。<a href="https://studio.code.org/projects/weblab/2KO4FIjN89QPeYnTG_NzLIjroaG8daOY3jRl5uHm1Co/"
        target="_new">这个页面</a>有个导航栏的例子。

        # 这样做

        -   在你的首页(index.html)的顶部增加两个超链接，一个指向列表页面，一个指向首页。
        -   _虽然有个指向自己的页面看起来很奇怪，但是这让导航栏在每个页面上都是完全一样的，从而减少困惑。_
        -   将导航栏代码复制到列表页面的顶部。
        -   在预览区域点击它们来测试链接。
      CSD U2 navigation_2018: |-
        <div style="float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>
        <strong>**什么是超链接？**</strong>
        </summary>

        超链接能够连接到本站网页或是外面的网页。要增加到本站网页的导航，你需要增加一些能够链接到本站网页的超链接。你可以**用`<a>`元素来给你的网页增加超链接**。你想在超链接中显示的文本，要放在超链接的开、闭标签之间。`<a>`元素有一个`href`属性能够定位到链接到的位置。本站网页的位置只是到那个页面的文件地址。<br> <br>

        例如，链接到独特的房子页面，需要将下面的代码增加到`<body>`元素里。<br><br>

        <pre>
        &lt;a
        href=”houses.html”&gt; 独特的房子 &lt;/a&gt;
        </pre>

        </details>
        <details>
        <summary>

        <strong>如何增加一个超链接？</strong>

        </summary>
        你可以**用`<a>`元素来给你的网页增加超链接**。你想在超链接中显示的文本，要放在超链接的开、闭标签之间。`<a>`元素有一个`href`属性能够定位到链接到的位置。本站网页的位置只是到那个页面的文件地址。<br> <br>

        例如，链接到独特的房子页面，需要将下面的代码增加到`<body>`元素里。 <br><br>

        <pre>
        &lt;a href=”houses.html”&gt; 独特的房子 &lt;/a&gt;
        </pre>

        </details>
        </div>

        # 创建导航栏

        这是你以前的项目。你要将两个页面通过页面顶部的**导航栏**连接在一起。网站通常会有一个所有页面都有的，相同的导航栏。这样就能在网站中的不同页面间跳转了。<a href="https://studio.code.org/projects/weblab/2KO4FIjN89QPeYnTG_NzLIjroaG8daOY3jRl5uHm1Co/"
        target="_new">这个页面</a>有个导航栏的例子。

        # 这样做

        -   在你的首页(index.html)的顶部增加两个超链接，一个指向列表页面，一个指向首页。
        -   _虽然有个指向自己的页面看起来很奇怪，但是这让导航栏在每个页面上都是完全一样的，从而减少困惑。_
        -   将导航栏代码复制到列表页面的顶部。
        -   在预览区域点击它们来测试链接。
      CSD U2 navigation_2019: |-
        <div style="float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"
        markdown="1">
        <details>
        <summary>
        <strong>**什么是超链接？**</strong>
        </summary>

        超链接能够连接到本站网页或是外面的网页。要增加到本站网页的导航，你需要增加一些能够链接到本站网页的超链接。你可以**用`<a>`元素来给你的网页增加超链接**。你想在超链接中显示的文本，要放在超链接的开、闭标签之间。`<a>`元素有一个`href`属性能够定位到链接到的位置。本站网页的位置只是到那个页面的文件地址。<br> <br>

        例如，链接到独特的房子页面，需要将下面的代码增加到`<body>`元素里。<br><br>

        <pre>
        &lt;a
        href=”houses.html”&gt; 独特的房子 &lt;/a&gt;
        </pre>

        </details>
        <details>
        <summary>

        <strong>如何增加一个超链接？</strong>

        </summary>
        你可以**用`<a>`元素来给你的网页增加超链接**。你想在超链接中显示的文本，要放在超链接的开、闭标签之间。`<a>`元素有一个`href`属性能够定位到链接到的位置。本站网页的位置只是到那个页面的文件地址。<br> <br>

        例如，链接到独特的房子页面，需要将下面的代码增加到`<body>`元素里。 <br><br>

        <pre>
        &lt;a href=”houses.html”&gt; 独特的房子 &lt;/a&gt;
        </pre>

        </details>
        </div>

        # 创建导航栏

        这是你以前的项目。你要将两个页面通过页面顶部的**导航栏**连接在一起。网站通常会有一个所有页面都有的，相同的导航栏。这样就能在网站中的不同页面间跳转了。<a href="https://studio.code.org/projects/weblab/2KO4FIjN89QPeYnTG_NzLIjroaG8daOY3jRl5uHm1Co/"
        target="_new">这个页面</a>有个导航栏的例子。

        # 这样做

        -   在你的首页(index.html)的顶部增加两个超链接，一个指向列表页面，一个指向首页。
        -   _虽然有个指向自己的页面看起来很奇怪，但是这让导航栏在每个页面上都是完全一样的，从而减少困惑。_
        -   将导航栏代码复制到列表页面的顶部。
        -   在预览区域点击它们来测试链接。
      CSD U2 new page: |-
        # 为你的网站创建一个新页面。\\r

        \\r
        这是你以前的项目。你需要添加另一个页面。你的页面可以是排行榜，配方，或者其它你想加的东西。\\r
        \\r

        # 这样做\\r

        \*
        通过点击 \!\[](\<<https://images.code.org/9b9f9f78962ef77664333d1b0f762ff1-image-1493252448756.19.38>
        PM.png>)添加一个新页面。新页面会出现在左边工作区中的文件列表里。\\r

        -   通过右击它或者选择"重命名"来给它重新命名。**确保这个文件名是唯一的，有描述性的，并以".html"结尾**.\\r
        -   在新页面中加入HTML。它应该包括：\\r
        -   一个列表\\r
        -   一个标头\\r
            \\r
      CSD U2 new page_2018: |-
        # 为你的网站创建一个新页面。\\r

        \\r
        这是你以前的项目。你需要添加另一个页面。你的页面可以是排行榜，配方，或者其它你想加的东西。\\r
        \\r

        # 这样做\\r

        \*
        通过点击 \!\[](\<<https://images.code.org/9b9f9f78962ef77664333d1b0f762ff1-image-1493252448756.19.38>
        PM.png>)添加一个新页面。新页面会出现在左边工作区中的文件列表里。\\r

        -   通过右击它或者选择"重命名"来给它重新命名。**确保这个文件名是唯一的，有描述性的，并以".html"结尾**.\\r
        -   在新页面中加入HTML。它应该包括：\\r
        -   一个列表\\r
        -   一个标头\\r
            \\r
      CSD U2 new page_2019: |-
        # 为你的网站创建一个新页面。\\r

        \\r
        这是你以前的项目。你需要添加另一个页面。你的页面可以是排行榜，配方，或者其它你想加的东西。\\r
        \\r

        # 这样做\\r

        \*
        通过点击 \!\[](\<<https://images.code.org/9b9f9f78962ef77664333d1b0f762ff1-image-1493252448756.19.38>
        PM.png>)添加一个新页面。新页面会出现在左边工作区中的文件列表里。\\r

        -   通过右击它或者选择"重命名"来给它重新命名。**确保这个文件名是唯一的，有描述性的，并以".html"结尾**.\\r
        -   在新页面中加入HTML。它应该包括：\\r
        -   一个列表\\r
        -   一个标头\\r
            \\r
      CSD U2 ordered list: "# 有序列表\n\n<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n<summary>\n\n**什么是列表的两种类型？**\n\n</summary>\n\nHTML中有两种类型的列表，有序的和无序的列表。\n\n</details>\n<details>\n<summary>**什么是有序列表？**</summary>\n有序列表是一组数字符号的列表。<br /><br />\n有序列表元素的标签是`<ol>`。这是<strong>O</strong>rdered <strong>L</strong>ist（有序列表）的缩写。\n列表中的每个条目都通过元素`<li>`来标记。这是<strong>L</strong>ist <strong>I</strong>tem（列表条目）的缩写。列表条目元素是子元素，这意味着它会在父元素，有序列表(`<ol>`)里。\n\n</details>\n\n<details>\n<summary>\n\n**该如何增加一个有序列表？**\n\n</summary>\n制作一个有序列表需要两步：制作列表和增加列表条目。先写上有序列表标签 `<ol> </ol>`来增加有序列表。接着将你的列表条目加到有序列表标签的**里面**。用标签`<li>\n</li>` 来增加列表条目，将内容都加到这对标签里。\n<br /><br />\n给你的`<li>`标签加上缩进会有助于表达这些条目是在`<ol> ` 标签里面的。\n\n</details>\n\n<details>\n<summary>\n\n**给我看看实际的代码**\n\n</summary>\n<table\nborder=\"1\">\n<tr>\n<td>例子</td>\n<td>结果</td>\n</tr>\n<tr>\n<td><pre>\n&lt;ol&gt; <br> &lt;li&gt;步骤1 &lt;/li&gt; <br> &lt;li&gt;步骤2 &lt;/li&gt;\n<br> &lt;li&gt;步骤3 &lt;/li&gt; <br> &lt;/ol&gt; </pre></td>\n<td><img\nsrc=\"https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04\nPM.png\" style=\"width:200px\"></td>\n</tr>\n</table>\n\n</details>\n</div>\n\n这个页面应该包含一个有序列表，但它少写了列表标签。\n\n# 这样做\n\n-   用`<ol>`和`<li>` 标签来将内容变为有序列表的结构，并看起来和下面的一样。\n\n_提示: 在你的代码里不能有数字。_ \n\n![](<https://images.code.org/b3186e83c3e3bd2680a1a300e5abd126-image-1493238064706.17.03 PM.png>)"
      CSD U2 ordered list_2018: "# 有序列表\n\n<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n<summary>\n\n**什么是列表的两种类型？**\n\n</summary>\n\nHTML中有两种类型的列表，有序的和无序的列表。\n\n</details>\n<details>\n<summary>**什么是有序列表？**</summary>\n有序列表是一组数字符号的列表。<br /><br />\n有序列表元素的标签是`<ol>`。这是<strong>O</strong>rdered <strong>L</strong>ist（有序列表）的缩写。\n列表中的每个条目都通过元素`<li>`来标记。这是<strong>L</strong>ist <strong>I</strong>tem（列表条目）的缩写。列表条目元素是子元素，这意味着它会在父元素，有序列表(`<ol>`)里。\n\n</details>\n\n<details>\n<summary>\n\n**该如何增加一个有序列表？**\n\n</summary>\n制作一个有序列表需要两步：制作列表和增加列表条目。先写上有序列表标签 `<ol> </ol>`来增加有序列表。接着将你的列表条目加到有序列表标签的**里面**。用标签`<li>\n</li>` 来增加列表条目，将内容都加到这对标签里。\n<br /><br />\n给你的`<li>`标签加上缩进会有助于表达这些条目是在`<ol> ` 标签里面的。\n\n</details>\n\n<details>\n<summary>\n\n**给我看看实际的代码**\n\n</summary>\n<table\nborder=\"1\">\n<tr>\n<td>例子</td>\n<td>结果</td>\n</tr>\n<tr>\n<td><pre>\n&lt;ol&gt; <br> &lt;li&gt;步骤1 &lt;/li&gt; <br> &lt;li&gt;步骤2 &lt;/li&gt;\n<br> &lt;li&gt;步骤3 &lt;/li&gt; <br> &lt;/ol&gt; </pre></td>\n<td><img\nsrc=\"https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04\nPM.png\" style=\"width:200px\"></td>\n</tr>\n</table>\n\n</details>\n</div>\n\n这个页面应该包含一个有序列表，但它少写了列表标签。\n\n# 这样做\n\n-   用`<ol>`和`<li>` 标签来将内容变为有序列表的结构，并看起来和下面的一样。\n\n_提示: 在你的代码里不能有数字。_ \n\n![](<https://images.code.org/b3186e83c3e3bd2680a1a300e5abd126-image-1493238064706.17.03 PM.png>)"
      CSD U2 ordered list_2019: "# 有序列表\n\n<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n<summary>\n\n**什么是列表的两种类型？**\n\n</summary>\n\nHTML中有两种类型的列表，有序的和无序的列表。\n\n</details>\n<details>\n<summary>**什么是有序列表？**</summary>\n有序列表是一组数字符号的列表。<br /><br />\n有序列表元素的标签是`<ol>`。这是<strong>O</strong>rdered <strong>L</strong>ist（有序列表）的缩写。\n列表中的每个条目都通过元素`<li>`来标记。这是<strong>L</strong>ist <strong>I</strong>tem（列表条目）的缩写。列表条目元素是子元素，这意味着它会在父元素，有序列表(`<ol>`)里。\n\n</details>\n\n<details>\n<summary>\n\n**该如何增加一个有序列表？**\n\n</summary>\n制作一个有序列表需要两步：制作列表和增加列表条目。先写上有序列表标签 `<ol> </ol>`来增加有序列表。接着将你的列表条目加到有序列表标签的**里面**。用标签`<li>\n</li>` 来增加列表条目，将内容都加到这对标签里。\n<br /><br />\n给你的`<li>`标签加上缩进会有助于表达这些条目是在`<ol> ` 标签里面的。\n\n</details>\n\n<details>\n<summary>\n\n**给我看看实际的代码**\n\n</summary>\n<table\nborder=\"1\">\n<tr>\n<td>例子</td>\n<td>结果</td>\n</tr>\n<tr>\n<td><pre>\n&lt;ol&gt; <br> &lt;li&gt;步骤1 &lt;/li&gt; <br> &lt;li&gt;步骤2 &lt;/li&gt;\n<br> &lt;li&gt;步骤3 &lt;/li&gt; <br> &lt;/ol&gt; </pre></td>\n<td><img\nsrc=\"https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04\nPM.png\" style=\"width:200px\"></td>\n</tr>\n</table>\n\n</details>\n</div>\n\n这个页面应该包含一个有序列表，但它少写了列表标签。\n\n# 这样做\n\n-   用`<ol>`和`<li>` 标签来将内容变为有序列表的结构，并看起来和下面的一样。\n\n_提示: 在你的代码里不能有数字。_ \n\n![](<https://images.code.org/b3186e83c3e3bd2680a1a300e5abd126-image-1493238064706.17.03 PM.png>)"
      CSD U2 project review: |-
        # 复查你的项目\\r

        \\r
        你快要准备好发布自己的项目了，但在此之前，你最好在检查一次是否完成了项目的所有要求。\\r
        \\r

        # 这样做\\r

        \*
        检查一下，你是否愿意在你的网站上共享所有信息。\\r

        -   检查是否所有图片的属性都正确，你是否有权利将它们放到你的网站上。\\r
        -   检查是否你的网站包括了所有rubric项目的内容。\\r
        -   用注释和空白符增加网站的可读性。\\r
        -   请你的伙伴来帮忙找找网站可能的问题。\\r
      CSD U2 project review_2018: |-
        # 复查你的项目\\r

        \\r
        你快要准备好发布自己的项目了，但在此之前，你最好在检查一次是否完成了项目的所有要求。\\r
        \\r

        # 这样做\\r

        \*
        检查一下，你是否愿意在你的网站上共享所有信息。\\r

        -   检查是否所有图片的属性都正确，你是否有权利将它们放到你的网站上。\\r
        -   检查是否你的网站包括了所有rubric项目的内容。\\r
        -   用注释和空白符增加网站的可读性。\\r
        -   请你的伙伴来帮忙找找网站可能的问题。\\r
      CSD U2 project review_2019: |-
        # 复查你的项目\\r

        \\r
        你快要准备好发布自己的项目了，但在此之前，你最好在检查一次是否完成了项目的所有要求。\\r
        \\r

        # 这样做\\r

        \*
        检查一下，你是否愿意在你的网站上共享所有信息。\\r

        -   检查是否所有图片的属性都正确，你是否有权利将它们放到你的网站上。\\r
        -   检查是否你的网站包括了所有rubric项目的内容。\\r
        -   用注释和空白符增加网站的可读性。\\r
        -   请你的伙伴来帮忙找找网站可能的问题。\\r
      CSD U2 project share: |-
        # 分享你的项目\\r

        \\r
        到了把你的项目分享给全世界的时候了！\\r
        \\r

        # 这样做\\r

        -   点击页面最上面的
            \!\[](\<<https://images.code.org/26bcf1645e18ac064cf0631fb5ca023c-image-1493744000091.52.27>
            AM.png>)按钮\\r
        -   复制获得的链接，并发给你想要分享的人。\\r
            \\r
      CSD U2 project share_2018: |-
        # 分享你的项目\\r

        \\r
        到了把你的项目分享给全世界的时候了！\\r
        \\r

        # 这样做\\r

        -   点击页面最上面的
            \!\[](\<<https://images.code.org/26bcf1645e18ac064cf0631fb5ca023c-image-1493744000091.52.27>
            AM.png>)按钮\\r
        -   复制获得的链接，并发给你想要分享的人。\\r
            \\r
      CSD U2 project share_2019: |-
        # 分享你的项目\\r

        \\r
        到了把你的项目分享给全世界的时候了！\\r
        \\r

        # 这样做\\r

        -   点击页面最上面的
            \!\[](\<<https://images.code.org/26bcf1645e18ac064cf0631fb5ca023c-image-1493744000091.52.27>
            AM.png>)按钮\\r
        -   复制获得的链接，并发给你想要分享的人。\\r
            \\r
      CSD U2 text style decoration_2018: "<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n<summary>\n\n**这些代码是如何起作用的？**\n\n</summary>\n这是让`h1`元素有下划线的代码：\n\n<pre>h1 {\n  text-decoration:\nunderline;\n}</pre>\n\n-   `h1`是_选择器_。它指定了哪些元素要使用花括号里的规则。这里的`p`表示段落（paragraph）。\n-   `text-decoration: underline;`是一条规则，它能让`h1`标签里的文本有下划线。\n-   `text-decoration`是_属性_。它解释了这是什么规则，在这里，表示用什么修饰。\n-   `underline`是_值_。它解释了这条规则如何应用，在这里，表示用下划线。\n    </details>\n    <details>\n    <summary>\n\n**文本修饰都有什么可用的值？**\n\n</summary>\n可选的项目有\"underline\", \"overline\", 和\"line-through\"。你可以阅读<a href=\"http://www.w3schools.com/cssref/pr_text_text-decoration.asp\">W3Schools\n- CSS text-decoration 属性</a>来了解更多。\n</details>\n<details>\n<summary>**为什么我要所有这些符号？**</summary>\n这些标点符号，例如花括号`{}`，冒号`:`，以及分号`;`，帮助计算机理解样式表中的规则。花括号将某个选择器的规则都保持在一起。每条规则应该用分毫来结束，并在属性和值之间用冒号来分隔。\n</details>\n<details>\n<summary>\n\n**什么是样式表？**\n\n</summary>\n样式表是一个控制网页要如何显示的文档。 外部格式表是连接到HTML网页的单独文档。 \n</details>\n<details>\n<summary>\n\n**什么是CSS？**\n\n</summary>\nCSS是控制网页上内容出现格式的语言。 它通过规则集来改变网页的外观。 每个规则集都有一个选择器，它指定在哪个元素上起作用，而规则解释了如何显示这个元素。每个规则都含有一个属性及它的取值。 \n\n这里是一个规则集的例子。它让`h2` 标签中的文体变蓝并变成草书：\n\n<pre>h2\n{\n   color: blue;\n   font-family: cursive;\n</pre>\n\n在这个例子里， `h2`是个选择器，`color`（颜色）和字体族是属性，`blue` （蓝色）和`cursive`（草书）是这两个属性的值。 \n\n</details>\n</div>\n# 下划线\n\n-   找到样式表中，让h1标签有下划线的代码。\n-   改动文本修饰，选择一个你喜欢的值。\n-   从\"underline\"，\"overline\"，和\"line-through\"中选一个。\n-   为段落或h3标签添加一个文本修饰规则。"
      CSD U2 text style decoration_2019: "<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n<summary>\n\n**这些代码是如何起作用的？**\n\n</summary>\n这是让`h1`元素有下划线的代码：\n\n<pre>h1 {\n  text-decoration:\nunderline;\n}</pre>\n\n-   `h1`是_选择器_。它指定了哪些元素要使用花括号里的规则。这里的`p`表示段落（paragraph）。\n-   `text-decoration: underline;`是一条规则，它能让`h1`标签里的文本有下划线。\n-   `text-decoration`是_属性_。它解释了这是什么规则，在这里，表示用什么修饰。\n-   `underline`是_值_。它解释了这条规则如何应用，在这里，表示用下划线。\n    </details>\n    <details>\n    <summary>\n\n**文本修饰都有什么可用的值？**\n\n</summary>\n可选的项目有\"underline\", \"overline\", 和\"line-through\"。你可以阅读<a href=\"http://www.w3schools.com/cssref/pr_text_text-decoration.asp\">W3Schools\n- CSS text-decoration 属性</a>来了解更多。\n</details>\n<details>\n<summary>**为什么我要所有这些符号？**</summary>\n这些标点符号，例如花括号`{}`，冒号`:`，以及分号`;`，帮助计算机理解样式表中的规则。花括号将某个选择器的规则都保持在一起。每条规则应该用分毫来结束，并在属性和值之间用冒号来分隔。\n</details>\n<details>\n<summary>\n\n**什么是样式表？**\n\n</summary>\n样式表是一个控制网页要如何显示的文档。 外部格式表是连接到HTML网页的单独文档。 \n</details>\n<details>\n<summary>\n\n**什么是CSS？**\n\n</summary>\nCSS是控制网页上内容出现格式的语言。 它通过规则集来改变网页的外观。 每个规则集都有一个选择器，它指定在哪个元素上起作用，而规则解释了如何显示这个元素。每个规则都含有一个属性及它的取值。 \n\n这里是一个规则集的例子。它让`h2` 标签中的文体变蓝并变成草书：\n\n<pre>h2\n{\n   color: blue;\n   font-family: cursive;\n</pre>\n\n在这个例子里， `h2`是个选择器，`color`（颜色）和字体族是属性，`blue` （蓝色）和`cursive`（草书）是这两个属性的值。 \n\n</details>\n</div>\n# 下划线\n\n-   找到样式表中，让h1标签有下划线的代码。\n-   改动文本修饰，选择一个你喜欢的值。\n-   从\"underline\"，\"overline\"，和\"line-through\"中选一个。\n-   为段落或h3标签添加一个文本修饰规则。"
      CSD U2 text style font family_2018: "<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n\n<summary>\n<strong>这些代码是如何起作用的？</strong>\n</summary>\n这是控制段落字体的代码：\n\n<pre>p {\n  font-family:\ncursive;\n}</pre>\n\n-   `p`是_选择器_。它指定了什么元素会采用花括号里的规则。`p`的意思是段落（paragraph）。\n-   `font-family: cursive;`是一条规则，它让`p`标签里的文本采用某种字体。\n-   `font-family`是_属性_。它解释了这条规则是关于什么的，这条是关于字体的。\n-   `cursive`是_值_。它解释了规则是如何被应用的，在这里，会让文本成为草书。\n    </details>\n    <details>\n\n<summary>\n<strong>有哪些可用的字体族？</strong>\n</summary>\n\n你可以从\"serif\"，\"sans-serif\"，\"cursive\"，\"fantasy\"和\"monospace\"中选择。也可以从<a href=\"http://www.w3schools.com/cssref/css_websafe_fonts.asp\">W3Schools\n\n-   CSS 网页安全字体组合</a>里选一种字体。\n    </details>\n    <details>\n\n<summary>\n<strong>为什么我要所有这些符号？</strong>\n</summary>\n\n这些标点符号，例如花括号`{}`，冒号`:`，以及分号`;`，帮助计算机理解样式表中的规则。花括号将某个选择器的规则都保持在一起。每条规则应该用分毫来结束，并在属性和值之间用冒号来分隔。\n\n</details>\n<details>\n\n<summary>\n<strong>什么是样式表？</strong>\n</summary>\n\n样式表是一个控制网页要如何显示的文档。 外部格式表是连接到HTML网页的单独文档。 \n\n</details>\n<details>\n\n<summary>\n<strong>什么是CSS？</strong>\n</summary>\n\nCSS是控制网页上内容出现格式的语言。 它通过规则集来改变网页的外观。 每个规则集都有一个选择器，它指定在哪个元素上起作用，而规则解释了如何显示这个元素。每个规则都含有一个属性及它的取值。 \n\n这里是一个规则集的例子。它让`h2` 标签中的文体变蓝并变成草书：\n\n<pre>h2\n{\n   color: blue;\n   font-family: cursive;\n</pre>\n\n在这个例子里， `h2`是个选择器，`color`（颜色）和字体族是属性，`blue` （蓝色）和`cursive`（草书）是这两个属性的值。 \n\n</details>\n</div>\n\n# 改变字体\n\n-   在样式表中找到决定段落标签样式的CSS规则集。\n-   选择一种最喜欢的字体族，并改变原来的值。\n-   从\"serif\"，\"sans-serif\"，\"cursive\"，\"fantasy\"和\"monospace\"中选择\n-   为h1或h3标签增加一条字体族规则。"
      CSD U2 text style font family_2019: "<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n\n<summary>\n<strong>这些代码是如何起作用的？</strong>\n</summary>\n这是控制段落字体的代码：\n\n<pre>p {\n  font-family:\ncursive;\n}</pre>\n\n-   `p`是_选择器_。它指定了什么元素会采用花括号里的规则。`p`的意思是段落（paragraph）。\n-   `font-family: cursive;`是一条规则，它让`p`标签里的文本采用某种字体。\n-   `font-family`是_属性_。它解释了这条规则是关于什么的，这条是关于字体的。\n-   `cursive`是_值_。它解释了规则是如何被应用的，在这里，会让文本成为草书。\n    </details>\n    <details>\n\n<summary>\n<strong>有哪些可用的字体族？</strong>\n</summary>\n\n你可以从\"serif\"，\"sans-serif\"，\"cursive\"，\"fantasy\"和\"monospace\"中选择。也可以从<a href=\"http://www.w3schools.com/cssref/css_websafe_fonts.asp\">W3Schools\n\n-   CSS 网页安全字体组合</a>里选一种字体。\n    </details>\n    <details>\n\n<summary>\n<strong>为什么我要所有这些符号？</strong>\n</summary>\n\n这些标点符号，例如花括号`{}`，冒号`:`，以及分号`;`，帮助计算机理解样式表中的规则。花括号将某个选择器的规则都保持在一起。每条规则应该用分毫来结束，并在属性和值之间用冒号来分隔。\n\n</details>\n<details>\n\n<summary>\n<strong>什么是样式表？</strong>\n</summary>\n\n样式表是一个控制网页要如何显示的文档。 外部格式表是连接到HTML网页的单独文档。 \n\n</details>\n<details>\n\n<summary>\n<strong>什么是CSS？</strong>\n</summary>\n\nCSS是控制网页上内容出现格式的语言。 它通过规则集来改变网页的外观。 每个规则集都有一个选择器，它指定在哪个元素上起作用，而规则解释了如何显示这个元素。每个规则都含有一个属性及它的取值。 \n\n这里是一个规则集的例子。它让`h2` 标签中的文体变蓝并变成草书：\n\n<pre>h2\n{\n   color: blue;\n   font-family: cursive;\n</pre>\n\n在这个例子里， `h2`是个选择器，`color`（颜色）和字体族是属性，`blue` （蓝色）和`cursive`（草书）是这两个属性的值。 \n\n</details>\n</div>\n\n# 改变字体\n\n-   在样式表中找到决定段落标签样式的CSS规则集。\n-   选择一种最喜欢的字体族，并改变原来的值。\n-   从\"serif\"，\"sans-serif\"，\"cursive\"，\"fantasy\"和\"monospace\"中选择\n-   为h1或h3标签增加一条字体族规则。"
      CSD U2 text style freeplay - OLD: |-
        # 添加样式\\r

        \\r
        你可以给个人网站的文本添加样式了！\\r
        \\r

        -   打开你的样式表，添加选择的样式到页面中。确保使用了至少三种不同的CSS属性。\\r
            \\r
            # 检查清单\\r
            \\r

        -   至少用了三种下面的样式属性：\\r

        -   `font-size`\\r

        -   `font-family`\\r

        -   `color`\\r

        -   `text-decoration`\\r

        -   `text-align`\\r
            \\r
            如果你用了清单中的至少3中属性，你可以浏览一下别的文本属性，并加到你的项目中。
      CSD U2 text style h1_2018: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n<summary>\n\n<strong>我能在CSS里使用什么颜色？</strong>\n\n</summary>\nCSS包括了大部分常用的颜色名字（red - 红，blue - 蓝， green - 绿，等等），还有很多其它不常用的。你能在<a href=\"http://www.w3schools.com/colors/colors_names.asp\">W3Schools\n- HTML颜色名称</a>找到CSS颜色的完整列表。你还能用没有包括在这里的颜色，但需要用它们的RGB颜色。关于CSS中的颜色，可以在<a href=\"http://www.w3schools.com/cssref/css_colors_legal.asp\">W3Schools\n- CSS正确的颜色值</a>查看更多信息。\n</details><details>\n<summary>\n\n<strong>这些代码是如何起作用的？</strong>\n\n</summary>\n这是让`h1`标题变红的代码：\n\n<pre>h1 {\n  color: red;\n}</pre>\n\n-   `h1`是_选择器_。它指定了哪些元素上会应用花括号里的规则。\n-   `color: red;`是让`h1`标签里的文本变红的规则。\n-   `color` 是_属性_。它解释了这是关于什么的规则，在这里，表示文本颜色。\n-   `red`是_值_。它解释了规则如何被应用，在这里，会让文本变红。\n    </details>\n    <details>\n    <summary>\n\n<strong>为什么我要所有这些符号？</strong>\n\n</summary>\n这些标点符号，例如花括号`{}`，冒号`:`，以及分号`;`，帮助计算机理解样式表中的规则。花括号将某个选择器的规则都保持在一起。每条规则应该用分毫来结束，并在属性和值之间用冒号来分隔。\n</details>\n<details>\n<summary>\n\n<strong>什么是样式表？</strong>\n\n</summary>\n样式表是一个控制网页要如何显示的文档。 外部格式表是连接到HTML网页的单独文档。 \n</details>\n<details>\n<summary>\n\n<strong>什么是CSS？</strong>\n\n</summary>\nCSS是控制网页上内容出现格式的语言。 它通过规则集来改变网页的外观。 每个规则集都有一个选择器，它指定在哪个元素上起作用，而规则解释了如何显示这个元素。每个规则都含有一个属性及它的取值。 \n\n这里是一个规则集的例子。它让`h2` 标签中的文体变蓝并变成草书：\n\n<pre>h2\n{\n   color: blue;\n   font-family: cursive;\n}\n</pre>\n\n在这个例子里， `h2`是个选择器，`color`（颜色）和字体族是属性，`blue` （蓝色）和`cursive`（草书）是这两个属性的值。 \n\n</details>\n</div>\n# CSS和文本颜色\n\n这个HTML文件使用了一个样式表（\"style.css\"）来给页面一个特定的样式。这个样式表包含了关于每个HTML元素应该看起来是什么样子的信息。\n\n-   找到样式表（点击文件列表中的\"sytle.css\"）中让h1变红的代码。\n-   将h1的颜色从`red`改变成另一种颜色。"
      CSD U2 text style h1_2019: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n<summary>\n\n<strong>我能在CSS里使用什么颜色？</strong>\n\n</summary>\nCSS包括了大部分常用的颜色名字（red - 红，blue - 蓝， green - 绿，等等），还有很多其它不常用的。你能在<a href=\"http://www.w3schools.com/colors/colors_names.asp\">W3Schools\n- HTML颜色名称</a>找到CSS颜色的完整列表。你还能用没有包括在这里的颜色，但需要用它们的RGB颜色。关于CSS中的颜色，可以在<a href=\"http://www.w3schools.com/cssref/css_colors_legal.asp\">W3Schools\n- CSS正确的颜色值</a>查看更多信息。\n</details><details>\n<summary>\n\n<strong>这些代码是如何起作用的？</strong>\n\n</summary>\n这是让`h1`标题变红的代码：\n\n<pre>h1 {\n  color: red;\n}</pre>\n\n-   `h1`是_选择器_。它指定了哪些元素上会应用花括号里的规则。\n-   `color: red;`是让`h1`标签里的文本变红的规则。\n-   `color` 是_属性_。它解释了这是关于什么的规则，在这里，表示文本颜色。\n-   `red`是_值_。它解释了规则如何被应用，在这里，会让文本变红。\n    </details>\n    <details>\n    <summary>\n\n<strong>为什么我要所有这些符号？</strong>\n\n</summary>\n这些标点符号，例如花括号`{}`，冒号`:`，以及分号`;`，帮助计算机理解样式表中的规则。花括号将某个选择器的规则都保持在一起。每条规则应该用分毫来结束，并在属性和值之间用冒号来分隔。\n</details>\n<details>\n<summary>\n\n<strong>什么是样式表？</strong>\n\n</summary>\n样式表是一个控制网页要如何显示的文档。 外部格式表是连接到HTML网页的单独文档。 \n</details>\n<details>\n<summary>\n\n<strong>什么是CSS？</strong>\n\n</summary>\nCSS是控制网页上内容出现格式的语言。 它通过规则集来改变网页的外观。 每个规则集都有一个选择器，它指定在哪个元素上起作用，而规则解释了如何显示这个元素。每个规则都含有一个属性及它的取值。 \n\n这里是一个规则集的例子。它让`h2` 标签中的文体变蓝并变成草书：\n\n<pre>h2\n{\n   color: blue;\n   font-family: cursive;\n}\n</pre>\n\n在这个例子里， `h2`是个选择器，`color`（颜色）和字体族是属性，`blue` （蓝色）和`cursive`（草书）是这两个属性的值。 \n\n</details>\n</div>\n# CSS和文本颜色\n\n这个HTML文件使用了一个样式表（\"style.css\"）来给页面一个特定的样式。这个样式表包含了关于每个HTML元素应该看起来是什么样子的信息。\n\n-   找到样式表（点击文件列表中的\"sytle.css\"）中让h1变红的代码。\n-   将h1的颜色从`red`改变成另一种颜色。"
      CSD U2 text style h3: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n\n<summary>\n\n**我能在CSS里使用什么颜色？**\n\n</summary>\nCSS包括了大部分常用的颜色名字（red - 红，blue - 蓝， green - 绿，等等），还有很多其它不常用的。你能在<a href=\"http://www.w3schools.com/colors/colors_names.asp\">W3Schools\n- HTML颜色名称</a>找到CSS颜色的完整列表。你还能用没有包括在这里的颜色，但需要用它们的RGB颜色。关于CSS中的颜色，可以在<a href=\"http://www.w3schools.com/cssref/css_colors_legal.asp\">W3Schools\n- CSS正确的颜色值</a>查看更多信息。\n</details>\n<details>\n<summary>\n\n**这些代码是如何起作用的？**\n\n</summary>\n这是让`h1`标签中文本变红的代码：\n\n<pre>h1 {\n  color: red;\n}</pre>\n\n-   `h1`是_选择器_。它指定了哪些元素要使用花括号里的规则。\n-   `color: red;`是让`h1`标签里的文本变红的规则。\n-   `color` 是_属性_。它解释了这是关于什么的规则，在这里，表示文本颜色。\n-   `red`是_值_。它解释了规则如何被应用，在这里，会让文本变红。\n    </details>\n    <details>\n    <summary>\n\n**如何创建一个新的规则集（rule-set）？**\n\n</summary>\n为了创建一个新的规则集，你需要一个选择器和一组规则。选择器是你想让规则应用到的标签的名字。这些规则是一组属性和值对。你需要特别注意规则集中的符号。看看下面的例子，学习一下代码看起来应该是什么样子。你需要为页面做一些改动。\n\n<pre>h1 {\n  color: red;\n}</pre>\n\n\\*\n`h1`是_选择器_。它指定了哪些元素上会应用花括号里的规则。\n\n-   `color: red;`是让`h1`标签里的文本变红的规则。\n-   `color` 是_属性_。它解释了这是关于什么的规则，在这里，表示文本颜色。\n-   `red`是_值_。它解释了规则如何被应用，在这里，会让文本变红。\n    </details>\n    <details>\n    <summary>\n\n**为什么我要所有这些符号？**\n\n</summary>\n这些标点符号，例如花括号`{}`，冒号`:`，以及分号`;`，帮助计算机理解样式表中的规则。花括号将某个选择器的规则都保持在一起。每条规则应该用分毫来结束，并在属性和值之间用冒号来分隔。\n</details>\n<details>\n<summary>\n\n**什么是样式表？**\n\n</summary>\n样式表是一个控制网页要如何显示的文档。 外部格式表是连接到HTML网页的单独文档。 \n</details>\n<details>\n<summary>\n\n**什么是CSS？**\n\n</summary>\nCSS是控制网页上内容出现格式的语言。 它通过规则集来改变网页的外观。 每个规则集都有一个选择器，它指定在哪个元素上起作用，而规则解释了如何显示这个元素。每个规则都含有一个属性及它的取值。 \n\n这里是一个规则集的例子。它让`h2` 标签中的文体变蓝并变成草书：\n\n<pre>h2\n{\n   color: blue;\n   font-family: cursive;\n</pre>\n\n在这个例子里， `h2`是个选择器，`color`（颜色）和字体族是属性，`blue` （蓝色）和`cursive`（草书）是这两个属性的值。 \n\n</details>\n</div>\n# 制作一个新的CSS规则集\n\n为某个标签给定的一组规则的代码叫做_规则集_。你能通过复制样式表中的`h1`规则集来创建一个新的规则集。\n\n-   在样式表中找到决定h1标签的规则集。\n-   用同样的规律，写一个新的CSS规则集来决定h3标签的样式。\n-   为h3标签添加一个不一样的颜色。"
      CSD U2 text style h3_2018: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n\n<summary>\n<strong>我能在CSS里使用什么颜色？</strong>\n</summary>\nCSS包括了大部分常用的颜色名字（red - 红，blue - 蓝， green - 绿，等等），还有很多其它不常用的。你能在<a href=\"http://www.w3schools.com/colors/colors_names.asp\">W3Schools\n- HTML颜色名称</a>找到CSS颜色的完整列表。你还能用没有包括在这里的颜色，但需要用它们的RGB颜色。关于CSS中的颜色，可以在<a href=\"http://www.w3schools.com/cssref/css_colors_legal.asp\">W3Schools\n- CSS正确的颜色值</a>查看更多信息。\n</details>\n<details>\n<summary>\n<strong>这些代码是如何起作用的？</strong>\n</summary>\n这是让`h1`标签中文本变红的代码：\n\n<pre>h1 {\n  color: red;\n}</pre>\n\n-   `h1`是_选择器_。它指定了哪些元素要使用花括号里的规则。\n-   `color: red;`是让`h1`标签里的文本变红的规则。\n-   `color` 是_属性_。它解释了这是关于什么的规则，在这里，表示文本颜色。\n-   `red`是_值_。它解释了规则如何被应用，在这里，会让文本变红。\n    </details>\n    <details>\n    <summary>\n    <strong>如何创建一个新的规则集（rule-set）？</strong>\n    </summary>\n    为了创建一个新的规则集，你需要一个选择器和一组规则。选择器是你想让规则应用到的标签的名字。这些规则是一组属性和值对。你需要特别注意规则集中的符号。看看下面的例子，学习一下代码看起来应该是什么样子。你需要为页面做一些改动。\n\n<pre>h1 {\n  color: red;\n}</pre>\n\n-   `h1`是_选择器_。它指定了哪些元素上会应用花括号里的规则。\n-   `color: red;`是让`h1`标签里的文本变红的规则。\n-   `color` 是_属性_。它解释了这是关于什么的规则，在这里，表示文本颜色。\n-   `red`是_值_。它解释了规则如何被应用，在这里，会让文本变红。\n    </details>\n    <details>\n    <summary>\n    <strong>为什么我要所有这些符号？</strong>\n    </summary>\n    这些标点符号，例如花括号`{}`，冒号`:`，以及分号`;`，帮助计算机理解样式表中的规则。花括号将某个选择器的规则都保持在一起。每条规则应该用分毫来结束，并在属性和值之间用冒号来分隔。\n    </details>\n    <details>\n    <summary>\n    <strong>什么是样式表？</strong>\n    </summary>\n    样式表是一个控制网页要如何显示的文档。 外部格式表是连接到HTML网页的单独文档。 \n    </details>\n    <details>\n    <summary>\n    <strong>什么是CSS？</strong>\n\n</summary>\nCSS是控制网页上内容出现格式的语言。 它通过规则集来改变网页的外观。 每个规则集都有一个选择器，它指定在哪个元素上起作用，而规则解释了如何显示这个元素。每个规则都含有一个属性及它的取值。 \n\n这里是一个规则集的例子。它让`h2` 标签中的文体变蓝并变成草书：\n\n<pre>h2\n{\n   color: blue;\n   font-family: cursive;\n</pre>\n\n在这个例子里， `h2`是个选择器，`color`（颜色）和字体族是属性，`blue` （蓝色）和`cursive`（草书）是这两个属性的值。 \n\n</details>\n</div>\n# 制作一个新的CSS规则集\n\n为某个标签给定的一组规则的代码叫做_规则集_。你能通过复制样式表中的`h1`规则集来创建一个新的规则集。\n\n-   在样式表中找到决定h1标签的规则集。\n-   用同样的规律，写一个新的CSS规则集来决定h3标签的样式。\n-   为h3标签添加一个不一样的颜色。"
      CSD U2 text style h3_2019: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n\n<summary>\n<strong>我能在CSS里使用什么颜色？</strong>\n</summary>\nCSS包括了大部分常用的颜色名字（red - 红，blue - 蓝， green - 绿，等等），还有很多其它不常用的。你能在<a href=\"http://www.w3schools.com/colors/colors_names.asp\">W3Schools\n- HTML颜色名称</a>找到CSS颜色的完整列表。你还能用没有包括在这里的颜色，但需要用它们的RGB颜色。关于CSS中的颜色，可以在<a href=\"http://www.w3schools.com/cssref/css_colors_legal.asp\">W3Schools\n- CSS正确的颜色值</a>查看更多信息。\n</details>\n<details>\n<summary>\n<strong>这些代码是如何起作用的？</strong>\n</summary>\n这是让`h1`标签中文本变红的代码：\n\n<pre>h1 {\n  color: red;\n}</pre>\n\n-   `h1`是_选择器_。它指定了哪些元素要使用花括号里的规则。\n-   `color: red;`是让`h1`标签里的文本变红的规则。\n-   `color` 是_属性_。它解释了这是关于什么的规则，在这里，表示文本颜色。\n-   `red`是_值_。它解释了规则如何被应用，在这里，会让文本变红。\n    </details>\n    <details>\n    <summary>\n    <strong>如何创建一个新的规则集（rule-set）？</strong>\n    </summary>\n    为了创建一个新的规则集，你需要一个选择器和一组规则。选择器是你想让规则应用到的标签的名字。这些规则是一组属性和值对。你需要特别注意规则集中的符号。看看下面的例子，学习一下代码看起来应该是什么样子。你需要为页面做一些改动。\n\n<pre>h1 {\n  color: red;\n}</pre>\n\n-   `h1`是_选择器_。它指定了哪些元素上会应用花括号里的规则。\n-   `color: red;`是让`h1`标签里的文本变红的规则。\n-   `color` 是_属性_。它解释了这是关于什么的规则，在这里，表示文本颜色。\n-   `red`是_值_。它解释了规则如何被应用，在这里，会让文本变红。\n    </details>\n    <details>\n    <summary>\n    <strong>为什么我要所有这些符号？</strong>\n    </summary>\n    这些标点符号，例如花括号`{}`，冒号`:`，以及分号`;`，帮助计算机理解样式表中的规则。花括号将某个选择器的规则都保持在一起。每条规则应该用分毫来结束，并在属性和值之间用冒号来分隔。\n    </details>\n    <details>\n    <summary>\n    <strong>什么是样式表？</strong>\n    </summary>\n    样式表是一个控制网页要如何显示的文档。 外部格式表是连接到HTML网页的单独文档。 \n    </details>\n    <details>\n    <summary>\n    <strong>什么是CSS？</strong>\n\n</summary>\nCSS是控制网页上内容出现格式的语言。 它通过规则集来改变网页的外观。 每个规则集都有一个选择器，它指定在哪个元素上起作用，而规则解释了如何显示这个元素。每个规则都含有一个属性及它的取值。 \n\n这里是一个规则集的例子。它让`h2` 标签中的文体变蓝并变成草书：\n\n<pre>h2\n{\n   color: blue;\n   font-family: cursive;\n</pre>\n\n在这个例子里， `h2`是个选择器，`color`（颜色）和字体族是属性，`blue` （蓝色）和`cursive`（草书）是这两个属性的值。 \n\n</details>\n</div>\n# 制作一个新的CSS规则集\n\n为某个标签给定的一组规则的代码叫做_规则集_。你能通过复制样式表中的`h1`规则集来创建一个新的规则集。\n\n-   在样式表中找到决定h1标签的规则集。\n-   用同样的规律，写一个新的CSS规则集来决定h3标签的样式。\n-   为h3标签添加一个不一样的颜色。"
      CSD U2 text style size: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n\n<summary>\n\n**这些代码是如何起作用的？**\n\n</summary>\n这是控制段落文字大小的代码：\n\n<pre>p {\n  font-size:\n14px;\n}</pre>\n\n-   `p`是_选择器_。它指定了什么元素会采用花括号里的规则。`p`的意思是段落（paragraph）。\n-   `font-size: 14px;`是一条规则，它让`p`标签里的文本是一定的大小。\n-   `font-size`是_属性_。它解释了这条规则是关于什么的，这条是关于文本大小的。\n-   `14px`是_值_。它解释了规则是如何被应用的，在这里，会让文本为14像素大。\n    </details>\n    <details>\n    <summary>\n\n**`px`是什么意思？什么是像素？**\n\n</summary>\nPixel（像素）的缩写是`px`，这是在CSS中丈量元素的单位。这是屏幕上的一个点的尺寸。\n</details>\n<details>\n<summary>\n\n**为什么我要所有这些符号？**\n\n</summary>\n这些标点符号，例如花括号`{}`，冒号`:`，以及分号`;`，帮助计算机理解样式表中的规则。花括号将某个选择器的规则都保持在一起。每条规则应该用分毫来结束，并在属性和值之间用冒号来分隔。\n</details>\n<details>\n<summary>\n\n**什么是样式表？**\n\n</summary>\n样式表是一个控制网页要如何显示的文档。 外部格式表是连接到HTML网页的单独文档。 \n</details>\n<details>\n<summary>\n\n**什么是CSS？**\n\n</summary>\nCSS是控制网页上内容出现格式的语言。 它通过规则集来改变网页的外观。 每个规则集都有一个选择器，它指定在哪个元素上起作用，而规则解释了如何显示这个元素。每个规则都含有一个属性及它的取值。 \n\n这里是一个规则集的例子。它让`h2` 标签中的文体变蓝并变成草书：\n\n<pre>h2\n{\n   color: blue;\n   font-family: cursive;\n</pre>\n\n在这个例子里， `h2`是个选择器，`color`（颜色）和字体族是属性，`blue` （蓝色）和`cursive`（草书）是这两个属性的值。 \n\n</details>\n</div>\n\n# 改变字体大小\n\n除了颜色，你能用其它属性控制别的样式。\n\n-   在样式表中找到决定段落样式的规则集.\n-   将段落的文本大小改得更大一些。\n-   在h3标签的规则集中添加一条规则，来让文本变大或变小。"
      CSD U2 text style size_2018: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n<summary>\n<strong>这些代码是如何起作用的？</strong>\n</summary>\n这是控制段落文字大小的代码：\n\n<pre>p {\n  font-size:\n14px;\n}</pre>\n\n-   `p`是_选择器_。它指定了什么元素会采用花括号里的规则。`p`的意思是段落（paragraph）。\n-   `font-size: 14px;`是一条规则，它让`p`标签里的文本是一定的大小。\n-   `font-size`是_属性_。它解释了这条规则是关于什么的，这条是关于文本大小的。\n-   `14px`是_值_。它解释了规则是如何被应用的，在这里，会让文本为14像素大。\n    </details>\n    <details>\n    <summary>\n    <strong>`px`是什么意思？什么是像素？</strong>\n    </summary>\n    Pixel（像素）的缩写是`px`，这是在CSS中丈量元素的单位。这是屏幕上的一个点的尺寸。\n    </details>\n    <details>\n    <summary>\n    <strong>为什么我要所有这些符号？</strong>\n    </summary>\n    这些标点符号，例如花括号`{}`，冒号`:`，以及分号`;`，帮助计算机理解样式表中的规则。花括号将某个选择器的规则都保持在一起。每条规则应该用分毫来结束，并在属性和值之间用冒号来分隔。\n    </details>\n    <details>\n    <summary>\n    <strong>什么是样式表？</strong>\n    </summary>\n    样式表是一个控制网页要如何显示的文档。 外部格式表是连接到HTML网页的单独文档。 \n    </details>\n    <details>\n    <summary>\n    <strong>什么是CSS？</strong>\n    </summary>\n    CSS是控制网页上内容出现格式的语言。 它通过规则集来改变网页的外观。 每个规则集都有一个选择器，它指定在哪个元素上起作用，而规则解释了如何显示这个元素。每个规则都含有一个属性及它的取值。 \n\n这里是一个规则集的例子。它让`h2` 标签中的文体变蓝并变成草书：\n\n<pre>h2\n{\n   color: blue;\n   font-family: cursive;\n</pre>\n\n在这个例子里， `h2`是个选择器，`color`（颜色）和字体族是属性，`blue` （蓝色）和`cursive`（草书）是这两个属性的值。 \n\n</details>\n</div>\n\n# 改变字体大小\n\n除了颜色，你能用其它属性控制别的样式。\n\n-   在样式表中找到决定段落样式的规则集.\n-   将段落的文本大小改得更大一些。\n-   在h3标签的规则集中添加一条规则，来让文本变大或变小。"
      CSD U2 text style size_2019: "<div style=\"float: right;\nheight: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n<summary>\n<strong>这些代码是如何起作用的？</strong>\n</summary>\n这是控制段落文字大小的代码：\n\n<pre>p {\n  font-size:\n14px;\n}</pre>\n\n-   `p`是_选择器_。它指定了什么元素会采用花括号里的规则。`p`的意思是段落（paragraph）。\n-   `font-size: 14px;`是一条规则，它让`p`标签里的文本是一定的大小。\n-   `font-size`是_属性_。它解释了这条规则是关于什么的，这条是关于文本大小的。\n-   `14px`是_值_。它解释了规则是如何被应用的，在这里，会让文本为14像素大。\n    </details>\n    <details>\n    <summary>\n    <strong>`px`是什么意思？什么是像素？</strong>\n    </summary>\n    Pixel（像素）的缩写是`px`，这是在CSS中丈量元素的单位。这是屏幕上的一个点的尺寸。\n    </details>\n    <details>\n    <summary>\n    <strong>为什么我要所有这些符号？</strong>\n    </summary>\n    这些标点符号，例如花括号`{}`，冒号`:`，以及分号`;`，帮助计算机理解样式表中的规则。花括号将某个选择器的规则都保持在一起。每条规则应该用分毫来结束，并在属性和值之间用冒号来分隔。\n    </details>\n    <details>\n    <summary>\n    <strong>什么是样式表？</strong>\n    </summary>\n    样式表是一个控制网页要如何显示的文档。 外部格式表是连接到HTML网页的单独文档。 \n    </details>\n    <details>\n    <summary>\n    <strong>什么是CSS？</strong>\n    </summary>\n    CSS是控制网页上内容出现格式的语言。 它通过规则集来改变网页的外观。 每个规则集都有一个选择器，它指定在哪个元素上起作用，而规则解释了如何显示这个元素。每个规则都含有一个属性及它的取值。 \n\n这里是一个规则集的例子。它让`h2` 标签中的文体变蓝并变成草书：\n\n<pre>h2\n{\n   color: blue;\n   font-family: cursive;\n</pre>\n\n在这个例子里， `h2`是个选择器，`color`（颜色）和字体族是属性，`blue` （蓝色）和`cursive`（草书）是这两个属性的值。 \n\n</details>\n</div>\n\n# 改变字体大小\n\n除了颜色，你能用其它属性控制别的样式。\n\n-   在样式表中找到决定段落样式的规则集.\n-   将段落的文本大小改得更大一些。\n-   在h3标签的规则集中添加一条规则，来让文本变大或变小。"
      CSD U2 text style text align_2018: "<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n<summary>\n<strong>这些代码是如何起作用的？</strong>\n</summary>\n这是控制段落文本对齐的代码：\n\n<pre>p\n{\n  text-align: left;\n}</pre>\n\n-   `p`是_选择器_。它指定了什么元素会采用花括号里的规则。`p`的意思是段落（paragraph）。\n-   `text-align: left;`是一条规则，它让`p`标签里的文本在段落中左对齐。\n-   `text-align`是_属性_。它解释了这条规则是关于什么的，这条是关于文本对齐的。\n-   `left`是_值_。它解释了规则是如何被应用的，在这里，它让文本对齐到段落的左边。\n    </details>\n    <details>\n    <summary>\n    <strong>为什么`text-align: left;`看起来什么都没改变？</strong>\n    </summary>\n    大多数属性都有默认值。这些默认值是一个元素自动会应用上的样式，不需要加到样式表中。`text-align`的默认值是`left`，因此它没有改变任何样式。\n    </details>\n    <details>\n    <summary>\n    <strong>文本对齐都有哪些可能的值？</strong>\n    </summary>\n    你可以在\"left\"，\"right\"，和\"center\"中选一个。阅读<a href=\"http://www.w3schools.com/cssref/pr_text_text-align.asp\">W3Schools\n-   CSS text-align属性</a>了解更多关于文本对齐的内容。\n    </details>\n    <details>\n    <summary>\n    <strong>为什么我要所有这些符号？</strong>\n    </summary>\n    这些标点符号，例如花括号`{}`，冒号`:`，以及分号`;`，帮助计算机理解样式表中的规则。花括号将某个选择器的规则都保持在一起。每条规则应该用分毫来结束，并在属性和值之间用冒号来分隔。\n    </details>\n    <details>\n    <summary>\n    <strong>什么是样式表？</strong>\n    </summary>\n    样式表是一个控制网页要如何显示的文档。 外部格式表是连接到HTML网页的单独文档。 \n    </details>\n    <details>\n    <summary>\n    <strong>什么是CSS？</strong>\n    </summary>\n    CSS是控制网页上内容出现格式的语言。 它通过规则集来改变网页的外观。 每个规则集都有一个选择器，它指定在哪个元素上起作用，而规则解释了如何显示这个元素。每个规则都含有一个属性及它的取值。 \n\n这里是一个规则集的例子。它让`h2` 标签中的文体变蓝并变成草书：\n\n<pre>h2\n{\n   color: blue;\n   font-family: cursive;\n</pre>\n\n在这个例子里， `h2`是个选择器，`color`（颜色）和字体族是属性，`blue` （蓝色）和`cursive`（草书）是这两个属性的值。 \n\n</details>\n</details>\n</div>\n# 文本对齐\n\n`text-align`属性设置了文本在每一行上，水平（从一边到另一边）方向的位置。\n\n-   找到段落标签中的\"text-align\"属性\n-   改变段落的对齐方式。\n-   从\"left\"，\"right\"，和\"center\"中选择一个。"
      CSD U2 text style text align_2019: "<div style=\"float:\nright; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"\nmarkdown=\"1\">\n<details>\n<summary>\n<strong>这些代码是如何起作用的？</strong>\n</summary>\n这是控制段落文本对齐的代码：\n\n<pre>p\n{\n  text-align: left;\n}</pre>\n\n-   `p`是_选择器_。它指定了什么元素会采用花括号里的规则。`p`的意思是段落（paragraph）。\n-   `text-align: left;`是一条规则，它让`p`标签里的文本在段落中左对齐。\n-   `text-align`是_属性_。它解释了这条规则是关于什么的，这条是关于文本对齐的。\n-   `left`是_值_。它解释了规则是如何被应用的，在这里，它让文本对齐到段落的左边。\n    </details>\n    <details>\n    <summary>\n    <strong>为什么`text-align: left;`看起来什么都没改变？</strong>\n    </summary>\n    大多数属性都有默认值。这些默认值是一个元素自动会应用上的样式，不需要加到样式表中。`text-align`的默认值是`left`，因此它没有改变任何样式。\n    </details>\n    <details>\n    <summary>\n    <strong>文本对齐都有哪些可能的值？</strong>\n    </summary>\n    你可以在\"left\"，\"right\"，和\"center\"中选一个。阅读<a href=\"http://www.w3schools.com/cssref/pr_text_text-align.asp\">W3Schools\n-   CSS text-align属性</a>了解更多关于文本对齐的内容。\n    </details>\n    <details>\n    <summary>\n    <strong>为什么我要所有这些符号？</strong>\n    </summary>\n    这些标点符号，例如花括号`{}`，冒号`:`，以及分号`;`，帮助计算机理解样式表中的规则。花括号将某个选择器的规则都保持在一起。每条规则应该用分毫来结束，并在属性和值之间用冒号来分隔。\n    </details>\n    <details>\n    <summary>\n    <strong>什么是样式表？</strong>\n    </summary>\n    样式表是一个控制网页要如何显示的文档。 外部格式表是连接到HTML网页的单独文档。 \n    </details>\n    <details>\n    <summary>\n    <strong>什么是CSS？</strong>\n    </summary>\n    CSS是控制网页上内容出现格式的语言。 它通过规则集来改变网页的外观。 每个规则集都有一个选择器，它指定在哪个元素上起作用，而规则解释了如何显示这个元素。每个规则都含有一个属性及它的取值。 \n\n这里是一个规则集的例子。它让`h2` 标签中的文体变蓝并变成草书：\n\n<pre>h2\n{\n   color: blue;\n   font-family: cursive;\n</pre>\n\n在这个例子里， `h2`是个选择器，`color`（颜色）和字体族是属性，`blue` （蓝色）和`cursive`（草书）是这两个属性的值。 \n\n</details>\n</details>\n</div>\n# 文本对齐\n\n`text-align`属性设置了文本在每一行上，水平（从一边到另一边）方向的位置。\n\n-   找到段落标签中的\"text-align\"属性\n-   改变段落的对齐方式。\n-   从\"left\"，\"right\"，和\"center\"中选择一个。"
      CSD U2 unordered list: |-
        # 无序列表

        <div
        style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px" markdown="1">
        <details>
        <summary>

        **什么是列表的两种类型？**

        </summary>
        HTML中有两种类型的列表，有序和无序的。
        </details>
        <details>
        <summary>

        **什么是无序列表?**

        </summary>
        无序列表只是一组无序符合项。
        <br /><br /> 无序列表元素有标签&lt;ul&gt; .它是 <strong>U</strong>nordered <strong>L</strong>istis 的缩写。 每个列表里的项目是由列表项目元素&lt;li&gt;标示。它是<strong>L</strong>ist <strong>I</strong>tem 的缩写. 列表项目元素是子元素。 它表示它得跟在父元素，无序列表(&lt;ul&gt;)内。
        </details>

        <details>
        <summary>

        **如何制作无序列表?**

        </summary>
        制作一个无序列表需要两步：制作列表和增加列表条目。先写上无序列表标签 `<ul> </ul>`来增加无序列表。接着将你的列表条目加到无序列表标签的**里面**。用标签`<li>
        </li>` 来增加列表条目，将内容都加到这对标签里。
        <br /><br />
        给你的&lt;li&gt;标签加上缩进会有助于表达这些条目是在&lt;ul&gt;标签里面的。

        </details>

        <details>
        <summary>

        **看看代码。**

        </summary>

        <table
        border="1">
        <tr>
        <td>例子</td>
        <td>结果</td>
        </tr>
        <tr>
        <td><pre>
        &lt;ul&gt; <br>   &lt;li&gt;红 &lt;/li&gt; <br>   &lt;li&gt;绿 &lt;/li&gt;
        <br>   &lt;li&gt;蓝&lt;/li&gt; <br> &lt;/ul&gt; </pre></td>
        <td><img
        src="https://images.code.org/25d4dfc9b6c448d0da305df66aa1dfb7-image-1473444368948.05.32
        PM.png" style="width:200px"></td>
        </tr>
        </table>

        </details>
        </div>

        这个页面应该包含一个无序列表，但它少写了列表标签。

        # 这样做

        -   用`<ul>`和`<li>`标签来结构化内容，并将内容放到像图片这样无序列表中。

        \!\[](\<<https://images.code.org/64581a90765cd2d53b6c5235c48f2855-image-1493238358294.25.04>
        PM.png>)
      CSD U2 unordered list_2018: "# 无序列表\n\n<div\nstyle=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:\n20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>\n<strong>什么是列表的两种类型？</strong>\n</summary>\nHTML中有两种类型的列表，有序和无序的。\n</details>\n<details>\n<summary>\n<strong>什么是无序列表?</strong>\n</summary>\n无序列表只是一组无序符合项。\n<br /><br /> 无序列表元素有标签&lt;ul&gt; .它是 <strong>U</strong>nordered <strong>L</strong>istis 的缩写。 每个列表里的项目是由列表项目元素&lt;li&gt;标示。它是<strong>L</strong>ist <strong>I</strong>tem 的缩写. 列表项目元素是子元素。 它表示它得跟在父元素，无序列表(&lt;ul&gt;)内。\n</details>\n\n<details>\n<summary>\n<strong>如何制作无序列表?</strong>\n</summary>\n制作一个无序列表需要两步：制作列表和增加列表条目。先写上无序列表标签 `<ul> </ul>`来增加无序列表。接着将你的列表条目加到无序列表标签的**里面**。用标签`<li>\n</li>` 来增加列表条目，将内容都加到这对标签里。\n<br /><br />\n给你的&lt;li&gt;标签加上缩进会有助于表达这些条目是在&lt;ul&gt;标签里面的。\n\n</details>\n\n<details>\n<summary>\n<strong>看看代码。</strong>\n</summary>\n<table\nborder=\"1\">\n<tr>\n<td>例子</td>\n<td>结果</td>\n</tr>\n<tr>\n<td><pre>\n&lt;ul&gt; <br>   &lt;li&gt;红 &lt;/li&gt; <br>   &lt;li&gt;绿 &lt;/li&gt;\n<br>   &lt;li&gt;蓝&lt;/li&gt; <br> &lt;/ul&gt; </pre></td>\n<td><img\nsrc=\"https://images.code.org/25d4dfc9b6c448d0da305df66aa1dfb7-image-1473444368948.05.32\nPM.png\" style=\"width:200px\"></td>\n</tr>\n</table>\n\n</details>\n</div>\n\n这个页面应该包含一个无序列表，但它少写了列表标签。\n\n# \n\n这样做\n\n-   用`<ul>`和`<li>`标签来结构化内容，并将内容放到像图片这样无序列表中。\n\n![](<https://images.code.org/64581a90765cd2d53b6c5235c48f2855-image-1493238358294.25.04 PM.png>)"
      CSD U2 unordered list_2019: "# 无序列表\n\n<div\nstyle=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:\n20px; font-size:14px\" markdown=\"1\">\n<details>\n<summary>\n<strong>什么是列表的两种类型？</strong>\n</summary>\nHTML中有两种类型的列表，有序和无序的。\n</details>\n<details>\n<summary>\n<strong>什么是无序列表?</strong>\n</summary>\n无序列表只是一组无序符合项。\n<br /><br /> 无序列表元素有标签&lt;ul&gt; .它是 <strong>U</strong>nordered <strong>L</strong>istis 的缩写。 每个列表里的项目是由列表项目元素&lt;li&gt;标示。它是<strong>L</strong>ist <strong>I</strong>tem 的缩写. 列表项目元素是子元素。 它表示它得跟在父元素，无序列表(&lt;ul&gt;)内。\n</details>\n\n<details>\n<summary>\n<strong>如何制作无序列表?</strong>\n</summary>\n制作一个无序列表需要两步：制作列表和增加列表条目。先写上无序列表标签 `<ul> </ul>`来增加无序列表。接着将你的列表条目加到无序列表标签的**里面**。用标签`<li>\n</li>` 来增加列表条目，将内容都加到这对标签里。\n<br /><br />\n给你的&lt;li&gt;标签加上缩进会有助于表达这些条目是在&lt;ul&gt;标签里面的。\n\n</details>\n\n<details>\n<summary>\n<strong>看看代码。</strong>\n</summary>\n<table\nborder=\"1\">\n<tr>\n<td>例子</td>\n<td>结果</td>\n</tr>\n<tr>\n<td><pre>\n&lt;ul&gt; <br>   &lt;li&gt;红 &lt;/li&gt; <br>   &lt;li&gt;绿 &lt;/li&gt;\n<br>   &lt;li&gt;蓝&lt;/li&gt; <br> &lt;/ul&gt; </pre></td>\n<td><img\nsrc=\"https://images.code.org/25d4dfc9b6c448d0da305df66aa1dfb7-image-1473444368948.05.32\nPM.png\" style=\"width:200px\"></td>\n</tr>\n</table>\n\n</details>\n</div>\n\n这个页面应该包含一个无序列表，但它少写了列表标签。\n\n# \n\n这样做\n\n-   用`<ul>`和`<li>`标签来结构化内容，并将内容放到像图片这样无序列表中。\n\n![](<https://images.code.org/64581a90765cd2d53b6c5235c48f2855-image-1493238358294.25.04 PM.png>)"
      CSD U2 upload image: |-
        # 上传新图片

        <div style="float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">
        <details>
        <summary>

        **如何增加图片？**

        </summary>
        `<img>`标签允许你在网页上显示图片。 <br><br>

        例子

        <pre>&lt;img src="dog.png"
        alt="跳跃的狗"/&gt;</pre><br><br>

        为了让浏览器知道应该用哪个文件，这里有些额外的信息，叫做 **attribute**（属性），它被加到了\<img>标签的括号里属性`src`是**s**ou**rc**e（来源）的缩写，里面写了图片的名字。图片文件名包括了它的扩展名，即这个图片的编码类型。常见的图片扩展名有：.jpg, .jpeg, .png。<br><br>

        除了src属性，图片还可以有`alt`（替换文本）属性来描述图片。这个属性对于图片不能正确加载时，和有视觉障碍的人特别重要。<br><br>

        因为`<img>`的开始和关闭都在同一个标签里，所以它是一个**空元素**。通常，我们会在图片标签结束前加入`/`来表示这个标签关闭了。

        </details>
        <details>
        <summary>

        **什么是空元素？**

        </summary>
        `<img>` 标签是一个**空元素**的例子，因为它的开始、关闭都在同一个标签里。为了标记它，我们将通常放在结束标签里的`/`放到了图片标签的结尾处。空元素不需要关闭标签，因为它不需要再标签之间插入文本内容。影响内容显示的都在属性中进行了设置。
        </details>
        <details>
        <summary>

        **为什么图片标签没有结束元素？**

        </summary>
        图片标签是一个空标签，而空标签不需要结束标签。因为它里面不需要有文本内容。影响显示的数据都设置到了标签的属性里。
        </details>
        <details>
        <summary>

        **什么是attribute（属性）？**

        </summary>
        属性是包含在标签里的额外信息。属性有名字和值两个部分。名字说明了属性信息的类型，值是对于这个标签的实际信息。

        例如\<img>标签有两个属性，src和alt。
        src表明了图片文件的名字，而alt表明了图片所表达的文字含义。

        </details>
        </div>

        你现在可以往自己的网站里加图片了。你能再这里搜索并下载它们。

        <form action="https://www.google.com/search" method="GET"
        target="_blank">
        <input type=hidden name=site value="imghp" />
        <input
        type=hidden name=tbm value=isch />
        <input type=hidden name=tbs value="sur:fmc"
        />
        <input name=q />
        <input type=submit value="search">
        <br />
        </form>

        一旦你找到了图片，点击\!\[](\<<https://images.code.org/c35789d00e59b0dbe42879390dabf925-image-1493240590385.01.49>
        PM.png>)并将它从你的电脑上传到项目中。

        # 这样做

        -   上传至少两张图片到项目中。
        -   用`<img>`标签在网站中显示图片。
      CSD U2 upload images: |-
        # 上传图片\\r

        \\r
        接下来，你需要将所有图片上传到你的项目中。\\r
        \\r

        # 这样做\\r

        \*
        将想要的图片都下载到你的电脑里。如果需要帮助，就浏览<a href="/s/csd2/stage/7/puzzle/5"
        target="_new">课程7 关卡5</a>。\\r

        -   确保你有权利使用这些图片。\\r
        -   写下所有你需要的属性信息。\\r
        -   将所有图片上传到你的项目中。如果忘了怎么做，就浏览
            <a href="/s/csd2/stage/7/puzzle/5" target="_new">课程 7 关卡 5</a>。\\r
            \\r
      CSD U2 upload images_2018: |-
        # 上传图片\\r

        \\r
        接下来，你需要将所有图片上传到你的项目中。\\r
        \\r

        # 这样做\\r

        \*
        将想要的图片都下载到你的电脑里。如果需要帮助，就浏览<a href="/s/csd2/stage/7/puzzle/5"
        target="_new">课程7 关卡5</a>。\\r

        -   确保你有权利使用这些图片。\\r
        -   写下所有你需要的属性信息。\\r
        -   将所有图片上传到你的项目中。如果忘了怎么做，就浏览
            <a href="/s/csd2/stage/7/puzzle/5" target="_new">课程 7 关卡 5</a>。\\r
            \\r
      CSD U2 upload images_2019: |-
        # 上传图片\\r

        \\r
        接下来，你需要将所有图片上传到你的项目中。\\r
        \\r

        # 这样做\\r

        \*
        将想要的图片都下载到你的电脑里。如果需要帮助，就浏览<a href="/s/csd2/stage/7/puzzle/5"
        target="_new">课程7 关卡5</a>。\\r

        -   确保你有权利使用这些图片。\\r
        -   写下所有你需要的属性信息。\\r
        -   将所有图片上传到你的项目中。如果忘了怎么做，就浏览
            <a href="/s/csd2/stage/7/puzzle/5" target="_new">课程 7 关卡 5</a>。\\r
            \\r
      CSD U3 - Booleans Video: "# 布尔表达式视频"
      CSD U3 - Simple Counter Predict: "# \n\n计数器模式\\\\r\n\\\\r\n这个模式是编程中最重要的模式之一。 \\\\r\n\\\\r\n\\!\\[](\\<<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56>\nPM.png>)\\\\r\n    \\\\r\n它被用来将变量的值每次增加1。你可以将它叫做**计数器模式**，因为它能让一个变量累加计数。很多地方都能用这个模式，特别是在循环中。我们先看看它是什么样的。\\\\r\n\\\\r\n\n# 这样做\\\\r\n\n\\\\r\n这个程序创建了一个叫做`counter`（计数器）的变量，然后用**计数器模式**来增加它。当运行程序时，你觉得屏幕上会看见什么？\\\\r\n\\\\r\n\\*\n**阅读程序**，并预测一下输出会是什么。\\\\r\n\\*\n**运行程序**检查一下你的预测。\\\\r\n\n-   **和同伴讨论**.\n    你能解释看到了什么吗？\\\\r\n    \\\\r"
      CSD U3 - Simple Counter Predict_2018: "# \n\n计数器模式\\\\r\n\\\\r\n这个模式是编程中最重要的模式之一。 \\\\r\n\\\\r\n\\!\\[](\\<<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56>\nPM.png>)\\\\r\n    \\\\r\n它被用来将变量的值每次增加1。你可以将它叫做**计数器模式**，因为它能让一个变量累加计数。很多地方都能用这个模式，特别是在循环中。我们先看看它是什么样的。\\\\r\n\\\\r\n\n# 这样做\\\\r\n\n\\\\r\n这个程序创建了一个叫做`counter`（计数器）的变量，然后用**计数器模式**来增加它。当运行程序时，你觉得屏幕上会看见什么？\\\\r\n\\\\r\n\\*\n**阅读程序**，并预测一下输出会是什么。\\\\r\n\\*\n**运行程序**检查一下你的预测。\\\\r\n\n-   **和同伴讨论**.\n    你能解释看到了什么吗？\\\\r\n    \\\\r"
      CSD U3 - Simple Counter Predict_2019: "# \n\n计数器模式\\\\r\n\\\\r\n这个模式是编程中最重要的模式之一。 \\\\r\n\\\\r\n\\!\\[](\\<<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56>\nPM.png>)\\\\r\n    \\\\r\n它被用来将变量的值每次增加1。你可以将它叫做**计数器模式**，因为它能让一个变量累加计数。很多地方都能用这个模式，特别是在循环中。我们先看看它是什么样的。\\\\r\n\\\\r\n\n# 这样做\\\\r\n\n\\\\r\n这个程序创建了一个叫做`counter`（计数器）的变量，然后用**计数器模式**来增加它。当运行程序时，你觉得屏幕上会看见什么？\\\\r\n\\\\r\n\\*\n**阅读程序**，并预测一下输出会是什么。\\\\r\n\\*\n**运行程序**检查一下你的预测。\\\\r\n\n-   **和同伴讨论**.\n    你能解释看到了什么吗？\\\\r\n    \\\\r"
      CSD U3 - complex - key up and down: |-
        # 响应单次点击\\r

        \\r
        我们已经学习了`keyWentDown`和`keyWentUp`能用来响应单次的按键。模块`mouseWentUp`和`mouseWentDown`能让你对鼠标做到同样的操作！\\r
        \\r

        # 这样做\\r

        \\r
        我们先制作一个简单的游戏，它能统计你点击了多少次。这里已经有一个叫做`clicks`的变量了，能用来跟踪用户点击的次数。\\r
        \\r

        -   添加一个条件来检查是否鼠标被‘按下了。\\r
        -   在条件里，给`clicks`变量增加1。\\r
            \\r
            _挑战：你能增加一个精灵也响应`mouseWentDown`事件吗？增加一张你选择的图片，并在每次鼠标点击时，将它的尺寸放大。_
      CSD U3 - complex - key up and down_2018: |-
        # 响应单次点击\\r

        \\r
        我们已经学习了`keyWentDown`和`keyWentUp`能用来响应单次的按键。模块`mouseWentUp`和`mouseWentDown`能让你对鼠标做到同样的操作！\\r
        \\r

        # 这样做\\r

        \\r
        我们先制作一个简单的游戏，它能统计你点击了多少次。这里已经有一个叫做`clicks`的变量了，能用来跟踪用户点击的次数。\\r
        \\r

        -   添加一个条件来检查是否鼠标被‘按下了。\\r
        -   在条件里，给`clicks`变量增加1。\\r
            \\r
            _挑战：你能增加一个精灵也响应`mouseWentDown`事件吗？增加一张你选择的图片，并在每次鼠标点击时，将它的尺寸放大。_
      CSD U3 - complex - key up and down_2019: |-
        # 响应单次点击\\r

        \\r
        我们已经学习了`keyWentDown`和`keyWentUp`能用来响应单次的按键。模块`mouseWentUp`和`mouseWentDown`能让你对鼠标做到同样的操作！\\r
        \\r

        # 这样做\\r

        \\r
        我们先制作一个简单的游戏，它能统计你点击了多少次。这里已经有一个叫做`clicks`的变量了，能用来跟踪用户点击的次数。\\r
        \\r

        -   添加一个条件来检查是否鼠标被‘按下了。\\r
        -   在条件里，给`clicks`变量增加1。\\r
            \\r
            _挑战：你能增加一个精灵也响应`mouseWentDown`事件吗？增加一张你选择的图片，并在每次鼠标点击时，将它的尺寸放大。_
      CSD U3 - conditionals - arrows and gears: |-
        # 齿轮和条件语句\\r

        \\r
        让我们只让齿轮在按住空格键时才旋转。\\r
        \\r

        # 这样做\\r

        \\r

        -   增加一个`if` （如果）语句。\\r
        -   用`keyDown`（按下键时）当做如果语句的输入来检查是否空格键被按下了。\\r
        -   把让齿轮旋转的代码挪到`if`（如果）语句中。
      CSD U3 - conditionals - first conditional 2-2018: |-
        <img
        src="https://images.code.org/abd459d8d1477ac2f582417f4334cdaa-image-1466107090414.gif"
        style="width:200px;float:right">

        # 可见

        有时候，将图片隐藏一会儿，再显示出来是很有用的。你可以通过`visible`（可见性）属性来做到这点。可见性属性和以前见过的属性有点不同：它是一个布尔值，要么是`true`（真，即精灵可见），要么是`false`（假，即精灵**不**可见）。默认情况下，可见性是`true`。

        # 这样做

        当气球碰到游戏区边缘时，让它爆炸！

        -   增加条件来检查是否气球碰到了边缘。
            \\t\* 用一个`balloon.scale`（气球.尺寸）上的检查器来帮忙。
        -   用动画标签中的"pop"来显示一个爆炸的精灵。
        -   用`visible`属性来让"pop"精灵一开始是隐藏的。
        -   在`if`（如果）语句中加两句。
            \\t\* 一个设置`visible`属性来隐藏气球精灵。
        -   一个设置`visible`属性来显示爆炸的精灵。
      CSD U3 - conditionals - first conditional 2_2018: |-
        <img
        src="https://images.code.org/abd459d8d1477ac2f582417f4334cdaa-image-1466107090414.gif"
        style="width:200px;float:right">

        # 可见

        有时候，将图片隐藏一会儿，再显示出来是很有用的。你可以通过`visible`（可见性）属性来做到这点。可见性属性和以前见过的属性有点不同：它是一个布尔值，要么是`true`（真，即精灵可见），要么是`false`（假，即精灵**不**可见）。默认情况下，可见性是`true`。

        # 这样做

        当气球碰到游戏区边缘时，让它爆炸！

        -   增加条件来检查是否气球碰到了边缘。
            \\t\* 用一个`balloon.scale`（气球.尺寸）上的检查器来帮忙。
        -   用动画标签中的"pop"来显示一个爆炸的精灵。
        -   用`visible`属性来让"pop"精灵一开始是隐藏的。
        -   在`if`（如果）语句中加两句。
            \\t\* 一个设置`visible`属性来隐藏气球精灵。
        -   一个设置`visible`属性来显示爆炸的精灵。
      CSD U3 - conditionals - first conditional 2_2018_2019: |-
        <img
        src="https://images.code.org/abd459d8d1477ac2f582417f4334cdaa-image-1466107090414.gif"
        style="width:200px;float:right">

        # 可见

        有时候，将图片隐藏一会儿，再显示出来是很有用的。你可以通过`visible`（可见性）属性来做到这点。可见性属性和以前见过的属性有点不同：它是一个布尔值，要么是`true`（真，即精灵可见），要么是`false`（假，即精灵**不**可见）。默认情况下，可见性是`true`。

        # 这样做

        当气球碰到游戏区边缘时，让它爆炸！

        -   增加条件来检查是否气球碰到了边缘。
            \\t\* 用一个`balloon.scale`（气球.尺寸）上的检查器来帮忙。
        -   用动画标签中的"pop"来显示一个爆炸的精灵。
        -   用`visible`属性来让"pop"精灵一开始是隐藏的。
        -   在`if`（如果）语句中加两句。
            \\t\* 一个设置`visible`属性来隐藏气球精灵。
        -   一个设置`visible`属性来显示爆炸的精灵。
      CSD U3 - conditionals - first conditional: |-
        <img
        src="https://images.code.org/36c5543076622c96f7dabce8bc37f995-image-1468425774455.54.03
        PM.png" style="float:right;width:100px">

        # 如果语句

        前面学过的布尔语句能让我们问问题，为了_回答这些问题_，我们需要用`如果`语句。

        `如果`语句通常放到循环中，因为需要在每次循环运行时都进行检查。

        # 这样做

        你开始编写的赛车游戏程序已经加载在这里了。

        -   在更新了赛车的位置后，增加一个`如果`语句。
        -   将布尔表达式从console.log语句中移动到如果条件语句上。
        -   在`如果`语句中，增加一条语句在屏幕上写上"胜利者"。
      CSD U3 - conditionals - first conditional_2018: |-
        <img
        src="https://images.code.org/36c5543076622c96f7dabce8bc37f995-image-1468425774455.54.03
        PM.png" style="float:right;width:100px">

        # 如果语句

        前面学过的布尔语句能让我们问问题，为了_回答这些问题_，我们需要用`如果`语句。

        `如果`语句通常放到循环中，因为需要在每次循环运行时都进行检查。

        # 这样做

        你开始编写的赛车游戏程序已经加载在这里了。

        -   在更新了赛车的位置后，增加一个`如果`语句。
        -   将布尔表达式从console.log语句中移动到如果条件语句上。
        -   在`如果`语句中，增加一条语句在屏幕上写上"胜利者"。
      CSD U3 - conditionals - first conditional_2019: |-
        <img
        src="https://images.code.org/36c5543076622c96f7dabce8bc37f995-image-1468425774455.54.03
        PM.png" style="float:right;width:100px">

        # 如果语句

        前面学过的布尔语句能让我们问问题，为了_回答这些问题_，我们需要用`如果`语句。

        `如果`语句通常放到循环中，因为需要在每次循环运行时都进行检查。

        # 这样做

        你开始编写的赛车游戏程序已经加载在这里了。

        -   在更新了赛车的位置后，增加一个`如果`语句。
        -   将布尔表达式从console.log语句中移动到如果条件语句上。
        -   在`如果`语句中，增加一条语句在屏幕上写上"胜利者"。
      CSD U3 AnimationsMulti Play Defender: |-
        # 保卫你的蛋糕！\\r

        \\r
        这是一个防守游戏的例子，你可以在课程结束时创建自己的。为了保卫你的蛋糕，用方向键移动外星人来阻止瓢虫，并将它们推到水里。\\r
        \\r

        # 这样做\\r

        \\r
        和同学一起，列出下面信息的清单。\\r
        \\r

        -   这个游戏中有多少精灵，是哪些？\\r
        -   这个游戏需要什么变量？它们存储了什么内容？\\r
        -   如果需要将这些代码分开成函数，你觉得需要哪些函数？你需要在代码中创建的主要部分的行为是什么？
      CSD U3 AnimationsMulti Play Defender_2018: |-
        # 保卫你的蛋糕！\\r

        \\r
        这是一个防守游戏的例子，你可以在课程结束时创建自己的。为了保卫你的蛋糕，用方向键移动外星人来阻止瓢虫，并将它们推到水里。\\r
        \\r

        # 这样做\\r

        \\r
        和同学一起，列出下面信息的清单。\\r
        \\r

        -   这个游戏中有多少精灵，是哪些？\\r
        -   这个游戏需要什么变量？它们存储了什么内容？\\r
        -   如果需要将这些代码分开成函数，你觉得需要哪些函数？你需要在代码中创建的主要部分的行为是什么？
      CSD U3 AnimationsMulti Play Defender_2019: |-
        # 保卫你的蛋糕！\\r

        \\r
        这是一个防守游戏的例子，你可以在课程结束时创建自己的。为了保卫你的蛋糕，用方向键移动外星人来阻止瓢虫，并将它们推到水里。\\r
        \\r

        # 这样做\\r

        \\r
        和同学一起，列出下面信息的清单。\\r
        \\r

        -   这个游戏中有多少精灵，是哪些？\\r
        -   这个游戏需要什么变量？它们存储了什么内容？\\r
        -   如果需要将这些代码分开成函数，你觉得需要哪些函数？你需要在代码中创建的主要部分的行为是什么？
      CSD U3 AnimationsMulti defender animate player: "# \n\n改变玩家动画\\\\r\n\\\\r\n现在，你的玩家总是面朝同一个方向。通过在不同的动画中切换，你能做得更像现实中一样。你的玩家能根据按键，在左脸和右脸动画之间切换。记住，你能在动画标签页中快速的复制和编辑动画。\\\\r\n\\\\r\n\n# 这样做\\\\r\n\n\\\\r\n\\*\n在动画标签页复制玩家精灵的动画。\\\\r\n\n-   反转新动画的每一帧，这样，精灵就能朝向相反的方向了。\\\\r\n-   重命名新的动画。\\\\r\n-   在`movePlayer`（移动玩家）函数中用`setAnimation`（设置动画）命令，在玩家点击\"左\"和\"右\"方向键时，改变它朝向的方向。"
      CSD U3 AnimationsMulti defender animate player_2018: "# \n\n改变玩家动画\\\\r\n\\\\r\n现在，你的玩家总是面朝同一个方向。通过在不同的动画中切换，你能做得更像现实中一样。你的玩家能根据按键，在左脸和右脸动画之间切换。记住，你能在动画标签页中快速的复制和编辑动画。\\\\r\n\\\\r\n\n# 这样做\\\\r\n\n\\\\r\n\\*\n在动画标签页复制玩家精灵的动画。\\\\r\n\n-   反转新动画的每一帧，这样，精灵就能朝向相反的方向了。\\\\r\n-   重命名新的动画。\\\\r\n-   在`movePlayer`（移动玩家）函数中用`setAnimation`（设置动画）命令，在玩家点击\"左\"和\"右\"方向键时，改变它朝向的方向。"
      CSD U3 AnimationsMulti defender animate player_2019: "# \n\n改变玩家动画\\\\r\n\\\\r\n现在，你的玩家总是面朝同一个方向。通过在不同的动画中切换，你能做得更像现实中一样。你的玩家能根据按键，在左脸和右脸动画之间切换。记住，你能在动画标签页中快速的复制和编辑动画。\\\\r\n\\\\r\n\n# 这样做\\\\r\n\n\\\\r\n\\*\n在动画标签页复制玩家精灵的动画。\\\\r\n\n-   反转新动画的每一帧，这样，精灵就能朝向相反的方向了。\\\\r\n-   重命名新的动画。\\\\r\n-   在`movePlayer`（移动玩家）函数中用`setAnimation`（设置动画）命令，在玩家点击\"左\"和\"右\"方向键时，改变它朝向的方向。"
      CSD U3 AnimationsMulti defender displace enemies: "# \n\n取代敌人\\\\r\n\\\\r\n是时候写代码来加入更多的精灵进行互动了。你的玩家精灵应该取代敌人精灵。\\\\r\n\\\\r\n\n# 这样做\\\\r\n\n\\\\r\n这一关中，你要在`displaceEnemies`（取代敌人）函数中写代码。\\\\r\n\\\\r\n\\*\n写代码来让玩家取代敌人精灵。\\\\r\n\n-   测试你的程序，来确保玩家能取代敌人，但它们会在玩家移动走后，继续往右移动。\\\\r\n    \\\\r\n    _提示：如果需要调试你的程序，可以用`sprite.debug`来看看精灵的碰撞。_"
      CSD U3 AnimationsMulti defender displace enemies_2018: "# \n\n取代敌人\\\\r\n\\\\r\n是时候写代码来加入更多的精灵进行互动了。你的玩家精灵应该取代敌人精灵。\\\\r\n\\\\r\n\n# 这样做\\\\r\n\n\\\\r\n这一关中，你要在`displaceEnemies`（取代敌人）函数中写代码。\\\\r\n\\\\r\n\\*\n写代码来让玩家取代敌人精灵。\\\\r\n\n-   测试你的程序，来确保玩家能取代敌人，但它们会在玩家移动走后，继续往右移动。\\\\r\n    \\\\r\n    _提示：如果需要调试你的程序，可以用`sprite.debug`来看看精灵的碰撞。_"
      CSD U3 AnimationsMulti defender displace enemies_2019: "# \n\n取代敌人\\\\r\n\\\\r\n是时候写代码来加入更多的精灵进行互动了。你的玩家精灵应该取代敌人精灵。\\\\r\n\\\\r\n\n# 这样做\\\\r\n\n\\\\r\n这一关中，你要在`displaceEnemies`（取代敌人）函数中写代码。\\\\r\n\\\\r\n\\*\n写代码来让玩家取代敌人精灵。\\\\r\n\n-   测试你的程序，来确保玩家能取代敌人，但它们会在玩家移动走后，继续往右移动。\\\\r\n    \\\\r\n    _提示：如果需要调试你的程序，可以用`sprite.debug`来看看精灵的碰撞。_"
      CSD U3 AnimationsMulti defender enemies move: "# \n\n移动敌人\\\\r\n\\\\r\n是时候学代码来开始移动你的精灵了。开始前，你需要让敌人精灵随机到达一个位置，并满屏幕移动。\\\\r\n\\\\r\n\n# 这样做\\\\r\n\n\\\\r\n在程序最上面，在创建了每个敌人精灵后，写代码来将它移动到正确的位置，并给定正确的速度。\\\\r\n\\\\r\n\\*\n用`sprite.x`来将x位置设置为0。\\\\r\n\n-   用`sprite.y`来将y位置设置为150到250之间的随机值。\\\\r\n-   用`sprite.velocityX`来设置x速率为2。\\\\r\n    \\\\r\n    测试你的程序，你的敌人精灵现在应该能在桥上移动了。"
      CSD U3 AnimationsMulti defender enemies move_2018: "# \n\n移动敌人\\\\r\n\\\\r\n是时候学代码来开始移动你的精灵了。开始前，你需要让敌人精灵随机到达一个位置，并满屏幕移动。\\\\r\n\\\\r\n\n# 这样做\\\\r\n\n\\\\r\n在程序最上面，在创建了每个敌人精灵后，写代码来将它移动到正确的位置，并给定正确的速度。\\\\r\n\\\\r\n\\*\n用`sprite.x`来将x位置设置为0。\\\\r\n\n-   用`sprite.y`来将y位置设置为150到250之间的随机值。\\\\r\n-   用`sprite.velocityX`来设置x速率为2。\\\\r\n    \\\\r\n    测试你的程序，你的敌人精灵现在应该能在桥上移动了。"
      CSD U3 AnimationsMulti defender enemies move_2019: "# \n\n移动敌人\\\\r\n\\\\r\n是时候学代码来开始移动你的精灵了。开始前，你需要让敌人精灵随机到达一个位置，并满屏幕移动。\\\\r\n\\\\r\n\n# 这样做\\\\r\n\n\\\\r\n在程序最上面，在创建了每个敌人精灵后，写代码来将它移动到正确的位置，并给定正确的速度。\\\\r\n\\\\r\n\\*\n用`sprite.x`来将x位置设置为0。\\\\r\n\n-   用`sprite.y`来将y位置设置为150到250之间的随机值。\\\\r\n-   用`sprite.velocityX`来设置x速率为2。\\\\r\n    \\\\r\n    测试你的程序，你的敌人精灵现在应该能在桥上移动了。"
      CSD U3 AnimationsMulti defender make it your own: "# \n\n制作你自己的\\\\r\n\\\\r\n刚刚你学习了别人创建游戏的计划，现在要开始做你自己的了。你想要创造什么样的功能或挑战呢？\\\\r\n\\\\r\n\n# 这样做\\\\r\n\n\\\\r\n选择下面的一个挑战，来添加到到游戏里，或者自己制作一个挑战。\\\\r\n\\\\r\n\\*\n改变游戏的显示，这样玩家，敌人或蛋糕会变得不同。\\\\r\n\n-   当敌人得到蛋糕时结束游戏，并打印得分。为了获得另外的挑战，只有三个敌人会到达。\\\\r\n-   \\*\n    随机改变敌人的速度。\\\\r\n-   当玩家获得一个更高的分数时，显示一个新的背景。"
      CSD U3 AnimationsMulti defender make it your own_2018: "# \n\n制作你自己的\\\\r\n\\\\r\n刚刚你学习了别人创建游戏的计划，现在要开始做你自己的了。你想要创造什么样的功能或挑战呢？\\\\r\n\\\\r\n\n# 这样做\\\\r\n\n\\\\r\n选择下面的一个挑战，来添加到到游戏里，或者自己制作一个挑战。\\\\r\n\\\\r\n\\*\n改变游戏的显示，这样玩家，敌人或蛋糕会变得不同。\\\\r\n\n-   当敌人得到蛋糕时结束游戏，并打印得分。为了获得另外的挑战，只有三个敌人会到达。\\\\r\n-   \\*\n    随机改变敌人的速度。\\\\r\n-   当玩家获得一个更高的分数时，显示一个新的背景。"
      CSD U3 AnimationsMulti defender make it your own_2019: "# \n\n制作你自己的\\\\r\n\\\\r\n刚刚你学习了别人创建游戏的计划，现在要开始做你自己的了。你想要创造什么样的功能或挑战呢？\\\\r\n\\\\r\n\n# 这样做\\\\r\n\n\\\\r\n选择下面的一个挑战，来添加到到游戏里，或者自己制作一个挑战。\\\\r\n\\\\r\n\\*\n改变游戏的显示，这样玩家，敌人或蛋糕会变得不同。\\\\r\n\n-   当敌人得到蛋糕时结束游戏，并打印得分。为了获得另外的挑战，只有三个敌人会到达。\\\\r\n-   \\*\n    随机改变敌人的速度。\\\\r\n-   当玩家获得一个更高的分数时，显示一个新的背景。"
      CSD U3 AnimationsMulti defender move up down: "# \n\n上下移动\\\\r\n\\\\r\n你也可以让自己的精灵上下移动。\\\\r\n\\\\r\n\n# 这样做\\\\r\n\n\\\\r\n在这一关中，你要继续在`movePlayer`函数中写代码。\\\\r\n\\\\r\n\n-   在`keyDown`中用`如果`模块来检测是否\"上\"方向键被按下了。\\\\r\n-   通过计数器模式，用`sprite.y`来将玩家的y位置增加3。\\\\r\n-   用另一个`如果`模块来在\"下\"方向键按下时，将玩家往下移动。\\\\r\n    \\\\r\n    测试你的代码，你的角色现在能往上下左右4个方向移动了。"
      CSD U3 AnimationsMulti defender move up down_2018: "# \n\n上下移动\\\\r\n\\\\r\n你也可以让自己的精灵上下移动。\\\\r\n\\\\r\n\n# 这样做\\\\r\n\n\\\\r\n在这一关中，你要继续在`movePlayer`函数中写代码。\\\\r\n\\\\r\n\n-   在`keyDown`中用`如果`模块来检测是否\"上\"方向键被按下了。\\\\r\n-   通过计数器模式，用`sprite.y`来将玩家的y位置增加3。\\\\r\n-   用另一个`如果`模块来在\"下\"方向键按下时，将玩家往下移动。\\\\r\n    \\\\r\n    测试你的代码，你的角色现在能往上下左右4个方向移动了。"
      CSD U3 AnimationsMulti defender move up down_2019: "# \n\n上下移动\\\\r\n\\\\r\n你也可以让自己的精灵上下移动。\\\\r\n\\\\r\n\n# 这样做\\\\r\n\n\\\\r\n在这一关中，你要继续在`movePlayer`函数中写代码。\\\\r\n\\\\r\n\n-   在`keyDown`中用`如果`模块来检测是否\"上\"方向键被按下了。\\\\r\n-   通过计数器模式，用`sprite.y`来将玩家的y位置增加3。\\\\r\n-   用另一个`如果`模块来在\"下\"方向键按下时，将玩家往下移动。\\\\r\n    \\\\r\n    测试你的代码，你的角色现在能往上下左右4个方向移动了。"
      CSD U3 AnimationsMulti defender template: |-
        # 播放和暂停\\r

        \\r
        你可以用`sprite.play`（精灵.播放）和`sprite.pause`（精灵.暂停）命令来播放和暂停一个精灵的动画。如果动画正在播放，或者已经被暂停了，再用同样的命令也没有影响。唯一的例外是，**如果一个非循环的动画结束了，播放会重新开始播放它**。我们一起来看看这能创造的很酷的一些行为。\\r
        \\r

        # 这样做\\r

        \\r

        -   在每条`setAnimation`命令后，用`sprite.play`命令。这会在当按下键时，重新播放走路的动画。
      CSD U3 AnimationsMulti defender template_2018: |-
        # 播放和暂停\\r

        \\r
        你可以用`sprite.play`（精灵.播放）和`sprite.pause`（精灵.暂停）命令来播放和暂停一个精灵的动画。如果动画正在播放，或者已经被暂停了，再用同样的命令也没有影响。唯一的例外是，**如果一个非循环的动画结束了，播放会重新开始播放它**。我们一起来看看这能创造的很酷的一些行为。\\r
        \\r

        # 这样做\\r

        \\r

        -   在每条`setAnimation`命令后，用`sprite.play`命令。这会在当按下键时，重新播放走路的动画。
      CSD U3 AnimationsMulti defender template_2019: |-
        # 播放和暂停\\r

        \\r
        你可以用`sprite.play`（精灵.播放）和`sprite.pause`（精灵.暂停）命令来播放和暂停一个精灵的动画。如果动画正在播放，或者已经被暂停了，再用同样的命令也没有影响。唯一的例外是，**如果一个非循环的动画结束了，播放会重新开始播放它**。我们一起来看看这能创造的很酷的一些行为。\\r
        \\r

        # 这样做\\r

        \\r

        -   在每条`setAnimation`命令后，用`sprite.play`命令。这会在当按下键时，重新播放走路的动画。
      CSD U3 AnimationsMulti introducing multiframe: "# \n\n使用多帧动画\\\\r\n\\\\r\n在示例的防守游戏中，精灵是动画的。在开始编写这个游戏前，我们来花一分钟熟悉一下动画精灵的新方式。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n这个程序已经有了几个精灵，但它们都没有动画。\\\\r\n\\\\r\n\n-   在动画标签页中，找到已经加到项目中的多帧动画。为每个角色选择一个。\\\\r\n-   记住，你可以用`setAnimation`来在动画标签页中给你的精灵分配动画。"
      CSD U3 AnimationsMulti introducing multiframe_2018: "# \n\n使用多帧动画\\\\r\n\\\\r\n在示例的防守游戏中，精灵是动画的。在开始编写这个游戏前，我们来花一分钟熟悉一下动画精灵的新方式。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n这个程序已经有了几个精灵，但它们都没有动画。\\\\r\n\\\\r\n\n-   在动画标签页中，找到已经加到项目中的多帧动画。为每个角色选择一个。\\\\r\n-   记住，你可以用`setAnimation`来在动画标签页中给你的精灵分配动画。"
      CSD U3 AnimationsMulti introducing multiframe_2019: "# \n\n使用多帧动画\\\\r\n\\\\r\n在示例的防守游戏中，精灵是动画的。在开始编写这个游戏前，我们来花一分钟熟悉一下动画精灵的新方式。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n这个程序已经有了几个精灵，但它们都没有动画。\\\\r\n\\\\r\n\n-   在动画标签页中，找到已经加到项目中的多帧动画。为每个角色选择一个。\\\\r\n-   记住，你可以用`setAnimation`来在动画标签页中给你的精灵分配动画。"
      CSD U3 AnimationsMulti mirror animation: |-
        # 编辑多帧动画\\r

        \\r
        如果你的精灵能在移动的时候转身，看起来就真实多了。当用户按下不同的键时，你可以在转身之间切换。\\r
        \\r

        # 这样做\\r

        \\r
        读一下代码，并运行程序。确保你知道了精灵是如何响应方向键的。\\r
        \\r

        -   在动画标签页中，通过点击这个按钮： \!\[](\<<https://images.code.org/aee81f9cd3f63bb8a9c91ac3ab250a87-image-1475699896387.38.09>
            PM.png>) 来创建一个外星人动画的副本。\\r
        -   使用工具来反转动画。确保用这个按钮： \!\[](\<<https://images.code.org/3b10b4a612f9a7c640dc7bb18f4c2b91-image-1475699599617.33.03>
            PM.png>) 两帧都翻转了。\\r
        -   重命名新动画。\\r
        -   使用新的动画和旧的动画，这样外星人就能在移动的时候朝向正确的方向了。你觉得应该在代码的什么地方设置精灵的动画？
      CSD U3 AnimationsMulti mirror animation_2018: |-
        # 编辑多帧动画\\r

        \\r
        如果你的精灵能在移动的时候转身，看起来就真实多了。当用户按下不同的键时，你可以在转身之间切换。\\r
        \\r

        # 这样做\\r

        \\r
        读一下代码，并运行程序。确保你知道了精灵是如何响应方向键的。\\r
        \\r

        -   在动画标签页中，通过点击这个按钮： \!\[](\<<https://images.code.org/aee81f9cd3f63bb8a9c91ac3ab250a87-image-1475699896387.38.09>
            PM.png>) 来创建一个外星人动画的副本。\\r
        -   使用工具来反转动画。确保用这个按钮： \!\[](\<<https://images.code.org/3b10b4a612f9a7c640dc7bb18f4c2b91-image-1475699599617.33.03>
            PM.png>) 两帧都翻转了。\\r
        -   重命名新动画。\\r
        -   使用新的动画和旧的动画，这样外星人就能在移动的时候朝向正确的方向了。你觉得应该在代码的什么地方设置精灵的动画？
      CSD U3 AnimationsMulti mirror animation_2019: |-
        # 编辑多帧动画\\r

        \\r
        如果你的精灵能在移动的时候转身，看起来就真实多了。当用户按下不同的键时，你可以在转身之间切换。\\r
        \\r

        # 这样做\\r

        \\r
        读一下代码，并运行程序。确保你知道了精灵是如何响应方向键的。\\r
        \\r

        -   在动画标签页中，通过点击这个按钮： \!\[](\<<https://images.code.org/aee81f9cd3f63bb8a9c91ac3ab250a87-image-1475699896387.38.09>
            PM.png>) 来创建一个外星人动画的副本。\\r
        -   使用工具来反转动画。确保用这个按钮： \!\[](\<<https://images.code.org/3b10b4a612f9a7c640dc7bb18f4c2b91-image-1475699599617.33.03>
            PM.png>) 两帧都翻转了。\\r
        -   重命名新动画。\\r
        -   使用新的动画和旧的动画，这样外星人就能在移动的时候朝向正确的方向了。你觉得应该在代码的什么地方设置精灵的动画？
      CSD U3 AnimationsMulti play pause: |-
        # 播放和暂停\\r

        \\r
        你可以用`sprite.play`（精灵.播放）和`sprite.pause`（精灵.暂停）命令来播放和暂停一个精灵的动画。如果动画正在播放，或者已经被暂停了，再用同样的命令也没有影响。唯一的例外是，**如果一个非循环的动画结束了，播放会重新开始播放它**。我们一起来看看这能创造的很酷的一些行为。\\r
        \\r

        # 这样做\\r

        \\r

        -   在每条`setAnimation`命令后，用`sprite.play`命令。这会在当按下键时，重新播放走路的动画。
      CSD U3 Conditionals Apple 2-2018: "# 改变水果\\\\r\n\n\\\\r\n现在，我们知道了如何使用_如果_语句了，除了检查苹果是否被放大了两倍，还可以变大后将它变成梨。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n在画画的循环里添加一个条件，检查是否 `fruit.scale`（水果尺寸）大于2。- 如果是，那么设置新动画为\"pear\"（梨）。\\\\r\n\\\\r\n_挑战:\n你能在它变成梨时，同时让它停止变大吗？_"
      CSD U3 Conditionals Apple 2: "# 变成红色\\\\r\n\n\\\\r\n现在，我们知道了如何使用_如果_语句了，除了检查苹果是否被放大了两倍，你还可以在放大后将它变为红色。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n在画画的循环里添加一个条件，检查是否 `apple.scale`（苹果尺寸）大于2。- 如果是，那么设置新动画为\"apple_red\"（苹果_红）。\\\\r\n\\\\r\n_挑战:\n你能在苹果变红时，同时让它停止变大吗？_"
      CSD U3 Conditionals Apple 2_2018: "# 改变水果\\\\r\n\n\\\\r\n现在，我们知道了如何使用_如果_语句了，除了检查苹果是否被放大了两倍，还可以变大后将它变成梨。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n在画画的循环里添加一个条件，检查是否 `fruit.scale`（水果尺寸）大于2。- 如果是，那么设置新动画为\"pear\"（梨）。\\\\r\n\\\\r\n_挑战:\n你能在它变成梨时，同时让它停止变大吗？_"
      CSD U3 Conditionals Apple 2_2018_2019: "# 改变水果\\\\r\n\n\\\\r\n现在，我们知道了如何使用_如果_语句了，除了检查苹果是否被放大了两倍，还可以变大后将它变成梨。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n在画画的循环里添加一个条件，检查是否 `fruit.scale`（水果尺寸）大于2。- 如果是，那么设置新动画为\"pear\"（梨）。\\\\r\n\\\\r\n_挑战:\n你能在它变成梨时，同时让它停止变大吗？_"
      CSD U3 Conditionals Apple-2018: |-
        # 布尔值的更多练习\\r

        \\r
        让我们再加一个布尔表达式来检查精灵的条件。你可以用`console.log`（控制台.日志）来检查是否它的尺寸还是2。\\r
        \\r

        # 这样做\\r

        \\r

        -   添加一个`console.log`语句。\\r
        -   在`console.log`中增加一个布尔表达式来检查是否`apple.scale`（苹果.尺寸）大于2。
      CSD U3 Conditionals Apple: "# 更多的布尔练习\\\\r\n\n\\\\r\n让我们再多加一个布尔表达式来检查精灵的条件。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n这里有个正在变大的苹果精灵。开始它是绿的，当它增加到两倍时应该变成红色。我们先不用担心如何将它变红，先用一条`console.log`（命令行.打印日志）命令来检查是否它到了两倍大。\\\\r\n\\\\r\n\n-   添加一条`console.log`语句.\\\\r\n-   在`console.log`中添加一个布尔表达式，来检查是否`apple.scale`\n    大于2。"
      CSD U3 Conditionals Apple_2018: |-
        # 布尔值的更多练习\\r

        \\r
        让我们再加一个布尔表达式来检查精灵的条件。你可以用`console.log`（控制台.日志）来检查是否它的尺寸还是2。\\r
        \\r

        # 这样做\\r

        \\r

        -   添加一个`console.log`语句。\\r
        -   在`console.log`中增加一个布尔表达式来检查是否`apple.scale`（苹果.尺寸）大于2。
      CSD U3 Conditionals Apple_2018_2019: |-
        # 布尔值的更多练习\\r

        \\r
        让我们再加一个布尔表达式来检查精灵的条件。你可以用`console.log`（控制台.日志）来检查是否它的尺寸还是2。\\r
        \\r

        # 这样做\\r

        \\r

        -   添加一个`console.log`语句。\\r
        -   在`console.log`中增加一个布尔表达式来检查是否`apple.scale`（苹果.尺寸）大于2。
      CSD U3 Counters explaining counters contained 2: "# \n\n计数器模式\\\\r\n\\\\r\n这个模式是编程中最重要的模式之一。 \\\\r\n\\\\r\n\\!\\[](\\<<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56>\nPM.png>)\\\\r\n    \\\\r\n它被用来将变量的值每次增加1。你可以将它叫做**计数器模式**，因为它能让一个变量累加计数。很多地方都能用这个模式，特别是在循环中。我们先看看它是什么样的。\\\\r\n\\\\r\n\n# 这样做\\\\r\n\n\\\\r\n这个程序创建了一个叫做`counter`（计数器）的变量，然后用**计数器模式**来增加它。当运行程序时，你觉得屏幕上会看见什么？\\\\r\n\\\\r\n\\*\n**阅读程序**，并预测一下输出会是什么。\\\\r\n\\*\n**运行程序**检查一下你的预测。\\\\r\n\n-   **和同伴讨论**.\n    你能解释看到了什么吗？\\\\r\n    \\\\r"
      CSD U3 Counters explaining counters contained 2_2018: "# \n\n计数器模式\\\\r\n\\\\r\n这个模式是编程中最重要的模式之一。 \\\\r\n\\\\r\n\\!\\[](\\<<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56>\nPM.png>)\\\\r\n    \\\\r\n它被用来将变量的值每次增加1。你可以将它叫做**计数器模式**，因为它能让一个变量累加计数。很多地方都能用这个模式，特别是在循环中。我们先看看它是什么样的。\\\\r\n\\\\r\n\n# 这样做\\\\r\n\n\\\\r\n这个程序创建了一个叫做`counter`（计数器）的变量，然后用**计数器模式**来增加它。当运行程序时，你觉得屏幕上会看见什么？\\\\r\n\\\\r\n\\*\n**阅读程序**，并预测一下输出会是什么。\\\\r\n\\*\n**运行程序**检查一下你的预测。\\\\r\n\n-   **和同伴讨论**.\n    你能解释看到了什么吗？\\\\r\n    \\\\r"
      CSD U3 Counters explaining counters contained 2_2019: "# \n\n计数器模式\\\\r\n\\\\r\n这个模式是编程中最重要的模式之一。 \\\\r\n\\\\r\n\\!\\[](\\<<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56>\nPM.png>)\\\\r\n    \\\\r\n它被用来将变量的值每次增加1。你可以将它叫做**计数器模式**，因为它能让一个变量累加计数。很多地方都能用这个模式，特别是在循环中。我们先看看它是什么样的。\\\\r\n\\\\r\n\n# 这样做\\\\r\n\n\\\\r\n这个程序创建了一个叫做`counter`（计数器）的变量，然后用**计数器模式**来增加它。当运行程序时，你觉得屏幕上会看见什么？\\\\r\n\\\\r\n\\*\n**阅读程序**，并预测一下输出会是什么。\\\\r\n\\*\n**运行程序**检查一下你的预测。\\\\r\n\n-   **和同伴讨论**.\n    你能解释看到了什么吗？\\\\r\n    \\\\r"
      CSD U3 Counters explaining counters: "# \n\n计数器模式\\\\r\n\\\\r\n这个模式是编程中最重要的模式之一。 \\\\r\n\\\\r\n\\!\\[](\\<<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56>\nPM.png>)\\\\r\n    \\\\r\n它被用来将变量的值每次增加1。你可以将它叫做**计数器模式**，因为它能让一个变量累加计数。很多地方都能用这个模式，特别是在循环中。我们先看看它是什么样的。\\\\r\n\\\\r\n\n# 这样做\\\\r\n\n\\\\r\n这个程序创建了一个叫做`counter`（计数器）的变量，然后用**计数器模式**来增加它。当运行程序时，你觉得屏幕上会看见什么？\\\\r\n\\\\r\n\\*\n**阅读程序**，并预测一下输出会是什么。\\\\r\n\\*\n**运行程序**检查一下你的预测。\\\\r\n\n-   **和同伴讨论**.\n    你能解释看到了什么吗？\\\\r\n    \\\\r"
      CSD U3 Diagonal Movement: |-
        <img src="https://images.code.org/f92774863b17074adc85b8f6bbd017f2-image-1492726926884.gif"
        style="float: right; margin-left: 20px;">\\r
        \\r

        # 对角线移动\\r

        \\r
        如果只改动精灵的`x`或`y`属性， 它就只能上下或左右移动。如果你想让精灵在对角线上移动，就需要_同时_改动这两个属性。\\r
        \\r
        程序现在让老鼠直线移动到屏幕下方 - 你能改动程序，让它像图片里一样穿过屏幕对角线吗？\\r
        \\r
        _挑战:
        你能让老鼠的方向和图片中一样吗？_
      CSD U3 Diagonal Movement_2018: |-
        <img src="https://images.code.org/f92774863b17074adc85b8f6bbd017f2-image-1492726926884.gif"
        style="float: right; margin-left: 20px;">\\r
        \\r

        # 沿对角线移动\\r

        \\r
        如果只更新精灵的`x`或`y`属性，它只能直线向上下、或左右移动。如果你想让精灵沿着对角线移动，就需要_同时_更新这两个属性。\\r
        \\r
        当前的程序让老鼠直着向下移动 - 你能更新代码，让它像右边的图片里一样，沿着屏幕的对角线移动吗？\\r
        \\r
        _挑战：你能让老鼠朝着图片里同样的方向吗？_
      CSD U3 Diagonal Movement_2019: |-
        <img src="https://images.code.org/f92774863b17074adc85b8f6bbd017f2-image-1492726926884.gif"
        style="float: right; margin-left: 20px;">\\r
        \\r

        # 沿对角线移动\\r

        \\r
        如果只更新精灵的`x`或`y`属性，它只能直线向上下、或左右移动。如果你想让精灵沿着对角线移动，就需要_同时_更新这两个属性。\\r
        \\r
        当前的程序让老鼠直着向下移动 - 你能更新代码，让它像右边的图片里一样，沿着屏幕的对角线移动吗？\\r
        \\r
        _挑战：你能让老鼠朝着图片里同样的方向吗？_
      CSD U3 Direction Animations-2018: |-
        # 移动时改变图片\\r

        现在，你的条件只能做一件事情（改变精灵的x或y值），实际上在一个条件里你想放多少代码都行。游戏里通常会根据它们走的方向来改变角色的图片。\\r
        \\r

        # 这样做\\r

        使用提供的程序和图片：\\r
        \\r

        -   复制4次选择的虫子图片。\\r
        -   \-
            编辑每一幅图，让它们各自指向4个方向。\\r
        -   写代码来在按下不同的方向键时，用`sprite.setAnimation()`改变虫子精灵的图片。
      CSD U3 Direction Animations: |-
        # 移动时改变图片\\r

        现在，你的条件只能做一件事情（改变精灵的x或y值），实际上在一个条件里你想放多少代码都行。游戏里通常会根据它们走的方向来改变角色的图片。\\r
        \\r

        # 这样做\\r

        使用提供的程序和图片：\\r
        \\r

        -   复制4次选择的虫子图片。\\r
        -   \-
            编辑每一幅图，让它们各自指向4个方向。\\r
        -   写代码来在按下不同的方向键时，用`sprite.setAnimation()`改变虫子精灵的图片。
      CSD U3 Direction Animations_2018: |-
        # 移动时改变图片\\r

        现在，你的条件只能做一件事情（改变精灵的x或y值），实际上在一个条件里你想放多少代码都行。游戏里通常会根据它们走的方向来改变角色的图片。\\r
        \\r

        # 这样做\\r

        使用提供的程序和图片：\\r
        \\r

        -   复制4次选择的虫子图片。\\r
        -   \-
            编辑每一幅图，让它们各自指向4个方向。\\r
        -   写代码来在按下不同的方向键时，用`sprite.setAnimation()`改变虫子精灵的图片。
      CSD U3 Direction Animations_2018_2019: |-
        # 移动时改变图片\\r

        现在，你的条件只能做一件事情（改变精灵的x或y值），实际上在一个条件里你想放多少代码都行。游戏里通常会根据它们走的方向来改变角色的图片。\\r
        \\r

        # 这样做\\r

        使用提供的程序和图片：\\r
        \\r

        -   复制4次选择的虫子图片。\\r
        -   \-
            编辑每一幅图，让它们各自指向4个方向。\\r
        -   写代码来在按下不同的方向键时，用`sprite.setAnimation()`改变虫子精灵的图片。
      CSD U3 Direction Arrows-2018: |-
        # 向所有方向移动\\r

        通过响应`keyDown`（按下键时）事件，一旦你让精灵能向某个移动，将它向所有4个方向移动都很类似。你在这里开发的基本的简单控制，会在以后的开发的许多游戏中都用上。\\r
        \\r

        # 这样做\\r

        让虫子精灵响应右方向键的代码已经加到了这一关中。添加上另外3个方向的交互！\\r
        \\r

        -   增加三个如果语句 - 每个方向一个。\\r
        -   每个如果语句应该将精灵向方向键的方向移动。\\r
            \\r
            _提示：确保你同时考虑了轴向（x或y）的移动，**并且**是否需要增加或减少这个值。_
      CSD U3 Direction Arrows_2018: |-
        # 向所有方向移动\\r

        通过响应`keyDown`（按下键时）事件，一旦你让精灵能向某个移动，将它向所有4个方向移动都很类似。你在这里开发的基本的简单控制，会在以后的开发的许多游戏中都用上。\\r
        \\r

        # 这样做\\r

        让虫子精灵响应右方向键的代码已经加到了这一关中。添加上另外3个方向的交互！\\r
        \\r

        -   增加三个如果语句 - 每个方向一个。\\r
        -   每个如果语句应该将精灵向方向键的方向移动。\\r
            \\r
            _提示：确保你同时考虑了轴向（x或y）的移动，**并且**是否需要增加或减少这个值。_
      CSD U3 Direction Arrows_2018_2019: |-
        # 向所有方向移动\\r

        通过响应`keyDown`（按下键时）事件，一旦你让精灵能向某个移动，将它向所有4个方向移动都很类似。你在这里开发的基本的简单控制，会在以后的开发的许多游戏中都用上。\\r
        \\r

        # 这样做\\r

        让虫子精灵响应右方向键的代码已经加到了这一关中。添加上另外3个方向的交互！\\r
        \\r

        -   增加三个如果语句 - 每个方向一个。\\r
        -   每个如果语句应该将精灵向方向键的方向移动。\\r
            \\r
            _提示：确保你同时考虑了轴向（x或y）的移动，**并且**是否需要增加或减少这个值。_
      CSD U3 Draw Loop Plugged orange and green: |-
        <img
        src="https://images.code.org/2b5b2ce029e2f1d7377db7dcd7760cf0-image-1492031771047.15.45
        PM.png" style="float:right;width:150px">\\r
        \\r

        # 使用循环\\r

        \\r
        现在，该你使用循环做些东西了。记住，循环里的代码会被游戏实验室不停的运行。\\r
        \\r

        # 这样做\\r

        \\r
        \*
        增加代码到程序中，这样你的画也会有橙色的圆圈。\\r

        -   当你的程序和右边的图片很像了时，就继续。
      CSD U3 Draw Loop Plugged orange and green_2018: |-
        <img
        src="https://images.code.org/2b5b2ce029e2f1d7377db7dcd7760cf0-image-1492031771047.15.45
        PM.png" style="float:right;width:150px">\\r
        \\r

        # 使用循环\\r

        \\r
        现在，该你使用循环做些东西了。记住，循环里的代码会被游戏实验室不停的运行。\\r
        \\r

        # 这样做\\r

        \\r
        \*
        增加代码到程序中，这样你的画也会有橙色的圆圈。\\r

        -   当你的程序和右边的图片很像了时，就继续。
      CSD U3 Draw Loop Plugged orange and green_2019: |-
        <img
        src="https://images.code.org/2b5b2ce029e2f1d7377db7dcd7760cf0-image-1492031771047.15.45
        PM.png" style="float:right;width:150px">\\r
        \\r

        # 使用循环\\r

        \\r
        现在，该你使用循环做些东西了。记住，循环里的代码会被游戏实验室不停的运行。\\r
        \\r

        # 这样做\\r

        \\r
        \*
        增加代码到程序中，这样你的画也会有橙色的圆圈。\\r

        -   当你的程序和右边的图片很像了时，就继续。
      CSD U3 Draw Loop Plugged predict 1 embed: |-
        # 预测\\r

        \\r
        这个程序在画图循环的里面和外面都有些代码。记住：\\r
        \\r
        \*
        首先，将你的所有代码都放到画图循环外运行一次。\\r

        -   将你的代码都放到画图循环里不停的运行\\r
            \\r
            这个程序会做什么？将你的预测写下来。
      CSD U3 Draw Loop Plugged predict 1: |-
        # 画图循环\\r

        \\r
        这是一个画图循环的例子。\\r
        \\r

        # 这样做\\r

        -   运行代码看看它是如何工作的。\\r
        -   和你的伙伴讨论一下，这和视频中的手翻书是否看起来是一样的。为什么是或不是呢？
      CSD U3 Draw Loop Plugged predict 1_2018: |-
        # 画图循环\\r

        \\r
        这是一个画图循环的例子。\\r
        \\r

        # 这样做\\r

        -   运行代码看看它是如何工作的。\\r
        -   和你的伙伴讨论一下，这和视频中的手翻书是否看起来是一样的。为什么是或不是呢？
      CSD U3 Draw Loop Plugged predict 1_2019: |-
        # 画图循环\\r

        \\r
        这是一个画图循环的例子。\\r
        \\r

        # 这样做\\r

        -   运行代码看看它是如何工作的。\\r
        -   和你的伙伴讨论一下，这和视频中的手翻书是否看起来是一样的。为什么是或不是呢？
      CSD U3 Draw Loop Plugged predict 2 embed: |-
        # 预测\\r

        \\r
        这个程序有一处小小的的不同，这会让它的结果也有点不同。再提醒一次：\\r
        \\r

        -   所有画图循环外的代码都会先执行，只执行一次。\\r
        -   所有循环内的代码都会循环不断的执行\\r
            \\r
            这个程序会做什么？把你的预测写下来。
      CSD U3 Draw Loop Plugged predict 2 embed_2018: |-
        # 预测\\r

        \\r
        这个程序有一处小小的的不同，这会让它的结果也有点不同。再提醒一次：\\r
        \\r

        -   所有画图循环外的代码都会先执行，只执行一次。\\r
        -   所有循环内的代码都会循环不断的执行\\r
            \\r
            这个程序会做什么？把你的预测写下来。
      CSD U3 Draw Loop Plugged predict 2 embed_2019: |-
        # 预测\\r

        \\r
        这个程序有一处小小的的不同，这会让它的结果也有点不同。再提醒一次：\\r
        \\r

        -   所有画图循环外的代码都会先执行，只执行一次。\\r
        -   所有循环内的代码都会循环不断的执行\\r
            \\r
            这个程序会做什么？把你的预测写下来。
      CSD U3 Draw Loop Plugged update your scene: |-
        # 扩展你的场景\\r

        \\r
        这是你上一次课做的精灵场景。你需要做些更新，加上画图循环和精灵属性。\\r
        \\r
        <img
        src="https://images.code.org/ce257c4d91da460c9c2add1733873769-image-1492209174198.32.29
        PM.png" style="float:right;height:100px">\\r
        \\r

        # 这样做\\r

        \\r

        -   在程序里加一个画图循环（只需要一个）。\\r
        -   用套索选择器（点击，按住后拖动）来选择你的代码，并放到画图循环中。如果发生任何错误，用ctrl+z可以撤销上一步操作。\\r
        -   加入代码来更新你的精灵的sprite.x`,`sprite.y`，或`sprite.rotation`属性，来让它们移动。你可以一起用上`randomNumber()\`（随机数）。\\r
      CSD U3 Draw Loop Plugged update your scene_2018: |-
        # 扩展你的场景\\r

        \\r
        这是你上一次课做的精灵场景。你需要做些更新，加上画图循环和精灵属性。\\r
        \\r
        <img
        src="https://images.code.org/ce257c4d91da460c9c2add1733873769-image-1492209174198.32.29
        PM.png" style="float:right;height:100px">\\r
        \\r

        # 这样做\\r

        \\r

        -   在程序里加一个画图循环（只需要一个）。\\r
        -   用套索选择器（点击，按住后拖动）来选择你的代码，并放到画图循环中。如果发生任何错误，用ctrl+z可以撤销上一步操作。\\r
        -   加入代码来更新你的精灵的sprite.x`,`sprite.y`，或`sprite.rotation`属性，来让它们移动。你可以一起用上`randomNumber()\`（随机数）。\\r
      CSD U3 Draw Loop Plugged update your scene_2019: |-
        # 扩展你的场景\\r

        \\r
        这是你上一次课做的精灵场景。你需要做些更新，加上画图循环和精灵属性。\\r
        \\r
        <img
        src="https://images.code.org/ce257c4d91da460c9c2add1733873769-image-1492209174198.32.29
        PM.png" style="float:right;height:100px">\\r
        \\r

        # 这样做\\r

        \\r

        -   在程序里加一个画图循环（只需要一个）。\\r
        -   用套索选择器（点击，按住后拖动）来选择你的代码，并放到画图循环中。如果发生任何错误，用ctrl+z可以撤销上一步操作。\\r
        -   加入代码来更新你的精灵的sprite.x`,`sprite.y`，或`sprite.rotation`属性，来让它们移动。你可以一起用上`randomNumber()\`（随机数）。\\r
      CSD U3 Draw Loop Plugged wiggle sprite rotation: |-
        <img src="https://images.code.org/03f98fedbe59ceb5ef0a8530cb81c367-image-1492040405357.gif" style="float:right;height:150px">

        # 更新属性

        这个关组合了一些已经见过的技能。这会在背景绘制椭圆，还会更新精灵的属性。这次，它会改变精灵的`sprite.rotation`属性。

        # 这样做

        这个动画已经更新了精灵的一个旋转属性，使它看起来像是在晃动。

        -   运行一下程序，看看它是如何工作的。
        -   加入代码让其它外星人也像第一个一样晃动。
        -   当你的程序和右边的图片一样时就可以进入下一步了。
      CSD U3 Draw Loop Plugged wiggle sprite rotation_2018: |-
        <img src="https://images.code.org/03f98fedbe59ceb5ef0a8530cb81c367-image-1492040405357.gif" style="float:right;height:150px">

        # 更新属性

        这个关组合了一些已经见过的技能。这会在背景绘制椭圆，还会更新精灵的属性。这次，它会改变精灵的`sprite.rotation`属性。

        # 这样做

        这个动画已经更新了精灵的一个旋转属性，使它看起来像是在晃动。

        -   运行一下程序，看看它是如何工作的。
        -   加入代码让其它外星人也像第一个一样晃动。
        -   当你的程序和右边的图片一样时就可以进入下一步了。
      CSD U3 Draw Loop Plugged wiggle sprite rotation_2019: |-
        <img src="https://images.code.org/03f98fedbe59ceb5ef0a8530cb81c367-image-1492040405357.gif" style="float:right;height:150px">

        # 更新属性

        这个关组合了一些已经见过的技能。这会在背景绘制椭圆，还会更新精灵的属性。这次，它会改变精灵的`sprite.rotation`属性。

        # 这样做

        这个动画已经更新了精灵的一个旋转属性，使它看起来像是在晃动。

        -   运行一下程序，看看它是如何工作的。
        -   加入代码让其它外星人也像第一个一样晃动。
        -   当你的程序和右边的图片一样时就可以进入下一步了。
      CSD U3 Draw Loop Plugged wiggle sprite x: |-
        <img src="https://images.code.org/71ae26edcc3286ff4d7697aaffecf144-image-1492036602240.gif" style="float:right;height:150px">

        # 更新属性

        精灵上的属性让计算机知道在何处，如何画它们。两个通用的属性是`sprite.x`和`sprite.y`，用来控制精灵的位置。给这些属性赋值，会让你的精灵移动到屏幕上新的位置。

        # 这样做

        这个动画已经更新了一个精灵的 x 属性，让它看起来像是在晃动。

        -   运行程序来看看它是如何工作的。
        -   编辑程序代码，让第二个精灵也像第一个一样晃动。
        -   当你的程序看起来像右边的图片时，就可以开始下一步了。
      CSD U3 Draw Loop Plugged wiggle sprite x_2018: |-
        <img src="https://images.code.org/71ae26edcc3286ff4d7697aaffecf144-image-1492036602240.gif" style="float:right;height:150px">

        # 更新属性

        精灵上的属性让计算机知道在何处，如何画它们。两个通用的属性是`sprite.x`和`sprite.y`，用来控制精灵的位置。给这些属性赋值，会让你的精灵移动到屏幕上新的位置。

        # 这样做

        这个动画已经更新了一个精灵的 x 属性，让它看起来像是在晃动。

        -   运行程序来看看它是如何工作的。
        -   编辑程序代码，让第二个精灵也像第一个一样晃动。
        -   当你的程序看起来像右边的图片时，就可以开始下一步了。
      CSD U3 Draw Loop Plugged wiggle sprite x_2019: |-
        <img src="https://images.code.org/71ae26edcc3286ff4d7697aaffecf144-image-1492036602240.gif" style="float:right;height:150px">

        # 更新属性

        精灵上的属性让计算机知道在何处，如何画它们。两个通用的属性是`sprite.x`和`sprite.y`，用来控制精灵的位置。给这些属性赋值，会让你的精灵移动到屏幕上新的位置。

        # 这样做

        这个动画已经更新了一个精灵的 x 属性，让它看起来像是在晃动。

        -   运行程序来看看它是如何工作的。
        -   编辑程序代码，让第二个精灵也像第一个一样晃动。
        -   当你的程序看起来像右边的图片时，就可以开始下一步了。
      CSD U3 Draw Loop Plugged wiggle sprite y: |-
        <img src="https://images.code.org/1e22fb89bcdf99168aee6324d17137ee-image-1493138232702.gif" style="float:right;height:150px">

        # 更新属性

        这和上一关非常类似。但是这次，你要自己加一个画图循环。

        # 这样做

        -   在程序的最底部添加画图循环模块。
        -   将所有模块都挪到画图循环里。
        -   当你的程序和右边的图片一样时就可以进入下一步了。
      CSD U3 Draw Loop Plugged wiggle sprite y_2018: |-
        <img src="https://images.code.org/1e22fb89bcdf99168aee6324d17137ee-image-1493138232702.gif" style="float:right;height:150px">

        # 更新属性

        这和上一关非常类似。但是这次，你要自己加一个画图循环。

        # 这样做

        -   在程序的最底部添加画图循环模块。
        -   将所有模块都挪到画图循环里。
        -   当你的程序和右边的图片一样时就可以进入下一步了。
      CSD U3 Draw Loop Plugged wiggle sprite y_2019: |-
        <img src="https://images.code.org/1e22fb89bcdf99168aee6324d17137ee-image-1493138232702.gif" style="float:right;height:150px">

        # 更新属性

        这和上一关非常类似。但是这次，你要自己加一个画图循环。

        # 这样做

        -   在程序的最底部添加画图循环模块。
        -   将所有模块都挪到画图循环里。
        -   当你的程序和右边的图片一样时就可以进入下一步了。
      CSD U3 Drawing Squares to Corners: |-
        <img src="https://images.code.org/9e09a96901b1e5ad9d5869b2b1fd3897-image-1498671940133.45.12
        AM.png" style="float:right;width:150px">\\r
        \\r

        # 在角落里放置正方形\\r

        \\r
        游戏实验室中很重要的一部分，就是理解位置。记住，你可以任何时候打开网格，或者用鼠标悬停来查看所需位置的x和y值。\\r
        \\r

        # 这样做\\r

        \\r

        -   像图片中那样，将两个矩形精确的放在屏幕的角落里。
      CSD U3 Drawing Squares to Corners_2018: |-
        <img src="https://images.code.org/9e09a96901b1e5ad9d5869b2b1fd3897-image-1498671940133.45.12
        AM.png" style="float:right;width:150px">\\r
        \\r

        # 在角落里放置正方形\\r

        \\r
        游戏实验室中很重要的一部分，就是理解位置。记住，你可以任何时候打开网格，或者用鼠标悬停来查看所需位置的x和y值。\\r
        \\r

        # 这样做\\r

        \\r

        -   像图片中那样，将两个矩形精确的放在屏幕的角落里。
      CSD U3 Drawing Squares to Corners_2019: |-
        <img src="https://images.code.org/9e09a96901b1e5ad9d5869b2b1fd3897-image-1498671940133.45.12
        AM.png" style="float:right;width:150px">\\r
        \\r

        # 在角落里放置正方形\\r

        \\r
        游戏实验室中很重要的一部分，就是理解位置。记住，你可以任何时候打开网格，或者用鼠标悬停来查看所需位置的x和y值。\\r
        \\r

        # 这样做\\r

        \\r

        -   像图片中那样，将两个矩形精确的放在屏幕的角落里。
      CSD U3 Else_2018: |-
        # 如果我的条件不为真呢?

        <img src="https://images.code.org/1a997d78fcd88efeb9e6dc5a02aa88e8-image-1464706463138.53.58.png" width="125px" style="float:right">

        有时，我们要告诉程序在条件为`真`时做什么，但也有时候要决定为`假`时做什么。在条件模块下点击加号按钮，可以增加一个叫做`否则`的章节。 `否则`章节会在`如果`条件为`假`时运行。

        # 这样做

        齿轮又回来了。上次使用它们时，在按下空格键时让他们旋转。这次在按下空格键时让它们往一个方向旋转，在没按下时往另一个方向旋转。
        <img src="https://images.code.org/b074d47ca8dfa5ab3bfd08344b4f4e42-image-1464706389475.gif" style="float:right">

        -   点击如果模块下的_加号_按钮来增加一个否则章节。
        -   增加命令来让齿轮往按下空格时的相反方向转动。
      CSD U3 Else_2019: |-
        # 如果我的条件不为真呢?

        <img src="https://images.code.org/1a997d78fcd88efeb9e6dc5a02aa88e8-image-1464706463138.53.58.png" width="125px" style="float:right">

        有时，我们要告诉程序在条件为`真`时做什么，但也有时候要决定为`假`时做什么。在条件模块下点击加号按钮，可以增加一个叫做`否则`的章节。 `否则`章节会在`如果`条件为`假`时运行。

        # 这样做

        齿轮又回来了。上次使用它们时，在按下空格键时让他们旋转。这次在按下空格键时让它们往一个方向旋转，在没按下时往另一个方向旋转。
        <img src="https://images.code.org/b074d47ca8dfa5ab3bfd08344b4f4e42-image-1464706389475.gif" style="float:right">

        -   点击如果模块下的_加号_按钮来增加一个否则章节。
        -   增加命令来让齿轮往按下空格时的相反方向转动。
      CSD U3 Entertainment Sample 1: |-
        # 外星人跳跃\\r

        \\r
        按下“运行”按钮来播放左边的游戏。你能用空格键让外星人跳起来，并用方向键让它左右移动。收集星星可以得分，如果得到足够高的分，背景就会改变。
      CSD U3 Entertainment Sample 1_2018: |-
        # 外星人跳跃\\r

        \\r
        按下“运行”按钮来播放左边的游戏。你能用空格键让外星人跳起来，并用方向键让它左右移动。收集星星可以得分，如果得到足够高的分，背景就会改变。
      CSD U3 Entertainment Sample 1_2019: |-
        # 外星人跳跃\\r

        \\r
        按下“运行”按钮来播放左边的游戏。你能用空格键让外星人跳起来，并用方向键让它左右移动。收集星星可以得分，如果得到足够高的分，背景就会改变。
      CSD U3 Entertainment Sample 2: |-
        # 饥饿的小兔子\\r

        \\r
        兔子饿了, 它正在寻找蘑菇和胡萝卜作为晚餐。\\r
        \\r
        为了赢得胜利，你需要找到一个晚餐碗，然后收集至少10个胡萝卜和5个蘑菇。\\r
        \\r
        确保躲过虫子。瓢虫和蜗牛会吃掉你的食物，蜜蜂会蛰你，让你的所有东西都掉下来！\\r
        \\r
        用空格键来跳跃。你可以通过跳到瓢虫和蜗牛上来把它们踩死。\\r
        \\r
        单击 "运行" 以启动程序。
      CSD U3 Entertainment Sample 2_2018: |-
        # 饥饿的小兔子\\r

        \\r
        兔子饿了, 它正在寻找蘑菇和胡萝卜作为晚餐。\\r
        \\r
        为了赢得胜利，你需要找到一个晚餐碗，然后收集至少10个胡萝卜和5个蘑菇。\\r
        \\r
        确保躲过虫子。瓢虫和蜗牛会吃掉你的食物，蜜蜂会蛰你，让你的所有东西都掉下来！\\r
        \\r
        用空格键来跳跃。你可以通过跳到瓢虫和蜗牛上来把它们踩死。\\r
        \\r
        单击 "运行" 以启动程序。
      CSD U3 Entertainment Sample 2_2019: |-
        # 饥饿的小兔子\\r

        \\r
        兔子饿了, 它正在寻找蘑菇和胡萝卜作为晚餐。\\r
        \\r
        为了赢得胜利，你需要找到一个晚餐碗，然后收集至少10个胡萝卜和5个蘑菇。\\r
        \\r
        确保躲过虫子。瓢虫和蜗牛会吃掉你的食物，蜜蜂会蛰你，让你的所有东西都掉下来！\\r
        \\r
        用空格键来跳跃。你可以通过跳到瓢虫和蜗牛上来把它们踩死。\\r
        \\r
        单击 "运行" 以启动程序。
      CSD U3 Entertainment Sample 3: |-
        # 会动的漫画书\\r

        \\r
        将图片、文本和一些巧妙的动画组合在一起，可以做出非常有趣的漫画或者图片故事。点击“运行”来看看示例。\\r
      CSD U3 Entertainment Sample 3_2018: |-
        # 会动的漫画书\\r

        \\r
        将图片、文本和一些巧妙的动画组合在一起，可以做出非常有趣的漫画或者图片故事。点击“运行”来看看示例。\\r
      CSD U3 Entertainment Sample 3_2019: |-
        # 会动的漫画书\\r

        \\r
        将图片、文本和一些巧妙的动画组合在一起，可以做出非常有趣的漫画或者图片故事。点击“运行”来看看示例。\\r
      CSD U3 Entertainment Sample 4: |-
        # 印台\\r

        \\r
        点击“运行”来开始程序。然后用印台来画简单颜色和动物邮票的图画。\\r
      CSD U3 Entertainment Sample 4_2018: |-
        # 印台\\r

        \\r
        点击“运行”来开始程序。然后用印台来画简单颜色和动物邮票的图画。\\r
      CSD U3 Entertainment Sample 4_2019: |-
        # 印台\\r

        \\r
        点击“运行”来开始程序。然后用印台来画简单颜色和动物邮票的图画。\\r
      CSD U3 Functions Add Change Background: |-
        # 改变分数和背景\\r

        \\r
        一旦你得到了10个硬币，就该庆祝了。你应该将背景变得很有趣。\\r
        \\r
        <img
        src="https://images.code.org/943c67e59502334fc65a25e690076bdb-image-1475030156530.33.54
        PM.png" style="float:right; height:100px">\\r
        \\r

        # 这样做\\r

        \\r

        -   用一个**如果语句**和两个单独的函数来画背景。\\r
        -   \*
            然后在循环外写函数。你需要决定什么是"简单"或"疯狂"的背景。玩得愉快！
      CSD U3 Functions Add Change Background_2018: |-
        # 改变分数和背景\\r

        \\r
        一旦你得到了10个硬币，就该庆祝了。你应该将背景变得很有趣。\\r
        \\r
        <img
        src="https://images.code.org/943c67e59502334fc65a25e690076bdb-image-1475030156530.33.54
        PM.png" style="float:right; height:100px">\\r
        \\r

        # 这样做\\r

        \\r

        -   用一个**如果语句**和两个单独的函数来画背景。\\r
        -   \*
            然后在循环外写函数。你需要决定什么是"简单"或"疯狂"的背景。玩得愉快！
      CSD U3 Functions Add Change Background_2019: |-
        # 改变分数和背景\\r

        \\r
        一旦你得到了10个硬币，就该庆祝了。你应该将背景变得很有趣。\\r
        \\r
        <img
        src="https://images.code.org/943c67e59502334fc65a25e690076bdb-image-1475030156530.33.54
        PM.png" style="float:right; height:100px">\\r
        \\r

        # 这样做\\r

        \\r

        -   用一个**如果语句**和两个单独的函数来画背景。\\r
        -   \*
            然后在循环外写函数。你需要决定什么是"简单"或"疯狂"的背景。玩得愉快！
      CSD U3 Functions Add IsTouching: |-
        # 接住硬币，增加得分\\r

        \\r
        让我们改变得分来完成这个游戏。需要能知道什么时候小兔碰到了金币，并重置它。\\r
        \\r

        # 这样做\\r

        \\r

        -   用一个**如果语句**和**isTouching**（碰到）模块来在小兔子接住硬币时增加分数。\\r
        -   确保 **调用了你的函数** 来在被碰到时重置硬币。\\r
        -   玩这个游戏，并 **随机决定硬币的速度** 来让游戏更好玩。
      CSD U3 Functions Add IsTouching_2018: |-
        # 接住硬币，增加得分\\r

        \\r
        让我们改变得分来完成这个游戏。需要能知道什么时候小兔碰到了金币，并重置它。\\r
        \\r

        # 这样做\\r

        \\r

        -   用一个**如果语句**和**isTouching**（碰到）模块来在小兔子接住硬币时增加分数。\\r
        -   确保 **调用了你的函数** 来在被碰到时重置硬币。\\r
        -   玩这个游戏，并 **随机决定硬币的速度** 来让游戏更好玩。
      CSD U3 Functions Add IsTouching_2019: |-
        # 接住硬币，增加得分\\r

        \\r
        让我们改变得分来完成这个游戏。需要能知道什么时候小兔碰到了金币，并重置它。\\r
        \\r

        # 这样做\\r

        \\r

        -   用一个**如果语句**和**isTouching**（碰到）模块来在小兔子接住硬币时增加分数。\\r
        -   确保 **调用了你的函数** 来在被碰到时重置硬币。\\r
        -   玩这个游戏，并 **随机决定硬币的速度** 来让游戏更好玩。
      CSD U3 Functions Randomize Sprite: |-
        # 改变函数\\r

        \\r
        用函数的好处在于它能去掉重复的代码，这样重复的代码能够在不同的地方很容易的用到了。只改变创建的函数，程序会在函数被调用的地方，都运行改过的新代码。\\r
        \\r

        # 这样做\\r

        \\r
        改变`setFlyer`函数，让飞鸟从0到400的随机的Y值开始，并每次在重置时，使用一个随机的速度。
      CSD U3 Functions Randomize Sprite_2018: |-
        # 改变函数\\r

        \\r
        用函数的好处在于它能去掉重复的代码，这样重复的代码能够在不同的地方很容易的用到了。只改变创建的函数，程序会在函数被调用的地方，都运行改过的新代码。\\r
        \\r

        # 这样做\\r

        \\r
        改变`setFlyer`函数，让飞鸟从0到400的随机的Y值开始，并每次在重置时，使用一个随机的速度。
      CSD U3 Functions Randomize Sprite_2019: |-
        # 改变函数\\r

        \\r
        用函数的好处在于它能去掉重复的代码，这样重复的代码能够在不同的地方很容易的用到了。只改变创建的函数，程序会在函数被调用的地方，都运行改过的新代码。\\r
        \\r

        # 这样做\\r

        \\r
        改变`setFlyer`函数，让飞鸟从0到400的随机的Y值开始，并每次在重置时，使用一个随机的速度。
      CSD U3 Functions Reset Sprite: |-
        # 多次调用函数\\r

        \\r
        在程序中，会经常在多个地方使用相同的代码。一旦创建了一个函数，你可以随意调用它多次。\\r
        \\r

        # 这样做\\r

        \\r
        这个代码创建了一个精灵，能够穿过屏幕一次。你能让它再回来穿过屏幕吗？\\r
        \\r
        \*
        **注意：** 函数在你的程序开始时已经被调用了一次了。\\r
        \*
        阅读循环中**如果语句**的条件。你觉得它为什么会在这里？\\r

        -   使用这个如果语句和函数来让精灵穿过屏幕多次。
      CSD U3 Functions Reset Sprite_2018: |-
        # 多次调用函数\\r

        \\r
        在程序中，会经常在多个地方使用相同的代码。一旦创建了一个函数，你可以随意调用它多次。\\r
        \\r

        # 这样做\\r

        \\r
        这个代码创建了一个精灵，能够穿过屏幕一次。你能让它再回来穿过屏幕吗？\\r
        \\r
        \*
        **注意：** 函数在你的程序开始时已经被调用了一次了。\\r
        \*
        阅读循环中**如果语句**的条件。你觉得它为什么会在这里？\\r

        -   使用这个如果语句和函数来让精灵穿过屏幕多次。
      CSD U3 Functions Reset Sprite_2019: |-
        # 多次调用函数\\r

        \\r
        在程序中，会经常在多个地方使用相同的代码。一旦创建了一个函数，你可以随意调用它多次。\\r
        \\r

        # 这样做\\r

        \\r
        这个代码创建了一个精灵，能够穿过屏幕一次。你能让它再回来穿过屏幕吗？\\r
        \\r
        \*
        **注意：** 函数在你的程序开始时已经被调用了一次了。\\r
        \*
        阅读循环中**如果语句**的条件。你觉得它为什么会在这里？\\r

        -   使用这个如果语句和函数来让精灵穿过屏幕多次。
      CSD U3 Input Fish: |-
        # 方向和鱼\\r

        \\r
        这条鱼回来了。你能让鱼只在按下左方向键时向左移动吗？\\r
        \\r

        # 这样做\\r

        \\r

        -   增加一个如果语句来检查是否左方向键被按下了。\\r
        -   在如果语句中用移动命令来移动鱼。
      CSD U3 Input Fish_2018: |-
        # 方向和鱼\\r

        \\r
        这条鱼回来了。你能让鱼只在按下左方向键时向左移动吗？\\r
        \\r

        # 这样做\\r

        \\r

        -   增加一个如果语句来检查是否左方向键被按下了。\\r
        -   在如果语句中用移动命令来移动鱼。
      CSD U3 Input Fish_2019: |-
        # 方向和鱼\\r

        \\r
        这条鱼回来了。你能让鱼只在按下左方向键时向左移动吗？\\r
        \\r

        # 这样做\\r

        \\r

        -   增加一个如果语句来检查是否左方向键被按下了。\\r
        -   在如果语句中用移动命令来移动鱼。
      CSD U3 Input Gears: |-
        # 齿轮和条件语句\\r

        \\r
        让我们只让齿轮在按住空格键时才旋转。\\r
        \\r

        # 这样做\\r

        \\r

        -   增加一个`if` （如果）语句。\\r
        -   用`keyDown`（按下键时）当做如果语句的输入来检查是否空格键被按下了。\\r
        -   把让齿轮旋转的代码挪到`if`（如果）语句中。
      CSD U3 Input Gears_2018: |-
        # 齿轮和条件语句\\r

        \\r
        让我们只让齿轮在按住空格键时才旋转。\\r
        \\r

        # 这样做\\r

        \\r

        -   增加一个`if` （如果）语句。\\r
        -   用`keyDown`（按下键时）当做如果语句的输入来检查是否空格键被按下了。\\r
        -   把让齿轮旋转的代码挪到`if`（如果）语句中。
      CSD U3 Input Gears_2019: |-
        # 齿轮和条件语句\\r

        \\r
        让我们只让齿轮在按住空格键时才旋转。\\r
        \\r

        # 这样做\\r

        \\r

        -   增加一个`if` （如果）语句。\\r
        -   用`keyDown`（按下键时）当做如果语句的输入来检查是否空格键被按下了。\\r
        -   把让齿轮旋转的代码挪到`if`（如果）语句中。
      CSD U3 Interactive Card Background: |-
        # 布置背景\\r

        在开始项目前，你应该已经完成了交互卡片活动了，并且你会想用纸来开发程序了。做好准备，是成功创建一个程序的**最重要的**元素之一！\\r
        \\r

        # 这样做\\r

        参考你的活动计划表来帮助你布置将作为卡片背景的形状。\\r
        \\r

        -   首先，指出在你的图片上最底下一层是什么（应该用`background()`模块），并将它加到循环的最上面。\\r
        -   接下来，按照顺序将每一层布置出来。\\r
        -   最后，在这个章节的代码最上面增加一个注释，来说明这些代码做了什么。如果在其中有很复杂的代码（比如用来画树或者房子的），也给它们加一些注释。\\r
            \\r
            **挑战：**
            你能用变量或者`randomNumber()`来在背景层增加一些小的动画吗？
      CSD U3 Interactive Card Background_2018: |-
        # 布置背景\\r

        在开始项目前，你应该已经完成了交互卡片活动了，并且你会想用纸来开发程序了。做好准备，是成功创建一个程序的**最重要的**元素之一！\\r
        \\r

        # 这样做\\r

        参考你的活动计划表来帮助你布置将作为卡片背景的形状。\\r
        \\r

        -   首先，指出在你的图片上最底下一层是什么（应该用`background()`模块），并将它加到循环的最上面。\\r
        -   接下来，按照顺序将每一层布置出来。\\r
        -   最后，在这个章节的代码最上面增加一个注释，来说明这些代码做了什么。如果在其中有很复杂的代码（比如用来画树或者房子的），也给它们加一些注释。\\r
            \\r
            **挑战：**
            你能用变量或者`randomNumber()`来在背景层增加一些小的动画吗？
      CSD U3 Interactive Card Background_2019: |-
        # 布置背景\\r

        在开始项目前，你应该已经完成了交互卡片活动了，并且你会想用纸来开发程序了。做好准备，是成功创建一个程序的**最重要的**元素之一！\\r
        \\r

        # 这样做\\r

        参考你的活动计划表来帮助你布置将作为卡片背景的形状。\\r
        \\r

        -   首先，指出在你的图片上最底下一层是什么（应该用`background()`模块），并将它加到循环的最上面。\\r
        -   接下来，按照顺序将每一层布置出来。\\r
        -   最后，在这个章节的代码最上面增加一个注释，来说明这些代码做了什么。如果在其中有很复杂的代码（比如用来画树或者房子的），也给它们加一些注释。\\r
            \\r
            **挑战：**
            你能用变量或者`randomNumber()`来在背景层增加一些小的动画吗？
      CSD U3 Interactive Card Other Conditionals: "# 其它条件\\\\r\n\n卡牌里的_惊喜_来源于不直接响应用户输入，而是牌的其它元素的条件语句。这些条件能被通过用户输入而更新的变量触发，或者精灵移动到屏幕的某个部分。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n对于交互表里剩下的条目：\\\\r\n\\\\r\n\\*\n在循环中增加一个`如果`模块（如果你需要一个应变的行为，可以用`如果-否则`模块）。\\\\r\n\n-   在条件里增加一个合适的比较模块。（如：`<`，`>`，或`==`）。\\\\r\n-   在`如果`模块中增加需要的行动。\\\\r\n    \\\\r\n    **挑战：**\n    你能通过将它们组合在一起或者用组合的布尔来创造出巧妙的条件逻辑吗？"
      CSD U3 Interactive Card Other Conditionals_2018: "# 其它条件\\\\r\n\n卡牌里的_惊喜_来源于不直接响应用户输入，而是牌的其它元素的条件语句。这些条件能被通过用户输入而更新的变量触发，或者精灵移动到屏幕的某个部分。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n对于交互表里剩下的条目：\\\\r\n\\\\r\n\\*\n在循环中增加一个`如果`模块（如果你需要一个应变的行为，可以用`如果-否则`模块）。\\\\r\n\n-   在条件里增加一个合适的比较模块。（如：`<`，`>`，或`==`）。\\\\r\n-   在`如果`模块中增加需要的行动。\\\\r\n    \\\\r\n    **挑战：**\n    你能通过将它们组合在一起或者用组合的布尔来创造出巧妙的条件逻辑吗？"
      CSD U3 Interactive Card Other Conditionals_2019: "# 其它条件\\\\r\n\n卡牌里的_惊喜_来源于不直接响应用户输入，而是牌的其它元素的条件语句。这些条件能被通过用户输入而更新的变量触发，或者精灵移动到屏幕的某个部分。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n对于交互表里剩下的条目：\\\\r\n\\\\r\n\\*\n在循环中增加一个`如果`模块（如果你需要一个应变的行为，可以用`如果-否则`模块）。\\\\r\n\n-   在条件里增加一个合适的比较模块。（如：`<`，`>`，或`==`）。\\\\r\n-   在`如果`模块中增加需要的行动。\\\\r\n    \\\\r\n    **挑战：**\n    你能通过将它们组合在一起或者用组合的布尔来创造出巧妙的条件逻辑吗？"
      CSD U3 Keyboard Input Challenge-2018: |-
        # 挑战\\r

        _在尝试挑战前，先与你的老师商量一下。_\\r
        \\r
        这是前几关中你做过的虫子的程序。选择一个或几个挑战，或者添加一个你自己的功能！\\r
        \\r

        -   用空格键来控制你的虫子精灵的另一个属性，比如旋转或者缩放。\\r
        -   \*
            添加一些随机数到移动过程里。\\r
        -   添加第二个精灵，并用另一组键来控制它（一般大家会用"w", "a", "s", 和 "d"）。\\r
        -   在背景中加一些形状来让场景看起来更有趣。
      CSD U3 Keyboard Input Challenge: |-
        # 挑战\\r

        _在尝试挑战前，先与你的老师商量一下。_\\r
        \\r
        这是前几关中你做过的虫子的程序。选择一个或几个挑战，或者添加一个你自己的功能！\\r
        \\r

        -   用空格键来控制你的虫子精灵的另一个属性，比如旋转或者缩放。\\r
        -   \*
            添加一些随机数到移动过程里。\\r
        -   添加第二个精灵，并用另一组键来控制它（一般大家会用"w", "a", "s", 和 "d"）。\\r
        -   在背景中加一些形状来让场景看起来更有趣。
      CSD U3 Keyboard Input Challenge_2018: |-
        # 挑战\\r

        _在尝试挑战前，先与你的老师商量一下。_\\r
        \\r
        这是前几关中你做过的虫子的程序。选择一个或几个挑战，或者添加一个你自己的功能！\\r
        \\r

        -   用空格键来控制你的虫子精灵的另一个属性，比如旋转或者缩放。\\r
        -   \*
            添加一些随机数到移动过程里。\\r
        -   添加第二个精灵，并用另一组键来控制它（一般大家会用"w", "a", "s", 和 "d"）。\\r
        -   在背景中加一些形状来让场景看起来更有趣。
      CSD U3 Keyboard Input Challenge_2018_2019: |-
        # 挑战\\r

        _在尝试挑战前，先与你的老师商量一下。_\\r
        \\r
        这是前几关中你做过的虫子的程序。选择一个或几个挑战，或者添加一个你自己的功能！\\r
        \\r

        -   用空格键来控制你的虫子精灵的另一个属性，比如旋转或者缩放。\\r
        -   \*
            添加一些随机数到移动过程里。\\r
        -   添加第二个精灵，并用另一组键来控制它（一般大家会用"w", "a", "s", 和 "d"）。\\r
        -   在背景中加一些形状来让场景看起来更有趣。
      CSD U3 Keypress Boolean Predict: |-
        # 做出预测：

        keyDown()（按下键时）\\r
        `keyDown()`（按下键时）模块是我们的第一个能从用户得到输入的模块。这是我们做一个真正的游戏的第一步！看看你是否能明白`keyDown()`（按下键时）模块是如何工作的。\\r
        \\r
        你觉得当你运行程序并按下”上方向键”时会发生什么？将你的预测写下来，并运行程序来看看你的预测是否精确。
      CSD U3 Keypress Boolean embed-2018: |-
        # 预测 - keyDown()（按下键时）\\r

        \\r
        `keyDown()`（按下键时）模块是一组新模块的第一个，它们会接受用户的输入。这是我们做出实际的游戏的第一步！看看你能否预测`keyDown()`模块是如何工作的。**不需要写任何代码**。\\r
        \\r

        # 这样做\\r

        -   认真阅读程序。\\r
        -   **预测一下代码会如何运行**，并写在下面的方框里。
            要写清楚！\\r
        -   运行程序。\\r
        -   当程序运行时，按下键盘上的空格键。\\r
        -   预测对了吗？是否让你惊讶了？和同学讨论一下。
      CSD U3 Keypress Boolean embed-2018_2019: |-
        # 预测 - keyDown()（按下键时）\\r

        \\r
        `keyDown()`（按下键时）模块是一组新模块的第一个，它们会接受用户的输入。这是我们做出实际的游戏的第一步！看看你能否预测`keyDown()`模块是如何工作的。**不需要写任何代码**。\\r
        \\r

        # 这样做\\r

        -   认真阅读程序。\\r
        -   **预测一下代码会如何运行**，并写在下面的方框里。
            要写清楚！\\r
        -   运行程序。\\r
        -   当程序运行时，按下键盘上的空格键。\\r
        -   预测对了吗？是否让你惊讶了？和同学讨论一下。
      CSD U3 Keypress Boolean embed_2018: |-
        # 预测 - keyDown()（按下键时）\\r

        \\r
        `keyDown()`（按下键时）模块是一组新模块的第一个，它们会接受用户的输入。这是我们做出实际的游戏的第一步！看看你能否预测`keyDown()`模块是如何工作的。**不需要写任何代码**。\\r
        \\r

        # 这样做\\r

        -   认真阅读程序。\\r
        -   **预测一下代码会如何运行**，并写在下面的方框里。
            要写清楚！\\r
        -   运行程序。\\r
        -   当程序运行时，按下键盘上的空格键。\\r
        -   预测对了吗？是否让你惊讶了？和同学讨论一下。
      CSD U3 Keypress Watchers Predict: |-
        # 做出预测：用户输入\\r

        \\r
        目前，你已经学会用`keyDown`（按下键时）来让用户控制你的程序了，但这只是多种输入方法中的一种。实际上这只是很多种_检测键盘按下_方法中的一种！取决于你希望怎样对按下键进行响应，这里可能有一些其它你想用的模块。\\r
        \\r
        读读程序，预测一下当你按下上、下、左、右方向键时会发生什么。\\r
        \\r
        当你做出预测后，运行代码并写下来，或者与邻近的同学分享你的发现。\\r
        \\r
        \*
        `keyDown()`（按下键时）, `keyWentDown()`（键被按下时），和
        `keyWentUp()`（键被释放时）事件看上去有什么不同？\\r

        -   你觉得第10行的(`!`)（叹号）的作用是什么？\\r
        -   你在游戏中会如何使用不同的按键相关的事件模块？
      CSD U3 Keypress Watchers Predict_2018: |-
        # 做出预测：用户输入\\r

        \\r
        目前，你已经学会用`keyDown`（按下键时）来让用户控制你的程序了，但这只是多种输入方法中的一种。实际上这只是很多种_检测键盘按下_方法中的一种！取决于你希望怎样对按下键进行响应，这里可能有一些其它你想用的模块。\\r
        \\r
        读读程序，预测一下当你按下上、下、左、右方向键时会发生什么。\\r
        \\r
        当你做出预测后，运行代码并写下来，或者与邻近的同学分享你的发现。\\r
        \\r
        \*
        `keyDown()`（按下键时）, `keyWentDown()`（键被按下时），和
        `keyWentUp()`（键被释放时）事件看上去有什么不同？\\r

        -   你觉得第10行的(`!`)（叹号）的作用是什么？\\r
        -   你在游戏中会如何使用不同的按键相关的事件模块？
      CSD U3 Keypress Watchers Predict_2019: |-
        # 做出预测：用户输入\\r

        \\r
        目前，你已经学会用`keyDown`（按下键时）来让用户控制你的程序了，但这只是多种输入方法中的一种。实际上这只是很多种_检测键盘按下_方法中的一种！取决于你希望怎样对按下键进行响应，这里可能有一些其它你想用的模块。\\r
        \\r
        读读程序，预测一下当你按下上、下、左、右方向键时会发生什么。\\r
        \\r
        当你做出预测后，运行代码并写下来，或者与邻近的同学分享你的发现。\\r
        \\r
        \*
        `keyDown()`（按下键时）, `keyWentDown()`（键被按下时），和
        `keyWentUp()`（键被释放时）事件看上去有什么不同？\\r

        -   你觉得第10行的(`!`)（叹号）的作用是什么？\\r
        -   你在游戏中会如何使用不同的按键相关的事件模块？
      CSD U3 Keypress Watchers_2018: |-
        # 更多的方法来获得用户输入\\r

        \\r
        目前，你已经学会用`keyDown`（按下键时）来让用户控制你的程序了，但这只是多种输入方法中的一种。实际上这只是很多种_检测键盘按下_方法中的一种！取决于你希望怎样对按下键进行响应，这里可能有一些其它你想用的模块。\\r
        \\r

        # 这样做\\r

        \\r
        在这个程序里，你**不需要写任何代码**。\\r
        \\r

        -   读读程序，看看你能否猜到会发生什么。\\r
        -   当程序运行时，点击方向键，并观察屏幕的反应。\\r
        -   写下，或者与邻近的同学分享你的发现。\\r
            \\r
            \\t\*
            `keyDown()`（按下键时）, `keyWentDown()`（键被按下时），和
            `keyWentUp()`（键被释放时）事件看上去有什么不同？\\r
            -   你觉得第10行的(`!`)（叹号）的作用是什么？\\r
            -   你在游戏中会如何使用不同的按键相关的事件模块？
      CSD U3 Keypress Watchers_2019: |-
        # 更多的方法来获得用户输入\\r

        \\r
        目前，你已经学会用`keyDown`（按下键时）来让用户控制你的程序了，但这只是多种输入方法中的一种。实际上这只是很多种_检测键盘按下_方法中的一种！取决于你希望怎样对按下键进行响应，这里可能有一些其它你想用的模块。\\r
        \\r

        # 这样做\\r

        \\r
        在这个程序里，你**不需要写任何代码**。\\r
        \\r

        -   读读程序，看看你能否猜到会发生什么。\\r
        -   当程序运行时，点击方向键，并观察屏幕的反应。\\r
        -   写下，或者与邻近的同学分享你的发现。\\r
            \\r
            \\t\*
            `keyDown()`（按下键时）, `keyWentDown()`（键被按下时），和
            `keyWentUp()`（键被释放时）事件看上去有什么不同？\\r
            -   你觉得第10行的(`!`)（叹号）的作用是什么？\\r
            -   你在游戏中会如何使用不同的按键相关的事件模块？
      CSD U3 L11 Freeplay: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 L11 Freeplay_2018: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 L11 Freeplay_2019: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 L12 Freeplay: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 L12 Freeplay_2018: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 L12 Freeplay_2019: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 L13 Freeplay: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 L13 Freeplay_2018: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 L13 Freeplay_2019: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 L15 Freeplay: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 L15 Freeplay_2018: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 L15 Freeplay_2019: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 L16 Freeplay: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 L16 Freeplay_2018: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 L16 Freeplay_2019: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 L17 Freeplay: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 L17 Freeplay_2018: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 L17 Freeplay_2019: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 L18 Freeplay: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 L18 Freeplay_2018: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 L18 Freeplay_2019: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 L19 Freeplay: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 L19 Freeplay_2018: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 L19 Freeplay_2019: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 L3 Freeplay: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 L3 Freeplay_2018: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 L3 Freeplay_2019: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 L4 Freeplay: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 L4 Freeplay_2018: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 L4 Freeplay_2019: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 L5 Freeplay: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 L5 Freeplay_2018: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 L5 Freeplay_2019: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 L6 Freeplay: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 L6 Freeplay_2018: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 L6 Freeplay_2019: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 L7 Freeplay: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 L7 Freeplay_2018: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 L7 Freeplay_2019: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 L9 Freeplay: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 L9 Freeplay_2018: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 L9 Freeplay_2019: |-
        # 自由发挥\\r

        \\r
        用你学会的知识任意创建你喜欢的作品。当你完成后，可以点击\!\[](\<<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43>
        PM.png>)发送给朋友。或者点击 \!\[](\<<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50>
        PM.png>) 将它发送到你的作品集里。\\r
      CSD U3 Mouse Input Bee 1: "<img src=\"https://images.code.org/d2092b4f2debc336f963d48bd6cf4973-image-1477681020928.gif\"\nstyle=\"float:right\">\\\\r\n\\\\r\n\n# 鼠标的X和Y\\\\r\n\n\\\\r\n最简单的输入方式之一，就是让一个精灵跟随用户的鼠标位置。\n**你能通过`World.mouseX`和`World.mouseY`来获得鼠标的x、y值。**这和你以前学的精灵的属性是一致的。`World`是目标对象的名字。`mouseX`和`mouseY`是属性的名字。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n让蜜蜂精灵在游戏区域跟随鼠标。\\\\r\n\\\\r\n\n-   蜜蜂图片已经帮你加到了动画标签页。\\\\r\n-   在窗口中间画出蜜蜂精灵。\\\\r\n-   \\*\n    在画图循环里更新精灵的位置来跟随鼠标的位置。：\\\\r\n    \\\\t\\* 将精灵的x位置设置为`World.mouseX`的值。\\\\r\n-   \\*\n    将精灵的y位置设置为`World.mouseY`的值。\\\\r\n-   运行程序来看看它是否工作。\\\\r"
      CSD U3 Mouse Input Bee 1_2018: "<img src=\"https://images.code.org/d2092b4f2debc336f963d48bd6cf4973-image-1477681020928.gif\"\nstyle=\"float:right\">\\\\r\n\\\\r\n\n# 鼠标的X和Y\\\\r\n\n\\\\r\n最简单的输入方式之一，就是让一个精灵跟随用户的鼠标位置。\n**你能通过`World.mouseX`和`World.mouseY`来获得鼠标的x、y值。**这和你以前学的精灵的属性是一致的。`World`是目标对象的名字。`mouseX`和`mouseY`是属性的名字。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n让蜜蜂精灵在游戏区域跟随鼠标。\\\\r\n\\\\r\n\n-   蜜蜂图片已经帮你加到了动画标签页。\\\\r\n-   在窗口中间画出蜜蜂精灵。\\\\r\n-   \\*\n    在画图循环里更新精灵的位置来跟随鼠标的位置。：\\\\r\n    \\\\t\\* 将精灵的x位置设置为`World.mouseX`的值。\\\\r\n-   \\*\n    将精灵的y位置设置为`World.mouseY`的值。\\\\r\n-   运行程序来看看它是否工作。\\\\r"
      CSD U3 Mouse Input Bee 1_2019: "<img src=\"https://images.code.org/d2092b4f2debc336f963d48bd6cf4973-image-1477681020928.gif\"\nstyle=\"float:right\">\\\\r\n\\\\r\n\n# 鼠标的X和Y\\\\r\n\n\\\\r\n最简单的输入方式之一，就是让一个精灵跟随用户的鼠标位置。\n**你能通过`World.mouseX`和`World.mouseY`来获得鼠标的x、y值。**这和你以前学的精灵的属性是一致的。`World`是目标对象的名字。`mouseX`和`mouseY`是属性的名字。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n让蜜蜂精灵在游戏区域跟随鼠标。\\\\r\n\\\\r\n\n-   蜜蜂图片已经帮你加到了动画标签页。\\\\r\n-   在窗口中间画出蜜蜂精灵。\\\\r\n-   \\*\n    在画图循环里更新精灵的位置来跟随鼠标的位置。：\\\\r\n    \\\\t\\* 将精灵的x位置设置为`World.mouseX`的值。\\\\r\n-   \\*\n    将精灵的y位置设置为`World.mouseY`的值。\\\\r\n-   运行程序来看看它是否工作。\\\\r"
      CSD U3 Mouse Input Bee 2: |-
        # 随机围绕某点\\r

        \\r
        <img
        src="https://images.code.org/d124946bb9e01a3623078c2a87beea8c-image-1477681483067.gif"
        style="float:right">\\r
        \\r
        现在你能让蜜蜂跟随鼠标了，让我们像右边的图一样，让蜜蜂在鼠标周围飞行。要做到这样，你需要**增加一个-50到50的随机数到`mouseX`或`mouseY`上**。\\r
        \\r

        # 这样做\\r

        你已经有了一个跟随鼠标的蜜蜂精灵了。\\r
        \\r

        -   更新x和y的位置，让它随机的靠近鼠标。\\r
            \\t\* 添加一个-50到50的随机数到`World.mouseX`和`World.mouseY`。\\r
        -   如果需要的话，可以用`World.frameRate`模块来减缓动画，找到最佳帧率。\\r
            \\r
            _挑战
            再**增加3只蜜蜂**以同样的方法来跟随鼠标，从而形成蜂群。_
      CSD U3 Mouse Input Bee 2_2018: |-
        # 随机围绕某点\\r

        \\r
        <img
        src="https://images.code.org/d124946bb9e01a3623078c2a87beea8c-image-1477681483067.gif"
        style="float:right">\\r
        \\r
        现在你能让蜜蜂跟随鼠标了，让我们像右边的图一样，让蜜蜂在鼠标周围飞行。要做到这样，你需要**增加一个-50到50的随机数到`mouseX`或`mouseY`上**。\\r
        \\r

        # 这样做\\r

        你已经有了一个跟随鼠标的蜜蜂精灵了。\\r
        \\r

        -   更新x和y的位置，让它随机的靠近鼠标。\\r
            \\t\* 添加一个-50到50的随机数到`World.mouseX`和`World.mouseY`。\\r
        -   如果需要的话，可以用`World.frameRate`模块来减缓动画，找到最佳帧率。\\r
            \\r
            _挑战
            再**增加3只蜜蜂**以同样的方法来跟随鼠标，从而形成蜂群。_
      CSD U3 Mouse Input Bee 2_2019: |-
        # 随机围绕某点\\r

        \\r
        <img
        src="https://images.code.org/d124946bb9e01a3623078c2a87beea8c-image-1477681483067.gif"
        style="float:right">\\r
        \\r
        现在你能让蜜蜂跟随鼠标了，让我们像右边的图一样，让蜜蜂在鼠标周围飞行。要做到这样，你需要**增加一个-50到50的随机数到`mouseX`或`mouseY`上**。\\r
        \\r

        # 这样做\\r

        你已经有了一个跟随鼠标的蜜蜂精灵了。\\r
        \\r

        -   更新x和y的位置，让它随机的靠近鼠标。\\r
            \\t\* 添加一个-50到50的随机数到`World.mouseX`和`World.mouseY`。\\r
        -   如果需要的话，可以用`World.frameRate`模块来减缓动画，找到最佳帧率。\\r
            \\r
            _挑战
            再**增加3只蜜蜂**以同样的方法来跟随鼠标，从而形成蜂群。_
      CSD U3 Movement Fish challenge_2018: |-
        # 更多鱼!

        调整鱼在游动时的旋转，让它看起来更像是在游动。你还可以通过加入新特性（比如鱼缸中上升的泡泡）来让这个场景更逼真。
      CSD U3 Movement Fish challenge_2019: |-
        # 更多鱼!

        调整鱼在游动时的旋转，让它看起来更像是在游动。你还可以通过加入新特性（比如鱼缸中上升的泡泡）来让这个场景更逼真。
      CSD U3 Movement Fish: |-
        <img src="https://images.code.org/7852ab38a8222ee827edeff2767e8efd-image-1492037897236.gif"
        style="float: right; margin-left: 20px;">\\r
        \\r

        # 鱼与动画\\r

        \\r
        用计数器的模式，来让这三条鱼都从图片移动到左边。蓝色的鱼要移动得最快，橙色的鱼跟在后面，绿色的鱼最慢。
      CSD U3 Movement Fish_2018: |-
        <img src="https://images.code.org/7852ab38a8222ee827edeff2767e8efd-image-1492037897236.gif"
        style="float: right; margin-left: 20px;">\\r
        \\r

        # 鱼与动画\\r

        \\r
        用计数器的模式，来让这三条鱼都从图片移动到左边。蓝色的鱼要移动得最快，橙色的鱼跟在后面，绿色的鱼最慢。
      CSD U3 Movement Fish_2019: |-
        <img src="https://images.code.org/7852ab38a8222ee827edeff2767e8efd-image-1492037897236.gif"
        style="float: right; margin-left: 20px;">\\r
        \\r

        # 鱼与动画\\r

        \\r
        用计数器的模式，来让这三条鱼都从图片移动到左边。蓝色的鱼要移动得最快，橙色的鱼跟在后面，绿色的鱼最慢。
      CSD U3 Movement Gears: |-
        <img src="https://images.code.org/eac110e64ccad62482c82d4ef66f237b-image-1465518920408.gif"
        style="width:200px; float:right; margin-left: 20px;">\\r
        \\r

        # 旋转方向\\r

        \\r
        当你在`rotation`（旋转）属性上使用计数器模式时，目标总是正时针方向旋转。有时，你需要让精灵反过来旋转。你能通过减法做到这点！\\r
        \\r

        # 这样做\\r

        \\r
        这里为你设置了三个齿轮。你需要让它们看起来像是在同步旋转。\\r
        \\r

        -   让齿轮同步旋转起来，就像是一个系统。\\r
        -   **提示：它们不能往同一个方向旋转**。
      CSD U3 Movement Gears_2018: |-
        <img src="https://images.code.org/eac110e64ccad62482c82d4ef66f237b-image-1465518920408.gif"
        style="width:200px; float:right; margin-left: 20px;">\\r
        \\r

        # 旋转方向\\r

        \\r
        当你在`rotation`（旋转）属性上使用计数器模式时，目标总是正时针方向旋转。有时，你需要让精灵反过来旋转。你能通过减法做到这点！\\r
        \\r

        # 这样做\\r

        \\r
        这里为你设置了三个齿轮。你需要让它们看起来像是在同步旋转。\\r
        \\r

        -   让齿轮同步旋转起来，就像是一个系统。\\r
        -   **提示：它们不能往同一个方向旋转**。
      CSD U3 Movement Gears_2019: |-
        <img src="https://images.code.org/eac110e64ccad62482c82d4ef66f237b-image-1465518920408.gif"
        style="width:200px; float:right; margin-left: 20px;">\\r
        \\r

        # 旋转方向\\r

        \\r
        当你在`rotation`（旋转）属性上使用计数器模式时，目标总是正时针方向旋转。有时，你需要让精灵反过来旋转。你能通过减法做到这点！\\r
        \\r

        # 这样做\\r

        \\r
        这里为你设置了三个齿轮。你需要让它们看起来像是在同步旋转。\\r
        \\r

        -   让齿轮同步旋转起来，就像是一个系统。\\r
        -   **提示：它们不能往同一个方向旋转**。
      CSD U3 Movement Your Own 1: "# 制作自己的动画\\\\r\n\n\\\\r\n用计数器模式和精灵的属性来创造属于自己的动画。你可以用以前做的静态图，或者新的图片来创造故事。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n开始时，让我们从设置静态场景开始。\\\\r\n\\\\r\n\n-   添加在动画标签页中的图片。\\\\r\n-   创建图片，并分配图片。\\\\r\n-   用画图循环来画背景和你的精灵。"
      CSD U3 Movement Your Own 1_2018: "# 制作自己的动画\\\\r\n\n\\\\r\n用计数器模式和精灵的属性来创造属于自己的动画。你可以用以前做的静态图，或者新的图片来创造故事。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n开始时，让我们从设置静态场景开始。\\\\r\n\\\\r\n\n-   添加在动画标签页中的图片。\\\\r\n-   创建图片，并分配图片。\\\\r\n-   用画图循环来画背景和你的精灵。"
      CSD U3 Movement Your Own 1_2019: "# 制作自己的动画\\\\r\n\n\\\\r\n用计数器模式和精灵的属性来创造属于自己的动画。你可以用以前做的静态图，或者新的图片来创造故事。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n开始时，让我们从设置静态场景开始。\\\\r\n\\\\r\n\n-   添加在动画标签页中的图片。\\\\r\n-   创建图片，并分配图片。\\\\r\n-   用画图循环来画背景和你的精灵。"
      CSD U3 Movement Your Own 2: |-
        # 在动画中增加移动\\r

        \\r
        当你设置好静态场景后，可以开始加一些动画了。当你对程序感到满意时，点击“提交”按钮来上传。如果你想添加新功能，可以随时取消提交，并继续工作。\\r
        \\r

        # 这样做\\r

        \\r
        在画图循环中\\r
        \\r

        -   找到需要改动的精灵属性。\\r
        -   用计数器模式来更新属性。\\r
            \\r
            _提示：如果你的计数器模式不像你期待那样工作，添加监视器来帮助调试程序。_
      CSD U3 Movement Your Own 2_2018: |-
        # 在动画中增加移动\\r

        \\r
        当你设置好静态场景后，可以开始加一些动画了。当你对程序感到满意时，点击“提交”按钮来上传。如果你想添加新功能，可以随时取消提交，并继续工作。\\r
        \\r

        # 这样做\\r

        \\r
        在画图循环中\\r
        \\r

        -   找到需要改动的精灵属性。\\r
        -   用计数器模式来更新属性。\\r
            \\r
            _提示：如果你的计数器模式不像你期待那样工作，添加监视器来帮助调试程序。_
      CSD U3 Movement Your Own 2_2019: |-
        # 在动画中增加移动\\r

        \\r
        当你设置好静态场景后，可以开始加一些动画了。当你对程序感到满意时，点击“提交”按钮来上传。如果你想添加新功能，可以随时取消提交，并继续工作。\\r
        \\r

        # 这样做\\r

        \\r
        在画图循环中\\r
        \\r

        -   找到需要改动的精灵属性。\\r
        -   用计数器模式来更新属性。\\r
            \\r
            _提示：如果你的计数器模式不像你期待那样工作，添加监视器来帮助调试程序。_
      CSD U3 Plotting Shapes Shape Lab Open: |-
        # 绘制形状 \\r

        \\r
        探索使用此工具，它可以绘制不同的颜色形状。\\r
        \\r
        确保点击 "运行" 并尝试打开网格来帮助精确地放置形状。\\r
        \\r
        \!\[](\<<https://images.code.org/d52dbc112dcc088858c4b8f54be09aa1-image-1502914103923.07.59>
        PM.png>)
      CSD U3 Plotting Shapes Shape Lab: |-
        # 绘制形状 \\r

        \\r
        探索使用此工具，它可以绘制不同的颜色形状。\\r
        \\r
        确保点击 "运行" 并尝试打开网格来帮助精确地放置形状。\\r
        \\r
        \!\[](\<<https://images.code.org/d52dbc112dcc088858c4b8f54be09aa1-image-1502914103923.07.59>
        PM.png>)
      CSD U3 Plotting Shapes Shape Lab_2018: |-
        # 绘制形状 \\r

        \\r
        探索使用此工具，它可以绘制不同的颜色形状。\\r
        \\r
        确保点击 "运行" 并尝试打开网格来帮助精确地放置形状。\\r
        \\r
        \!\[](\<<https://images.code.org/d52dbc112dcc088858c4b8f54be09aa1-image-1502914103923.07.59>
        PM.png>)
      CSD U3 Plotting Shapes Shape Lab_2019: |-
        # 绘制形状 \\r

        \\r
        探索使用此工具，它可以绘制不同的颜色形状。\\r
        \\r
        确保点击 "运行" 并尝试打开网格来帮助精确地放置形状。\\r
        \\r
        \!\[](\<<https://images.code.org/d52dbc112dcc088858c4b8f54be09aa1-image-1502914103923.07.59>
        PM.png>)
      CSD U3 Random Add a Door: |-
        <img src="https://images.code.org/fd746a708d8a94ad0aad863f3284a1ad-image-1490826372819.25.25
        PM.png" style="float:right;height:150px">\\r
        \\r

        # 这样做\\r

        \\r

        -   写代码来创造一个红色的矩形，要比图画中已有的要高。\\r
        -   不用担心确切的尺寸，新矩形只要更高就行。
      CSD U3 Random Debug Cloud-2018: |-
        <img src="https://images.code.org/45d1d513f5ed63592e98ea3e4a08840c-image-1520403109680.11.28
        PM.png" style="float:right;height:150px">\\r
        \\r

        # 调试 - 用4个参数\\r

        \\r
        现在，草地好了。让我们在天上加一朵云。不幸的是，现在看起来有点滑稽。\\r
        \\r

        # 这样做\\r

        \\r

        -   调试程序让云像图片里一样，宽度大于高度。\\r
        -   提示：你需要改动两个参数。哪些设置了云的宽度和高度？\\r
            \\r
            _挑战：太阳和图片中的位置不完全一样。你能改变太阳的坐标，让它和图片里的完全一致吗？_
      CSD U3 Random Debug Cloud: |-
        <img src="https://images.code.org/529b7e5ddda4683e6a0cc5b3028e4dbf-image-1490824752133.58.50
        PM.png" style="float:right;height:150px">\\r
        \\r

        # 调试 - 用4个参数\\r

        \\r
        现在，草地好了。让我们在天上加一朵云。不幸的是，现在看起来有点滑稽。\\r
        \\r

        # 这样做\\r

        \\r

        -   调试程序让云像图片里一样，宽度大于高度。\\r
        -   提示：你需要改动两个参数。哪些设置了云的宽度和高度？\\r
            \\r
            _挑战：太阳和图片中的位置不完全一样。你能改变太阳的坐标，让它和图片里的完全一致吗？_
      CSD U3 Random Debug Cloud_2018: |-
        <img src="https://images.code.org/45d1d513f5ed63592e98ea3e4a08840c-image-1520403109680.11.28
        PM.png" style="float:right;height:150px">\\r
        \\r

        # 调试 - 用4个参数\\r

        \\r
        现在，草地好了。让我们在天上加一朵云。不幸的是，现在看起来有点滑稽。\\r
        \\r

        # 这样做\\r

        \\r

        -   调试程序让云像图片里一样，宽度大于高度。\\r
        -   提示：你需要改动两个参数。哪些设置了云的宽度和高度？\\r
            \\r
            _挑战：太阳和图片中的位置不完全一样。你能改变太阳的坐标，让它和图片里的完全一致吗？_
      CSD U3 Random Debug Cloud_2018_2019: |-
        <img src="https://images.code.org/45d1d513f5ed63592e98ea3e4a08840c-image-1520403109680.11.28
        PM.png" style="float:right;height:150px">\\r
        \\r

        # 调试 - 用4个参数\\r

        \\r
        现在，草地好了。让我们在天上加一朵云。不幸的是，现在看起来有点滑稽。\\r
        \\r

        # 这样做\\r

        \\r

        -   调试程序让云像图片里一样，宽度大于高度。\\r
        -   提示：你需要改动两个参数。哪些设置了云的宽度和高度？\\r
            \\r
            _挑战：太阳和图片中的位置不完全一样。你能改变太阳的坐标，让它和图片里的完全一致吗？_
      CSD U3 Random Debug Grass: |-
        <img src="https://images.code.org/83269268e1c4f8af8551253ff4573b43-image-1490825158453.03.45
        PM.png" style="float:right;height:150px">\\r
        \\r

        # 调试 - 用4个参数\\r

        \\r
        这个程序用了`rect()` （矩形）and `ellipse()`（椭圆）的4个参数版本来画一个简单的场景。\\r
        \\r

        # 这样做\\r

        \\r

        -   调试程序并改正错误，让草地延伸到整个底部。\\r
        -   提示：你只需要改动一个数字。那个参数让你的矩形（草地）更宽？
      CSD U3 Random Debug Grass_2018: |-
        <img src="https://images.code.org/08c7c6cd82f4d4ff57459165f29ab624-image-1520402652290.03.37
        PM.png" style="float:right;height:150px">\\r
        \\r

        # 调试 - 用4个参数\\r

        \\r
        这个程序用了`rect()` （矩形）and `ellipse()`（椭圆）的4个参数版本来画一个简单的场景。\\r
        \\r

        # 这样做\\r

        \\r

        -   调试程序并改正错误，让草地延伸到整个底部。\\r
        -   提示：你只需要改动一个数字。那个参数让你的矩形（草地）更宽？
      CSD U3 Random Debug Grass_2019: |-
        <img src="https://images.code.org/08c7c6cd82f4d4ff57459165f29ab624-image-1520402652290.03.37
        PM.png" style="float:right;height:150px">\\r
        \\r

        # 调试 - 用4个参数\\r

        \\r
        这个程序用了`rect()` （矩形）and `ellipse()`（椭圆）的4个参数版本来画一个简单的场景。\\r
        \\r

        # 这样做\\r

        \\r

        -   调试程序并改正错误，让草地延伸到整个底部。\\r
        -   提示：你只需要改动一个数字。那个参数让你的矩形（草地）更宽？
      CSD U3 Random Ellipse Behind-2018: |-
        <img src="https://images.code.org/dd73760e7129225b1e9f53a542960b9a-image-1520402430622.59.19
        PM.png" style="float:right;height:150px">\\r
        \\r

        # 这样做\\r

        \\r

        -   写代码在绿色椭圆后面画一个橙色的椭圆。\\r
        -   别担心确切的尺寸，只要整个绿色椭圆在橙色里就行。
      CSD U3 Random Ellipse Behind: |-
        <img src="https://images.code.org/a8ed6092389aedceceb38a83ac59fae1-image-1490832453029.07.10
        PM.png" style="float:right;height:150px">\\r
        \\r

        # 这样做\\r

        \\r

        -   写代码在绿色椭圆后面画一个橙色的椭圆。\\r
        -   别担心确切的尺寸，只要整个绿色椭圆在橙色里就行。
      CSD U3 Random Ellipse Behind_2018: |-
        <img src="https://images.code.org/dd73760e7129225b1e9f53a542960b9a-image-1520402430622.59.19
        PM.png" style="float:right;height:150px">\\r
        \\r

        # 这样做\\r

        \\r

        -   写代码在绿色椭圆后面画一个橙色的椭圆。\\r
        -   别担心确切的尺寸，只要整个绿色椭圆在橙色里就行。
      CSD U3 Random Ellipse Behind_2018_2019: |-
        <img src="https://images.code.org/dd73760e7129225b1e9f53a542960b9a-image-1520402430622.59.19
        PM.png" style="float:right;height:150px">\\r
        \\r

        # 这样做\\r

        \\r

        -   写代码在绿色椭圆后面画一个橙色的椭圆。\\r
        -   别担心确切的尺寸，只要整个绿色椭圆在橙色里就行。
      CSD U3 Random Number Map: "# 随机数字\\\\r\n\n\\\\r\n\n# 使用随机数字\\\\r\n\n\\\\r\n`randomNumber()`（随机数字）模块可以在程序里用来生成随机数字。 \n它可以在用单个数字的地方使用，这样每次你的程序都会运行有点不一样。 \\\\r\n\\\\r\n\\!\\[](\\<<https://images.code.org/ef48e7f0312a567eca8641f349968c2a-image-1491521271912.27.09>\nPM.png>)\\\\r\n\\\\r\n<img src=\"https://images.code.org/246e7ac850015aa830d469b7eeb5f00e-image-1491523022253.50.04\nPM.png\" style=\"float:left;width:150px\">\\\\r\n\\\\r\n<img src=\"https://images.code.org/01b10dc034475fd5a90bd3c7bd0c51b8-image-1491523025607.50.17\nPM.png\" style=\"float:left;width:150px\">\\\\r\n\\\\r\n<img src=\"https://images.code.org/0f0c3cc4d42923dc4321809daf189053-image-1491523028093.50.49\nPM.png\" style=\"float:left;width:150px\">\\\\r\n\\\\r\n`randomNumber()`（随机数字）有两个参数，用来选择最大值和最小值。如果需要的话，也可以让这些数字是负数。\\\\r\n\\\\r\n\n# 绘画和随机数字\\\\r\n\n\\\\r\n在该程序下面，你可以看到3个可能输出的结果示例。请注意虽然它是同一个程序，每次产生的图片都不一样。 \\\\r\n\\\\r\n你可以在你的程序里多次使用`randomNumber()`（随机数字）指令。每次它都使用一个新产生的随机数字。 \\\\r\n\\\\r\n\\!\\[](\\<<https://images.code.org/2c562cef4ef69c163db2b183225ee954-image-1491522524705.48.33>\nPM.png>)"
      CSD U3 Random Taller Rectangle: "<img src=\"https://images.code.org/02871e5c5d041ea1724e4a02d3697941-image-1492721665345.54.10 PM.png\" style=\"float:right;height:150px; border: 1px solid #CCC\">\n\n# 矩形尺寸\n\n这些“矩形”模块有两个以上的参数你可以用来控制大小。 请留意`noStroke()`（不要描边） 模块会让形状的描边（边框）消失。\\\\r\n\n# 这样做\n\n-   看看编码，试着找出`rect`（矩形）后两个参数的作用。 \n-   改变第二个`rect`（矩形）的数字使得红色的矩形比蓝色的更长。"
      CSD U3 Random Taller Rectangle_2018: "<img src=\"https://images.code.org/02871e5c5d041ea1724e4a02d3697941-image-1492721665345.54.10 PM.png\" style=\"float:right;height:150px; border: 1px solid #CCC\">\n\n# 矩形尺寸\n\n这些“矩形”模块有两个以上的参数你可以用来控制大小。 请留意`noStroke()`（不要描边） 模块会让形状的描边（边框）消失。\\\\r\n\n# 这样做\n\n-   看看编码，试着找出`rect`（矩形）后两个参数的作用。 \n-   改变第二个`rect`（矩形）的数字使得红色的矩形比蓝色的更长。"
      CSD U3 Random Taller Rectangle_2019: "<img src=\"https://images.code.org/02871e5c5d041ea1724e4a02d3697941-image-1492721665345.54.10 PM.png\" style=\"float:right;height:150px; border: 1px solid #CCC\">\n\n# 矩形尺寸\n\n这些“矩形”模块有两个以上的参数你可以用来控制大小。 请留意`noStroke()`（不要描边） 模块会让形状的描边（边框）消失。\\\\r\n\n# 这样做\n\n-   看看编码，试着找出`rect`（矩形）后两个参数的作用。 \n-   改变第二个`rect`（矩形）的数字使得红色的矩形比蓝色的更长。"
      CSD U3 Random background: "# 背景\\\\r\n\n\\\\r\n有时，你可能像给整个屏幕都填上同一种颜色。你可以用`background`（背景）来做到这样。它会用你选择的颜色来覆盖整个屏幕。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n\n-   运行代码，看看`background`（背景）是如何起作用的。\\\\r\n-   将北京颜色从黄色改为橙色。\\\\r\n    \\\\r\n    _挑战：这里有一个紫色正方形被背景覆盖了。你能改变代码的顺序同时看见紫色和蓝色正方形吗？_"
      CSD U3 Random background2: |-
        <img src="https://images.code.org/a68cfd23a13b6bdeef91dc9fd584f657-image-1491332601738.03.04
        PM.png" style="float:right;height:150px">\\r
        \\r

        # 背景\\r

        \\r
        `background`（背景）会在所有元素上画图像。因此，考虑代码的顺序是非常重要的。\\r
        \\r

        # 这样做\\r

        \\r

        -   使用`background`（背景）在绿色圆圈后画一个”black"（黑色）的背景。
      CSD U3 Random background2_2018: |-
        <img src="https://images.code.org/a68cfd23a13b6bdeef91dc9fd584f657-image-1491332601738.03.04
        PM.png" style="float:right;height:150px">\\r
        \\r

        # 背景\\r

        \\r
        `background`（背景）会在所有元素上画图像。因此，考虑代码的顺序是非常重要的。\\r
        \\r

        # 这样做\\r

        \\r

        -   使用`background`（背景）在绿色圆圈后画一个”black"（黑色）的背景。
      CSD U3 Random background2_2019: |-
        <img src="https://images.code.org/a68cfd23a13b6bdeef91dc9fd584f657-image-1491332601738.03.04
        PM.png" style="float:right;height:150px">\\r
        \\r

        # 背景\\r

        \\r
        `background`（背景）会在所有元素上画图像。因此，考虑代码的顺序是非常重要的。\\r
        \\r

        # 这样做\\r

        \\r

        -   使用`background`（背景）在绿色圆圈后画一个”black"（黑色）的背景。
      CSD U3 Random background_2018: "# 背景\\\\r\n\n\\\\r\n有时，你可能像给整个屏幕都填上同一种颜色。你可以用`background`（背景）来做到这样。它会用你选择的颜色来覆盖整个屏幕。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n\n-   运行代码，看看`background`（背景）是如何起作用的。\\\\r\n-   将北京颜色从黄色改为橙色。\\\\r\n    \\\\r\n    _挑战：这里有一个紫色正方形被背景覆盖了。你能改变代码的顺序同时看见紫色和蓝色正方形吗？_"
      CSD U3 Random background_2019: "# 背景\\\\r\n\n\\\\r\n有时，你可能像给整个屏幕都填上同一种颜色。你可以用`background`（背景）来做到这样。它会用你选择的颜色来覆盖整个屏幕。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n\n-   运行代码，看看`background`（背景）是如何起作用的。\\\\r\n-   将北京颜色从黄色改为橙色。\\\\r\n    \\\\r\n    _挑战：这里有一个紫色正方形被背景覆盖了。你能改变代码的顺序同时看见紫色和蓝色正方形吗？_"
      CSD U3 Random rainbow snake-2018: |-
        <img src="https://images.code.org/6af643f712b042e5b076f06cc2f902e2-image-1520404404645.32.58
        PM.png" style="float:right;height:150px">\\r
        \\r

        # 彩虹蛇\\r

        \\r
        这个程序画了一条罕见的彩虹蛇。要让每次画出来蛇的颜色都不同，你需要用到随机数。\\r
        \\r

        # 这样做\\r

        \\r

        -   运行几次程序来看看初始的的代码是如何起作用的。\\r
        -   给你的彩虹蛇增加至少三个不同颜色的圆圈。\\r
        -   使用`randomNumber()`（随机数字）来让蛇的后半部分像前面3段一样上下移动。\\r
            \\r
            _挑战：你能让一些圆圈的大小也随机吗？_
      CSD U3 Random rainbow snake: |-
        <img src="https://images.code.org/d1e4780e483ffa510a27e91b2b1f1963-image-1491341267537.26.14
        PM.png" style="float:right;height:150px">\\r
        \\r

        # 彩虹蛇\\r

        \\r
        这个程序画了一条罕见的彩虹蛇。要让每次画出来蛇的颜色都不同，你需要用到随机数。\\r
        \\r

        # 这样做\\r

        \\r

        -   运行几次程序来看看初始的的代码是如何起作用的。\\r
        -   给你的彩虹蛇增加至少三个不同颜色的圆圈。\\r
        -   使用`randomNumber()`（随机数字）来让蛇的后半部分像前面3段一样上下移动。\\r
            \\r
            _挑战：你能让一些圆圈的大小也随机吗？_
      CSD U3 Random rainbow snake_2018: |-
        <img src="https://images.code.org/6af643f712b042e5b076f06cc2f902e2-image-1520404404645.32.58
        PM.png" style="float:right;height:150px">\\r
        \\r

        # 彩虹蛇\\r

        \\r
        这个程序画了一条罕见的彩虹蛇。要让每次画出来蛇的颜色都不同，你需要用到随机数。\\r
        \\r

        # 这样做\\r

        \\r

        -   运行几次程序来看看初始的的代码是如何起作用的。\\r
        -   给你的彩虹蛇增加至少三个不同颜色的圆圈。\\r
        -   使用`randomNumber()`（随机数字）来让蛇的后半部分像前面3段一样上下移动。\\r
            \\r
            _挑战：你能让一些圆圈的大小也随机吗？_
      CSD U3 Random rainbow snake_2018_2019: |-
        <img src="https://images.code.org/6af643f712b042e5b076f06cc2f902e2-image-1520404404645.32.58
        PM.png" style="float:right;height:150px">\\r
        \\r

        # 彩虹蛇\\r

        \\r
        这个程序画了一条罕见的彩虹蛇。要让每次画出来蛇的颜色都不同，你需要用到随机数。\\r
        \\r

        # 这样做\\r

        \\r

        -   运行几次程序来看看初始的的代码是如何起作用的。\\r
        -   给你的彩虹蛇增加至少三个不同颜色的圆圈。\\r
        -   使用`randomNumber()`（随机数字）来让蛇的后半部分像前面3段一样上下移动。\\r
            \\r
            _挑战：你能让一些圆圈的大小也随机吗？_
      CSD U3 Random random ellipse-2018: |-
        # 随机数\\r

        \\r
        `randomNumber()`（随机数字）会在最小值和最大值之间选一个随机数。你能用这个代替直接写出数字。如果你在图画中用了随机数字，它会在每次运行程序时，都有些不同。\\r
        \\r

        # 这样做\\r

        \\r

        -   运行几次程序来看看它是如何工作的。\\r
        -   改变`randomNumber`（随机数字）里面的数字，并且再运行几次代码，看看有什么不同。
      CSD U3 Random random ellipse: |-
        # 随机数\\r

        \\r
        `randomNumber()`（随机数字）会在最小值和最大值之间选一个随机数。你能用这个代替直接写出数字。如果你在图画中用了随机数字，它会在每次运行程序时，都有些不同。\\r
        \\r

        # 这样做\\r

        \\r

        -   运行几次程序来看看它是如何工作的。\\r
        -   改变`randomNumber`（随机数字）里面的数字，并且再运行几次代码，看看有什么不同。
      CSD U3 Random random ellipse2-2018: |-
        <img src="https://images.code.org/8306a9fd01470ac8582cf4374dde7033-image-1520403513967.17.40
        PM.png" style="float:right;height:150px">\\r
        \\r

        # 随机数\\r

        \\r
        这是和上次一样的太阳。现在只有x轴坐标是随机的，但你可以把y轴坐标也改成随机的。\\r
        \\r

        # 这样做\\r

        \\r

        -   用`randomNumber()`（随机数字）来设置椭圆的Y参数，这样能让圆圈也画在随机的Y轴位置上。\\r
        -   当你的圆圈的x和y轴都随机变化了，就可以继续下一关了。
      CSD U3 Random random ellipse2: |-
        <img src="https://images.code.org/ff3be801c7e634d49584aac103df292a-image-1491334428729.33.18
        PM.png" style="float:right;height:150px">\\r
        \\r

        # 随机数\\r

        \\r
        这是和上次一样的太阳。现在只有x轴坐标是随机的，但你可以把y轴坐标也改成随机的。\\r
        \\r

        # 这样做\\r

        \\r

        -   用`randomNumber()`（随机数字）来设置椭圆的Y参数，这样能让圆圈也画在随机的Y轴位置上。\\r
        -   当你的圆圈的x和y轴都随机变化了，就可以继续下一关了。
      CSD U3 Random random ellipse2_2018: |-
        <img src="https://images.code.org/8306a9fd01470ac8582cf4374dde7033-image-1520403513967.17.40
        PM.png" style="float:right;height:150px">\\r
        \\r

        # 随机数\\r

        \\r
        这是和上次一样的太阳。现在只有x轴坐标是随机的，但你可以把y轴坐标也改成随机的。\\r
        \\r

        # 这样做\\r

        \\r

        -   用`randomNumber()`（随机数字）来设置椭圆的Y参数，这样能让圆圈也画在随机的Y轴位置上。\\r
        -   当你的圆圈的x和y轴都随机变化了，就可以继续下一关了。
      CSD U3 Random random ellipse2_2018_2019: |-
        <img src="https://images.code.org/8306a9fd01470ac8582cf4374dde7033-image-1520403513967.17.40
        PM.png" style="float:right;height:150px">\\r
        \\r

        # 随机数\\r

        \\r
        这是和上次一样的太阳。现在只有x轴坐标是随机的，但你可以把y轴坐标也改成随机的。\\r
        \\r

        # 这样做\\r

        \\r

        -   用`randomNumber()`（随机数字）来设置椭圆的Y参数，这样能让圆圈也画在随机的Y轴位置上。\\r
        -   当你的圆圈的x和y轴都随机变化了，就可以继续下一关了。
      CSD U3 Random random ellipse_2018: |-
        # 随机数\\r

        \\r
        `randomNumber()`（随机数字）会在最小值和最大值之间选一个随机数。你能用这个代替直接写出数字。如果你在图画中用了随机数字，它会在每次运行程序时，都有些不同。\\r
        \\r

        # 这样做\\r

        \\r

        -   运行几次程序来看看它是如何工作的。\\r
        -   改变`randomNumber`（随机数字）里面的数字，并且再运行几次代码，看看有什么不同。
      CSD U3 Random random ellipse_2018_2019: |-
        # 随机数\\r

        \\r
        `randomNumber()`（随机数字）会在最小值和最大值之间选一个随机数。你能用这个代替直接写出数字。如果你在图画中用了随机数字，它会在每次运行程序时，都有些不同。\\r
        \\r

        # 这样做\\r

        \\r

        -   运行几次程序来看看它是如何工作的。\\r
        -   改变`randomNumber`（随机数字）里面的数字，并且再运行几次代码，看看有什么不同。
      CSD U3 Scene Example-2018: |-
        # 精灵场景\\r

        \\r
        通过将形状、精灵和文本组合在一起，你能创建一个简单的场景、故事或漫画。这个例子非常简单，但你可以组合更多的精灵、形状来创建自己想要的复杂、细致的场景。\\r
        \\r

        ## 画出轮廓\\r

        \\r
        在开始之前，先花点时间来给下课前要画完的场景画一个轮廓。思考一下以前用过的简单形状，角色精灵，以及想要显示在屏幕上的文本。一旦你勾勒出了创意，你可以学习`text`（文本），以及增氧组合出一个场景。\\r
      CSD U3 Scene Example: |-
        # 精灵场景\\r

        \\r
        通过将形状、精灵和一个新的，叫做`text`（文本）的模块组合在一起，你能创建一个简单的场景、故事或漫画。这个例子非常简单，但你可以组合更多的精灵、形状来创建自己想要的复杂、细致的场景。\\r
        \\r

        ## 画出轮廓\\r

        \\r
        在开始之前，先花点时间来给下课前要画完的场景画一个轮廓。思考一下以前用过的简单形状，角色精灵，以及想要显示在屏幕上的文本。一旦你勾勒出了创意，你可以学习`text`（文本），以及增氧组合出一个场景。\\r
      CSD U3 Scene Example_2018: |-
        # 精灵场景\\r

        \\r
        通过将形状、精灵和文本组合在一起，你能创建一个简单的场景、故事或漫画。这个例子非常简单，但你可以组合更多的精灵、形状来创建自己想要的复杂、细致的场景。\\r
        \\r

        ## 画出轮廓\\r

        \\r
        在开始之前，先花点时间来给下课前要画完的场景画一个轮廓。思考一下以前用过的简单形状，角色精灵，以及想要显示在屏幕上的文本。一旦你勾勒出了创意，你可以学习`text`（文本），以及增氧组合出一个场景。\\r
      CSD U3 Scene Example_2018_2019: |-
        # 精灵场景\\r

        \\r
        通过将形状、精灵和文本组合在一起，你能创建一个简单的场景、故事或漫画。这个例子非常简单，但你可以组合更多的精灵、形状来创建自己想要的复杂、细致的场景。\\r
        \\r

        ## 画出轮廓\\r

        \\r
        在开始之前，先花点时间来给下课前要画完的场景画一个轮廓。思考一下以前用过的简单形状，角色精灵，以及想要显示在屏幕上的文本。一旦你勾勒出了创意，你可以学习`text`（文本），以及增氧组合出一个场景。\\r
      CSD U3 Sprite Movement Left: |-
        <img src="https://images.code.org/9f9162cb94a02d9b3aba9b6067d0281a-image-1491862771496.gif"
        style="float: right; margin-left: 20px">\\r
        \\r

        # 向左移动\\r

        \\r
        如果给x坐标加上一个数，会让它往右移动。那么怎样让它向左移动呢？\\r
        \\r

        # 这样做\\r

        \\r
        像右边的图片一样，让你的程序有动画。更新画图循环里的`fly.x`，从而让绘制每一帧时x轴都会往右一点。\\r
        \\r
        _提示：你能通过加减大一点的数让精灵移动得更快一些。在我们例子中的苍蝇的速度大概是上一关中飞机速度的两倍。_
      CSD U3 Sprite Movement Left_2018: |-
        <img src="https://images.code.org/9f9162cb94a02d9b3aba9b6067d0281a-image-1491862771496.gif"
        style="float: right; margin-left: 20px">\\r
        \\r

        # 向左移动\\r

        \\r
        如果给x坐标加上一个数，会让它往右移动。那么怎样让它向左移动呢？\\r
        \\r

        # 这样做\\r

        \\r
        像右边的图片一样，让你的程序有动画。更新画图循环里的`fly.x`，从而让绘制每一帧时x轴都会往右一点。\\r
        \\r
        _提示：你能通过加减大一点的数让精灵移动得更快一些。在我们例子中的苍蝇的速度大概是上一关中飞机速度的两倍。_
      CSD U3 Sprite Movement Left_2019: |-
        <img src="https://images.code.org/9f9162cb94a02d9b3aba9b6067d0281a-image-1491862771496.gif"
        style="float: right; margin-left: 20px">\\r
        \\r

        # 向左移动\\r

        \\r
        如果给x坐标加上一个数，会让它往右移动。那么怎样让它向左移动呢？\\r
        \\r

        # 这样做\\r

        \\r
        像右边的图片一样，让你的程序有动画。更新画图循环里的`fly.x`，从而让绘制每一帧时x轴都会往右一点。\\r
        \\r
        _提示：你能通过加减大一点的数让精灵移动得更快一些。在我们例子中的苍蝇的速度大概是上一关中飞机速度的两倍。_
      CSD U3 Sprite Movement Right: |-
        <img src="https://images.code.org/629bc615a879f0f3dc9f290bea2358c8-image-1491861334164.gif"
        style="float: right; margin-left: 20px">\\r
        \\r

        # 精灵移动\\r

        \\r
        通过计数器模式，你能写程序让精灵动画更流畅。增加或减少画图循环里精灵的`x`或`y`属性，能让每次重绘时，它都移动一点。\\r
        \\r

        # 这样做\\r

        \\r
        向右边的图片一样，在你的程序里实现动画。我们已经在绘画循环里加了一样来更新`plane.x`，但代码还需要完成。\\r
      CSD U3 Sprite Movement Right_2018: |-
        <img src="https://images.code.org/629bc615a879f0f3dc9f290bea2358c8-image-1491861334164.gif"
        style="float: right; margin-left: 20px">\\r
        \\r

        # 精灵移动\\r

        \\r
        通过计数器模式，你能写程序让精灵动画更流畅。增加或减少画图循环里精灵的`x`或`y`属性，能让每次重绘时，它都移动一点。\\r
        \\r

        # 这样做\\r

        \\r
        向右边的图片一样，在你的程序里实现动画。我们已经在绘画循环里加了一样来更新`plane.x`，但代码还需要完成。\\r
      CSD U3 Sprite Movement Right_2019: |-
        <img src="https://images.code.org/629bc615a879f0f3dc9f290bea2358c8-image-1491861334164.gif"
        style="float: right; margin-left: 20px">\\r
        \\r

        # 精灵移动\\r

        \\r
        通过计数器模式，你能写程序让精灵动画更流畅。增加或减少画图循环里精灵的`x`或`y`属性，能让每次重绘时，它都移动一点。\\r
        \\r

        # 这样做\\r

        \\r
        向右边的图片一样，在你的程序里实现动画。我们已经在绘画循环里加了一样来更新`plane.x`，但代码还需要完成。\\r
      CSD U3 Sprites anitab 1: |-
        # 图像\\r

        \\r
        通过**动画标签页**，你能看见这里已经为你加上了三个图片。你可以通过点击**动画**按钮来到达显示区域上的动画标签页。\\r
        \\r
        <img src="https://images.code.org/f694a37bbadcf0533e7b19d8c0f5309b-image-1465580394090.35.11
        PM.png" style="width:300px;float:right">\\r
        \\r
        一旦你创建了一个精灵，你能**用`sprite.setAnimation()`（精灵.设置动画）命令来将精灵从一个矩形改变成一张图片。** 你已经加载的图片都在动画标签页里，显示在`sprite.setAnimation()`的下拉菜单里。这个外星人是个例子。\\r
        \\r

        # 这样做\\r

        从动画标签页里选择你喜欢的图片来改变精灵。\\r
        \\r

        -   这里已经为你创建了一个设置好图片的精灵了。\\r
        -   运行代码看看是如何工作的。\\r
        -   改变`setAnimation`（设置动画）命令的输入来改变精灵的外观。\\r
        -   试试所有不同的图片。
      CSD U3 Sprites anitab 1_2018: |-
        # 图像\\r

        \\r
        通过**动画标签页**，你能看见这里已经为你加上了三个图片。你可以通过点击**动画**按钮来到达显示区域上的动画标签页。\\r
        \\r
        <img src="https://images.code.org/f694a37bbadcf0533e7b19d8c0f5309b-image-1465580394090.35.11
        PM.png" style="width:300px;float:right">\\r
        \\r
        一旦你创建了一个精灵，你能**用`sprite.setAnimation()`（精灵.设置动画）命令来将精灵从一个矩形改变成一张图片。** 你已经加载的图片都在动画标签页里，显示在`sprite.setAnimation()`的下拉菜单里。这个外星人是个例子。\\r
        \\r

        # 这样做\\r

        从动画标签页里选择你喜欢的图片来改变精灵。\\r
        \\r

        -   这里已经为你创建了一个设置好图片的精灵了。\\r
        -   运行代码看看是如何工作的。\\r
        -   改变`setAnimation`（设置动画）命令的输入来改变精灵的外观。\\r
        -   试试所有不同的图片。
      CSD U3 Sprites anitab 1_2019: |-
        # 图像\\r

        \\r
        通过**动画标签页**，你能看见这里已经为你加上了三个图片。你可以通过点击**动画**按钮来到达显示区域上的动画标签页。\\r
        \\r
        <img src="https://images.code.org/f694a37bbadcf0533e7b19d8c0f5309b-image-1465580394090.35.11
        PM.png" style="width:300px;float:right">\\r
        \\r
        一旦你创建了一个精灵，你能**用`sprite.setAnimation()`（精灵.设置动画）命令来将精灵从一个矩形改变成一张图片。** 你已经加载的图片都在动画标签页里，显示在`sprite.setAnimation()`的下拉菜单里。这个外星人是个例子。\\r
        \\r

        # 这样做\\r

        从动画标签页里选择你喜欢的图片来改变精灵。\\r
        \\r

        -   这里已经为你创建了一个设置好图片的精灵了。\\r
        -   运行代码看看是如何工作的。\\r
        -   改变`setAnimation`（设置动画）命令的输入来改变精灵的外观。\\r
        -   试试所有不同的图片。
      CSD U3 Sprites anitab 2: "# 上传你自己的图片。\\\\r\n\n\\\\r\n你可以用动画标签页来上传或绘制你自己的图片。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n接下来会做一个风筝。你可以在网络上搜索图片，或者自己画一个。\\\\r\n\\\\r\n\\*\n下载你的风筝图片，最好是背景是透明的图片。\\\\r\n\\*\n打开动画标签页。\\\\r\n\n-   点击<img src=\"https://images.code.org/346f6657dba57b0c3bd5deb534f76b69-image-1466194432449.13.05\n    PM.png\" style=\"width:50px\"> 然后用<img src=\"https://images.code.org/60c0371b45b29f10a3c8530db9154428-image-1466194434329.13.16\n    PM.png\" style=\"width:50px\"> 上传图片.\\\\r\n-   从电脑上选择图片文件。\\\\r\n-   将图片重命名为好记的名字。点击图片下的文本来重命名。\\\\r\n-   回到代码模式，用`sprite.setAnimation()`来让`kite`精灵展示新的动画。\\\\r\n    \\\\r\n    如果你的风筝图片太大了，别担心。我们会在下一关学会如何解决它。"
      CSD U3 Sprites anitab 2_2018: "# 上传你自己的图片。\\\\r\n\n\\\\r\n你可以用动画标签页来上传或绘制你自己的图片。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n接下来会做一个风筝。你可以在网络上搜索图片，或者自己画一个。\\\\r\n\\\\r\n\\*\n下载你的风筝图片，最好是背景是透明的图片。\\\\r\n\\*\n打开动画标签页。\\\\r\n\n-   点击<img src=\"https://images.code.org/346f6657dba57b0c3bd5deb534f76b69-image-1466194432449.13.05\n    PM.png\" style=\"width:50px\"> 然后用<img src=\"https://images.code.org/60c0371b45b29f10a3c8530db9154428-image-1466194434329.13.16\n    PM.png\" style=\"width:50px\"> 上传图片.\\\\r\n-   从电脑上选择图片文件。\\\\r\n-   将图片重命名为好记的名字。点击图片下的文本来重命名。\\\\r\n-   回到代码模式，用`sprite.setAnimation()`来让`kite`精灵展示新的动画。\\\\r\n    \\\\r\n    如果你的风筝图片太大了，别担心。我们会在下一关学会如何解决它。"
      CSD U3 Sprites anitab 2_2019: "# 上传你自己的图片。\\\\r\n\n\\\\r\n你可以用动画标签页来上传或绘制你自己的图片。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n接下来会做一个风筝。你可以在网络上搜索图片，或者自己画一个。\\\\r\n\\\\r\n\\*\n下载你的风筝图片，最好是背景是透明的图片。\\\\r\n\\*\n打开动画标签页。\\\\r\n\n-   点击<img src=\"https://images.code.org/346f6657dba57b0c3bd5deb534f76b69-image-1466194432449.13.05\n    PM.png\" style=\"width:50px\"> 然后用<img src=\"https://images.code.org/60c0371b45b29f10a3c8530db9154428-image-1466194434329.13.16\n    PM.png\" style=\"width:50px\"> 上传图片.\\\\r\n-   从电脑上选择图片文件。\\\\r\n-   将图片重命名为好记的名字。点击图片下的文本来重命名。\\\\r\n-   回到代码模式，用`sprite.setAnimation()`来让`kite`精灵展示新的动画。\\\\r\n    \\\\r\n    如果你的风筝图片太大了，别担心。我们会在下一关学会如何解决它。"
      CSD U3 Sprites anitab 3: |-
        # 用缩放调整尺寸\\r

        \\r
        在工具箱的_精灵_画家里，你能找到一个叫做`sprite.scale`（精灵.缩放）的新模块。
        它能让你改变图片的相对于原始大小的尺寸。
        `sprite.scale = 1`表示原始尺寸。`sprite.scale = 0.5`会让图片变成原先的一半大。`sprite.scale = 2`会让它是两倍大。\\r
        \\r

        # 这样做\\r

        \\r
        程序已经包含了你新上传的图片，但很可能尺寸不是_完全正确_的。用`sprite.scale`来改变`kite`精灵的尺寸。\\r
        \\r
        _暗示：代码的顺序很重要！你需要在创建了精灵**以后**，但在用`drawSprites()`（画精灵）之前增加 `sprite.scale`。为了清楚，试着把所有的精灵代码都放到一起，放到程序的最顶部。_
      CSD U3 Sprites anitab 3_2018: |-
        # 用缩放调整尺寸\\r

        \\r
        在工具箱的_精灵_画家里，你能找到一个叫做`sprite.scale`（精灵.缩放）的新模块。
        它能让你改变图片的相对于原始大小的尺寸。
        `sprite.scale = 1`表示原始尺寸。`sprite.scale = 0.5`会让图片变成原先的一半大。`sprite.scale = 2`会让它是两倍大。\\r
        \\r

        # 这样做\\r

        \\r
        程序已经包含了你新上传的图片，但很可能尺寸不是_完全正确_的。用`sprite.scale`来改变`kite`精灵的尺寸。\\r
        \\r
        _暗示：代码的顺序很重要！你需要在创建了精灵**以后**，但在用`drawSprites()`（画精灵）之前增加 `sprite.scale`。为了清楚，试着把所有的精灵代码都放到一起，放到程序的最顶部。_
      CSD U3 Sprites anitab 3_2019: |-
        # 用缩放调整尺寸\\r

        \\r
        在工具箱的_精灵_画家里，你能找到一个叫做`sprite.scale`（精灵.缩放）的新模块。
        它能让你改变图片的相对于原始大小的尺寸。
        `sprite.scale = 1`表示原始尺寸。`sprite.scale = 0.5`会让图片变成原先的一半大。`sprite.scale = 2`会让它是两倍大。\\r
        \\r

        # 这样做\\r

        \\r
        程序已经包含了你新上传的图片，但很可能尺寸不是_完全正确_的。用`sprite.scale`来改变`kite`精灵的尺寸。\\r
        \\r
        _暗示：代码的顺序很重要！你需要在创建了精灵**以后**，但在用`drawSprites()`（画精灵）之前增加 `sprite.scale`。为了清楚，试着把所有的精灵代码都放到一起，放到程序的最顶部。_
      CSD U3 Sprites anitab 4: |-
        # 用缩放调整尺寸\\r

        \\r
        在工具箱的_精灵_画家里，你能找到一个叫做`sprite.scale`（精灵.缩放）的新模块。
        它能让你改变图片的相对于原始大小的尺寸。
        `sprite.scale = 1`表示原始尺寸。`sprite.scale = 0.5`会让图片变成原先的一半大。`sprite.scale = 2`会让它是两倍大。\\r
        \\r

        # 这样做\\r

        \\r
        现在，程序包含了你新上传的图片，但很可能尺寸不是_完全正确_的。用`sprite.scale`来改变`kite`精灵的尺寸。\\r
        \\r
        _暗示：代码的顺序很重要！你需要在创建了精灵**以后**，但在用`drawSprites()`（画精灵）之前增加 `sprite.scale`。为了清楚，试着把所有的精灵代码都放到一起，放到程序的最顶部。_
      CSD U3 Sprites intro debug: |-
        <img src="https://images.code.org/63207a624d751aacb376db18cdf09eec-image-1491255841823.png" style="width: 150px; float: right; margin-left: 20px; border: 1px solid #f2f2f2;">

        # 调试

        程序应该已经创建了两个新精灵，一个在屏幕左边，另一个在右边。但是它只画出了一个。**你不需要增加任何代码**，仅通过重新排列代码来让两个精灵都像右边的图片一样显示出来。
      CSD U3 Sprites intro debug_2018: |-
        <img src="https://images.code.org/63207a624d751aacb376db18cdf09eec-image-1491255841823.png" style="width: 150px; float: right; margin-left: 20px; border: 1px solid #f2f2f2;">

        # 调试

        程序应该已经创建了两个新精灵，一个在屏幕左边，另一个在右边。但是它只画出了一个。**你不需要增加任何代码**，仅通过重新排列代码来让两个精灵都像右边的图片一样显示出来。
      CSD U3 Sprites intro debug_2019: |-
        <img src="https://images.code.org/63207a624d751aacb376db18cdf09eec-image-1491255841823.png" style="width: 150px; float: right; margin-left: 20px; border: 1px solid #f2f2f2;">

        # 调试

        程序应该已经创建了两个新精灵，一个在屏幕左边，另一个在右边。但是它只画出了一个。**你不需要增加任何代码**，仅通过重新排列代码来让两个精灵都像右边的图片一样显示出来。
      CSD U3 Sprites scene challenge: |-
        # 挑战：扩展你的场景\\r

        \\r
        _在开始之前，先征询你的老师。_\\r
        \\r
        现在你已经完成了你的场景，考虑一下增加一些东西，或者创建一个新的。
      CSD U3 Sprites scene challenge_2018: |-
        # 挑战：扩展你的场景\\r

        \\r
        _在开始之前，先征询你的老师。_\\r
        \\r
        现在你已经完成了你的场景，考虑一下增加一些东西，或者创建一个新的。
      CSD U3 Sprites scene challenge_2019: |-
        # 挑战：扩展你的场景\\r

        \\r
        _在开始之前，先征询你的老师。_\\r
        \\r
        现在你已经完成了你的场景，考虑一下增加一些东西，或者创建一个新的。
      CSD U3 Sprites scene drawing: "# 创建你的场景 - 画图\\\\r\n\n\\\\r\n你将要开始创建一个自己的场景。如果你没做过，花一分钟来构建一个场景的轮廓（考虑使用坐标纸）。一旦对你的场景有了主意和计划，就可以从画背景开始了。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n\n-   用一个`background()`（背景）命令来给整个屏幕填满颜色。\\\\r\n-   \\*\n    用所需要的形状命令来绘制除了精灵外的场景。"
      CSD U3 Sprites scene drawing_2018: "# 创建你的场景 - 画图\\\\r\n\n\\\\r\n你将要开始创建一个自己的场景。如果你没做过，花一分钟来构建一个场景的轮廓（考虑使用坐标纸）。一旦对你的场景有了主意和计划，就可以从画背景开始了。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n\n-   用一个`background()`（背景）命令来给整个屏幕填满颜色。\\\\r\n-   \\*\n    用所需要的形状命令来绘制除了精灵外的场景。"
      CSD U3 Sprites scene drawing_2019: "# 创建你的场景 - 画图\\\\r\n\n\\\\r\n你将要开始创建一个自己的场景。如果你没做过，花一分钟来构建一个场景的轮廓（考虑使用坐标纸）。一旦对你的场景有了主意和计划，就可以从画背景开始了。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n\n-   用一个`background()`（背景）命令来给整个屏幕填满颜色。\\\\r\n-   \\*\n    用所需要的形状命令来绘制除了精灵外的场景。"
      CSD U3 Sprites scene sprites: |-
        # 创建你的场景 - 精灵\\r

        \\r
        有了背景以后，就该添加你的精灵了。\\r

        # 这样做\\r

        \\r
        \*
        在动画标签页里添加或创建你的所有精灵图片。\\r

        -   在程序顶部为每个精灵创建一个变量，并用`setAnimation()`（设置动画）来分配你在动画标签页里创建的图片。\\r
        -   在你程序的结尾处调用一次`drawSprites()`（绘制精灵）。\\r
            \\r
            _提示：你可能会想在程序的最后面调用`drawSprites()`来让精灵出现在背景的上面。但有时，你需要早一些调用`drawSprites()`。让它们在某些形状的上面，而在另一些形状的下面。_
      CSD U3 Sprites scene sprites_2018: |-
        # 创建你的场景 - 精灵\\r

        \\r
        有了背景以后，就该添加你的精灵了。\\r

        # 这样做\\r

        \\r
        \*
        在动画标签页里添加或创建你的所有精灵图片。\\r

        -   在程序顶部为每个精灵创建一个变量，并用`setAnimation()`（设置动画）来分配你在动画标签页里创建的图片。\\r
        -   在你程序的结尾处调用一次`drawSprites()`（绘制精灵）。\\r
            \\r
            _提示：你可能会想在程序的最后面调用`drawSprites()`来让精灵出现在背景的上面。但有时，你需要早一些调用`drawSprites()`。让它们在某些形状的上面，而在另一些形状的下面。_
      CSD U3 Sprites scene sprites_2019: |-
        # 创建你的场景 - 精灵\\r

        \\r
        有了背景以后，就该添加你的精灵了。\\r

        # 这样做\\r

        \\r
        \*
        在动画标签页里添加或创建你的所有精灵图片。\\r

        -   在程序顶部为每个精灵创建一个变量，并用`setAnimation()`（设置动画）来分配你在动画标签页里创建的图片。\\r
        -   在你程序的结尾处调用一次`drawSprites()`（绘制精灵）。\\r
            \\r
            _提示：你可能会想在程序的最后面调用`drawSprites()`来让精灵出现在背景的上面。但有时，你需要早一些调用`drawSprites()`。让它们在某些形状的上面，而在另一些形状的下面。_
      CSD U3 Sprites scene text: |-
        # 创建你的场景 - 文本\\r

        \\r
        你的场景上最后一件事是添加文本。.\\r
        \\r

        # 这样做\\r

        \\r

        -   为每一行文本添加一个`"text"`（文本）命令。\\r
        -   如果需要，可以用`fill()`（填充）
            和`textSize()`（文本大小）来改变文本外观。\\r
            \\r
            _提示：大部分场景的文本都在所有东西的最上面，这需要把`"text"`（文本）命令放到程序的最后一行。不过，如果你希望文本在其它元素下面，可以考虑改变代码的顺序。_
      CSD U3 Sprites scene text_2018: |-
        # 创建你的场景 - 文本\\r

        \\r
        你的场景上最后一件事是添加文本。.\\r
        \\r

        # 这样做\\r

        \\r

        -   为每一行文本添加一个`"text"`（文本）命令。\\r
        -   如果需要，可以用`fill()`（填充）
            和`textSize()`（文本大小）来改变文本外观。\\r
            \\r
            _提示：大部分场景的文本都在所有东西的最上面，这需要把`"text"`（文本）命令放到程序的最后一行。不过，如果你希望文本在其它元素下面，可以考虑改变代码的顺序。_
      CSD U3 Sprites scene text_2019: |-
        # 创建你的场景 - 文本\\r

        \\r
        你的场景上最后一件事是添加文本。.\\r
        \\r

        # 这样做\\r

        \\r

        -   为每一行文本添加一个`"text"`（文本）命令。\\r
        -   如果需要，可以用`fill()`（填充）
            和`textSize()`（文本大小）来改变文本外观。\\r
            \\r
            _提示：大部分场景的文本都在所有东西的最上面，这需要把`"text"`（文本）命令放到程序的最后一行。不过，如果你希望文本在其它元素下面，可以考虑改变代码的顺序。_
      CSD U3 Sprites text debug-2018: |-
        <img src="https://images.code.org/a313a455ef7033e840dfb21cb15cbb30-image-1491277088617.png" style="float: right; width: 200px; margin-left: 20px;">

        # 调试

        这个场景的代码都有了，但是顺序不对。这个场景应该和右边的图片一样。你能改变模块的顺序，让每场景的每部分都用正确的顺序画出来吗？
      CSD U3 Sprites text debug: |-
        <img src="https://images.code.org/a313a455ef7033e840dfb21cb15cbb30-image-1491277088617.png" style="float: right; width: 200px; margin-left: 20px;">

        # 调试

        这个场景的代码都有了，但是顺序不对。这个场景应该和右边的图片一样。你能改变模块的顺序，让每场景的每部分都用正确的顺序画出来吗？
      CSD U3 Sprites text debug_2018: |-
        <img src="https://images.code.org/a313a455ef7033e840dfb21cb15cbb30-image-1491277088617.png" style="float: right; width: 200px; margin-left: 20px;">

        # 调试

        这个场景的代码都有了，但是顺序不对。这个场景应该和右边的图片一样。你能改变模块的顺序，让每场景的每部分都用正确的顺序画出来吗？
      CSD U3 Sprites text debug_2018_2019: |-
        <img src="https://images.code.org/a313a455ef7033e840dfb21cb15cbb30-image-1491277088617.png" style="float: right; width: 200px; margin-left: 20px;">

        # 调试

        这个场景的代码都有了，但是顺序不对。这个场景应该和右边的图片一样。你能改变模块的顺序，让每场景的每部分都用正确的顺序画出来吗？
      CSD U3 Sprites text: |-
        # 添加文本\\r

        \\r
        你能用`text`（文本）将文本放到屏幕上的任何位置。改变已有代码里的文本，然后增加另一个`text`标签到屏幕的其它位置。\\r
        \\r
        _提示：默认文本的字体比较小，可以用`textSize`（文本尺寸）来改变它。也可以用`fill`（填充）来改变文本的颜色。_
      CSD U3 Sprites text_2018: |-
        # 添加文本\\r

        \\r
        你能用`text`（文本）将文本放到屏幕上的任何位置。改变已有代码里的文本，然后增加另一个`text`标签到屏幕的其它位置。\\r
        \\r
        _提示：默认文本的字体比较小，可以用`textSize`（文本尺寸）来改变它。也可以用`fill`（填充）来改变文本的颜色。_
      CSD U3 Sprites text_2019: |-
        # 添加文本\\r

        \\r
        你能用`text`（文本）将文本放到屏幕上的任何位置。改变已有代码里的文本，然后增加另一个`text`标签到屏幕的其它位置。\\r
        \\r
        _提示：默认文本的字体比较小，可以用`textSize`（文本尺寸）来改变它。也可以用`fill`（填充）来改变文本的颜色。_
      CSD U3 UP_ARROW-2018: |-
        # 移动精灵\\r

        \\r
        你可以根据按下的键来决定如何改变精灵的位置，同样也能改变它的动画。\\r
        \\r

        # 这样做\\r

        \\r

        -   在循环里增加一个`如果`语句。\\r
        -   检查是否右方向键被按下了。\\r
        -   \*
            在条件里添加代码，如果右方向键按下了，就将精灵向右移动。\\r
            \\r
            _你需要改变精灵的x或y属性来将它向右移动吗？_
      CSD U3 UP_ARROW_2018: |-
        # 移动精灵\\r

        \\r
        你可以根据按下的键来决定如何改变精灵的位置，同样也能改变它的动画。\\r
        \\r

        # 这样做\\r

        \\r

        -   在循环里增加一个`如果`语句。\\r
        -   检查是否右方向键被按下了。\\r
        -   \*
            在条件里添加代码，如果右方向键按下了，就将精灵向右移动。\\r
            \\r
            _你需要改变精灵的x或y属性来将它向右移动吗？_
      CSD U3 UP_ARROW_2018_2019: |-
        # 移动精灵\\r

        \\r
        你可以根据按下的键来决定如何改变精灵的位置，同样也能改变它的动画。\\r
        \\r

        # 这样做\\r

        \\r

        -   在循环里增加一个`如果`语句。\\r
        -   检查是否右方向键被按下了。\\r
        -   \*
            在条件里添加代码，如果右方向键按下了，就将精灵向右移动。\\r
            \\r
            _你需要改变精灵的x或y属性来将它向右移动吗？_
      CSD U3 Variables Challenge: |-
        # 挑战：更新变量\\r

        \\r
        _开始这个挑战前，先问问你的老师。_\\r
        \\r
        目前为止，我们仅仅给一个变量赋了一次值，但你知道变量能在程序执行中更新吗？通读一下提供的程序，运行它几次来理解一下它是如何工作的，然后试着改变程序来画下面的某幅图。\\r
        \\r
        \\r
        <img
        src="https://images.code.org/29f4d46d5aa041fb7d27aa2e3c77652e-image-1493161823337.png"
        style="width:150px; border: 1px solid grey; margin:20px;">\\r
        <img src="https://images.code.org/629819fe91016ee1b8275c81e41770b5-image-1493161823334.png"
        style="width:150px; border: 1px solid grey; margin:20px;">\\r
        <img src="https://images.code.org/acf7b8223b3a87594e20348306464de7-image-1493161823305.png"
        style="width:150px; border: 1px solid grey; margin:20px;">\\r
      CSD U3 Variables Challenge_2018: |-
        # 挑战：更新变量\\r

        \\r
        _开始这个挑战前，先问问你的老师。_\\r
        \\r
        目前为止，我们仅仅给一个变量赋了一次值，但你知道变量能在程序执行中更新吗？通读一下提供的程序，运行它几次来理解一下它是如何工作的，然后试着改变程序来画下面的某幅图。\\r
        \\r
        \\r
        <img
        src="https://images.code.org/29f4d46d5aa041fb7d27aa2e3c77652e-image-1493161823337.png"
        style="width:150px; border: 1px solid grey; margin:20px;">\\r
        <img src="https://images.code.org/629819fe91016ee1b8275c81e41770b5-image-1493161823334.png"
        style="width:150px; border: 1px solid grey; margin:20px;">\\r
        <img src="https://images.code.org/acf7b8223b3a87594e20348306464de7-image-1493161823305.png"
        style="width:150px; border: 1px solid grey; margin:20px;">\\r
      CSD U3 Variables Challenge_2019: |-
        # 挑战：更新变量\\r

        \\r
        _开始这个挑战前，先问问你的老师。_\\r
        \\r
        目前为止，我们仅仅给一个变量赋了一次值，但你知道变量能在程序执行中更新吗？通读一下提供的程序，运行它几次来理解一下它是如何工作的，然后试着改变程序来画下面的某幅图。\\r
        \\r
        \\r
        <img
        src="https://images.code.org/29f4d46d5aa041fb7d27aa2e3c77652e-image-1493161823337.png"
        style="width:150px; border: 1px solid grey; margin:20px;">\\r
        <img src="https://images.code.org/629819fe91016ee1b8275c81e41770b5-image-1493161823334.png"
        style="width:150px; border: 1px solid grey; margin:20px;">\\r
        <img src="https://images.code.org/acf7b8223b3a87594e20348306464de7-image-1493161823305.png"
        style="width:150px; border: 1px solid grey; margin:20px;">\\r
      CSD U3 Variables Draw Challenge: |-
        # 挑战：画一个图像\\r

        \\r
        _开始这个挑战前，先问问你的老师。_\\r
        \\r
        用变量来存放一个会在多个条目上使用的尺寸或位置。例如，画一张脸时，控制眼睛、耳朵、和鼻孔的尺寸和位置的变量。画完后，可以试着改变这些变量的值来让整个图片一起变化。\\r
      CSD U3 Variables Draw Challenge_2018: |-
        # 挑战：画一个图像\\r

        \\r
        _开始这个挑战前，先问问你的老师。_\\r
        \\r
        用变量来存放一个会在多个条目上使用的尺寸或位置。例如，画一张脸时，控制眼睛、耳朵、和鼻孔的尺寸和位置的变量。画完后，可以试着改变这些变量的值来让整个图片一起变化。\\r
      CSD U3 Variables Draw Challenge_2019: |-
        # 挑战：画一个图像\\r

        \\r
        _开始这个挑战前，先问问你的老师。_\\r
        \\r
        用变量来存放一个会在多个条目上使用的尺寸或位置。例如，画一张脸时，控制眼睛、耳朵、和鼻孔的尺寸和位置的变量。画完后，可以试着改变这些变量的值来让整个图片一起变化。\\r
      CSD U3 Variables Draw Poppy: |-
        # 多次使用一个变量\\r

        \\r
        这个程序只有一个叫做`petalSize`（花瓣尺寸）的变量，但它被使用了8次。这回让画图时的很多变化都更容易。\\r
        \\r

        # 这样做\\r

        \\r

        -   改变赋给`petalSize`的值，让红色花瓣能够相互接触。\\r
        -   找到最合理的尺寸。和你周围的人比较一下。
      CSD U3 Variables Draw Poppy_2018: |-
        # 多次使用一个变量\\r

        \\r
        这个程序只有一个叫做`petalSize`（花瓣尺寸）的变量，但它被使用了8次。这回让画图时的很多变化都更容易。\\r
        \\r

        # 这样做\\r

        \\r

        -   改变赋给`petalSize`的值，让红色花瓣能够相互接触。\\r
        -   找到最合理的尺寸。和你周围的人比较一下。
      CSD U3 Variables Draw Poppy_2019: |-
        # 多次使用一个变量\\r

        \\r
        这个程序只有一个叫做`petalSize`（花瓣尺寸）的变量，但它被使用了8次。这回让画图时的很多变化都更容易。\\r
        \\r

        # 这样做\\r

        \\r

        -   改变赋给`petalSize`的值，让红色花瓣能够相互接触。\\r
        -   找到最合理的尺寸。和你周围的人比较一下。
      CSD U3 Variables Predict Where X Embed: |-
        # 预测\\r

        \\r
        屏幕的哪个角落会画圆圈？
      CSD U3 Variables Predict Where X: |-
        # 使用变量\\r

        \\r
        程序中的`xPosition`被用来存储圆圈的x坐标。\\r
        \\r

        # 这样做\\r

        -   运行程序看看它如何运行的。\\r
        -   改动变量里的数字([显示在哪里](#triggercallout=code_triggered)) 并再运行一下。
      CSD U3 Variables Predict Where XY Embed: |-
        # 预测\\r

        \\r
        圆圈会被绘制到屏幕的哪个角落？\\r
        \\r
        _提示：点击"显示网格"按钮来帮助你找到屏幕上的精确位置。_
      CSD U3 Variables Predict Where XY Embed_2018: |-
        # 预测\\r

        \\r
        圆圈会被绘制到屏幕的哪个角落？\\r
        \\r
        _提示：点击"显示网格"按钮来帮助你找到屏幕上的精确位置。_
      CSD U3 Variables Predict Where XY Embed_2019: |-
        # 预测\\r

        \\r
        圆圈会被绘制到屏幕的哪个角落？\\r
        \\r
        _提示：点击"显示网格"按钮来帮助你找到屏幕上的精确位置。_
      CSD U3 Variables Predict Where X_2018: |-
        # 使用变量\\r

        \\r
        程序中的`xPosition`被用来存储圆圈的x坐标。\\r
        \\r

        # 这样做\\r

        -   运行程序看看它如何运行的。\\r
        -   改动变量里的数字([显示在哪里](#triggercallout=code_triggered)) 并再运行一下。
      CSD U3 Variables Predict Where X_2019: |-
        # 使用变量\\r

        \\r
        程序中的`xPosition`被用来存储圆圈的x坐标。\\r
        \\r

        # 这样做\\r

        -   运行程序看看它如何运行的。\\r
        -   改动变量里的数字([显示在哪里](#triggercallout=code_triggered)) 并再运行一下。
      CSD U3 Variables change circle size: |-
        <img src="https://images.code.org/acc7f5763a9ca1c17647f7dd9711c9f5-image-1490977696189.28.01
        AM.png" style="float:right; height:150px">\\r
        \\r

        # 调试：使用变量\\r

        \\r
        这个程序使用了`circleSize`（圆圈尺寸）变量来控制一个园的宽和高。如果让圆圈足够大，它就会像右边的图片一样填满整个屏幕。\\r
        \\r

        # 这样做\\r

        \\r

        -   改变赋给`circleSize`的值，让圆圈覆盖整个屏幕。
      CSD U3 Variables change circle size_2018: |-
        <img src="https://images.code.org/acc7f5763a9ca1c17647f7dd9711c9f5-image-1490977696189.28.01
        AM.png" style="float:right; height:150px">\\r
        \\r

        # 调试：使用变量\\r

        \\r
        这个程序使用了`circleSize`（圆圈尺寸）变量来控制一个园的宽和高。如果让圆圈足够大，它就会像右边的图片一样填满整个屏幕。\\r
        \\r

        # 这样做\\r

        \\r

        -   改变赋给`circleSize`的值，让圆圈覆盖整个屏幕。
      CSD U3 Variables change circle size_2019: |-
        <img src="https://images.code.org/acc7f5763a9ca1c17647f7dd9711c9f5-image-1490977696189.28.01
        AM.png" style="float:right; height:150px">\\r
        \\r

        # 调试：使用变量\\r

        \\r
        这个程序使用了`circleSize`（圆圈尺寸）变量来控制一个园的宽和高。如果让圆圈足够大，它就会像右边的图片一样填满整个屏幕。\\r
        \\r

        # 这样做\\r

        \\r

        -   改变赋给`circleSize`的值，让圆圈覆盖整个屏幕。
      CSD U3 Variables naming rules v2-2018: |-
        <img style="float: right" src="https://images.code.org/f4b306422763c84bb924f4f7d3a6dca6-image-1492798058864.06.38 AM.png">

        # 调试：命名变量

        程序因为错误的标签名字而有好几个错误。这些错误造成程序不能在模块模式下查看，因此代码在文本模式下。

        # 这样做

        -   找到每个变量标签违反的规则。
        -   **根据在上一关学到的规则来选择新的名称，从而纠正错误。**
        -   如果程序修好了，它能画出右边的图像。

        <summary><em>提示：点击箭头来快速浏览规则。</em><details><ul>
        <li>标签不能有空格。</li>
        <li>标签不能以数字开始。</li>
        <li>大小写和拼写必须完全一致。</li>
        </ul></details></summary>
      CSD U3 Variables naming rules v2: |-
        <img style="float: right" src="https://images.code.org/f4b306422763c84bb924f4f7d3a6dca6-image-1492798058864.06.38 AM.png">

        # 调试：命名变量

        程序因为错误的标签名字而有好几个错误。这些错误造成程序不能在模块模式下查看，因此代码在文本模式下。

        # 这样做

        -   找到每个变量标签违反的规则。
        -   **根据在上一关学到的规则来选择新的名称，从而纠正错误。**
        -   如果程序修好了，它能画出右边的图像。

        <summary><em>提示：点击箭头来快速浏览规则。</em><details><ul>
        <li>标签不能有空格。</li>
        <li>标签不能以数字开始。</li>
        <li>大小写和拼写必须完全一致。</li>
        </ul></details></summary>
      CSD U3 Variables naming rules v2_2018: |-
        <img style="float: right" src="https://images.code.org/f4b306422763c84bb924f4f7d3a6dca6-image-1492798058864.06.38 AM.png">

        # 调试：命名变量

        程序因为错误的标签名字而有好几个错误。这些错误造成程序不能在模块模式下查看，因此代码在文本模式下。

        # 这样做

        -   找到每个变量标签违反的规则。
        -   **根据在上一关学到的规则来选择新的名称，从而纠正错误。**
        -   如果程序修好了，它能画出右边的图像。

        <summary><em>提示：点击箭头来快速浏览规则。</em><details><ul>
        <li>标签不能有空格。</li>
        <li>标签不能以数字开始。</li>
        <li>大小写和拼写必须完全一致。</li>
        </ul></details></summary>
      CSD U3 Variables naming rules v2_2018_2019: |-
        <img style="float: right" src="https://images.code.org/f4b306422763c84bb924f4f7d3a6dca6-image-1492798058864.06.38 AM.png">

        # 调试：命名变量

        程序因为错误的标签名字而有好几个错误。这些错误造成程序不能在模块模式下查看，因此代码在文本模式下。

        # 这样做

        -   找到每个变量标签违反的规则。
        -   **根据在上一关学到的规则来选择新的名称，从而纠正错误。**
        -   如果程序修好了，它能画出右边的图像。

        <summary><em>提示：点击箭头来快速浏览规则。</em><details><ul>
        <li>标签不能有空格。</li>
        <li>标签不能以数字开始。</li>
        <li>大小写和拼写必须完全一致。</li>
        </ul></details></summary>
      CSD U3 Variables random with assignment: "<img src=\"https://images.code.org/ba9592e887f52c1a538a0517560cdacf-image-1493913633878.gif\"\nstyle=\"float:right;height:150px\">\\\\r\n\\\\r\n\n# 调试：变量和随机数\\\\r\n\n\\\\r\n随机数也能赋给变量。这样，你能保存一个随机值，并在程序中多次使用。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n`eyeSize`（眼睛尺寸）被分派了一个随机数。不幸的是，只有一只眼睛用了它。\\\\r\n\\\\r\n\n-   **运行程序**来看看它是如何工作的。\\\\r\n-   **改动程序**来让两只眼睛都是同样的随机尺寸。提示：你只需要改动一行代码即可。"
      CSD U3 Variables random with assignment_2018: "<img src=\"https://images.code.org/ba9592e887f52c1a538a0517560cdacf-image-1493913633878.gif\"\nstyle=\"float:right;height:150px\">\\\\r\n\\\\r\n\n# 调试：变量和随机数\\\\r\n\n\\\\r\n随机数也能赋给变量。这样，你能保存一个随机值，并在程序中多次使用。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n`eyeSize`（眼睛尺寸）被分派了一个随机数。不幸的是，只有一只眼睛用了它。\\\\r\n\\\\r\n\n-   **运行程序**来看看它是如何工作的。\\\\r\n-   **改动程序**来让两只眼睛都是同样的随机尺寸。提示：你只需要改动一行代码即可。"
      CSD U3 Variables random with assignment_2019: "<img src=\"https://images.code.org/ba9592e887f52c1a538a0517560cdacf-image-1493913633878.gif\"\nstyle=\"float:right;height:150px\">\\\\r\n\\\\r\n\n# 调试：变量和随机数\\\\r\n\n\\\\r\n随机数也能赋给变量。这样，你能保存一个随机值，并在程序中多次使用。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n`eyeSize`（眼睛尺寸）被分派了一个随机数。不幸的是，只有一只眼睛用了它。\\\\r\n\\\\r\n\n-   **运行程序**来看看它是如何工作的。\\\\r\n-   **改动程序**来让两只眼睛都是同样的随机尺寸。提示：你只需要改动一行代码即可。"
      CSD U3 Watcher Debug: |-
        <img src="https://images.code.org/20cc981b4b4f99b2ff96415e19af7600-image-1492034149715.gif"
        style="float: right; margin-left: 20px;">\\r
        \\r

        # 调试：观察计数器模式。\\r

        \\r
        让我们练习使用观察器来调试代码。程序应该像右边的图片一样，将摩托车从左下角挪到右上角。不幸的是，摩托车移动得太快，而看不出哪里有问题。\\r
        \\r
        使用提供的`cycle.x`和`cycle.y`的观察器，确认哪一个方向的移动错了，并修复程序。
      CSD U3 Watcher Debug_2018: |-
        <img src="https://images.code.org/20cc981b4b4f99b2ff96415e19af7600-image-1492034149715.gif"
        style="float: right; margin-left: 20px;">\\r
        \\r

        # 调试：观察计数器模式。\\r

        \\r
        让我们练习使用观察器来调试代码。程序应该像右边的图片一样，将摩托车从左下角挪到右上角。不幸的是，摩托车移动得太快，而看不出哪里有问题。\\r
        \\r
        使用提供的`cycle.x`和`cycle.y`的观察器，确认哪一个方向的移动错了，并修复程序。
      CSD U3 Watcher Debug_2019: |-
        <img src="https://images.code.org/20cc981b4b4f99b2ff96415e19af7600-image-1492034149715.gif"
        style="float: right; margin-left: 20px;">\\r
        \\r

        # 调试：观察计数器模式。\\r

        \\r
        让我们练习使用观察器来调试代码。程序应该像右边的图片一样，将摩托车从左下角挪到右上角。不幸的是，摩托车移动得太快，而看不出哪里有问题。\\r
        \\r
        使用提供的`cycle.x`和`cycle.y`的观察器，确认哪一个方向的移动错了，并修复程序。
      CSD U3 Watcher Predict response: |-
        # 观察计数器模式\\r

        \\r
        观察器是一个使用计数器模式的，非常有用的工具来调试程序。\\r
        \\r

        -   **读一读程序**并预测一下会做什么。\\r
        -   **运行程序**来核对一下预测。\\r
        -   **看一下观察器**向你的邻座解释一下你看到了什么。\\r
            \\r
      CSD U3 Watcher Predict response_2018: |-
        # 观察计数器模式\\r

        \\r
        观察器是一个使用计数器模式的，非常有用的工具来调试程序。\\r
        \\r

        -   **读一读程序**并预测一下会做什么。\\r
        -   **运行程序**来核对一下预测。\\r
        -   **看一下观察器**向你的邻座解释一下你看到了什么。\\r
            \\r
      CSD U3 Watcher Predict response_2019: |-
        # 观察计数器模式\\r

        \\r
        观察器是一个使用计数器模式的，非常有用的工具来调试程序。\\r
        \\r

        -   **读一读程序**并预测一下会做什么。\\r
        -   **运行程序**来核对一下预测。\\r
        -   **看一下观察器**向你的邻座解释一下你看到了什么。\\r
            \\r
      CSD U3 abstraction accelerateX: "# 速度和计数器模式\\\\r\n\n\\\\r\n正如你刚刚看到的，将计数器模式用到`sprite.velocityX`属性上，会在程序中改变精灵的速度。这会让精灵加速。自己练习一下这个模式吧。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n这个程序已经让汽车穿越屏幕了，但是非常慢。\\\\r\n\\\\r\n\n-   用计数器模式来改变精灵的velocityX属性，来让汽车加速。 ( [显示在哪里](#triggercallout=code_triggered)\n    )"
      CSD U3 abstraction accelerateX_2018: "# 速度和计数器模式\\\\r\n\n\\\\r\n正如你刚刚看到的，将计数器模式用到`sprite.velocityX`属性上，会在程序中改变精灵的速度。这会让精灵加速。自己练习一下这个模式吧。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n这个程序已经让汽车穿越屏幕了，但是非常慢。\\\\r\n\\\\r\n\n-   用计数器模式来改变精灵的velocityX属性，来让汽车加速。 ( [显示在哪里](#triggercallout=code_triggered)\n    )"
      CSD U3 abstraction accelerateX_2019: "# 速度和计数器模式\\\\r\n\n\\\\r\n正如你刚刚看到的，将计数器模式用到`sprite.velocityX`属性上，会在程序中改变精灵的速度。这会让精灵加速。自己练习一下这个模式吧。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n这个程序已经让汽车穿越屏幕了，但是非常慢。\\\\r\n\\\\r\n\n-   用计数器模式来改变精灵的velocityX属性，来让汽车加速。 ( [显示在哪里](#triggercallout=code_triggered)\n    )"
      CSD U3 abstraction add coin: "# 添加硬币\\\\r\n\n\\\\r\n在下面几关中，会丰富你的程序，来实现一个简单的游戏。在游戏里，玩家要收集点数来增加分数。这是一个好机会来看看不同的移动如何影响游戏的体验的，这回也能帮你练习编程技巧。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n这一关中，你只需要增加一个硬币精灵。确保给它一个类似于**硬币**的描述名称。你需要在程序最上面，循环的外面添加。\\\\r\n\\\\r\n\\*\n用`createSprite()`（创建精灵）模块来创建一个新的精灵。确保给了它一个类似于**硬币**的描述。\\\\r\n\n-   用精灵的`sprite.x`和`sprite.y`属性来给它一个随机的0到400之间的X和Y位置。\\\\r\n-   在动画标签页中，已经有了硬币动画。用`sprite.setAnimation()`模块来给精灵添加这个动画。\\\\r\n    \\\\r\n    在继续前，先测试你的代码。当运行程序时，你会看到一个硬币精灵随机的出现在屏幕的某个位置。"
      CSD U3 abstraction add coin_2018: "# 添加硬币\\\\r\n\n\\\\r\n在下面几关中，会丰富你的程序，来实现一个简单的游戏。在游戏里，玩家要收集点数来增加分数。这是一个好机会来看看不同的移动如何影响游戏的体验的，这回也能帮你练习编程技巧。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n这一关中，你只需要增加一个硬币精灵。确保给它一个类似于**硬币**的描述名称。你需要在程序最上面，循环的外面添加。\\\\r\n\\\\r\n\\*\n用`createSprite()`（创建精灵）模块来创建一个新的精灵。确保给了它一个类似于**硬币**的描述。\\\\r\n\n-   用精灵的`sprite.x`和`sprite.y`属性来给它一个随机的0到400之间的X和Y位置。\\\\r\n-   在动画标签页中，已经有了硬币动画。用`sprite.setAnimation()`模块来给精灵添加这个动画。\\\\r\n    \\\\r\n    在继续前，先测试你的代码。当运行程序时，你会看到一个硬币精灵随机的出现在屏幕的某个位置。"
      CSD U3 abstraction add coin_2019: "# 添加硬币\\\\r\n\n\\\\r\n在下面几关中，会丰富你的程序，来实现一个简单的游戏。在游戏里，玩家要收集点数来增加分数。这是一个好机会来看看不同的移动如何影响游戏的体验的，这回也能帮你练习编程技巧。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n这一关中，你只需要增加一个硬币精灵。确保给它一个类似于**硬币**的描述名称。你需要在程序最上面，循环的外面添加。\\\\r\n\\\\r\n\\*\n用`createSprite()`（创建精灵）模块来创建一个新的精灵。确保给了它一个类似于**硬币**的描述。\\\\r\n\n-   用精灵的`sprite.x`和`sprite.y`属性来给它一个随机的0到400之间的X和Y位置。\\\\r\n-   在动画标签页中，已经有了硬币动画。用`sprite.setAnimation()`模块来给精灵添加这个动画。\\\\r\n    \\\\r\n    在继续前，先测试你的代码。当运行程序时，你会看到一个硬币精灵随机的出现在屏幕的某个位置。"
      CSD U3 abstraction decelerateX: |-
        # 放慢速度\\r

        \\r
        现在，你已经练习过了如何加速，你能用计数器模式来给精灵减速吗？\\r
        \\r

        # 这样做\\r

        \\r
        汽车要开到水里了！你需要用计数器模式来给它减速。\\r
        \\r

        -   当汽车穿过屏幕时，用`sprite.velocityX`模块和计数器模式来给汽车每次减速0.25。  \\r
        -   \*
            和伙伴讨论一下：当汽车最终停下来时，会发生什么？\\r
            \\r
            _挑战：添加代码让汽车只在velocityX大于零时才给它减速。_
      CSD U3 abstraction decelerateX_2018: |-
        # 放慢速度\\r

        \\r
        现在，你已经练习过了如何加速，你能用计数器模式来给精灵减速吗？\\r
        \\r

        # 这样做\\r

        \\r
        汽车要开到水里了！你需要用计数器模式来给它减速。\\r
        \\r

        -   当汽车穿过屏幕时，用`sprite.velocityX`模块和计数器模式来给汽车每次减速0.25。  \\r
        -   \*
            和伙伴讨论一下：当汽车最终停下来时，会发生什么？\\r
            \\r
            _挑战：添加代码让汽车只在velocityX大于零时才给它减速。_
      CSD U3 abstraction decelerateX_2019: |-
        # 放慢速度\\r

        \\r
        现在，你已经练习过了如何加速，你能用计数器模式来给精灵减速吗？\\r
        \\r

        # 这样做\\r

        \\r
        汽车要开到水里了！你需要用计数器模式来给它减速。\\r
        \\r

        -   当汽车穿过屏幕时，用`sprite.velocityX`模块和计数器模式来给汽车每次减速0.25。  \\r
        -   \*
            和伙伴讨论一下：当汽车最终停下来时，会发生什么？\\r
            \\r
            _挑战：添加代码让汽车只在velocityX大于零时才给它减速。_
      CSD U3 abstraction jump-2018: |-
        # 跳跃\\r

        \\r
        现在你有了所有让精灵跳跃的模块了！如果精灵在地面上，并且用户点击了"上"键，精灵就应该跳起来，然后当它到达顶上之后，再让它掉下来。\\r
        \\r

        # 做这些\\r

        \\r
        \*
        用`if`（如果）语句来检查精灵是否在地面上，并在`if`语句里检查是否用户按下了"上"方向键。( [显示在哪里](#triggercallout=code_triggered1) )\\r
        \\t\*
        当用户点击了方向键，让青蛙跳起来。\\r
        \\t\* 否则让青蛙停止移动。\\r

        -   增加代码做以下事情( [Show
            me where](#triggercallout=code_triggered2) )\\r
            -   检查青蛙精灵是否到达了它的最高点。\\r
            -   如果是，让精灵下来。
      CSD U3 abstraction jump_2018: |-
        # 跳跃\\r

        \\r
        现在你有了所有让精灵跳跃的模块了！如果精灵在地面上，并且用户点击了"上"键，精灵就应该跳起来，然后当它到达顶上之后，再让它掉下来。\\r
        \\r

        # 做这些\\r

        \\r
        \*
        用`if`（如果）语句来检查精灵是否在地面上，并在`if`语句里检查是否用户按下了"上"方向键。( [显示在哪里](#triggercallout=code_triggered1) )\\r
        \\t\*
        当用户点击了方向键，让青蛙跳起来。\\r
        \\t\* 否则让青蛙停止移动。\\r

        -   增加代码做以下事情( [Show
            me where](#triggercallout=code_triggered2) )\\r
            -   检查青蛙精灵是否到达了它的最高点。\\r
            -   如果是，让精灵下来。
      CSD U3 abstraction jump_2018_2019: |-
        # 跳跃\\r

        \\r
        现在你有了所有让精灵跳跃的模块了！如果精灵在地面上，并且用户点击了"上"键，精灵就应该跳起来，然后当它到达顶上之后，再让它掉下来。\\r
        \\r

        # 做这些\\r

        \\r
        \*
        用`if`（如果）语句来检查精灵是否在地面上，并在`if`语句里检查是否用户按下了"上"方向键。( [显示在哪里](#triggercallout=code_triggered1) )\\r
        \\t\*
        当用户点击了方向键，让青蛙跳起来。\\r
        \\t\* 否则让青蛙停止移动。\\r

        -   增加代码做以下事情( [Show
            me where](#triggercallout=code_triggered2) )\\r
            -   检查青蛙精灵是否到达了它的最高点。\\r
            -   如果是，让精灵下来。
      CSD U3 abstraction left right counter 2: "# 向左浮动\\\\r\n\n\\\\r\n在上衣管理，你了解了如何让精灵向右浮动的细节。这次，你需要自己让精灵往左浮动。你应该能自如的一起应用速度和计数器模式了。如果有困难，和同伴讨论或查看前面的关卡。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n\n-   在循环里增加代码，来让\"左\"方向键按下时，让精灵向左移动。\\\\r\n-   确保一起应用了速度和计数器模式。\\\\r\n    \\\\r\n    一旦代码起作用了，就和伙伴分享一下你写的代码。你的精灵好控制吗？你增加或减少的计数器模式的值的大小，会如何影响游戏的体验？让玩家像这样移动的什么样的游戏会很有趣？"
      CSD U3 abstraction left right counter 2_2018: "# 向左浮动\\\\r\n\n\\\\r\n在上衣管理，你了解了如何让精灵向右浮动的细节。这次，你需要自己让精灵往左浮动。你应该能自如的一起应用速度和计数器模式了。如果有困难，和同伴讨论或查看前面的关卡。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n\n-   在循环里增加代码，来让\"左\"方向键按下时，让精灵向左移动。\\\\r\n-   确保一起应用了速度和计数器模式。\\\\r\n    \\\\r\n    一旦代码起作用了，就和伙伴分享一下你写的代码。你的精灵好控制吗？你增加或减少的计数器模式的值的大小，会如何影响游戏的体验？让玩家像这样移动的什么样的游戏会很有趣？"
      CSD U3 abstraction left right counter 2_2019: "# 向左浮动\\\\r\n\n\\\\r\n在上衣管理，你了解了如何让精灵向右浮动的细节。这次，你需要自己让精灵往左浮动。你应该能自如的一起应用速度和计数器模式了。如果有困难，和同伴讨论或查看前面的关卡。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n\n-   在循环里增加代码，来让\"左\"方向键按下时，让精灵向左移动。\\\\r\n-   确保一起应用了速度和计数器模式。\\\\r\n    \\\\r\n    一旦代码起作用了，就和伙伴分享一下你写的代码。你的精灵好控制吗？你增加或减少的计数器模式的值的大小，会如何影响游戏的体验？让玩家像这样移动的什么样的游戏会很有趣？"
      CSD U3 abstraction left right counter: "# 向右浮动\\\\r\n\n\\\\r\n现在，你能用精灵的Y轴速度上使用个计数器模式来模拟重力和跳跃。如果你在x轴速度上使用计数器模式，也能让精灵从一边浮动到另一边。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n在这一关中，你需要在右方向键按下时，让精灵向右浮动。\\\\r\n\\\\r\n\n-   在已经创建的\"上\"方向键下的循环里增加一个`如果`语句。\\\\r\n-   用`keyDown`模块来让`如果`语句在\"右\"方向键按下时进行响应。\\\\r\n-   在`如果`模块中对`sprite.velocityX`使用计数器模式来为精灵的X轴速度增加0.1。\\\\r\n    \\\\r\n    运行你的代码看看它是否正常工作。当你按下右方向键，精灵应该开始向右浮动。按下\"上\"时还能跳跃。在下一关中，你要实现向左方向键的功能。"
      CSD U3 abstraction left right counter_2018: "# 向右浮动\\\\r\n\n\\\\r\n现在，你能用精灵的Y轴速度上使用个计数器模式来模拟重力和跳跃。如果你在x轴速度上使用计数器模式，也能让精灵从一边浮动到另一边。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n在这一关中，你需要在右方向键按下时，让精灵向右浮动。\\\\r\n\\\\r\n\n-   在已经创建的\"上\"方向键下的循环里增加一个`如果`语句。\\\\r\n-   用`keyDown`模块来让`如果`语句在\"右\"方向键按下时进行响应。\\\\r\n-   在`如果`模块中对`sprite.velocityX`使用计数器模式来为精灵的X轴速度增加0.1。\\\\r\n    \\\\r\n    运行你的代码看看它是否正常工作。当你按下右方向键，精灵应该开始向右浮动。按下\"上\"时还能跳跃。在下一关中，你要实现向左方向键的功能。"
      CSD U3 abstraction left right counter_2019: "# 向右浮动\\\\r\n\n\\\\r\n现在，你能用精灵的Y轴速度上使用个计数器模式来模拟重力和跳跃。如果你在x轴速度上使用计数器模式，也能让精灵从一边浮动到另一边。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n在这一关中，你需要在右方向键按下时，让精灵向右浮动。\\\\r\n\\\\r\n\n-   在已经创建的\"上\"方向键下的循环里增加一个`如果`语句。\\\\r\n-   用`keyDown`模块来让`如果`语句在\"右\"方向键按下时进行响应。\\\\r\n-   在`如果`模块中对`sprite.velocityX`使用计数器模式来为精灵的X轴速度增加0.1。\\\\r\n    \\\\r\n    运行你的代码看看它是否正常工作。当你按下右方向键，精灵应该开始向右浮动。按下\"上\"时还能跳跃。在下一关中，你要实现向左方向键的功能。"
      CSD U3 abstraction looping: |-
        # 循环\\r

        \\r
        如果青蛙能够多次跳跃，程序会更有意思。你可以在蘑菇"循环"中，检查是否它移动到了左边缘，如果是的话，就将它移动回右边缘。\\r
        \\r

        # 这样做\\r

        -   找到检查蘑菇是否通过了左边缘的`如果`语句。 ( [看看在哪里](#triggercallout=code_triggered1) )\\r
        -   如果是的话，用`sprite.x` 模块来将蘑菇的位置设置为右边缘。
      CSD U3 abstraction looping_2018: |-
        # 循环\\r

        \\r
        如果青蛙能够多次跳跃，程序会更有意思。你可以在蘑菇"循环"中，检查是否它移动到了左边缘，如果是的话，就将它移动回右边缘。\\r
        \\r

        # 这样做\\r

        -   找到检查蘑菇是否通过了左边缘的`如果`语句。 ( [看看在哪里](#triggercallout=code_triggered1) )\\r
        -   如果是的话，用`sprite.x` 模块来将蘑菇的位置设置为右边缘。
      CSD U3 abstraction looping_2019: |-
        # 循环\\r

        \\r
        如果青蛙能够多次跳跃，程序会更有意思。你可以在蘑菇"循环"中，检查是否它移动到了左边缘，如果是的话，就将它移动回右边缘。\\r
        \\r

        # 这样做\\r

        -   找到检查蘑菇是否通过了左边缘的`如果`语句。 ( [看看在哪里](#triggercallout=code_triggered1) )\\r
        -   如果是的话，用`sprite.x` 模块来将蘑菇的位置设置为右边缘。
      CSD U3 abstraction make it your own: |-
        # 自己试试\\r

        \\r
        现在你的游戏已经有了基本功能了，是时候自己试试了。你想让游戏如何变化？角色需要在每次收集到硬币时得分吗？你能增加一个像上一课中的记分板吗？你想要制作另一个硬币吗？是否可以增加"坏硬币"来扣分？\\r
        \\r

        # 这样做\\r

        \\r
        至少对游戏进行一项改进。准备好分享你的改进，并和同学一起提高它。
      CSD U3 abstraction make it your own_2018: |-
        # 自己试试\\r

        \\r
        现在你的游戏已经有了基本功能了，是时候自己试试了。你想让游戏如何变化？角色需要在每次收集到硬币时得分吗？你能增加一个像上一课中的记分板吗？你想要制作另一个硬币吗？是否可以增加"坏硬币"来扣分？\\r
        \\r

        # 这样做\\r

        \\r
        至少对游戏进行一项改进。准备好分享你的改进，并和同学一起提高它。
      CSD U3 abstraction make it your own_2019: |-
        # 自己试试\\r

        \\r
        现在你的游戏已经有了基本功能了，是时候自己试试了。你想让游戏如何变化？角色需要在每次收集到硬币时得分吗？你能增加一个像上一课中的记分板吗？你想要制作另一个硬币吗？是否可以增加"坏硬币"来扣分？\\r
        \\r

        # 这样做\\r

        \\r
        至少对游戏进行一项改进。准备好分享你的改进，并和同学一起提高它。
      CSD U3 abstraction rotation control: |-
        # 控制速度\\r

        \\r
        你在循环外面用过了`rotatationSpeed`来让精灵能在游戏开始时旋转。你还能在循环**里面**用`rotationSpeed`来改变精灵的速度。例如，当用户按下空格键时，精灵会开始旋转，直到最后停止。\\r
        \\r

        # 这样做\\r

        \\r
        \*
        看看循环里用来检查是否空格键被按下的`如果`语句。 ( [显示在哪里](#triggercallout=code_triggered1) )\\r
        \*
        使用`rotationSpeed`模块来让彩色轮子在按下空格键时旋转。
      CSD U3 abstraction rotation control_2018: |-
        # 控制速度\\r

        \\r
        你在循环外面用过了`rotatationSpeed`来让精灵能在游戏开始时旋转。你还能在循环**里面**用`rotationSpeed`来改变精灵的速度。例如，当用户按下空格键时，精灵会开始旋转，直到最后停止。\\r
        \\r

        # 这样做\\r

        \\r
        \*
        看看循环里用来检查是否空格键被按下的`如果`语句。 ( [显示在哪里](#triggercallout=code_triggered1) )\\r
        \*
        使用`rotationSpeed`模块来让彩色轮子在按下空格键时旋转。
      CSD U3 abstraction rotation control_2019: |-
        # 控制速度\\r

        \\r
        你在循环外面用过了`rotatationSpeed`来让精灵能在游戏开始时旋转。你还能在循环**里面**用`rotationSpeed`来改变精灵的速度。例如，当用户按下空格键时，精灵会开始旋转，直到最后停止。\\r
        \\r

        # 这样做\\r

        \\r
        \*
        看看循环里用来检查是否空格键被按下的`如果`语句。 ( [显示在哪里](#triggercallout=code_triggered1) )\\r
        \*
        使用`rotationSpeed`模块来让彩色轮子在按下空格键时旋转。
      CSD U3 abstraction velocityX control: |-
        # 多个控制\\r

        \\r
        正如你在上一关看到的，你可以用多个`如果`语句来控制精灵的速度。在这个程序里，鱼有三种不同的运动，每种都需要单独的`如果`语句来控制。\\r
        \\r

        # 这样做\\r

        -   看看循环里的三个`如果`语句。\\r
            \\r
        -   在每个`如果`语句里用一个`sprite.velocityX`模块来实现下面三个运动：\\r
        -   如果用户按下右方向键，让鱼向右移动。\\r
        -   如果鱼到达了屏幕的最右边，让它向左移动。\\r
        -   如果 鱼到达了屏幕左边，让鱼停下来。
      CSD U3 abstraction velocityX control_2018: |-
        # 多个控制\\r

        \\r
        正如你在上一关看到的，你可以用多个`如果`语句来控制精灵的速度。在这个程序里，鱼有三种不同的运动，每种都需要单独的`如果`语句来控制。\\r
        \\r

        # 这样做\\r

        -   看看循环里的三个`如果`语句。\\r
            \\r
        -   在每个`如果`语句里用一个`sprite.velocityX`模块来实现下面三个运动：\\r
        -   如果用户按下右方向键，让鱼向右移动。\\r
        -   如果鱼到达了屏幕的最右边，让它向左移动。\\r
        -   如果 鱼到达了屏幕左边，让鱼停下来。
      CSD U3 abstraction velocityX control_2019: |-
        # 多个控制\\r

        \\r
        正如你在上一关看到的，你可以用多个`如果`语句来控制精灵的速度。在这个程序里，鱼有三种不同的运动，每种都需要单独的`如果`语句来控制。\\r
        \\r

        # 这样做\\r

        -   看看循环里的三个`如果`语句。\\r
            \\r
        -   在每个`如果`语句里用一个`sprite.velocityX`模块来实现下面三个运动：\\r
        -   如果用户按下右方向键，让鱼向右移动。\\r
        -   如果鱼到达了屏幕的最右边，让它向左移动。\\r
        -   如果 鱼到达了屏幕左边，让鱼停下来。
      CSD U3 abstraction velocityX if-statements predict: "# \n\n用位置来改变速度\\\\r\n\\\\r\n将速度模块用到条件（`if`模块）中的一个好处是，即使在条件语句停止后，还能让精灵保持移动。例如，你只需要按一下键就能让飞行机器人飞起来，并且一直飞下去。下面的代码用“如果”语句来让鱼精灵向不同的方向移动。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n\n-   看看`if`（如果）语句，检查一下精灵的位置，并设置它的速度。\\\\r\n-   和你的伙伴讨论一下你认为代码会做什么，并将答案写下来。\\\\r\n-   一旦你提交了答案，就运行一下代码。"
      CSD U3 abstraction velocityX if-statements predict_2018: "# \n\n用位置来改变速度\\\\r\n\\\\r\n将速度模块用到条件（`if`模块）中的一个好处是，即使在条件语句停止后，还能让精灵保持移动。例如，你只需要按一下键就能让飞行机器人飞起来，并且一直飞下去。下面的代码用“如果”语句来让鱼精灵向不同的方向移动。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n\n-   看看`if`（如果）语句，检查一下精灵的位置，并设置它的速度。\\\\r\n-   和你的伙伴讨论一下你认为代码会做什么，并将答案写下来。\\\\r\n-   一旦你提交了答案，就运行一下代码。"
      CSD U3 abstraction velocityX if-statements predict_2019: "# \n\n用位置来改变速度\\\\r\n\\\\r\n将速度模块用到条件（`if`模块）中的一个好处是，即使在条件语句停止后，还能让精灵保持移动。例如，你只需要按一下键就能让飞行机器人飞起来，并且一直飞下去。下面的代码用“如果”语句来让鱼精灵向不同的方向移动。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n\n-   看看`if`（如果）语句，检查一下精灵的位置，并设置它的速度。\\\\r\n-   和你的伙伴讨论一下你认为代码会做什么，并将答案写下来。\\\\r\n-   一旦你提交了答案，就运行一下代码。"
      CSD U3 abstraction velocityY control: |-
        # 控制

        速度\\r
        \\r
        你放在循环之前的代码决定了游戏的初始状态。放在循环之中的代码则用于处理游戏的运行。在这个游戏中，直升机从屏幕的底部启动，当有人按下空格键时，它就会飞起来。\\r
        \\r

        # 这样做\\r

        \\r

        -   将`如果` 语句放在循环里来检测是否有人按了空格键。\\r
        -   用 `velocityY`模块让直升机会在有人按空格键时飞起来。无论空格键有没有被按下，直升机应当一直向前移动。
      CSD U3 abstraction velocityY control_2018: |-
        # 控制

        速度\\r
        \\r
        你放在循环之前的代码决定了游戏的初始状态。放在循环之中的代码则用于处理游戏的运行。在这个游戏中，直升机从屏幕的底部启动，当有人按下空格键时，它就会飞起来。\\r
        \\r

        # 这样做\\r

        \\r

        -   将`如果` 语句放在循环里来检测是否有人按了空格键。\\r
        -   用 `velocityY`模块让直升机会在有人按空格键时飞起来。无论空格键有没有被按下，直升机应当一直向前移动。
      CSD U3 abstraction velocityY control_2019: |-
        # 控制

        速度\\r
        \\r
        你放在循环之前的代码决定了游戏的初始状态。放在循环之中的代码则用于处理游戏的运行。在这个游戏中，直升机从屏幕的底部启动，当有人按下空格键时，它就会飞起来。\\r
        \\r

        # 这样做\\r

        \\r

        -   将`如果` 语句放在循环里来检测是否有人按了空格键。\\r
        -   用 `velocityY`模块让直升机会在有人按空格键时飞起来。无论空格键有没有被按下，直升机应当一直向前移动。
      CSD U3 challenge face: |-
        <img src="https://images.code.org/aa5aedbcfec082c2886d88b565e5fc09-image-1495732712591.png" style="float: right; max-width: 200px; border: 1px solid grey">

        # 挑战：脸

        _在开始任何挑战前，先问问你的老师。_

        写一个程序，用 `rect`（矩形），`ellipse`（椭圆），和`fill`（填充）来创建像右边一样的脸。使用的颜色有："lightblue"（淡蓝色），"red"（红色）和"lightgreen"（淡绿色）
        完成后，可以添加自己的想法到图像里。
      CSD U3 challenge face_2018: |-
        <img src="https://images.code.org/aa5aedbcfec082c2886d88b565e5fc09-image-1495732712591.png" style="float: right; max-width: 200px; border: 1px solid grey">

        # 挑战：脸

        _在开始任何挑战前，先问问你的老师。_

        写一个程序，用 `rect`（矩形），`ellipse`（椭圆），和`fill`（填充）来创建像右边一样的脸。使用的颜色有："lightblue"（淡蓝色），"red"（红色）和"lightgreen"（淡绿色）
        完成后，可以添加自己的想法到图像里。
      CSD U3 challenge face_2019: |-
        <img src="https://images.code.org/aa5aedbcfec082c2886d88b565e5fc09-image-1495732712591.png" style="float: right; max-width: 200px; border: 1px solid grey">

        # 挑战：脸

        _在开始任何挑战前，先问问你的老师。_

        写一个程序，用 `rect`（矩形），`ellipse`（椭圆），和`fill`（填充）来创建像右边一样的脸。使用的颜色有："lightblue"（淡蓝色），"red"（红色）和"lightgreen"（淡绿色）
        完成后，可以添加自己的想法到图像里。
      CSD U3 challenge new shape: "<img src=\"https://images.code.org/cc725698ade5282931002db3bf762cbc-image-1495733456927.png\"\nstyle=\"float: right; max-width: 200px; border: 1px solid grey\">\\\\r\n\\\\r\n\n# \n\n挑战：形状组成的形状\\\\r\n\\\\r\n_在开始任何挑战前，先问问你的老师。_\\\\r\n\\\\r\n你能只用`rect` （矩形）和`ellipse`（椭圆）命令创建一个新形状吗？例如，用圆圈组成的三角形？"
      CSD U3 challenge new shape_2018: "<img src=\"https://images.code.org/cc725698ade5282931002db3bf762cbc-image-1495733456927.png\"\nstyle=\"float: right; max-width: 200px; border: 1px solid grey\">\\\\r\n\\\\r\n\n# \n\n挑战：形状组成的形状\\\\r\n\\\\r\n_在开始任何挑战前，先问问你的老师。_\\\\r\n\\\\r\n你能只用`rect` （矩形）和`ellipse`（椭圆）命令创建一个新形状吗？例如，用圆圈组成的三角形？"
      CSD U3 challenge new shape_2019: "<img src=\"https://images.code.org/cc725698ade5282931002db3bf762cbc-image-1495733456927.png\"\nstyle=\"float: right; max-width: 200px; border: 1px solid grey\">\\\\r\n\\\\r\n\n# \n\n挑战：形状组成的形状\\\\r\n\\\\r\n_在开始任何挑战前，先问问你的老师。_\\\\r\n\\\\r\n你能只用`rect` （矩形）和`ellipse`（椭圆）命令创建一个新形状吗？例如，用圆圈组成的三角形？"
      CSD U3 collisions debug isTouching: |-
        # 调试碰撞\\r

        \\r
        气球在大头钉碰到前，就会爆炸。当精灵的动作和你想的不一样时，可以用`调试`模块来获得更多关于精灵行为为什么不对的原因。你能找到下面代码哪里错了吗？\\r
        \\r

        # 这样做\\r

        -   运行代码，并用方向键来移动大头钉让气球爆炸。\\r
        -   在下面的代码中将`balloon.debug = false`改成`balloon.debug = true`.\\r
        -   增加一个`debug`模块到代码中，并设置大头钉的debug（调试）属性为`true`。
            \\r
        -   \*
            再运行代码，和你的伙伴讨论一下，为什么气球会爆炸得太早。\\r
            \\r
            _挑战：你能用动画标签页来调整气球图片的大小，让它在正确的时间爆炸吗？_\\r
            \\r
            [//]\: # (<https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png>)\\r
            \\r
            [//]\:
            # (<https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png>)\\r
            \\r
            [//]\:
            # (<https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png>)\\r
            \\r
            [//]\:
            # (<https://images.code.org/2892e65635d7a43d0664bb8ff58eb698-image-1471200175665.png>)\\r
            \\r
            [//]\:
            # (<https://images.code.org/9ffeb3f543033353d073794071316860-image-1471200179449.png>)
      CSD U3 collisions debug isTouching_2018: |-
        # 调试碰撞\\r

        \\r
        气球在大头钉碰到前，就会爆炸。当精灵的动作和你想的不一样时，可以用`调试`模块来获得更多关于精灵行为为什么不对的原因。你能找到下面代码哪里错了吗？\\r
        \\r

        # 这样做\\r

        -   运行代码，并用方向键来移动大头钉让气球爆炸。\\r
        -   在下面的代码中将`balloon.debug = false`改成`balloon.debug = true`.\\r
        -   增加一个`debug`模块到代码中，并设置大头钉的debug（调试）属性为`true`。
            \\r
        -   \*
            再运行代码，和你的伙伴讨论一下，为什么气球会爆炸得太早。\\r
            \\r
            _挑战：你能用动画标签页来调整气球图片的大小，让它在正确的时间爆炸吗？_\\r
            \\r
            [//]\: # (<https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png>)\\r
            \\r
            [//]\:
            # (<https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png>)\\r
            \\r
            [//]\:
            # (<https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png>)\\r
            \\r
            [//]\:
            # (<https://images.code.org/2892e65635d7a43d0664bb8ff58eb698-image-1471200175665.png>)\\r
            \\r
            [//]\:
            # (<https://images.code.org/9ffeb3f543033353d073794071316860-image-1471200179449.png>)
      CSD U3 collisions debug isTouching_2019: |-
        # 调试碰撞\\r

        \\r
        气球在大头钉碰到前，就会爆炸。当精灵的动作和你想的不一样时，可以用`调试`模块来获得更多关于精灵行为为什么不对的原因。你能找到下面代码哪里错了吗？\\r
        \\r

        # 这样做\\r

        -   运行代码，并用方向键来移动大头钉让气球爆炸。\\r
        -   在下面的代码中将`balloon.debug = false`改成`balloon.debug = true`.\\r
        -   增加一个`debug`模块到代码中，并设置大头钉的debug（调试）属性为`true`。
            \\r
        -   \*
            再运行代码，和你的伙伴讨论一下，为什么气球会爆炸得太早。\\r
            \\r
            _挑战：你能用动画标签页来调整气球图片的大小，让它在正确的时间爆炸吗？_\\r
            \\r
            [//]\: # (<https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png>)\\r
            \\r
            [//]\:
            # (<https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png>)\\r
            \\r
            [//]\:
            # (<https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png>)\\r
            \\r
            [//]\:
            # (<https://images.code.org/2892e65635d7a43d0664bb8ff58eb698-image-1471200175665.png>)\\r
            \\r
            [//]\:
            # (<https://images.code.org/9ffeb3f543033353d073794071316860-image-1471200179449.png>)
      CSD U3 collisions debug: |-
        # 调试\\r

        \\r
        有时，精灵的行为会和预计的不一样。这里有一个特殊的`sprite.debug`（精灵.调试）能帮助你更好的理解精灵的交互行为。\\r
        \\r

        # 这样做\\r

        \\r
        这里有两个硬币，虽然你期望他们会以某种形式弹跳。有时却会发生奇怪的事情！\\r
        \\r
        \*
        运行代码，并看看硬币交互的方式。\\r

        -   使用`sprite.debug`模块，给两个精灵的调试都设置为'true'然后再运行代码。\\r
        -   \*
            将金币的开始x位置改为51，并再运行代码。\\r
        -   \*
            和伙伴讨论：为什么你认为金币会奇怪的弹跳？
      CSD U3 collisions debug_2018: |-
        # 调试\\r

        \\r
        有时，精灵的行为会和预计的不一样。这里有一个特殊的`sprite.debug`（精灵.调试）能帮助你更好的理解精灵的交互行为。\\r
        \\r

        # 这样做\\r

        \\r
        这里有两个硬币，虽然你期望他们会以某种形式弹跳。有时却会发生奇怪的事情！\\r
        \\r
        \*
        运行代码，并看看硬币交互的方式。\\r

        -   使用`sprite.debug`模块，给两个精灵的调试都设置为'true'然后再运行代码。\\r
        -   \*
            将金币的开始x位置改为51，并再运行代码。\\r
        -   \*
            和伙伴讨论：为什么你认为金币会奇怪的弹跳？
      CSD U3 collisions debug_2019: |-
        # 调试\\r

        \\r
        有时，精灵的行为会和预计的不一样。这里有一个特殊的`sprite.debug`（精灵.调试）能帮助你更好的理解精灵的交互行为。\\r
        \\r

        # 这样做\\r

        \\r
        这里有两个硬币，虽然你期望他们会以某种形式弹跳。有时却会发生奇怪的事情！\\r
        \\r
        \*
        运行代码，并看看硬币交互的方式。\\r

        -   使用`sprite.debug`模块，给两个精灵的调试都设置为'true'然后再运行代码。\\r
        -   \*
            将金币的开始x位置改为51，并再运行代码。\\r
        -   \*
            和伙伴讨论：为什么你认为金币会奇怪的弹跳？
      CSD U3 collisions displace x: |-
        # 为精灵交互编程\\r

        \\r
        在上一关，你应该已经和同学讨论过你看见的精灵时如何互动的了。现在你需要自己编程实现了。如何让长颈鹿离开猴子？\\r
        \\r

        # 这样做\\r

        \\r
        长颈鹿已经穿过屏幕到达了猴子，但精灵的交互还没有编好。\\r
        \\r

        -   和你的同学用上一关计划好的办法，来为精灵编程和你交互。\\r
            \\r
            [//]\: # (<https://images.code.org/2e6b993747a39cd5076dce219037903d-image-1470319674401.png>)\\r
            \\r
            [//]\:
            # (<https://images.code.org/d44d7c1aa87ea7eeceea9e9b023408f9-image-1470319674396.png>)
      CSD U3 collisions displace x_2018: |-
        # 为精灵交互编程\\r

        \\r
        在上一关，你应该已经和同学讨论过你看见的精灵时如何互动的了。现在你需要自己编程实现了。如何让长颈鹿离开猴子？\\r
        \\r

        # 这样做\\r

        \\r
        长颈鹿已经穿过屏幕到达了猴子，但精灵的交互还没有编好。\\r
        \\r

        -   和你的同学用上一关计划好的办法，来为精灵编程和你交互。\\r
            \\r
            [//]\: # (<https://images.code.org/2e6b993747a39cd5076dce219037903d-image-1470319674401.png>)\\r
            \\r
            [//]\:
            # (<https://images.code.org/d44d7c1aa87ea7eeceea9e9b023408f9-image-1470319674396.png>)
      CSD U3 collisions displace x_2019: |-
        # 为精灵交互编程\\r

        \\r
        在上一关，你应该已经和同学讨论过你看见的精灵时如何互动的了。现在你需要自己编程实现了。如何让长颈鹿离开猴子？\\r
        \\r

        # 这样做\\r

        \\r
        长颈鹿已经穿过屏幕到达了猴子，但精灵的交互还没有编好。\\r
        \\r

        -   和你的同学用上一关计划好的办法，来为精灵编程和你交互。\\r
            \\r
            [//]\: # (<https://images.code.org/2e6b993747a39cd5076dce219037903d-image-1470319674401.png>)\\r
            \\r
            [//]\:
            # (<https://images.code.org/d44d7c1aa87ea7eeceea9e9b023408f9-image-1470319674396.png>)
      CSD U3 collisions egg: |-
        # 苹果酱\\r

        \\r
        当苹果碰到搅拌机，搅拌机会开始运转。\\r
        \\r

        # 这样做\\r

        \\r
        使用`isTouching`（是否碰到）模块来让苹果碰到搅拌机时，开始来回晃动。晃动的代码已经用随机模块写好了，因此你只需要检测是否两个精灵碰到了一起。\\r
        \\r
        _挑战：你能让苹果碰到搅拌机后消失吗？_\\r
        \\r
        [//]\:

        # (<https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png>)\\r

        \\r
        [//]\:

        # (<https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png>)\\r

        \\r
        [//]\:

        # (<https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png>)\\r

        \\r
        [//]\:

        # (<https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png>)\\r

        \\r
        [//]\:

        # (<https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png>)\\r

        \\r
        [//]\:

        # (<https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png>)
      CSD U3 collisions egg2: |-
        # 制造声音\\r

        \\r
        你也能用代码来播放一个搅拌的声音。\\r
        \\r

        # 这样做\\r

        \\r
        当苹果碰到搅拌器时，从"world"世界抽屉里，找到并使用`playSound`（播放声音）模块来播放"<https://docs.code.org/sounds/blender.mp3"声音。你需要将声音的地址粘贴到模块中，看起来就像这样：> \!\[](\<<https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57>
        PM.png>)\\r
        \\r
        [//]\: #  (<https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png>)\\r
        \\r
        [//]\:

        # (<https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png>)\\r

        \\r
        [//]\:

        # (<https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png>)\\r

        \\r
        [//]\:

        # (<https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png>)\\r

        \\r
        [//]\:

        # (<https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png>)\\r

        \\r
        [//]\:

        # (<https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png>)\\r

        \\r
        [//]\:

        # (<https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57>

        PM.png)
      CSD U3 collisions egg2_2018: |-
        # 制造声音\\r

        \\r
        你也能用代码来播放一个搅拌的声音。\\r
        \\r

        # 这样做\\r

        \\r
        当苹果碰到搅拌器时，从"world"世界抽屉里，找到并使用`playSound`（播放声音）模块来播放"<https://docs.code.org/sounds/blender.mp3"声音。你需要将声音的地址粘贴到模块中，看起来就像这样：> \!\[](\<<https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57>
        PM.png>)\\r
        \\r
        [//]\: #  (<https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png>)\\r
        \\r
        [//]\:

        # (<https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png>)\\r

        \\r
        [//]\:

        # (<https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png>)\\r

        \\r
        [//]\:

        # (<https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png>)\\r

        \\r
        [//]\:

        # (<https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png>)\\r

        \\r
        [//]\:

        # (<https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png>)\\r

        \\r
        [//]\:

        # (<https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57>

        PM.png)
      CSD U3 collisions egg2_2019: |-
        # 制造声音\\r

        \\r
        你也能用代码来播放一个搅拌的声音。\\r
        \\r

        # 这样做\\r

        \\r
        当苹果碰到搅拌器时，从"world"世界抽屉里，找到并使用`playSound`（播放声音）模块来播放"<https://docs.code.org/sounds/blender.mp3"声音。你需要将声音的地址粘贴到模块中，看起来就像这样：> \!\[](\<<https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57>
        PM.png>)\\r
        \\r
        [//]\: #  (<https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png>)\\r
        \\r
        [//]\:

        # (<https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png>)\\r

        \\r
        [//]\:

        # (<https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png>)\\r

        \\r
        [//]\:

        # (<https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png>)\\r

        \\r
        [//]\:

        # (<https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png>)\\r

        \\r
        [//]\:

        # (<https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png>)\\r

        \\r
        [//]\:

        # (<https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57>

        PM.png)
      CSD U3 collisions egg_2018: |-
        # 苹果酱\\r

        \\r
        当苹果碰到搅拌机，搅拌机会开始运转。\\r
        \\r

        # 这样做\\r

        \\r
        使用`isTouching`（是否碰到）模块来让苹果碰到搅拌机时，开始来回晃动。晃动的代码已经用随机模块写好了，因此你只需要检测是否两个精灵碰到了一起。\\r
        \\r
        _挑战：你能让苹果碰到搅拌机后消失吗？_\\r
        \\r
        [//]\:

        # (<https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png>)\\r

        \\r
        [//]\:

        # (<https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png>)\\r

        \\r
        [//]\:

        # (<https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png>)\\r

        \\r
        [//]\:

        # (<https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png>)\\r

        \\r
        [//]\:

        # (<https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png>)\\r

        \\r
        [//]\:

        # (<https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png>)
      CSD U3 collisions egg_2019: |-
        # 苹果酱\\r

        \\r
        当苹果碰到搅拌机，搅拌机会开始运转。\\r
        \\r

        # 这样做\\r

        \\r
        使用`isTouching`（是否碰到）模块来让苹果碰到搅拌机时，开始来回晃动。晃动的代码已经用随机模块写好了，因此你只需要检测是否两个精灵碰到了一起。\\r
        \\r
        _挑战：你能让苹果碰到搅拌机后消失吗？_\\r
        \\r
        [//]\:

        # (<https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png>)\\r

        \\r
        [//]\:

        # (<https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png>)\\r

        \\r
        [//]\:

        # (<https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png>)\\r

        \\r
        [//]\:

        # (<https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png>)\\r

        \\r
        [//]\:

        # (<https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png>)\\r

        \\r
        [//]\:

        # (<https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png>)
      CSD U3 collisions flyman add obstacles: |-
        # 飞行游戏 - 添加障碍\\r

        \\r
        这是你在上一关中建造的飞行游戏。在接下来的几关中，你需要用前几关学习的精灵交互的知识，来为游戏增加一个障碍。最后，你还能自由发挥，来增加一些创意。\\r
        \\r
        <img src="https://images.code.org/47f8c130ca668080d48520ef9aced093-image-1477069764142.08.58
        AM.png" style="float:right;width:200px">\\r
        \\r

        # 这样做\\r

        \\r
        为游戏增加一个障碍精灵。你可以从动画标签页中选择任何图片，在示例中使用了太阳。现在你只需要将精灵加入到游戏里，并制作动画。\\r
        \\r

        -   向游戏里增加一个叫做"obstacle"（障碍）的精灵。\\r
        -   在动画标签页里为你的障碍创造一个动画。在这个例子中，选择的是太阳。\\r
        -   \*
            使用`sprite.setAnimation()`（精灵.设置动画）模块来为你的精灵增加选择的图片。\\r
        -   \*
            运行代码，并确保精灵出现在你想要的位置。你可能需要设置它的X，Y值，并调整它的大小，让它和你想象的一致。
      CSD U3 collisions flyman add obstacles_2018: |-
        # 飞行游戏 - 添加障碍\\r

        \\r
        这是你在上一关中建造的飞行游戏。在接下来的几关中，你需要用前几关学习的精灵交互的知识，来为游戏增加一个障碍。最后，你还能自由发挥，来增加一些创意。\\r
        \\r
        <img src="https://images.code.org/47f8c130ca668080d48520ef9aced093-image-1477069764142.08.58
        AM.png" style="float:right;width:200px">\\r
        \\r

        # 这样做\\r

        \\r
        为游戏增加一个障碍精灵。你可以从动画标签页中选择任何图片，在示例中使用了太阳。现在你只需要将精灵加入到游戏里，并制作动画。\\r
        \\r

        -   向游戏里增加一个叫做"obstacle"（障碍）的精灵。\\r
        -   在动画标签页里为你的障碍创造一个动画。在这个例子中，选择的是太阳。\\r
        -   \*
            使用`sprite.setAnimation()`（精灵.设置动画）模块来为你的精灵增加选择的图片。\\r
        -   \*
            运行代码，并确保精灵出现在你想要的位置。你可能需要设置它的X，Y值，并调整它的大小，让它和你想象的一致。
      CSD U3 collisions flyman add obstacles_2019: |-
        # 飞行游戏 - 添加障碍\\r

        \\r
        这是你在上一关中建造的飞行游戏。在接下来的几关中，你需要用前几关学习的精灵交互的知识，来为游戏增加一个障碍。最后，你还能自由发挥，来增加一些创意。\\r
        \\r
        <img src="https://images.code.org/47f8c130ca668080d48520ef9aced093-image-1477069764142.08.58
        AM.png" style="float:right;width:200px">\\r
        \\r

        # 这样做\\r

        \\r
        为游戏增加一个障碍精灵。你可以从动画标签页中选择任何图片，在示例中使用了太阳。现在你只需要将精灵加入到游戏里，并制作动画。\\r
        \\r

        -   向游戏里增加一个叫做"obstacle"（障碍）的精灵。\\r
        -   在动画标签页里为你的障碍创造一个动画。在这个例子中，选择的是太阳。\\r
        -   \*
            使用`sprite.setAnimation()`（精灵.设置动画）模块来为你的精灵增加选择的图片。\\r
        -   \*
            运行代码，并确保精灵出现在你想要的位置。你可能需要设置它的X，Y值，并调整它的大小，让它和你想象的一致。
      CSD U3 collisions flyman bounceOff: "# 飞行游戏 - 与障碍交互\\\\r\n\n\\\\r\n你不会希望玩家能够穿过障碍，因此你需要增加一个精灵交互。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n\n-   为你的游戏增加代码来防止玩家穿过障碍。\\\\r\n-   如果你用一个弹跳的交互，要决定你是否需要重置角色的弹跳力。\\\\r\n-   和旁边的伙伴讨论一下：你想用哪个精灵的交互方式？你是否觉得有其它可以用的精灵交互方式？"
      CSD U3 collisions flyman bounceOff_2018: "# 飞行游戏 - 与障碍交互\\\\r\n\n\\\\r\n你不会希望玩家能够穿过障碍，因此你需要增加一个精灵交互。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n\n-   为你的游戏增加代码来防止玩家穿过障碍。\\\\r\n-   如果你用一个弹跳的交互，要决定你是否需要重置角色的弹跳力。\\\\r\n-   和旁边的伙伴讨论一下：你想用哪个精灵的交互方式？你是否觉得有其它可以用的精灵交互方式？"
      CSD U3 collisions flyman bounceOff_2019: "# 飞行游戏 - 与障碍交互\\\\r\n\n\\\\r\n你不会希望玩家能够穿过障碍，因此你需要增加一个精灵交互。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n\n-   为你的游戏增加代码来防止玩家穿过障碍。\\\\r\n-   如果你用一个弹跳的交互，要决定你是否需要重置角色的弹跳力。\\\\r\n-   和旁边的伙伴讨论一下：你想用哪个精灵的交互方式？你是否觉得有其它可以用的精灵交互方式？"
      CSD U3 collisions flyman change colliders: |-
        # 飞行游戏 - 改变碰撞器\\r

        \\r
        现在，你的碰撞器都是矩形的。将它们改为圆形，这样能得到更有趣并更真实的弹跳和碰撞。\\r
        \\r

        # 这样做\\r

        \\r

        -   用`sprite.setCollider()`（精灵.设置碰撞器）模块来将精灵的碰撞器改为圆形。\\r
        -   设置精灵的调试属性为`true`来检查游戏是否是按照想象的方式运行。\\r
        -   \*
            万一玩游戏来看看它是否和预想的一样。
      CSD U3 collisions flyman change colliders_2018: |-
        # 飞行游戏 - 改变碰撞器\\r

        \\r
        现在，你的碰撞器都是矩形的。将它们改为圆形，这样能得到更有趣并更真实的弹跳和碰撞。\\r
        \\r

        # 这样做\\r

        \\r

        -   用`sprite.setCollider()`（精灵.设置碰撞器）模块来将精灵的碰撞器改为圆形。\\r
        -   设置精灵的调试属性为`true`来检查游戏是否是按照想象的方式运行。\\r
        -   \*
            万一玩游戏来看看它是否和预想的一样。
      CSD U3 collisions flyman change colliders_2019: |-
        # 飞行游戏 - 改变碰撞器\\r

        \\r
        现在，你的碰撞器都是矩形的。将它们改为圆形，这样能得到更有趣并更真实的弹跳和碰撞。\\r
        \\r

        # 这样做\\r

        \\r

        -   用`sprite.setCollider()`（精灵.设置碰撞器）模块来将精灵的碰撞器改为圆形。\\r
        -   设置精灵的调试属性为`true`来检查游戏是否是按照想象的方式运行。\\r
        -   \*
            万一玩游戏来看看它是否和预想的一样。
      CSD U3 collisions flyman displace coin: |-
        # 飞行游戏 - 障碍后的硬币\\r

        \\r
        现在你的硬币移动到了随机的位置。这意味着它有可能藏在障碍的后面，这样角色就不能得到它了。用精灵交互可以修复这个问题。\\r
        \\r

        # 这样做\\r

        \\r

        -   增加代码来防止硬币被挪到障碍的后面。别害怕来多次尝试，看看它是如何工作的。\\r
        -   和旁边的同学讨论一下：你决定使用哪个精灵的交互？是否还有别的精灵交互和你期望的作用一样？
      CSD U3 collisions flyman displace coin_2018: |-
        # 飞行游戏 - 障碍后的硬币\\r

        \\r
        现在你的硬币移动到了随机的位置。这意味着它有可能藏在障碍的后面，这样角色就不能得到它了。用精灵交互可以修复这个问题。\\r
        \\r

        # 这样做\\r

        \\r

        -   增加代码来防止硬币被挪到障碍的后面。别害怕来多次尝试，看看它是如何工作的。\\r
        -   和旁边的同学讨论一下：你决定使用哪个精灵的交互？是否还有别的精灵交互和你期望的作用一样？
      CSD U3 collisions flyman displace coin_2019: |-
        # 飞行游戏 - 障碍后的硬币\\r

        \\r
        现在你的硬币移动到了随机的位置。这意味着它有可能藏在障碍的后面，这样角色就不能得到它了。用精灵交互可以修复这个问题。\\r
        \\r

        # 这样做\\r

        \\r

        -   增加代码来防止硬币被挪到障碍的后面。别害怕来多次尝试，看看它是如何工作的。\\r
        -   和旁边的同学讨论一下：你决定使用哪个精灵的交互？是否还有别的精灵交互和你期望的作用一样？
      CSD U3 collisions flyman make it your own: |-
        # 飞行游戏 - 自由发挥\\r

        \\r
        现在用你学到的关于精灵交互的知识，自由发挥吧。\\r
        \\r

        # 这样做\\r

        \\r
        至少增加一个使用了交互的精灵到游戏里。这里有一些电子，你也可以加上自己想要的功能。确保和你的同学分享了你的主意。\\r
        \\r

        -   创建"edge"（边缘）精灵来让你的角色不会弹出屏幕。\\r
        -   往游戏里添加一个平台来让角色可以四处浏览。\\r
        -   添加另一个障碍。\\r
        -   创建自己的主意。
      CSD U3 collisions flyman make it your own_2018: |-
        # 飞行游戏 - 自由发挥\\r

        \\r
        现在用你学到的关于精灵交互的知识，自由发挥吧。\\r
        \\r

        # 这样做\\r

        \\r
        至少增加一个使用了交互的精灵到游戏里。这里有一些电子，你也可以加上自己想要的功能。确保和你的同学分享了你的主意。\\r
        \\r

        -   创建"edge"（边缘）精灵来让你的角色不会弹出屏幕。\\r
        -   往游戏里添加一个平台来让角色可以四处浏览。\\r
        -   添加另一个障碍。\\r
        -   创建自己的主意。
      CSD U3 collisions flyman make it your own_2019: |-
        # 飞行游戏 - 自由发挥\\r

        \\r
        现在用你学到的关于精灵交互的知识，自由发挥吧。\\r
        \\r

        # 这样做\\r

        \\r
        至少增加一个使用了交互的精灵到游戏里。这里有一些电子，你也可以加上自己想要的功能。确保和你的同学分享了你的主意。\\r
        \\r

        -   创建"edge"（边缘）精灵来让你的角色不会弹出屏幕。\\r
        -   往游戏里添加一个平台来让角色可以四处浏览。\\r
        -   添加另一个障碍。\\r
        -   创建自己的主意。
      CSD U3 counter example: "# 计数器模式\\\\r\n\n\\\\r\n在这个程序中，绘图循环用来让精灵穿过屏幕。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n\n-   运行代码，然后和你的伙伴讨论一下，你认为它是如何工作的。"
      CSD U3 dancing alien: "# 绘图循环里的精灵。\\\\r\n\n\\\\r\n改动绘图循环里精灵的属性，你能让你的角色动起来。\n\\\\r\n\\\\r\n动画速度被减慢了。在程序开始处的`World.frameRate`（世界.帧率）模块将帧率设置为了10。通常的帧率是30。将帧率改成其它值。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\n-   运行代码看看它是如何工作的。\\\\r\n-   和你的伙伴讨论一下，为什么有些代码在绘图循环里面，有些在外面。\\\\r\n-   试试改动帧率，然后再运行代码。"
      CSD U3 dancing alien_2018: "# 绘图循环里的精灵。\\\\r\n\n\\\\r\n改动绘图循环里精灵的属性，你能让你的角色动起来。\n\\\\r\n\\\\r\n动画速度被减慢了。在程序开始处的`World.frameRate`（世界.帧率）模块将帧率设置为了10。通常的帧率是30。将帧率改成其它值。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\n-   运行代码看看它是如何工作的。\\\\r\n-   和你的伙伴讨论一下，为什么有些代码在绘图循环里面，有些在外面。\\\\r\n-   试试改动帧率，然后再运行代码。"
      CSD U3 dancing alien_2019: "# 绘图循环里的精灵。\\\\r\n\n\\\\r\n改动绘图循环里精灵的属性，你能让你的角色动起来。\n\\\\r\n\\\\r\n动画速度被减慢了。在程序开始处的`World.frameRate`（世界.帧率）模块将帧率设置为了10。通常的帧率是30。将帧率改成其它值。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\n-   运行代码看看它是如何工作的。\\\\r\n-   和你的伙伴讨论一下，为什么有些代码在绘图循环里面，有些在外面。\\\\r\n-   试试改动帧率，然后再运行代码。"
      CSD U3 debug: |-
        <img src="https://images.code.org/249f124a9bbd3da7d6327a7be8ab73c9-image-1493138569984.41.50
        AM.png" style="float:right;width:150px;">\\r
        \\r

        # 调试\\r

        \\r
        通常，代码在第一次运行时，都不能正常工作，需要程序员调试。下面的代码应该做出右边一样的图片，但程序员搞混了代码的顺序，以及怎样把正方形放到屏幕的正确位置上。\\r
        \\r

        # 这样做\\r

        \\r

        -   看看工作区中的代码。\\r
        -   修改代码，让它能做出右边一样的图片。\\r
        -   （你需要改动一行代码，并改变正方形的坐标。)
      CSD U3 debug_2018: |-
        <img src="https://images.code.org/249f124a9bbd3da7d6327a7be8ab73c9-image-1493138569984.41.50
        AM.png" style="float:right;width:150px;">\\r
        \\r

        # 调试\\r

        \\r
        通常，代码在第一次运行时，都不能正常工作，需要程序员调试。下面的代码应该做出右边一样的图片，但程序员搞混了代码的顺序，以及怎样把正方形放到屏幕的正确位置上。\\r
        \\r

        # 这样做\\r

        \\r

        -   看看工作区中的代码。\\r
        -   修改代码，让它能做出右边一样的图片。\\r
        -   （你需要改动一行代码，并改变正方形的坐标。)
      CSD U3 debug_2019: |-
        <img src="https://images.code.org/249f124a9bbd3da7d6327a7be8ab73c9-image-1493138569984.41.50
        AM.png" style="float:right;width:150px;">\\r
        \\r

        # 调试\\r

        \\r
        通常，代码在第一次运行时，都不能正常工作，需要程序员调试。下面的代码应该做出右边一样的图片，但程序员搞混了代码的顺序，以及怎样把正方形放到屏幕的正确位置上。\\r
        \\r

        # 这样做\\r

        \\r

        -   看看工作区中的代码。\\r
        -   修改代码，让它能做出右边一样的图片。\\r
        -   （你需要改动一行代码，并改变正方形的坐标。)
      CSD U3 ellipse: |-
        <img src="https://images.code.org/2ef29be10261f6a2c5df8f214d524f4d-image-1493060602794.02.44
        PM.png" style="float:right;width:150px;">\\r\\r# 椭圆\\r
        \\r
        你可以用`ellipse`（椭圆）来画圆圈。\\r
        \\r

        # 这样做\\r

        \\r

        -   看看画椭圆的代码。\\r
        -   添加一个不同颜色的新椭圆.\\r
      CSD U3 ellipse_2018: |-
        <img src="https://images.code.org/2ef29be10261f6a2c5df8f214d524f4d-image-1493060602794.02.44
        PM.png" style="float:right;width:150px;">\\r\\r# 椭圆\\r
        \\r
        你可以用`ellipse`（椭圆）来画圆圈。\\r
        \\r

        # 这样做\\r

        \\r

        -   看看画椭圆的代码。\\r
        -   添加一个不同颜色的新椭圆.\\r
      CSD U3 ellipse_2019: |-
        <img src="https://images.code.org/2ef29be10261f6a2c5df8f214d524f4d-image-1493060602794.02.44
        PM.png" style="float:right;width:150px;">\\r\\r# 椭圆\\r
        \\r
        你可以用`ellipse`（椭圆）来画圆圈。\\r
        \\r

        # 这样做\\r

        \\r

        -   看看画椭圆的代码。\\r
        -   添加一个不同颜色的新椭圆.\\r
      CSD U3 fill: |-
        <img src="https://images.code.org/c91390d63e52a3349c48f7b6b0057258-image-1493060802897.05.19
        PM.png" style="float:right;width:200px;">

        # 填充（颜色）

        你可以用`fill`（填充）让你的矩形有不同的颜色。它会将它之后的所有形状都设置成这个颜色。

        # 这样做

        -   看一看设置颜色的代码。( [显示](#triggercallout=fill))
        -   将颜色从蓝色改为黄色。
        -   通过将一个`rect`（矩形）模块拖拽到填充命令下面来增加一个正方形。 ( [显示](#triggercallout=rect_block)) 新的正方形可以放在屏幕的任何位置。
      CSD U3 fill_2018: |-
        <img src="https://images.code.org/c91390d63e52a3349c48f7b6b0057258-image-1493060802897.05.19
        PM.png" style="float:right;width:200px;">

        # 填充（颜色）

        你可以用`fill`（填充）让你的矩形有不同的颜色。它会将它之后的所有形状都设置成这个颜色。

        # 这样做

        -   看一看设置颜色的代码。( [显示](#triggercallout=fill))
        -   将颜色从蓝色改为黄色。
        -   通过将一个`rect`（矩形）模块拖拽到填充命令下面来增加一个正方形。 ( [显示](#triggercallout=rect_block)) 新的正方形可以放在屏幕的任何位置。
      CSD U3 fill_2019: |-
        <img src="https://images.code.org/c91390d63e52a3349c48f7b6b0057258-image-1493060802897.05.19
        PM.png" style="float:right;width:200px;">

        # 填充（颜色）

        你可以用`fill`（填充）让你的矩形有不同的颜色。它会将它之后的所有形状都设置成这个颜色。

        # 这样做

        -   看一看设置颜色的代码。( [显示](#triggercallout=fill))
        -   将颜色从蓝色改为黄色。
        -   通过将一个`rect`（矩形）模块拖拽到填充命令下面来增加一个正方形。 ( [显示](#triggercallout=rect_block)) 新的正方形可以放在屏幕的任何位置。
      CSD U3 game choose background_2018: "# 选择你的背景\n\n有了所需的背景，可以编写代码来选择正确的背景。这已经在[第15课第11级] \\(/s/csd3/stage/15/puzzle/11) 中提到过。 \n\n编写完代码后, 通过更改变量的起始值并确保正确的背景出现来测试它。"
      CSD U3 game display boards_2018: "# 显示板\n\n背景已经选好, 可以添加显示板了。大多数游戏都有记分牌, 但如果想显示有关游戏级别或剩余生命的信息。 可以参考 [第12课 第9题] \\(/s/csd3/stage/12/puzzle/9) 的例子, 制作记分牌。 \n\n对于每个显示板: \n\n-   创建一个函数用来显示信息 \n-   在绘图循环中调用这个函数\n\n记得要通过更改变量的起始值来测试显示板, 确保显示板在运行时会发生更改。"
      CSD U3 keydown conditional-2018: "# 改变精灵\\\\r\n\n\\\\r\n在上一关，你看到了当你按住一个键，`keyDown`会返回真`true`，而没被按下时，它会返回`false`。`keyDown`命令的输入是想要检查的键的名字。比如：\"x\"， \"up\"，和\"space\"。\\\\r\n\\\\r\n我们能用`keyDown`当作`如果`语句的输入，来根据键是否按下了来改变动画！\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\n-   运行代码，并试试点击\"p\"和\"h\"键。\\\\r\n-   \\*\n    看看`如果`语句里的代码是如何起作用的。\\\\r\n-   在第三个`如果`语句里增加模块来让动画变成另一个动物。\\\\r\n    \\\\r\n    \\*挑战：当你用`setAnimation`时，它会保持新的动画，直到再次改变它。你能改动代码，当不再按下键时，让精灵自动走回到长颈鹿吗？"
      CSD U3 keydown conditional: "# 改变精灵\\\\r\n\n\\\\r\n你应该在上一关见过了，当你按住一个键时`keyDown`返回`true`，当键没有被按下时，返回`false`。`keyDown`命令的输入是你想要检查的键的名字。例如\"x\", \"up\"（上箭头) 和\"space\"（空格键）。\\\\r\n\\\\r\n我们将`keyDown`作为`if`如果语句的输入，在按下键时，改变动画。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\n-   运行代码，并试试按下上方向和下方向键。\\\\r\n-   看看`if`语句里，来理解代码时如何工作的。\\\\r\n-   在第三个`if`语句中增加模块来将动画改变为另一个动物。\\\\r\n    \\\\r\n    \\*提示：你可以用已经在动画标签页中的兔子，或者加上一个新的动画。"
      CSD U3 keydown conditional_2018: "# 改变精灵\\\\r\n\n\\\\r\n在上一关，你看到了当你按住一个键，`keyDown`会返回真`true`，而没被按下时，它会返回`false`。`keyDown`命令的输入是想要检查的键的名字。比如：\"x\"， \"up\"，和\"space\"。\\\\r\n\\\\r\n我们能用`keyDown`当作`如果`语句的输入，来根据键是否按下了来改变动画！\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\n-   运行代码，并试试点击\"p\"和\"h\"键。\\\\r\n-   \\*\n    看看`如果`语句里的代码是如何起作用的。\\\\r\n-   在第三个`如果`语句里增加模块来让动画变成另一个动物。\\\\r\n    \\\\r\n    \\*挑战：当你用`setAnimation`时，它会保持新的动画，直到再次改变它。你能改动代码，当不再按下键时，让精灵自动走回到长颈鹿吗？"
      CSD U3 keydown conditional_2018_2019: "# 改变精灵\\\\r\n\n\\\\r\n在上一关，你看到了当你按住一个键，`keyDown`会返回真`true`，而没被按下时，它会返回`false`。`keyDown`命令的输入是想要检查的键的名字。比如：\"x\"， \"up\"，和\"space\"。\\\\r\n\\\\r\n我们能用`keyDown`当作`如果`语句的输入，来根据键是否按下了来改变动画！\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\n-   运行代码，并试试点击\"p\"和\"h\"键。\\\\r\n-   \\*\n    看看`如果`语句里的代码是如何起作用的。\\\\r\n-   在第三个`如果`语句里增加模块来让动画变成另一个动物。\\\\r\n    \\\\r\n    \\*挑战：当你用`setAnimation`时，它会保持新的动画，直到再次改变它。你能改动代码，当不再按下键时，让精灵自动走回到长颈鹿吗？"
      CSD U3 my-rect: |-
        # rect(x,y)\\r

        \\r
        欢迎来到游戏实验室，你能在这里创建交互动画和游戏！\\r
        \\r
        在课程中，你已经练习了一些基础，如将形状添加到网格中。在游戏实验室里，你需要做出和左边显示区域一样的东西。\\r
        \\r

        # 这样做\\r

        \\r
        \*
        看看工作区里，这些说明下的这行代码( [显示在哪里](#triggercallout=block_trigger) )，然后和伙伴讨论一下你觉得这个形状会画在网格的什么位置。（插入模块的图片）
        \\r

        -   点击<img src="https://images.code.org/9e963203e9cafd558b760730d13537ca-image-1461783998310.06.20
            PM.png" width=100>来运行程序，并看看会发生什么。( [显示在哪里](#triggercallout=run_trigger)
            )\\r
        -   改变在两个不同的入口的代码，然后试着再运行一下程序。\\r
        -   试着将矩形放在屏幕的右下角。
      CSD U3 picture: |-
        # 挑战：画图\\r

        \\r
        _在开始任何挑战前，先问问自己的老师。_\\r
        \\r
        在前面的课程中，你和伙伴创建了一些有趣的图片。看看你能否用代码来创建它们。
      CSD U3 picture_2018: |-
        # 挑战：画图\\r

        \\r
        _在开始任何挑战前，先问问自己的老师。_\\r
        \\r
        在前面的课程中，你和伙伴创建了一些有趣的图片。看看你能否用代码来创建它们。
      CSD U3 picture_2019: |-
        # 挑战：画图\\r

        \\r
        _在开始任何挑战前，先问问自己的老师。_\\r
        \\r
        在前面的课程中，你和伙伴创建了一些有趣的图片。看看你能否用代码来创建它们。
      CSD U3 rect: |-
        # 探索游戏实验室\\r

        \\r
        欢迎来到游戏实验室，你能在这里创建交互动画和游戏！\\r
        \\r
        你已经练习了一些基础，如将形状添加到网格中。在游戏实验室里，你需要做出和左边显示区域一样的东西。\\r
        \\r

        # 这样做\\r

        \\r
        \*
        看看工作区里，这些说明下的这行代码( [显示在哪里](#triggercallout=block_trigger) )，然后和伙伴讨论一下你觉得这个形状会画在网格的什么位置。
        \\r

        -   点击<img src="https://images.code.org/9e963203e9cafd558b760730d13537ca-image-1461783998310.06.20
            PM.png" width=100>来运行程序，并看看会发生什么。( [显示在哪里](#triggercallout=run_trigger)
            )\\r
        -   改变模块中的数字，然后试着再运行一下程序。\\r
        -   试着将矩形放在屏幕的右下角。
      CSD U3 rect_2018: |-
        # 探索游戏实验室

        欢迎来到游戏实验室，你能在这里创建交互动画和游戏！

        你已经练习了一些基础，如将形状添加到网格中。在游戏实验室里，你需要做出和左边显示区域一样的东西。

        # 这样做

        -   看看工作区里，这些说明下的这行代码( [显示在哪里](#triggercallout=block_trigger) )，然后和伙伴讨论一下你觉得这个形状会画在网格的什么位置。
        -   点击<img src="https://images.code.org/9e963203e9cafd558b760730d13537ca-image-1461783998310.06.20 PM.png" width=100>来运行程序，并看看会发生什么。
        -   改变模块中的数字，然后试着再运行一下程序。
        -   试着将矩形放在屏幕的右下角。
      CSD U3 rect_2019: |-
        # 探索游戏实验室

        欢迎来到游戏实验室，你能在这里创建交互动画和游戏！

        你已经练习了一些基础，如将形状添加到网格中。在游戏实验室里，你需要做出和左边显示区域一样的东西。

        # 这样做

        -   看看工作区里，这些说明下的这行代码( [显示在哪里](#triggercallout=block_trigger) )，然后和伙伴讨论一下你觉得这个形状会画在网格的什么位置。
        -   点击<img src="https://images.code.org/9e963203e9cafd558b760730d13537ca-image-1461783998310.06.20 PM.png" width=100>来运行程序，并看看会发生什么。
        -   改变模块中的数字，然后试着再运行一下程序。
        -   试着将矩形放在屏幕的右下角。
      CSD U3 sequence: |-
        <img src="https://images.code.org/30d68fb30db5b61187f104f46292e052-image-1493060980724.08.05 PM.png" style="float:right">

        # 顺序很重要

        在游戏实验室里，放置代码的顺序很重要。新的形状会绘制在之前形状之上，覆盖这些已经画好的形状。你可以看看，如果在代码中用一种以上的颜色时，有什么不同。

        # 这样做

        -   看看画两个举行的代码，第一个是红色，另一个是蓝色。
        -   将红色的矩形改为绿色。
        -   改变代码的顺序，让绿色矩形在最上面。
      CSD U3 sequence_2018: |-
        <img src="https://images.code.org/30d68fb30db5b61187f104f46292e052-image-1493060980724.08.05 PM.png" style="float:right">

        # 顺序很重要

        在游戏实验室里，放置代码的顺序很重要。新的形状会绘制在之前形状之上，覆盖这些已经画好的形状。你可以看看，如果在代码中用一种以上的颜色时，有什么不同。

        # 这样做

        -   看看画两个举行的代码，第一个是红色，另一个是蓝色。
        -   将红色的矩形改为绿色。
        -   改变代码的顺序，让绿色矩形在最上面。
      CSD U3 sequence_2019: |-
        <img src="https://images.code.org/30d68fb30db5b61187f104f46292e052-image-1493060980724.08.05 PM.png" style="float:right">

        # 顺序很重要

        在游戏实验室里，放置代码的顺序很重要。新的形状会绘制在之前形状之上，覆盖这些已经画好的形状。你可以看看，如果在代码中用一种以上的颜色时，有什么不同。

        # 这样做

        -   看看画两个举行的代码，第一个是红色，另一个是蓝色。
        -   将红色的矩形改为绿色。
        -   改变代码的顺序，让绿色矩形在最上面。
      CSD U4 - Design Mode Project_2018: |-
        ＃制作应用程序的样本

        使用纸上的原型，和所学的设计模块元素，来创建显示的一个数字版本。

        ＃ 这样做

        \*重命名显示以匹配_namespace_。
        \*使用内置的组件来布局应用程序屏幕显示，给每个元素一个适当的ID
        \\t \*例如，如果_namespace_是“home_”，则可以创建如下所示的ID：
        \\t \*“home_title”
        \*“home_login_button”
        \*“home\_logo”
        \*对于无法使用内置组件重新创建的你应用程序的任何组件，可以：
        \\t \*重新设计以便于利用内置组件
             \*找到一个图片来代替你需要的组件
             \*用喜欢的图像编辑器绘制这个组件
        \*确保队友们经常相互查看对方的设计，以保证风格一致
      CSD U4 - Design Mode Project_2019: |-
        ＃制作应用程序的样本

        使用纸上的原型，和所学的设计模块元素，来创建显示的一个数字版本。

        ＃ 这样做

        \*重命名显示以匹配_namespace_。
        \*使用内置的组件来布局应用程序屏幕显示，给每个元素一个适当的ID
        \\t \*例如，如果_namespace_是“home_”，则可以创建如下所示的ID：
        \\t \*“home_title”
        \*“home_login_button”
        \*“home\_logo”
        \*对于无法使用内置组件重新创建的你应用程序的任何组件，可以：
        \\t \*重新设计以便于利用内置组件
             \*找到一个图片来代替你需要的组件
             \*用喜欢的图像编辑器绘制这个组件
        \*确保队友们经常相互查看对方的设计，以保证风格一致
      CSD U5 Amazon Data Video: 观看此视频, 了解亚马逊如何解决这个问题, 。当你看的时候，考虑是什么数据被收集, 它是从哪里来的。
      CSD U5 Amazon Data Video_2018: 观看此视频, 了解亚马逊如何解决这个问题, 。当你看的时候，考虑是什么数据被收集, 它是从哪里来的。
      CSD U5 Amazon Data Video_2019: 观看此视频, 了解亚马逊如何解决这个问题, 。当你看的时候，考虑是什么数据被收集, 它是从哪里来的。
      CSD U5 Netflix Data Video: 观看此视频, 了解Netflix如何解决这个问题, 。当你观看的时候，请考虑要收集什么数据以及它们是从哪里来的。
      CSD U5 Netflix Data Video_2018: 观看此视频, 了解Netflix如何解决这个问题, 。当你观看的时候，请考虑要收集什么数据以及它们是从哪里来的。
      CSD U5 Netflix Data Video_2019: 观看此视频, 了解Netflix如何解决这个问题, 。当你观看的时候，请考虑要收集什么数据以及它们是从哪里来的。
      CSD U5 Pizza 2: |-
        # 比萨派对\\r

        \\r
        当人们进行数据工作时，他们明白要去掉那些无意义的答案，而有些答案，例如“胡椒粉”，“胡椒面”，“细胡椒粉”实际上是同一种东西。计算机不知道应该怎么左，因此我们需要在计算机使用前对数据进行清理。\\r
        \\r
        这个版本的应用有需要被清理的第二行数据。\\r
        \\r

        ## 这样做\\r

        \*
        点击“运行”来看看需要被清理的新的答案列表。\\r

        -   点击每个需要被清理的答案，并纠正它们。使得计算机能够正确的画出图。（你可能想要将某些答案直接删除）。\\r
        -   完成后，点击“显示图标”来看看清理答案后的新图标。
      CSD U5 Pizza 2_2018: |-
        # 比萨派对\\r

        \\r
        当人们进行数据工作时，他们明白要去掉那些无意义的答案，而有些答案，例如“胡椒粉”，“胡椒面”，“细胡椒粉”实际上是同一种东西。计算机不知道应该怎么左，因此我们需要在计算机使用前对数据进行清理。\\r
        \\r
        这个版本的应用有需要被清理的第二行数据。\\r
        \\r

        ## 这样做\\r

        \*
        点击“运行”来看看需要被清理的新的答案列表。\\r

        -   点击每个需要被清理的答案，并纠正它们。使得计算机能够正确的画出图。（你可能想要将某些答案直接删除）。\\r
        -   完成后，点击“显示图标”来看看清理答案后的新图标。
      CSD U5 Pizza 2_2019: |-
        # 比萨派对\\r

        \\r
        当人们进行数据工作时，他们明白要去掉那些无意义的答案，而有些答案，例如“胡椒粉”，“胡椒面”，“细胡椒粉”实际上是同一种东西。计算机不知道应该怎么左，因此我们需要在计算机使用前对数据进行清理。\\r
        \\r
        这个版本的应用有需要被清理的第二行数据。\\r
        \\r

        ## 这样做\\r

        \*
        点击“运行”来看看需要被清理的新的答案列表。\\r

        -   点击每个需要被清理的答案，并纠正它们。使得计算机能够正确的画出图。（你可能想要将某些答案直接删除）。\\r
        -   完成后，点击“显示图标”来看看清理答案后的新图标。
      CSD U5 Pizza: |-
        # 比萨派对\\r

        \\r
        比萨派对的数据已经被放到了一个应用里，来自另一个班级的答案页加上了。因为这是一个应用程序，我们能自动的从给出的数据来创建条形图。\\r
        \\r

        # 这样做\\r

        -   点击"运行"来看看领域给班级给的答案列表。\\r
        -   和伙伴讨论一下，你觉得数据图表会是什么样子。\\r
        -   点击"显示图表"看一看。\\r
            \\r
            # 电子表格版本\\r
            \\r
            如果你希望使用电子表格的话，比萨派对的数据也有这个格式。如果要使用电子表格，你需要自己复制它。\\r
            \\r
        -   \*
            这个链接会让你自己拷贝一份"最佳的比萨选择"数据：
            [比萨最佳选择](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/copy)\\r
        -   \*
            你也可以下载CSV版本的文件。[这里](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/export?format=csv).
      CSD U5 Pizza_2018: |-
        # 比萨派对\\r

        \\r
        比萨派对的数据已经被放到了一个应用里，来自另一个班级的答案页加上了。因为这是一个应用程序，我们能自动的从给出的数据来创建条形图。\\r
        \\r

        # 这样做\\r

        -   点击"运行"来看看领域给班级给的答案列表。\\r
        -   和伙伴讨论一下，你觉得数据图表会是什么样子。\\r
        -   点击"显示图表"看一看。\\r
            \\r
            # 电子表格版本\\r
            \\r
            如果你希望使用电子表格的话，比萨派对的数据也有这个格式。如果要使用电子表格，你需要自己复制它。\\r
            \\r
        -   \*
            这个链接会让你自己拷贝一份"最佳的比萨选择"数据：
            [比萨最佳选择](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/copy)\\r
        -   \*
            你也可以下载CSV版本的文件。[这里](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/export?format=csv).
      CSD U5 Pizza_2019: |-
        # 比萨派对\\r

        \\r
        比萨派对的数据已经被放到了一个应用里，来自另一个班级的答案页加上了。因为这是一个应用程序，我们能自动的从给出的数据来创建条形图。\\r
        \\r

        # 这样做\\r

        -   点击"运行"来看看领域给班级给的答案列表。\\r
        -   和伙伴讨论一下，你觉得数据图表会是什么样子。\\r
        -   点击"显示图表"看一看。\\r
            \\r
            # 电子表格版本\\r
            \\r
            如果你希望使用电子表格的话，比萨派对的数据也有这个格式。如果要使用电子表格，你需要自己复制它。\\r
            \\r
        -   \*
            这个链接会让你自己拷贝一份"最佳的比萨选择"数据：
            [比萨最佳选择](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/copy)\\r
        -   \*
            你也可以下载CSV版本的文件。[这里](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/export?format=csv).
      CSD U5 Waze Data Video: 观看此视频, 了解 Waze如何解决这个问题的。当你看的时候，思考是什么数据被收集, 它是从哪里来的。
      CSD U5 Waze Data Video_2018: 观看此视频, 了解 Waze如何解决这个问题的。当你看的时候，思考是什么数据被收集, 它是从哪里来的。
      CSD U5 Waze Data Video_2019: 观看此视频, 了解 Waze如何解决这个问题的。当你看的时候，思考是什么数据被收集, 它是从哪里来的。
      CSD U5 binary 1: |-
        # 5比特数字\\r

        \\r
        当你只有4个比特时，能够表达的最大的数字是15。现在你有机会使用更多比特来表达更大的数。\\r
        \\r
        在这个活动中，这些点都会被替换成数字，但你仍然需要将显示的内容都加起来，来看看二进制代码表示的什么数字。最左边的位还没有数字，因此你需要给它一个值。\\r
        \\r

        # 这样做\\r

        \\r

        -   点击这些比特来将它们打开或关闭，然后看看产生的不同数字。\\r
        -   和你的伙伴讨论一些数字的规律。决定你想在最左边的盒子里显示什么数字。\\r
        -   点击“编辑”来改变最左边位的值。\\r
        -   一旦你决定了值，试试产生这些数字：16，27，31
      CSD U5 binary 1_2018: |-
        # 5比特数字\\r

        \\r
        当你只有4个比特时，能够表达的最大的数字是15。现在你有机会使用更多比特来表达更大的数。\\r
        \\r
        在这个活动中，这些点都会被替换成数字，但你仍然需要将显示的内容都加起来，来看看二进制代码表示的什么数字。最左边的位还没有数字，因此你需要给它一个值。\\r
        \\r

        # 这样做\\r

        \\r

        -   点击这些比特来将它们打开或关闭，然后看看产生的不同数字。\\r
        -   和你的伙伴讨论一些数字的规律。决定你想在最左边的盒子里显示什么数字。\\r
        -   点击“编辑”来改变最左边位的值。\\r
        -   一旦你决定了值，试试产生这些数字：16，27，31
      CSD U5 binary 1_2019: |-
        # 5比特数字\\r

        \\r
        当你只有4个比特时，能够表达的最大的数字是15。现在你有机会使用更多比特来表达更大的数。\\r
        \\r
        在这个活动中，这些点都会被替换成数字，但你仍然需要将显示的内容都加起来，来看看二进制代码表示的什么数字。最左边的位还没有数字，因此你需要给它一个值。\\r
        \\r

        # 这样做\\r

        \\r

        -   点击这些比特来将它们打开或关闭，然后看看产生的不同数字。\\r
        -   和你的伙伴讨论一些数字的规律。决定你想在最左边的盒子里显示什么数字。\\r
        -   点击“编辑”来改变最左边位的值。\\r
        -   一旦你决定了值，试试产生这些数字：16，27，31
      CSD U5 binary 2: |-
        # 6比特数字\\r

        \\r
        这个小工具能够帮助你计算6比特的二进制数字。\\r
        \\r

        # 这样做\\r

        \\r

        -   和你的伙伴一起回答这些问题：\\r
        -   你能通过工具产生的最大的数是多少？\\r
        -   一个人和狗能够跳过的记录是59。你应该如何在二进制里编码59？
      CSD U5 binary 2_2018: |-
        # 6比特数字\\r

        \\r
        这个小工具能够帮助你计算6比特的二进制数字。\\r
        \\r

        # 这样做\\r

        \\r

        -   和你的伙伴一起回答这些问题：\\r
        -   你能通过工具产生的最大的数是多少？\\r
        -   一个人和狗能够跳过的记录是59。你应该如何在二进制里编码59？
      CSD U5 binary 2_2019: |-
        # 6比特数字\\r

        \\r
        这个小工具能够帮助你计算6比特的二进制数字。\\r
        \\r

        # 这样做\\r

        \\r

        -   和你的伙伴一起回答这些问题：\\r
        -   你能通过工具产生的最大的数是多少？\\r
        -   一个人和狗能够跳过的记录是59。你应该如何在二进制里编码59？
      CSD U5 binary 3-new: |-
        # 解码多个数字\\r

        \\r
        这有一个工具能够计算4，5，6比特的数字。你能用它来找到编码的两个世界纪录。\\r
        \\r

        1.  人类在两分钟内能够举起并扔出去的数量。(4比特)\\r
        2.  鹦鹉在一分钟内能够打开的罐装饮料数量。(6比特)\\r
            \\r
            # 这样做\\r
        3.  从二进制字符串中解码这两个数字。
      CSD U5 binary 3: "# 解码多个数字\\\\r\n\n\\\\r\n这里有个工具能够计算最多8比特的数字。你能用它来找到三个编码在二进制字符串中的世界记录。这些答案在字符串中是有序的。\\\\r\n\\\\r\n\n1.  一只鹦鹉在一分钟里打开的罐装饮料数量。\\\\r\n2.  在一个圆锥体上保持平衡的冰淇淋勺的数量。\\\\r\n3.  3.\n    在两分钟内举起并扔出去的人的数量。\\\\r\n    \\\\r\n    ![](https://images.code.org/51fe16afb224a2cc4819def434f6ec9d-image-1502735454689.png)\\\\r\n    \\\\r\n    # \n    这样做\\\\r\n4.  试着从二进制字符串中解码这三个数。\\\\r\n5.  \\*\n    和你的伙伴讨论答案\\\\r\n6.  这里有其它信息能够确定你的数字是否正确吗？"
      CSD U5 binary 4-new: |-
        # 解码多个数字\\r

        \\r
        这有一个工具能够计算4，5，6比特的数字。你能用它来找到编码的两个世界纪录。\\r
        \\r
        \!\[](\<<https://images.code.org/13b0d3307e688575b53e3e6bc86fb739-image-1505426509385.01.06>
        PM.png>)\\r
        \\r

        1.  人类在两分钟内能够举起并扔出去的数量。(4比特)\\r
        2.  鹦鹉在一分钟内能够打开的罐装饮料数量。(6比特)\\r
            \\r
            # 这样做\\r
        3.  从二进制字符串中解码这两个数字。
      CSD U5 binary 4-new_2018: |-
        # 解码多个数字\\r

        \\r
        这有一个工具能够计算4，5，6比特的数字。你能用它来找到编码的两个世界纪录。\\r
        \\r
        \!\[](\<<https://images.code.org/13b0d3307e688575b53e3e6bc86fb739-image-1505426509385.01.06>
        PM.png>)\\r
        \\r

        1.  人类在两分钟内能够举起并扔出去的数量。(4比特)\\r
        2.  鹦鹉在一分钟内能够打开的罐装饮料数量。(6比特)\\r
            \\r
            # 这样做\\r
        3.  从二进制字符串中解码这两个数字。
      CSD U5 binary 4-new_2019: |-
        # 解码多个数字\\r

        \\r
        这有一个工具能够计算4，5，6比特的数字。你能用它来找到编码的两个世界纪录。\\r
        \\r
        \!\[](\<<https://images.code.org/13b0d3307e688575b53e3e6bc86fb739-image-1505426509385.01.06>
        PM.png>)\\r
        \\r

        1.  人类在两分钟内能够举起并扔出去的数量。(4比特)\\r
        2.  鹦鹉在一分钟内能够打开的罐装饮料数量。(6比特)\\r
            \\r
            # 这样做\\r
        3.  从二进制字符串中解码这两个数字。
      CSD U5 binary 4: |-
        # 位长度\\r

        \\r
        如果你不知道每个数字有多少位，你没法解码一个数字字符串。\\r
        \\r
        例如，下面的二进制字符串有多种方法来解码。\\r
        \\r
        <img src="https://images.code.org/51fe16afb224a2cc4819def434f6ec9d-image-1502735454689.png"
        style="height: 30px;">\\r
        \\r
        如果你将字符串这样分开，这个字符串读作：71, 28, 28.\\r
        \\r
        <img src="https://images.code.org/03f40f140dbdbff92af0784911e66fa2-image-1502741759516.png"
        style="height: 30px;">    <img src="https://images.code.org/b5b34c9ec4d051bd81404756269b1cf0-image-1502741761216.png"
        style="height: 30px;">    <img src="https://images.code.org/b5b34c9ec4d051bd81404756269b1cf0-image-1502741761216.png"
        style="height: 30px;">\\r
        \\r
        如果这样分开，这个字符串读作：
        17, 249, 12.\\r
        \\r
        <img src="https://images.code.org/ec9a1533c32a23637f9d1021d318f496-image-1502741540345.png"
        style="height: 30px;">    <img src="https://images.code.org/1239b8d5f24df95e6461165b92a41383-image-1502741542720.png"
        style="height: 30px;">    <img src="https://images.code.org/5e71958697e30b9874ed6f6028a02023-image-1502741545510.png"
        style="height: 30px;">\\r
        \\r
        \\r
        为了解决这个问题，人们同意为每个数字都设置固定的长度。这个字符串用了同样的三个数字，但每个数字都是正好8比特。\\r
        \\r
        \\r
        <img src="https://images.code.org/2c55ec3f4ff236cb4ffa8d9b1b46895f-image-1502742909603.png"
        style="height: 30px;">\\r
        \\r

        # 这样做\\r

        \\r

        -   用二进制小工具用8比特数字来解码字符串。\\r
        -   和你的伙伴检查答案，看看是否一致。
      CSD U5 binary 5-new: |-
        # 解码多个数字\\r

        \\r
        这里有个工具能够计算最多8比特的数字。你能用它找到下面的两个世界记录。\\r
        \\r
        别忘了确保"1"比特永远在最右边。如果在左边有多余的比特，将它们关闭就行了\\r
        \\r
        \!\[](\<<https://images.code.org/e86788ff9b92a2b01b99749fa1aba8e8-image-1505426626592.01.14>
        PM.png>)\\r
        \\r

        1.  最长的狗尾巴（英寸）（5比特）\\r
        2.  在某人脸上能够保持平衡的最多的勺子数量（5比特）\\r
            \\r
            # 这样做\\r
        3.  从一个二进制字符串中解码这两个数字。
      CSD U5 binary 5-new_2018: |-
        # 解码多个数字\\r

        \\r
        这里有个工具能够计算最多8比特的数字。你能用它找到下面的两个世界记录。\\r
        \\r
        别忘了确保"1"比特永远在最右边。如果在左边有多余的比特，将它们关闭就行了\\r
        \\r
        \!\[](\<<https://images.code.org/e86788ff9b92a2b01b99749fa1aba8e8-image-1505426626592.01.14>
        PM.png>)\\r
        \\r

        1.  最长的狗尾巴（英寸）（5比特）\\r
        2.  在某人脸上能够保持平衡的最多的勺子数量（5比特）\\r
            \\r
            # 这样做\\r
        3.  从一个二进制字符串中解码这两个数字。
      CSD U5 binary 5-new_2019: |-
        # 解码多个数字\\r

        \\r
        这里有个工具能够计算最多8比特的数字。你能用它找到下面的两个世界记录。\\r
        \\r
        别忘了确保"1"比特永远在最右边。如果在左边有多余的比特，将它们关闭就行了\\r
        \\r
        \!\[](\<<https://images.code.org/e86788ff9b92a2b01b99749fa1aba8e8-image-1505426626592.01.14>
        PM.png>)\\r
        \\r

        1.  最长的狗尾巴（英寸）（5比特）\\r
        2.  在某人脸上能够保持平衡的最多的勺子数量（5比特）\\r
            \\r
            # 这样做\\r
        3.  从一个二进制字符串中解码这两个数字。
      CSD U5 binary 6-new: |-
        # 解码多个数字\\r

        \\r
        这里有一个新的二进制字符串。这次，你不知道两个数字的比特长度。试着在不知道比特长度的情况下解码这两个数字。\\r
        \\r
        \!\[](\<<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46>
        PM.png>)\\r
        \\r

        1.  最大的风铃的英寸尺寸（？比特）\\r
        2.  用某人的脚（英尺）丈量的弓箭射出的最远距离。(？比特）\\r
            \\r
            # 这样做\\r
        3.  试一试从二进制字符串中解码这两个数字。\\r
        4.  和你的伙伴讨论一下，为什么你不能确定自己的答案是否正确。
      CSD U5 binary 6-new_2018: |-
        # 解码多个数字\\r

        \\r
        这里有一个新的二进制字符串。这次，你不知道两个数字的比特长度。试着在不知道比特长度的情况下解码这两个数字。\\r
        \\r
        \!\[](\<<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46>
        PM.png>)\\r
        \\r

        1.  最大的风铃的英寸尺寸（？比特）\\r
        2.  用某人的脚（英尺）丈量的弓箭射出的最远距离。(？比特）\\r
            \\r
            # 这样做\\r
        3.  试一试从二进制字符串中解码这两个数字。\\r
        4.  和你的伙伴讨论一下，为什么你不能确定自己的答案是否正确。
      CSD U5 binary 6-new_2019: |-
        # 解码多个数字\\r

        \\r
        这里有一个新的二进制字符串。这次，你不知道两个数字的比特长度。试着在不知道比特长度的情况下解码这两个数字。\\r
        \\r
        \!\[](\<<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46>
        PM.png>)\\r
        \\r

        1.  最大的风铃的英寸尺寸（？比特）\\r
        2.  用某人的脚（英尺）丈量的弓箭射出的最远距离。(？比特）\\r
            \\r
            # 这样做\\r
        3.  试一试从二进制字符串中解码这两个数字。\\r
        4.  和你的伙伴讨论一下，为什么你不能确定自己的答案是否正确。
      CSD U5 binary 7-new: |-
        # 位长度\\r

        \\r
        如果你不知道每个数字有多少位，你没法解码一个数字字符串。\\r
        \\r
        例如，下面的二进制字符串有多种方法来解码。\\r
        \\r
        \!\[](\<<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46>
        PM.png>)\\r
        \\r
        如果你将字符串这样分开，这个字符串读作：10，84。\\r
        \\r
        \!\[](\<<https://images.code.org/c8586b93427166ae6ecfdb8b1ff66bdd-image-1505427228630.13.01>
        PM.png>) \!\[](\<<https://images.code.org/7d9814dc4bae8512dfaebbe459c29c9b-image-1505427230882.13.08>
        PM.png>)\\r
        \\r
        \\r
        如果这样分开，这个字符串读作：42，20。\\r
        \\r
        \!\[](\<<https://images.code.org/2e62b4a71b98b68bdf04713c508e4cb2-image-1505427233001.13.13>
        PM.png>) \!\[](\<<https://images.code.org/10a316c870b575db4b30a687815bf481-image-1505427235482.13.19>
        PM.png>)\\r
        \\r
        为了解决这个问题，人们同意为每个数字都设置固定的长度。下面的字符串用了同样的两个数字，但无论实际上它有多少比特，每个数字都正好是8比特。\\r
        \\r
        \!\[](\<<https://images.code.org/257cb728fde57421e58ef31164be5a51-image-1505427467235.13.26>
        PM.png>)\\r
        \\r

        # 这样做\\r

        \\r

        -   用二进制小工具用8比特数字来解码字符串。\\r
        -   和你的伙伴检查答案，看看是否一致。
      CSD U5 binary 7-new_2018: |-
        # 位长度\\r

        \\r
        如果你不知道每个数字有多少位，你没法解码一个数字字符串。\\r
        \\r
        例如，下面的二进制字符串有多种方法来解码。\\r
        \\r
        \!\[](\<<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46>
        PM.png>)\\r
        \\r
        如果你将字符串这样分开，这个字符串读作：10，84。\\r
        \\r
        \!\[](\<<https://images.code.org/c8586b93427166ae6ecfdb8b1ff66bdd-image-1505427228630.13.01>
        PM.png>) \!\[](\<<https://images.code.org/7d9814dc4bae8512dfaebbe459c29c9b-image-1505427230882.13.08>
        PM.png>)\\r
        \\r
        \\r
        如果这样分开，这个字符串读作：42，20。\\r
        \\r
        \!\[](\<<https://images.code.org/2e62b4a71b98b68bdf04713c508e4cb2-image-1505427233001.13.13>
        PM.png>) \!\[](\<<https://images.code.org/10a316c870b575db4b30a687815bf481-image-1505427235482.13.19>
        PM.png>)\\r
        \\r
        为了解决这个问题，人们同意为每个数字都设置固定的长度。下面的字符串用了同样的两个数字，但无论实际上它有多少比特，每个数字都正好是8比特。\\r
        \\r
        \!\[](\<<https://images.code.org/257cb728fde57421e58ef31164be5a51-image-1505427467235.13.26>
        PM.png>)\\r
        \\r

        # 这样做\\r

        \\r

        -   用二进制小工具用8比特数字来解码字符串。\\r
        -   和你的伙伴检查答案，看看是否一致。
      CSD U5 binary 7-new_2019: |-
        # 位长度\\r

        \\r
        如果你不知道每个数字有多少位，你没法解码一个数字字符串。\\r
        \\r
        例如，下面的二进制字符串有多种方法来解码。\\r
        \\r
        \!\[](\<<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46>
        PM.png>)\\r
        \\r
        如果你将字符串这样分开，这个字符串读作：10，84。\\r
        \\r
        \!\[](\<<https://images.code.org/c8586b93427166ae6ecfdb8b1ff66bdd-image-1505427228630.13.01>
        PM.png>) \!\[](\<<https://images.code.org/7d9814dc4bae8512dfaebbe459c29c9b-image-1505427230882.13.08>
        PM.png>)\\r
        \\r
        \\r
        如果这样分开，这个字符串读作：42，20。\\r
        \\r
        \!\[](\<<https://images.code.org/2e62b4a71b98b68bdf04713c508e4cb2-image-1505427233001.13.13>
        PM.png>) \!\[](\<<https://images.code.org/10a316c870b575db4b30a687815bf481-image-1505427235482.13.19>
        PM.png>)\\r
        \\r
        为了解决这个问题，人们同意为每个数字都设置固定的长度。下面的字符串用了同样的两个数字，但无论实际上它有多少比特，每个数字都正好是8比特。\\r
        \\r
        \!\[](\<<https://images.code.org/257cb728fde57421e58ef31164be5a51-image-1505427467235.13.26>
        PM.png>)\\r
        \\r

        # 这样做\\r

        \\r

        -   用二进制小工具用8比特数字来解码字符串。\\r
        -   和你的伙伴检查答案，看看是否一致。
      CSD U5 black white images pixelation 2: |-
        # 这样做\\r

        \\r
        用像素小工具来画一个笑脸。\\r
        \\r
        \!\[](\<<https://images.code.org/3e81e7e5c95a63173242552de2e9c094-image-1491425592286.52.47>
        PM.png>)
      CSD U5 black white images pixelation 2_2018: |-
        # 这样做\\r

        \\r
        用像素小工具来画一个笑脸。\\r
        \\r
        \!\[](\<<https://images.code.org/3e81e7e5c95a63173242552de2e9c094-image-1491425592286.52.47>
        PM.png>)
      CSD U5 black white images pixelation 2_2019: |-
        # 这样做\\r

        \\r
        用像素小工具来画一个笑脸。\\r
        \\r
        \!\[](\<<https://images.code.org/3e81e7e5c95a63173242552de2e9c094-image-1491425592286.52.47>
        PM.png>)
      CSD U5 black white images pixelation 3: |-
        # 这样做\\r

        \\r
        这幅图的高度和宽度滑块没有设置正确，所以它看起来什么都不像。改变它们，直到你发现了图片。\\r
        \\r
        \!\[](\<<https://images.code.org/c2abe82051e700f22ce613e407e71536-image-1491426050751.00.17>
        PM.png>)
      CSD U5 black white images pixelation 3_2018: |-
        # 这样做\\r

        \\r
        这幅图的高度和宽度滑块没有设置正确，所以它看起来什么都不像。改变它们，直到你发现了图片。\\r
        \\r
        \!\[](\<<https://images.code.org/c2abe82051e700f22ce613e407e71536-image-1491426050751.00.17>
        PM.png>)
      CSD U5 black white images pixelation 3_2019: |-
        # 这样做\\r

        \\r
        这幅图的高度和宽度滑块没有设置正确，所以它看起来什么都不像。改变它们，直到你发现了图片。\\r
        \\r
        \!\[](\<<https://images.code.org/c2abe82051e700f22ce613e407e71536-image-1491426050751.00.17>
        PM.png>)
      CSD U5 black white images pixelation 4: |-
        # 这样做\\r

        \\r
        在笑脸上添加眉毛。如果搞乱了，记得使用“可读格式”。\\r
        \\r
        \!\[](\<<https://images.code.org/269725fa3d9d6857912fe4a20464a830-image-1491427249017.18.37>
        PM.png>)
      CSD U5 black white images pixelation 4_2018: |-
        # 这样做\\r

        \\r
        在笑脸上添加眉毛。如果搞乱了，记得使用“可读格式”。\\r
        \\r
        \!\[](\<<https://images.code.org/269725fa3d9d6857912fe4a20464a830-image-1491427249017.18.37>
        PM.png>)
      CSD U5 black white images pixelation 4_2019: |-
        # 这样做\\r

        \\r
        在笑脸上添加眉毛。如果搞乱了，记得使用“可读格式”。\\r
        \\r
        \!\[](\<<https://images.code.org/269725fa3d9d6857912fe4a20464a830-image-1491427249017.18.37>
        PM.png>)
      CSD U5 black white images pixelation 5: |-
        # 这样做\\r

        \\r
        现在该你了。在像素小工具里画任何你想画的东西。如果需要的话，请随意改动图片的宽高。
      CSD U5 black white images pixelation 5_2018: |-
        # 这样做\\r

        \\r
        现在该你了。在像素小工具里画任何你想画的东西。如果需要的话，请随意改动图片的宽高。
      CSD U5 black white images pixelation 5_2019: |-
        # 这样做\\r

        \\r
        现在该你了。在像素小工具里画任何你想画的东西。如果需要的话，请随意改动图片的宽高。
      CSD U5 black white images pixelation: |-
        # 这样做\\r

        \\r
        通过输入0和1来完成"X"形状。如果你想全部清除，可以随时点击"可读格式化"。
      CSD U5 black white images pixelation_2018: |-
        # 这样做\\r

        \\r
        通过输入0和1来完成"X"形状。如果你想全部清除，可以随时点击"可读格式化"。
      CSD U5 black white images pixelation_2019: |-
        # 这样做\\r

        \\r
        通过输入0和1来完成"X"形状。如果你想全部清除，可以随时点击"可读格式化"。
      CSD U6 Catch the Mouse prediction: |-
        # 抓住鼠标\\r

        \\r
        这是一个点击游戏，和上一课创建的类似。\\r
        \\r
        和你的伙伴一起看看代码，然后回答下面的问题：\\r
        \\r
        \*
        在LED灯开始闪烁前，你需要点击多少次鼠标？\\r
        \\r
        在下面的方框里写出答案，然后运行代码，看看发生了什么。
      CSD U6 Catch the Mouse prediction_2018: |-
        # 抓住鼠标\\r

        \\r
        这是一个点击游戏，和上一课创建的类似。\\r
        \\r
        和你的伙伴一起看看代码，然后回答下面的问题：\\r
        \\r
        \*
        在LED灯开始闪烁前，你需要点击多少次鼠标？\\r
        \\r
        在下面的方框里写出答案，然后运行代码，看看发生了什么。
      CSD U6 Catch the Mouse prediction_2019: |-
        # 抓住鼠标\\r

        \\r
        这是一个点击游戏，和上一课创建的类似。\\r
        \\r
        和你的伙伴一起看看代码，然后回答下面的问题：\\r
        \\r
        \*
        在LED灯开始闪烁前，你需要点击多少次鼠标？\\r
        \\r
        在下面的方框里写出答案，然后运行代码，看看发生了什么。
      CSD U6 Catch the Mouse: 嵌入式预测
      CSD U6 Catch the Mouse_2018: 嵌入式预测
      CSD U6 Catch the Mouse_2019: 嵌入式预测
      CSD U6 Driver pt 2: |-
        # 有限转向\\r

        \\r
        你可能注意到了，除非你的手移动得非常慢而且非常小心，不然控制这个汽车很难。这是因为`roll`（转动）依赖于加速度计，可能会返回一个很大的数。记住，`roll`（转动）的范围从-90到90。\\r
        \\r

        # 这样做\\r

        \\r
        找个办法`roll`（转动）一个更小的数，来控制汽车。
        你可以使用所有的数学运算符。\\r
        \\r
        _挑战_：你能让汽车不要到达屏幕的边缘吗？
      CSD U6 Driver pt 2_2018: |-
        # 有限转向\\r

        \\r
        你可能注意到了，除非你的手移动得非常慢而且非常小心，不然控制这个汽车很难。这是因为`roll`（转动）依赖于加速度计，可能会返回一个很大的数。记住，`roll`（转动）的范围从-90到90。\\r
        \\r

        # 这样做\\r

        \\r
        找个办法`roll`（转动）一个更小的数，来控制汽车。
        你可以使用所有的数学运算符。\\r
        \\r
        _挑战_：你能让汽车不要到达屏幕的边缘吗？
      CSD U6 Driver pt 2_2019: |-
        # 有限转向\\r

        \\r
        你可能注意到了，除非你的手移动得非常慢而且非常小心，不然控制这个汽车很难。这是因为`roll`（转动）依赖于加速度计，可能会返回一个很大的数。记住，`roll`（转动）的范围从-90到90。\\r
        \\r

        # 这样做\\r

        \\r
        找个办法`roll`（转动）一个更小的数，来控制汽车。
        你可以使用所有的数学运算符。\\r
        \\r
        _挑战_：你能让汽车不要到达屏幕的边缘吗？
      CSD U6 Driver pt1: |-
        # 方向盘\\r

        \\r
        这个游戏和你刚刚玩的守门员游戏很像，只有一点不同。用你的主板来作为汽车的方向盘（从这边移动到那边）。你需要避开红色的旗帜，并到达方格旗！\\r
        \\r
        \\r

        # 这样做\\r

        \\r

        -   当程序开始时，让汽车往屏幕的下方移动。\\r
        -   让汽车能往两侧运动。\\r
            \\r
            再想想以前做的程序，怎么才能更新这些值？
      CSD U6 Driver pt1_2018: |-
        # 方向盘\\r

        \\r
        这个游戏和你刚刚玩的守门员游戏很像，只有一点不同。用你的主板来作为汽车的方向盘（从这边移动到那边）。你需要避开红色的旗帜，并到达方格旗！\\r
        \\r
        \\r

        # 这样做\\r

        \\r

        -   当程序开始时，让汽车往屏幕的下方移动。\\r
        -   让汽车能往两侧运动。\\r
            \\r
            再想想以前做的程序，怎么才能更新这些值？
      CSD U6 Driver pt1_2019: |-
        # 方向盘\\r

        \\r
        这个游戏和你刚刚玩的守门员游戏很像，只有一点不同。用你的主板来作为汽车的方向盘（从这边移动到那边）。你需要避开红色的旗帜，并到达方格旗！\\r
        \\r
        \\r

        # 这样做\\r

        \\r

        -   当程序开始时，让汽车往屏幕的下方移动。\\r
        -   让汽车能往两侧运动。\\r
            \\r
            再想想以前做的程序，怎么才能更新这些值？
      CSD U6 LED all: "# 多功能灯\\\\r\n\n\\\\r\n这个应用能够让你选择三种类型的灯：开，闪烁和跳动。它也应该有个按钮让灯完全关掉。现在只有“开”按钮起作用，而“关”按钮完全没有。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\n-   添加代码让“闪烁”和“跳动”按钮起作用。\\\\r\n-   \\*\n    在设计模式，添加一个新的“关闭”按钮。\\\\r\n-   添加代码让“关闭”按钮起作用。"
      CSD U6 LED all_2018: "# 多功能灯\\\\r\n\n\\\\r\n这个应用能够让你选择三种类型的灯：开，闪烁和跳动。它也应该有个按钮让灯完全关掉。现在只有“开”按钮起作用，而“关”按钮完全没有。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\n-   添加代码让“闪烁”和“跳动”按钮起作用。\\\\r\n-   \\*\n    在设计模式，添加一个新的“关闭”按钮。\\\\r\n-   添加代码让“关闭”按钮起作用。"
      CSD U6 LED all_2019: "# 多功能灯\\\\r\n\n\\\\r\n这个应用能够让你选择三种类型的灯：开，闪烁和跳动。它也应该有个按钮让灯完全关掉。现在只有“开”按钮起作用，而“关”按钮完全没有。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\n-   添加代码让“闪烁”和“跳动”按钮起作用。\\\\r\n-   \\*\n    在设计模式，添加一个新的“关闭”按钮。\\\\r\n-   添加代码让“关闭”按钮起作用。"
      CSD U6 LED toggle: |-
        # 灯开关\\r

        \\r
        这里多了三个你还没用过的LED模块。其中一个会让按钮像灯的开关一样工作，LED关闭时会点亮它，而打开时会关闭它。\\r
        \\r

        # 这样做\\r

        -   试试`blink`（闪动），`toggle`（切换）和`pulse`（脉动）默默快来看看它们能做什么。\\r
        -   用其中一个模块让按钮像灯开关一样工作。\\r
        -   如果LED是关着的，这个按钮能让它打开。\\r
        -   如果LED是开着的，这个按钮能让它关闭。
      CSD U6 LED toggle_2018: |-
        # 灯开关\\r

        \\r
        这里多了三个你还没用过的LED模块。其中一个会让按钮像灯的开关一样工作，LED关闭时会点亮它，而打开时会关闭它。\\r
        \\r

        # 这样做\\r

        -   试试`blink`（闪动），`toggle`（切换）和`pulse`（脉动）默默快来看看它们能做什么。\\r
        -   用其中一个模块让按钮像灯开关一样工作。\\r
        -   如果LED是关着的，这个按钮能让它打开。\\r
        -   如果LED是开着的，这个按钮能让它关闭。
      CSD U6 LED toggle_2019: |-
        # 灯开关\\r

        \\r
        这里多了三个你还没用过的LED模块。其中一个会让按钮像灯的开关一样工作，LED关闭时会点亮它，而打开时会关闭它。\\r
        \\r

        # 这样做\\r

        -   试试`blink`（闪动），`toggle`（切换）和`pulse`（脉动）默默快来看看它们能做什么。\\r
        -   用其中一个模块让按钮像灯开关一样工作。\\r
        -   如果LED是关着的，这个按钮能让它打开。\\r
        -   如果LED是开着的，这个按钮能让它关闭。
      CSD U6 LEDbutton predict embed: |-
        # 使用事件\\r

        \\r
        这个程序用了事件。和伙伴看看代码，然后讨论一下你认为它能做什么。一旦有了答案后，点击“运行”来检查一下自己的答案。\\r
        \\r

        -   当程序运行时，灯会不会亮？为什么呢？
      CSD U6 LEDbutton predict embed_2018: |-
        # 使用事件\\r

        \\r
        这个程序用了事件。和伙伴看看代码，然后讨论一下你认为它能做什么。一旦有了答案后，点击“运行”来检查一下自己的答案。\\r
        \\r

        -   当程序运行时，灯会不会亮？为什么呢？
      CSD U6 LEDbutton predict embed_2019: |-
        # 使用事件\\r

        \\r
        这个程序用了事件。和伙伴看看代码，然后讨论一下你认为它能做什么。一旦有了答案后，点击“运行”来检查一下自己的答案。\\r
        \\r

        -   当程序运行时，灯会不会亮？为什么呢？
      CSD U6 LEDs color: |-
        # 增加一些颜色\\r

        \\r
        你可能已经注意到当你在上一级中使用`colorLeds[0].on()`时，LED点亮时是白色的。如果你不指定一个颜色，`on()`将点亮全部三个LED (红、绿、蓝)从而变成白色。你将在工具箱中看到一个叫`colorLeds[0].color()`的新命令，可以让你用类似"蓝"这样的字符串或者一个用`color()`命令的RGB数值指定颜色。\\r
        \\r

        # 这样做\\r

        \\r
        使用`.color()`命令把每个LED设置为不同颜色。
      CSD U6 LEDs color_2018: |-
        # 增加一些颜色\\r

        \\r
        你可能已经注意到当你在上一级中使用`colorLeds[0].on()`时，LED点亮时是白色的。如果你不指定一个颜色，`on()`将点亮全部三个LED (红、绿、蓝)从而变成白色。你将在工具箱中看到一个叫`colorLeds[0].color()`的新命令，可以让你用类似"蓝"这样的字符串或者一个用`color()`命令的RGB数值指定颜色。\\r
        \\r

        # 这样做\\r

        \\r
        使用`.color()`命令把每个LED设置为不同颜色。
      CSD U6 LEDs color_2019: |-
        # 增加一些颜色\\r

        \\r
        你可能已经注意到当你在上一级中使用`colorLeds[0].on()`时，LED点亮时是白色的。如果你不指定一个颜色，`on()`将点亮全部三个LED (红、绿、蓝)从而变成白色。你将在工具箱中看到一个叫`colorLeds[0].color()`的新命令，可以让你用类似"蓝"这样的字符串或者一个用`color()`命令的RGB数值指定颜色。\\r
        \\r

        # 这样做\\r

        \\r
        使用`.color()`命令把每个LED设置为不同颜色。
      CSD U6 Pedometer: |-
        # 计步器\\r

        \\r
        这个程序会用到`shake`（晃动）事件，它在主板被晃动时触发。它会在哦那个胡每次晃动主板时增加一步到计步器中。\\r
        \\r

        # 这样做\\r

        \\r

        -   改变事件，让它在每次主板晃动时触发。\\r
        -   在事件里增加代码，让`steps`（步数）每次在主板晃动时增加。
      CSD U6 Pedometer_2018: |-
        # 计步器\\r

        \\r
        这个程序会用到`shake`（晃动）事件，它在主板被晃动时触发。它会在哦那个胡每次晃动主板时增加一步到计步器中。\\r
        \\r

        # 这样做\\r

        \\r

        -   改变事件，让它在每次主板晃动时触发。\\r
        -   在事件里增加代码，让`steps`（步数）每次在主板晃动时增加。
      CSD U6 Pedometer_2019: |-
        # 计步器\\r

        \\r
        这个程序会用到`shake`（晃动）事件，它在主板被晃动时触发。它会在哦那个胡每次晃动主板时增加一步到计步器中。\\r
        \\r

        # 这样做\\r

        \\r

        -   改变事件，让它在每次主板晃动时触发。\\r
        -   在事件里增加代码，让`steps`（步数）每次在主板晃动时增加。
      CSD U6 add LED button: |-
        # 使用事件\\r

        \\r
        这个程序有两个按钮。“on”（开）按钮能工作，但是“off”（关）按钮还需要编写程序。\\r
        \\r

        # 这样做\\r

        -   添加代码让第二个按钮能关闭LED灯。
      CSD U6 add LED button_2018: |-
        # 使用事件\\r

        \\r
        这个程序有两个按钮。“on”（开）按钮能工作，但是“off”（关）按钮还需要编写程序。\\r
        \\r

        # 这样做\\r

        -   添加代码让第二个按钮能关闭LED灯。
      CSD U6 add LED button_2019: |-
        # 使用事件\\r

        \\r
        这个程序有两个按钮。“on”（开）按钮能工作，但是“off”（关）按钮还需要编写程序。\\r
        \\r

        # 这样做\\r

        -   添加代码让第二个按钮能关闭LED灯。
      CSD U6 airplane predict markdown: |-
        # 加速传感器\\r

        \\r
        看看以下代码。你觉得它会做什么？猜一猜，然后运行代码来查证！
      CSD U6 airplane predict markdown_2018: |-
        # 加速传感器\\r

        \\r
        看看以下代码。你觉得它会做什么？猜一猜，然后运行代码来查证！
      CSD U6 airplane predict markdown_2019: |-
        # 加速传感器\\r

        \\r
        看看以下代码。你觉得它会做什么？猜一猜，然后运行代码来查证！
      CSD U6 analog challenge: |-
        # 挑战\\r

        \\r
        _在挑战前，请先问问老师。_\\r
        \\r
        现在，你已经练习了从各种模拟传感器中获取输入，并改变它们的范围。你能从传感器数据中找到有趣的用途吗？显示传感器的原始值是很容易的，但更有意思的是用不同的方法来表达数据。\\r
        \\r
        考虑下面的方法来使用传感器数据：\\r
        \\r

        -   使用主板的输出\\r
        -   改变宽、高或UI元素的位置。\\r
        -   使用条件来基于传感器数据显示不同的图片。
      CSD U6 analog challenge_2018: |-
        # 挑战\\r

        \\r
        _在挑战前，请先问问老师。_\\r
        \\r
        现在，你已经练习了从各种模拟传感器中获取输入，并改变它们的范围。你能从传感器数据中找到有趣的用途吗？显示传感器的原始值是很容易的，但更有意思的是用不同的方法来表达数据。\\r
        \\r
        考虑下面的方法来使用传感器数据：\\r
        \\r

        -   使用主板的输出\\r
        -   改变宽、高或UI元素的位置。\\r
        -   使用条件来基于传感器数据显示不同的图片。
      CSD U6 analog challenge_2019: |-
        # 挑战\\r

        \\r
        _在挑战前，请先问问老师。_\\r
        \\r
        现在，你已经练习了从各种模拟传感器中获取输入，并改变它们的范围。你能从传感器数据中找到有趣的用途吗？显示传感器的原始值是很容易的，但更有意思的是用不同的方法来表达数据。\\r
        \\r
        考虑下面的方法来使用传感器数据：\\r
        \\r

        -   使用主板的输出\\r
        -   改变宽、高或UI元素的位置。\\r
        -   使用条件来基于传感器数据显示不同的图片。
      CSD U6 analog change: "# 变化的事件\\\\r\n\n\\\\r\n数据又一直很好，如果你又不介意，代码能一直运行。但有时候这不是你的问题的最有效的解决方案。传感器的\"变化\"事件，会在传感器的值从上次读数后发生改变时触发。这让你的程序在不需要的时候，就不用接着运行了。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n用提供的事件处理函数，在当温度传感器读到改变时，让蜂鸣器名叫并更新\"temp\\_value\"（临时值）。将你的拇指放到温度传感器上让它改变温度，然后看看你的程序是如何响应的。"
      CSD U6 analog change_2018: "# 变化的事件\\\\r\n\n\\\\r\n数据又一直很好，如果你又不介意，代码能一直运行。但有时候这不是你的问题的最有效的解决方案。传感器的\"变化\"事件，会在传感器的值从上次读数后发生改变时触发。这让你的程序在不需要的时候，就不用接着运行了。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n用提供的事件处理函数，在当温度传感器读到改变时，让蜂鸣器名叫并更新\"temp\\_value\"（临时值）。将你的拇指放到温度传感器上让它改变温度，然后看看你的程序是如何响应的。"
      CSD U6 analog change_2019: "# 变化的事件\\\\r\n\n\\\\r\n数据又一直很好，如果你又不介意，代码能一直运行。但有时候这不是你的问题的最有效的解决方案。传感器的\"变化\"事件，会在传感器的值从上次读数后发生改变时触发。这让你的程序在不需要的时候，就不用接着运行了。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n用提供的事件处理函数，在当温度传感器读到改变时，让蜂鸣器名叫并更新\"temp\\_value\"（临时值）。将你的拇指放到温度传感器上让它改变温度，然后看看你的程序是如何响应的。"
      CSD U6 analog data: |-
        # 数据事件\\r

        \\r
        每个模拟传感器在有新数据时，都会发出一个特殊的事件叫做“数据”。通过这个事件，我们能写出持续更新的程序。\\r
        \\r

        # 这样做\\r

        \\r
        这是课程里，你写的第一个程序，让我们看看是否能用“数据”事件来持续更新声音。\\r
        \\r

        -   创建一个事件处理函数来响应光线传感器的“数据”事件。\\r
        -   将已有的代码移动到你的事件处理函数中。
      CSD U6 analog data_2018: |-
        # 数据事件\\r

        \\r
        每个模拟传感器在有新数据时，都会发出一个特殊的事件叫做“数据”。通过这个事件，我们能写出持续更新的程序。\\r
        \\r

        # 这样做\\r

        \\r
        这是课程里，你写的第一个程序，让我们看看是否能用“数据”事件来持续更新声音。\\r
        \\r

        -   创建一个事件处理函数来响应光线传感器的“数据”事件。\\r
        -   将已有的代码移动到你的事件处理函数中。
      CSD U6 analog data_2019: |-
        # 数据事件\\r

        \\r
        每个模拟传感器在有新数据时，都会发出一个特殊的事件叫做“数据”。通过这个事件，我们能写出持续更新的程序。\\r
        \\r

        # 这样做\\r

        \\r
        这是课程里，你写的第一个程序，让我们看看是否能用“数据”事件来持续更新声音。\\r
        \\r

        -   创建一个事件处理函数来响应光线传感器的“数据”事件。\\r
        -   将已有的代码移动到你的事件处理函数中。
      CSD U6 analog light: |-
        # 光线传感器的更新\\r

        \\r
        这个应用和上一个很像，但我们加了一个ID为”update\_button"（更新按钮）的按钮。写一个程序在点击更新按钮时，显示光线传感器的值。\\r
        \\r

        # 这样做\\r

        \\r
        用事件处理函数，通过`lightSensor.value`模块来更新"light\_value"的文本。
      CSD U6 analog light_2018: |-
        # 光线传感器的更新\\r

        \\r
        这个应用和上一个很像，但我们加了一个ID为”update\_button"（更新按钮）的按钮。写一个程序在点击更新按钮时，显示光线传感器的值。\\r
        \\r

        # 这样做\\r

        \\r
        用事件处理函数，通过`lightSensor.value`模块来更新"light\_value"的文本。
      CSD U6 analog light_2019: |-
        # 光线传感器的更新\\r

        \\r
        这个应用和上一个很像，但我们加了一个ID为”update\_button"（更新按钮）的按钮。写一个程序在点击更新按钮时，显示光线传感器的值。\\r
        \\r

        # 这样做\\r

        \\r
        用事件处理函数，通过`lightSensor.value`模块来更新"light\_value"的文本。
      CSD U6 analog rbg 1: |-
        # 用颜色显示传感器读数\\r

        \\r
        在早先的预测关卡中，你已经见过如何用`setScale()`（设置范围）方法来将传感器读数的整个范围（0-1023）转换到RGB值得范围（0-255）。让我们用这个办法来做一个应用，来用一个颜色来表达三个模拟传感器的值。\\r
        \\r

        # 这样做\\r

        \\r
        要开始，我们只需要将传感器范围设置正确 - 不用担心实际的背景颜色。\\r
        \\r

        -   使用`sensor.setScale()`模块来设置每个灯光和声音传感器的范围为一个RGB颜色通道的范围。\\r
        -   \*
            为这三个颜色的每一个创建一个变量，并分派给不同的传感器。\\r
        -   用`console.log()`来测试你的变量是否在正确的范围里。\\r
            \\r
            _提示：顺序很重要。你需要在读取值之前设置好传感器的范围。_\\r
            _提示：记住温度传感器可以读取摄氏和华氏温度 - 它可能已经给了你RGB范围内的值了。_
      CSD U6 analog rbg 1_2018: |-
        # 用颜色显示传感器读数\\r

        \\r
        在早先的预测关卡中，你已经见过如何用`setScale()`（设置范围）方法来将传感器读数的整个范围（0-1023）转换到RGB值得范围（0-255）。让我们用这个办法来做一个应用，来用一个颜色来表达三个模拟传感器的值。\\r
        \\r

        # 这样做\\r

        \\r
        要开始，我们只需要将传感器范围设置正确 - 不用担心实际的背景颜色。\\r
        \\r

        -   使用`sensor.setScale()`模块来设置每个灯光和声音传感器的范围为一个RGB颜色通道的范围。\\r
        -   \*
            为这三个颜色的每一个创建一个变量，并分派给不同的传感器。\\r
        -   用`console.log()`来测试你的变量是否在正确的范围里。\\r
            \\r
            _提示：顺序很重要。你需要在读取值之前设置好传感器的范围。_\\r
            _提示：记住温度传感器可以读取摄氏和华氏温度 - 它可能已经给了你RGB范围内的值了。_
      CSD U6 analog rbg 1_2019: |-
        # 用颜色显示传感器读数\\r

        \\r
        在早先的预测关卡中，你已经见过如何用`setScale()`（设置范围）方法来将传感器读数的整个范围（0-1023）转换到RGB值得范围（0-255）。让我们用这个办法来做一个应用，来用一个颜色来表达三个模拟传感器的值。\\r
        \\r

        # 这样做\\r

        \\r
        要开始，我们只需要将传感器范围设置正确 - 不用担心实际的背景颜色。\\r
        \\r

        -   使用`sensor.setScale()`模块来设置每个灯光和声音传感器的范围为一个RGB颜色通道的范围。\\r
        -   \*
            为这三个颜色的每一个创建一个变量，并分派给不同的传感器。\\r
        -   用`console.log()`来测试你的变量是否在正确的范围里。\\r
            \\r
            _提示：顺序很重要。你需要在读取值之前设置好传感器的范围。_\\r
            _提示：记住温度传感器可以读取摄氏和华氏温度 - 它可能已经给了你RGB范围内的值了。_
      CSD U6 analog rbg 2: |-
        # 将颜色放到屏幕上\\r

        \\r
        现在，你的传感器数据已经在RGB范围内了。你能开始设置屏幕颜色了。\\r
        \\r

        # 这样做\\r

        \\r

        -   添加一个`setProperty()`模块，并且设置它来改变屏幕的背景颜色。\\r
        -   添加一个`rgb()`模块到`setProperty()`的最后一个参数上。\\r
        -   将这三个颜色变量作为你创建的`rgb()`模块的输入。
      CSD U6 analog rbg 2_2018: |-
        # 将颜色放到屏幕上\\r

        \\r
        现在，你的传感器数据已经在RGB范围内了。你能开始设置屏幕颜色了。\\r
        \\r

        # 这样做\\r

        \\r

        -   添加一个`setProperty()`模块，并且设置它来改变屏幕的背景颜色。\\r
        -   添加一个`rgb()`模块到`setProperty()`的最后一个参数上。\\r
        -   将这三个颜色变量作为你创建的`rgb()`模块的输入。
      CSD U6 analog rbg 2_2019: |-
        # 将颜色放到屏幕上\\r

        \\r
        现在，你的传感器数据已经在RGB范围内了。你能开始设置屏幕颜色了。\\r
        \\r

        # 这样做\\r

        \\r

        -   添加一个`setProperty()`模块，并且设置它来改变屏幕的背景颜色。\\r
        -   添加一个`rgb()`模块到`setProperty()`的最后一个参数上。\\r
        -   将这三个颜色变量作为你创建的`rgb()`模块的输入。
      CSD U6 analog rgb 3: |-
        # 连续更新\\r

        \\r
        如果这个传感器到颜色的应用只能在启动应用时设置一次颜色，那它不会非常有用。你可以用传感器的“数据”事件来让你的应用能够在每次值改变时，持续的更新背景颜色。\\r
        \\r
        将你的`setProperty()`模块移动到其中一个传感器的事件处理函数中，从而让应用能够持续更新。
      CSD U6 analog rgb 3_2018: |-
        # 连续更新\\r

        \\r
        如果这个传感器到颜色的应用只能在启动应用时设置一次颜色，那它不会非常有用。你可以用传感器的“数据”事件来让你的应用能够在每次值改变时，持续的更新背景颜色。\\r
        \\r
        将你的`setProperty()`模块移动到其中一个传感器的事件处理函数中，从而让应用能够持续更新。
      CSD U6 analog rgb 3_2019: |-
        # 连续更新\\r

        \\r
        如果这个传感器到颜色的应用只能在启动应用时设置一次颜色，那它不会非常有用。你可以用传感器的“数据”事件来让你的应用能够在每次值改变时，持续的更新背景颜色。\\r
        \\r
        将你的`setProperty()`模块移动到其中一个传感器的事件处理函数中，从而让应用能够持续更新。
      CSD U6 analog sound: "# 读取声音传感器\\\\r\n\n\\\\r\n`soundSensor.value`模块允许你获得当前声音传感器的读数。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n在这个应用中，我们已经添加了一个ID为\"sound*value\"的文本标签。\n用`soundSensor.value` 模块来显示声音传感器当前的值。\\\\r\n\\\\r\n\\_提示，你可以把`soundSensor.value`模块直接拖拽到能够直接输入值的地方。*\\\\r\n\\\\r\n![](https://images.code.org/3bd9ac3f869e42f48aaf190944fe1c22-image-1511293198110.png)"
      CSD U6 analog sound_2018: "# 读取声音传感器\\\\r\n\n\\\\r\n`soundSensor.value`模块允许你获得当前声音传感器的读数。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n在这个应用中，我们已经添加了一个ID为\"sound*value\"的文本标签。\n用`soundSensor.value` 模块来显示声音传感器当前的值。\\\\r\n\\\\r\n\\_提示，你可以把`soundSensor.value`模块直接拖拽到能够直接输入值的地方。*\\\\r\n\\\\r\n![](https://images.code.org/3bd9ac3f869e42f48aaf190944fe1c22-image-1511293198110.png)"
      CSD U6 analog sound_2019: "# 读取声音传感器\\\\r\n\n\\\\r\n`soundSensor.value`模块允许你获得当前声音传感器的读数。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n在这个应用中，我们已经添加了一个ID为\"sound*value\"的文本标签。\n用`soundSensor.value` 模块来显示声音传感器当前的值。\\\\r\n\\\\r\n\\_提示，你可以把`soundSensor.value`模块直接拖拽到能够直接输入值的地方。*\\\\r\n\\\\r\n![](https://images.code.org/3bd9ac3f869e42f48aaf190944fe1c22-image-1511293198110.png)"
      CSD U6 analog temp: |-
        # 制作一个温度应用程序\\r

        \\r
        光线和声音传感器只能输出一个原始的`value`属性值，而温度传感器更聪明一些。它有两个属性`tempSensor.F`和`tempSensor.C`，而不是一个`tempSensor.value`。这样，它能将原始输入转换为摄氏或者华氏温度。\\r
        \\r

        # 这样做\\r

        \\r
        做一个简单的温度应用来从温度传感器中读出值。
        你的应用可以显示华氏或摄氏温度（或者都显示！）\\r
        \\r
        \*
        用设计模式，创建一个按钮来更新，并加上一个标签来显示温度\\r

        -   添加一个事件处理函数来响应点击更新按钮的事件\\r
        -   向事件处理函数中添加代码来读取温度传感器，并显示在屏幕上
      CSD U6 analog temp_2018: |-
        # 制作一个温度应用程序\\r

        \\r
        光线和声音传感器只能输出一个原始的`value`属性值，而温度传感器更聪明一些。它有两个属性`tempSensor.F`和`tempSensor.C`，而不是一个`tempSensor.value`。这样，它能将原始输入转换为摄氏或者华氏温度。\\r
        \\r

        # 这样做\\r

        \\r
        做一个简单的温度应用来从温度传感器中读出值。
        你的应用可以显示华氏或摄氏温度（或者都显示！）\\r
        \\r
        \*
        用设计模式，创建一个按钮来更新，并加上一个标签来显示温度\\r

        -   添加一个事件处理函数来响应点击更新按钮的事件\\r
        -   向事件处理函数中添加代码来读取温度传感器，并显示在屏幕上
      CSD U6 analog temp_2019: |-
        # 制作一个温度应用程序\\r

        \\r
        光线和声音传感器只能输出一个原始的`value`属性值，而温度传感器更聪明一些。它有两个属性`tempSensor.F`和`tempSensor.C`，而不是一个`tempSensor.value`。这样，它能将原始输入转换为摄氏或者华氏温度。\\r
        \\r

        # 这样做\\r

        \\r
        做一个简单的温度应用来从温度传感器中读出值。
        你的应用可以显示华氏或摄氏温度（或者都显示！）\\r
        \\r
        \*
        用设计模式，创建一个按钮来更新，并加上一个标签来显示温度\\r

        -   添加一个事件处理函数来响应点击更新按钮的事件\\r
        -   向事件处理函数中添加代码来读取温度传感器，并显示在屏幕上
      CSD U6 analog threshold: |-
        # 改变阈值\\r

        \\r
        默认情况下，传感器的”变化“事件在每次传感器的值改变时都会触发，甚至只改变一点的时候。光线和声音传感器一直都在变化，因此你可能希望”change“（变化）事件触发的次数少一点。`threshold`（阈值）属性允许你设置，当传感器改变多少时，才应该触发一个”change“（变化）事件。那么，设置`soundSensor.threshold
        = 100`会让值增加或减少100的时候才会触发变化事件。\\r
        \\r

        # 这样做\\r

        \\r
        当声音发生任何变化时，这个程序会改变屏幕的背景颜色。但我们希望变化值的大一点（比如响亮一点的噪声）的时候，这个值才发生变化。用`soundSensor.threshold`（声音传感器.阈值）模块来修复它。\\r
        \\r

        -   在事件处理函数前，添加一个`soundSensor.threshold`模块\\r
        -   测试一下阈值的值会如何影响"change"（改变）事件\\r
        -   选择一个阈值，让屏幕颜色只有在大一点的噪声时才发生变化。\\r
            \\r
            _提示：你的阈值应该依赖于房间里的噪音有多大，并且有多大的变化范围。一个阈值可能在一个安静的房间里有作用，但到了另一个吵闹的课堂上就不行了。_
      CSD U6 analog threshold_2018: |-
        # 改变阈值\\r

        \\r
        默认情况下，传感器的”变化“事件在每次传感器的值改变时都会触发，甚至只改变一点的时候。光线和声音传感器一直都在变化，因此你可能希望”change“（变化）事件触发的次数少一点。`threshold`（阈值）属性允许你设置，当传感器改变多少时，才应该触发一个”change“（变化）事件。那么，设置`soundSensor.threshold
        = 100`会让值增加或减少100的时候才会触发变化事件。\\r
        \\r

        # 这样做\\r

        \\r
        当声音发生任何变化时，这个程序会改变屏幕的背景颜色。但我们希望变化值的大一点（比如响亮一点的噪声）的时候，这个值才发生变化。用`soundSensor.threshold`（声音传感器.阈值）模块来修复它。\\r
        \\r

        -   在事件处理函数前，添加一个`soundSensor.threshold`模块\\r
        -   测试一下阈值的值会如何影响"change"（改变）事件\\r
        -   选择一个阈值，让屏幕颜色只有在大一点的噪声时才发生变化。\\r
            \\r
            _提示：你的阈值应该依赖于房间里的噪音有多大，并且有多大的变化范围。一个阈值可能在一个安静的房间里有作用，但到了另一个吵闹的课堂上就不行了。_
      CSD U6 analog threshold_2019: |-
        # 改变阈值\\r

        \\r
        默认情况下，传感器的”变化“事件在每次传感器的值改变时都会触发，甚至只改变一点的时候。光线和声音传感器一直都在变化，因此你可能希望”change“（变化）事件触发的次数少一点。`threshold`（阈值）属性允许你设置，当传感器改变多少时，才应该触发一个”change“（变化）事件。那么，设置`soundSensor.threshold
        = 100`会让值增加或减少100的时候才会触发变化事件。\\r
        \\r

        # 这样做\\r

        \\r
        当声音发生任何变化时，这个程序会改变屏幕的背景颜色。但我们希望变化值的大一点（比如响亮一点的噪声）的时候，这个值才发生变化。用`soundSensor.threshold`（声音传感器.阈值）模块来修复它。\\r
        \\r

        -   在事件处理函数前，添加一个`soundSensor.threshold`模块\\r
        -   测试一下阈值的值会如何影响"change"（改变）事件\\r
        -   选择一个阈值，让屏幕颜色只有在大一点的噪声时才发生变化。\\r
            \\r
            _提示：你的阈值应该依赖于房间里的噪音有多大，并且有多大的变化范围。一个阈值可能在一个安静的房间里有作用，但到了另一个吵闹的课堂上就不行了。_
      CSD U6 array piano: "# 钢琴恐慌\\\\r\n\n\\\\r\n现在，你已经用了数组中的元素了。现在，你需要改变数组中的内容。\\\\r\n\\\\r\n我们的好朋友钢琴回来了，除了它现在从两个数组来弹奏音符：`notes`（音符），会按住普通音符（C, D, E, F, G, A, B），并且`sharpNotes`会按下升音音符（C#, D#, F#, G#, A#）。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n`sharpNotes`数组现在只有一个元素。\\\\r\n\\\\r\n\n-   修复数组，使得钢琴上的升音键能够正常弹奏音符。\\\\r\n    \\\\r\n    _提示：在文本模式修改数组会非常容易。你随时可以通过点击代码工作区右上角的按钮来在文本和模块模式间切换。_"
      CSD U6 array piano_2018: "# 钢琴恐慌\\\\r\n\n\\\\r\n现在，你已经用了数组中的元素了。现在，你需要改变数组中的内容。\\\\r\n\\\\r\n我们的好朋友钢琴回来了，除了它现在从两个数组来弹奏音符：`notes`（音符），会按住普通音符（C, D, E, F, G, A, B），并且`sharpNotes`会按下升音音符（C#, D#, F#, G#, A#）。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n`sharpNotes`数组现在只有一个元素。\\\\r\n\\\\r\n\n-   修复数组，使得钢琴上的升音键能够正常弹奏音符。\\\\r\n    \\\\r\n    _提示：在文本模式修改数组会非常容易。你随时可以通过点击代码工作区右上角的按钮来在文本和模块模式间切换。_"
      CSD U6 array piano_2019: "# 钢琴恐慌\\\\r\n\n\\\\r\n现在，你已经用了数组中的元素了。现在，你需要改变数组中的内容。\\\\r\n\\\\r\n我们的好朋友钢琴回来了，除了它现在从两个数组来弹奏音符：`notes`（音符），会按住普通音符（C, D, E, F, G, A, B），并且`sharpNotes`会按下升音音符（C#, D#, F#, G#, A#）。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n`sharpNotes`数组现在只有一个元素。\\\\r\n\\\\r\n\n-   修复数组，使得钢琴上的升音键能够正常弹奏音符。\\\\r\n    \\\\r\n    _提示：在文本模式修改数组会非常容易。你随时可以通过点击代码工作区右上角的按钮来在文本和模块模式间切换。_"
      CSD U6 balloon clicker predict: |-
        # 让气球飞起来\\r

        \\r
        在这个游戏中，你必须点击正确的按钮让气球飞向天空。\\r
        \\r
        和你的伙伴看看代码，然后回答这些问题：\\r
        \\r

        -   什么时候存储在变量`correct`（正确）的值会改变？\\r
        -   \*
            为什么程序需要这一行： `var choice = randomNumber(1,3);`？\\r
            \\r
            一旦你回答了这些问题，运行代码看看会发生什么。
      CSD U6 board getters: |-
        # 使用电路游戏板\\r

        \\r
        你也可以用电路游戏板的取值器和设置器。在这一关中，你需要接入你的主板。\\r
        \\r
        读一下代码，并预测一下程序会做什么，然后点击”运行“来测试你的预测是否正确。
      CSD U6 board getters_2018: |-
        # 使用电路游戏板\\r

        \\r
        你也可以用电路游戏板的取值器和设置器。在这一关中，你需要接入你的主板。\\r
        \\r
        读一下代码，并预测一下程序会做什么，然后点击”运行“来测试你的预测是否正确。
      CSD U6 board getters_2019: |-
        # 使用电路游戏板\\r

        \\r
        你也可以用电路游戏板的取值器和设置器。在这一关中，你需要接入你的主板。\\r
        \\r
        读一下代码，并预测一下程序会做什么，然后点击”运行“来测试你的预测是否正确。
      CSD U6 challenge motorcycle: |-
        # 挑战\\r

        \\r
        用这个程序来对取值和赋值属性进行更多的试验。你可以尝试以下办法：\\r
        \\r

        -   用切换开关来改变摩托车的移动方向，向上并向下移动。\\r
        -   用有颜色名称的下拉框来改变摩托车的颜色。\\r
        -   当摩托车到达屏幕的最顶端或最低端时，打开蜂鸣器或LED灯。
      CSD U6 challenge motorcycle_2018: |-
        # 挑战\\r

        \\r
        用这个程序来对取值和赋值属性进行更多的试验。你可以尝试以下办法：\\r
        \\r

        -   用切换开关来改变摩托车的移动方向，向上并向下移动。\\r
        -   用有颜色名称的下拉框来改变摩托车的颜色。\\r
        -   当摩托车到达屏幕的最顶端或最低端时，打开蜂鸣器或LED灯。
      CSD U6 challenge motorcycle_2019: |-
        # 挑战\\r

        \\r
        用这个程序来对取值和赋值属性进行更多的试验。你可以尝试以下办法：\\r
        \\r

        -   用切换开关来改变摩托车的移动方向，向上并向下移动。\\r
        -   用有颜色名称的下拉框来改变摩托车的颜色。\\r
        -   当摩托车到达屏幕的最顶端或最低端时，打开蜂鸣器或LED灯。
      CSD U6 change: |-
        # 当改变\\r

        \\r
        在上一关，程序只会在你点击了左按钮时从滑动条获得间隔值。有时，你会希望当用户选择了新的值以后，尽快改变LED的间隔值。为了做到这一点，你需要使用“change”（改变）事件。\\r
        \\r

        # 这样做\\r

        \\r

        -   看看程序里的第一个事件模块，并找到它在哪里放了“change”。\\r
        -   在事件模块中，获得从滑动条里获得间隔值，并将它用到LED闪烁的新速度上。\\r
        -   运行你的程序，移动滑动条来看看LED的速度是否自动变化了。
      CSD U6 change_2018: |-
        # 当改变\\r

        \\r
        在上一关，程序只会在你点击了左按钮时从滑动条获得间隔值。有时，你会希望当用户选择了新的值以后，尽快改变LED的间隔值。为了做到这一点，你需要使用“change”（改变）事件。\\r
        \\r

        # 这样做\\r

        \\r

        -   看看程序里的第一个事件模块，并找到它在哪里放了“change”。\\r
        -   在事件模块中，获得从滑动条里获得间隔值，并将它用到LED闪烁的新速度上。\\r
        -   运行你的程序，移动滑动条来看看LED的速度是否自动变化了。
      CSD U6 change_2019: |-
        # 当改变\\r

        \\r
        在上一关，程序只会在你点击了左按钮时从滑动条获得间隔值。有时，你会希望当用户选择了新的值以后，尽快改变LED的间隔值。为了做到这一点，你需要使用“change”（改变）事件。\\r
        \\r

        # 这样做\\r

        \\r

        -   看看程序里的第一个事件模块，并找到它在哪里放了“change”。\\r
        -   在事件模块中，获得从滑动条里获得间隔值，并将它用到LED闪烁的新速度上。\\r
        -   运行你的程序，移动滑动条来看看LED的速度是否自动变化了。
      CSD U6 checkbox: 预测关卡
      CSD U6 circuit createButton scratch: |-
        <div style="float:
        right" markdown="1">\r
        \r
        ![expandable](https://images.code.org/14e51a17975b1eb03a852621f9cd8cac-image-1516048913406.png)\r
        \r
        </div>\r
        \r
        #
        制作自己的按钮i\r
        \r
        和`createLed()`（创建LED灯）能创建像内置的`led`的LED对象一样，你能用`createButton()`（创建按钮）来创建像内置的`buttonL`（左按钮）和`buttonR`（右按钮）一样的对象。\r
        \r
        # 这样做\r
        \r
        * 找两条电线。\r
        * 将一条电线连接到一个空闲的数据针上。\r
        * 将另一条先连接到地线针上。\r
        * 更新线2，让它引用你选择的针。\r
        * 运行已有的代码。\r
        * 在程序运行时，将两条没连接的线碰到一起，来"按下"按钮。\r
        \r
        _提示：只要导电，很多不同的物质都可以做成按钮电路。试着用铝箔，银器，或者回形针来做成按钮。_
      CSD U6 circuit createButton scratch_2018: |-
        <div style="float:
        right" markdown="1">\r
        \r
        ![expandable](https://images.code.org/14e51a17975b1eb03a852621f9cd8cac-image-1516048913406.png)\r
        \r
        </div>\r
        \r
        #
        制作自己的按钮i\r
        \r
        和`createLed()`（创建LED灯）能创建像内置的`led`的LED对象一样，你能用`createButton()`（创建按钮）来创建像内置的`buttonL`（左按钮）和`buttonR`（右按钮）一样的对象。\r
        \r
        # 这样做\r
        \r
        * 找两条电线。\r
        * 将一条电线连接到一个空闲的数据针上。\r
        * 将另一条先连接到地线针上。\r
        * 更新线2，让它引用你选择的针。\r
        * 运行已有的代码。\r
        * 在程序运行时，将两条没连接的线碰到一起，来"按下"按钮。\r
        \r
        _提示：只要导电，很多不同的物质都可以做成按钮电路。试着用铝箔，银器，或者回形针来做成按钮。_
      CSD U6 circuit createButton: |-
        <div style="float: right"
        markdown="1">\r
        \r
        ![expandable](https://cdo-curriculum.s3.amazonaws.com/media/uploads/button_alligator.png)\r
        \r
        </div>\r
        \r
        #
        制作自己的按钮\r
        \r
        和LED灯一样，按钮是非常简单的电路，很容易加到你的主板上。同样，按钮也应该从一个有需要的针上连接到一个地线针上。但是和LED灯不一样的是，按钮电路应该在中间被断开。当连上电路时，就会触发一个按钮按下的事件。\r
        \r
        # 这样做\r
        \r
        * 找出两条电线。\r
        *
        将一条线连接到一个空闲的有序号的针脚上。\r
        * 将另一条线连接到地线针脚上。\r
        * 更新第二条线，让它能够引用选择的针脚。\r
        *
        运行提供的代码。\r
        * 程序运行后，将两条电线没接的那头碰在一起来"按下"按钮。\r
        \r
        _提示：有很多种物质都能用来做按钮电路，只要它们导电就行。试着用铝箔，银器或者回形针来做按钮。_
      CSD U6 circuit createButton_2018: |-
        <div style="float: right"
        markdown="1">\r
        \r
        ![expandable](https://cdo-curriculum.s3.amazonaws.com/media/uploads/button_alligator.png)\r
        \r
        </div>\r
        \r
        #
        制作自己的按钮\r
        \r
        和LED灯一样，按钮是非常简单的电路，很容易加到你的主板上。同样，按钮也应该从一个有需要的针上连接到一个地线针上。但是和LED灯不一样的是，按钮电路应该在中间被断开。当连上电路时，就会触发一个按钮按下的事件。\r
        \r
        # 这样做\r
        \r
        * 找出两条电线。\r
        *
        将一条线连接到一个空闲的有序号的针脚上。\r
        * 将另一条线连接到地线针脚上。\r
        * 更新第二条线，让它能够引用选择的针脚。\r
        *
        运行提供的代码。\r
        * 程序运行后，将两条电线没接的那头碰在一起来"按下"按钮。\r
        \r
        _提示：有很多种物质都能用来做按钮电路，只要它们导电就行。试着用铝箔，银器或者回形针来做按钮。_
      CSD U6 circuit createButton_2019: |-
        <div style="float: right"
        markdown="1">\r
        \r
        ![expandable](https://cdo-curriculum.s3.amazonaws.com/media/uploads/button_alligator.png)\r
        \r
        </div>\r
        \r
        #
        制作自己的按钮\r
        \r
        和LED灯一样，按钮是非常简单的电路，很容易加到你的主板上。同样，按钮也应该从一个有需要的针上连接到一个地线针上。但是和LED灯不一样的是，按钮电路应该在中间被断开。当连上电路时，就会触发一个按钮按下的事件。\r
        \r
        # 这样做\r
        \r
        * 找出两条电线。\r
        *
        将一条线连接到一个空闲的有序号的针脚上。\r
        * 将另一条线连接到地线针脚上。\r
        * 更新第二条线，让它能够引用选择的针脚。\r
        *
        运行提供的代码。\r
        * 程序运行后，将两条电线没接的那头碰在一起来"按下"按钮。\r
        \r
        _提示：有很多种物质都能用来做按钮电路，只要它们导电就行。试着用铝箔，银器或者回形针来做按钮。_
      CSD U6 circuit createLed: |-
        # 创建主板对象\\r

        \\r
        你可能注意到了，我们用了些不同工具箱抽屉里的新模块。**电路**抽屉里有所有的电路游戏板内置的对象，但当你开始给自己的电路布线时，工具包就不能知道所有的事情了。\\r
        \\r
        新的**制作者**抽屉包含了通用目的的一些命令，而不是为电路游戏板自定义的命令。除了你已经见过的`pinMode()`（针模式)和`digitalWrite()`（数字写入）外，还包括了能再电路板创建新对象的命令，它们能被像**电路**抽屉里的其它模块一样编程。
        例如，`var myLed = createLed()`命令，会创建一个LED对象，它的行为就像你用过的`led`模块一样。\\r
        \\r

        # 这样做\\r

        \\r
        现在，你要创建一个新的主板对象。我们没有模块可以做这件事，你需要在文本模式下来创建。你仍然可以从熟悉的**电路**抽屉里拖拽出模块，你只需要改变对象的名字。\\r
        \\r

        -   将你的LED像以前一样连好线路（连接到针2）\\r
        -   确保你在文本模式下，而不是模块模式下。\\r
        -   拖拽出一个`led.blink()`模块到注释`// Blink myLed`下。\\r
        -   将文本`led`改为`myLed`。\\r
        -   测试你的代码。
      CSD U6 circuit createLed_2018: |-
        # 创建主板对象\\r

        \\r
        你可能注意到了，我们用了些不同工具箱抽屉里的新模块。**电路**抽屉里有所有的电路游戏板内置的对象，但当你开始给自己的电路布线时，工具包就不能知道所有的事情了。\\r
        \\r
        新的**制作者**抽屉包含了通用目的的一些命令，而不是为电路游戏板自定义的命令。除了你已经见过的`pinMode()`（针模式)和`digitalWrite()`（数字写入）外，还包括了能再电路板创建新对象的命令，它们能被像**电路**抽屉里的其它模块一样编程。
        例如，`var myLed = createLed()`命令，会创建一个LED对象，它的行为就像你用过的`led`模块一样。\\r
        \\r

        # 这样做\\r

        \\r
        现在，你要创建一个新的主板对象。我们没有模块可以做这件事，你需要在文本模式下来创建。你仍然可以从熟悉的**电路**抽屉里拖拽出模块，你只需要改变对象的名字。\\r
        \\r

        -   将你的LED像以前一样连好线路（连接到针2）\\r
        -   确保你在文本模式下，而不是模块模式下。\\r
        -   拖拽出一个`led.blink()`模块到注释`// Blink myLed`下。\\r
        -   将文本`led`改为`myLed`。\\r
        -   测试你的代码。
      CSD U6 circuit createLed_2019: |-
        # 创建主板对象\\r

        \\r
        你可能注意到了，我们用了些不同工具箱抽屉里的新模块。**电路**抽屉里有所有的电路游戏板内置的对象，但当你开始给自己的电路布线时，工具包就不能知道所有的事情了。\\r
        \\r
        新的**制作者**抽屉包含了通用目的的一些命令，而不是为电路游戏板自定义的命令。除了你已经见过的`pinMode()`（针模式)和`digitalWrite()`（数字写入）外，还包括了能再电路板创建新对象的命令，它们能被像**电路**抽屉里的其它模块一样编程。
        例如，`var myLed = createLed()`命令，会创建一个LED对象，它的行为就像你用过的`led`模块一样。\\r
        \\r

        # 这样做\\r

        \\r
        现在，你要创建一个新的主板对象。我们没有模块可以做这件事，你需要在文本模式下来创建。你仍然可以从熟悉的**电路**抽屉里拖拽出模块，你只需要改变对象的名字。\\r
        \\r

        -   将你的LED像以前一样连好线路（连接到针2）\\r
        -   确保你在文本模式下，而不是模块模式下。\\r
        -   拖拽出一个`led.blink()`模块到注释`// Blink myLed`下。\\r
        -   将文本`led`改为`myLed`。\\r
        -   测试你的代码。
      CSD U6 circuit mix: |-
        # 混合和匹配电路\\r

        \\r
        在主板的边缘使用8 个有编号的针脚，只要放得进去，你可以通过让每个线路使用单独的编码针脚并让他们都共用一个接地脚来合并尽可能多的按钮和LED。\\r
        \\r

        # 这样做\\r

        \\r
        把现在连接到主板上的电路都断开。\\r
        \\r

        -   创建一个连接到针脚0 的按钮电路。\\r
        -   创建一个连接到针脚2 的LED 电路。\\r
        -   用`createButton()`来为按钮电路创建一个新的按钮对象。\\r
        -   用 `createLed()`来为LED电路创建一个新的LED 对象。\\r
        -   添加事件处理器使得它能够在你按下按钮的时候点亮新的LED，并在松开按钮时关掉它。\\r
            \\r
            \_提示：当多个电路共用一个接地脚时，把大点的导电体（如裸线）连接到针脚，然后再把所有的电路都连接到那个大的对象上是非常有帮助的。
      CSD U6 circuit multi led: |-
        # 创建主板对象\\r

        \\r
        使用`createLed()`模块能让你连接和控制主板能够容纳的那么多的LED灯。每个LED灯都需要连接到不同的编号的针脚上，但它们可以连接到同一个地线针脚上。\\r
        \\r

        # 这样做\\r

        \\r
        让当前的LED灯连接到针脚2上，但增加另一个LED灯随意连接到某个有序号的针脚上。对你的新LED灯：\\r
        \\r

        -   添加一个`var myLed = createLed()`模块。\\r
        -   将变量标签`myLed`替换为一个唯一的标签。\\r
        -   添加一个`led.blink()`命令。\\r
        -   将文本`led`替换为新的LED变量。\\r
        -   测试你的代码。\\r
            \\r
            _挑战：试着增加第三个LED灯，让三个灯都用不同的间隔时间闪烁。_
      CSD U6 circuit multi led_2018: |-
        # 创建主板对象\\r

        \\r
        使用`createLed()`模块能让你连接和控制主板能够容纳的那么多的LED灯。每个LED灯都需要连接到不同的编号的针脚上，但它们可以连接到同一个地线针脚上。\\r
        \\r

        # 这样做\\r

        \\r
        让当前的LED灯连接到针脚2上，但增加另一个LED灯随意连接到某个有序号的针脚上。对你的新LED灯：\\r
        \\r

        -   添加一个`var myLed = createLed()`模块。\\r
        -   将变量标签`myLed`替换为一个唯一的标签。\\r
        -   添加一个`led.blink()`命令。\\r
        -   将文本`led`替换为新的LED变量。\\r
        -   测试你的代码。\\r
            \\r
            _挑战：试着增加第三个LED灯，让三个灯都用不同的间隔时间闪烁。_
      CSD U6 circuit multi led_2019: |-
        # 创建主板对象\\r

        \\r
        使用`createLed()`模块能让你连接和控制主板能够容纳的那么多的LED灯。每个LED灯都需要连接到不同的编号的针脚上，但它们可以连接到同一个地线针脚上。\\r
        \\r

        # 这样做\\r

        \\r
        让当前的LED灯连接到针脚2上，但增加另一个LED灯随意连接到某个有序号的针脚上。对你的新LED灯：\\r
        \\r

        -   添加一个`var myLed = createLed()`模块。\\r
        -   将变量标签`myLed`替换为一个唯一的标签。\\r
        -   添加一个`led.blink()`命令。\\r
        -   将文本`led`替换为新的LED变量。\\r
        -   测试你的代码。\\r
            \\r
            _挑战：试着增加第三个LED灯，让三个灯都用不同的间隔时间闪烁。_
      CSD U6 circuit pinMode: |-
        # 连接电路\\r

        \\r
        你可以使用任何编号的垫片来将额外的电路添加到主板上。让我们使用针脚2 来添加另一个 LED. \\r
        \\r

        # 这样做\\r

        \\r

        -   用一根电线把针脚2连接到 led 的正极 (+) 侧。\\r
        -   用另一根电线把LED的负 (-) 端连接到接地 (地线) 针脚 (具体是哪个针脚没关系)\\r
        -   运行此程序来测试你的电路。如果正常工作的话, 你的LED灯应该会亮。\\r
            \\r
            _调试提示: LED只有在电流从正向负值流动时才会亮。如果你的LED灯不亮，请确保它的方向是正确的。_
      CSD U6 circuit pinMode_2018: |-
        # 连接电路\\r

        \\r
        你可以使用任何编号的垫片来将额外的电路添加到主板上。让我们使用针脚2 来添加另一个 LED. \\r
        \\r

        # 这样做\\r

        \\r

        -   用一根电线把针脚2连接到 led 的正极 (+) 侧。\\r
        -   用另一根电线把LED的负 (-) 端连接到接地 (地线) 针脚 (具体是哪个针脚没关系)\\r
        -   运行此程序来测试你的电路。如果正常工作的话, 你的LED灯应该会亮。\\r
            \\r
            _调试提示: LED只有在电流从正向负值流动时才会亮。如果你的LED灯不亮，请确保它的方向是正确的。_
      CSD U6 circuit pinMode_2019: |-
        # 连接电路\\r

        \\r
        你可以使用任何编号的垫片来将额外的电路添加到主板上。让我们使用针脚2 来添加另一个 LED. \\r
        \\r

        # 这样做\\r

        \\r

        -   用一根电线把针脚2连接到 led 的正极 (+) 侧。\\r
        -   用另一根电线把LED的负 (-) 端连接到接地 (地线) 针脚 (具体是哪个针脚没关系)\\r
        -   运行此程序来测试你的电路。如果正常工作的话, 你的LED灯应该会亮。\\r
            \\r
            _调试提示: LED只有在电流从正向负值流动时才会亮。如果你的LED灯不亮，请确保它的方向是正确的。_
      CSD U6 circuit predict multi: |-
        # 做一个预测\\r

        \\r
        所有到目前为止你已经使用的设备实际上是连接到各编号接口的电路！在您的主板上寻找 **#13**, 看看是哪个电路连接到针脚13的, 然后通读此代码并预测程序运行后会发生什么。
      CSD U6 circuit predict multi_2018: |-
        # 做一个预测\\r

        \\r
        所有到目前为止你已经使用的设备实际上是连接到各编号接口的电路！在您的主板上寻找 **#13**, 看看是哪个电路连接到针脚13的, 然后通读此代码并预测程序运行后会发生什么。
      CSD U6 circuit predict multi_2019: |-
        # 做一个预测\\r

        \\r
        所有到目前为止你已经使用的设备实际上是连接到各编号接口的电路！在您的主板上寻找 **#13**, 看看是哪个电路连接到针脚13的, 然后通读此代码并预测程序运行后会发生什么。
      CSD U6 circuit project program: "# 为原型编程\\\\r\n\n\\\\r\n用你的计划想到，来为你的原型编程来模拟基本的功能。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n你的物理原型现在应该包括了一个连接到针脚0的按钮线路，和连接到针脚2的位置指示LED灯。\n这已经足够用来建立工作的原型了。你只需要写程序来让按钮能够开关LED灯。\\\\r\n\\\\r\n\n-   用相应的`create`（创建）命令来创建你的LED和按钮。\\\\r\n-   为事件处理函数编程来响应按钮的按下和弹起事件，来打开和关闭LED灯。"
      CSD U6 circuit project template: "# 原型制作电路项目模板"
      CSD U6 circuit project template_2018: "# 原型制作电路项目模板"
      CSD U6 circuit project template_2019: "# 原型制作电路项目模板"
      CSD U6 circuit smart bike blinker buttons: |-
        # 智能自行车- 方向灯控件\\r

        \\r
        转弯信号被连接上后，你需要编程一些按钮来控制它们。你可能想要把按钮放在自行车上别的地方来更好地控制你的转弯信号，但我们现在只用嵌入式的左和右按钮。\\r
        \\r

        # 这样做\\r

        \\r

        -   添加事件处理器让左转信号在左按钮被压下去的时候亮起。\\r
        -   添加事件处理器让右转信号在右按钮被压下去的时候亮起。\\r
        -   测试你的代码！\\r
            \\r
            _提示：你需要在文本模式中让闪光灯工作，因为没有给这个加到主板上的元素内置模块。_
      CSD U6 circuit smart bike blinker buttons_2018: |-
        # 智能自行车- 方向灯控件\\r

        \\r
        转弯信号被连接上后，你需要编程一些按钮来控制它们。你可能想要把按钮放在自行车上别的地方来更好地控制你的转弯信号，但我们现在只用嵌入式的左和右按钮。\\r
        \\r

        # 这样做\\r

        \\r

        -   添加事件处理器让左转信号在左按钮被压下去的时候亮起。\\r
        -   添加事件处理器让右转信号在右按钮被压下去的时候亮起。\\r
        -   测试你的代码！\\r
            \\r
            _提示：你需要在文本模式中让闪光灯工作，因为没有给这个加到主板上的元素内置模块。_
      CSD U6 circuit smart bike blinker buttons_2019: |-
        # 智能自行车- 方向灯控件\\r

        \\r
        转弯信号被连接上后，你需要编程一些按钮来控制它们。你可能想要把按钮放在自行车上别的地方来更好地控制你的转弯信号，但我们现在只用嵌入式的左和右按钮。\\r
        \\r

        # 这样做\\r

        \\r

        -   添加事件处理器让左转信号在左按钮被压下去的时候亮起。\\r
        -   添加事件处理器让右转信号在右按钮被压下去的时候亮起。\\r
        -   测试你的代码！\\r
            \\r
            _提示：你需要在文本模式中让闪光灯工作，因为没有给这个加到主板上的元素内置模块。_
      CSD U6 circuit smart bike blinkers: "# 智能自行车 - 方向灯\\\\r\n\n\\\\r\n使用你的规划指南，把两个可以作为方向灯的LED连接到一起。为了确保转向灯撞到了正确的把手上，确保它们的电线向相反的方向延伸。\\\\r\n\\\\r\n\n# 这样做\\\\r\n\n\\\\r\n使用弹簧夹，电线，或其它导电材料把两个LED 连接到主板上，作为每个转向方向灯。\\\\r\n\\\\r\n\n-   把每个LED 连接到主板上不同编码的针脚上。\\\\r\n-   使用 `createLed()`模块来为每个方向灯来创建一个LED 对象。\\\\r\n    \\\\r\n    _提示：在选择要使用的针脚时，考虑方向灯如何安装可以使得布线更容易一些。_ "
      CSD U6 circuit smart bike blinkers_2018: "# 智能自行车 - 方向灯\\\\r\n\n\\\\r\n使用你的规划指南，把两个可以作为方向灯的LED连接到一起。为了确保转向灯撞到了正确的把手上，确保它们的电线向相反的方向延伸。\\\\r\n\\\\r\n\n# 这样做\\\\r\n\n\\\\r\n使用弹簧夹，电线，或其它导电材料把两个LED 连接到主板上，作为每个转向方向灯。\\\\r\n\\\\r\n\n-   把每个LED 连接到主板上不同编码的针脚上。\\\\r\n-   使用 `createLed()`模块来为每个方向灯来创建一个LED 对象。\\\\r\n    \\\\r\n    _提示：在选择要使用的针脚时，考虑方向灯如何安装可以使得布线更容易一些。_ "
      CSD U6 circuit smart bike blinkers_2019: "# 智能自行车 - 方向灯\\\\r\n\n\\\\r\n使用你的规划指南，把两个可以作为方向灯的LED连接到一起。为了确保转向灯撞到了正确的把手上，确保它们的电线向相反的方向延伸。\\\\r\n\\\\r\n\n# 这样做\\\\r\n\n\\\\r\n使用弹簧夹，电线，或其它导电材料把两个LED 连接到主板上，作为每个转向方向灯。\\\\r\n\\\\r\n\n-   把每个LED 连接到主板上不同编码的针脚上。\\\\r\n-   使用 `createLed()`模块来为每个方向灯来创建一个LED 对象。\\\\r\n    \\\\r\n    _提示：在选择要使用的针脚时，考虑方向灯如何安装可以使得布线更容易一些。_ "
      CSD U6 circuit smart bike buzzer: |-
        # 智能自行车-蜂鸣器\\r

        \\r
        现在我们知道如何添加更多的按钮，你可以添加一个按钮来控制智能自行车的喇叭。\\r
        \\r

        # 这样做\\r

        \\r
        使用已连接到主板的按钮, 找到一个放置喇叭按钮的好位置。然后：\\r
        \\r

        -   为喇叭按钮创建一个按钮对象\\r
        -   添加一个事件处理器，在按下按钮时发出嗡嗡声\\r
            \\r
            _提示：你创建的按钮对象不会在 "onBoardEvent ()" （当主板上发生事件时）下拉列表中, 因此需要键入已选的名称。一定不要使用引号！_
      CSD U6 circuit smart bike buzzer_2018: |-
        # 智能自行车-蜂鸣器\\r

        \\r
        现在我们知道如何添加更多的按钮，你可以添加一个按钮来控制智能自行车的喇叭。\\r
        \\r

        # 这样做\\r

        \\r
        使用已连接到主板的按钮, 找到一个放置喇叭按钮的好位置。然后：\\r
        \\r

        -   为喇叭按钮创建一个按钮对象\\r
        -   添加一个事件处理器，在按下按钮时发出嗡嗡声\\r
            \\r
            _提示：你创建的按钮对象不会在 "onBoardEvent ()" （当主板上发生事件时）下拉列表中, 因此需要键入已选的名称。一定不要使用引号！_
      CSD U6 circuit smart bike buzzer_2019: |-
        # 智能自行车-蜂鸣器\\r

        \\r
        现在我们知道如何添加更多的按钮，你可以添加一个按钮来控制智能自行车的喇叭。\\r
        \\r

        # 这样做\\r

        \\r
        使用已连接到主板的按钮, 找到一个放置喇叭按钮的好位置。然后：\\r
        \\r

        -   为喇叭按钮创建一个按钮对象\\r
        -   添加一个事件处理器，在按下按钮时发出嗡嗡声\\r
            \\r
            _提示：你创建的按钮对象不会在 "onBoardEvent ()" （当主板上发生事件时）下拉列表中, 因此需要键入已选的名称。一定不要使用引号！_
      CSD U6 circuit smart bike final: "# 智能自行车-最终润色\\\\r\n\n\\\\r\n此时, 你的智能自行车应该具备其所有基本功能。现在是做最后润色的时候了。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n这时候，你可能要分组来完成任务, 让小组的一些成员专注于原型的物理方面, 其他人则致力于改进代码。由于这是一个原型, 不要想着一切都完美, 但要确保原型足够体现你的设计，可以进行测试并收集回馈。"
      CSD U6 circuit smart bike final_2018: "# 智能自行车-最终润色\\\\r\n\n\\\\r\n此时, 你的智能自行车应该具备其所有基本功能。现在是做最后润色的时候了。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n这时候，你可能要分组来完成任务, 让小组的一些成员专注于原型的物理方面, 其他人则致力于改进代码。由于这是一个原型, 不要想着一切都完美, 但要确保原型足够体现你的设计，可以进行测试并收集回馈。"
      CSD U6 circuit smart bike final_2019: "# 智能自行车-最终润色\\\\r\n\n\\\\r\n此时, 你的智能自行车应该具备其所有基本功能。现在是做最后润色的时候了。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n这时候，你可能要分组来完成任务, 让小组的一些成员专注于原型的物理方面, 其他人则致力于改进代码。由于这是一个原型, 不要想着一切都完美, 但要确保原型足够体现你的设计，可以进行测试并收集回馈。"
      CSD U6 circuit smart bike light: |-
        # 智能自行车-车灯\\r

        \\r
        我们需要弄清楚的智能自行车计划的最后一部分是自动车头灯。\\r
        \\r

        # 这样做\\r

        \\r
        首先要决定你的车头灯要用什么。你可以添加另一个 LED 电路, 或者你可以找到一种方式来安装主板使之允许使用有颜色的LED灯作为车灯。
        一旦你想出车灯的物理布局, 添加代码到程序中，让它依照亮度的明暗来打开和关掉车灯。\\r
        \\r
        _提示: 如果使用的是内置的彩色LED灯，你可能需要保护光传感器，确保它相应的是周围光线的水平, 而不是指示灯的光线。_
      CSD U6 circuit smart bike light_2018: |-
        # 智能自行车-车灯\\r

        \\r
        我们需要弄清楚的智能自行车计划的最后一部分是自动车头灯。\\r
        \\r

        # 这样做\\r

        \\r
        首先要决定你的车头灯要用什么。你可以添加另一个 LED 电路, 或者你可以找到一种方式来安装主板使之允许使用有颜色的LED灯作为车灯。
        一旦你想出车灯的物理布局, 添加代码到程序中，让它依照亮度的明暗来打开和关掉车灯。\\r
        \\r
        _提示: 如果使用的是内置的彩色LED灯，你可能需要保护光传感器，确保它相应的是周围光线的水平, 而不是指示灯的光线。_
      CSD U6 circuit smart bike light_2019: |-
        # 智能自行车-车灯\\r

        \\r
        我们需要弄清楚的智能自行车计划的最后一部分是自动车头灯。\\r
        \\r

        # 这样做\\r

        \\r
        首先要决定你的车头灯要用什么。你可以添加另一个 LED 电路, 或者你可以找到一种方式来安装主板使之允许使用有颜色的LED灯作为车灯。
        一旦你想出车灯的物理布局, 添加代码到程序中，让它依照亮度的明暗来打开和关掉车灯。\\r
        \\r
        _提示: 如果使用的是内置的彩色LED灯，你可能需要保护光传感器，确保它相应的是周围光线的水平, 而不是指示灯的光线。_
      CSD U6 colorLED on: |-
        <img src="//curriculum.code.org/images/circuitplayground/colorLedonoff.gif"
        style="float: right; margin: 10px;">\\r
        \\r

        # colorLeds（彩色LED灯）\\r

        \\r
        彩色LED灯可以使用与红色LED灯相同的基本命令, 例如`on()`（开） 和`off()`（关）。该程序应该会如图所示打开和关闭底部LED，但是只有一个LED灯在工作。\\r
        \\r

        # 这样做\\r

        \\r
        \*
        读取并运行该代码, 查看程序是如何打开和关闭左下角 的LED。\\r

        -   添加更多代码使两个底部LED都能开关。
      CSD U6 colorLED on_2018: |-
        <img src="//curriculum.code.org/images/circuitplayground/colorLedonoff.gif"
        style="float: right; margin: 10px;">\\r
        \\r

        # colorLeds（彩色LED灯）\\r

        \\r
        彩色LED灯可以使用与红色LED灯相同的基本命令, 例如`on()`（开） 和`off()`（关）。该程序应该会如图所示打开和关闭底部LED，但是只有一个LED灯在工作。\\r
        \\r

        # 这样做\\r

        \\r
        \*
        读取并运行该代码, 查看程序是如何打开和关闭左下角 的LED。\\r

        -   添加更多代码使两个底部LED都能开关。
      CSD U6 colorLED on_2019: |-
        <img src="//curriculum.code.org/images/circuitplayground/colorLedonoff.gif"
        style="float: right; margin: 10px;">\\r
        \\r

        # colorLeds（彩色LED灯）\\r

        \\r
        彩色LED灯可以使用与红色LED灯相同的基本命令, 例如`on()`（开） 和`off()`（关）。该程序应该会如图所示打开和关闭底部LED，但是只有一个LED灯在工作。\\r
        \\r

        # 这样做\\r

        \\r
        \*
        读取并运行该代码, 查看程序是如何打开和关闭左下角 的LED。\\r

        -   添加更多代码使两个底部LED都能开关。
      CSD U6 colorLeds debug_2018: |-
        <img src="https://images.code.org/723f036c40ef2770426d5d437e69fcde-image-1527268321449.png" style="width:250px; float:right">

        # 调试: 彩色LED灯

        你能调试索引值，来让彩虹像图片上显示的一样吗？
      CSD U6 colorLeds debug_2019: |-
        <img src="https://images.code.org/723f036c40ef2770426d5d437e69fcde-image-1527268321449.png" style="width:250px; float:right">

        # 调试: 彩色LED灯

        你能调试索引值，来让彩虹像图片上显示的一样吗？
      CSD U6 colorLeds intensity: |-
        # 改变亮度\\r

        \\r
        `intensity()`（强度）指令可以让你设置LED的亮度（或者叫做_强度_）为1到100的值。这个程序让你能够为你的彩虹灯选择三个不同级别的亮度，但中间级别还不能工作。\\r
        \\r

        # 这样做\\r

        \\r
        \*
        阅读程序查看"Bright"（亮）和"Dim"（暗）按钮是如何工作的。\\r
        \*
        添加代码，使得"Medium"（中等）按钮可以调整彩虹的亮度到中等（在”明亮“和”昏暗“之间）。 ([显示在哪里](#triggercallout=code_triggered))
      CSD U6 colorLeds intensity_2018: |-
        # 改变亮度\\r

        \\r
        `intensity()`（强度）指令可以让你设置LED的亮度（或者叫做_强度_）为1到100的值。这个程序让你能够为你的彩虹灯选择三个不同级别的亮度，但中间级别还不能工作。\\r
        \\r

        # 这样做\\r

        \\r
        \*
        阅读程序查看"Bright"（亮）和"Dim"（暗）按钮是如何工作的。\\r
        \*
        添加代码，使得"Medium"（中等）按钮可以调整彩虹的亮度到中等（在”明亮“和”昏暗“之间）。 ([显示在哪里](#triggercallout=code_triggered))
      CSD U6 colorLeds intensity_2019: |-
        # 改变亮度\\r

        \\r
        `intensity()`（强度）指令可以让你设置LED的亮度（或者叫做_强度_）为1到100的值。这个程序让你能够为你的彩虹灯选择三个不同级别的亮度，但中间级别还不能工作。\\r
        \\r

        # 这样做\\r

        \\r
        \*
        阅读程序查看"Bright"（亮）和"Dim"（暗）按钮是如何工作的。\\r
        \*
        添加代码，使得"Medium"（中等）按钮可以调整彩虹的亮度到中等（在”明亮“和”昏暗“之间）。 ([显示在哪里](#triggercallout=code_triggered))
      CSD U6 colorLeds light pattern: |-
        # 光图案\\r

        \\r
        这个应用已经有一个光图案程序，它可以通过点击按钮来激活。请注意, 我们将此图案放入一个函数中，以使代码更简洁和清晰。\\r
        \\r

        # 这样做\\r

        \\r
        创建你自己的光图案函数 - 可以是您最喜欢的假日、学院、运动队的颜色，或者尝试用光来创建一个图像。\\r
        \\r
        在你创建完新的函数后，添加了一个按钮和事件处理程序, 以便您可以在两个光图案之间进行切换。
      CSD U6 colorLeds light pattern_2018: |-
        # 光图案\\r

        \\r
        这个应用已经有一个光图案程序，它可以通过点击按钮来激活。请注意, 我们将此图案放入一个函数中，以使代码更简洁和清晰。\\r
        \\r

        # 这样做\\r

        \\r
        创建你自己的光图案函数 - 可以是您最喜欢的假日、学院、运动队的颜色，或者尝试用光来创建一个图像。\\r
        \\r
        在你创建完新的函数后，添加了一个按钮和事件处理程序, 以便您可以在两个光图案之间进行切换。
      CSD U6 colorLeds light pattern_2019: |-
        # 光图案\\r

        \\r
        这个应用已经有一个光图案程序，它可以通过点击按钮来激活。请注意, 我们将此图案放入一个函数中，以使代码更简洁和清晰。\\r
        \\r

        # 这样做\\r

        \\r
        创建你自己的光图案函数 - 可以是您最喜欢的假日、学院、运动队的颜色，或者尝试用光来创建一个图像。\\r
        \\r
        在你创建完新的函数后，添加了一个按钮和事件处理程序, 以便您可以在两个光图案之间进行切换。
      CSD U6 colorLeds predict embed: |-
        # `colorLeds`（彩色LED灯）\\r

        \\r
        该程序使用 colorLED数组可以让你在电路游戏板里控制彩色的LED灯。\\r
        \\r
        你觉得该代码会做什么？请在以下方框内写下你的预测，然后运行代码看会发生什么。
      CSD U6 colorLeds predict embed_2018: |-
        # `colorLeds`（彩色LED灯）\\r

        \\r
        该程序使用 colorLED数组可以让你在电路游戏板里控制彩色的LED灯。\\r
        \\r
        你觉得该代码会做什么？请在以下方框内写下你的预测，然后运行代码看会发生什么。
      CSD U6 colorLeds predict embed_2019: |-
        # `colorLeds`（彩色LED灯）\\r

        \\r
        该程序使用 colorLED数组可以让你在电路游戏板里控制彩色的LED灯。\\r
        \\r
        你觉得该代码会做什么？请在以下方框内写下你的预测，然后运行代码看会发生什么。
      CSD U6 create LED app 2: |-
        # 制作你的应用程序 - 代码\\r

        \\r
        接下来，你需要添加代码让应用程序开始工作。\\r
        \\r

        # 这样做\\r

        \\r
        \*
        和你的伙伴讨论一下你的应用程序需要什么样的代码。是否需要...\\r
        \*
        事件？\\r

        -   变量？\\r
        -   设置器？\\r
        -   随机数？\\r
        -   在代码模式，添加能让你的应用程序工作的代码。
      CSD U6 create LED app 2_2018: |-
        # 制作你的应用程序 - 代码\\r

        \\r
        接下来，你需要添加代码让应用程序开始工作。\\r
        \\r

        # 这样做\\r

        \\r
        \*
        和你的伙伴讨论一下你的应用程序需要什么样的代码。是否需要...\\r
        \*
        事件？\\r

        -   变量？\\r
        -   设置器？\\r
        -   随机数？\\r
        -   在代码模式，添加能让你的应用程序工作的代码。
      CSD U6 create LED app 2_2019: |-
        # 制作你的应用程序 - 代码\\r

        \\r
        接下来，你需要添加代码让应用程序开始工作。\\r
        \\r

        # 这样做\\r

        \\r
        \*
        和你的伙伴讨论一下你的应用程序需要什么样的代码。是否需要...\\r
        \*
        事件？\\r

        -   变量？\\r
        -   设置器？\\r
        -   随机数？\\r
        -   在代码模式，添加能让你的应用程序工作的代码。
      CSD U6 create LED app: |-
        # 制作你的应用程序 - 屏幕\\r

        \\r
        现在，和你的伙伴一起，让你的应用程序使用LED。并讨论一下你想要做什么样的应用程序。\\r
        \\r

        # 这样做\\r

        \\r

        -   和你的伙伴讨论一下你的应用里需要什么样的屏幕元素？是否需要...\\r
        -   按钮？\\r
        -   图片？\\r
        -   文本？\\r
        -   在设计模式中，添加元素，并让每个元素都有一个有意义的ID（标识）。
      CSD U6 create LED app_2018: |-
        # 制作你的应用程序 - 屏幕\\r

        \\r
        现在，和你的伙伴一起，让你的应用程序使用LED。并讨论一下你想要做什么样的应用程序。\\r
        \\r

        # 这样做\\r

        \\r

        -   和你的伙伴讨论一下你的应用里需要什么样的屏幕元素？是否需要...\\r
        -   按钮？\\r
        -   图片？\\r
        -   文本？\\r
        -   在设计模式中，添加元素，并让每个元素都有一个有意义的ID（标识）。
      CSD U6 create LED app_2019: |-
        # 制作你的应用程序 - 屏幕\\r

        \\r
        现在，和你的伙伴一起，让你的应用程序使用LED。并讨论一下你想要做什么样的应用程序。\\r
        \\r

        # 这样做\\r

        \\r

        -   和你的伙伴讨论一下你的应用里需要什么样的屏幕元素？是否需要...\\r
        -   按钮？\\r
        -   图片？\\r
        -   文本？\\r
        -   在设计模式中，添加元素，并让每个元素都有一个有意义的ID（标识）。
      CSD U6 design motorcycle: "# 添加你自己的元素\\\\r\n\n\\\\r\n是时候添加一些你自己的元素了。摩托车现在能上下移动了，但你能控制它的速度吗？\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n\n-   在设计模式添加一个滑动条。\\\\r\n-   确保你在设计模式设置了它的最小和最大值。\\\\r\n-   创建一个事件，让它会在滑动条值发生变化时触发。\\\\r\n-   添加代码，在事件触发时获取滑动条的值，并存到叫做`speed`（速度）的变量里。"
      CSD U6 design motorcycle_2018: "# 添加你自己的元素\\\\r\n\n\\\\r\n是时候添加一些你自己的元素了。摩托车现在能上下移动了，但你能控制它的速度吗？\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n\n-   在设计模式添加一个滑动条。\\\\r\n-   确保你在设计模式设置了它的最小和最大值。\\\\r\n-   创建一个事件，让它会在滑动条值发生变化时触发。\\\\r\n-   添加代码，在事件触发时获取滑动条的值，并存到叫做`speed`（速度）的变量里。"
      CSD U6 design motorcycle_2019: "# 添加你自己的元素\\\\r\n\n\\\\r\n是时候添加一些你自己的元素了。摩托车现在能上下移动了，但你能控制它的速度吗？\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n\n-   在设计模式添加一个滑动条。\\\\r\n-   确保你在设计模式设置了它的最小和最大值。\\\\r\n-   创建一个事件，让它会在滑动条值发生变化时触发。\\\\r\n-   添加代码，在事件触发时获取滑动条的值，并存到叫做`speed`（速度）的变量里。"
      CSD U6 direction theremin: |-
        # 加速的音乐\\r

        \\r
        我们要再次使用主板来制作音乐，这次使用加速度计。
        \\r
        \\r
        因为`buzzer.frequency`（蜂鸣器.频率）用数字作为参数，我们可以使用加速度计的强度(pitch)和转动(roll)属性返回的数字来改变频率。\\r
        \\r

        # 这样做\\r

        -   做一个变量来存储加速度计的强度(pitch)和转动(roll)，并相应的命名它。\\r
        -   将变量用到蜂鸣器上，改变它的某个值。你可以加上或减去它，乘以另一个数字, 等等。\\r
        -   运行程序, 并再次修改它, 看看你这次得到的是什么样的声音。
      CSD U6 directional LEDs roll: |-
        # 转动\\r

        \\r
        程序应该能根据主板倾斜的方向，在屏幕上显示"左"或"右"了。\\r
        \\r

        # 这样做\\r

        -   用加速传感器的"roll"（转动）属性来检测现在主板是往左还是右倾斜。\\r
        -   用条件语句根据主板的方向，来改变"direction"（方向）元素的文本为"左"或"右"。
      CSD U6 directional LEDs roll_2018: |-
        # 转动\\r

        \\r
        程序应该能根据主板倾斜的方向，在屏幕上显示"左"或"右"了。\\r
        \\r

        # 这样做\\r

        -   用加速传感器的"roll"（转动）属性来检测现在主板是往左还是右倾斜。\\r
        -   用条件语句根据主板的方向，来改变"direction"（方向）元素的文本为"左"或"右"。
      CSD U6 directional LEDs roll_2019: |-
        # 转动\\r

        \\r
        程序应该能根据主板倾斜的方向，在屏幕上显示"左"或"右"了。\\r
        \\r

        # 这样做\\r

        -   用加速传感器的"roll"（转动）属性来检测现在主板是往左还是右倾斜。\\r
        -   用条件语句根据主板的方向，来改变"direction"（方向）元素的文本为"左"或"右"。
      CSD U6 directional leds pitch: |-
        # 强度\\r

        \\r
        当你往前倾斜主板时，程序会点亮最顶上的LED灯（0和9）。如果向后倾斜主板，最下面的LED灯（4和5）就会亮。\\r
        \\r

        # 这样做\\r

        \\r

        -   请使用主板的强度使得LED灯4 和5，在你把主板向后倾斜时亮起来。\\r
        -   运行你的代码并进行多次测试.
      CSD U6 directional leds pitch_2018: |-
        # 强度\\r

        \\r
        当你往前倾斜主板时，程序会点亮最顶上的LED灯（0和9）。如果向后倾斜主板，最下面的LED灯（4和5）就会亮。\\r
        \\r

        # 这样做\\r

        \\r

        -   请使用主板的强度使得LED灯4 和5，在你把主板向后倾斜时亮起来。\\r
        -   运行你的代码并进行多次测试.
      CSD U6 directional leds pitch_2019: |-
        # 强度\\r

        \\r
        当你往前倾斜主板时，程序会点亮最顶上的LED灯（0和9）。如果向后倾斜主板，最下面的LED灯（4和5）就会亮。\\r
        \\r

        # 这样做\\r

        \\r

        -   请使用主板的强度使得LED灯4 和5，在你把主板向后倾斜时亮起来。\\r
        -   运行你的代码并进行多次测试.
      CSD U6 emoji race demo: |-
        # 表情比赛！\\r

        \\r
        这是一个竞速游戏，你会在课程结束时创建它。和另一位同学一起玩一下吧。左边的同学要点击电路游戏板的左按钮，越快越好。同样，在右边的同学要点击右按钮。赢了的人会在屏幕底下得到表情符号。\\r
        \\r

        # 这样做\\r

        \\r
        和旁边的同学一起列一下下面的信息。\\r
        \\r

        -   这个程序中使用了主板上的什么组件？\\r
        -   这个程序会响应什么事件？\\r
        -   \*
            你可能要创建什么函数来让这个程序工作起来？
      CSD U6 emoji race demo_2018: |-
        # 表情比赛！\\r

        \\r
        这是一个竞速游戏，你会在课程结束时创建它。和另一位同学一起玩一下吧。左边的同学要点击电路游戏板的左按钮，越快越好。同样，在右边的同学要点击右按钮。赢了的人会在屏幕底下得到表情符号。\\r
        \\r

        # 这样做\\r

        \\r
        和旁边的同学一起列一下下面的信息。\\r
        \\r

        -   这个程序中使用了主板上的什么组件？\\r
        -   这个程序会响应什么事件？\\r
        -   \*
            你可能要创建什么函数来让这个程序工作起来？
      CSD U6 emoji race demo_2019: |-
        # 表情比赛！\\r

        \\r
        这是一个竞速游戏，你会在课程结束时创建它。和另一位同学一起玩一下吧。左边的同学要点击电路游戏板的左按钮，越快越好。同样，在右边的同学要点击右按钮。赢了的人会在屏幕底下得到表情符号。\\r
        \\r

        # 这样做\\r

        \\r
        和旁边的同学一起列一下下面的信息。\\r
        \\r

        -   这个程序中使用了主板上的什么组件？\\r
        -   这个程序会响应什么事件？\\r
        -   \*
            你可能要创建什么函数来让这个程序工作起来？
      CSD U6 emotion machine 1: |-
        # 改变图片\\r

        \\r
        要让你的表情机器动起来，第一件事是在点击按钮时，显示正确的图片。如果你看了开始的代码，你会发现我们已经增加了`setProperty("face", "image", "icon://fa-smile-o")`代码，当你点击”高兴“时，它会显示一张笑脸。\\r
        \\r

        # 这样做\\r

        \\r

        <div
        markdown="1" style="float:right; margin: 20px;">\r
        \r
        ![expandable](https://curriculum.code.org/media/uploads/select_image.gif)\r
        \r
        </div>\r
        \r
        为"sad_button"（悲伤按钮）创建一个事件处理函数，并让它改变为一个悲伤的表情符号。你需要将设置id（标识）为"face"的图片的”image"（图片）属性。\r
        \r
        _提示：当你点击`setProperty()`（设置属性）模块的最后一个下拉框中的"Choose..."（选择）时，会打开你的媒体库。你可以从我们的图标库里选择，或者上传一张自己的图片。_
      CSD U6 emotion machine 1_2018: |-
        # 改变图片\\r

        \\r
        要让你的表情机器动起来，第一件事是在点击按钮时，显示正确的图片。如果你看了开始的代码，你会发现我们已经增加了`setProperty("face", "image", "icon://fa-smile-o")`代码，当你点击”高兴“时，它会显示一张笑脸。\\r
        \\r

        # 这样做\\r

        \\r

        <div
        markdown="1" style="float:right; margin: 20px;">\r
        \r
        ![expandable](https://curriculum.code.org/media/uploads/select_image.gif)\r
        \r
        </div>\r
        \r
        为"sad_button"（悲伤按钮）创建一个事件处理函数，并让它改变为一个悲伤的表情符号。你需要将设置id（标识）为"face"的图片的”image"（图片）属性。\r
        \r
        _提示：当你点击`setProperty()`（设置属性）模块的最后一个下拉框中的"Choose..."（选择）时，会打开你的媒体库。你可以从我们的图标库里选择，或者上传一张自己的图片。_
      CSD U6 emotion machine 1_2019: |-
        # 改变图片\\r

        \\r
        要让你的表情机器动起来，第一件事是在点击按钮时，显示正确的图片。如果你看了开始的代码，你会发现我们已经增加了`setProperty("face", "image", "icon://fa-smile-o")`代码，当你点击”高兴“时，它会显示一张笑脸。\\r
        \\r

        # 这样做\\r

        \\r

        <div
        markdown="1" style="float:right; margin: 20px;">\r
        \r
        ![expandable](https://curriculum.code.org/media/uploads/select_image.gif)\r
        \r
        </div>\r
        \r
        为"sad_button"（悲伤按钮）创建一个事件处理函数，并让它改变为一个悲伤的表情符号。你需要将设置id（标识）为"face"的图片的”image"（图片）属性。\r
        \r
        _提示：当你点击`setProperty()`（设置属性）模块的最后一个下拉框中的"Choose..."（选择）时，会打开你的媒体库。你可以从我们的图标库里选择，或者上传一张自己的图片。_
      CSD U6 emotion machine 2: "# 改变颜色\\\\r\n\n\\\\r\n如果你再回头看看这个应用程序的例子，你会发现当点击按钮时，不仅表情图片变了，它们的颜色也变了。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n在每个事件处理函数中，设置\"face\"的\"icon-color\"属性。为高兴选择一个暖色，并为悲伤选择一个冷色。"
      CSD U6 emotion machine 2_2018: "# 改变颜色\\\\r\n\n\\\\r\n如果你再回头看看这个应用程序的例子，你会发现当点击按钮时，不仅表情图片变了，它们的颜色也变了。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n在每个事件处理函数中，设置\"face\"的\"icon-color\"属性。为高兴选择一个暖色，并为悲伤选择一个冷色。"
      CSD U6 emotion machine 2_2019: "# 改变颜色\\\\r\n\n\\\\r\n如果你再回头看看这个应用程序的例子，你会发现当点击按钮时，不仅表情图片变了，它们的颜色也变了。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n在每个事件处理函数中，设置\"face\"的\"icon-color\"属性。为高兴选择一个暖色，并为悲伤选择一个冷色。"
      CSD U6 emotion machine 3: "# 设置文本\\\\r\n\n\\\\r\n你的高兴和悲伤按钮快要能正常工作了。唯一要做的就是改变屏幕底下的文本了。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n让每个事件处理函数改变\"feeling\"的文本，对应到正确的表情（“高兴”或“悲伤”）上。"
      CSD U6 emotion machine 3_2018: "# 设置文本\\\\r\n\n\\\\r\n你的高兴和悲伤按钮快要能正常工作了。唯一要做的就是改变屏幕底下的文本了。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n让每个事件处理函数改变\"feeling\"的文本，对应到正确的表情（“高兴”或“悲伤”）上。"
      CSD U6 emotion machine 3_2019: "# 设置文本\\\\r\n\n\\\\r\n你的高兴和悲伤按钮快要能正常工作了。唯一要做的就是改变屏幕底下的文本了。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n让每个事件处理函数改变\"feeling\"的文本，对应到正确的表情（“高兴”或“悲伤”）上。"
      CSD U6 emotion machine 4: "# 添加另一个表情\\\\r\n\n\\\\r\n在之前的示例应用程序中，你能将表情设置为高兴、悲伤或无所谓。你的应用程序现在只有高兴和悲伤，你能增加第三个吗？\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n用你在高兴和悲伤按钮上学会的技术，来创建第三个表情按钮。你仍然可以将它设为无所谓，或者其它想要的表情。\\\\r\n\\\\r\n做完后，提交最终版本前，可以再添加一些其它表情或者功能。"
      CSD U6 emotion machine 4_2018: "# 添加另一个表情\\\\r\n\n\\\\r\n在之前的示例应用程序中，你能将表情设置为高兴、悲伤或无所谓。你的应用程序现在只有高兴和悲伤，你能增加第三个吗？\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n用你在高兴和悲伤按钮上学会的技术，来创建第三个表情按钮。你仍然可以将它设为无所谓，或者其它想要的表情。\\\\r\n\\\\r\n做完后，提交最终版本前，可以再添加一些其它表情或者功能。"
      CSD U6 emotion machine 4_2019: "# 添加另一个表情\\\\r\n\n\\\\r\n在之前的示例应用程序中，你能将表情设置为高兴、悲伤或无所谓。你的应用程序现在只有高兴和悲伤，你能增加第三个吗？\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n用你在高兴和悲伤按钮上学会的技术，来创建第三个表情按钮。你仍然可以将它设为无所谓，或者其它想要的表情。\\\\r\n\\\\r\n做完后，提交最终版本前，可以再添加一些其它表情或者功能。"
      CSD U6 emotion machine example: |-
        # 表情机器\\r

        \\r
        看看这个一会儿你要做的表情机器应用程序。试着点击按钮看看它是如何工作的。\\r
        \\r

        # 这样做\\r

        \\r
        试试应用程序，然后和旁边的伙伴讨论：\\r
        \\r

        -   这个应用使用了什么事件处理函数？\\r
        -   代码改变了哪些元素？\\r
        -   点击按钮时，哪些属性被改变了？
      CSD U6 emotion machine example_2018: |-
        # 表情机器\\r

        \\r
        看看这个一会儿你要做的表情机器应用程序。试着点击按钮看看它是如何工作的。\\r
        \\r

        # 这样做\\r

        \\r
        试试应用程序，然后和旁边的伙伴讨论：\\r
        \\r

        -   这个应用使用了什么事件处理函数？\\r
        -   代码改变了哪些元素？\\r
        -   点击按钮时，哪些属性被改变了？
      CSD U6 emotion machine example_2019: |-
        # 表情机器\\r

        \\r
        看看这个一会儿你要做的表情机器应用程序。试着点击按钮看看它是如何工作的。\\r
        \\r

        # 这样做\\r

        \\r
        试试应用程序，然后和旁边的伙伴讨论：\\r
        \\r

        -   这个应用使用了什么事件处理函数？\\r
        -   代码改变了哪些元素？\\r
        -   点击按钮时，哪些属性被改变了？
      CSD U6 for loop button array: |-
        # 数组循环\\r

        \\r
        最强大的使用计数循环的方法是让它在一组数组内循环，让数组里的每个项目都运行代码。可以通过使用计数循环计数器的变量（通常用`i`) 作为数组指数。\\r
        \\r

        # 这样做\\r

        \\r
        该程序应该循环数组`buttons`（按钮），并对每个按钮做两件事

        -   把背景色改为红色，以及更改高度为50像素。\\r
            \\r
        -   在循环内添加第二个`setProperty`（设置属性）模块\\r
        -   更改`buttons[i]`的目标值\\r
            \*设置 "height"（高度）属性为50\\r
            \\r
            ![expandable](https://images.code.org/df3d514bae5c23de9e0fbdf1d7798432-image-1512431649584.png)
      CSD U6 for loop button array_2018: |-
        # 数组循环\\r

        \\r
        最强大的使用计数循环的方法是让它在一组数组内循环，让数组里的每个项目都运行代码。可以通过使用计数循环计数器的变量（通常用`i`) 作为数组指数。\\r
        \\r

        # 这样做\\r

        \\r
        该程序应该循环数组`buttons`（按钮），并对每个按钮做两件事

        -   把背景色改为红色，以及更改高度为50像素。\\r
            \\r
        -   在循环内添加第二个`setProperty`（设置属性）模块\\r
        -   更改`buttons[i]`的目标值\\r
            \*设置 "height"（高度）属性为50\\r
            \\r
            ![expandable](https://images.code.org/df3d514bae5c23de9e0fbdf1d7798432-image-1512431649584.png)
      CSD U6 for loop button array_2019: |-
        # 数组循环\\r

        \\r
        最强大的使用计数循环的方法是让它在一组数组内循环，让数组里的每个项目都运行代码。可以通过使用计数循环计数器的变量（通常用`i`) 作为数组指数。\\r
        \\r

        # 这样做\\r

        \\r
        该程序应该循环数组`buttons`（按钮），并对每个按钮做两件事

        -   把背景色改为红色，以及更改高度为50像素。\\r
            \\r
        -   在循环内添加第二个`setProperty`（设置属性）模块\\r
        -   更改`buttons[i]`的目标值\\r
            \*设置 "height"（高度）属性为50\\r
            \\r
            ![expandable](https://images.code.org/df3d514bae5c23de9e0fbdf1d7798432-image-1512431649584.png)
      CSD U6 for loop click exit: |-
        # 知道何时停止\\r

        \\r
        你可能留意到在上一关卡中如果你多次点击按钮你会得到错误提示。无论你何时编写重复代码，知道何时需要_停止_重复是很重要的。 \\r
        \\r

        # 这样做\\r

        \\r
        该程序和上个类似，但在事件处理器中添加了一个条件。你需要完成条件，这样我们才可以不必试着去切换一个不存在的LED。 \\r
        \\r
        _你的代码在一个有着更多或更少的LED 灯的主板上是否也适用？如果不行的话，是否可以做些修改来让它可以运作？_
      CSD U6 for loop click exit_2018: |-
        # 知道何时停止\\r

        \\r
        你可能留意到在上一关卡中如果你多次点击按钮你会得到错误提示。无论你何时编写重复代码，知道何时需要_停止_重复是很重要的。 \\r
        \\r

        # 这样做\\r

        \\r
        该程序和上个类似，但在事件处理器中添加了一个条件。你需要完成条件，这样我们才可以不必试着去切换一个不存在的LED。 \\r
        \\r
        _你的代码在一个有着更多或更少的LED 灯的主板上是否也适用？如果不行的话，是否可以做些修改来让它可以运作？_
      CSD U6 for loop click exit_2019: |-
        # 知道何时停止\\r

        \\r
        你可能留意到在上一关卡中如果你多次点击按钮你会得到错误提示。无论你何时编写重复代码，知道何时需要_停止_重复是很重要的。 \\r
        \\r

        # 这样做\\r

        \\r
        该程序和上个类似，但在事件处理器中添加了一个条件。你需要完成条件，这样我们才可以不必试着去切换一个不存在的LED。 \\r
        \\r
        _你的代码在一个有着更多或更少的LED 灯的主板上是否也适用？如果不行的话，是否可以做些修改来让它可以运作？_
      CSD U6 for loop click predict question: |-
        # 做出预测\\r

        \\r
        阅读该程序的代码并预测每次点击按钮时会发生什么？
      CSD U6 for loop click predict question_2018: |-
        # 做出预测\\r

        \\r
        阅读该程序的代码并预测每次点击按钮时会发生什么？
      CSD U6 for loop click predict question_2019: |-
        # 做出预测\\r

        \\r
        阅读该程序的代码并预测每次点击按钮时会发生什么？
      CSD U6 for loop images: |-
        # 从头开始构建计数循环\\r

        \\r
        现在, 您已经练习一些修改计数循环来处理数组, 让我们看看你是否能够自己完成。\\r
        \\r

        # 这样做\\r

        \\r
        我们已经为你提供了设计元素和一个数组, 剩下的就靠你自己了.\\r
        \\r

        -   添加一个事件处理程序来响应单击"thumbsup\_button"的动作。\\r
        -   把 _计数循环_放进事件处理函数中\\r
        -   修改 _计数循环_ 的退出条件，这样它可以一直运行直到它到达数组`images`（图片）的最后。\\r
        -   在 _计数循环_的里面把当前的图像改为"icon://fa-thumbs-o-up"\\r
            \\r
            _挑战：你是否能够添加第二个按钮把所有的图像都转回到拇指朝下？_
      CSD U6 for loop images_2018: |-
        # 从头开始构建计数循环\\r

        \\r
        现在, 您已经练习一些修改计数循环来处理数组, 让我们看看你是否能够自己完成。\\r
        \\r

        # 这样做\\r

        \\r
        我们已经为你提供了设计元素和一个数组, 剩下的就靠你自己了.\\r
        \\r

        -   添加一个事件处理程序来响应单击"thumbsup\_button"的动作。\\r
        -   把 _计数循环_放进事件处理函数中\\r
        -   修改 _计数循环_ 的退出条件，这样它可以一直运行直到它到达数组`images`（图片）的最后。\\r
        -   在 _计数循环_的里面把当前的图像改为"icon://fa-thumbs-o-up"\\r
            \\r
            _挑战：你是否能够添加第二个按钮把所有的图像都转回到拇指朝下？_
      CSD U6 for loop images_2019: |-
        # 从头开始构建计数循环\\r

        \\r
        现在, 您已经练习一些修改计数循环来处理数组, 让我们看看你是否能够自己完成。\\r
        \\r

        # 这样做\\r

        \\r
        我们已经为你提供了设计元素和一个数组, 剩下的就靠你自己了.\\r
        \\r

        -   添加一个事件处理程序来响应单击"thumbsup\_button"的动作。\\r
        -   把 _计数循环_放进事件处理函数中\\r
        -   修改 _计数循环_ 的退出条件，这样它可以一直运行直到它到达数组`images`（图片）的最后。\\r
        -   在 _计数循环_的里面把当前的图像改为"icon://fa-thumbs-o-up"\\r
            \\r
            _挑战：你是否能够添加第二个按钮把所有的图像都转回到拇指朝下？_
      CSD U6 for loop led bonus 1: |-
        # 挑战：添加更多的按钮\\r

        \\r
        通过添加更多的按钮来扩展程序，让它能将主板变成不同的颜色。\\r
        \\r

        # 这样做\\r

        \\r
        在设计模式中添加新的按钮，并创建事件处理函数来响应按钮，并更改LED灯的颜色。
      CSD U6 for loop led bonus 1_2018: |-
        # 挑战：添加更多的按钮\\r

        \\r
        通过添加更多的按钮来扩展程序，让它能将主板变成不同的颜色。\\r
        \\r

        # 这样做\\r

        \\r
        在设计模式中添加新的按钮，并创建事件处理函数来响应按钮，并更改LED灯的颜色。
      CSD U6 for loop led bonus 1_2019: |-
        # 挑战：添加更多的按钮\\r

        \\r
        通过添加更多的按钮来扩展程序，让它能将主板变成不同的颜色。\\r
        \\r

        # 这样做\\r

        \\r
        在设计模式中添加新的按钮，并创建事件处理函数来响应按钮，并更改LED灯的颜色。
      CSD U6 for loop led bonus 2: |-
        挑战: 颜色图案\\r
        \\r
        通过添加更多能够创建不同图案大的灯的按钮来扩展程序。\\r
        \\r

        # 这样做\\r

        \\r
        在设计模式中添加新按钮, 并创建事件处理器来响应按钮并更改 LED 颜色。\\r
        \\r
        _提示：在设计模式时, 请考虑带有参数的函数是否有助于简化你的程序。_
      CSD U6 for loop led bonus 2_2018: |-
        挑战: 颜色图案\\r
        \\r
        通过添加更多能够创建不同图案大的灯的按钮来扩展程序。\\r
        \\r

        # 这样做\\r

        \\r
        在设计模式中添加新按钮, 并创建事件处理器来响应按钮并更改 LED 颜色。\\r
        \\r
        _提示：在设计模式时, 请考虑带有参数的函数是否有助于简化你的程序。_
      CSD U6 for loop led bonus 2_2019: |-
        挑战: 颜色图案\\r
        \\r
        通过添加更多能够创建不同图案大的灯的按钮来扩展程序。\\r
        \\r

        # 这样做\\r

        \\r
        在设计模式中添加新按钮, 并创建事件处理器来响应按钮并更改 LED 颜色。\\r
        \\r
        _提示：在设计模式时, 请考虑带有参数的函数是否有助于简化你的程序。_
      CSD U6 for loop led bonus 3: |-
        # 挑战: 音乐\\r

        \\r
        使用你在制作音乐课中学到的知识, 让主板能在灯光改变时播放音乐。\\r
        \\r

        # 这样做\\r

        \\r
        为不同的歌曲创建一些音符数组, 并在事件处理函数中添加代码以播放音乐。
      CSD U6 for loop led bonus 3_2018: |-
        # 挑战: 音乐\\r

        \\r
        使用你在制作音乐课中学到的知识, 让主板能在灯光改变时播放音乐。\\r
        \\r

        # 这样做\\r

        \\r
        为不同的歌曲创建一些音符数组, 并在事件处理函数中添加代码以播放音乐。
      CSD U6 for loop led bonus 3_2019: |-
        # 挑战: 音乐\\r

        \\r
        使用你在制作音乐课中学到的知识, 让主板能在灯光改变时播放音乐。\\r
        \\r

        # 这样做\\r

        \\r
        为不同的歌曲创建一些音符数组, 并在事件处理函数中添加代码以播放音乐。
      CSD U6 for loop led function call: |-
        # 调用你的函数\\r

        \\r
        现在, 您已经创建了一个随着它所通过的参数而改变的函数，我们可以在不同的事件处理函数中多次使用它来把灯光变为不同的颜色。\\r
        \\r

        # 这样做\\r

        \\r
        我们将从创建一个简单的"button_red"（红按钮）事件处理函数开始\\r
        \\r
        \*创建一个新的事件处理函数来响应"button_red"\\r

        -   在事件处理器中添加一个 "call function with parameter"（调用有参数的函数）模块\\r
            ![expandable](https://images.code.org/ee8e026b59682066eccfc4795b5c5036-image-1512771755527.png)\\r
        -   将名称从 `myFunction`更改为`setLedsColor`\\r
        -   将参数从 `n`更改为 "red"（红色） (注意引号!）\\r
        -   测试您的程序, "Red"（红色）按钮应将所有LED都变为红色。
      CSD U6 for loop led function call_2018: |-
        # 调用你的函数\\r

        \\r
        现在, 您已经创建了一个随着它所通过的参数而改变的函数，我们可以在不同的事件处理函数中多次使用它来把灯光变为不同的颜色。\\r
        \\r

        # 这样做\\r

        \\r
        我们将从创建一个简单的"button_red"（红按钮）事件处理函数开始\\r
        \\r
        \*创建一个新的事件处理函数来响应"button_red"\\r

        -   在事件处理器中添加一个 "call function with parameter"（调用有参数的函数）模块\\r
            ![expandable](https://images.code.org/ee8e026b59682066eccfc4795b5c5036-image-1512771755527.png)\\r
        -   将名称从 `myFunction`更改为`setLedsColor`\\r
        -   将参数从 `n`更改为 "red"（红色） (注意引号!）\\r
        -   测试您的程序, "Red"（红色）按钮应将所有LED都变为红色。
      CSD U6 for loop led function call_2019: |-
        # 调用你的函数\\r

        \\r
        现在, 您已经创建了一个随着它所通过的参数而改变的函数，我们可以在不同的事件处理函数中多次使用它来把灯光变为不同的颜色。\\r
        \\r

        # 这样做\\r

        \\r
        我们将从创建一个简单的"button_red"（红按钮）事件处理函数开始\\r
        \\r
        \*创建一个新的事件处理函数来响应"button_red"\\r

        -   在事件处理器中添加一个 "call function with parameter"（调用有参数的函数）模块\\r
            ![expandable](https://images.code.org/ee8e026b59682066eccfc4795b5c5036-image-1512771755527.png)\\r
        -   将名称从 `myFunction`更改为`setLedsColor`\\r
        -   将参数从 `n`更改为 "red"（红色） (注意引号!）\\r
        -   测试您的程序, "Red"（红色）按钮应将所有LED都变为红色。
      CSD U6 for loop led function finish: |-
        # 完成应用程序\\r

        \\r
        如果您的红色按钮正常工作，那么剩下要做的就是在其它按钮按下时，调用你的新函数。\\r
        \\r

        # 这样做\\r

        \\r
        对每个剩余的按钮 (绿色、蓝色和白色) ：\\r
        \\r

        -   创建新的事件处理函数\\r
        -   用合适的颜色（"绿色", "蓝色", 或 "白色") 来调用`setLedsColor`（设置LED灯颜色）函数\\r
        -   测试您的程序, 确保所有的按钮都正常工作\\r
            \\r
            当你已经让所有的按钮都正常工作后, 点击 "提交"来提交你的程序。
      CSD U6 for loop led function finish_2018: |-
        # 完成应用程序\\r

        \\r
        如果您的红色按钮正常工作，那么剩下要做的就是在其它按钮按下时，调用你的新函数。\\r
        \\r

        # 这样做\\r

        \\r
        对每个剩余的按钮 (绿色、蓝色和白色) ：\\r
        \\r

        -   创建新的事件处理函数\\r
        -   用合适的颜色（"绿色", "蓝色", 或 "白色") 来调用`setLedsColor`（设置LED灯颜色）函数\\r
        -   测试您的程序, 确保所有的按钮都正常工作\\r
            \\r
            当你已经让所有的按钮都正常工作后, 点击 "提交"来提交你的程序。
      CSD U6 for loop led function finish_2019: |-
        # 完成应用程序\\r

        \\r
        如果您的红色按钮正常工作，那么剩下要做的就是在其它按钮按下时，调用你的新函数。\\r
        \\r

        # 这样做\\r

        \\r
        对每个剩余的按钮 (绿色、蓝色和白色) ：\\r
        \\r

        -   创建新的事件处理函数\\r
        -   用合适的颜色（"绿色", "蓝色", 或 "白色") 来调用`setLedsColor`（设置LED灯颜色）函数\\r
        -   测试您的程序, 确保所有的按钮都正常工作\\r
            \\r
            当你已经让所有的按钮都正常工作后, 点击 "提交"来提交你的程序。
      CSD U6 for loop led function: |-
        # 用函数切换颜色\\r

        \\r
        我们可以为所要设置的LED灯的不同颜色编写计数循环，但这基本上是很多相同的代码。这是个使用 _带参数的函数_的好地方！
        你已经使用过带参数的函数，但现在你要从头创建一个。\\r
        \\r

        # 这样做\\r

        \\r
        创建一个名为`setLedsColor`（设LED 灯颜色） 的函数, 它采用参数`color`（颜色）, 并用它来更改 所有LED 灯的颜色。\\r
        \\r
        \*在程序的底部，拖出一个带参数的函数模块
        ![expandable](https://images.code.org/bd6ec3d9a651cf760a7dc8e1949658c0-image-1512761901850.png)\\r

        -   把`myFunction`（我的函数）的名字改为`setLedsColor`（设LED 灯颜色） \\r
        -   把参数名字从`n`改为`color`（颜色）\\r
        -   在函数内，添加一个_计数循环_一直重复直到到达`colorLeds`（彩色LED灯）的最后\\r
        -   在_计数循环_内，把当前LED 灯颜色设置为参数`color`（颜色）（比如`colorLeds[i].color(color)`\\r
            \\r
            我们会在下一关卡添加使用此函数的事件处理函数，但现在，你可以用程序测试你的函数，并在调试控制台输入：`setLedsColor("blue")`
      CSD U6 for loop led function_2018: |-
        # 用函数切换颜色\\r

        \\r
        我们可以为所要设置的LED灯的不同颜色编写计数循环，但这基本上是很多相同的代码。这是个使用 _带参数的函数_的好地方！
        你已经使用过带参数的函数，但现在你要从头创建一个。\\r
        \\r

        # 这样做\\r

        \\r
        创建一个名为`setLedsColor`（设LED 灯颜色） 的函数, 它采用参数`color`（颜色）, 并用它来更改 所有LED 灯的颜色。\\r
        \\r
        \*在程序的底部，拖出一个带参数的函数模块
        ![expandable](https://images.code.org/bd6ec3d9a651cf760a7dc8e1949658c0-image-1512761901850.png)\\r

        -   把`myFunction`（我的函数）的名字改为`setLedsColor`（设LED 灯颜色） \\r
        -   把参数名字从`n`改为`color`（颜色）\\r
        -   在函数内，添加一个_计数循环_一直重复直到到达`colorLeds`（彩色LED灯）的最后\\r
        -   在_计数循环_内，把当前LED 灯颜色设置为参数`color`（颜色）（比如`colorLeds[i].color(color)`\\r
            \\r
            我们会在下一关卡添加使用此函数的事件处理函数，但现在，你可以用程序测试你的函数，并在调试控制台输入：`setLedsColor("blue")`
      CSD U6 for loop led function_2019: |-
        # 用函数切换颜色\\r

        \\r
        我们可以为所要设置的LED灯的不同颜色编写计数循环，但这基本上是很多相同的代码。这是个使用 _带参数的函数_的好地方！
        你已经使用过带参数的函数，但现在你要从头创建一个。\\r
        \\r

        # 这样做\\r

        \\r
        创建一个名为`setLedsColor`（设LED 灯颜色） 的函数, 它采用参数`color`（颜色）, 并用它来更改 所有LED 灯的颜色。\\r
        \\r
        \*在程序的底部，拖出一个带参数的函数模块
        ![expandable](https://images.code.org/bd6ec3d9a651cf760a7dc8e1949658c0-image-1512761901850.png)\\r

        -   把`myFunction`（我的函数）的名字改为`setLedsColor`（设LED 灯颜色） \\r
        -   把参数名字从`n`改为`color`（颜色）\\r
        -   在函数内，添加一个_计数循环_一直重复直到到达`colorLeds`（彩色LED灯）的最后\\r
        -   在_计数循环_内，把当前LED 灯颜色设置为参数`color`（颜色）（比如`colorLeds[i].color(color)`\\r
            \\r
            我们会在下一关卡添加使用此函数的事件处理函数，但现在，你可以用程序测试你的函数，并在调试控制台输入：`setLedsColor("blue")`
      CSD U6 for loop led off: |-
        # 关闭所有的彩色指示灯\\r

        \\r
        现在你有一个按钮来打开彩色指示灯，你能做另一个把它们关掉。\\r
        \\r

        # 这样做\\r

        \\r
        将一个事件处理函数添加到 "button\_off"（关闭按钮） 中, 并使用 计数循环将每个彩色指示灯都熄灭。
      CSD U6 for loop led off_2018: |-
        # 关闭所有的彩色指示灯\\r

        \\r
        现在你有一个按钮来打开彩色指示灯，你能做另一个把它们关掉。\\r
        \\r

        # 这样做\\r

        \\r
        将一个事件处理函数添加到 "button\_off"（关闭按钮） 中, 并使用 计数循环将每个彩色指示灯都熄灭。
      CSD U6 for loop led off_2019: |-
        # 关闭所有的彩色指示灯\\r

        \\r
        现在你有一个按钮来打开彩色指示灯，你能做另一个把它们关掉。\\r
        \\r

        # 这样做\\r

        \\r
        将一个事件处理函数添加到 "button\_off"（关闭按钮） 中, 并使用 计数循环将每个彩色指示灯都熄灭。
      CSD U6 for loop led on: |-
        # 打开所有彩色LED灯\\r

        \\r
        现在你知道如何使用_计数循环_来处理数组中的所有元素，你可以比之前更容易打开所有彩色LED 灯了。\\r
        \\r

        # 这样做\\r

        \\r
        我们要启动一个应用程序, 它将控制主板上的所有彩色LED灯。第一步是将接接上打开所有LED灯的按钮。\\r
        \\r

        -   为 "button\_on"（打开按钮） 添加一个事件处理函数\\r
        -   在事件处理函数中放置一个_计数循环_,一直重复直到它到达数组 "colorLeds"（彩色LED 灯） 的最后。\\r
        -   在计数循环内部，调用 `colorLeds[i].on()`来打开当前的彩色LED灯。
      CSD U6 for loop led on_2018: |-
        # 打开所有彩色LED灯\\r

        \\r
        现在你知道如何使用_计数循环_来处理数组中的所有元素，你可以比之前更容易打开所有彩色LED 灯了。\\r
        \\r

        # 这样做\\r

        \\r
        我们要启动一个应用程序, 它将控制主板上的所有彩色LED灯。第一步是将接接上打开所有LED灯的按钮。\\r
        \\r

        -   为 "button\_on"（打开按钮） 添加一个事件处理函数\\r
        -   在事件处理函数中放置一个_计数循环_,一直重复直到它到达数组 "colorLeds"（彩色LED 灯） 的最后。\\r
        -   在计数循环内部，调用 `colorLeds[i].on()`来打开当前的彩色LED灯。
      CSD U6 for loop led on_2019: |-
        # 打开所有彩色LED灯\\r

        \\r
        现在你知道如何使用_计数循环_来处理数组中的所有元素，你可以比之前更容易打开所有彩色LED 灯了。\\r
        \\r

        # 这样做\\r

        \\r
        我们要启动一个应用程序, 它将控制主板上的所有彩色LED灯。第一步是将接接上打开所有LED灯的按钮。\\r
        \\r

        -   为 "button\_on"（打开按钮） 添加一个事件处理函数\\r
        -   在事件处理函数中放置一个_计数循环_,一直重复直到它到达数组 "colorLeds"（彩色LED 灯） 的最后。\\r
        -   在计数循环内部，调用 `colorLeds[i].on()`来打开当前的彩色LED灯。
      CSD U6 for loop led template: |-
        # 数组和计数循环

        彩色LED灯项目模板
      CSD U6 for loop led template_2018: |-
        # 数组和计数循环

        彩色LED灯项目模板
      CSD U6 for loop led template_2019: |-
        # 数组和计数循环

        彩色LED灯项目模板
      CSD U6 for loop list.length: |-
        # 数组长度\\r

        \\r
        在上一个程序中, 我们告诉循环运行代码`for (var
        i = 0; i < 3; i++)`三次。这样虽然可以，但是我们可以使用数组的长度来编写更智能的程序来决定循环多少次。\\r
        \\r

        # 这样做\\r

        \\r
        更改此计数循环的退出条件, 以便它当`i < buttons.length`时运行。
      CSD U6 for loop list.length_2018: |-
        # 数组长度\\r

        \\r
        在上一个程序中, 我们告诉循环运行代码`for (var
        i = 0; i < 3; i++)`三次。这样虽然可以，但是我们可以使用数组的长度来编写更智能的程序来决定循环多少次。\\r
        \\r

        # 这样做\\r

        \\r
        更改此计数循环的退出条件, 以便它当`i < buttons.length`时运行。
      CSD U6 for loop list.length_2019: |-
        # 数组长度\\r

        \\r
        在上一个程序中, 我们告诉循环运行代码`for (var
        i = 0; i < 3; i++)`三次。这样虽然可以，但是我们可以使用数组的长度来编写更智能的程序来决定循环多少次。\\r
        \\r

        # 这样做\\r

        \\r
        更改此计数循环的退出条件, 以便它当`i < buttons.length`时运行。
      CSD U6 frequency: |-
        # 频率\\r

        \\r
        这个蜂鸣器控制器也被扩展为可以控制频率了，但代码还没有完成。\\r
        \\r

        # 这样做\\r

        -   按照`duration`（持续时间）变量，创建一个`frequency`（频率）变量，从_frequency_（频率）滑动条上取值。\\r
        -   \*
            改变让蜂鸣器发声的那行代码，让它使用`frequency`的值，而不是默认的频率`500`。\\r
        -   运行代码，然后改变频率和持续时间，听听看蜂鸣器声音有什么不同。（别忘了改变后点击按钮！）
      CSD U6 frequency_2018: |-
        # 频率\\r

        \\r
        这个蜂鸣器控制器也被扩展为可以控制频率了，但代码还没有完成。\\r
        \\r

        # 这样做\\r

        -   按照`duration`（持续时间）变量，创建一个`frequency`（频率）变量，从_frequency_（频率）滑动条上取值。\\r
        -   \*
            改变让蜂鸣器发声的那行代码，让它使用`frequency`的值，而不是默认的频率`500`。\\r
        -   运行代码，然后改变频率和持续时间，听听看蜂鸣器声音有什么不同。（别忘了改变后点击按钮！）
      CSD U6 frequency_2019: |-
        # 频率\\r

        \\r
        这个蜂鸣器控制器也被扩展为可以控制频率了，但代码还没有完成。\\r
        \\r

        # 这样做\\r

        -   按照`duration`（持续时间）变量，创建一个`frequency`（频率）变量，从_frequency_（频率）滑动条上取值。\\r
        -   \*
            改变让蜂鸣器发声的那行代码，让它使用`frequency`的值，而不是默认的频率`500`。\\r
        -   运行代码，然后改变频率和持续时间，听听看蜂鸣器声音有什么不同。（别忘了改变后点击按钮！）
      CSD U6 game project board events: |-
        # 主板事件\\r

        \\r
        返回到你的活动向导的事件章节，找到响应主板的任何事件【使用了`onBoardEvent()`（当主板上发生事件时）】。为每一个都创建一个事件处理函数。如果这些事件依赖于还没有写的程序，在里面写一条注释。
      CSD U6 game project board events_2018: |-
        # 主板事件\\r

        \\r
        返回到你的活动向导的事件章节，找到响应主板的任何事件【使用了`onBoardEvent()`（当主板上发生事件时）】。为每一个都创建一个事件处理函数。如果这些事件依赖于还没有写的程序，在里面写一条注释。
      CSD U6 game project board events_2019: |-
        # 主板事件\\r

        \\r
        返回到你的活动向导的事件章节，找到响应主板的任何事件【使用了`onBoardEvent()`（当主板上发生事件时）】。为每一个都创建一个事件处理函数。如果这些事件依赖于还没有写的程序，在里面写一条注释。
      CSD U6 game project finish: |-
        # 完成润色和测试\\r

        \\r
        现在，你几乎完成了整个程序了。你可以加一些润色，然后做一些测试。当你的应用准备好后，让你的同学试一试。看看你是否能找到任何缺陷，混乱的选项设计，或者少了什么功能。\\r
        \\r
        一旦完成了这个版本的程序，点击提交按钮。
      CSD U6 game project finish_2018: |-
        # 完成润色和测试\\r

        \\r
        现在，你几乎完成了整个程序了。你可以加一些润色，然后做一些测试。当你的应用准备好后，让你的同学试一试。看看你是否能找到任何缺陷，混乱的选项设计，或者少了什么功能。\\r
        \\r
        一旦完成了这个版本的程序，点击提交按钮。
      CSD U6 game project finish_2019: |-
        # 完成润色和测试\\r

        \\r
        现在，你几乎完成了整个程序了。你可以加一些润色，然后做一些测试。当你的应用准备好后，让你的同学试一试。看看你是否能找到任何缺陷，混乱的选项设计，或者少了什么功能。\\r
        \\r
        一旦完成了这个版本的程序，点击提交按钮。
      CSD U6 game project functions call: |-
        # 调用你的函数\\r

        \\r
        函数定义好后，要在需要的地方调用它。找找你的事件处理函数或程序的其它地方，是否需要调用函数，然后添加一个函数调用。
      CSD U6 game project functions call_2018: |-
        # 调用你的函数\\r

        \\r
        函数定义好后，要在需要的地方调用它。找找你的事件处理函数或程序的其它地方，是否需要调用函数，然后添加一个函数调用。
      CSD U6 game project functions call_2019: |-
        # 调用你的函数\\r

        \\r
        函数定义好后，要在需要的地方调用它。找找你的事件处理函数或程序的其它地方，是否需要调用函数，然后添加一个函数调用。
      CSD U6 game project functions define: |-
        # 定义你的函数\\r

        \\r
        在程序的注释下添加你的所有函数。 `//
        Create your functions here`（在这里创建你的函数）.\\r
        \\r
        现在，我们要开始写函数_定义_了，这部分看起来会像下面这样：\\r
        \\r

        ```\\r
        function
        myFunction() {\r
        \t// Things my function does（函数要做的事情）\r
        }\r
        ```
      CSD U6 game project functions define_2018: |-
        # 定义你的函数\\r

        \\r
        在程序的注释下添加你的所有函数。 `//
        Create your functions here`（在这里创建你的函数）.\\r
        \\r
        现在，我们要开始写函数_定义_了，这部分看起来会像下面这样：\\r
        \\r

        ```\\r
        function
        myFunction() {\r
        \t// Things my function does（函数要做的事情）\r
        }\r
        ```
      CSD U6 game project functions define_2019: |-
        # 定义你的函数\\r

        \\r
        在程序的注释下添加你的所有函数。 `//
        Create your functions here`（在这里创建你的函数）.\\r
        \\r
        现在，我们要开始写函数_定义_了，这部分看起来会像下面这样：\\r
        \\r

        ```\\r
        function
        myFunction() {\r
        \t// Things my function does（函数要做的事情）\r
        }\r
        ```
      CSD U6 game project screen links: |-
        # UI元素事件\\r

        \\r
        现在，现在你的所有屏幕都设计好了，你可以添加任何响应_屏幕互动_的事件处理函数了。它们已经列在了你的活动向导中的”事件“章节里了。如果你用了还没在计划阶段想过的新事件，确保将它们加到你的项目向导里。\\r
        \\r
        不用担心这些功能还没有完全实现。如果你的事件依赖于主板元素或者你自己的函数，我们会在下一关中处理它们。
      CSD U6 game project screen links_2018: |-
        # UI元素事件\\r

        \\r
        现在，现在你的所有屏幕都设计好了，你可以添加任何响应_屏幕互动_的事件处理函数了。它们已经列在了你的活动向导中的”事件“章节里了。如果你用了还没在计划阶段想过的新事件，确保将它们加到你的项目向导里。\\r
        \\r
        不用担心这些功能还没有完全实现。如果你的事件依赖于主板元素或者你自己的函数，我们会在下一关中处理它们。
      CSD U6 game project screen links_2019: |-
        # UI元素事件\\r

        \\r
        现在，现在你的所有屏幕都设计好了，你可以添加任何响应_屏幕互动_的事件处理函数了。它们已经列在了你的活动向导中的”事件“章节里了。如果你用了还没在计划阶段想过的新事件，确保将它们加到你的项目向导里。\\r
        \\r
        不用担心这些功能还没有完全实现。如果你的事件依赖于主板元素或者你自己的函数，我们会在下一关中处理它们。
      CSD U6 game project screens: |-
        # 创建你的屏幕\\r

        \\r
        第一件事是创建你在计划向导里勾画的所有屏幕。\\r
        \\r

        # 这样做\\r

        \\r
        用设计模式创建你的程序所需要的所有屏幕。别忘了给所有的设计元素**设置上有意义的标识**。
      CSD U6 game project screens_2018: |-
        # 创建你的屏幕\\r

        \\r
        第一件事是创建你在计划向导里勾画的所有屏幕。\\r
        \\r

        # 这样做\\r

        \\r
        用设计模式创建你的程序所需要的所有屏幕。别忘了给所有的设计元素**设置上有意义的标识**。
      CSD U6 game project screens_2019: |-
        # 创建你的屏幕\\r

        \\r
        第一件事是创建你在计划向导里勾画的所有屏幕。\\r
        \\r

        # 这样做\\r

        \\r
        用设计模式创建你的程序所需要的所有屏幕。别忘了给所有的设计元素**设置上有意义的标识**。
      CSD U6 get toggle: '# onChange \\r \\r 此程序具有检测三不同更改的事件: 切换开关、间隔滑块和持续时间滑块。 因为有这么多不同的东西可以导致 LED 和蜂鸣器复位, 它使用函数来组织代码.\\r\\r#请操作以下\\r\\r\* 请阅读 "updateLED" 函数以查看它的作用. \\r\* 将代码添加到 "updateBuzzer", 使蜂鸣器只在切换时打开时打开开关。'
      CSD U6 get toggle_2018: '# onChange \\r \\r 此程序具有检测三不同更改的事件: 切换开关、间隔滑块和持续时间滑块。 因为有这么多不同的东西可以导致 LED 和蜂鸣器复位, 它使用函数来组织代码.\\r\\r#请操作以下\\r\\r\* 请阅读 "updateLED" 函数以查看它的作用. \\r\* 将代码添加到 "updateBuzzer", 使蜂鸣器只在切换时打开时打开开关。'
      CSD U6 get toggle_2019: '# onChange \\r \\r 此程序具有检测三不同更改的事件: 切换开关、间隔滑块和持续时间滑块。 因为有这么多不同的东西可以导致 LED 和蜂鸣器复位, 它使用函数来组织代码.\\r\\r#请操作以下\\r\\r\* 请阅读 "updateLED" 函数以查看它的作用. \\r\* 将代码添加到 "updateBuzzer", 使蜂鸣器只在切换时打开时打开开关。'
      CSD U6 getProperty Demo: |-
        # 更新属性\\r

        \\r
        这是一个同时用了`getProperty`（获取属性）和`setProperty()`（设置属性）的例子，来更新屏幕上的元素。 读一下代码，然后通过填写输入值，点击”保存“来测试一下它。\\r
        \\r
        _注意：你不需要改动任何代码，只需要读一读已有的代码，了解它是如何工作的。_
      CSD U6 getProperty Demo_2018: |-
        # 更新属性\\r

        \\r
        这是一个同时用了`getProperty`（获取属性）和`setProperty()`（设置属性）的例子，来更新屏幕上的元素。 读一下代码，然后通过填写输入值，点击”保存“来测试一下它。\\r
        \\r
        _注意：你不需要改动任何代码，只需要读一读已有的代码，了解它是如何工作的。_
      CSD U6 getProperty Demo_2019: |-
        # 更新属性\\r

        \\r
        这是一个同时用了`getProperty`（获取属性）和`setProperty()`（设置属性）的例子，来更新屏幕上的元素。 读一下代码，然后通过填写输入值，点击”保存“来测试一下它。\\r
        \\r
        _注意：你不需要改动任何代码，只需要读一读已有的代码，了解它是如何工作的。_
      CSD U6 getProperty Text Input: |-
        # 获取文本\\r

        \\r
        `getProperty()` （获取属性）模块能够很容易的从用户获取文本输入。在这个应用中，用户能输入自己的姓名，并点击”提交“来在下面看到自己的名字。\\r
        \\r

        # 这样做\\r

        \\r

        -   拖拽出一个`setProperty()`（设置属性）模块\\r
        -   第一个参数，选择”name"（元素的标识）\\r
        -   第二个参数，选择"text"（你想要设置的属性）\\r
        -   第三个参数，写上引号引起来的你的名字（要设置的值）\\r
            \\r
            _注意：我们已经移除了设计模式标签页，这样你能开始练习使用`setProperty()`（设置属性）。它会在晚一点你需要构建自己的应用时再出现。_
      CSD U6 getProperty board predict: 预测级别 (请参见标记的包含关卡)
      CSD U6 getProperty board predict_2018: 预测级别 (请参见标记的包含关卡)
      CSD U6 getProperty board predict_2019: 预测级别 (请参见标记的包含关卡)
      CSD U6 getProperty buzzer: "# 使用电路游戏板\\\\r\n\n\\\\r\n这里有和上一关一样的代码，但是这次有另一个下拉框来控制蜂鸣器。你必须添加代码来让它工作。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\n-   参考LED灯的代码，在buttonL事件中添加代码来根据*buzzer\\_input*下拉框的内容来播放长的或短的声音。\\\\r\n-   添加代码来让蜂鸣器在点击右键时关闭。\\\\r\n-   （暗示：事件已经在代码中了。）"
      CSD U6 getProperty buzzer_2018: "# 使用电路游戏板\\\\r\n\n\\\\r\n这里有和上一关一样的代码，但是这次有另一个下拉框来控制蜂鸣器。你必须添加代码来让它工作。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\n-   参考LED灯的代码，在buttonL事件中添加代码来根据*buzzer\\_input*下拉框的内容来播放长的或短的声音。\\\\r\n-   添加代码来让蜂鸣器在点击右键时关闭。\\\\r\n-   （暗示：事件已经在代码中了。）"
      CSD U6 getProperty buzzer_2019: "# 使用电路游戏板\\\\r\n\n\\\\r\n这里有和上一关一样的代码，但是这次有另一个下拉框来控制蜂鸣器。你必须添加代码来让它工作。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\n-   参考LED灯的代码，在buttonL事件中添加代码来根据*buzzer\\_input*下拉框的内容来播放长的或短的声音。\\\\r\n-   添加代码来让蜂鸣器在点击右键时关闭。\\\\r\n-   （暗示：事件已经在代码中了。）"
      CSD U6 getProperty debug: |-
        # 调试\\r

        \\r
        这个程序应该在点击按钮”click\_me”时，改变它的背景颜色、文本颜色和按钮文本。但现在看起来什么变化也没有。修复代码，让它能按照预期的方式工作。
      CSD U6 getProperty dropdown: |-
        # 下拉框\\r

        \\r
        当你想让用户输入_任何内容_时，文本框非常好用。但你经常想要将用户输入限制到某几个选项中。例如，如果你想让用户选择一个颜色，你可能想确保他们只选择实际上能工作的颜色。\\r
        \\r
        这里提供了一个标识为"color\_input"（输入颜色）的下拉框，让用户从商量的颜色中选择背景颜色。当"Set Color"（设置颜色）按钮被点击时，屏幕会变为这个颜色。\\r
        \\r

        # 这样做\\r

        \\r

        -   在事件模块中，创建一个叫做`color`（颜色）的变量，并用`getProperty`（获取属性）模块给它赋值。\\r
        -   \*
            暗示：你需要用"value"（值）属性来获得用户的选项。\\r
        -   \*
            用`setProperty()`（设置属性）模块来设置"screen1"的"background-color"（背景颜色）为你的`color`变量。\\r
        -   通过选择一个颜色，并点击"Set Color"来测试你的程序。\\r
        -   提示：确保你输入`color`（颜色）时，不要输入引号。\\r
        -   选择一个演示，并点击"Set Color"（设置颜色）来测试程序。
      CSD U6 getProperty dropdown_2018: |-
        # 下拉框\\r

        \\r
        当你想让用户输入_任何内容_时，文本框非常好用。但你经常想要将用户输入限制到某几个选项中。例如，如果你想让用户选择一个颜色，你可能想确保他们只选择实际上能工作的颜色。\\r
        \\r
        这里提供了一个标识为"color\_input"（输入颜色）的下拉框，让用户从商量的颜色中选择背景颜色。当"Set Color"（设置颜色）按钮被点击时，屏幕会变为这个颜色。\\r
        \\r

        # 这样做\\r

        \\r

        -   在事件模块中，创建一个叫做`color`（颜色）的变量，并用`getProperty`（获取属性）模块给它赋值。\\r
        -   \*
            暗示：你需要用"value"（值）属性来获得用户的选项。\\r
        -   \*
            用`setProperty()`（设置属性）模块来设置"screen1"的"background-color"（背景颜色）为你的`color`变量。\\r
        -   通过选择一个颜色，并点击"Set Color"来测试你的程序。\\r
        -   提示：确保你输入`color`（颜色）时，不要输入引号。\\r
        -   选择一个演示，并点击"Set Color"（设置颜色）来测试程序。
      CSD U6 getProperty dropdown_2019: |-
        # 下拉框\\r

        \\r
        当你想让用户输入_任何内容_时，文本框非常好用。但你经常想要将用户输入限制到某几个选项中。例如，如果你想让用户选择一个颜色，你可能想确保他们只选择实际上能工作的颜色。\\r
        \\r
        这里提供了一个标识为"color\_input"（输入颜色）的下拉框，让用户从商量的颜色中选择背景颜色。当"Set Color"（设置颜色）按钮被点击时，屏幕会变为这个颜色。\\r
        \\r

        # 这样做\\r

        \\r

        -   在事件模块中，创建一个叫做`color`（颜色）的变量，并用`getProperty`（获取属性）模块给它赋值。\\r
        -   \*
            暗示：你需要用"value"（值）属性来获得用户的选项。\\r
        -   \*
            用`setProperty()`（设置属性）模块来设置"screen1"的"background-color"（背景颜色）为你的`color`变量。\\r
        -   通过选择一个颜色，并点击"Set Color"来测试你的程序。\\r
        -   提示：确保你输入`color`（颜色）时，不要输入引号。\\r
        -   选择一个演示，并点击"Set Color"（设置颜色）来测试程序。
      CSD U6 getProperty input: "# getProperty（获取属性）和变量\\\\r\n\n\\\\r\n当提交按钮被点击时，这个程序用了`name`（名称）变量来显示输入到\"name_input\"中的内容。这应该和\\*friend_input_、_friend\\_output\\*是一样的，但它少了一个模块。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\n-   读一读代码和注释，然后运行程序看看它是如何工作的。(确保你在点击“提交”前输入了你和朋友的名字。）\\\\r\n-   用一个`getProperty`（获取属性）模块来将*friend\\_input*的文本属性存储到\"friend_name\"变量中。([显示在哪里]\\(#triggercallout=code_triggered))"
      CSD U6 getProperty input_2018: "# getProperty（获取属性）和变量\\\\r\n\n\\\\r\n当提交按钮被点击时，这个程序用了`name`（名称）变量来显示输入到\"name_input\"中的内容。这应该和\\*friend_input_、_friend\\_output\\*是一样的，但它少了一个模块。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\n-   读一读代码和注释，然后运行程序看看它是如何工作的。(确保你在点击“提交”前输入了你和朋友的名字。）\\\\r\n-   用一个`getProperty`（获取属性）模块来将*friend\\_input*的文本属性存储到\"friend_name\"变量中。([显示在哪里]\\(#triggercallout=code_triggered))"
      CSD U6 getProperty input_2019: "# getProperty（获取属性）和变量\\\\r\n\n\\\\r\n当提交按钮被点击时，这个程序用了`name`（名称）变量来显示输入到\"name_input\"中的内容。这应该和\\*friend_input_、_friend\\_output\\*是一样的，但它少了一个模块。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\n-   读一读代码和注释，然后运行程序看看它是如何工作的。(确保你在点击“提交”前输入了你和朋友的名字。）\\\\r\n-   用一个`getProperty`（获取属性）模块来将*friend\\_input*的文本属性存储到\"friend_name\"变量中。([显示在哪里]\\(#triggercallout=code_triggered))"
      CSD U6 getProperty predict: |-
        # 调试\\r

        \\r
        这个程序应该在点击按钮”click\_me”时，改变它的背景颜色、文本颜色和按钮文本。但现在看起来什么变化也没有。修复代码，让它能按照预期的方式工作。
      CSD U6 getProperty var: "# `getProperty`（获取属性）和变量\\\\r\n\n\\\\r\n你也许注意到了，在上一关中，我们用了一个_变量_来存储从`getProperty`（获取属性）中获得的值。这样使用变量技能让我们获取设计元素的属性，还能在晚一些时候再使用它。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n当提交按钮被点击时，程序会获得\"name_input\"中的文本，然后将这个值设置到\"name_output\"的文本属性上。它将文本存储到一个叫做`name`（名字）的变量中，但还没有完成。\\\\r\n\\\\r\n用一个`getProperty`（获取属性）模块来将\"name\\_input\"的文本属性赋值给`name`变量。通过输入你的名字，并点击“提交”来测试你的程序。"
      CSD U6 getProperty xy challenge: |-
        # 挑战：让它成为你自己的\\r

        \\r
        用这个程序来继续试试获取和设置属性。这里有些你可以尝试的东西：\\r
        \\r

        -   加一个按钮让摩托车返回屏幕的中央。\\r
        -   加一些按钮让摩托车一次能在两个方向上移动（比如右和上）\\r
        -   用一个有颜色名字的下拉框来改变摩托车的颜色。\\r
        -   当点击按钮时，用文本输入来控制摩托车移动的距离。
      CSD U6 getProperty xy design: |-
        # 设计模式又回来了！\\r

        \\r
        现在，你又能使用设计模式了，你可以添加一些自己的元素。摩托车现在应该能上下移动了，但怎样让它能左右移动呢？\\r
        \\r

        # 这样做\\r

        \\r
        在设计模式中再添加两个按钮来让它左右移动，然后写上代码，在点击按钮时移动摩托车。
      CSD U6 getProperty xy: "# 用属性移动\\\\r\n\n\\\\r\n早先，我们用了`setProperty()`（设置属性）来改变屏幕上元素的x和y位置，但我们只能将它们要么移动到一个特定位置，要么移动到一个随机位置。通过使用`getProperty`（获取属性）来找到一个元素的当前位置，我们可以使用第3单元学会的**计数器模式**来更新位置。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n这个程序有两个按钮来将摩托车上下移动。把“up”（上）按钮的代码当作例子，你能让\"down\"（下）按钮也起作用吗？"
      CSD U6 getters debug: "# LED灯和蜂鸣器控制器\\\\r\n\n\\\\r\n这个程序操作了LED灯和蜂鸣器，但它有些问题。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\n-   读一读程序，理解它应该如何工作。\\\\r\n-   \\*\n    找到并修复缺陷，让程序能够正常工作。"
      CSD U6 getters debug_2018: "# LED灯和蜂鸣器控制器\\\\r\n\n\\\\r\n这个程序操作了LED灯和蜂鸣器，但它有些问题。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\n-   读一读程序，理解它应该如何工作。\\\\r\n-   \\*\n    找到并修复缺陷，让程序能够正常工作。"
      CSD U6 getters debug_2019: "# LED灯和蜂鸣器控制器\\\\r\n\n\\\\r\n这个程序操作了LED灯和蜂鸣器，但它有些问题。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\n-   读一读程序，理解它应该如何工作。\\\\r\n-   \\*\n    找到并修复缺陷，让程序能够正常工作。"
      CSD U6 goalie: |-
        # 用数据更新数值\\r

        \\r
        在本程序里，守门员试着拦住足球，但现在球不动了。\\r
        \\r
        \\r

        # 这样做\\r

        \\r

        -   使用计数器模式来更新球的 `x` 值，这样它可以穿过屏幕。
      CSD U6 goalie_2018: |-
        # 用数据更新数值\\r

        \\r
        在本程序里，守门员试着拦住足球，但现在球不动了。\\r
        \\r
        \\r

        # 这样做\\r

        \\r

        -   使用计数器模式来更新球的 `x` 值，这样它可以穿过屏幕。
      CSD U6 goalie_2019: |-
        # 用数据更新数值\\r

        \\r
        在本程序里，守门员试着拦住足球，但现在球不动了。\\r
        \\r
        \\r

        # 这样做\\r

        \\r

        -   使用计数器模式来更新球的 `x` 值，这样它可以穿过屏幕。
      CSD U6 interval predict: |-
        # 间隔\\r

        \\r
        现在我们用滑动条来影响LED灯的行为。就像我们可以改变蜂鸣器的频率和持续时间一样，我们也能改变LED的闪烁或脉动的间隔时间。\\r
        \\r

        # 这样做\\r

        \\r
        \*
        读一读代码，预测一下程序会做什么。然后点击“运行”来测试一下你的预测。
      CSD U6 interval predict_2018: |-
        # 间隔\\r

        \\r
        现在我们用滑动条来影响LED灯的行为。就像我们可以改变蜂鸣器的频率和持续时间一样，我们也能改变LED的闪烁或脉动的间隔时间。\\r
        \\r

        # 这样做\\r

        \\r
        \*
        读一读代码，预测一下程序会做什么。然后点击“运行”来测试一下你的预测。
      CSD U6 interval predict_2019: |-
        # 间隔\\r

        \\r
        现在我们用滑动条来影响LED灯的行为。就像我们可以改变蜂鸣器的频率和持续时间一样，我们也能改变LED的闪烁或脉动的间隔时间。\\r
        \\r

        # 这样做\\r

        \\r
        \*
        读一读代码，预测一下程序会做什么。然后点击“运行”来测试一下你的预测。
      CSD U6 interval: 预测关卡
      CSD U6 interval_2018: 预测关卡
      CSD U6 interval_2019: 预测关卡
      CSD U6 investigate orientation: |-
        # 倾斜和转动\\r

        \\r
        此程序显示主板的倾斜和转动，并且能根据数值改变颜色。\\r
        \\r

        # 这样做\\r

        \\r
        让程序将主板倾斜到正确的斜度和转动来更改相应的颜色。\\r
        \\r

        <div
        style="display:inline-block; background-color: skyblue; height: 30px; width:30px">&nbsp;</div>
        斜度: 0 |转动: -20\r
        \r
        <div style="display:inline-block; background-color:
        burlywood; height: 30px; width:30px">&nbsp;</div>斜度:30 |转动: 0 \r
        \r
        <div
        style="display:inline-block; background-color: mistyrose; height: 30px; width:30px">&nbsp;</div>
        斜度:-15 |转动：10\r
        \r
        <div style="display:inline-block; background-color:
        yellowgreen; height: 30px; width:30px">&nbsp;</div> 斜度: 5 |转动：-25\r
        \r
        <div style="display:inline-block; background-color: thistle; height:
        30px; width:30px">&nbsp;</div> 斜度:10 |转动30 \r
        \r
        你应该往哪个方向倾斜才能得到一个正斜度？\r
        \r
        你应该往哪个方向倾斜才能得到一个负转动值？
      CSD U6 investigate orientation_2018: |-
        # 倾斜和转动\\r

        \\r
        此程序显示主板的倾斜和转动，并且能根据数值改变颜色。\\r
        \\r

        # 这样做\\r

        \\r
        让程序将主板倾斜到正确的斜度和转动来更改相应的颜色。\\r
        \\r

        <div
        style="display:inline-block; background-color: skyblue; height: 30px; width:30px">&nbsp;</div>
        斜度: 0 |转动: -20\r
        \r
        <div style="display:inline-block; background-color:
        burlywood; height: 30px; width:30px">&nbsp;</div>斜度:30 |转动: 0 \r
        \r
        <div
        style="display:inline-block; background-color: mistyrose; height: 30px; width:30px">&nbsp;</div>
        斜度:-15 |转动：10\r
        \r
        <div style="display:inline-block; background-color:
        yellowgreen; height: 30px; width:30px">&nbsp;</div> 斜度: 5 |转动：-25\r
        \r
        <div style="display:inline-block; background-color: thistle; height:
        30px; width:30px">&nbsp;</div> 斜度:10 |转动30 \r
        \r
        你应该往哪个方向倾斜才能得到一个正斜度？\r
        \r
        你应该往哪个方向倾斜才能得到一个负转动值？
      CSD U6 investigate orientation_2019: |-
        # 倾斜和转动\\r

        \\r
        此程序显示主板的倾斜和转动，并且能根据数值改变颜色。\\r
        \\r

        # 这样做\\r

        \\r
        让程序将主板倾斜到正确的斜度和转动来更改相应的颜色。\\r
        \\r

        <div
        style="display:inline-block; background-color: skyblue; height: 30px; width:30px">&nbsp;</div>
        斜度: 0 |转动: -20\r
        \r
        <div style="display:inline-block; background-color:
        burlywood; height: 30px; width:30px">&nbsp;</div>斜度:30 |转动: 0 \r
        \r
        <div
        style="display:inline-block; background-color: mistyrose; height: 30px; width:30px">&nbsp;</div>
        斜度:-15 |转动：10\r
        \r
        <div style="display:inline-block; background-color:
        yellowgreen; height: 30px; width:30px">&nbsp;</div> 斜度: 5 |转动：-25\r
        \r
        <div style="display:inline-block; background-color: thistle; height:
        30px; width:30px">&nbsp;</div> 斜度:10 |转动30 \r
        \r
        你应该往哪个方向倾斜才能得到一个正斜度？\r
        \r
        你应该往哪个方向倾斜才能得到一个负转动值？
      CSD U6 iter create notes: |-
        # 音乐播放器\\r

         这个程序让你在不同音符上挥舞指挥棒来演奏音乐, 但它缺少函数定义。\\r
        \\r

        # 这样做\\r

        -   创建一个`checkNotes()`（检查音符）函数, 它将在 "音符" 数组中的所有条目上调用 `checkNote(note)`。
      CSD U6 iter create notes_2018: |-
        # 音乐播放器\\r

         这个程序让你在不同音符上挥舞指挥棒来演奏音乐, 但它缺少函数定义。\\r
        \\r

        # 这样做\\r

        -   创建一个`checkNotes()`（检查音符）函数, 它将在 "音符" 数组中的所有条目上调用 `checkNote(note)`。
      CSD U6 iter create notes_2019: |-
        # 音乐播放器\\r

         这个程序让你在不同音符上挥舞指挥棒来演奏音乐, 但它缺少函数定义。\\r
        \\r

        # 这样做\\r

        -   创建一个`checkNotes()`（检查音符）函数, 它将在 "音符" 数组中的所有条目上调用 `checkNote(note)`。
      CSD U6 iter modify bugs: |-
        # 虫子振动器\\r

        \\r
        这个程序在主板摇晃的时候振动虫子，但它只对一只虫子起作用。\\r
        \\r

        # 这样做\\r

        -   更改`moveBugs()`（移动虫子） 函数, 使其为每个颜色的虫子调用`moveBug(color)`. \\r
        -   （提示：查看`detectHits()`函数来获得一些提示。）
      CSD U6 iter modify bugs_2018: |-
        # 虫子振动器\\r

        \\r
        这个程序在主板摇晃的时候振动虫子，但它只对一只虫子起作用。\\r
        \\r

        # 这样做\\r

        -   更改`moveBugs()`（移动虫子） 函数, 使其为每个颜色的虫子调用`moveBug(color)`. \\r
        -   （提示：查看`detectHits()`函数来获得一些提示。）
      CSD U6 iter modify bugs_2019: |-
        # 虫子振动器\\r

        \\r
        这个程序在主板摇晃的时候振动虫子，但它只对一只虫子起作用。\\r
        \\r

        # 这样做\\r

        -   更改`moveBugs()`（移动虫子） 函数, 使其为每个颜色的虫子调用`moveBug(color)`. \\r
        -   （提示：查看`detectHits()`函数来获得一些提示。）
      CSD U6 iter predict bubbles contained: |-
        # 鱼泡泡\\r

        \\r
        这个程序和云的程序一样用了声音传感器。当你吹向主板时，会有多少个泡泡移动？
      CSD U6 iter predict bubbles contained_2018: |-
        # 鱼泡泡\\r

        \\r
        这个程序和云的程序一样用了声音传感器。当你吹向主板时，会有多少个泡泡移动？
      CSD U6 iter predict bubbles contained_2019: |-
        # 鱼泡泡\\r

        \\r
        这个程序和云的程序一样用了声音传感器。当你吹向主板时，会有多少个泡泡移动？
      CSD U6 iter predict bubbles: "![](https://images.code.org/52f474adbbc3bdd87aaae407c9ebf588-image-1515690462464.png)"
      CSD U6 iter predict bubbles_2018: "![](https://images.code.org/e5a08f29a9c4e306de5553dafca9fb5d-image-1467913845542.gif)"
      CSD U6 iter predict bubbles_2019: "![](https://images.code.org/e5a08f29a9c4e306de5553dafca9fb5d-image-1467913845542.gif)"
      CSD U6 light pattern challenge: |-
        # 挑战：更多模式\\r

        \\r
        添加更多的一些模式。找个伙伴，将他们的模式作为一个选项。确保将每个模式都放到它自己的函数中。
      CSD U6 light pattern challenge_2018: |-
        # 挑战：更多模式\\r

        \\r
        添加更多的一些模式。找个伙伴，将他们的模式作为一个选项。确保将每个模式都放到它自己的函数中。
      CSD U6 light pattern challenge_2019: |-
        # 挑战：更多模式\\r

        \\r
        添加更多的一些模式。找个伙伴，将他们的模式作为一个选项。确保将每个模式都放到它自己的函数中。
      CSD U6 light pattern off: |-
        # 关掉它\\r

        \\r
        当你启动这个应用时，你的灯是关着的，但要尽快选择一个图案，现在没有办法将灯再关掉！\\r
        \\r

        # 这样做\\r

        \\r
        创建一个函数将所有LED灯都关掉，然后增加一个“关闭"按钮来关闭所有的彩色LED灯。
      CSD U6 light pattern off_2018: |-
        # 关掉它\\r

        \\r
        当你启动这个应用时，你的灯是关着的，但要尽快选择一个图案，现在没有办法将灯再关掉！\\r
        \\r

        # 这样做\\r

        \\r
        创建一个函数将所有LED灯都关掉，然后增加一个“关闭"按钮来关闭所有的彩色LED灯。
      CSD U6 light pattern off_2019: |-
        # 关掉它\\r

        \\r
        当你启动这个应用时，你的灯是关着的，但要尽快选择一个图案，现在没有办法将灯再关掉！\\r
        \\r

        # 这样做\\r

        \\r
        创建一个函数将所有LED灯都关掉，然后增加一个“关闭"按钮来关闭所有的彩色LED灯。
      CSD U6 light show predict: |-
        # 上演灯光秀\\r

        \\r
        这个应用能让你用LED灯上演灯光秀。\\r
        \\r
        和你的伙伴一起看看代码，并回答这些问题：\\r
        \\r

        -   这行代码会做什么：`setProperty("screen", "background-color", rgb(randomNumber(0,255),
            randomNumber(0,255), randomNumber(0,255)));`?\\r
            \\r
            一旦回答了这个问题，运行代码并点击按钮看看会发生什么。
      CSD U6 light show predict_2018: |-
        # 上演灯光秀\\r

        \\r
        这个应用能让你用LED灯上演灯光秀。\\r
        \\r
        和你的伙伴一起看看代码，并回答这些问题：\\r
        \\r

        -   这行代码会做什么：`setProperty("screen", "background-color", rgb(randomNumber(0,255),
            randomNumber(0,255), randomNumber(0,255)));`?\\r
            \\r
            一旦回答了这个问题，运行代码并点击按钮看看会发生什么。
      CSD U6 light show predict_2019: |-
        # 上演灯光秀\\r

        \\r
        这个应用能让你用LED灯上演灯光秀。\\r
        \\r
        和你的伙伴一起看看代码，并回答这些问题：\\r
        \\r

        -   这行代码会做什么：`setProperty("screen", "background-color", rgb(randomNumber(0,255),
            randomNumber(0,255), randomNumber(0,255)));`?\\r
            \\r
            一旦回答了这个问题，运行代码并点击按钮看看会发生什么。
      CSD U6 making music w arrays mod: |-
        # 更改数组中的元素\\r

        \\r
        到目前为止, 你一直都在使用数组元素。现在, 你将更改这些元素的内容。\\r
        \\r
        在下面的代码中有一个名为`notes`（音符）的数组，它的里面是蜂鸣器可以播放的音符。每次按下左键时, 蜂鸣器都会随机播放这些音符中的一个。但是，`notes`数组中的所有音符都是相同的。\\r
        \\r

        # 这样做\\r

        \\r

        -   更改`notes`数组的元素，使得每个音符都不同。
      CSD U6 move motorcycle: "# 用属性移动\\\\r\n\n\\\\r\n早先，我们用了`setProperty()`（设置属性）来改变屏幕上元素的x和y位置，但我们只能将它们要么移动到一个特定位置，要么移动到一个随机位置。通过使用`getProperty`（获取属性）来找到一个元素的当前位置，我们可以使用第3单元学会的**计数器模式**来更新位置。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n\n-   读一下程序，和你的伙伴讨论一下左按钮是如何让摩托车向上走的。\\\\r\n-   用左按钮的代码为示例，给右按钮编程，让它能将摩托车向下移动。"
      CSD U6 move motorcycle_2018: "# 用属性移动\\\\r\n\n\\\\r\n早先，我们用了`setProperty()`（设置属性）来改变屏幕上元素的x和y位置，但我们只能将它们要么移动到一个特定位置，要么移动到一个随机位置。通过使用`getProperty`（获取属性）来找到一个元素的当前位置，我们可以使用第3单元学会的**计数器模式**来更新位置。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n\n-   读一下程序，和你的伙伴讨论一下左按钮是如何让摩托车向上走的。\\\\r\n-   用左按钮的代码为示例，给右按钮编程，让它能将摩托车向下移动。"
      CSD U6 move motorcycle_2019: "# 用属性移动\\\\r\n\n\\\\r\n早先，我们用了`setProperty()`（设置属性）来改变屏幕上元素的x和y位置，但我们只能将它们要么移动到一个特定位置，要么移动到一个随机位置。通过使用`getProperty`（获取属性）来找到一个元素的当前位置，我们可以使用第3单元学会的**计数器模式**来更新位置。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n\n-   读一下程序，和你的伙伴讨论一下左按钮是如何让摩托车向上走的。\\\\r\n-   用左按钮的代码为示例，给右按钮编程，让它能将摩托车向下移动。"
      CSD U6 onChange: |-
        # onChange（当改变时）\\r

        \\r
        在上一关，程序只会在你点击了左按钮时从滑动条获得间隔值。有时，你会希望当用户选择了新的值以后，尽快改变LED的间隔值。为了做到这一点，你需要使用“onChange”（当改变时）事件。\\r
        \\r

        # 这样做\\r

        \\r

        -   看看程序里的第一个事件模块，并找到它在哪里放了“onChange”（当改变时）。\\r
        -   在事件模块中，获得从滑动条里获得间隔值，并将它用到LED闪烁的新速度上。\\r
        -   运行你的程序，移动滑动条来看看LED的速度是否自动变化了。
      CSD U6 params create colors: |-
        # 颜色选取器\\r

        \\r
        在这个程序中，按屏幕底部的按钮会更改图像和颜色指示灯的颜色。\\r
        \\r

        # 这样做\\r

        -   创建一个函数`chooseColor(color)`（选择颜色），将每个图像和彩色LED灯改为给定的颜色。\\r
        -   在事件模块中调用函数，使所有按钮都工作正常。
      CSD U6 params create colors_2018: |-
        # 颜色选取器\\r

        \\r
        在这个程序中，按屏幕底部的按钮会更改图像和颜色指示灯的颜色。\\r
        \\r

        # 这样做\\r

        -   创建一个函数`chooseColor(color)`（选择颜色），将每个图像和彩色LED灯改为给定的颜色。\\r
        -   在事件模块中调用函数，使所有按钮都工作正常。
      CSD U6 params create colors_2019: |-
        # 颜色选取器\\r

        \\r
        在这个程序中，按屏幕底部的按钮会更改图像和颜色指示灯的颜色。\\r
        \\r

        # 这样做\\r

        -   创建一个函数`chooseColor(color)`（选择颜色），将每个图像和彩色LED灯改为给定的颜色。\\r
        -   在事件模块中调用函数，使所有按钮都工作正常。
      CSD U6 params predict contained: |-
        # 虫子爬行\\r

        \\r
        查看下面的程序, 特别注意`crawl(bug)`（爬行）函数。如果按下左键或右键会发生什么情况？
      CSD U6 params predict contained_2018: |-
        # 虫子爬行\\r

        \\r
        查看下面的程序, 特别注意`crawl(bug)`（爬行）函数。如果按下左键或右键会发生什么情况？
      CSD U6 params predict contained_2019: |-
        # 虫子爬行\\r

        \\r
        查看下面的程序, 特别注意`crawl(bug)`（爬行）函数。如果按下左键或右键会发生什么情况？
      CSD U6 params starchaser 1: |-
        # 制作 ' loopStar (颜色) ' 函数\\r

        \\r
        现在只有红的的星星起作用，因此, 你需要更改此代码。\\r
        \\r

        # 这样做\\r

        -   使用`loopRedStar()`（循环红色星星）函数中的代码创建`loopStar(color)`函数，该该函数可以作用于任何星星。\\r
        -   测试函数，调用`loopStars()`函数中的`loopStar("red")`和`loopStar("blue")`。
      CSD U6 params starchaser 1_2018: |-
        # 制作 ' loopStar (颜色) ' 函数\\r

        \\r
        现在只有红的的星星起作用，因此, 你需要更改此代码。\\r
        \\r

        # 这样做\\r

        -   使用`loopRedStar()`（循环红色星星）函数中的代码创建`loopStar(color)`函数，该该函数可以作用于任何星星。\\r
        -   测试函数，调用`loopStars()`函数中的`loopStar("red")`和`loopStar("blue")`。
      CSD U6 params starchaser 1_2019: |-
        # 制作 ' loopStar (颜色) ' 函数\\r

        \\r
        现在只有红的的星星起作用，因此, 你需要更改此代码。\\r
        \\r

        # 这样做\\r

        -   使用`loopRedStar()`（循环红色星星）函数中的代码创建`loopStar(color)`函数，该该函数可以作用于任何星星。\\r
        -   测试函数，调用`loopStars()`函数中的`loopStar("red")`和`loopStar("blue")`。
      CSD U6 params starchaser 2: |-
        # 星星追逐者\\r

        \\r
        现在你需要让所有的星星在屏幕上循环。\\r
        \\r

        # 这样做\\r

        -   在`loopStars()`函数内使用一个`计数循环`，使每颗星在 "starArray" 循环中环绕屏幕。
      CSD U6 params starchaser 2_2018: |-
        # 星星追逐者\\r

        \\r
        现在你需要让所有的星星在屏幕上循环。\\r
        \\r

        # 这样做\\r

        -   在`loopStars()`函数内使用一个`计数循环`，使每颗星在 "starArray" 循环中环绕屏幕。
      CSD U6 params starchaser 2_2019: |-
        # 星星追逐者\\r

        \\r
        现在你需要让所有的星星在屏幕上循环。\\r
        \\r

        # 这样做\\r

        -   在`loopStars()`函数内使用一个`计数循环`，使每颗星在 "starArray" 循环中环绕屏幕。
      CSD U6 params starchaser 3: |-
        # 星星追逐者\\r

        \\r
        所有星星都在循环里，但你只能抓住红色的星星。\\r
        \\r

        # 这样做\\r

        -   使用`moveRedStar()`（移动红色的星星）函数中的代码来制作一个`moveStar(color)`函数，它可以移动任何星星。\\r
        -   使用`checkRedStar()`（检查红色的星星）函数中的代码来制作一个`checkStar(color)`函数，它可以适用于任何星星。\\r
        -   通过在事件模块内调用`checkStar("red")`和`checkStar("blue")`函数来测试此代码。
      CSD U6 params starchaser 3_2018: |-
        # 星星追逐者\\r

        \\r
        所有星星都在循环里，但你只能抓住红色的星星。\\r
        \\r

        # 这样做\\r

        -   使用`moveRedStar()`（移动红色的星星）函数中的代码来制作一个`moveStar(color)`函数，它可以移动任何星星。\\r
        -   使用`checkRedStar()`（检查红色的星星）函数中的代码来制作一个`checkStar(color)`函数，它可以适用于任何星星。\\r
        -   通过在事件模块内调用`checkStar("red")`和`checkStar("blue")`函数来测试此代码。
      CSD U6 params starchaser 3_2019: |-
        # 星星追逐者\\r

        \\r
        所有星星都在循环里，但你只能抓住红色的星星。\\r
        \\r

        # 这样做\\r

        -   使用`moveRedStar()`（移动红色的星星）函数中的代码来制作一个`moveStar(color)`函数，它可以移动任何星星。\\r
        -   使用`checkRedStar()`（检查红色的星星）函数中的代码来制作一个`checkStar(color)`函数，它可以适用于任何星星。\\r
        -   通过在事件模块内调用`checkStar("red")`和`checkStar("blue")`函数来测试此代码。
      CSD U6 params starchaser 4: |-
        # 星星追逐者\\r

        \\r
        现在让它能在所有的星星上起作用\\r
        \\r

        # 这样做\\r

        -   创建一个`checkStars()`（检查星星）函数, 使用`计数循环`来检查星星数组中的每颗星. \\r
        -   调用事件模块中的 `checkStars()`函数来测试代码。
      CSD U6 params starchaser 4_2018: |-
        # 星星追逐者\\r

        \\r
        现在让它能在所有的星星上起作用\\r
        \\r

        # 这样做\\r

        -   创建一个`checkStars()`（检查星星）函数, 使用`计数循环`来检查星星数组中的每颗星. \\r
        -   调用事件模块中的 `checkStars()`函数来测试代码。
      CSD U6 params starchaser 4_2019: |-
        # 星星追逐者\\r

        \\r
        现在让它能在所有的星星上起作用\\r
        \\r

        # 这样做\\r

        -   创建一个`checkStars()`（检查星星）函数, 使用`计数循环`来检查星星数组中的每颗星. \\r
        -   调用事件模块中的 `checkStars()`函数来测试代码。
      CSD U6 params starchaser 5: |-
        # 星星追逐者\\r

        \\r
        现在你可以添加额外的星星了，并且函数也会对它们起作用。\\r
        \\r

        # 这样做\\r

        -   在设计模式下, 复制其中一颗星, 并将其名称和颜色更改为"yellow"（黄色）。\\r
        -   添加一个新元素 "yellow"到星星数组中。\\r
        -   用新的星星来测试游戏。
      CSD U6 params starchaser 5_2018: |-
        # 星星追逐者\\r

        \\r
        现在你可以添加额外的星星了，并且函数也会对它们起作用。\\r
        \\r

        # 这样做\\r

        -   在设计模式下, 复制其中一颗星, 并将其名称和颜色更改为"yellow"（黄色）。\\r
        -   添加一个新元素 "yellow"到星星数组中。\\r
        -   用新的星星来测试游戏。
      CSD U6 params starchaser 5_2019: |-
        # 星星追逐者\\r

        \\r
        现在你可以添加额外的星星了，并且函数也会对它们起作用。\\r
        \\r

        # 这样做\\r

        -   在设计模式下, 复制其中一颗星, 并将其名称和颜色更改为"yellow"（黄色）。\\r
        -   添加一个新元素 "yellow"到星星数组中。\\r
        -   用新的星星来测试游戏。
      CSD U6 params starchaser challenge 1: |-
        # 星星追逐者 \\r

        \\r
        现在你有了一个可以正常工作的游戏，嗨可以用一些不同的功能来挑战自己。\\r
        \\r

        # 这样做\\r

        -   用户开始有5条 "生命", 每次用户碰到 **错误**的星星都会失去一条生命。\\r
        -   制作一个完成屏幕, 当用户耗尽生命时就改变屏幕。
      CSD U6 params starchaser challenge 1_2018: |-
        # 星星追逐者 \\r

        \\r
        现在你有了一个可以正常工作的游戏，嗨可以用一些不同的功能来挑战自己。\\r
        \\r

        # 这样做\\r

        -   用户开始有5条 "生命", 每次用户碰到 **错误**的星星都会失去一条生命。\\r
        -   制作一个完成屏幕, 当用户耗尽生命时就改变屏幕。
      CSD U6 params starchaser challenge 1_2019: |-
        # 星星追逐者 \\r

        \\r
        现在你有了一个可以正常工作的游戏，嗨可以用一些不同的功能来挑战自己。\\r
        \\r

        # 这样做\\r

        -   用户开始有5条 "生命", 每次用户碰到 **错误**的星星都会失去一条生命。\\r
        -   制作一个完成屏幕, 当用户耗尽生命时就改变屏幕。
      CSD U6 params starchaser challenge 2: |-
        # 星星追逐者\\r

        \\r
        现在你有了一个可以正常工作的游戏，你可以用一些不同的功能来挑战自己。\\r
        \\r

        # 这样做\\r

        -   让玩家在按下左键时回到屏幕中间。
      CSD U6 params starchaser challenge 2_2018: |-
        # 星星追逐者\\r

        \\r
        现在你有了一个可以正常工作的游戏，你可以用一些不同的功能来挑战自己。\\r
        \\r

        # 这样做\\r

        -   让玩家在按下左键时回到屏幕中间。
      CSD U6 params starchaser challenge 2_2019: |-
        # 星星追逐者\\r

        \\r
        现在你有了一个可以正常工作的游戏，你可以用一些不同的功能来挑战自己。\\r
        \\r

        # 这样做\\r

        -   让玩家在按下左键时回到屏幕中间。
      CSD U6 params starchaser challenge: |-
        # 星星追逐者 \\r

        \\r
        现在你有了一个可以正常工作的游戏，嗨可以用一些不同的功能来挑战自己。\\r
        \\r

        # 这样做\\r

        -   用户开始有5条 "生命", 每次用户碰到 **错误**的星星都会失去一条生命。\\r
        -   制作一个完成屏幕, 当用户耗尽生命时就改变屏幕。
      CSD U6 params starchaser intro: |-
        # 星星追逐者\\r

        \\r
        在这个游戏中, 用户试图根据LED灯的颜色来捕捉星星。\\r
        \\r

        # 这样做\\r

        -   玩此游戏并和合作伙伴讨论以下内容:\\r
        -   该程序可能需要哪些函数？\\r
        -   这些函数应该有哪些参数？
      CSD U6 params starchaser intro_2018: |-
        # 星星追逐者\\r

        \\r
        在这个游戏中, 用户试图根据LED灯的颜色来捕捉星星。\\r
        \\r

        # 这样做\\r

        -   玩此游戏并和合作伙伴讨论以下内容:\\r
        -   该程序可能需要哪些函数？\\r
        -   这些函数应该有哪些参数？
      CSD U6 params starchaser intro_2019: |-
        # 星星追逐者\\r

        \\r
        在这个游戏中, 用户试图根据LED灯的颜色来捕捉星星。\\r
        \\r

        # 这样做\\r

        -   玩此游戏并和合作伙伴讨论以下内容:\\r
        -   该程序可能需要哪些函数？\\r
        -   这些函数应该有哪些参数？
      CSD U6 params starchaser template: 模板级别。
      CSD U6 params starchaser template_2018: 模板级别。
      CSD U6 params starchaser template_2019: 模板级别。
      CSD U6 plane shake: |-
        # 摇动\\r

        \\r
        像`change`（更改）事件一样，`shake`（摇动）事件随着主板移动而更新。
        然而，`shake`比 `change`更不敏感。为了触发它，主板必须是被真正晃动，而非只是稍微动了一下。\\r
        \\r

        # 这样做\\r

        \\r
        这架飞机需要晃动才能起飞。\\r
        \\r

        -   使用`shake`事件来移动飞机。\\r
        -   改变飞机的 x 和 y 坐标来移动它。
      CSD U6 predict LED button: 嵌入式预测
      CSD U6 predict LED button_2018: 嵌入式预测
      CSD U6 predict LED button_2019: 嵌入式预测
      CSD U6 random array notes: |-
        # 随机歌曲生成器 \\r

        \\r
        你需要制作一个随机歌曲生成器。当你按下一个按钮, 一个随机的音符会被播放。按住按钮的时间足够长，你将得到美妙的哗哗声响。\\r
        \\r
        在上节课，你用了`randomNumber()` 从数组中选择一个元素，因此，这应该是熟悉的。\\r
        \\r

        # 这样做\\r

        \\r

        -   添加代码从`notes`数组中随机选择一个音符，并播放它。\\r
        -   运行程序, 并按左按钮来听蜂鸣器发出的优美的曲调。
      CSD U6 random array notes_2018: |-
        # 随机歌曲生成器 \\r

        \\r
        你需要制作一个随机歌曲生成器。当你按下一个按钮, 一个随机的音符会被播放。按住按钮的时间足够长，你将得到美妙的哗哗声响。\\r
        \\r
        在上节课，你用了`randomNumber()` 从数组中选择一个元素，因此，这应该是熟悉的。\\r
        \\r

        # 这样做\\r

        \\r

        -   添加代码从`notes`数组中随机选择一个音符，并播放它。\\r
        -   运行程序, 并按左按钮来听蜂鸣器发出的优美的曲调。
      CSD U6 random array notes_2019: |-
        # 随机歌曲生成器 \\r

        \\r
        你需要制作一个随机歌曲生成器。当你按下一个按钮, 一个随机的音符会被播放。按住按钮的时间足够长，你将得到美妙的哗哗声响。\\r
        \\r
        在上节课，你用了`randomNumber()` 从数组中选择一个元素，因此，这应该是熟悉的。\\r
        \\r

        # 这样做\\r

        \\r

        -   添加代码从`notes`数组中随机选择一个音符，并播放它。\\r
        -   运行程序, 并按左按钮来听蜂鸣器发出的优美的曲调。
      CSD U6 sensor experiment embedded: |-
        # 传感器实验\\r

        \\r
        运行程序，并用你的主板做实验。试试用不同的方法和主板交互，来了解每个传感器可能是做什么的。根据你对每个传感器的实验，和你的邻座讨论：\\r
        \\r

        -   这个传感器是用来衡量什么的？\\r
        -   它的最大值是什么？\\r
        -   它的最小值是什么？
      CSD U6 sensor experiment embedded_2018: |-
        # 传感器实验\\r

        \\r
        运行程序，并用你的主板做实验。试试用不同的方法和主板交互，来了解每个传感器可能是做什么的。根据你对每个传感器的实验，和你的邻座讨论：\\r
        \\r

        -   这个传感器是用来衡量什么的？\\r
        -   它的最大值是什么？\\r
        -   它的最小值是什么？
      CSD U6 sensor experiment embedded_2019: |-
        # 传感器实验\\r

        \\r
        运行程序，并用你的主板做实验。试试用不同的方法和主板交互，来了解每个传感器可能是做什么的。根据你对每个传感器的实验，和你的邻座讨论：\\r
        \\r

        -   这个传感器是用来衡量什么的？\\r
        -   它的最大值是什么？\\r
        -   它的最小值是什么？
      CSD U6 setProperty Text: |-
        # 改变文本\\r

        \\r
        `setProperty()`（设置属性）模块能被用来改变设计元素的各种值，包括它们包含的文本。\\r
        \\r

        # 这样做\\r

        \\r

        -   拖拽一个`setProperty()`（设置属性）模块\\r
        -   为第一个参数，选择“name”（元素的标识）\\r
        -   为第二个参数，选择"text"（元素中想要设置大的属性）\\r
        -   为第三个参数，写上引号引起来的你的名字（要设置的值）\\r
            \\r
            _注意：我们已经移除了设计模式标签页，这样你能开始练习使用`setProperty()`（设置属性）。它会在晚一点你需要构建自己的应用时再出现。_
      CSD U6 setProperty Text_2018: |-
        # 改变文本\\r

        \\r
        `setProperty()`（设置属性）模块能被用来改变设计元素的各种值，包括它们包含的文本。\\r
        \\r

        # 这样做\\r

        \\r

        -   拖拽一个`setProperty()`（设置属性）模块\\r
        -   为第一个参数，选择“name”（元素的标识）\\r
        -   为第二个参数，选择"text"（元素中想要设置大的属性）\\r
        -   为第三个参数，写上引号引起来的你的名字（要设置的值）\\r
            \\r
            _注意：我们已经移除了设计模式标签页，这样你能开始练习使用`setProperty()`（设置属性）。它会在晚一点你需要构建自己的应用时再出现。_
      CSD U6 setProperty Text_2019: |-
        # 改变文本\\r

        \\r
        `setProperty()`（设置属性）模块能被用来改变设计元素的各种值，包括它们包含的文本。\\r
        \\r

        # 这样做\\r

        \\r

        -   拖拽一个`setProperty()`（设置属性）模块\\r
        -   为第一个参数，选择“name”（元素的标识）\\r
        -   为第二个参数，选择"text"（元素中想要设置大的属性）\\r
        -   为第三个参数，写上引号引起来的你的名字（要设置的值）\\r
            \\r
            _注意：我们已经移除了设计模式标签页，这样你能开始练习使用`setProperty()`（设置属性）。它会在晚一点你需要构建自己的应用时再出现。_
      CSD U6 setProperty hidden 2: |-
        # 显示/隐藏\\r

        \\r
        如果这个警报应用的一旦触发警报后不能关掉，那它就不是特别有用。让我们修好它。\\r
        \\r

        # 这样做\\r

        \\r
        添加第二个`onEvent()`（当事件发生时）模块来监视"stopAlarmButton"（停止监视按钮）是否被点击了。在这个模块里：\\r
        \\r
        \*
        将状态文本改为"关闭"\\r

        -   隐藏"stopAlarmButton"\\r
            \\r
            _暗示：
            "hidden"是一个布尔属性。如果为`false`（假）则按钮会显示，什么时候应该再将它隐藏起来？_
      CSD U6 setProperty hidden 2_2018: |-
        # 显示/隐藏\\r

        \\r
        如果这个警报应用的一旦触发警报后不能关掉，那它就不是特别有用。让我们修好它。\\r
        \\r

        # 这样做\\r

        \\r
        添加第二个`onEvent()`（当事件发生时）模块来监视"stopAlarmButton"（停止监视按钮）是否被点击了。在这个模块里：\\r
        \\r
        \*
        将状态文本改为"关闭"\\r

        -   隐藏"stopAlarmButton"\\r
            \\r
            _暗示：
            "hidden"是一个布尔属性。如果为`false`（假）则按钮会显示，什么时候应该再将它隐藏起来？_
      CSD U6 setProperty hidden 2_2019: |-
        # 显示/隐藏\\r

        \\r
        如果这个警报应用的一旦触发警报后不能关掉，那它就不是特别有用。让我们修好它。\\r
        \\r

        # 这样做\\r

        \\r
        添加第二个`onEvent()`（当事件发生时）模块来监视"stopAlarmButton"（停止监视按钮）是否被点击了。在这个模块里：\\r
        \\r
        \*
        将状态文本改为"关闭"\\r

        -   隐藏"stopAlarmButton"\\r
            \\r
            _暗示：
            "hidden"是一个布尔属性。如果为`false`（假）则按钮会显示，什么时候应该再将它隐藏起来？_
      CSD U6 setProperty hidden: |-
        # 隐藏\\r

        \\r
        设计元素有个属性叫做”hidden"（隐藏），它控制元素应该显示或隐藏。我们将会用这个属性来创建一个警报应用。注意，当程序开始时，一个按钮是隐藏的，另一个不是。\\r
        \\r
        我们已经为"triggerAlarmButton"（触发警报按钮）设置了一个事件处理函数。点击它时会做两件事：\\r
        \\r

        -   将"statusLabel"（状态标签）的"text"（文本） 属性设置为"打开"\\r
        -   设置"stopAlarmButton"的"hidden"属性为`false`（假）（这意味着它_不会_被隐藏起来）)\\r
            \\r
            # 这样做\\r
            \\r
        -   运行程序，并点击"Trigger Alarm"（触发警报）来看看它是如何工作的\\r
        -   将代码添加到"triggerAlarmButton"对应的事件处理函数中\\r
            \\r
            _注意："stopAlarmButton"按钮已经在屏幕上了，但它的"hidden"属性被设置为真了，所以程序启动时它不会显示出来。_
      CSD U6 setProperty hidden_2018: |-
        # 隐藏\\r

        \\r
        设计元素有个属性叫做”hidden"（隐藏），它控制元素应该显示或隐藏。我们将会用这个属性来创建一个警报应用。注意，当程序开始时，一个按钮是隐藏的，另一个不是。\\r
        \\r
        我们已经为"triggerAlarmButton"（触发警报按钮）设置了一个事件处理函数。点击它时会做两件事：\\r
        \\r

        -   将"statusLabel"（状态标签）的"text"（文本） 属性设置为"打开"\\r
        -   设置"stopAlarmButton"的"hidden"属性为`false`（假）（这意味着它_不会_被隐藏起来）)\\r
            \\r
            # 这样做\\r
            \\r
        -   运行程序，并点击"Trigger Alarm"（触发警报）来看看它是如何工作的\\r
        -   将代码添加到"triggerAlarmButton"对应的事件处理函数中\\r
            \\r
            _注意："stopAlarmButton"按钮已经在屏幕上了，但它的"hidden"属性被设置为真了，所以程序启动时它不会显示出来。_
      CSD U6 setProperty hidden_2019: |-
        # 隐藏\\r

        \\r
        设计元素有个属性叫做”hidden"（隐藏），它控制元素应该显示或隐藏。我们将会用这个属性来创建一个警报应用。注意，当程序开始时，一个按钮是隐藏的，另一个不是。\\r
        \\r
        我们已经为"triggerAlarmButton"（触发警报按钮）设置了一个事件处理函数。点击它时会做两件事：\\r
        \\r

        -   将"statusLabel"（状态标签）的"text"（文本） 属性设置为"打开"\\r
        -   设置"stopAlarmButton"的"hidden"属性为`false`（假）（这意味着它_不会_被隐藏起来）)\\r
            \\r
            # 这样做\\r
            \\r
        -   运行程序，并点击"Trigger Alarm"（触发警报）来看看它是如何工作的\\r
        -   将代码添加到"triggerAlarmButton"对应的事件处理函数中\\r
            \\r
            _注意："stopAlarmButton"按钮已经在屏幕上了，但它的"hidden"属性被设置为真了，所以程序启动时它不会显示出来。_
      CSD U6 setProperty xy click: |-
        # 点击时改变\\r

        \\r
        如果只能在程序启动时才能设置一个属性，这没什么用。毕竟，你只能在设计模式做所有事情。当你在`onEvent`（当事件发生时）里使用`setProperty`（设置属性）时，你就可以实现那些不能在设计模式做的工作了。\\r
        \\r

        # 这样做\\r

        \\r
        这里已经有了一个空的`onEvent`模块了，它在监视"simley"图片。在`onEvent`模块中，用两个
        `setProperty`模块来将笑脸符号移动到别的地方（它现在在什么地方不重要）。通过运行程序并点击笑脸来测试它。
      CSD U6 setProperty xy click_2018: |-
        # 点击时改变\\r

        \\r
        如果只能在程序启动时才能设置一个属性，这没什么用。毕竟，你只能在设计模式做所有事情。当你在`onEvent`（当事件发生时）里使用`setProperty`（设置属性）时，你就可以实现那些不能在设计模式做的工作了。\\r
        \\r

        # 这样做\\r

        \\r
        这里已经有了一个空的`onEvent`模块了，它在监视"simley"图片。在`onEvent`模块中，用两个
        `setProperty`模块来将笑脸符号移动到别的地方（它现在在什么地方不重要）。通过运行程序并点击笑脸来测试它。
      CSD U6 setProperty xy click_2019: |-
        # 点击时改变\\r

        \\r
        如果只能在程序启动时才能设置一个属性，这没什么用。毕竟，你只能在设计模式做所有事情。当你在`onEvent`（当事件发生时）里使用`setProperty`（设置属性）时，你就可以实现那些不能在设计模式做的工作了。\\r
        \\r

        # 这样做\\r

        \\r
        这里已经有了一个空的`onEvent`模块了，它在监视"simley"图片。在`onEvent`模块中，用两个
        `setProperty`模块来将笑脸符号移动到别的地方（它现在在什么地方不重要）。通过运行程序并点击笑脸来测试它。
      CSD U6 setProperty xy random: |-
        <img src="https://images.code.org/67c6cc358b235e2c2ae39f3f72a3e0b1-image-1507326303839.gif"
        style="float:right; max-width: 150px; margin: 10px;">\\r
        \\r

        # 随机化\\r

        \\r
        在第一次点击时移动非常好，但如果能让笑脸在_每次_点击时，都能移动到某个地方，就更酷了。幸运的是，我们可以用`randomNumber`（随机数字）模块做到这一点。\\r
        \\r

        # 这样做\\r

        \\r
        虽然可以使用"x"和"y"属性设置到一个特定的数字，但使用`randomNumber()`（随机数字）模块可以在每次笑脸被点击时，都生成一个新的随机的"x"和"y"值。\\r
        \\r
        _提示：应用实验室的屏幕是320像素宽，450像素高。随机数应该在什么范围内，才能保证整个笑脸都能完全显示在屏幕上？_\\r
      CSD U6 setProperty xy random_2018: |-
        <img src="https://images.code.org/67c6cc358b235e2c2ae39f3f72a3e0b1-image-1507326303839.gif"
        style="float:right; max-width: 150px; margin: 10px;">\\r
        \\r

        # 随机化\\r

        \\r
        在第一次点击时移动非常好，但如果能让笑脸在_每次_点击时，都能移动到某个地方，就更酷了。幸运的是，我们可以用`randomNumber`（随机数字）模块做到这一点。\\r
        \\r

        # 这样做\\r

        \\r
        虽然可以使用"x"和"y"属性设置到一个特定的数字，但使用`randomNumber()`（随机数字）模块可以在每次笑脸被点击时，都生成一个新的随机的"x"和"y"值。\\r
        \\r
        _提示：应用实验室的屏幕是320像素宽，450像素高。随机数应该在什么范围内，才能保证整个笑脸都能完全显示在屏幕上？_\\r
      CSD U6 setProperty xy random_2019: |-
        <img src="https://images.code.org/67c6cc358b235e2c2ae39f3f72a3e0b1-image-1507326303839.gif"
        style="float:right; max-width: 150px; margin: 10px;">\\r
        \\r

        # 随机化\\r

        \\r
        在第一次点击时移动非常好，但如果能让笑脸在_每次_点击时，都能移动到某个地方，就更酷了。幸运的是，我们可以用`randomNumber`（随机数字）模块做到这一点。\\r
        \\r

        # 这样做\\r

        \\r
        虽然可以使用"x"和"y"属性设置到一个特定的数字，但使用`randomNumber()`（随机数字）模块可以在每次笑脸被点击时，都生成一个新的随机的"x"和"y"值。\\r
        \\r
        _提示：应用实验室的屏幕是320像素宽，450像素高。随机数应该在什么范围内，才能保证整个笑脸都能完全显示在屏幕上？_\\r
      CSD U6 setProperty xy: |-
        # 改变位置

        每个设计元素（除了屏幕以外）都有"x"和"y"属性来控制它的位置。

        # 这样做

        <div markdown="1" style="float:right">

        ![expandable](https://images.code.org/3a67642609071cf6766c296b8ca5a68e-image-1526944857178.png)

        </div>

        用`setProperty()`（设置属性）模块来移动"red\_button"（红色按钮），让它和右边的图片一样。（点击图片查看大图）

        _注意：我们已经去掉了设计模式，这样你能练习使用setProperty（设置属性），但我们会在你创建自己应用的时候，再把它加回来。_
      CSD U6 setProperty xy_2018: |-
        # 改变位置

        每个设计元素（除了屏幕以外）都有"x"和"y"属性来控制它的位置。

        # 这样做

        <div markdown="1" style="float:right">

        ![expandable](https://images.code.org/3a67642609071cf6766c296b8ca5a68e-image-1526944857178.png)

        </div>

        用`setProperty()`（设置属性）模块来移动"red\_button"（红色按钮），让它和右边的图片一样。（点击图片查看大图）

        _注意：我们已经去掉了设计模式，这样你能练习使用setProperty（设置属性），但我们会在你创建自己应用的时候，再把它加回来。_
      CSD U6 setProperty xy_2019: |-
        # 改变位置

        每个设计元素（除了屏幕以外）都有"x"和"y"属性来控制它的位置。

        # 这样做

        <div markdown="1" style="float:right">

        ![expandable](https://images.code.org/3a67642609071cf6766c296b8ca5a68e-image-1526944857178.png)

        </div>

        用`setProperty()`（设置属性）模块来移动"red\_button"（红色按钮），让它和右边的图片一样。（点击图片查看大图）

        _注意：我们已经去掉了设计模式，这样你能练习使用setProperty（设置属性），但我们会在你创建自己应用的时候，再把它加回来。_
      CSD U6 slider intro: |-
        # 滑动条\\r

        \\r
        上次，你的用户只能在短和长的蜂鸣声中选择一个。为了让用户能够精确的控制蜂鸣器的持续时间，你需要一个滑动条。\\r
        \\r
        滑动条让用户可以选择一个在100到1000之间的值，作为蜂鸣声的持续时间。但是这里没弄对，所以它无法工作。\\r
        \\r

        # 这样做\\r

        -   查看一下代码，找到让持续时间无法正常设置的缺陷。\\r
            \\t\* (暗示：将鼠标悬停到黄色的三角上来查看关于代码什么地方错了的提示。)
      CSD U6 slider intro_2018: |-
        # 滑动条\\r

        \\r
        上次，你的用户只能在短和长的蜂鸣声中选择一个。为了让用户能够精确的控制蜂鸣器的持续时间，你需要一个滑动条。\\r
        \\r
        滑动条让用户可以选择一个在100到1000之间的值，作为蜂鸣声的持续时间。但是这里没弄对，所以它无法工作。\\r
        \\r

        # 这样做\\r

        -   查看一下代码，找到让持续时间无法正常设置的缺陷。\\r
            \\t\* (暗示：将鼠标悬停到黄色的三角上来查看关于代码什么地方错了的提示。)
      CSD U6 slider intro_2019: |-
        # 滑动条\\r

        \\r
        上次，你的用户只能在短和长的蜂鸣声中选择一个。为了让用户能够精确的控制蜂鸣器的持续时间，你需要一个滑动条。\\r
        \\r
        滑动条让用户可以选择一个在100到1000之间的值，作为蜂鸣声的持续时间。但是这里没弄对，所以它无法工作。\\r
        \\r

        # 这样做\\r

        -   查看一下代码，找到让持续时间无法正常设置的缺陷。\\r
            \\t\* (暗示：将鼠标悬停到黄色的三角上来查看关于代码什么地方错了的提示。)
      CSD U6 stillness game predict code: |-
        # 随加速度计而变\\r

        \\r
        此程序使用更改事件在每次主板移动时增加移动计量器。当移动计量器达到100, 警报就会响起。\\r
        \\r
        \\r

        # 这样做\\r

        此程序有两个需要修复的缺陷：\\r
        \\r

        -   移动仪表由按键按压触发, 而非加速度计的`change`事件。\\r
        -   程序员忘记了如何使用计数器模式来增加移动变量。\\r
            \\r
            一旦找到了缺陷，运行该程序，并尝试在不触发报警器的情况下将主板传递给你的合作伙伴。
      CSD U6 stillness game predict code_2018: |-
        # 随加速度计而变\\r

        \\r
        此程序使用更改事件在每次主板移动时增加移动计量器。当移动计量器达到100, 警报就会响起。\\r
        \\r
        \\r

        # 这样做\\r

        此程序有两个需要修复的缺陷：\\r
        \\r

        -   移动仪表由按键按压触发, 而非加速度计的`change`事件。\\r
        -   程序员忘记了如何使用计数器模式来增加移动变量。\\r
            \\r
            一旦找到了缺陷，运行该程序，并尝试在不触发报警器的情况下将主板传递给你的合作伙伴。
      CSD U6 stillness game predict code_2019: |-
        # 随加速度计而变\\r

        \\r
        此程序使用更改事件在每次主板移动时增加移动计量器。当移动计量器达到100, 警报就会响起。\\r
        \\r
        \\r

        # 这样做\\r

        此程序有两个需要修复的缺陷：\\r
        \\r

        -   移动仪表由按键按压触发, 而非加速度计的`change`事件。\\r
        -   程序员忘记了如何使用计数器模式来增加移动变量。\\r
            \\r
            一旦找到了缺陷，运行该程序，并尝试在不触发报警器的情况下将主板传递给你的合作伙伴。
      CSD U6 stillness game predict: |-
        # 加速度计事件\\r

        \\r
        和合作伙伴一起查看下面的代码。你认为它会做什么？做个猜测, 然后运行代码来找出答案！\\r
      CSD U6 test LED: "# 控制LED灯\\\\r\n\n\\\\r\n现在，你知道你的主板在工作了，你可以试试不同的LED模块。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\n-   点击\"运行\"，然后和你的伙伴讨论一下代码是如何工作的。\\\\r\n-   \\*\n    试试不同的LED模块，看看它们能做什么。\\\\r\n-   暗示：别忘了在改了代码后，点击\"重置\"来再次运行你的代码。"
      CSD U6 test LED_2018: "# 控制LED灯\\\\r\n\n\\\\r\n现在，你知道你的主板在工作了，你可以试试不同的LED模块。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\n-   点击\"运行\"，然后和你的伙伴讨论一下代码是如何工作的。\\\\r\n-   \\*\n    试试不同的LED模块，看看它们能做什么。\\\\r\n-   暗示：别忘了在改了代码后，点击\"重置\"来再次运行你的代码。"
      CSD U6 test LED_2019: "# 控制LED灯\\\\r\n\n\\\\r\n现在，你知道你的主板在工作了，你可以试试不同的LED模块。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\n-   点击\"运行\"，然后和你的伙伴讨论一下代码是如何工作的。\\\\r\n-   \\*\n    试试不同的LED模块，看看它们能做什么。\\\\r\n-   暗示：别忘了在改了代码后，点击\"重置\"来再次运行你的代码。"
      CSD U6 tugowar buzzer: |-
        # 胜利的蜂鸣器\\r

        \\r
        现在，你的项目向导描述中剩下的最后一件事情，就是蜂鸣器了。他应该在玩家1胜利时播放一个高的声音，在玩家2胜利时播放一个低的声音。\\r
        \\r

        # 这样做\\r

        \\r
        现在，我们已经能直接用`player`（玩家）参数来报告哪个玩家赢了，但这不能让蜂鸣器播放不同的声音。在条件里，要判断是否一个玩家赢了， 需要加入_另一个_条件来检查是哪一个玩家。如果(if)`player == "red"`（玩家等于红色）蜂鸣器应该播放一个高音，否则（else）播放一个低音。
      CSD U6 tugowar buzzer_2018: |-
        # 胜利的蜂鸣器\\r

        \\r
        现在，你的项目向导描述中剩下的最后一件事情，就是蜂鸣器了。他应该在玩家1胜利时播放一个高的声音，在玩家2胜利时播放一个低的声音。\\r
        \\r

        # 这样做\\r

        \\r
        现在，我们已经能直接用`player`（玩家）参数来报告哪个玩家赢了，但这不能让蜂鸣器播放不同的声音。在条件里，要判断是否一个玩家赢了， 需要加入_另一个_条件来检查是哪一个玩家。如果(if)`player == "red"`（玩家等于红色）蜂鸣器应该播放一个高音，否则（else）播放一个低音。
      CSD U6 tugowar buzzer_2019: |-
        # 胜利的蜂鸣器\\r

        \\r
        现在，你的项目向导描述中剩下的最后一件事情，就是蜂鸣器了。他应该在玩家1胜利时播放一个高的声音，在玩家2胜利时播放一个低的声音。\\r
        \\r

        # 这样做\\r

        \\r
        现在，我们已经能直接用`player`（玩家）参数来报告哪个玩家赢了，但这不能让蜂鸣器播放不同的声音。在条件里，要判断是否一个玩家赢了， 需要加入_另一个_条件来检查是哪一个玩家。如果(if)`player == "red"`（玩家等于红色）蜂鸣器应该播放一个高音，否则（else）播放一个低音。
      CSD U6 tugowar conditional: |-
        # 检查赢家\\r

        \\r
        你的游戏应该可以更好玩了。两个玩家可以点击它们自己的按钮，然后它们的表情符号会在屏幕上比赛。但我们仍然需要一个方法让某个玩家胜利。\\r
        \\r

        # 这样做\\r

        \\r
        在`checkWin()`（检查胜利）函数里加入一个条件，你需要检查是否某个玩家在点击时胜利了。现在，我们只需要用`console.log`来报告胜利者。\\r
        \\r
        \*
        在`checkWin()`的末尾添加一个如果条件语句\\r

        -   在如果条件里，检查是否`player_y`（玩家y）大于350 (或者用你在上一关决定的，显示在屏幕下的值)\\r
        -   在你的条件里，增加一个`console.log`来报告哪个玩家胜利了\\r
        -   测试和你的程序，确保它会在某个表情符号到达屏幕底部时，能够报告哪个玩家胜利了。
      CSD U6 tugowar conditional_2018: |-
        # 检查赢家\\r

        \\r
        你的游戏应该可以更好玩了。两个玩家可以点击它们自己的按钮，然后它们的表情符号会在屏幕上比赛。但我们仍然需要一个方法让某个玩家胜利。\\r
        \\r

        # 这样做\\r

        \\r
        在`checkWin()`（检查胜利）函数里加入一个条件，你需要检查是否某个玩家在点击时胜利了。现在，我们只需要用`console.log`来报告胜利者。\\r
        \\r
        \*
        在`checkWin()`的末尾添加一个如果条件语句\\r

        -   在如果条件里，检查是否`player_y`（玩家y）大于350 (或者用你在上一关决定的，显示在屏幕下的值)\\r
        -   在你的条件里，增加一个`console.log`来报告哪个玩家胜利了\\r
        -   测试和你的程序，确保它会在某个表情符号到达屏幕底部时，能够报告哪个玩家胜利了。
      CSD U6 tugowar conditional_2019: |-
        # 检查赢家\\r

        \\r
        你的游戏应该可以更好玩了。两个玩家可以点击它们自己的按钮，然后它们的表情符号会在屏幕上比赛。但我们仍然需要一个方法让某个玩家胜利。\\r
        \\r

        # 这样做\\r

        \\r
        在`checkWin()`（检查胜利）函数里加入一个条件，你需要检查是否某个玩家在点击时胜利了。现在，我们只需要用`console.log`来报告胜利者。\\r
        \\r
        \*
        在`checkWin()`的末尾添加一个如果条件语句\\r

        -   在如果条件里，检查是否`player_y`（玩家y）大于350 (或者用你在上一关决定的，显示在屏幕下的值)\\r
        -   在你的条件里，增加一个`console.log`来报告哪个玩家胜利了\\r
        -   测试和你的程序，确保它会在某个表情符号到达屏幕底部时，能够报告哪个玩家胜利了。
      CSD U6 tugowar demo: |-
        # 抓住那个虫子！\\r

        \\r
        这是一个拔河比赛的例子，你会在课程结束时创建一个。为了玩这个游戏，需要和另一个同学配对。一个同学在左边尽可能快的点击电路游戏板上的左按钮，另一个同学在右边也一样点击右按钮。谁先让虫子到达它们这边的，就取得了胜利。
      CSD U6 tugowar demo_2018: |-
        # 抓住那个虫子！\\r

        \\r
        这是一个拔河比赛的例子，你会在课程结束时创建一个。为了玩这个游戏，需要和另一个同学配对。一个同学在左边尽可能快的点击电路游戏板上的左按钮，另一个同学在右边也一样点击右按钮。谁先让虫子到达它们这边的，就取得了胜利。
      CSD U6 tugowar demo_2019: |-
        # 抓住那个虫子！\\r

        \\r
        这是一个拔河比赛的例子，你会在课程结束时创建一个。为了玩这个游戏，需要和另一个同学配对。一个同学在左边尽可能快的点击电路游戏板上的左按钮，另一个同学在右边也一样点击右按钮。谁先让虫子到达它们这边的，就取得了胜利。
      CSD U6 tugowar design 1.5: |-
        # 游戏屏幕设计\\r

        \\r
        在玩游戏的地方，我们已经增加了一个”game“（游戏）屏幕。它只需要一些轻微的调整。\\r
        \\r

        # 这样做\\r

        \\r
        切换到"game”（游戏）屏幕，用你的计划向导，通过改变两个表情图片的颜色来修好这个屏幕。\\r
        \\r
        可以随意调整其它想要的设计。
      CSD U6 tugowar design 1.5_2018: |-
        # 游戏屏幕设计\\r

        \\r
        在玩游戏的地方，我们已经增加了一个”game“（游戏）屏幕。它只需要一些轻微的调整。\\r
        \\r

        # 这样做\\r

        \\r
        切换到"game”（游戏）屏幕，用你的计划向导，通过改变两个表情图片的颜色来修好这个屏幕。\\r
        \\r
        可以随意调整其它想要的设计。
      CSD U6 tugowar design 1.5_2019: |-
        # 游戏屏幕设计\\r

        \\r
        在玩游戏的地方，我们已经增加了一个”game“（游戏）屏幕。它只需要一些轻微的调整。\\r
        \\r

        # 这样做\\r

        \\r
        切换到"game”（游戏）屏幕，用你的计划向导，通过改变两个表情图片的颜色来修好这个屏幕。\\r
        \\r
        可以随意调整其它想要的设计。
      CSD U6 tugowar design 1: "# 入门：屏幕设计\\\\r\n\n\\\\r\n你应该已经看过来这个项目的计划向导。这个项目向导中已经添加了一些工作了。基于项目向导，你能够完成剩下的工作。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n我们已经创建了一个\"start\"（开始）屏幕，并且包含了标题和一个\"play\"（开始）按钮。使用你的计划向导，完成这个屏幕的创建。你需要：\\\\r\n\\\\r\n\n-   更新标题文本为：\"表情符号比赛\"\\\\r\n-   用ID（标识）\"instructions\"来增加一个游戏说明。\\\\r\n    \\\\r\n    可以随意添加其它想要的设计。"
      CSD U6 tugowar design 1_2018: "# 入门：屏幕设计\\\\r\n\n\\\\r\n你应该已经看过来这个项目的计划向导。这个项目向导中已经添加了一些工作了。基于项目向导，你能够完成剩下的工作。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n我们已经创建了一个\"start\"（开始）屏幕，并且包含了标题和一个\"play\"（开始）按钮。使用你的计划向导，完成这个屏幕的创建。你需要：\\\\r\n\\\\r\n\n-   更新标题文本为：\"表情符号比赛\"\\\\r\n-   用ID（标识）\"instructions\"来增加一个游戏说明。\\\\r\n    \\\\r\n    可以随意添加其它想要的设计。"
      CSD U6 tugowar design 1_2019: "# 入门：屏幕设计\\\\r\n\n\\\\r\n你应该已经看过来这个项目的计划向导。这个项目向导中已经添加了一些工作了。基于项目向导，你能够完成剩下的工作。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n我们已经创建了一个\"start\"（开始）屏幕，并且包含了标题和一个\"play\"（开始）按钮。使用你的计划向导，完成这个屏幕的创建。你需要：\\\\r\n\\\\r\n\n-   更新标题文本为：\"表情符号比赛\"\\\\r\n-   用ID（标识）\"instructions\"来增加一个游戏说明。\\\\r\n    \\\\r\n    可以随意添加其它想要的设计。"
      CSD U6 tugowar design 2: "# 设计胜利的屏幕\\\\r\n\n\\\\r\n程序中的最终屏幕会显示谁赢了。它现在完全是空的。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n切换到\"win\"（胜利）然后基于你的项目向导设计它。要特别注意每个元素的ID（标识）。一旦你增加了必须的元素，就可以随意添加其它想要的设计了。"
      CSD U6 tugowar design 2_2018: "# 设计胜利的屏幕\\\\r\n\n\\\\r\n程序中的最终屏幕会显示谁赢了。它现在完全是空的。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n切换到\"win\"（胜利）然后基于你的项目向导设计它。要特别注意每个元素的ID（标识）。一旦你增加了必须的元素，就可以随意添加其它想要的设计了。"
      CSD U6 tugowar design 2_2019: "# 设计胜利的屏幕\\\\r\n\n\\\\r\n程序中的最终屏幕会显示谁赢了。它现在完全是空的。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n切换到\"win\"（胜利）然后基于你的项目向导设计它。要特别注意每个元素的ID（标识）。一旦你增加了必须的元素，就可以随意添加其它想要的设计了。"
      CSD U6 tugowar final: |-
        # 自己动手吧\\r

        \\r
        刚刚你使用了别人的计划来创建一个程序，现在是时候自己动手了。你想要创造什么功能或者挑战呢?\\r
        \\r

        # 这样做\\r

        \\r
        在下面选择一个挑战，或者自己想一个。\\r
        \\r

        -   改变屏幕的外观和布局\\r
        -   用蜂鸣器或LED灯来标识哪个按钮被按了。\\r
        -   设置"winner\_image"（胜利者图片）的"icon-color"（图标颜色）属性为胜利者的颜色。\\r
        -   将表情符号在开始时设置为悲伤的，然后半路上改为无表情的，到终点后改为高兴的。\\r
        -   用变量和条件来确保玩家只能在"game"屏幕显示后，才能移动它们的表情符号。
      CSD U6 tugowar final_2018: |-
        # 自己动手吧\\r

        \\r
        刚刚你使用了别人的计划来创建一个程序，现在是时候自己动手了。你想要创造什么功能或者挑战呢?\\r
        \\r

        # 这样做\\r

        \\r
        在下面选择一个挑战，或者自己想一个。\\r
        \\r

        -   改变屏幕的外观和布局\\r
        -   用蜂鸣器或LED灯来标识哪个按钮被按了。\\r
        -   设置"winner\_image"（胜利者图片）的"icon-color"（图标颜色）属性为胜利者的颜色。\\r
        -   将表情符号在开始时设置为悲伤的，然后半路上改为无表情的，到终点后改为高兴的。\\r
        -   用变量和条件来确保玩家只能在"game"屏幕显示后，才能移动它们的表情符号。
      CSD U6 tugowar final_2019: |-
        # 自己动手吧\\r

        \\r
        刚刚你使用了别人的计划来创建一个程序，现在是时候自己动手了。你想要创造什么功能或者挑战呢?\\r
        \\r

        # 这样做\\r

        \\r
        在下面选择一个挑战，或者自己想一个。\\r
        \\r

        -   改变屏幕的外观和布局\\r
        -   用蜂鸣器或LED灯来标识哪个按钮被按了。\\r
        -   设置"winner\_image"（胜利者图片）的"icon-color"（图标颜色）属性为胜利者的颜色。\\r
        -   将表情符号在开始时设置为悲伤的，然后半路上改为无表情的，到终点后改为高兴的。\\r
        -   用变量和条件来确保玩家只能在"game"屏幕显示后，才能移动它们的表情符号。
      CSD U6 tugowar movement 1: |-
        # 跟踪分数\\r

        \\r
        你的`score`变量应该用来跟踪每个用户点击了多少次它们的按钮。为了不让它一直上升，应该在玩家1点击`buttonL`（左按钮）后_降低_分数，并在玩家二点击`buttonR`（右按钮）后_增加_分数。\\r
        \\r

        # 这样做\\r

        \\r
        在每个`onBoardEvent()`（当主板上发生事件时）里，用计数器模式来增加或减少`score`（分数）。你改变的分数的数量会影响游戏胜利的难度。从改动10开始 - 当游戏完成度更高时，你可以体验不同的分数。\\r
      CSD U6 tugowar setProperty: |-
        # 显示胜利者\\r

        \\r
        胜利者屏幕实际上不知道_谁_赢得了游戏。让我们来修复它。\\r
        \\r

        # 这样做\\r

        \\r
        在每次调用`setScreen()`（设置屏幕）时，增加一个`setProperty`（模块）来改变"winner"胜利者的`"text"`（文本）属性为实际的胜利者。
      CSD U6 tugowar setProperty_2018: |-
        # 显示胜利者\\r

        \\r
        胜利者屏幕实际上不知道_谁_赢得了游戏。让我们来修复它。\\r
        \\r

        # 这样做\\r

        \\r
        在每次调用`setScreen()`（设置屏幕）时，增加一个`setProperty`（模块）来改变"winner"胜利者的`"text"`（文本）属性为实际的胜利者。
      CSD U6 tugowar setProperty_2019: |-
        # 显示胜利者\\r

        \\r
        胜利者屏幕实际上不知道_谁_赢得了游戏。让我们来修复它。\\r
        \\r

        # 这样做\\r

        \\r
        在每次调用`setScreen()`（设置屏幕）时，增加一个`setProperty`（模块）来改变"winner"胜利者的`"text"`（文本）属性为实际的胜利者。
      CSD U6 tugowar setScreen: |-
        # 更改为胜利者屏幕\\r

        \\r
        现在我们已经能用条件来检查哪个玩家胜利了，让我们在某个玩家胜利后，切换到“win"（胜利者）屏幕。\\r
        \\r

        # 这样做\\r

        \\r
        在你已经创建的，用来检查是否某个玩家已经到达低端的条件与距离，增加一个`setScreen()`（设置屏幕）屏幕来改变到"win"（胜利者）屏幕。确保在下一步之前，测试一下你的新代码是否能工作！
      CSD U6 tugowar setScreen_2018: |-
        # 更改为胜利者屏幕\\r

        \\r
        现在我们已经能用条件来检查哪个玩家胜利了，让我们在某个玩家胜利后，切换到“win"（胜利者）屏幕。\\r
        \\r

        # 这样做\\r

        \\r
        在你已经创建的，用来检查是否某个玩家已经到达低端的条件与距离，增加一个`setScreen()`（设置屏幕）屏幕来改变到"win"（胜利者）屏幕。确保在下一步之前，测试一下你的新代码是否能工作！
      CSD U6 tugowar setScreen_2019: |-
        # 更改为胜利者屏幕\\r

        \\r
        现在我们已经能用条件来检查哪个玩家胜利了，让我们在某个玩家胜利后，切换到“win"（胜利者）屏幕。\\r
        \\r

        # 这样做\\r

        \\r
        在你已经创建的，用来检查是否某个玩家已经到达低端的条件与距离，增加一个`setScreen()`（设置屏幕）屏幕来改变到"win"（胜利者）屏幕。确保在下一步之前，测试一下你的新代码是否能工作！
      CSD U6 tugowar variables 1: "# startGame()（开始游戏）函数\\\\r\n\n\\\\r\n如果你看了计划向导中的事件部分，你可能注意到有两个事件其实做了同样的事情。这个事件用一样的代码来响应\"play\"（玩）和\"replay\"（重玩）按钮。但是重复的代码放到**函数**中，才是最完美的。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n我们已经添加了一个叫做`startGame()`（开始游戏）的新函数到适当的事件处理函数中了，并且为你创建了一个空函数。 \\\\r\n\\\\r\n\n-   找到`startGame()`函数的定义\n    ( [显示在哪里](#triggercallout=block_trigger) )\\\\r\n-   在函数里：\\\\r\n    \\\\t\\*\n    将两个表情图片都移动到屏幕的顶端，即设置它们的\"y\"属性为0\\\\r\n    \\\\t\\* 将屏幕改变为\"game\"\\\\r\n    \\\\r\n    一旦你写好了`startGame()`函数，试试点击\"玩“按钮，来看看它是否能工作了。"
      CSD U6 tugowar variables 1_2018: "# startGame()（开始游戏）函数\\\\r\n\n\\\\r\n如果你看了计划向导中的事件部分，你可能注意到有两个事件其实做了同样的事情。这个事件用一样的代码来响应\"play\"（玩）和\"replay\"（重玩）按钮。但是重复的代码放到**函数**中，才是最完美的。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n我们已经添加了一个叫做`startGame()`（开始游戏）的新函数到适当的事件处理函数中了，并且为你创建了一个空函数。 \\\\r\n\\\\r\n\n-   找到`startGame()`函数的定义\n    ( [显示在哪里](#triggercallout=block_trigger) )\\\\r\n-   在函数里：\\\\r\n    \\\\t\\*\n    将两个表情图片都移动到屏幕的顶端，即设置它们的\"y\"属性为0\\\\r\n    \\\\t\\* 将屏幕改变为\"game\"\\\\r\n    \\\\r\n    一旦你写好了`startGame()`函数，试试点击\"玩“按钮，来看看它是否能工作了。"
      CSD U6 tugowar variables 1_2019: "# startGame()（开始游戏）函数\\\\r\n\n\\\\r\n如果你看了计划向导中的事件部分，你可能注意到有两个事件其实做了同样的事情。这个事件用一样的代码来响应\"play\"（玩）和\"replay\"（重玩）按钮。但是重复的代码放到**函数**中，才是最完美的。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n我们已经添加了一个叫做`startGame()`（开始游戏）的新函数到适当的事件处理函数中了，并且为你创建了一个空函数。 \\\\r\n\\\\r\n\n-   找到`startGame()`函数的定义\n    ( [显示在哪里](#triggercallout=block_trigger) )\\\\r\n-   在函数里：\\\\r\n    \\\\t\\*\n    将两个表情图片都移动到屏幕的顶端，即设置它们的\"y\"属性为0\\\\r\n    \\\\t\\* 将屏幕改变为\"game\"\\\\r\n    \\\\r\n    一旦你写好了`startGame()`函数，试试点击\"玩“按钮，来看看它是否能工作了。"
      CSD U6 tugowar variables 2: |-
        # 有参数的函数\\r

        \\r
        大部分你在应用实验室用到的，已有的函数，都需要输入，或者叫做**参数**。用来将需要到信息传递到函数中。例如，当改变屏幕时，你需要将屏幕的ID（标识）作为参数来传递，如`setScreen("win")`。\\r
        \\r
        这些参数显示为变量，能被用在函数里，你也可以自己创建有参数的函数了！\\r
        \\r

        # 这样做\\r

        \\r

        <div
        markdown="1" style="float:right; margin: 20px;">\r
        \r
        ![expandable](https://images.code.org/2eccd9fc9f4887aefd0bfd94d7f332c8-image-1509402194012.png)\r
        \r
        <br/>\r
        \r
        点击展开\r
        \r
        </div>\r
        \r
        我们不必再为红色和蓝色玩家创建单独的移动函数了，我们已经创建了一个叫做`movePlayer()`（移动玩家）的函数，它有个玩家图片ID（标识）的变量作为函数，叫做`player`（玩家）。在函数里，你可以将`player`用在任何需要指定玩家ID，或者控制的地方。\r
        \r
        * 找到`movePlayer()`在哪里定义的。( [显示在哪里](#triggercallout=block_trigger) )\r
        * 在
        `movePlayer()`函数里定义：\r
        * 获得玩家当前的"y"属性，并将它保存到一个叫做`player_y`的变量中。\r
        * 将`player_y`的值增加10\r
        * 将玩家的"y"属性设置为你的`player_y`的新值\r
        \r
        一旦你增加了代码，就可以测试了。你应该明白_两个按钮_都通过我们创建的同一个函数来工作 - 太酷了！
      CSD U6 tugowar variables 2_2018: |-
        # 有参数的函数\\r

        \\r
        大部分你在应用实验室用到的，已有的函数，都需要输入，或者叫做**参数**。用来将需要到信息传递到函数中。例如，当改变屏幕时，你需要将屏幕的ID（标识）作为参数来传递，如`setScreen("win")`。\\r
        \\r
        这些参数显示为变量，能被用在函数里，你也可以自己创建有参数的函数了！\\r
        \\r

        # 这样做\\r

        \\r

        <div
        markdown="1" style="float:right; margin: 20px;">\r
        \r
        ![expandable](https://images.code.org/2eccd9fc9f4887aefd0bfd94d7f332c8-image-1509402194012.png)\r
        \r
        <br/>\r
        \r
        点击展开\r
        \r
        </div>\r
        \r
        我们不必再为红色和蓝色玩家创建单独的移动函数了，我们已经创建了一个叫做`movePlayer()`（移动玩家）的函数，它有个玩家图片ID（标识）的变量作为函数，叫做`player`（玩家）。在函数里，你可以将`player`用在任何需要指定玩家ID，或者控制的地方。\r
        \r
        * 找到`movePlayer()`在哪里定义的。( [显示在哪里](#triggercallout=block_trigger) )\r
        * 在
        `movePlayer()`函数里定义：\r
        * 获得玩家当前的"y"属性，并将它保存到一个叫做`player_y`的变量中。\r
        * 将`player_y`的值增加10\r
        * 将玩家的"y"属性设置为你的`player_y`的新值\r
        \r
        一旦你增加了代码，就可以测试了。你应该明白_两个按钮_都通过我们创建的同一个函数来工作 - 太酷了！
      CSD U6 tugowar variables 2_2019: |-
        # 有参数的函数\\r

        \\r
        大部分你在应用实验室用到的，已有的函数，都需要输入，或者叫做**参数**。用来将需要到信息传递到函数中。例如，当改变屏幕时，你需要将屏幕的ID（标识）作为参数来传递，如`setScreen("win")`。\\r
        \\r
        这些参数显示为变量，能被用在函数里，你也可以自己创建有参数的函数了！\\r
        \\r

        # 这样做\\r

        \\r

        <div
        markdown="1" style="float:right; margin: 20px;">\r
        \r
        ![expandable](https://images.code.org/2eccd9fc9f4887aefd0bfd94d7f332c8-image-1509402194012.png)\r
        \r
        <br/>\r
        \r
        点击展开\r
        \r
        </div>\r
        \r
        我们不必再为红色和蓝色玩家创建单独的移动函数了，我们已经创建了一个叫做`movePlayer()`（移动玩家）的函数，它有个玩家图片ID（标识）的变量作为函数，叫做`player`（玩家）。在函数里，你可以将`player`用在任何需要指定玩家ID，或者控制的地方。\r
        \r
        * 找到`movePlayer()`在哪里定义的。( [显示在哪里](#triggercallout=block_trigger) )\r
        * 在
        `movePlayer()`函数里定义：\r
        * 获得玩家当前的"y"属性，并将它保存到一个叫做`player_y`的变量中。\r
        * 将`player_y`的值增加10\r
        * 将玩家的"y"属性设置为你的`player_y`的新值\r
        \r
        一旦你增加了代码，就可以测试了。你应该明白_两个按钮_都通过我们创建的同一个函数来工作 - 太酷了！
      CSD U6 tugowar variables 3: "# checkWin()（检查胜利者）函数\\\\r\n\n\\\\r\n在最后一个函数里，你需要在每个玩家移动后，调用`checkWin()`（检查胜利者）函数。。并且用来检查是否有玩家移动到了屏幕的最底下，如果需要的话，要宣布谁是胜利者。现在，我们要指出谁是胜利者，并打印日志到控制台中。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n和`movePlayer()`（移动玩家）函数一样，`checkWin()`（检查胜利者）有一个参数叫做`player`（玩家）。如果你调用了`checkWin(\"red\")`，那么`player`变量就会被设为值\"red\"（红色）。\\\\r\n\\\\r\n\n-   找到函数是在哪里定义的 ( [显示在哪里](#triggercallout=block_trigger) )\\\\r\n-   创建一个叫做`player_y`（玩家\\_y位置），并将它赋值给玩家的\"y\"属性\\\\r\n-   \\*\n    要么使用`console.log()`（控制台输出）命令，或者用监视器来报告`player_y`的值。\\\\r\n-   \\*\n    就用一个按钮来玩游戏，然后观察`player_y`值得变化。\\\\r\n-   \\*\n    决定`player_y`是多少时，表明它到了屏幕底端。"
      CSD U6 tugowar variables 3_2018: "# checkWin()（检查胜利者）函数\\\\r\n\n\\\\r\n在最后一个函数里，你需要在每个玩家移动后，调用`checkWin()`（检查胜利者）函数。。并且用来检查是否有玩家移动到了屏幕的最底下，如果需要的话，要宣布谁是胜利者。现在，我们要指出谁是胜利者，并打印日志到控制台中。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n和`movePlayer()`（移动玩家）函数一样，`checkWin()`（检查胜利者）有一个参数叫做`player`（玩家）。如果你调用了`checkWin(\"red\")`，那么`player`变量就会被设为值\"red\"（红色）。\\\\r\n\\\\r\n\n-   找到函数是在哪里定义的 ( [显示在哪里](#triggercallout=block_trigger) )\\\\r\n-   创建一个叫做`player_y`（玩家\\_y位置），并将它赋值给玩家的\"y\"属性\\\\r\n-   \\*\n    要么使用`console.log()`（控制台输出）命令，或者用监视器来报告`player_y`的值。\\\\r\n-   \\*\n    就用一个按钮来玩游戏，然后观察`player_y`值得变化。\\\\r\n-   \\*\n    决定`player_y`是多少时，表明它到了屏幕底端。"
      CSD U6 tugowar variables 3_2019: "# checkWin()（检查胜利者）函数\\\\r\n\n\\\\r\n在最后一个函数里，你需要在每个玩家移动后，调用`checkWin()`（检查胜利者）函数。。并且用来检查是否有玩家移动到了屏幕的最底下，如果需要的话，要宣布谁是胜利者。现在，我们要指出谁是胜利者，并打印日志到控制台中。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n和`movePlayer()`（移动玩家）函数一样，`checkWin()`（检查胜利者）有一个参数叫做`player`（玩家）。如果你调用了`checkWin(\"red\")`，那么`player`变量就会被设为值\"red\"（红色）。\\\\r\n\\\\r\n\n-   找到函数是在哪里定义的 ( [显示在哪里](#triggercallout=block_trigger) )\\\\r\n-   创建一个叫做`player_y`（玩家\\_y位置），并将它赋值给玩家的\"y\"属性\\\\r\n-   \\*\n    要么使用`console.log()`（控制台输出）命令，或者用监视器来报告`player_y`的值。\\\\r\n-   \\*\n    就用一个按钮来玩游戏，然后观察`player_y`值得变化。\\\\r\n-   \\*\n    决定`player_y`是多少时，表明它到了屏幕底端。"
      CSD-Arrays: |-
        今天，你会学习如何创建和使用**函数**。\\r
        \\r
        创建函数会让你制作自己的模块！制作函数有两部分：\\r
        \\r
        制作一个有名字的新模块，将你想要运行的代码都放在它里面。\\r
        \-函数的xml定义- \\r
        \\r
        单个绿色的模块，是你使用或调用创建的函数。\\r
        \-函数调用的xml-\\r
        \\r
        准备熟悉函数，学习如何编辑它们，并创建自己的函数！
      CSD-Arrays_2018: |-
        今天，你会学习如何创建和使用**函数**。\\r
        \\r
        创建函数会让你制作自己的模块！制作函数有两部分：\\r
        \\r
        制作一个有名字的新模块，将你想要运行的代码都放在它里面。\\r
        \-函数的xml定义- \\r
        \\r
        单个绿色的模块，是你使用或调用创建的函数。\\r
        \-函数调用的xml-\\r
        \\r
        准备熟悉函数，学习如何编辑它们，并创建自己的函数！
      CSD-Arrays_2019: |-
        今天，你会学习如何创建和使用**函数**。\\r
        \\r
        创建函数会让你制作自己的模块！制作函数有两部分：\\r
        \\r
        制作一个有名字的新模块，将你想要运行的代码都放在它里面。\\r
        \-函数的xml定义- \\r
        \\r
        单个绿色的模块，是你使用或调用创建的函数。\\r
        \-函数调用的xml-\\r
        \\r
        准备熟悉函数，学习如何编辑它们，并创建自己的函数！
      'CSD: Boolean Expressions': "# 布尔表达式视频"
      'CSD: Cake Defender Exemplar': |-
        # 保卫你的蛋糕！\\r

        \\r
        这是一个防守游戏的例子，你可以在课程结束时创建自己的。用方向键移动外星人来让瓢虫远离你的蛋糕。你能得到多高的分？\\r
        \\r

        # 这样做\\r

        \\r
        和同学一起，列出下面信息的清单。\\r
        \\r

        -   这个游戏中有多少精灵，是哪些？\\r
        -   这个游戏需要什么变量？它们存储了什么内容？\\r
        -   如果需要将这些代码分开成函数，你觉得需要哪些函数？你需要在代码中创建的主要部分的行为是什么？
      'CSD: Platform Jumper Exemplar': |-
        # 平台跳跃者\\r

        \\r
        左边的游戏例子是平台跳跃者。点击“运行”来玩这个游戏。你可以用上箭头让外星人跳起来，并用左右方向键来移动它。收集星星可以得分，如果分数足够高，背景也会发生变化。\\r
        \\r
        你已经知道了用来创建游戏的所有模块如何使用了，你需要在这节课里创建自己的平台跳跃者游戏。\\r
        \\r
        你可以在下面两关里看到其它平台跳跃者的例子。
      CSDU2 - First-Weblab: "# 添加内容\\\\r\n\n\\\\r\n开始创造你的第一个网页吧！试着创建一个有标题和两段文字的页面。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n\n-   写一个关于你喜欢的动物的句子\\\\r\n-   在另一行里写一句关于你最不喜欢的动物的句子。\\\\r\n-   在这两句话上面加一个标题：“动物”\\\\r\n-   别忘了点击\n    <img src=\"https://images.code.org/6a35d13b10ed2029a9323c9cb555e39e-image-1477681291001.01.12\n    PM.png\" style=\"width:100px\">\\\\r\n-   **你注意到自己写的内容的结构了吗？**"
      CSDU2 - PW - Class Style Personal Site - OLD: "# 自由游戏样式\\\\r\n\n\\\\r\n现在轮到你来决定用什么样的样式了！使用classes（类）样式和RGB颜色来改进你的个人网站。\\\\r\n\\\\r\n\\*\n确保你完成了下面的检查清单。\\\\r\n\n-   先保存一个你的首页的快照，然后将它存到电脑的某个地方，以便于过会儿能找到它。\\\\r\n    \\\\r\n    ## \n    检查清单\\\\r\n    \\\\r\n-   在你的站点某处，给用RGB值给文本一个特别的颜色。\\\\r\n-   在你的泪飙页面，给所有的列表元素用上相同的背景颜色。\\\\r\n-   用classes（类）给你的网站上至少两个元素设置上样式。"
      CSDU2 - PW - Class Style Personal Site: "# 自由游戏样式\\\\r\n\n\\\\r\n现在轮到你来决定用什么样的样式了！使用classes（类）样式和RGB颜色来改进你的个人网站。\\\\r\n\\\\r\n\\*\n确保你完成了下面的检查清单。\\\\r\n\n-   先保存一个你的首页的快照，然后将它存到电脑的某个地方，以便于过会儿能找到它。\\\\r\n    \\\\r\n    ## \n    检查清单\\\\r\n    \\\\r\n-   在你的站点某处，给用RGB值给文本一个特别的颜色。\\\\r\n-   在你的泪飙页面，给所有的列表元素用上相同的背景颜色。\\\\r\n-   用classes（类）给你的网站上至少两个元素设置上样式。"
      CSDU2 - PW - Class Style Personal Site_2018: "# 自由游戏样式\\\\r\n\n\\\\r\n现在轮到你来决定用什么样的样式了！使用classes（类）样式和RGB颜色来改进你的个人网站。\\\\r\n\\\\r\n\\*\n确保你完成了下面的检查清单。\\\\r\n\n-   先保存一个你的首页的快照，然后将它存到电脑的某个地方，以便于过会儿能找到它。\\\\r\n    \\\\r\n    ## \n    检查清单\\\\r\n    \\\\r\n-   在你的站点某处，给用RGB值给文本一个特别的颜色。\\\\r\n-   在你的泪飙页面，给所有的列表元素用上相同的背景颜色。\\\\r\n-   用classes（类）给你的网站上至少两个元素设置上样式。"
      CSDU2 - PW - Class Style Personal Site_2019: "# 自由游戏样式\\\\r\n\n\\\\r\n现在轮到你来决定用什么样的样式了！使用classes（类）样式和RGB颜色来改进你的个人网站。\\\\r\n\\\\r\n\\*\n确保你完成了下面的检查清单。\\\\r\n\n-   先保存一个你的首页的快照，然后将它存到电脑的某个地方，以便于过会儿能找到它。\\\\r\n    \\\\r\n    ## \n    检查清单\\\\r\n    \\\\r\n-   在你的站点某处，给用RGB值给文本一个特别的颜色。\\\\r\n-   在你的泪飙页面，给所有的列表元素用上相同的背景颜色。\\\\r\n-   用classes（类）给你的网站上至少两个元素设置上样式。"
      CSDU2 Color Blindness: |-
        # 色盲过滤器\\r

        \\r
        \\r
        \\r
      CSDU4 Project Events: |-
        # 链接屏幕\\r

        \\r
        你的所有屏幕都有了，现在你可以添加事件来改变屏幕了。当你完成这一步后，实际上你就完成了一个可以交互的原型了！\\r
        \\r

        # 这样做\\r

        \\r
        对你应用的每个屏幕：\\r
        \\r

        -   找到所有按钮的ID（标识）\\r
        -   对每个按钮，加一个事件处理函数来监控ID（标识。\\r
        -   在每个事件处理函数里，用`setScreen()`（设置屏幕）来移动右边的屏幕\\r
        -   一起测试一下！\\r
            \\r
            根据你的应用里屏幕和按钮的数量，这可能是个相当复杂的过程。确保经常通过`console.log()`（控制台.日志）模块来测试你的工作。当你认为整个应用都可以工作时，和小组里其它伙伴的比一比，看看是不是一样的。
      CSDU4 Project Events_2018: |-
        # 链接屏幕\\r

        \\r
        你的所有屏幕都有了，现在你可以添加事件来改变屏幕了。当你完成这一步后，实际上你就完成了一个可以交互的原型了！\\r
        \\r

        # 这样做\\r

        \\r
        对你应用的每个屏幕：\\r
        \\r

        -   找到所有按钮的ID（标识）\\r
        -   对每个按钮，加一个事件处理函数来监控ID（标识。\\r
        -   在每个事件处理函数里，用`setScreen()`（设置屏幕）来移动右边的屏幕\\r
        -   一起测试一下！\\r
            \\r
            根据你的应用里屏幕和按钮的数量，这可能是个相当复杂的过程。确保经常通过`console.log()`（控制台.日志）模块来测试你的工作。当你认为整个应用都可以工作时，和小组里其它伙伴的比一比，看看是不是一样的。
      CSDU4 Project Events_2019: |-
        # 链接屏幕\\r

        \\r
        你的所有屏幕都有了，现在你可以添加事件来改变屏幕了。当你完成这一步后，实际上你就完成了一个可以交互的原型了！\\r
        \\r

        # 这样做\\r

        \\r
        对你应用的每个屏幕：\\r
        \\r

        -   找到所有按钮的ID（标识）\\r
        -   对每个按钮，加一个事件处理函数来监控ID（标识。\\r
        -   在每个事件处理函数里，用`setScreen()`（设置屏幕）来移动右边的屏幕\\r
        -   一起测试一下！\\r
            \\r
            根据你的应用里屏幕和按钮的数量，这可能是个相当复杂的过程。确保经常通过`console.log()`（控制台.日志）模块来测试你的工作。当你认为整个应用都可以工作时，和小组里其它伙伴的比一比，看看是不是一样的。
      CSDU4 Project Import_2018: |-
        # 返回应用程序

        现在已经有了一些输入屏幕的练习，下面可以开始做团队的应用程序了。

        # 这样做

        团队里每一位成员创建自己的一份应用拷贝，输入队里所有成员的屏幕。这将成为自己的副本，并且从下一课起要开始往里添加自己的代码。（不要忘了也输入之前已有的屏幕。）

        -   收集队里所有的共享url链接， **包括自己的**
            \\t\* 每一位成员如需找到自己的屏幕，可以回到上一课的最后一步，在[项目文件夹](/项目) 里找到
        -   每次输入一个屏幕，重复知道完成输入所有的屏幕
            \\t\* 如果在输入某一个屏幕时碰到ID错误，和该屏幕的创建者讨论解决
        -   删除缺省的“屏幕1”
        -   将主屏幕设为缺省屏幕

        现在不要担心怎样往里添加代码；在下一步会讲到。
      CSDU4 Project Import_2019: |-
        # 返回应用程序

        现在已经有了一些输入屏幕的练习，下面可以开始做团队的应用程序了。

        # 这样做

        团队里每一位成员创建自己的一份应用拷贝，输入队里所有成员的屏幕。这将成为自己的副本，并且从下一课起要开始往里添加自己的代码。（不要忘了也输入之前已有的屏幕。）

        -   收集队里所有的共享url链接， **包括自己的**
            \\t\* 每一位成员如需找到自己的屏幕，可以回到上一课的最后一步，在[项目文件夹](/项目) 里找到
        -   每次输入一个屏幕，重复知道完成输入所有的屏幕
            \\t\* 如果在输入某一个屏幕时碰到ID错误，和该屏幕的创建者讨论解决
        -   删除缺省的“屏幕1”
        -   将主屏幕设为缺省屏幕

        现在不要担心怎样往里添加代码；在下一步会讲到。
      CSDU6  note array length: "# 添加到数组\\\\r\n\n\\\\r\n数组不必是固定长度，你可以根据需要在数组中添加或删除尽可能多的条目。数组模块的左右箭头允许你在数组的末尾添加或删除项。\\\\r\n\\\\r\n![](https://images.code.org/a9a72527b700740382cae5017f8fa16d-image-1511913249739.jpg)\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n\n-   在现有数组中添加两个独特的音符。\\\\r\n-   运行代码查看发生了什么。"
      CSDU6 - Arrays - expressionsAsIndexes: |-
        # 表达式作为索引：使用变量\\r

        \\r

        -   这里已经提供了一些**初始的代码**，它为图标库里的图标创建了一组标识。\\r
        -   **编写代码**把屏幕上的图片设为列表中随机的图标。
      CSDU6 - Arrays - indexPractice: |-
        # 索引练习\\r

        \\r
        <img src="https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45
        PM.png" style="width: 150px; float: right">\\r
        \\r
        这里已经提供了一些**初始代码**，创建了一个叫做`colors`（颜色）的列表。\\r
        \\r

        -   用`setProperty`（设置属性）和这个颜色列表来改变按钮的`background-color`（背景色）来创建一条彩虹。第一个按钮已经为你做好了。
      CSDU6 - LED buttonL: |-
        # 使用主板事件\\r

        \\r
        现在，LED灯会在按下左按钮（`buttonL`)时点亮。它应该在按下右按钮（`buttonR`)时关闭。\\r
        \\r

        <div
        style="float:right;" markdown=1> \r
        \r
        ![expandable](https://images.code.org/402489ec13fb6c6f38910829a9633ac3-image-1510874304220.png)
        \r
        \r
        </div>\r
        \r
        这样做\r
        \r
        * 添加另一个`onBoardEvent()`（当主板上发生事件时）模块来实现当右按钮按下时，关闭LED灯。
      CSDU6 - LED buttonL_2018: |-
        # 使用主板事件\\r

        \\r
        现在，LED灯会在按下左按钮（`buttonL`)时点亮。它应该在按下右按钮（`buttonR`)时关闭。\\r
        \\r

        <div
        style="float:right;" markdown=1> \r
        \r
        ![expandable](https://images.code.org/402489ec13fb6c6f38910829a9633ac3-image-1510874304220.png)
        \r
        \r
        </div>\r
        \r
        这样做\r
        \r
        * 添加另一个`onBoardEvent()`（当主板上发生事件时）模块来实现当右按钮按下时，关闭LED灯。
      CSDU6 - LED buttonL_2019: |-
        # 使用主板事件\\r

        \\r
        现在，LED灯会在按下左按钮（`buttonL`)时点亮。它应该在按下右按钮（`buttonR`)时关闭。\\r
        \\r

        <div
        style="float:right;" markdown=1> \r
        \r
        ![expandable](https://images.code.org/402489ec13fb6c6f38910829a9633ac3-image-1510874304220.png)
        \r
        \r
        </div>\r
        \r
        这样做\r
        \r
        * 添加另一个`onBoardEvent()`（当主板上发生事件时）模块来实现当右按钮按下时，关闭LED灯。
      CSDU6 - LED toggle buttonL down: |-
        # 按钮的其它主板事件\\r

        \\r
        左右按钮有三种事件类型：`press`（按），`down`（按下）和`up`（释放）.\\r
        \\r
        目前为止，你只用过`press`（按）事件。
        现在我们要使用`up`（释放）和`down` （按下）事件来仅用**一个**按钮来控制LED灯的开和关。\\r
        \\r

        ## 这样做\\r

        -   拖出一个`onBoardEvent()`（当主板上发生事件时）模块给某个按钮，并设置事件类型为`down`（按下）。\\r
        -   添加代码来让LED灯在按下按钮时点亮。
      CSDU6 - LED toggle buttonL up: |-
        # 按钮的其它主板事件\\r

        \\r
        你可能注意到了，LED灯会在按钮释放后，仍然是亮着的。因为事件只在按钮按下时触发了。为了关掉它，你需要在按钮弹起时也触发一个事件。\\r
        \\r

        # 这样做\\r

        -   为左按钮创建一个'up'事件。\\r
        -   添加代码来让LED灯在释放按钮时熄灭。
      CSDU6 - LED toggle buttonL up_2018: |-
        # 按钮的其它主板事件\\r

        \\r
        你可能注意到了，LED灯会在按钮释放后，仍然是亮着的。因为事件只在按钮按下时触发了。为了关掉它，你需要在按钮弹起时也触发一个事件。\\r
        \\r

        # 这样做\\r

        -   为左按钮创建一个'up'事件。\\r
        -   添加代码来让LED灯在释放按钮时熄灭。
      CSDU6 - LED toggle buttonL up_2019: |-
        # 按钮的其它主板事件\\r

        \\r
        你可能注意到了，LED灯会在按钮释放后，仍然是亮着的。因为事件只在按钮按下时触发了。为了关掉它，你需要在按钮弹起时也触发一个事件。\\r
        \\r

        # 这样做\\r

        -   为左按钮创建一个'up'事件。\\r
        -   添加代码来让LED灯在释放按钮时熄灭。
      CSDU6 - LED toggle buttonL: "# 使用LED的主板事件\\\\r\n\n\\\\r\n你能用一个主板事件来让LED灯开或关吗？\\\\r\n\\\\r\n\n## \n\n这样做\\\\r\n\n-   拖拽出一个`onBoardEvent()`（当主板上发生事件时）模块。\\\\r\n-   仅使用主板上的一个事件来让LED灯打开和关闭。"
      CSDU6 - board event challenge: |-
        # 挑战：声音面板\\r

        \\r
        开始挑战前，先和你的老师询问一下。\\r
        \\r
        现在，你知道如何使用主板事件，按钮，开关和蜂鸣器了。试着创造一个程序，当按下按钮，或滑动开关时，让你的主板变成一个声音面板。试一试声音的持续时间和频率，并听一听。
      CSDU6 - board event challenge_2018: |-
        # 挑战：声音面板\\r

        \\r
        开始挑战前，先和你的老师询问一下。\\r
        \\r
        现在，你知道如何使用主板事件，按钮，开关和蜂鸣器了。试着创造一个程序，当按下按钮，或滑动开关时，让你的主板变成一个声音面板。试一试声音的持续时间和频率，并听一听。
      CSDU6 - board event challenge_2019: |-
        # 挑战：声音面板\\r

        \\r
        开始挑战前，先和你的老师询问一下。\\r
        \\r
        现在，你知道如何使用主板事件，按钮，开关和蜂鸣器了。试着创造一个程序，当按下按钮，或滑动开关时，让你的主板变成一个声音面板。试一试声音的持续时间和频率，并听一听。
      CSDU6 - button LED prediction: 请参见降价的包含级别
      CSDU6 - button LED prediction_2018: 请参见降价的包含级别
      CSDU6 - button LED prediction_2019: 请参见降价的包含级别
      CSDU6 - button_LED_prediction: |-
        # 主板事件\\r

        \\r
        `onBoardEvent()`（当主板上发生事件时）模块允许你从电路游戏板上获取输入。和伙伴看看程序，并讨论一下你觉得程序能做什么。一旦有了答案后，点击"运行"来检查答案。\\r
        \\r

        -   如果你按下左按钮，会发生什么？
      CSDU6 - button_LED_prediction_2018: |-
        # 主板事件\\r

        \\r
        `onBoardEvent()`（当主板上发生事件时）模块允许你从电路游戏板上获取输入。和伙伴看看程序，并讨论一下你觉得程序能做什么。一旦有了答案后，点击"运行"来检查答案。\\r
        \\r

        -   如果你按下左按钮，会发生什么？
      CSDU6 - button_LED_prediction_2019: |-
        # 主板事件\\r

        \\r
        `onBoardEvent()`（当主板上发生事件时）模块允许你从电路游戏板上获取输入。和伙伴看看程序，并讨论一下你觉得程序能做什么。一旦有了答案后，点击"运行"来检查答案。\\r
        \\r

        -   如果你按下左按钮，会发生什么？
      CSDU6 - buzzer duration buttons: |-
        # 蜂鸣器和按钮\\r

        \\r
        这个程序会通过按钮来播放长的和短的蜂鸣声。\\r
        \\r

        # 这样做\\r

        -   改变`buzzer.frequency` （蜂鸣器.频率）的持续时间参数，来让左按钮播放一个长的蜂鸣，右按钮播放一个短的蜂鸣。
      CSDU6 - buzzer duration buttons_2018: |-
        # 蜂鸣器和按钮\\r

        \\r
        这个程序会通过按钮来播放长的和短的蜂鸣声。\\r
        \\r

        # 这样做\\r

        -   改变`buzzer.frequency` （蜂鸣器.频率）的持续时间参数，来让左按钮播放一个长的蜂鸣，右按钮播放一个短的蜂鸣。
      CSDU6 - buzzer duration buttons_2019: |-
        # 蜂鸣器和按钮\\r

        \\r
        这个程序会通过按钮来播放长的和短的蜂鸣声。\\r
        \\r

        # 这样做\\r

        -   改变`buzzer.frequency` （蜂鸣器.频率）的持续时间参数，来让左按钮播放一个长的蜂鸣，右按钮播放一个短的蜂鸣。
      CSDU6 - buzzer duration: |-
        # 蜂鸣器持续时间\\r

        \\r
        你可能注意到了`buzzer.frequency()`（蜂鸣器 频率）有两个参数：频率和持续时间。它们的输入都是数字。\\r
        \\r

        -   频率决定了声音听起来怎样。给的数字越大，它的音调听起来就更高。\\r
            \\r
        -   持续时间决定了蜂鸣器会播放一个声音多少毫秒。\\r
            \\r
            现在，我们要关注第二个参数：持续时间。\\r
            \\r
            \\r
            # 这样做\\r
            用持续时间试试：\\r
            \\r
        -   将蜂鸣器的事件改为比100要长的数字。\\r
        -   将持续时间设置为0，看看会如何？\\r
            \\r
            在继续前，多运行几次程序看看会发生什么。
      CSDU6 - buzzer duration_2018: |-
        # 蜂鸣器持续时间\\r

        \\r
        你可能注意到了`buzzer.frequency()`（蜂鸣器 频率）有两个参数：频率和持续时间。它们的输入都是数字。\\r
        \\r

        -   频率决定了声音听起来怎样。给的数字越大，它的音调听起来就更高。\\r
            \\r
        -   持续时间决定了蜂鸣器会播放一个声音多少毫秒。\\r
            \\r
            现在，我们要关注第二个参数：持续时间。\\r
            \\r
            \\r
            # 这样做\\r
            用持续时间试试：\\r
            \\r
        -   将蜂鸣器的事件改为比100要长的数字。\\r
        -   将持续时间设置为0，看看会如何？\\r
            \\r
            在继续前，多运行几次程序看看会发生什么。
      CSDU6 - buzzer duration_2019: |-
        # 蜂鸣器持续时间\\r

        \\r
        你可能注意到了`buzzer.frequency()`（蜂鸣器 频率）有两个参数：频率和持续时间。它们的输入都是数字。\\r
        \\r

        -   频率决定了声音听起来怎样。给的数字越大，它的音调听起来就更高。\\r
            \\r
        -   持续时间决定了蜂鸣器会播放一个声音多少毫秒。\\r
            \\r
            现在，我们要关注第二个参数：持续时间。\\r
            \\r
            \\r
            # 这样做\\r
            用持续时间试试：\\r
            \\r
        -   将蜂鸣器的事件改为比100要长的数字。\\r
        -   将持续时间设置为0，看看会如何？\\r
            \\r
            在继续前，多运行几次程序看看会发生什么。
      CSDU6 - buzzer intro: |-
        # 使用蜂鸣器\\r

        \\r
        你可以有很多方法来使用蜂鸣器，但现在，我们只使用`buzzer.frequency()`（蜂鸣器.频率）。\\r
        \\r

        # 这样做\\r

        -   从工具箱中拖出一个`buzzer.frequency()`模块，然后使用它。你会注意到它有两个参数，试试改变其中一个或两个，看看会发生什么？\\r
        -   运行一下程序，享受一下你的电路游戏板播放的音乐。
      CSDU6 - buzzer intro_2018: |-
        # 使用蜂鸣器\\r

        \\r
        你可以有很多方法来使用蜂鸣器，但现在，我们只使用`buzzer.frequency()`（蜂鸣器.频率）。\\r
        \\r

        # 这样做\\r

        -   从工具箱中拖出一个`buzzer.frequency()`模块，然后使用它。你会注意到它有两个参数，试试改变其中一个或两个，看看会发生什么？\\r
        -   运行一下程序，享受一下你的电路游戏板播放的音乐。
      CSDU6 - buzzer intro_2019: |-
        # 使用蜂鸣器\\r

        \\r
        你可以有很多方法来使用蜂鸣器，但现在，我们只使用`buzzer.frequency()`（蜂鸣器.频率）。\\r
        \\r

        # 这样做\\r

        -   从工具箱中拖出一个`buzzer.frequency()`模块，然后使用它。你会注意到它有两个参数，试试改变其中一个或两个，看看会发生什么？\\r
        -   运行一下程序，享受一下你的电路游戏板播放的音乐。
      CSDU6 - end challenge: |-
        # 挑战：主板事件和输出\\r

        \\r
        在开始挑战前，和你的老师确认一下。\\r
        \\r
        现在，你知道如何使用主板事件，Led灯，以及蜂鸣器了。试试创建一个应用来使用这三样。
      CSDU6 - final project 1: |-
        # 设计用户界面\\r

        \\r
        在担心你的程序的代码前，先用用户界面布局开始。你需要从设计模式来添加元素，确保每个ID（标识）都是有意义的。即使你现在没有计划用代码来存取一个元素，也要确保你的ID（标识）和描述有意义，这会让你的程序有更强的可读性，也更容易写代码。
      CSDU6 - final project 1_2018: |-
        # 设计用户界面\\r

        \\r
        在担心你的程序的代码前，先用用户界面布局开始。你需要从设计模式来添加元素，确保每个ID（标识）都是有意义的。即使你现在没有计划用代码来存取一个元素，也要确保你的ID（标识）和描述有意义，这会让你的程序有更强的可读性，也更容易写代码。
      CSDU6 - final project 1_2019: |-
        # 设计用户界面\\r

        \\r
        在担心你的程序的代码前，先用用户界面布局开始。你需要从设计模式来添加元素，确保每个ID（标识）都是有意义的。即使你现在没有计划用代码来存取一个元素，也要确保你的ID（标识）和描述有意义，这会让你的程序有更强的可读性，也更容易写代码。
      CSDU6 - final project 2: |-
        # 创建用户界面\\r

        \\r
        当用户界面准备好后，就可以给界面元素添加事件处理函数了。在这里，你可能只想增加`console.log()`（控制台.日志）命令来确保你的事件能正常工作 - 你可以晚点再添加函数代码。
      CSDU6 - final project 2_2018: |-
        # 创建用户界面\\r

        \\r
        当用户界面准备好后，就可以给界面元素添加事件处理函数了。在这里，你可能只想增加`console.log()`（控制台.日志）命令来确保你的事件能正常工作 - 你可以晚点再添加函数代码。
      CSDU6 - final project 2_2019: |-
        # 创建用户界面\\r

        \\r
        当用户界面准备好后，就可以给界面元素添加事件处理函数了。在这里，你可能只想增加`console.log()`（控制台.日志）命令来确保你的事件能正常工作 - 你可以晚点再添加函数代码。
      CSDU6 - final project 3: |-
        # 主板输入事件\\r

        \\r
        现在, 您可以添加可以从主板接受输入的事件。一样, 请随意使用 "console.log ()"（控制台.日志）语句, 以确保您的事件能够正常工作。
      CSDU6 - final project 3_2018: |-
        # 主板输入事件\\r

        \\r
        现在, 您可以添加可以从主板接受输入的事件。一样, 请随意使用 "console.log ()"（控制台.日志）语句, 以确保您的事件能够正常工作。
      CSDU6 - final project 3_2019: |-
        # 主板输入事件\\r

        \\r
        现在, 您可以添加可以从主板接受输入的事件。一样, 请随意使用 "console.log ()"（控制台.日志）语句, 以确保您的事件能够正常工作。
      CSDU6 - final project 4: |-
        # 函数\\r

        \\r
        当你一直在你的程序上工作时，找找是否有一些规律能够被抽象为函数。你能找到重复了多次的代码，或者某些命名后能够更好理解的代码吗？别忘了在写函数的时候，你能使用参数来_最大可能_重用一些只有少量不同的代码（比如为多个LED灯设置不同的颜色）。
      CSDU6 - final project 4_2018: |-
        # 函数\\r

        \\r
        当你一直在你的程序上工作时，找找是否有一些规律能够被抽象为函数。你能找到重复了多次的代码，或者某些命名后能够更好理解的代码吗？别忘了在写函数的时候，你能使用参数来_最大可能_重用一些只有少量不同的代码（比如为多个LED灯设置不同的颜色）。
      CSDU6 - final project 4_2019: |-
        # 函数\\r

        \\r
        当你一直在你的程序上工作时，找找是否有一些规律能够被抽象为函数。你能找到重复了多次的代码，或者某些命名后能够更好理解的代码吗？别忘了在写函数的时候，你能使用参数来_最大可能_重用一些只有少量不同的代码（比如为多个LED灯设置不同的颜色）。
      CSDU6 - final project 5: |-
        # 主板输出\\r

        \\r
        如果还没有开始, 请使用主板上的一些输出元素向用户传达有用的信息。
      CSDU6 - final project 5_2018: |-
        # 主板输出\\r

        \\r
        如果还没有开始, 请使用主板上的一些输出元素向用户传达有用的信息。
      CSDU6 - final project 5_2019: |-
        # 主板输出\\r

        \\r
        如果还没有开始, 请使用主板上的一些输出元素向用户传达有用的信息。
      CSDU6 - final project 6: |-
        # 完成润色\\r

        \\r
        在完成前添加必要的润色，使你的程序更加出色。如果有时间，把你的发明给一些潜在的用户进行测试来收集反馈，找到还需要提高的机会。当你全部完成后，点击"提交"按钮来上交程序！
      CSDU6 - final project 6_2018: |-
        # 完成润色\\r

        \\r
        在完成前添加必要的润色，使你的程序更加出色。如果有时间，把你的发明给一些潜在的用户进行测试来收集反馈，找到还需要提高的机会。当你全部完成后，点击"提交"按钮来上交程序！
      CSDU6 - final project 6_2019: |-
        # 完成润色\\r

        \\r
        在完成前添加必要的润色，使你的程序更加出色。如果有时间，把你的发明给一些潜在的用户进行测试来收集反馈，找到还需要提高的机会。当你全部完成后，点击"提交"按钮来上交程序！
      CSDU6 - lightswitch toggleswitch: "# 使用切换开关\\\\r\n\n\\\\r\n切换开关有两个位置：`open`（打开）和`close`（关闭）。这个程序将它用作一个灯的开关。现在，它只能打开。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n\n-   创建一个新的切换开关事件，当开关滑动到`close`（关闭）时触发。\\\\r\n-   添加代码，让切换开关设置到`close`时，灯泡能关闭。"
      CSDU6 - lightswitch toggleswitch_2018: "# 使用切换开关\\\\r\n\n\\\\r\n切换开关有两个位置：`open`（打开）和`close`（关闭）。这个程序将它用作一个灯的开关。现在，它只能打开。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n\n-   创建一个新的切换开关事件，当开关滑动到`close`（关闭）时触发。\\\\r\n-   添加代码，让切换开关设置到`close`时，灯泡能关闭。"
      CSDU6 - lightswitch toggleswitch_2019: "# 使用切换开关\\\\r\n\n\\\\r\n切换开关有两个位置：`open`（打开）和`close`（关闭）。这个程序将它用作一个灯的开关。现在，它只能打开。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n\n-   创建一个新的切换开关事件，当开关滑动到`close`（关闭）时触发。\\\\r\n-   添加代码，让切换开关设置到`close`时，灯泡能关闭。"
      CSDU6 - sensor love tester demo: |-
        # "爱"的测试仪\\r

        \\r
        "爱"的测试仪是一个经典的狂欢节游戏。它的工作原理是让用户将手掌平放在传感器上或握住金属手柄。然后, 测试人员将显示人是否在恋爱中。这些机器的最简单的版本只是测量用户手的温度，将温度高的认为有更多的爱。\\r
        \\r
        通过将拇指放在电路游戏板的温度传感器上来试试"爱"的测试仪。把你的结果和旁边的同学比较 - 所有的主板都会返回相同的方式吗？
      CSDU6 - sensor theremin demo: |-
        # 灯光电子琴\\r

        \\r
        电子琴是一种乐器，它可以再没有音乐家的情况下演奏！传统的电子琴用磁场来和用户交互，但一个简单的版本可以对光线进行检测并反应。\\r
        \\r
        通过在你的电路游戏板上的光电传感器前晃动手来测试这个电子琴。如果根据检测到的光数量来改变声调会如何呢？
      CSDU6 - sensor vu meter demo: |-
        # 音量表\\r

        \\r
        很多立体声系统都有一组LED灯，它们会在播放音乐时亮起来。这叫做Volumn Unit Meter（音量表），它允许用户看到音乐在播放时的音量。\\r
        \\r
        通过在电路游戏板旁说话或制造其它声音来测试这个音量表。当环境噪音改变时，灯光和显示会如何变化？
      CSDU6 - sensors challenge: |-
        # 挑战\\r

        \\r
        _在挑战前，请先问问老师。_\\r
        \\r
        现在，你已经练习了从各种模拟传感器中获取输入，并改变它们的范围。你能从传感器数据中找到有趣的用途吗？显示传感器的原始值是很容易的，但更有意思的是用不同的方法来表达数据。\\r
        \\r
        考虑下面的方法来使用传感器数据：\\r
        \\r

        -   使用主板的输出\\r
        -   改变宽、高或UI元素的位置。\\r
        -   使用条件来基于传感器数据显示不同的图片。
      CSDU6 - sensors experiment: |-
        <iframe width="370" height="620"
        style="float:right; margin-left: 25px; border: 0px;" src="https://studio.code.org/projects/applab/kxyJyJI1Bg1fV_5NIl8MHQ/embed"></iframe>\r
        \r
        #
        传感器体验\r
        \r
        运行右边的程序，并体验你的主板。试着用不同方式与你的主板互动，了解每个传感器是什么。完成体验后，回答每个传感器下的问题。\r
        \r
        * 这个传感器是用来测量什么的？\r
        * 它的最大值是多少？\r
        * 它的最小值是多少？
      CSDU6 - sensors light: |-
        # 光线传感器更新\\r

        \\r
        这个应用和上一个很像，但我们已经增加了一个ID（标识）为"update\_button"（更新按钮）的按钮。
        写一个程序，当每次点击按钮时，显示光线传感器的当前值。
      CSDU6 - sensors love tester 1: |-
        # 爱的测试器：收集并缩放输入\\r

        \\r
        你需要哪个传感器来收集输入？\\r
        这个应用应该用什么范围的输入更合适？\\r
        \\r

        # 这样做\\r

        \\r
        增加一个事件处理函数来从你选择的传感器持续的收集数据，并用`console.log()`（控制台.日志）来跟踪它如何根据用户输入变化。如果有必要，将输入范围改为需要的值。\\r
        \\r
        _提示：考虑从温度传感器传入的哪种类型的数据最容易使用 - 原始值、摄氏度还是华氏度。_
      CSDU6 - sensors love tester 2: |-
        # 爱的测试器：显示输出\\r

        \\r
        收集的数据应该如何显示？\\r
        你的数据在显示前需要转换或处理吗？\\r
        \\r

        # 这样做\\r

        \\r
        将代码里调用`console.log()`的替换为项目中需要的输出类型。\\r
        \\r
        _提示：你可能需要一个条件语句来决定依赖什么样的输入来输出。_
      CSDU6 - sensors love tester 3: "# 爱的测试器：完成它\\\\r\n\n\\\\r\n你的应用达到了目标的最低要求了吗？\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n最后再润色一下你的应用。返回你的计划向导，确保应用符合了最初的目标。"
      CSDU6 - sensors predict question: |-
        # 预测\\r

        \\r
        读一下这个程序的代码，然后在下面预测一下。你认为当运行程序的时候，它会做什么？用户会想怎样和主板互动？你可能需要吹一下主板，看看这个应用的完整范围。
      CSDU6 - sensors predict question_2018: |-
        # 预测\\r

        \\r
        读一下这个程序的代码，然后在下面预测一下。你认为当运行程序的时候，它会做什么？用户会想怎样和主板互动？你可能需要吹一下主板，看看这个应用的完整范围。
      CSDU6 - sensors predict question_2019: |-
        # 预测\\r

        \\r
        读一下这个程序的代码，然后在下面预测一下。你认为当运行程序的时候，它会做什么？用户会想怎样和主板互动？你可能需要吹一下主板，看看这个应用的完整范围。
      CSDU6 - sensors rgb part 1: |-
        # 用颜色显示传感器读数\\r

        \\r
        在以前的预测关卡中，你已经见过如何用`setScale()`（设置范围）方法来将传感器读数的整个范围（0-1024）转换到RGB值得范围（0-255）。让我们用这个办法来做一个应用，来用一个颜色来表达三个模拟传感器的值。\\r
        \\r

        # 这样做\\r

        \\r
        要开始，我们只需要将传感器范围设置正确 - 不用担心实际的背景颜色。\\r
        \\r
        <img src="https://images.code.org/39de88e19682e905a1e08d5f12398f35-image-1488995498849.png"
        style="float: right; width: 300px; margin-left: 20px;"/>\\r
        \\r

        -   使用`sensor.setScale()`模块来设置每个灯光和声音传感器的范围为一个RGB颜色通道的范围。\\r
        -   \*
            为这三个颜色的每一个创建一个变量，并分派给不同的传感器。\\r
        -   用`console.log()`来测试你的变量是否在正确的范围里。\\r
            \\r
            _提示：顺序很重要。你需要在读取值之前设置好传感器的范围。_
      CSDU6 - sensors rgb part 2: |-
        # 将颜色放到屏幕上\\r

        \\r
        现在，你的传感器数据已经在RGB范围内了。你可以开始设置屏幕颜色了。\\r
        \\r

        # 这样做\\r

        \\r

        -   添加一个`setProperty()`（设置属性）模块，并且用它来改变"screen1"（屏幕1）的`"background-color"`（背景颜色）。\\r
        -   添加一个`rgb()`模块，作为`setProperty()`（设置属性）的最后一个参数。\\r
        -   用你创建的三个颜色变量作为`rgb()`模块的输入。
      CSDU6 - sensors rgb part 3: |-
        # 连续更新\\r

        \\r
        如果这个传感器到颜色的应用只能在启动应用时设置一次颜色，那它不会非常有用。你可以用传感器的“数据”事件来让你的应用能够在每次值改变时，持续的更新背景颜色。\\r
        \\r
        将你的 `setScale()`（设置范围）模块移动到其中一个传感器的事件处理函数中，从而让应用能够持续更新。
      CSDU6 - sensors sound: |-
        # 读取声音传感器\\r

        \\r
        在这个应用中，我们已经增加了一个标识为"sound\_value"的文本标签。用`soundSensor.value`（声音传感器.值）模块，来显示声音传感器的值。
      CSDU6 - sensors temp f c: |-
        # 华氏和摄氏温度\\r

        \\r
        当声音、灯光和温度都用同一个方式运行时（将模拟输入转换为一个10比特的数字），温度传感器用起来经常会有点不同。特别是当你用温度传感器时，你会想用华氏或是摄氏度，而不是仅仅得到某个范围内的值。为了做到这个，温度传感器有两个特别的模块，`tempSensor.F` 和`tempSensor.C`。\\r
        \\r

        # 这样做\\r

        \\r
        用一个事件处理函数，编写程序来持续的将正确的温度值读出来，更新到标签"temp_c"和"temp_f"中。
      CSDU6 - sensors temp: |-
        # 制作一个温度应用程序\\r

        \\r
        光线和声音传感器只能输出一个原始的`value`属性值，而温度传感器更聪明一些。它有两个属性`tempSensor.F`和`tempSensor.C`，而不是一个`tempSensor.value`。这样，它能将原始输入转换为摄氏或者华氏温度。\\r
        \\r

        # 这样做\\r

        \\r
        做一个简单的温度应用来从温度传感器中读出值。
        你的应用可以显示华氏或摄氏温度（或者都显示！）\\r
        \\r
        \*
        _挑战：你能让你的程序持续更新读出的温度吗？_
      CSDU6 - sensors theremin 1: |-
        # 灯光电子琴：收集并缩放输入\\r

        \\r
        你需要哪个传感器来收集输入？\\r
        这个应用应该用什么范围的输入更合适？\\r
        \\r

        # 这样做\\r

        \\r
        增加一个事件处理函数来从你选择的传感器持续的收集数据，并用`console.log()`（控制台.日志）来跟踪它如何根据用户输入变化。如果有必要，将输入范围改为需要的值。
      CSDU6 - sensors theremin 2: |-
        # 灯光电子琴：显示输出\\r

        \\r
        收集的数据应该如何显示？\\r
        你的数据在显示前需要转换或处理吗？\\r
        \\r

        # 这样做\\r

        \\r
        将代码里调用`console.log()`的替换为项目中需要的输出类型。
      CSDU6 - sensors theremin 3: "# 灯光电子琴：完成它\\\\r\n\n\\\\r\n你的应用达到了目标的最低要求了吗？\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n最后再润色一下你的应用。返回你的计划向导，确保应用符合了最初的目标。"
      CSDU6 - sensors vu meter 1: |-
        # 音量表：收集并缩放输入\\r

        \\r
        你需要哪个传感器来收集输入？\\r
        这个应用应该用什么范围的输入更合适？\\r
        \\r

        # 这样做\\r

        \\r
        增加一个事件处理函数来从你选择的传感器持续的收集数据，并用`console.log()`（控制台.日志）来跟踪它如何根据用户输入变化。如果有必要，将输入范围改为需要的值。\\r
        \\r
        _提示：如果要用10个彩色LED灯作为输出，你应该怎样设置传感器的范围？_
      CSDU6 - sensors vu meter 2: |-
        # 音量表：显示输出\\r

        \\r
        收集的数据应该如何显示？\\r
        你的数据在显示前需要转换或处理吗？\\r
        \\r

        # 这样做\\r

        \\r
        将代码里调用`console.log()`的替换为项目中需要的输出类型。\\r
        \\r
        _提示：你可能需要用条件来决定打开哪些LED灯，关闭哪些LED灯。_
      CSDU6 - sensors vu meter 3: "# 音量表：完成它\\\\r\n\n\\\\r\n你的应用达到了目标的最低要求了吗？\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n最后再润色一下你的应用。返回你的计划向导，确保应用符合了最初的目标。"
      CSDU6 - toggle state LED prediction: 请参见降价的包含级别
      CSDU6 - toggle state LED prediction_2018: 请参见降价的包含级别
      CSDU6 - toggle state LED prediction_2019: 请参见降价的包含级别
      CSDU6 - toggleswitch state setProp: |-
        # 状态和切换开关\\r

        \\r
        这个程序能告诉你这个切换开关时开着的还是关着的，但它需要让`toggleSwitch.isOpen`模块正常工作。`toggleSwitch.isOpen`为`true`（真）时表示时开着的，如果是关着的就是`false`（假）。\\r
        \\r

        # 这样做\\r

        -   用`toggleSwitch.isOpen`属性完成这个如果语句。\\r
        -   运行程序，并点击左按钮，然后将切换开关滑动，并再次点击按钮。
      CSDU6 - toggleswitch state setProp_2018: |-
        # 状态和切换开关\\r

        \\r
        这个程序能告诉你这个切换开关时开着的还是关着的，但它需要让`toggleSwitch.isOpen`模块正常工作。`toggleSwitch.isOpen`为`true`（真）时表示时开着的，如果是关着的就是`false`（假）。\\r
        \\r

        # 这样做\\r

        -   用`toggleSwitch.isOpen`属性完成这个如果语句。\\r
        -   运行程序，并点击左按钮，然后将切换开关滑动，并再次点击按钮。
      CSDU6 - toggleswitch state setProp_2019: |-
        # 状态和切换开关\\r

        \\r
        这个程序能告诉你这个切换开关时开着的还是关着的，但它需要让`toggleSwitch.isOpen`模块正常工作。`toggleSwitch.isOpen`为`true`（真）时表示时开着的，如果是关着的就是`false`（假）。\\r
        \\r

        # 这样做\\r

        -   用`toggleSwitch.isOpen`属性完成这个如果语句。\\r
        -   运行程序，并点击左按钮，然后将切换开关滑动，并再次点击按钮。
      CSDU6 - toggleswitch state: |-
        # 状态和切换开关\\r

        \\r
        切换开关有一个`toggleSwitch.isOpen`属性，它能一直跟踪开关在哪个**状态**（打开或关闭） 。`toggleSwitch.isOpen`是一个布尔值，所以如果开关是开着的，它的值就是`true`，如果是关着的就是`false`。\\r
        \\r

        # 这样做\\r

        \\r
        你需要添加一个如果-否则语句来检查切换开关是开着的还是关着的。\\r
        \\r

        -   将`toggleSwitch.isOpen`模块拖动到"如果"条件里。因为`toggleSwitch.isOpen`是一个布尔变量，所以条件读作"如果为真"。\\r
            \\r
        -   \*
            如果开关是开着的，添加`console.log()`语句来说"打开！"，否则说"关闭！" 。\\r
            \\r
        -   运行代码，并切换开关看看会发生什么。\\r
            \\r
            记住，程序是写在一个事件下的。当你切换了开关后，你_必须_点击左按钮来更新程序。
      CSDU6 array index predict contained: |-
        # 预测\\r

        \\r
        下面的代码会在屏幕上显示4样东西。你认为它们会是什么？
      CSDU6 array index predict contained_2018: |-
        # 预测\\r

        \\r
        下面的代码会在屏幕上显示4样东西。你认为它们会是什么？
      CSDU6 array index predict contained_2019: |-
        # 预测\\r

        \\r
        下面的代码会在屏幕上显示4样东西。你认为它们会是什么？
      CSDU6 array length predict: |-
        # 从数组中播放音符\\r

        \\r
        你可能已经注意到, 当你从上一个气泡中运行代码时, 它的声音与前面的气泡没有什么不同。你觉得是为什么？
      CSDU6 array select days: |-
        # 访问数组中的条目\\r

        \\r
        这个程序使用电路游戏板。它创建一周中的每天的数组。按下左键时，它将显示 "星期二" 。\\r
        \\r

        # 这样做\\r

        \\r

        -   添加代码，让它在按下右按钮时，显示日期为"星期四" 。
      CSDU6 array select days_2018: |-
        # 访问数组中的条目\\r

        \\r
        这个程序使用电路游戏板。它创建一周中的每天的数组。按下左键时，它将显示 "星期二" 。\\r
        \\r

        # 这样做\\r

        \\r

        -   添加代码，让它在按下右按钮时，显示日期为"星期四" 。
      CSDU6 array select days_2019: |-
        # 访问数组中的条目\\r

        \\r
        这个程序使用电路游戏板。它创建一周中的每天的数组。按下左键时，它将显示 "星期二" 。\\r
        \\r

        # 这样做\\r

        \\r

        -   添加代码，让它在按下右按钮时，显示日期为"星期四" 。
      CSDU6 arrays rainbow: |-
        # 索引练习\\r

        \\r
        <img src="https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45
        PM.png" style="width: 150px; float: right">\\r
        \\r
        这里已经提供了一些**初始代码**，创建了一个叫做`colors`（颜色）的列表。\\r
        \\r

        -   用`setProperty`（设置属性）和这个颜色列表来改变按钮的`background-color`（背景色）来创建一条彩虹。第一个按钮已经为你做好了。
      CSDU6 arrays random: |-
        # 表达式作为索引：使用变量\\r

        \\r

        -   这里已经提供了一些**初始的代码**，它为图标库里的图标创建了一组标识。\\r
        -   **编写代码**把屏幕上的图片设为列表中随机的图标。
      CSDU6 arrays select icons: |-
        # 表达式作为索引：使用变量\\r

        \\r

        -   这里已经提供了一些**初始的代码**，它为图标库里的图标创建了一组标识。\\r
        -   **编写代码**把屏幕上的图片设为列表中随机的图标。
      CSDU6 arrays select rainbow: |-
        # 索引练习 \\r

        \\r
        <img
        src="https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45
        PM.png" style="width: 150px; float: right">\\r
        \\r
        \*\* 已提供的**初始的代码**创建一个了一个`colors`（颜色）的列表, 并使用它来设置屏幕上矩形的颜色。 不幸的是，颜色的顺序不对。\\r
        \\r

        # 这样做\\r

        \\r

        -   更改每个选择模块内的索引号, 使彩虹如右侧图片一样出现。
      CSDU6 arrays select rainbow_2018: |-
        # 索引练习 \\r

        \\r
        <img
        src="https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45
        PM.png" style="width: 150px; float: right">\\r
        \\r
        \*\* 已提供的**初始的代码**创建一个了一个`colors`（颜色）的列表, 并使用它来设置屏幕上矩形的颜色。 不幸的是，颜色的顺序不对。\\r
        \\r

        # 这样做\\r

        \\r

        -   更改每个选择模块内的索引号, 使彩虹如右侧图片一样出现。
      CSDU6 arrays select rainbow_2019: |-
        # 索引练习 \\r

        \\r
        <img
        src="https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45
        PM.png" style="width: 150px; float: right">\\r
        \\r
        \*\* 已提供的**初始的代码**创建一个了一个`colors`（颜色）的列表, 并使用它来设置屏幕上矩形的颜色。 不幸的是，颜色的顺序不对。\\r
        \\r

        # 这样做\\r

        \\r

        -   更改每个选择模块内的索引号, 使彩虹如右侧图片一样出现。
      CSDU6 arrays select random: |-
        # 随机选择\\r

        \\r
        你还可以使用 `randomNumber`（随机数字）模块而不是索引来选择列表中的随机元素。此程序从列表中选择一个随机图标, 并在按下左按钮时将其显示在屏幕上。 现在, 图标总是蓝色的。\\r
        \\r

        # 这样做\\r

        -   添加代码，从列表中选择随机的颜色，并将它作为图标的颜色。
      CSDU6 arrays select random_2018: |-
        # 随机选择\\r

        \\r
        你还可以使用 `randomNumber`（随机数字）模块而不是索引来选择列表中的随机元素。此程序从列表中选择一个随机图标, 并在按下左按钮时将其显示在屏幕上。 现在, 图标总是蓝色的。\\r
        \\r

        # 这样做\\r

        -   添加代码，从列表中选择随机的颜色，并将它作为图标的颜色。
      CSDU6 arrays select random_2019: |-
        # 随机选择\\r

        \\r
        你还可以使用 `randomNumber`（随机数字）模块而不是索引来选择列表中的随机元素。此程序从列表中选择一个随机图标, 并在按下左按钮时将其显示在屏幕上。 现在, 图标总是蓝色的。\\r
        \\r

        # 这样做\\r

        -   添加代码，从列表中选择随机的颜色，并将它作为图标的颜色。
      CSDU6 arrays select variable: |-
        # 使用变量\\r

        \\r
        这个程序像上一个一样，但图标应该总是匹配的颜色（红色的心, 黄色的星星, 绿色的叶子, 和蓝色的水）。 你可以使用变量"myIndex" 来执行此项，它将存储随机数字的值，以便从每个列表中的同一位置获取图标和颜色。\\r
        \\r

        # 这样做\\r

        -   更改代码, 用 "myIndex"变量来选择图标及其颜色。
      CSDU6 arrays select variable_2018: |-
        # 使用变量\\r

        \\r
        这个程序像上一个一样，但图标应该总是匹配的颜色（红色的心, 黄色的星星, 绿色的叶子, 和蓝色的水）。 你可以使用变量"myIndex" 来执行此项，它将存储随机数字的值，以便从每个列表中的同一位置获取图标和颜色。\\r
        \\r

        # 这样做\\r

        -   更改代码, 用 "myIndex"变量来选择图标及其颜色。
      CSDU6 arrays select variable_2019: |-
        # 使用变量\\r

        \\r
        这个程序像上一个一样，但图标应该总是匹配的颜色（红色的心, 黄色的星星, 绿色的叶子, 和蓝色的水）。 你可以使用变量"myIndex" 来执行此项，它将存储随机数字的值，以便从每个列表中的同一位置获取图标和颜色。\\r
        \\r

        # 这样做\\r

        -   更改代码, 用 "myIndex"变量来选择图标及其颜色。
      CSDU6 arrays variable: |-
        # 表达式作为索引：使用变量\\r

        \\r

        -   这里已经提供了一些**初始的代码**，它为图标库里的图标创建了一组标识。\\r
        -   **编写代码**把屏幕上的图片设为列表中随机的图标。
      CSDU6 buzzer 2d arrays: |-
        # 挑战：二维数组\\r

        \\r
        数组可以容纳各种数据, 如数字、字符串甚至其他数组。当我们把一个数组放入另一个, 这将成为一个二位数组。`buzzer.playSong()`（蜂鸣器.播放歌曲）
        模块可以使用二维数组来播放音色更精确的歌曲。\\r
        \\r
        用来播放音符的结构如下所示: \\r
        \\r
        `buzzer.playNotes(
        [要播放的音符数组] , 整首歌的速度);`\\r
        \\r
        它和`buzzer.playSong()`的主要区别是`[要播放的音符数值]`，
        中的每个元素是一个具有两个元素的数组：要播放的音符和音符的持续时间。有时在歌曲中需要有个四分音符，其他时候你需要一个全音符，或者介于两者之间。一首完整的歌曲可能看起来像这样: \\r
        \\r
        `buzzer.playSong([\r
        ["G3",0.25],\r
        ["C4",0.25],\r
        ["E4",0.25],\r
        ["G4",0.125],\r
        [null,0.375],\r
        ["E4",0.1875],\r
        ["G4",1]\r
        ],
        120);`\\r
        \\r

        # 这样做\\r

        \\r

        -   用`buzzer.playSong`模块来制作一首不同的歌曲。\\r
        -   当你对结构感到得心应手时, 给歌曲添加更多的音符。
      CSDU6 buzzer 2d arrays_2018: |-
        # 挑战：二维数组\\r

        \\r
        数组可以容纳各种数据, 如数字、字符串甚至其他数组。当我们把一个数组放入另一个, 这将成为一个二位数组。`buzzer.playSong()`（蜂鸣器.播放歌曲）
        模块可以使用二维数组来播放音色更精确的歌曲。\\r
        \\r
        用来播放音符的结构如下所示: \\r
        \\r
        `buzzer.playNotes(
        [要播放的音符数组] , 整首歌的速度);`\\r
        \\r
        它和`buzzer.playSong()`的主要区别是`[要播放的音符数值]`，
        中的每个元素是一个具有两个元素的数组：要播放的音符和音符的持续时间。有时在歌曲中需要有个四分音符，其他时候你需要一个全音符，或者介于两者之间。一首完整的歌曲可能看起来像这样: \\r
        \\r
        `buzzer.playSong([\r
        ["G3",0.25],\r
        ["C4",0.25],\r
        ["E4",0.25],\r
        ["G4",0.125],\r
        [null,0.375],\r
        ["E4",0.1875],\r
        ["G4",1]\r
        ],
        120);`\\r
        \\r

        # 这样做\\r

        \\r

        -   用`buzzer.playSong`模块来制作一首不同的歌曲。\\r
        -   当你对结构感到得心应手时, 给歌曲添加更多的音符。
      CSDU6 buzzer 2d arrays_2019: |-
        # 挑战：二维数组\\r

        \\r
        数组可以容纳各种数据, 如数字、字符串甚至其他数组。当我们把一个数组放入另一个, 这将成为一个二位数组。`buzzer.playSong()`（蜂鸣器.播放歌曲）
        模块可以使用二维数组来播放音色更精确的歌曲。\\r
        \\r
        用来播放音符的结构如下所示: \\r
        \\r
        `buzzer.playNotes(
        [要播放的音符数组] , 整首歌的速度);`\\r
        \\r
        它和`buzzer.playSong()`的主要区别是`[要播放的音符数值]`，
        中的每个元素是一个具有两个元素的数组：要播放的音符和音符的持续时间。有时在歌曲中需要有个四分音符，其他时候你需要一个全音符，或者介于两者之间。一首完整的歌曲可能看起来像这样: \\r
        \\r
        `buzzer.playSong([\r
        ["G3",0.25],\r
        ["C4",0.25],\r
        ["E4",0.25],\r
        ["G4",0.125],\r
        [null,0.375],\r
        ["E4",0.1875],\r
        ["G4",1]\r
        ],
        120);`\\r
        \\r

        # 这样做\\r

        \\r

        -   用`buzzer.playSong`模块来制作一首不同的歌曲。\\r
        -   当你对结构感到得心应手时, 给歌曲添加更多的音符。
      CSDU6 buzzer.stop: |-
        # 停止音乐\\r

        \\r
        有时，你要能在需要时停止音乐，就如下面的代码中所示。
        没有指定持续时间, 所以现在音符持续播放。幸运的是，`buzzer.stop()`方法可以拯救你的耳朵。\\r
        \\r

        # 这样做\\r

        \\r

        -   找到一种方法,用`buzzer.stop()`来停止音符播放。\\r
        -   祝贺你成功的停止了无穷无尽的音乐！
      CSDU6 buzzer.stop_2018: |-
        # 停止音乐\\r

        \\r
        有时，你要能在需要时停止音乐，就如下面的代码中所示。
        没有指定持续时间, 所以现在音符持续播放。幸运的是，`buzzer.stop()`方法可以拯救你的耳朵。\\r
        \\r

        # 这样做\\r

        \\r

        -   找到一种方法,用`buzzer.stop()`来停止音符播放。\\r
        -   祝贺你成功的停止了无穷无尽的音乐！
      CSDU6 buzzer.stop_2019: |-
        # 停止音乐\\r

        \\r
        有时，你要能在需要时停止音乐，就如下面的代码中所示。
        没有指定持续时间, 所以现在音符持续播放。幸运的是，`buzzer.stop()`方法可以拯救你的耳朵。\\r
        \\r

        # 这样做\\r

        \\r

        -   找到一种方法,用`buzzer.stop()`来停止音符播放。\\r
        -   祝贺你成功的停止了无穷无尽的音乐！
      CSDU6 challenge play songs: |-
        # 挑战：唱歌机器人\\r

        \\r
        你有了所有需要的工具来制作一个很棒的唱歌机器人! 试着用你的手用蜂鸣器来制作一部音乐杰作。下面是可以添加到机器人的一些额外的想法: \\r
        \\r

        -   考虑制作一个使用不同的八度音阶的歌曲。\\r
        -   也许你可以通过使用主板上的按钮来播放歌曲。
      CSDU6 circuit playground piano: |-
        # 电路钢琴\\r

        \\r
        看看下面的代码。你不用改变它，只用试试看它是做什么的。\\r
        \\r

        # 这样做\\r

        \\r

        -   运行程序，并在屏幕上弹钢琴。
      CSDU6 circuit playground piano_2018: |-
        # 电路钢琴\\r

        \\r
        看看下面的代码。你不用改变它，只用试试看它是做什么的。\\r
        \\r

        # 这样做\\r

        \\r

        -   运行程序，并在屏幕上弹钢琴。
      CSDU6 circuit playground piano_2019: |-
        # 电路钢琴\\r

        \\r
        看看下面的代码。你不用改变它，只用试试看它是做什么的。\\r
        \\r

        # 这样做\\r

        \\r

        -   运行程序，并在屏幕上弹钢琴。
      CSDU6 frequency creation: |-
        # 让蜂鸣器发出蜂鸣\\r

        \\r
        现在，你能使用蜂鸣器的频率了，试着让蜂鸣器在同一个按钮弹起时播放过一个高音。\\r
        \\r

        # 这样做\\r

        -   添加另一个onBoardEvent（当主板上发生事件时）模块，让左键在**弹起**时播放一个高音。
      CSDU6 frequency creation_2018: |-
        # 让蜂鸣器发出蜂鸣\\r

        \\r
        现在，你能使用蜂鸣器的频率了，试着让蜂鸣器在同一个按钮弹起时播放过一个高音。\\r
        \\r

        # 这样做\\r

        -   添加另一个onBoardEvent（当主板上发生事件时）模块，让左键在**弹起**时播放一个高音。
      CSDU6 frequency creation_2019: |-
        # 让蜂鸣器发出蜂鸣\\r

        \\r
        现在，你能使用蜂鸣器的频率了，试着让蜂鸣器在同一个按钮弹起时播放过一个高音。\\r
        \\r

        # 这样做\\r

        -   添加另一个onBoardEvent（当主板上发生事件时）模块，让左键在**弹起**时播放一个高音。
      CSDU6 frequency modification: |-
        # 让蜂鸣器蜂鸣\\r

        \\r
        蜂鸣器的频率决定了当它发出声音时，音调的高低。你给的频率的数字越大，蜂鸣器的发出的声调越高。\\r
        \\r

        # 这样做\\r

        -   现在，当左键按下时，蜂鸣器会播放一个高音。改为让蜂鸣器播放一个低音。\\r
      CSDU6 frequency modification_2018: |-
        # 让蜂鸣器蜂鸣\\r

        \\r
        蜂鸣器的频率决定了当它发出声音时，音调的高低。你给的频率的数字越大，蜂鸣器的发出的声调越高。\\r
        \\r

        # 这样做\\r

        -   现在，当左键按下时，蜂鸣器会播放一个高音。改为让蜂鸣器播放一个低音。\\r
      CSDU6 frequency modification_2019: |-
        # 让蜂鸣器蜂鸣\\r

        \\r
        蜂鸣器的频率决定了当它发出声音时，音调的高低。你给的频率的数字越大，蜂鸣器的发出的声调越高。\\r
        \\r

        # 这样做\\r

        -   现在，当左键按下时，蜂鸣器会播放一个高音。改为让蜂鸣器播放一个低音。\\r
      CSDU6 frequency template: 做一件事!
      CSDU6 frequency template_2018: 做一件事!
      CSDU6 frequency template_2019: 做一件事!
      CSDU6 light sensor alarm: |-
        # 自动警报\\r

        \\r
        让我们再回头看看上次的警报应用。当我们上次更新应用时，除了LED灯以外，我们还让它开关了蜂鸣器，但它仍然需要手工来触发。现在，我们知道如何使用传感器时间了，你能让警报自动触发了！\\r
        \\r

        # 这样做\\r

        \\r
        在光线传感器上加一个事件处理函数，让它在看见光时打开警报。你可以通过放一张纸一样的东西到主板前来测试警报。如果有人拿走了这张纸，你的警报就开始发出蜂鸣声。\\r
        \\r
        _挑战，你能让按钮和传感器能够很好的一起工作吗？_
      CSDU6 making new arrays: |-
        # 制作新数组\\r

        \\r
        你知道如何改变数组了，现在是时候让你自己做了。\\r
        \\r

        # 这样做\\r

        \\r

        -   用你想要的任何音符制作一个新的数组。他们可以是不同的八度音阶，以一定的音调排列等等。任何你想要的！\\r
        -   当按下**右**按钮时, 让蜂鸣器播放数组中的随机音符。
      CSDU6 making new arrays_2018: |-
        # 制作新数组\\r

        \\r
        你知道如何改变数组了，现在是时候让你自己做了。\\r
        \\r

        # 这样做\\r

        \\r

        -   用你想要的任何音符制作一个新的数组。他们可以是不同的八度音阶，以一定的音调排列等等。任何你想要的！\\r
        -   当按下**右**按钮时, 让蜂鸣器播放数组中的随机音符。
      CSDU6 making new arrays_2019: |-
        # 制作新数组\\r

        \\r
        你知道如何改变数组了，现在是时候让你自己做了。\\r
        \\r

        # 这样做\\r

        \\r

        -   用你想要的任何音符制作一个新的数组。他们可以是不同的八度音阶，以一定的音调排列等等。任何你想要的！\\r
        -   当按下**右**按钮时, 让蜂鸣器播放数组中的随机音符。
      CSDU6 note array length p2: "# 数组的长度\\\\r\n\n\\\\r\n`randomNumber()`（随机数字）函数一致在生成介于0到2之间的数字。你在数组中添加了更多索引，因此如果数组中有5项，则检查0到2不太有用。\\\\r\n\\\\r\n你可以使用`array.length()`（数组.长度）的**length**来修复此问题。如果我们生成的随机数介于0和数组的长度之间，你将可以播放数组中的任何元素！有点意思了！\\\\r\n\\\\r\n如果数组长度为 5，你想在0（第一个索引）和5之间选择随机索引，则计算机最多能选择到6，而数组里没有它。为了解决这个问题，必须像下面的代码一样，从数组的长度减去1：\\\\r\n\\\\r\n![](https://images.code.org/6e4e01b50708667fcd1585b61b1a87ae-image-1512083621011.jpg)\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n\n-   设置`randomNumber()`（随机数字）以生成介于0和列表长度减去1之间的数字\\\\r\n-   添加尽可能多的音符到数组中。\\\\r\n-   运行代码看看会发生什么。\\\\r"
      CSDU6 note array length: "# 添加到数组\\\\r\n\n\\\\r\n数组不必是固定长度，你可以根据需要在数组中添加或删除尽可能多的条目。数组模块的左右箭头允许你在数组的末尾添加或删除项。\\\\r\n\\\\r\n![](https://images.code.org/a9a72527b700740382cae5017f8fa16d-image-1511913249739.jpg)\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n\n-   在现有数组中添加两个独特的音符。\\\\r\n-   运行代码查看发生了什么。"
      CSDU6 piano with notes: |-
        # 钢琴音符\\r

        \\r
        这是你在课程刚开始看到的一样的钢琴，但有一些缺陷！\\r
        \\r

        # 这样做\\r

        \\r

        -   编辑代码，让所有的键都使用`buzzer.note()`模块来播放正确的音符。\\r
        -   确保所有传递到`buzzer.note()`里的值都是音符，不是频率。\\r
            \\r
            _提示：记住在音符周围使用引号！例如：`buzzer.note("A4", 100);`_
      CSDU6 piano with notes_2018: |-
        # 钢琴音符\\r

        \\r
        这是你在课程刚开始看到的一样的钢琴，但有一些缺陷！\\r
        \\r

        # 这样做\\r

        \\r

        -   编辑代码，让所有的键都使用`buzzer.note()`模块来播放正确的音符。\\r
        -   确保所有传递到`buzzer.note()`里的值都是音符，不是频率。\\r
            \\r
            _提示：记住在音符周围使用引号！例如：`buzzer.note("A4", 100);`_
      CSDU6 piano with notes_2019: |-
        # 钢琴音符\\r

        \\r
        这是你在课程刚开始看到的一样的钢琴，但有一些缺陷！\\r
        \\r

        # 这样做\\r

        \\r

        -   编辑代码，让所有的键都使用`buzzer.note()`模块来播放正确的音符。\\r
        -   确保所有传递到`buzzer.note()`里的值都是音符，不是频率。\\r
            \\r
            _提示：记住在音符周围使用引号！例如：`buzzer.note("A4", 100);`_
      CSDU6 play null notes: |-
        # Null（空）音符\\r

        \\r
        你可能注意到了，蜂鸣器有些局限性。例如，如果你将相同的音符挨着放到数组里，蜂鸣器就会播放一个音符的长音。你可以用`null`来绕过这个问题。\\r
        \\r
        `null`是计算机科学中表达空的一种方式。`playNotes`会用同样的长度来播放每个音符，因此数组中的`null`元素只是告诉`playNotes`在同样长度的时间内什么也不要放。\\r
        \\r
        \\r

        # 这样做\\r

        \\r

        -   运行代码先听听声音如何。\\r
        -   检查`playNotes()`内的数组。\\r
        -   在一样的两个音符间或其它你觉得合适的地方放个暂停。\\r
            \\r
            _提示：`null`引用了一个值，就像一个变量名。确保不要把它放到引号里！_
      CSDU6 play null notes_2018: |-
        # Null（空）音符\\r

        \\r
        你可能注意到了，蜂鸣器有些局限性。例如，如果你将相同的音符挨着放到数组里，蜂鸣器就会播放一个音符的长音。你可以用`null`来绕过这个问题。\\r
        \\r
        `null`是计算机科学中表达空的一种方式。`playNotes`会用同样的长度来播放每个音符，因此数组中的`null`元素只是告诉`playNotes`在同样长度的时间内什么也不要放。\\r
        \\r
        \\r

        # 这样做\\r

        \\r

        -   运行代码先听听声音如何。\\r
        -   检查`playNotes()`内的数组。\\r
        -   在一样的两个音符间或其它你觉得合适的地方放个暂停。\\r
            \\r
            _提示：`null`引用了一个值，就像一个变量名。确保不要把它放到引号里！_
      CSDU6 play null notes_2019: |-
        # Null（空）音符\\r

        \\r
        你可能注意到了，蜂鸣器有些局限性。例如，如果你将相同的音符挨着放到数组里，蜂鸣器就会播放一个音符的长音。你可以用`null`来绕过这个问题。\\r
        \\r
        `null`是计算机科学中表达空的一种方式。`playNotes`会用同样的长度来播放每个音符，因此数组中的`null`元素只是告诉`playNotes`在同样长度的时间内什么也不要放。\\r
        \\r
        \\r

        # 这样做\\r

        \\r

        -   运行代码先听听声音如何。\\r
        -   检查`playNotes()`内的数组。\\r
        -   在一样的两个音符间或其它你觉得合适的地方放个暂停。\\r
            \\r
            _提示：`null`引用了一个值，就像一个变量名。确保不要把它放到引号里！_
      CSDU6 play predict code: 记号在包含的关卡里
      CSDU6 play predict code_2018: 记号在包含的关卡里
      CSDU6 play predict code_2019: 记号在包含的关卡里
      CSDU6 play predict markdown: |-
        # 做出预测\\r

        \\r
        看一下代码。你觉得它们是做什么的？\\r
        \\r
        猜猜并运行代码来查证！
      CSDU6 play predict markdown_2018: |-
        # 做出预测\\r

        \\r
        看一下代码。你觉得它们是做什么的？\\r
        \\r
        猜猜并运行代码来查证！
      CSDU6 play predict markdown_2019: |-
        # 做出预测\\r

        \\r
        看一下代码。你觉得它们是做什么的？\\r
        \\r
        猜猜并运行代码来查证！
      CSDU6 play songs: |-
        # 制作歌曲\\r

        \\r
        你可以用`buzzer.playNotes()`（蜂鸣器.播放音符）来制作一首完整的歌。它需要两个参数：一个用来播放的音符数组，和一个播放音符的节奏。在前面的泡泡里，你已经创建了音符的数组，并随机的播放了它的元素。但是`buzzer.playNotes()`会按照顺序播放每个音符。\\r
        \\r
        \\r

        # 这样做\\r

        \\r

        -   拖出一个`buzzer.playNotes`模块，并改变里面初始的数组。\\r
        -   \*
            确保在新数组里，至少有两组同一个音符成对出现的。（例如：`["A5", "A5", "G4", "G4"]`）\\r
            \\r
            _提示：别忘了你随时都可以在模块和文本模式之间来回转换。_
      CSDU6 play songs_2018: |-
        # 制作歌曲\\r

        \\r
        你可以用`buzzer.playNotes()`（蜂鸣器.播放音符）来制作一首完整的歌。它需要两个参数：一个用来播放的音符数组，和一个播放音符的节奏。在前面的泡泡里，你已经创建了音符的数组，并随机的播放了它的元素。但是`buzzer.playNotes()`会按照顺序播放每个音符。\\r
        \\r
        \\r

        # 这样做\\r

        \\r

        -   拖出一个`buzzer.playNotes`模块，并改变里面初始的数组。\\r
        -   \*
            确保在新数组里，至少有两组同一个音符成对出现的。（例如：`["A5", "A5", "G4", "G4"]`）\\r
            \\r
            _提示：别忘了你随时都可以在模块和文本模式之间来回转换。_
      CSDU6 play songs_2019: |-
        # 制作歌曲\\r

        \\r
        你可以用`buzzer.playNotes()`（蜂鸣器.播放音符）来制作一首完整的歌。它需要两个参数：一个用来播放的音符数组，和一个播放音符的节奏。在前面的泡泡里，你已经创建了音符的数组，并随机的播放了它的元素。但是`buzzer.playNotes()`会按照顺序播放每个音符。\\r
        \\r
        \\r

        # 这样做\\r

        \\r

        -   拖出一个`buzzer.playNotes`模块，并改变里面初始的数组。\\r
        -   \*
            确保在新数组里，至少有两组同一个音符成对出现的。（例如：`["A5", "A5", "G4", "G4"]`）\\r
            \\r
            _提示：别忘了你随时都可以在模块和文本模式之间来回转换。_
      CSDU6 toggle state prediction: |-
        # 切换开关提高\\r

        \\r
        你也可以在程序的任何位置检查切换开关的值是`open`还是`close`。\\r
        \\r
        如果切换开关是`open`或是`close`时，按下按钮会发生什么不同的事情吗？
      CSDU6 toggle state prediction_2018: |-
        # 切换开关提高\\r

        \\r
        你也可以在程序的任何位置检查切换开关的值是`open`还是`close`。\\r
        \\r
        如果切换开关是`open`或是`close`时，按下按钮会发生什么不同的事情吗？
      CSDU6 toggle state prediction_2019: |-
        # 切换开关提高\\r

        \\r
        你也可以在程序的任何位置检查切换开关的值是`open`还是`close`。\\r
        \\r
        如果切换开关是`open`或是`close`时，按下按钮会发生什么不同的事情吗？
      CSDU6L06 - lists and colorLeds - light pattern off: |-
        # 关掉它\\r

        \\r
        当你启动这个应用时，你的灯是关着的，但要尽快选择一个图案，现在没有办法将灯再关掉！\\r
        \\r

        # 这样做\\r

        \\r
        创建一个函数将所有LED灯都关掉，然后增加一个“关闭"按钮来关闭所有的彩色LED灯。
      CSDU6L06 - lists and colorLeds - set color: |-
        # 增加一些颜色\\r

        \\r
        你可能已经注意到当你在上一级中使用`colorLeds[0].on()`时，LED点亮时是白色的。如果你不指定一个颜色，`on()`将点亮全部三个LED (红、绿、蓝)从而变成白色。你将在工具箱中看到一个叫`colorLeds[0].color()`的新命令，可以让你用类似"蓝"这样的字符串或者一个用`color()`命令的RGB数值指定颜色。\\r
        \\r

        # 这样做\\r

        \\r
        使用`.color()`命令把每个LED设置为不同颜色。
      CSDU6L06 - lists and colorLeds -solo light pattern: |-
        # 光图案\\r

        \\r
        这个应用已经有一个光图案程序，它可以通过点击按钮来激活。请注意, 我们将此图案放入一个函数中，以使代码更简洁和清晰。\\r
        \\r

        # 这样做\\r

        \\r
        创建你自己的光图案函数 - 可以是您最喜欢的假日、学院、运动队的颜色，或者尝试用光来创建一个图像。\\r
        \\r
        在你创建完新的函数后，添加了一个按钮和事件处理程序, 以便您可以在两个光图案之间进行切换。
      CSP U4L01 SFLP: |-
        <div style="width: 250px; text-align: center; float: right; margin-left: 50px">
        <a href="https://images.code.org/8abc8eedb4975d2c55ac5848cac0d0ed-image-1454087887353.png" target="_blank">
        <img src="https://images.code.org/8abc8eedb4975d2c55ac5848cac0d0ed-image-1454087887353.png" style="width: 250px; float: right">
        </a>
        <i>点击放大。</i>
        </div>
      CSP U4L01 SFLP_2019: |-
        <div style="width: 250px; text-align: center; float: right; margin-left: 50px">
        <a href="https://images.code.org/8abc8eedb4975d2c55ac5848cac0d0ed-image-1454087887353.png" target="_blank">
        <img src="https://images.code.org/8abc8eedb4975d2c55ac5848cac0d0ed-image-1454087887353.png" style="width: 250px; float: right">
        </a>
        <i>点击放大。</i>
        </div>
      CSP U5 AP Practice Choose the Algorithm: |-
        # AP 练习

        -   确定算法\\r
            \\r
            **AP 创建表演任务**的其中一个环节就是选择你要开发的算法。\\r
            \\r
            <div style="width:
            80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family:
            serif; font-size: 12pt">\r
            \r
            <b>3. 程序代码</b>\r
            <ul>\r
            <li>用一个<b>椭圆</b>标示出程序中你创建的实现算法的部分，它集成了其它算法和数学或逻辑的概念。</li>\r
            </ul>\r
            </div>\r
            <br>\r
            这时这个问题的评分指南\r
            <div style="magin:auto">\r
            \t<img
            src="https://images.code.org/3240bf9a7f457b8590cf28c4dd4d5418-image-1516294760622.58.32
            AM.png">\r
            <img src="https://images.code.org/4edd1b265ad8932a7d6b9294e5622106-image-1516294762983.58.44
            AM.png">\r
            </div>\r
            \r
            \r
            # 选择学生开发的算法\r
            \r
            下面是从刚刚完成的颜色侦探活动的程序代码。\r
            \r
            ![](https://images.code.org/4708875d71e4dc7cd06e2c1e472d8fdc-image-1516311447828.png)\r
            \r
            **写下哪个椭圆(A, B, C, or D)内的代码最符合学生开发的算法的标准。**\r
            \r
            **用评分指南的标准来解释你的答案。**
      CSP U5 AP Practice Choose the Algorithm_2018: |-
        # AP 练习

        -   确定算法\\r
            \\r
            **AP 创建表演任务**的其中一个环节就是选择你要开发的算法。\\r
            \\r
            <div style="width:
            80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family:
            serif; font-size: 12pt">\r
            \r
            <b>3. 程序代码</b>\r
            <ul>\r
            <li>用一个<b>椭圆</b>标示出程序中你创建的实现算法的部分，它集成了其它算法和数学或逻辑的概念。</li>\r
            </ul>\r
            </div>\r
            <br>\r
            这时这个问题的评分指南\r
            <div style="magin:auto">\r
            \t<img
            src="https://images.code.org/3240bf9a7f457b8590cf28c4dd4d5418-image-1516294760622.58.32
            AM.png">\r
            <img src="https://images.code.org/4edd1b265ad8932a7d6b9294e5622106-image-1516294762983.58.44
            AM.png">\r
            </div>\r
            \r
            \r
            # 选择学生开发的算法\r
            \r
            下面是从刚刚完成的颜色侦探活动的程序代码。\r
            \r
            ![](https://images.code.org/4708875d71e4dc7cd06e2c1e472d8fdc-image-1516311447828.png)\r
            \r
            **写下哪个椭圆(A, B, C, or D)内的代码最符合学生开发的算法的标准。**\r
            \r
            **用评分指南的标准来解释你的答案。**
      CSP U5 AP Practice Choose the Algorithm_2019: |-
        # AP 练习

        -   确定算法\\r
            \\r
            **AP 创建表演任务**的其中一个环节就是选择你要开发的算法。\\r
            \\r
            <div style="width:
            80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family:
            serif; font-size: 12pt">\r
            \r
            <b>3. 程序代码</b>\r
            <ul>\r
            <li>用一个<b>椭圆</b>标示出程序中你创建的实现算法的部分，它集成了其它算法和数学或逻辑的概念。</li>\r
            </ul>\r
            </div>\r
            <br>\r
            这时这个问题的评分指南\r
            <div style="magin:auto">\r
            \t<img
            src="https://images.code.org/3240bf9a7f457b8590cf28c4dd4d5418-image-1516294760622.58.32
            AM.png">\r
            <img src="https://images.code.org/4edd1b265ad8932a7d6b9294e5622106-image-1516294762983.58.44
            AM.png">\r
            </div>\r
            \r
            \r
            # 选择学生开发的算法\r
            \r
            下面是从刚刚完成的颜色侦探活动的程序代码。\r
            \r
            ![](https://images.code.org/4708875d71e4dc7cd06e2c1e472d8fdc-image-1516311447828.png)\r
            \r
            **写下哪个椭圆(A, B, C, or D)内的代码最符合学生开发的算法的标准。**\r
            \r
            **用评分指南的标准来解释你的答案。**
      Calc Circles of Eval 3: 完成评估模块来匹配此声明。
      Calc Circles of Eval 7: 完成评估模块来匹配此声明。
      Calc Circles of Eval 8: 完成评估模块来匹配此声明。
      Calc Circles of Eval 9: 完成评估模块来匹配此声明。
      'Challenge: Buzzer and LED': |-
        # 挑战\\r

        \\r
        在开始挑战前，先和你的老师确认一下。\\r
        \\r
        现在，你知道如何使用LED的蜂鸣器了，试着创建一个应用能够播放大量不同的声音，并使用LED灯。你可以制作一个键盘或电子节拍器，这会在你点击不同按钮时播放不同的声音。
      'Challenge: Input and UI': "# 停止\\\\r\n\n\\\\r\n你已经完成课程了。和你的老师检查一下，你是否可以开始挑战关卡了。如果你有时间，这是一个额外的挑战来练习你的技巧。如果你没有时间完成的话，没什么大不了的！\\\\r\n\\\\r\n\n# \n\n挑战\\\\r\n\\\\r\n点击<a href=\"https://studio.code.org/p/applab\" target=\"_blank\">完整的应用实验室</a>，并试着创造像这个级别中的例子一样的程序。"
      'Challenge: Lights Picker': |-
        # 挑战：更多模式\\r

        \\r
        添加更多的一些模式。找个伙伴，将他们的模式作为一个选项。确保将每个模式都放到它自己的函数中。
      'Challenge: List of Notes': |-
        # 挑战：\\r

        \\r
        开始挑战前，请先和你的老师确认。\\r
        \\r
        **初始的代码：**
        屏幕上已经为你提供了30个按钮名字的数组。（不包括新建模式按钮）。\\r
        \\r
        **写代码：** 每次新建模式按钮被点击时，至少列表中的一个碎金按钮会被设置为随机的颜色。\\r
      'Challenge: Random Button Colors': |-
        # 挑战：随机按钮颜色\\r

        \\r
        开始挑战前，请先和你的老师确认。\\r
        \\r
        **初始的代码：**
        屏幕上已经为你提供了30个按钮名字的数组。（不包括新建模式按钮）。\\r
        \\r
        **写代码：** 每次新建模式按钮被点击时，至少列表中的一个碎金按钮会被设置为随机的颜色。\\r
      Classroom Assessment Techniques: 以下链接是一个介绍设计和使用课堂评估技术的过程的资源
      Classroom Management Tips for School Computer Labs: "## \n\n管理计算机实验室的策略\\\\r\n\\\\r\n\\\\r\n如果你是在计算机实验室教课的新人，考虑实现确保强大安排的7条提示。它被概括在了Angela Watson的文章里。\n\\\\r\n\\\\r\n<br><br>"
      'Collaborative Learning and Group Work: Description and Strategies': '以下链接到康奈尔大学卓越教学中心，它提供小组学习的简要描述, 以及一些特定的技术来设计和实施小组工作活动:  '
      Color Blindness Filter: |-
        # 色盲过滤器\\r

        \\r
        \\r
        \\r
      Color Contrast Checker: "# 颜色对比度\\\\r\n\n\\\\r\n人们需要看见并阅读你的网页上的内容，从而让它有用。有些人的视力不好，还有一些是色盲。你有没有想出应该如何设计？\\\\r\n\\\\r\n其中最简单的方法来确定许多人有能力来阅读你的网站的内容，是确保网站的两种颜色间有足够的对比度。\\\\r\n\\\\r\n<http://gomedia.com/zine/tutorials/rule-three-contrast-contrast-contrast/\\r>\n\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n\n-   使用颜色对比度检查器来看看你的网页上使用的不同颜色的对比度如何。"
      Considerations for the 1-to-1 Classroom: |-
        ## 1-1 课堂\\r

        \\r
        如果你是来管理计算机教室的新人，读一读教育周的这篇文章。它概括了一些重要的考虑。\\r
        \\r
        <br><br>
      CoureE_HOC 2018 Level_7a: 找到了水下废墟。在沙石红搜寻包含**海晶石** ![](https://images.code.org/29a5fd76b869d755a60d39fbbb4057eb-image-1538699081910.png)宝藏的**箱子** ![](https://images.code.org/29a5fd76b869d755a60d39fbbb4057eb-image-1538699081910.png)。
      Course 4 Artist 1: |-
        帮我画个盒子  \\r
         (每行200像素长) \\r
        \\r
        <br/><br/>\\r
        \\r
      Course 4 Artist 10: "<img src=\"https://images.code.org/c876143212d195192013582f57c6df04-image-1445625392518.36.18.png\"\nwidth=\"150px;\" style=\"mix-blend-mode: multiply;\" />\n\n**游戏时间：** 这是一个有趣的形状的代码。\n\n当你重复它多次，在每个迭代间转向时，会发生什么？ \n\n注意形状中的这些转向最多增加_420度_。这意味着，当小艺术家完成绘画时，他朝向的方向和开始时不同。新方向和开始的方向相比，会恰好往_右_ _60度_。\n\n<hr/>\n\n<h4>\n<details>\n<summary><b>重复4次</b></summary>\n<br/>\n如果你想只重复4次来画一个整圆，你需要让小艺术家每次转**360度/4 = 90度**。通过加入一个` 向右转30度`模块到外层循环来实现（因为**60+30=90**。）\n<br/>\n<img src=\"https://images.code.org/9da67a628ed72e87520a02a0d917e2af-image-1440132370113.44.12.png\"\nwidth=\"500px;\" style=\"mix-blend-mode: multiply;\" />\n<br/><br/>\n</details>\n</h4>\n\n<h4>\n<details>\n<summary><b>重复6次</b></summary>\n<br/>\n当你重复这个形状6次，能一共转**6x60度**，正好是一整个圆的**360 度**。\n<img\nsrc=\"https://images.code.org/b79f96b87097ce3afe8a6a5608d04e36-image-1440132287456.44.27.png\" width=\"500px;\" style=\"mix-blend-mode:\nmultiply;\" />\n</details>\n</h4>\n\n<h4>\n<details>\n<summary><b>重复12次</b></summary>\n<br/>\n如果你重复这个图12次，每次需要转**360度/12=30度**。这意味着你要在重复形状前，用`向左转30度`来调整一下小艺术家。<br/><br/>\n<img src=\"https://images.code.org/ad254952522674496918561096817c66-image-1440132424792.44.01.png\"\nwidth=\"500px;\" style=\"mix-blend-mode: multiply;\" />\n</details>\n</h4>\n\n现在，到你了！你能通过重复开始的形状来重新创建每个图片吗？  "
      Course 4 Artist 11: "<img src=\"https://images.code.org/6cac10470af71bbb5d75bf5e2669046f-image-1439939145211.png\"\nwidth=\"200px\"/>\\\\r\n\\\\r\n挑战的时候到了！\\\\r\n\\\\r\n这个设计只使用了你见过的模块。你能想出如何再次创建出它吗？随便试错。没有人期待第一次就能做好。\\\\r\n\\\\r\n重复的形状基本和上一关的一样，只有第一个的循环的长度要小一点。 "
      Course 4 Artist 12: |-
        <img src="https://images.code.org/70795d84048767ae7fb65883f476b27c-image-1440050836837.01.09.png"
        width="250px"/>\\r
        \\r
        自由发挥灵感：你已经学会了所有需要创建这个模式的知识了！如果这个图形引起了你的联想，试试画出一些类似的图像。要不然，就画画你想画的一些东西。 \\r
        \\r
        <br/>
      Course 4 Artist 13: 还想玩？这里是一块空的画布，想画什么就画什么吧！
      Course 4 Artist 2: |-
        你能循环这段代码来画出灰色的正方形吗？\\r
        （边长是300像素）
      Course 4 Artist 20: |-
        还想玩？\\r
        \\r
        这是空白的画布。想画什么就画什么吧！
      Course 4 Artist 3: |-
        试试运行这个代码会发生什么（或者点击“运行”来测试代码）。\\r
        \\r
        然后，重复足够多的次数来完成这幅画。
      Course 4 Artist 4: |-
        一个圆有多少都？\\r
        将这个数字填到重复模块中来创造一个彩色的圆。
      Course 4 Artist 5: |-
        画出另一半图形，让它对称。\\r
        这是等边三角形，每条边是50像素。\\r
        \\r
        提示：你可能需要多运行几次代码来看看需要加上什么模块。
      Course 4 Artist 6: 完成代码来画出这些等边三角形。
      Course 4 Artist 7: '现在，把这个循环嵌套在另一个循环里面来画10个三角形。 '
      Course 4 Artist 8: 通过循环整个模块多次来画出太阳。
      Course 4 Artist 8a: 还记得这个形状吗？现在从零开始画吧！
      Course 4 Artist 9: '循环这个设计10次，并且确保在每个图形之间要转动一下。 '
      Course 4 Artist Binary 1: |-
        这个函数从一个二进制的字符串里面获得1和0，然后指导小艺术家根据它们来从左到右，从上到下。\\r
        \\r
        当小艺术家看到1时，就会填满正方形，当看到0时，则什么也不做。\\r
        \\r
        运行一下代码，看看小艺术家是怎样用二进制来画出这个图形的。
      Course 4 Artist Binary 1a: |-
        这个函数从一个二进制的字符串里面获得1和0，然后指导小艺术家根据它们来从左到右，从上到下。当小艺术家看到1时，就会填满正方形，当看到0时，则什么也不做。\\r
        \\r
        运行一下代码，看看小艺术家是怎样用二进制来画出这个图形的。
      Course 4 Artist Binary Free Play 2b: "<img src=\"https://images.code.org/0a30f23ff6138828d053267719d34fa8-image-1444435986654.00.22.png\"\nwidth=\"250px\"/>\\\\r\n\\\\r\n**自由发挥灵感：**你已经学会了所有需要创建这个模式的知识了！\\\\r\n\\\\r\n如果这个图形引起了你的联想，试试画出一些类似的图像。要不然，就画画你想画的一些东西。 \n\\\\r\n<br/>"
      Course 4 Artist Binary pre1: |-
        二进制是只用两个选项来表达信息的方法。在这里，我们使用选项“<b>关</b>”和“<b>开</b>”。\\r
        <br/>\\r
        这里，我们用数字<b>0</b>来表达“关”，用数字<b>1</b>来表达“开”。\\r

        <hr/>\r
        我们给你提供了一个“像素”的网格，你能穿过并将某些正方形像素设置为“开”。\r
        \r
        <b>用这些模块让小画家在第一行画出二进制字符串“01010101”。</b>
      Course 4 Artist Binary ryan: |-
        二进制是只用两个选择来表达信息的方法。这里，我们会使用选项“关”（通过数字0来表达）和“开”（通过数字1来表达）。\\r
        \\r
        我们给你提供了一个“像素”的网格，你能穿过并将某些正方形像素设置为“开”。你能让小画家在第一行画出二进制字符串“01010101”吗？
      Course 4 Artist For Loops 1: |-
        用一个重复模块来画一个边长50像素的三角形。\\r
        \\r
      Course 4 Artist For Loops 10: 自由发挥时间！用你学会的模块画任何你想画的东西。
      Course 4 Artist For Loops 11: |-
        还记得在前一阶段中，我们用变量来控制形状中边的数量吗？现在，我们要用“计数器”变量来做同样的事情了。\\r
        \\r
        这个图形从一个三角形开始，并且每次加一条边直到画出一个十边形。每条边应该是100像素长。 \\r
        \\r
        你应该怎样用“计数”循环中的“计数器”变量来重新画这个图形呢？
      Course 4 Artist For Loops 11a: |-
        让我们总结一下吧！\\r
        \\r
        用你的“计数循环”和“计数器”的知识，来创造出每个形状都比上一个多两条边的画。确保每条边的长度都是这个多边形边的数量的10倍。\\r
        \\r
        这里有非常少的一些代码。
      Course 4 Artist For Loops 12: 看起来不错，现在我想画的每个图形都和上一个挨着。这次每条边都是20像素。每次画好一个图形后，用跳跃模块来往前跳40像素。
      Course 4 Artist For Loops 13: 嗯，这些形状每次都变会大一点！准备好用变量来解决这个问题了吗？因为边越来越多，我们应该怎样用计数器变量来让这些边越来越短？别用设置好的变量往前移动，试试移动 (100 除以 计数器）个像素。
      Course 4 Artist For Loops 14: |-
        如果每次都多转或少转一些角度，那么你可以创造出来一个有规律的效果。
        \\r
        \\r
        试着重用上一关的一些代码，但是转89度来创造螺旋的正方形出来。
      Course 4 Artist For Loops 15: "**自由发挥**：试着用“计数循环”来画自己的画。我们也为你加了一些有用的变量。"
      Course 4 Artist For Loops 2: |-
        我已经加了一些代码，会在一个从50数到100每次增加10的`计数循环`里画一个三角形。

        **注意：**在点击“运行”_前_，先检查代码。
      Course 4 Artist For Loops 3: 用上一题做为参考来完成这个。最小的三角形的边长是20像素，最大的是200像素，每个三角形的边比上一个大20像素。
      Course 4 Artist For Loops 4: '怎样修改你学会的东西来画这些正方形？它们边长从15像素起，最大边长300像素，每个正方形的边长比上一个大15像素。 '
      Course 4 Artist For Loops 5: "上一关完成的很好！让我们再次用“计数器”变量模块画出这个很酷的图。 \n\\\\r\n\\\\r"
      Course 4 Artist For Loops 6: 自由发挥！试着用计数循环自己设计出一个不断增长的模式。
      Course 4 Artist For Loops 6a: 将上一关的代码做三个小小的改动来画出这个！
      Course 4 Artist For Loops 7: |-
        如果你保持计数循环中的移动和转向模块不动，但删除掉算法中的重复3次，会发生什么?\\r
        \\r
        <br/>\\r 在这个螺旋三角形中，每条边都比上一条长20像素。\\r
        \\r
      Course 4 Artist For Loops 8: "只从上一关的代码中改动一处就能创建出这幅图像。你能找到什么需要改动吗？\\\\r\n\\\\r\n提示：你需要移除某项！  "
      Course 4 Artist For Loops 8a: 只从上一关的代码中改动一处就能创建出这幅图像。你能找到什么需要改动吗？
      Course 4 Artist For Loops 9: |-
        你能创造一个螺旋吗？从1增加到75像素，每次增加1像素。\\r
        \\r
      Course 4 Artist For Loops Challenge: "\\*\\* 挑战: \\*\\* 你能运用你已学到的，想出如何使用创建这个图像的多边形？它的所有的边都是40像素。 \\\\r \n\\\\r\n记住, 为了创建一个螺旋, 你不能关闭多边形。 这意味着每个形状都需要比通常少一个边。"
      Course 4 Artist For Loops Challenge_a: 挑战：你能想出怎样用所有你学到的知识，来创建出这个所有边长都是40像素的多边形吗？
      Course 4 Artist For Loops inspire: |-
        <br/><br/>\\r
        <img
        src="https://images.code.org/9b5897e059bb29bd2faf8504659a3cfc-image-1440719685627.49.33.png"
        width="250px"/>\\r
        <br/><br/>\\r
        自由发挥灵感：你已经学会了所有需要创建这个模式的知识了！如果这个图形引起了你的联想，试试画出一些类似的图像。要不然，就画画你想画的一些东西。
      Course 4 Artist Functions 12.1: 让我们创造一个叫做“画八边形”的函数，它能画出一个每条边都是20像素长的八边形。
      Course 4 Artist Functions 13.1: "现在，让我们创建一个叫做“跳到右上角”的函数，它能让小艺术家移动到刚刚画的八边形的右上角。这样我们就能完成整个图形了。\\\\r\n<br/>\\\\r\n提示：如果向移动到右上角，试试跳正好八边形的3/8。  "
      Course 4 Artist Functions 14.1: '现在，让我们创建一个叫做“跳到右上角”的函数，它能让小艺术家移动到刚刚画的八边形的右上角。  '
      Course 4 Artist Functions Inspiration: "<img src=\"https://images.code.org/cf373e03bede480ae54aec72ce823454-image-1442951867535.54.11.png\"\nwidth=\"250px\"/>\\\\r\n\\\\r\n自由发挥灵感：你已经学会了所有需要创建这个模式的知识了！\\\\r\n\\\\r\n如果这个图形引起了你的联想，试试画出一些类似的图像。要不然，就画画你想画的一些东西。 "
      Course 4 Artist Functions challenge: "<img src=\"https://images.code.org/69f1c2b415f907c86aaa6ed2534c3682-image-1442870371171.13.38.png\" width=\"250px\"/>\\\\r\n\\\\r\n**挑战关卡：** 使用您在本阶段和其他阶段所学到的知识画出以上内容。  "
      Course 4 Artist Functions inspire: |-
        <img src="https://images.code.org/6c6ff8e3b5a763926102033a94720f8b-image-1441300952649.19.47.png"
        width="250px"/>\\r
        \\r
        **自由发挥的灵感：** 你现在已经学会了制作像这样的图案的所有东西了！\\r
        \\r
        如果这张图片启发了你，试试做一些相似的东西。或者，你也可以创作一些自己的东西。\\r
        <br/>\\r
        \\r

        <h4>\r
        <details>\r
        <summary><b>暗示</b></summary>\r
        \t<br/><br/>\r
        \t<h5>\r
        \t<details>\r
        \t<summary><b>暗示
        #1</b></summary>\r
        \t<br/>\r
        \t用一个`计数循环`，然后将它的计数变量用到一个嵌套的`重复循环`里\r
        \t<br/><br/>\r
        </details>\r
        \t</h5>\r
        \r
        <h5>\r
        \t<details>\r
        \t<summary><b>暗示
        #2</b></summary>\r
        \t<br/>\r
        \t每次迭代时，你应该`画一个正方形`，然后向前跳。\r
        \t<br/><br/>\r
        </details>\r
        \t</h5>\r
        \r
        <h5>\r
        \t<details>\r
        \t<summary><b>暗示
        #3</b></summary>\r
        \t<br/>\r
        \t你需要在`重复循环`外，`计数循环`内，每次向左转90度。\r
        \t<br/><br/>\r
        </details>\r
        \t</h5>\r
        \r
        <h5>\r
        \t<details>\r
        \t<summary><b>解决方案</b></summary>\r
        \t<br/>\r
        \t<br/>\r
        \t<img
        src="https://images.code.org/6b07c5de58a1fa573bef19182105f516-image-1441300922567.14.00.png"
        width="450px"/>\r
        \t<br/><br/>\r
        </details>\r
        \t</h5>\r
        </details>\r
        </h4>\r
        \r
        <br/>\r
        如果你做了一个大一点或者小一点的正方形，会如何呢？如果向右转，而不是向左转，会发生什么呢？
      Course 4 Artist Inspire: "<img src=\"https://images.code.org/b5e28b084cb331ee030ea3853ed921bd-image-1440060815818.51.21.png\"\nwidth=\"250px\"/>\\\\r\n\\\\r\n自由发挥灵感：你已经学会了所有需要创建这个模式的知识了！如果这个图形引起了你的联想，试试画出一些类似的图像。要不然，就画画你想画的一些东西。 "
      Course 4 Artist Vars 1: |-
        让我们画一个等边三角形。
        \\r
        \\r
        它的每条边都正好一样是100像素。\\r
        \\r
        <br/>\\r
      Course 4 Artist Vars 10: |-
        这里有个算法能在一个小一点的三角形外面再画一个三角形。你能将它改成用“边数”变量来画出每个三角形吗？\\r
        \\r
        </br>\\r
        浏览一下代码，每次看到数字3，就将它换成“边数”变量。记得使用“设置边数”模块。
      Course 4 Artist Vars 11: |-
        这里用了和上一关一样的概念，但更复杂一些。你应该将`边`的变量设置成什么，来用正方形画出这张图？\\r
        \\r

        <p
        style="font-size:small; padding: 15px 15px 15px 40px; background-color:#dcf3f3;
        border-radius:10px;">\r
        \t只是好玩：试试在这个图案中，使用不同的数字！\r
        </p>
      Course 4 Artist Vars 12: |-
        让我们将`边数`变量设置为5. 我们会加更多的边到这个算法中，边数越大，就越能明白整个模式！

        注意，这里有另一个叫做`长度`的变量。我们能在任何`向前移动`模块中使用它。

        将`长度`变量设置为75。
      Course 4 Artist Vars 13: |-
        当一个图形有很多条边时，为了让它能显示在屏幕中，要让每条边都短一些。
        \\r
        \\r
        让我们重新创建这个算法来得到这个神奇的图形。为了不手动输入“长度”变量，让我们将“边数”变量放到一个“数学”模块中，来确保每个图形都能显示完整。\\r
        \\r
        每个多边形的周长都是300像素。
      Course 4 Artist Vars 14: |-
        自由发挥：试试看！
        现在你的算法嵌套到了一个循环中。试着改变这两个变量的值来画出很酷的图形。\\r
        \\r
        如果想看到更好的效果，试试使用颜色模块！在循环里面使用随机颜色，看看效果如何。
      Course 4 Artist Vars 2: 改进“向前移动150像素”，让移动模块使用一个叫做“长度”的变量。你能将长度设置为150来重新画这个三角形吗？
      Course 4 Artist Vars 3: '这是个画正方形的循环，但是少了些什么。你能修好它，让它用长度变量并想想每条边应该是多长？ '
      Course 4 Artist Vars 4: 现在，我们来画一个高度是宽度两倍的长方形。这里有一个叫做“宽度”的变量需要设置为100。你能用“数学”模块来完成代码吗？
      Course 4 Artist Vars 6: |-
        这些代码能画任何规则的多边形。\\r
        \\r
        这里有个叫做“边数”的变量设置为4。\\r
        \\r
        不管边数是多少，你都能用“边数”变量与数学模块一起来转正确的度数吗？
      Course 4 Artist Vars 7: |-
        用你在上一关中学到的来用边数变量创建这个六边形。\\r
        \\r
        看看如何就改一个值来画出一个三角形、正方形、五边形或者八边形？
      Course 4 Artist Vars 8: "**自由发挥：** 试试这个形状边的数字。你能改变算法，无论多少条边，都让大小保持大致一样吗？"
      Course 4 Artist Vars 9: 修改这个算法，让它能用边数变量，而不是一个固定的数字来画出这个三角形。别忘了用“设置边数为”模块。
      Course 4 Bee 1: |-
        蜜蜂不知道云下面有什么！\\r
        \\r
        用“如果”模块来检查云下面是否有花。\\r
        \\r
        仅在有花时，采集一次花蜜。
      Course 4 Bee 2: |-
        用“如果/否则”模块来检查每个目标，看看是花还是蜂窝。\\r
        \\r
        如果是花，就收集花蜜，否则就酿蜂蜜！
      Course 4 Bee 3: |-
        未知目标有可能是花或者是蜂窝。\\r
        \\r
        这次，用“如果/否则”模块，**如果**是花就收集花蜜，**否则**酿蜂蜜（因为它是蜂窝）。
      Course 4 Bee 4: |-
        紫色的花可能有1个，2个或3个花蜜。\\r
        \\r
        这里有一个“如果/否则”模块和另一个“如果/否则”模块混合在一起，成为了一个“如果，否则如果，否则”模块。\\r
        \\r
        写出解答来采集未知数量的花蜜。
      Course 4 Bee 5: 紫色的花可能有1个，两个或3个花蜜。添加一个“如果/否则”模块来创建“如果，否则如果，否则”模块。写出解答来采集未知数量的花蜜。
      Course 4 Bee 6: 紫色的花可能有1个，两个或3个花蜜。创建一个““如果，否则如果，否则”模块，来采集未知数量的花蜜。
      Course 4 Bee 7: 用你学到的知识来采集所有的花蜜。紫色的花可能有紫色的花可能有1个，2个或3个花蜜。
      Course 4 Bee For Loops 11: 这个循环出了什么问题呢？看看您是否可以修复它，使蜜蜂采集到所有花蜜。
      Course 4 Bee Params 1: 写一个序列“收集3个花蜜”来转向、移动、收集花蜜，然后返回原始位置。
      Course 4 Bee Params 2: 修改“收集3个花蜜”函数，来让我向右转，而不是向左转来到达花。
      Course 4 Bee Params 3: |-
        现在，两边都有花了！\\r
        \\r
        现在有两个叫做“左”和“右”的变量，并且给“收集3个花蜜”的函数增加了“方向”参数。
        \\r
        \\r
        **编辑“收集3个花蜜”的函数，当变量“左”或者“右”传递进函数时，让蜜蜂往正确的转向**。
      Course 4 Bee Params 5: 让我们从头开始，你能创建一个含有方向参数的“拿5罐花蜜”的新函数吗？
      Course 4 Bee Params 6: |-
        如果你能用一个函数来收集所有花蜜，是否会更好？

        试着给你的`花蜜单元`函数加一个新参数来控制收集的花蜜数量。你也许也想重新命名这个函数！
      Course 4 Bee Params 7: |-
        试着用新函数来收集所有花蜜。\\r
        \\r
        <br/>\\r
      Course 4 Bee Params 8: |-
        挑战：现在还有蜂蜜也需要处理！\\r
        \\r
        重写你的函数来一起使用蜂蜜数量和花蜜数量。怎样用这些数字来决定你应该做什么？
      Course 4 EC 1a: "\\*\\*极限挑战: \\*\\* 没有规则。没有线索。只有挑战！"
      Course 4 EC 1b: "\\*\\*极限挑战: \\*\\* 没有规则。没有线索。只有挑战！"
      Course 4 EC 2a: "\\*\\*极限挑战: \\*\\* 没有规则。没有线索。只有挑战！"
      Course 4 EC 2b: "\\*\\*极限挑战: \\*\\* 没有规则。没有线索。只有挑战！"
      Course 4 EC 2c: "\\*\\*极限挑战: \\*\\* 没有规则。没有线索。只有挑战！"
      Course 4 EC 2d: "\\*\\*极限挑战: \\*\\* 没有规则。没有线索。只有挑战！"
      Course 4 EC 3: |-
        **函数超级挑战：**
        用你在上一关学会的来绘制一个类似的图形\\r\\r
        _注意：如果你使用参数，代码会更简单。_\\r
        \\r
        <br/>\\r
        <img
        src="https://images.code.org/d3d6a51fafdcc0a09a5c6b0e0f3c2b92-image-1446239805818.08.59.png"
        width="300px"/>\\r
        <br/> \\r
        \\r
        \\r
      Course 4 EC 3a: |-
        **极限挑战：** 没有规则，没有提示。只有挑战！\\r
        \\r
        <br/>\\r
        <img src="https://images.code.org/d3d6a51fafdcc0a09a5c6b0e0f3c2b92-image-1446239805818.08.59.png"
        width="300px"/>\\r
        <br/> \\r
        \\r
        \\r
      Course 4 Maze 4: 试试使用“重复”模块来用更少的模块通过这一关。
      Course 4 Play Lab Params 1: |-
        这里有个叫做“跳”的函数，它能让你的演员跳100像素。\\r
        \\r
        运行程序，用方向箭头来移动小狗，用“跳”函数来收集所有的旗帜。
      Course 4 Play Lab Params 10: |-
        我们已为你添加了上一关的函数。

        <hr/>

        用`如果`模块来编写你的游戏，当`play_score`(玩家分数) 大于某个值时，调用`level_up`(升级) 函数。

        *例如：“play\_score” > 6*

        <hr/>
        *玩游戏，并且达到第3级来到达下一关。 *
      Course 4 Play Lab Params 2: |-
        现在，我们明白了有些旗帜太高了，跳不上去！让我们一起使用“上”和“下”方向键，来让我们能跳不同的高度。\\r
        \\r
        我们需要添加一个叫做“高度”的参数到“跳”的函数中。\\r

        -   上方向键让小狗跳200像素。\\r
        -   下方向键让它只跳100像素。\\r
      Course 4 Play Lab Params 3: |-
        我们已经给“跳”函数添加了另一个参数，因此它可以用在别的演员上了。每个演员都有一个编号，编号从1开始。

        编辑`跳`函数来使用`演员`参数，使它能够让正确的演员跳起来。
      Course 4 Play Lab Params 4: |-
        这里有个函数叫做`巡逻`。\\r
        \\r
        编辑`巡逻`来让猫向上移动400像素，再向下移动400像素。
      Course 4 Play Lab Params 5: 编辑`巡逻`函数来添加一个`演员`参数。调用它时，能让屏幕上每个演员都动起来。记住，演员对应到数字1和2，3上。
      Course 4 Play Lab Params 6: 添加另一个叫做“速度”的参数到“巡逻”函数里。试着在“设置速度”模块中使用新的“速度”参数，来帮助企鹅在别的小动物之前得到所有旗帜。
      Course 4 Play Lab Params 7: |-
        来点好玩的！看看这里的代码，是否你能明白每个模块都做了什么。\\r
        \\r
        看完以后，用方向键来让小狗收集到所有旗帜。\\r
        \\r
        注意：你不必改动代码。
      Course 4 Play Lab Params 8: 在小狗碰到任何一个演员时，用“当演员碰到”模块来把小狗送回左上角。
      Course 4 Play Lab Params 9: |-
        这是一个早先的游戏，但是大部分代码都隐藏了。我们加了个新函数叫做`score_points`（得分）。

        * * *

        #### 编辑这个函数，使得`points`（分数）参数能加到`player_score`（玩家分数）变量上。

        #### `player_score`（玩家分数）变量会在每次小狗的馅饼碰到小猫时增加，在小猫的三明治碰到小狗时减少。

        * * *

        _注意：当你完成后，点击“运行”来玩玩。当小狗得到6分时，就可以进入下一关。_
      Course 4 Play Lab Vars 1: |-
        这次你不需要写任何代码，点击`运行`来玩游戏吧！

        在这个游戏里，你会扮演小狗，要比小猫收集到更多的旗帜。用下方向键来控制小狗。当你玩完以后，点击`完成`。
      Course 4 Play Lab Vars 2: 最后关卡中的比赛不是很公平! 更改`dog_speed`（狗\_速度）变量以确保你可以收集比猫更多的旗子。第一个收集到10面旗子的赢！
      Course 4 Play Lab Vars 3: |-
        这是一种新的游戏!\\r
        \\r
        你不需要在这个关卡上改变任何东西. \\r
        \\r
        \*\*玩法: \*\* 使用左右箭头来移动, 向上箭头来跳跃。看看你能否收集所有的旗子。
      Course 4 Play Lab Vars 4: 现在，我们用一个叫做“高度”的变量来控制小狗能跳多高。修改“高度”变量，让小狗能跳足够高，得到所有旗帜。\\r
      Course 4 Play Lab Vars 6: |-
        在我们的游戏里，应该如何得分？

        1.  每次小狗用一块馅饼打到猫时，在`point`（得分）变量上加1。

        2.  用`当演员2碰到任何东西时`事件来触发对分数的更新。可以通过`points = points + 1.`来增加变量。

        3.  设置为得到10分时通过这关。

        **注意：**用右方向键来扔出馅饼！
      Course 4 Play Lab Vars 7: |-
        很好，让确保这个游戏不是太简单！\\r
        \\r
        任何时候，小狗（演员1）被小猫（演员2）扔出的三明治击中时，就丢失1分。\\r
        \\r
        让我们从10分开始，这样就不会太难了。让你的分数从10减到0来通过这一关。
      Course 4 Play Lab Vars 9: |-
        自由游戏时间！这是除了使用过的所有变量，还有一些别的变量。\\r
        \\r
        注意：现在工具箱里有很多模块需要组织在一起！我们将这些模块放到了合适的分类中。花一些时间来看看每种类型都有哪些模块吧。当你看完后，可以用重复、变量和事件做出一个故事或者游戏。\\r
        \\r
        _提示：往下滚动鼠标来查看工作区的所有命令。_
      Course 4 Play Labs For Loops 1: 让小狗说出从1到100的所有数字。用一个计数循环和一个计数器模块来让小狗在每次循环时说出计数器变量。
      Course 4 Play Labs For Loops 4: |-
        改变每次增加的值会有帮助，但我们一直是线性计数（每次改变的数量都和上次一样）。如果我想用指数计数呢？\\r
        \\r
        <br/>\\r
        不用改变计数循环的设置，你能按照1，4，9，16，25... 计数吗（按照平方计数）？
      Course 4 Play Labs For Loops 4a: |-
        现在，让我们将一些第7关中的变量和“计数器”变量混合起来制造一些神奇的变化。\\r
        \\r
        在这一关中，小狗通过“increment”（增加）来从 **0** 到 **1000** 计数。在代码最开始处，将“increment”设置为 **10** ，看看会发生什么。
      Course 4 Play Labs For Loops 5: 在上一关中，我们按照每个数的平方计数了。试试将“counter ^ 2”（计数器的2次方）改为“counter ^ 3”（计数器的3次方）来按照每个数的立方来计数。（1，8，27，64，125，216，343...）
      Course 4 Play Labs For Loops 5a: |-
        在这一关中，小狗会是你的计时员。\\r
        \\r
        小狗会从**0**到**30**计数，每次增加`increment`（增量）。这个
        `increment`变量会从**1**开始。\\r
        \\r
        你能让每次点击小狗时，`increment`增加**2**吗？点击向前箭头来运行`计数循环`。\\r
        \\r
        **注意：** 多运行这个循环几次，在每个循环前点击小狗。
      Course 4 Play Labs For Loops 6a: |-
        现在，我们已经明白了如何用变量来控制程序中的`计数循环`。让我们来制作一个游戏！\\r
        \\r
        小狗仍然会用`计数循环`，每次增加`增量`来帮我们计数。但这次，我们会增加巫师进来。你能改变代码，让`增量`在每次巫师点击时增加2吗？\\r
        \\r
        小心！巫师移动得很快！
      Course 4 Play Labs For Loops 7a: |-
        现在我们有所进展了！开始计数后，在小狗数到30前，我们需要点击多少次巫师？\\r
        \\r
        添加模块到巫师上，让每次它被点击时，“clicked”（被点击）变量增加1。现在你可以忽略“increment”（增量）变量了。\\r
        \\r
        **注意：** 小狗会在你点击运行后开始数数。
      Course 4 Play Labs For Loops 8: |-
        现在帮助演员们按照计数来移动。\\r
        \\r
        小狗每次按照增加2（counter + 2）来移动和计数。小猫每次按照乘以2（counter \* 2）来移动和计数。企鹅按照指数2（counter ^ 2）来移动和计数。谁会第一个到达旗帜？
      Course 4 Play Labs For Loops 8a: "要完成这个游戏，需要拿回“increment”（增量）变量！让我们将它设置到游戏级别上。\\\\r\n\\\\r\n\n1.  记录巫师被点击的次数。\\\\r\n2.  如果巫师在小狗数到30前，巫师被点击了至少10次，就将“increment”（增量）增加1，并重新开始。\\\\r\n3.  如果巫师没有被点击10次，游戏就结束。  "
      Course 4 Playlab For Loop Freeplay: "**自由发挥**：使用到目前为止你已经学会的一切制作一个游戏，要包括“计数”循环！"
      Course 4 Playlab For Loops 4b: |-
        现在，两个角色要比赛了！\\r
        \\r
        他们每次都会移动“计数器”这么多步，但“计数循环”的计数器值不一样。\\r
        \\r
        你能尝试修改他们其中一个的**增量**，使他们能同时到达终点吗？
      Course 4 Playlab For Loops 5b: 调整计数循坏的间隔，以便这两个角色到达完全相同的位置。
      Course 4 Playlab For Loops 6b: "现在，我们将用一个完全不同的方式使用`计数循环` ！\\\\r\n\\\\r\n因为消失之间的时间变短，这个游戏很快就会变得艰难！\\\\r\n\\\\r\n\n<hr/>\\r\n\\r\n**编辑这个`计数循环` 循环创建一个好玩的游戏！** \\r\n\\r\n<hr/>\\r\n\\r\n 按 \"运行\", 然后尽可能多的点独角兽。 你能得到24分，来超过我们吗？ "
      Course 4 SCF 1: "**函数的超级挑战：**用提供的函数来画四行六边形。要注意是怎样让偶数行转移到右边的？"
      Course 4 SCF 1a: "\\*\\*函数超级挑战: \\*\\* 你能想出如何以最少的块收集所有这些花蜜吗？"
      Course 4 SCF 1b: "\\*\\*函数超级挑战: \\*\\* 你能想出如何以最少的块收集所有这些蜂蜜吗？\\\\r"
      Course 4 SCF 2: "**函数的超级挑战：** 用你在前一关学会的来画这个图。\\\\r\n\\\\r\n_注意：如果合并了参数，代码会变得更简单。_  "
      Course 4 SCF 3 Fail 1: |-
        **函数的超级挑战 #1：**
        \\r
        \\r
      Course 4 SCF 3 Fail 2: |-
        **函数的超级挑战 #1：**
        \\r
        \\r
      Course 4 SCF 3: "**函数超级挑战：**\n用你在上一关学会的来绘制一个类似的图形\\\\r\\\\r\n_注意：如果你使用参数，代码会更简单。_\\\\r\n\\\\r\n<br/>\\\\r\n<img\nsrc=\"https://images.code.org/d3d6a51fafdcc0a09a5c6b0e0f3c2b92-image-1446239805818.08.59.png\"\nwidth=\"300px\"/>\\\\r\n<br/>  "
      Course 4 SCFL 1: "\\*\\*计数循环超级挑战: \\*\\* 用最少的模块通过这个关卡。"
      Course 4 SCFL 1a: "\\*\\* 计数循环超级挑战: \\*\\* 你能用最少的模块让斯奎特到他的橡子那里吗？\\\\r"
      Course 4 SCFL 1b: "\\*\\* 计数循环超级挑战: \\*\\* 你能用最少的模块让斯奎特到他的橡子那里吗？"
      Course 4 SCFL 2: |-
        \*\*计数循环超级挑战: \*\* 用最少的模块通过这个关卡。\\r
        <br/>
      Course 4 SCFL 3: |-
        \*\* 计数循环超级挑战: \*\* 你能想出如何重新创建这幅画吗？\\r
        \\r
        <img src="https://images.code.org/724b2efa8aefe863bd0d6491a3f1590f-image-1445563707400.26.50.png"
        width="350px"/>
      Course 4 SCFL 4: |-
        \*\* 计数循环超级挑战: \*\* 你能想出如何重新创建这幅画吗？\\r
        \\r
        <img src="https://images.code.org/407f502735beec686187451bdf67aada-image-1446002848700.59.34.png"
        width="350px"/>
      Course 4 SCFL 5: |-
        **计数循环超级挑战 #5：** 你能想出如何重新创建这幅画吗？\\r
        \\r
        <img src="https://images.code.org/407f502735beec686187451bdf67aada-image-1446002848700.59.34.png"
        width="350px"/>\\r
        \\r

        <h4>\r
        <details>\r
        <summary><b>暗示</b></summary>\r
        \t<br/><br/>\r
        \t<h5>\r
        \t<details>\r
        \t<summary><b>暗示
        #1</b></summary>\r
        \t<br/>\r
        \t颜色是用`设置混合色：红、绿、蓝`模块来改变的。红色一直是`counter`（计数器）的值，绿色一直是`255-counter`，蓝色则一直保持255。\r
        \t<br/><br/>\r
        </details>\r
        \t</h5>\r
        \r
        <h5>\r
        \t<details>\r
        \t<summary><b>暗示
        #2</b></summary>\r
        \t<br/>\r
        \t每个形状都是一个正方形，边长都是`counter`个像素，从5px（5像素）开始，每次增加5px（5像素），直到200px（像素）。\r
        \t<br/><br/>\r
        </details>\r
        \t</h5>\r
        \r
        <h5>\r
        \t<details>\r
        \t<summary><b>暗示
        #3</b></summary>\r
        \t<br/>\r
        \t小艺术家在每个正方形间转15度。\r
        \t<br/><br/>\r
        </details>\r
        \t</h5>\r
        \r
        <h5>\r
        \t<details>\r
        \t<summary><b>解决方案</b></summary>\r
        \t<br/>\r
        \t<br/>\r
        \t<img
        src="https://images.code.org/0bf4c87e33459f832258939ec53ad595-image-1446002848701.59.15.png"
        width="450px"/>\r
        \t<br/><br/>\r
        </details>\r
        \t</h5>\r
        </details>\r
        </h4>
      Course 4 SCFL 6: |-
        \*\* 计数循环超级挑战: \*\* 你能想出如何重画这幅画吗？ \\r
        \\r
        <img
        src="https://images.code.org/b0d15d06465d645c5ca533e5da6387b3-image-1446075597132.36.04.png"
        width="350px"/>
      Course 4 SCFL 7: |-
        \*\* 计数循环超级挑战: \*\* 小艺术家想描画一些波浪！你能想出如何重画这幅画吗？
        \\r
        \\r
        <img src="https://images.code.org/fba3423f2e9a405d4d3859de32cdb0f3-image-1446102880655.13.36.png"
        width="350px"/>
      Course 4 SCFP 1: 创建一个函数，能够让小艺术家往前或者往后跳x像素，而且也能让他往上或者往下跳y个像素。（使用正数和负数）
      Course 4 SCV 1: |-
        <img src="https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png"
        width="250px"/>\\r
        \\r
        \*\* 变量超级挑战: \*\* 你已经学会了制作像这样的图案的所有知识了！这关有点困难。你能坚持下去，直到找到解决方案吗？
      Course 4 SCV 2: |-
        <img src="https://images.code.org/85f0b27009edd86eff78692004b9ed52-image-1444712655590.02.32.png"
        width="250px"/>\\r
        \\r
        \*\* 变量超级挑战：\*\* 你已经学会了制作像这样的图案的所有知识了！这关有点困难。你能坚持下去，直到找到解决方案吗？
      Course 4 SCV 3: |-
        **变量超级挑战：** 你已经学会了解决这个难题需要的所有知识了！这个游戏有点困难。你能坚持下去，直到找到解决方案吗？

        * * *

        现在是捉人游戏！捉住猫得两分。捉住企鹅得3分。得到正好10分就能赢了！
        但是要小心，猫和企鹅能够互相捉，这样他们会将分数拿回去。

        **添加需要的模块来让游戏像描述的那样运行。**

        -   **如何用方向键让小狗向各个方向移动？**
        -   **如何在小狗抓到猫或企鹅时得分？**
        -   **如何在猫和企鹅碰到的时候减分？**
      Course 4 SCV 4: "**变量超级挑战：** 用最少的模块通过这个关卡。"
      Course 4 SCV 5: "**变量超级挑战：** 用最少的模块通过这个关卡。"
      Course 4 SCV 6: "<img src=\"https://images.code.org/499fc71a0a06bacb68a9789ad57f8148-image-1445574373673.16.44.png\"\nwidth=\"250px\"/>\\\\r\n\\\\r\n\\*\\* 变量超级挑战: \\*\\* 你已经学会了制作像这样的图案的所有知识了！这关有点困难。你能坚持下去，直到找到解决方案吗？  "
      Course 4 SCVP 1: 创建一个函数，能够让小艺术家往前或者往后跳x像素，而且也能让他往上或者往下跳y个像素。（使用正数和负数）
      Course 4 Variables Assessment: 你能用一个“边数”变量来画出这幅图吗？每条边应该是50像素长。
      CourseD_Dance_Party_01: |-
        _让我们开个舞会吧！_

        将“新建”模块拖到工作区，并关联到“设置”模块，创建您的第一个舞者。

        -   _如果您需要了解更多信息或其他挑战，还可以点击左侧的灯泡。_
      CourseD_Dance_Party_02: |-
        让这只驼鹿舞动起来吧！

        将<xml><block type="Dancelab_changeMoveLR"><title name="SPRITE">new\_dancer</title><title name="MOVE" config="MOVES.Dab, MOVES.Drop, MOVES.Floss">牙线舞</title><title name="DIR">-1</title></block></xml>模块拖放到工作区。将其连接到下面的 <xml><block type="Dancelab_atTimestamp"><title name="TIMESTAMP">4</title><title name="UNIT">"小节"</title></block></xml>模块。您的舞者应在第四个小节后开始新的动作。

        **小节**用于音乐计时。本教程中，一个小节长度为四个节拍。
      CourseD_Dance_Party_03: |-
        _现在跟着节奏动起来！_

        在工作区域添加一个 <xml><block type="Dancelab_atTimestamp"><title name="TIMESTAMP">6</title><title name="UNIT">"小节"</title></block></xml>模块。让舞者在 6 个小节后开始新的动作！
      CourseD_Dance_Party_04: |-
        _给舞蹈加点炫酷效果！_

        在工具箱中找到一个能添加背景效果的模块。然后跟随音乐节拍，来看看新的效果吧！
      CourseD_Dance_Party_05: |-
        使用其他新模块让舞者**每 2 个小节**变换动作！

        \*\*选择“(下一步)”、“(上一步)”或“(随机)”，让舞者在代码每次运行时做不同的动作。
      CourseD_Dance_Party_06: |-
        _我们需要更多舞者！_

        创建名为“backup\_dancer1”的伴舞，与猫一起跳舞。
      CourseD_Dance_Party_08: |-
        每个舞者都有一系列控制其外观的 _属性设置_。

        可以通过缩小舞者的 _大小_ 使它看上去像是在后排。你能让两个伴舞大小一样吗？
      CourseD_Dance_Party_09: |-
        舞者有可以添加颜色层的"tint"（色调）属性。尝试更改其中一个舞者的色调。

        -   色调将会将选择的颜色与舞者的颜色混合。
      CourseD_Dance_Party_10: |-
        现在知道了如何更改舞者的属性，还可以使用此模块让相同的属性自动对音乐做出响应：

        <xml>
        <block type="Dancelab_startMapping">
        <title name="SPRITE">右边的独角兽</title>
        <title name="PROPERTY">"比例"</title>
        <title name="RANGE">"base"（低音）</title>
        </block></xml>

        此程序使用音乐的"bass"（最低频率的声音）音量来控制舞者的高度。可以让其他舞者也对音乐有响应吗？
      CourseD_Dance_Party_11: |-
        <xml><block type="Dancelab_whenKey"></block></xml> 模块可以在上方向键按下时运行代码。

        可以更改跳舞动作，更改舞者的属性，或者快速做一次动作。激发创造力，寻找新模块！
      CourseD_Dance_Party_11_5: |-
        查看此模块：

        <xml>
        <block type="Dancelab_makeNewDanceSpriteGroup">
        <title name="N">6</title>
        <title name="COSTUME">"鸭子"</title>
        <title name="LAYOUT">"圆圈"</title>
        </block></xml>

        现在可以一次创建多个舞者了！

        尝试使用“所有鸭子”模块写入让所有鸭子一起跳舞的代码。
      CourseD_Dance_Party_11b: |-
        跳舞时间到了！按下左方向键时，猫会轻拍。让机器人在按下右方向键时"蹲下"，并在按下上方向键时"拍手"。

        \*\* 使用这些键来做出 蹲下-拍手-蹲下-拍手 的动作，看你能做多快！ \*\*
      CourseD_Dance_Party_12: 随着节奏律动吧！创建自己的舞蹈，并与朋友分享。
      CourseE_HOC 2018 Level_1: 您需要补给以进行航行。从**箱子**![](https://images.code.org/e0cf43fd36a50dd16ee06595047bfd8f-image-1538697999418.png) 中收集一艘**船** ![](https://images.code.org/0b3162de9dc0abf3e0890d315b8cc699-image-1538697977747.png) 。
      CourseE_HOC 2018 Level_10: 这个海底遗迹的某个地方藏着一条**鱿鱼** ![](https://images.code.org/82f305ab1cb4a9ff9044991a18edb16e-image-1538947827218.png) ，你能找到它吗？
      CourseE_HOC 2018 Level_11: 在黑色混凝土附近建造一堵**海晶石**墙![](https://images.code.org/d110b8d13c01756fcdbef3768b2e2859-image-1538699770898.png) 。此操作可激活**潮涌核心** ![](https://images.code.org/7773cf30f42e6727a23c8cb364d4664b-image-1538699800030.png) ，完成挑战！
      CourseE_HOC 2018 Level_2: 在开阔水面，船比游泳要好用！前往船坞登船。
      CourseE_HOC 2018 Level_3: 拿起船桨，划到开阔水域抓**鳕鱼**![](https://images.code.org/9b636884eefb1efe18f9f844e1e916a9-image-1538698597353.png)。
      CourseE_HOC 2018 Level_4: 用鳕鱼喂**海豚** ![](https://images.code.org/8c240fd4df4da2795ba7ca942b77a057-image-1538947890991.png)。使用重复区块更快地穿过海洋。
      CourseE_HOC 2018 Level_5: 海底某个地方藏着一个**鹦鹉螺壳** ![](https://images.code.org/2eb084fa0c718dee6ca4b6379381f735-image-1538698936660.png)！探索沉船，找到**箱子** ![](https://images.code.org/16cdd5779b38909d4bf47b29535c92b0-image-1538698950602.png)。
      CourseE_HOC 2018 Level_6: 外边好冷啊！前往水底废墟的路上抓一条**鲑鱼**![](https://images.code.org/c66eadf25b3cdfe20bbfdc91e2c28c94-image-1538699000102.png)。
      CourseE_HOC 2018 Level_7a: 找到了水下废墟。在沙石红搜寻包含**海晶石** ![](https://images.code.org/29a5fd76b869d755a60d39fbbb4057eb-image-1538699081910.png)宝藏的**箱子** ![](https://images.code.org/29a5fd76b869d755a60d39fbbb4057eb-image-1538699081910.png)。
      CourseE_HOC 2018 Level_8: 先是冰山，现在又是岩浆？穿过火山岛，在珊瑚礁上寻找**热带鱼** ![](https://images.code.org/6d3293e7709cb1a43d9f7617fd0cc2b8-image-1538699180397.png) in the coral reef。
      CourseE_HOC 2018 Level_9b: |-
        成功抵达珊瑚礁，赶快搜寻**海洋之心**吧
        ![](https://images.code.org/3035926d2a37aa695b5d47413adcffa2-image-1538699398781.png) ！使用蓝色和红色珊瑚找到**宝箱** ![](https://images.code.org/af697397dd70e5b6b93b00eb46c558af-image-1538699377397.png)。
      CourseF_PlayLab_vars1: |-
        玩这个游戏, 你不需要写任何代码, 只要点击 "运行"!\\r

        <hr/>\r
        在这里, 你是那只试图比猫收集更多的旗子的狗。 \r
        _ (使用向下箭头来移动。）_
      CourseF_PlayLab_vars10: |-
        自由游戏时间！这是除了使用过的所有变量，还有一些别的变量。\\r
        \\r
        注意：现在工具箱里有很多模块需要组织在一起！我们将这些模块放到了合适的分类中。花一些时间来看看每种类型都有哪些模块吧。当你看完后，可以用重复、变量和事件做出一个故事或者游戏。\\r
        \\r
        _提示：往下滚动鼠标来查看工作区的所有命令。_
      CourseF_PlayLab_vars2: 最后关卡中的比赛不是很公平! 更改`dog_speed`（狗\_速度）变量以确保你可以收集比猫更多的旗子。第一个收集到10面旗子的赢！
      CourseF_PlayLab_vars3: |-
        这是一种新的游戏!\\r
        \\r
        你不需要在这个关卡上改变任何东西. \\r
        \\r
        \*\*玩法: \*\* 使用左右箭头来移动, 向上箭头来跳跃。看看你能否收集所有的旗子。
      CourseF_PlayLab_vars4: '现在我们要用一个叫做`height`（高度）的变量来控制小狗能够跳多高。更新`height`变量，让小狗能跳得更高，并能够够到所有的旗帜。 '
      CourseF_PlayLab_vars6: "<h5><b>\n在我们的游戏里，应该如何得分？\n</b></h5> \n<br/>\n\n1.  每次小狗用一块馅饼打到猫时，在`point`（得分）变量上加1。<br/>    <br/> \n2.  用`当演员2碰到任何东西时`事件来触发对分数的更新。可以通过`points = points + 1.`来增加变量。  <br/>\n    <br/>\n3.  设置为得到10分时通过这关。\n\n<br/><br/>\n\n<h4>\n**注意：** 用右方向键来扔出馅饼！\n</h4>"
      CourseF_PlayLab_vars7: "<h5><b>\n在我们的游戏里，应该如何得分？\n</b></h5> \n<br/>\n\n1.  每次小狗用一块馅饼打到猫时，在`point`（得分）变量上加1。<br/>    <br/> \n2.  用`当演员2碰到任何东西时`事件来触发对分数的更新。可以通过`points = points + 1.`来增加变量。  <br/>\n    <br/>\n3.  设置为得到10分时通过这关。\n\n<br/><br/>\n\n<h4>\n**注意：** 用右方向键来扔出馅饼！\n</h4>"
      CourseF_PlayLab_vars8: "<h5><b>\n在我们的游戏里，应该如何得分？\n</b></h5> \n<br/>\n\n1.  每次小狗用一块馅饼打到猫时，在`point`（得分）变量上加1。<br/>    <br/> \n2.  用`当演员2碰到任何东西时`事件来触发对分数的更新。可以通过`points = points + 1.`来增加变量。  <br/>\n    <br/>\n3.  设置为得到10分时通过这关。\n\n<br/><br/>\n\n<h4>\n**注意：** 用右方向键来扔出馅饼！\n</h4>"
      CourseF_PlayLab_vars9: |-
        很好，让确保这个游戏不是太简单！\\r
        \\r
        任何时候，小狗（演员1）被小猫（演员2）扔出的三明治击中时，就丢失1分。\\r
        \\r
        让我们从10分开始，这样就不会太难了。让你的分数从10减到0来通过这一关。
      Crack Random Substitution_2018: |-
        # 破解随机交换加密！

        这个工具提供了关于加密文本的更多信息，并能尝试不同的替换选择。

        ### 分析文本的不同方法

        -   试试随机替换加密标签里的一些选项来看看输入文本和标准英语文本间不同的字母频率。
            ![](https://images.code.org/82efbca1807206c9a07de520fdb22027-image-1443572614493.23.28.png)

        ### 替换的不同方法

        -   要替换字母，需要将字母表中蓝色的字母拖放到在原始加密的橙色字母下。
            ![](https://images.code.org/da9a7af7568d8c1698872ab91b4d79d7-image-1443572471212.gif)

        ### 尝试，不停的尝试。

        -   还有别的方法来分析并替换字符，可以点击按钮，随机尝试。
        -   记住：不能破坏它。:)

        看看花多长时间能破解它！这是不是一个好的加密数据的方法？
      Crack Random Substitution_2019: |-
        # 破解随机交换加密！

        这个工具提供了关于加密文本的更多信息，并能尝试不同的替换选择。

        ### 分析文本的不同方法

        -   试试随机替换加密标签里的一些选项来看看输入文本和标准英语文本间不同的字母频率。
            ![](https://images.code.org/82efbca1807206c9a07de520fdb22027-image-1443572614493.23.28.png)

        ### 替换的不同方法

        -   要替换字母，需要将字母表中蓝色的字母拖放到在原始加密的橙色字母下。
            ![](https://images.code.org/da9a7af7568d8c1698872ab91b4d79d7-image-1443572471212.gif)

        ### 尝试，不停的尝试。

        -   还有别的方法来分析并替换字符，可以点击按钮，随机尝试。
        -   记住：不能破坏它。:)

        看看花多长时间能破解它！这是不是一个好的加密数据的方法？
      D_Frozen_nested3: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"让我们把它变成雪花。"_\\r
        \\r
        下次，用`向前跳200，向下跳200`模块来让艾莎回到屏幕中间，并自己转圈。从而让她自己转圈，来不停的在不同的方向画这个形状的线。 \\r
        \\r
        你做的雪花太美了！\\r

        <hr/>\r
        看看这些多边形的例子： \r
        ![](https://images.code.org/b32ebfb3be559bf8a6d017a854e0b97e-image-1495821528995.42.08.png)\r
        ![](https://images.code.org/08d7155f6829f82d878dfa57ad5dcaf3-image-1495821528996.42.26.png)\r
        ![](https://images.code.org/7d461ee9046871e6993406e558f28176-image-1495821528996.42.58.png)\r
        \r
        抽象形状可能做出更像这样的雪花： \r
        ![](https://images.code.org/376d7ba20b6bb86e08b1675370e87b92-image-1496695869798.44.00.png)\r
        ![](https://images.code.org/4f649cc779920632674afac5acce5c95-image-1496695869798.47.51.png)\r
        ![](https://images.code.org/a68f925ffd87241ebc09183acc908b4b-image-1496695869796.31.49.png)
      D_Frozen_nested4: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"如果我们在雪花上面画雪花会如何呢？\"_\\\\r\n\\\\r\n试着将两个不同形状的雪花叠到一起，一个放在另一个上面 -- 看看你能得到什么！ "
      D_Frozen_nested5: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"用形状和角度来创造一些东西，看看我们能画出什么种类的新雪花！"_\\r
      D_Frozen_nested6: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"让我们试试一些新东西。这次沿着之字形滑冰。"_\\r
        \\r
        \\r
        <img
        src="https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png"
        width="200px" style="float: left; margin: 0 15px 15px 0;" />\\r
        用75到105度间的转向来画出楼梯图案 -- 但要确保左右转都有同样的角度。 \\r
        （过会儿你会明白为什么。）
      D_Frozen_nested7: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"现在，让我们转向并回到来的路。"_\\r
        \\r
        转向180度，并再画出完全一样的楼梯图案！  \\r
        \\r

        -   如果你把所有代码都放到循环里让爱莎画画，这个阶段剩下的都会很简单。转180度，画画，然后再转180度。\\r
            \\r
            <hr/>\r
            \r
            这是转向76度的楼梯的例子：\r
            \r
            ![](https://images.code.org/ceea66fad37e79cc45a850911f90440c-image-1496696286635.16.27.png)
      D_Frozen_nested8: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"让我们转圈，来做雪花。"_\\r
        \\r
        在一个圆里，围着这个形状转5或6次。\\r

        -   如果选择了5次，每次转72度\\r
        -   \-
            如果选择了6次，每次转60度\\r
            <hr/>\r
            \r
            这是爱莎转6次的图案：\r
            \r
            ![](https://images.code.org/b0fe02e728f80ae7a4b731f32371a37b-image-1496697582505.19.34.png)
      D_Frozen_nested9: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)  _"现在，我们应该做什么？让我们浏览并创造自己的冬季仙境！"_\\r
        \\r
        试着摆弄你自己创建的。画自己喜欢的！\\r

        -   如果你在楼梯图案那里转两个不同的角度会发生什么？\\r
        -   如果你的钻石图案长一点或短一点会发生什么？\\r
        -   如果在一个雪花上画另一个雪花看起来会是什么样子？
      Dance Party 1-validated: "**猜猜看：** 这个图形名叫`外星人一号`！当点击她时猜猜会发生什么？"
      Dance Party 1-validated_2019: "**猜猜看：** 这个图形名叫`外星人一号`！当点击她时猜猜会发生什么？"
      Dance Party 1-validated_simple: "**猜猜看：** 这个图形名叫`外星人一号`！当点击她时猜猜会发生什么？"
      Dance Party 1: "**猜猜看：** 这个图形名叫`外星人一号`！当点击她时猜猜会发生什么？"
      Dance Party 2 Validated: 这个外星人对自己在火星上的舞技非常自信，但现在她只能左右移动了。你能在 ‘开始’ 模块中改变行为让她可以旋转吗？
      Dance Party 2: "这个外星人对自己在火星上的舞技非常自信，但现在她只能上下移动了。 \n\n你能在<xml><block type=\"gamelab_addBehaviorSimple\" inline=\"true\">\n<value name=\"SPRITE\">\n<block type=\"sprite_variables_get\">\n\n<title name=\"VAR\">alien1</title>\n</block>\n</value>\n</block></xml>中改变行为，让它可以旋转吗？  "
      Dance Party 2_2019: "这个外星人对自己在火星上的舞技非常自信，但现在她只能上下移动了。 \n\n你能在<xml><block type=\"gamelab_addBehaviorSimple\" inline=\"true\">\n<value name=\"SPRITE\">\n<block type=\"sprite_variables_get\">\n\n<title name=\"VAR\">alien1</title>\n</block>\n</value>\n</block></xml>中改变行为，让它可以旋转吗？  "
      Dance Party 3 - Validated: "创造一个叫`外星人2`的精灵。 \n\n让她在被点击时完成一个新的舞步。  "
      Dance Party 3: "创造一个叫`外星人2`的精灵。 \n\n让她在被点击时完成一个新的舞步。  "
      Dance Party 3_2019: "创造一个叫`外星人2`的精灵。 \n\n让她在被点击时完成一个新的舞步。  "
      Dance Party 4 Validated: "创造一个叫`外星人3`的精灵。 \n\n你能让所有外星人排成一条直线吗？现在你有一个外星人舞蹈团了！"
      Dance Party 4: "创造一个叫`外星人3`的精灵。 \n\n你能让所有外星人排成一条直线吗？现在你有一个外星人舞蹈团了！"
      Dance Party 4_2019: "创造一个叫`外星人3`的精灵。 \n\n你能让所有外星人排成一条直线吗？现在你有一个外星人舞蹈团了！"
      Dance Party 5 - Validated: |-
        可以在点击精灵时，在程序中做出任何的改变。现在来换个颜色吧！

        **在这里添加代码，使每个外星人在被单击时改变自己的颜色。**
      Dance Party 5: |-
        可以在点击精灵时，在程序中做出任何的改变。现在来换个颜色吧！

        **在这里添加代码，使每个外星人在被单击时改变自己的颜色。**
      Dance Party 5_2019: |-
        可以在点击精灵时，在程序中做出任何的改变。现在来换个颜色吧！

        **在这里添加代码，使每个外星人在被单击时改变自己的颜色。**
      Dance Party 6 - Validated: "这些外星人太调皮了！ \n\n用<xml><block type=\"gamelab_removeAllBehaviors\" inline=\"true\"><value name=\"SPRITE\"/></block></xml>模块来让每个外星人被单击时停下来。"
      Dance Party 6: "这些外星人太调皮了！ \n\n用<xml><block type=\"gamelab_removeAllBehaviors\" inline=\"true\"><value name=\"SPRITE\"/></block></xml>模块来让每个外星人被单击时停下来。"
      Dance Party 6_2019: "这些外星人太调皮了！ \n\n用<xml><block type=\"gamelab_removeAllBehaviors\" inline=\"true\"><value name=\"SPRITE\"/></block></xml>模块来让每个外星人被单击时停下来。"
      Dance Party 7 - Validated: |-
        最后一步，创建一个新的钟形精灵，命名为`myBell`。

        当点击这个钟时，所有的外星人会跳同一支舞！
      Dance Party 7: |-
        最后一步，创建一个新的钟形精灵，命名为`myBell`。

        当点击这个钟时，所有的外星人会跳同一支舞！
      Dance Party 7_2019: |-
        最后一步，创建一个新的钟形精灵，命名为`myBell`。

        当点击这个钟时，所有的外星人会跳同一支舞！
      Dance Party 7_simple: |-
        最后一步，创建一个新的钟形精灵，命名为`myBell`。

        当点击这个钟时，所有的外星人会跳同一支舞！
      Dance Party Freeplay: |-
        现在可以创建自己的外星人迪斯科啦！想找点灵感？试试这些：

        -   创建两个时钟，让外星人在不同时钟的控制下完成不同的舞步
        -   当外星人相互接触时，让他们开始不同的舞蹈
      Dance Party Freeplay_2019: |-
        现在可以创建自己的外星人迪斯科啦！想找点灵感？试试这些：

        -   创建两个时钟，让外星人在不同时钟的控制下完成不同的舞步
        -   当外星人相互接触时，让他们开始不同的舞蹈
      Dance Party Predict: "**猜猜看：** 这个图形名叫`外星人一号`！当点击她时猜猜会发生什么？"
      Dance Party Predict_2019: "**猜猜看：** 这个图形名叫`外星人一号`！当点击她时猜猜会发生什么？"
      Dance Party Template 1_2019: 模板
      Dance Party Template 2_2019: 模板
      Dance_Party_01: |-
        _让我们开个舞会吧！_

        将“新建”模块拖到工作区，并关联到“设置”模块，创建您的第一个舞者。

        -   _如果您需要了解更多信息或其他挑战，还可以点击左侧的灯泡。_
      Dance_Party_01_low: |-
        _让我们开个舞会吧！_

        将“新建”模块拖到工作区，并关联到“设置”模块，创建您的第一个舞者。

        -   _如果您需要了解更多信息或其他挑战，还可以点击左侧的灯泡。_
      Dance_Party_02: |-
        让这只驼鹿舞动起来吧！

        将<xml><block type="Dancelab_changeMoveLR"><title name="SPRITE">new\_dancer</title><title name="MOVE" config="MOVES.Dab, MOVES.Drop, MOVES.Floss">牙线舞</title><title name="DIR">-1</title></block></xml>模块拖放到工作区。将其连接到下面的 <xml><block type="Dancelab_atTimestamp"><title name="TIMESTAMP">4</title><title name="UNIT">"小节"</title></block></xml>模块。您的舞者应在第四个小节后开始新的动作。

        **小节**用于音乐计时。本教程中，一个小节长度为四个节拍。
      Dance_Party_03: |-
        _现在跟着节奏动起来！_

        在工作区域添加一个 <xml><block type="Dancelab_atTimestamp"><title name="TIMESTAMP">6</title><title name="UNIT">"小节"</title></block></xml>模块。让舞者在 6 个小节后开始新的动作！
      Dance_Party_04: |-
        _给舞蹈加点炫酷效果！_

        在工具箱中找到一个能添加背景效果的模块。然后跟随音乐节拍，来看看新的效果吧！
      Dance_Party_05: |-
        使用其他新模块让舞者**每 2 个小节**变换动作！

        \*\*选择“(下一步)”、“(上一步)”或“(随机)”，让舞者在代码每次运行时做不同的动作。
      Dance_Party_06: |-
        _我们需要更多舞者！_

        创建名为“backup\_dancer1”的伴舞，与猫一起跳舞。
      Dance_Party_08: |-
        每个舞者都有一系列控制其外观的 _属性设置_。

        可以通过缩小舞者的 _大小_ 使它看上去像是在后排。你能让两个伴舞大小一样吗？
      Dance_Party_09: |-
        舞者有可以添加颜色层的"tint"（色调）属性。尝试更改其中一个舞者的色调。

        -   色调将会将选择的颜色与舞者的颜色混合。
      Dance_Party_10: |-
        现在知道了如何更改舞者的属性，还可以使用此模块让相同的属性自动对音乐做出响应：

        <xml>
        <block type="Dancelab_startMapping">
        <title name="SPRITE">右边的独角兽</title>
        <title name="PROPERTY">"比例"</title>
        <title name="RANGE">"base"（低音）</title>
        </block></xml>

        此程序使用音乐的"bass"（最低频率的声音）音量来控制舞者的高度。可以让其他舞者也对音乐有响应吗？
      Dance_Party_11.5_test: |-
        查看此模块：

        <xml>
        <block type="Dancelab_makeNewDanceSpriteGroup">
        <title name="N">6</title>
        <title name="COSTUME">"鸭子"</title>
        <title name="LAYOUT">"圆圈"</title>
        </block></xml>

        现在可以一次创建多个舞者了！

        尝试使用“所有鸭子”模块写入让所有鸭子一起跳舞的代码。
      Dance_Party_11: |-
        <xml><block type="Dancelab_whenKey"></block></xml> 模块可以在上方向键按下时运行代码。

        可以更改跳舞动作，更改舞者的属性，或者快速做一次动作。激发创造力，寻找新模块！
      Dance_Party_11_5: |-
        查看此模块：

        <xml>
        <block type="Dancelab_makeNewDanceSpriteGroup">
        <title name="N">6</title>
        <title name="COSTUME">"鸭子"</title>
        <title name="LAYOUT">"圆圈"</title>
        </block></xml>

        现在可以一次创建多个舞者了！

        尝试使用“所有鸭子”模块写入让所有鸭子一起跳舞的代码。
      Dance_Party_11b: |-
        跳舞时间到了！按下左方向键时，猫会轻拍。让机器人在按下右方向键时"蹲下"，并在按下上方向键时"拍手"。

        \*\* 使用这些键来做出 蹲下-拍手-蹲下-拍手 的动作，看你能做多快！ \*\*
      Dance_Party_12: 随着节奏律动吧！创建自己的舞蹈，并与朋友分享。
      Dance_Party_3: |-
        _现在跟着节奏动起来！_

        在工作区添加第二个 <xml><block type="Dancelab_atTimestamp"><title name="TIMESTAMP">6</title><title name="UNIT">"小节"</title></block></xml>模块。让舞者在 6 个小节后开始新的动作！
      Dance_Party_4: |-
        _给舞蹈加点炫酷效果！_

        在工具箱中找到一个能添加背景效果的模块。然后跟随音乐节拍，来看看新的效果吧！
      Dance_Party_extras_battle: |-
        # 舞蹈团队

        下面是两个团队之间的舞蹈。箭头键控制其中一个舞者， “w, a, s, d” 键控制另一个舞者。和朋友跳支舞，然后试着改进这支舞。

        -   添加更多的键来控制舞蹈
        -   按下键时，可以让备选舞者也跟着响应
        -   通过设置舞者的可见性，可以每4个小节替换舞者
      Dance_Party_extras_every_beat: |-
        # 四分音符

        舞蹈大多采用了全音节，但每个小节都由4个1/4小节组成。这个舞蹈使用`0.25小节`，使舞者每1/4小节拍手一次。

        这个舞蹈还使用\_ 条件 \_ 模块来控制在什么时候用10.25小节1模块来改变舞蹈。试着更改条件模块中的数字，看看它是如何改变舞蹈的。

        -   试着使用其他持续时间（如0.5为半个小节，或0.125为1/8小节)。
        -   添加一些`小节后`的事件。
        -   将"小节"切换为"秒"，并试着以这种方式给舞蹈安排节奏。
      Dance_Party_extras_layout: |-
        # 开始编队！

        看看这个舞蹈，使用`layout`（布局）模块来改变整个舞蹈中备选舞者的阵型。请尝试以下方法之一来扩展它：

        -   在另一个布局中创建第二组舞者
        -   按下键时更改布局
        -   当舞者改变阵型时更改属性
      Dance_Party_extras_on_beat: |-
        # 低音、中音和高音

        舞蹈会在音乐的不同部分变得响亮时使用“高峰”事件来触发代码。试着选择不同的歌曲，看看他们是如何改变舞蹈的。
      Dance_Party_extras_speed: |-
        # 让它加速、减速

        这个最后的舞蹈使用“设定速度”模块来控制每个舞者的动作速度。在歌曲的不同点尝试不同的速度。随意地在这个舞蹈上做修改，或者回到之前的舞蹈中，让它们变得更酷。
      Dance_Party_extras_visible: |-
        # 让他们去哪儿？

        这个舞蹈显示和隐藏了两组舞者。看看如何加入自己的天赋。

        -   添加另一组舞者
        -   使用箭头键显示和隐藏舞者
        -   隐藏所有的舞者，并切换到一个令人兴奋的背景效果
      Escape Room Example: |-
        # 密室逃脱\\r

        \\r
        今天，你要做一个密室逃脱应用！这一关是一个示例程序。你可以玩一玩，找到你要创建的应用的感觉。\\r
        \\r

        # 这样做\\r

        \\r

        -   点击运行来开始\\r
        -   \*
            尝试找到钥匙打开门。
      Eval Strings Images .1: 到目前为止我们仅处理单一类型的数据，就是数字。 另一种数据类型是字符串，它可以是字母、 数字或其他用引号引起来的字符的任意组合。运行字符串"你好, 世界！"，看看会发生什么。
      Final Room Escape App: |-
        # 你做到了！\\r

        \\r
        你制作了一个密室逃脱游戏！现在是时候定制它了。 \\r
        \\r
        考虑一下：\\r
        \\r
        \*
        给房间添加更多样式\\r

        -   添加更多能够交互的物品\\r
        -   让密码是随机的\\r
        -   添加更多的房间
      Fish Tank 1-validated: "**做出预测**：你觉得当运行代码时，会发生什么？"
      Fish Tank 1-validated_2019: "**做出预测**：你觉得当运行代码时，会发生什么？"
      Fish Tank 1: "**做出预测**：你觉得当运行代码时，会发生什么？"
      Fish Tank 2-validated: |-
        我们来做个鱼缸！

        把灰蒙蒙的风滚草变成一条鱼。
      Fish Tank 2-validated_2019: |-
        我们来做个鱼缸！

        把灰蒙蒙的风滚草变成一条鱼。
      Fish Tank 2: 我们要做一个鱼缸。将达斯提草变成一条鱼。
      Fish Tank 3-validated Ram: 这些旋转会让鱼变得头晕！改变鱼的行为，让它沿着水箱游动。
      Fish Tank 3-validated: 这些旋转会让鱼变得头晕！改变鱼的行为，让它沿着水箱游动。
      Fish Tank 3-validated_2019: 这些旋转会让鱼变得头晕！改变鱼的行为，让它沿着水箱游动。
      Fish Tank 3: 这些旋转会让鱼变得头晕！改变鱼的行为，让它沿着水箱游动。
      Fish Tank 4-validated: 鱼缸需要一些水！用`设置背景颜色`模块来让背景为绿色。
      Fish Tank 4-validated_2019: 鱼缸需要一些水！用`设置背景颜色`模块来让背景为绿色。
      Fish Tank 4: 鱼缸需要一些水！用`设置背景颜色`模块来让背景为绿色。
      Fish Tank 5-validated: 鱼有些孤单。在鱼缸内创造一个新的精灵。
      Fish Tank 5-validated_2019: 鱼有些孤单。在鱼缸内创造一个新的精灵。
      Fish Tank 5-validated_2019_implicitGroupTest: 鱼有些孤单。在鱼缸内创造一个新的精灵。
      Fish Tank 5-validated_simple: 鱼想要一个朋友。  添加新的精灵。
      Fish Tank 5: 鱼有些孤单。在鱼缸内创造一个新的精灵。
      Fish Tank 6-validated: 想让鱼的朋友做什么？增加一个行为，然后看看他们做了什么！
      Fish Tank 6-validated_2019: 想让鱼的朋友做什么？增加一个行为，然后看看他们做了什么！
      Fish Tank 6: 想让鱼的朋友做什么？增加一个行为，然后看看他们做了什么！
      Fish Tank 7-validated: 工具箱里有许多新的模块。用它们来让你的鱼缸变得特别。
      Fish Tank 7-validated_2019: 工具箱里有许多新的模块。用它们来让你的鱼缸变得特别。
      Fish Tank 7: 工具箱里有许多新的模块。用它们来让你的鱼缸变得特别。
      Fish Tank Predict: "**做出预测**：你觉得当运行代码时，会发生什么？"
      Fish Tank Predict_2019: "**做出预测**：你觉得当运行代码时，会发生什么？"
      Fish Tank Template: 项目模版
      Fish Tank Template_2019: 项目模版
      Fish Tank Template_simple: 项目模版
      Food Fight!: |-
        我们已为你添加了上一关的函数。

        <hr/>

        <h4>
        用“如果”模块来编写你的游戏，当play_score(玩家分数) 大于某个值时，调用level_up(升级) 函数。<br/><br/>
        </h4>
        <i>例如：“play_score” > 6</i>

        <hr/>
        <i>玩游戏，并且达到第3级来到达下一关。 </i>
      Formative versus Summative Assessment: 下面的连接提供了正式的和总结性的评估的定义和示例的资源：
      Function intro Ryan: |-
        工作区中有一项名为`建造桥梁`的**函数**。穿过河流所需的全部代码都在里面了！\\r
         \\r
        将这个小小的绿色模块<xml><block type="procedures_callnoreturn" id="callMe"><mutation name="build bridge"/></block></xml>粘入工作区两次，从而修复道路并让{currentPlayerName} 抵达红石火把[redstone_torch]。
      Function intro Ryan_2019: |-
        工作区中有一项名为`建造桥梁`的**函数**。穿过河流所需的全部代码都在里面了！\\r
         \\r
        将这个小小的绿色模块<xml><block type="procedures_callnoreturn" id="callMe"><mutation name="build bridge"/></block></xml>粘入工作区两次，从而修复道路并让{currentPlayerName} 抵达红石火把[redstone_torch]。
      GLJ_Crawl_Exemplar_1: "**自由发挥**: 尝试使用你学到的东西来制作一些新事物。尝试使用工具箱中一些新的模块。"
      GLJr_Behavior_7: |-
        看看这两个新模块 - 绿色的"当小狗碰到猫时"模块会在小狗碰到猫时运行下面的所有模块。而"移除行为"模块会从精灵上移除一个行为。\\r
        \\r
        看看你是否能让小猫和小狗跑到一起时停止移动。
      GLJr_Behavior_8: 小猫和小狗看到对方都非常兴奋，它们想要来个跳舞的派对。当两个精灵碰到一起时，除了移除他们的移动行为，还需要增加"跳舞派对"行为来让他们庆祝一下！
      GLJr_Behavior_9: "**自由发挥**: 尝试使用你学到的东西来制作一些新事物。尝试使用工具箱中一些新的模块。"
      GLJr_Forever_5: 现在，我们有了两个精灵！用循环来让小狗紧张，并让小猫漫步。
      GLJr_Forever_6: 让我们试试更多的移动模块 - 让小狗向上跑，小猫向右跑。
      GLJr_Forever_7: |-
        了解一下新的"如果-否则"模块 - 它让你能在_如果_条件满足（true）时运行一组代码，不满足（false）时运行另一组代码。在它里面，我们用了另一个新模块来检查_是否_两个精灵碰到了一起。\\r
        \\r
        看看你是否能在小狗和小猫碰到一起时，让它们停下来。
      GLJr_Forever_8: 小猫和小狗看到对方都非常兴奋，它们想要来个跳舞的派对。如果这两个精灵碰到一起，让它们都运行"跳舞派对"模块。
      GLJr_Forever_9: "**自由发挥**: 尝试使用你学到的东西来制作一些新事物。尝试使用工具箱中一些新的模块。"
      Geometric Pattern: "\\*\\* 项目理念: \\*\\* 使用形状几何概念创建图案。这需要坚持和规划！"
      Geometric Sun: "\\*\\* 项目理念: \\*\\* 使用形状几何概念创建图案。这需要坚持和规划！"
      Geometric Sun_2018: "\\*\\* 项目理念: \\*\\* 使用形状几何概念创建图案。这需要坚持和规划！"
      Geometric Sun_2019: "\\*\\* 项目理念: \\*\\* 使用形状几何概念创建图案。这需要坚持和规划！"
      HOC 2018 Level_1: 您需要补给以进行航行。从**箱子**![](https://images.code.org/e0cf43fd36a50dd16ee06595047bfd8f-image-1538697999418.png) 中收集一艘**船** ![](https://images.code.org/0b3162de9dc0abf3e0890d315b8cc699-image-1538697977747.png) 。
      HOC 2018 Level_10: 这个海底遗迹的某个地方藏着一条**鱿鱼** ![](https://images.code.org/82f305ab1cb4a9ff9044991a18edb16e-image-1538947827218.png) ，你能找到它吗？
      HOC 2018 Level_11: 在黑色混凝土附近建造一堵**海晶石**墙![](https://images.code.org/d110b8d13c01756fcdbef3768b2e2859-image-1538699770898.png) 。此操作可激活**潮涌核心** ![](https://images.code.org/7773cf30f42e6727a23c8cb364d4664b-image-1538699800030.png) ，完成挑战！
      HOC 2018 Level_12: 恭喜！开放的水底世界等着您。建造一个珊瑚礁！一座火山！一艘沉船！想怎么玩自己随意。
      HOC 2018 Level_2: 在开阔水面，船比游泳要好用！前往船坞登船。
      HOC 2018 Level_3: 拿起船桨，划到开阔水域抓**鳕鱼**![](https://images.code.org/9b636884eefb1efe18f9f844e1e916a9-image-1538698597353.png)。
      HOC 2018 Level_4: 用鳕鱼喂**海豚** ![](https://images.code.org/8c240fd4df4da2795ba7ca942b77a057-image-1538947890991.png)。使用重复区块更快地穿过海洋。
      HOC 2018 Level_5: 海底某个地方藏着一个**鹦鹉螺壳** ![](https://images.code.org/2eb084fa0c718dee6ca4b6379381f735-image-1538698936660.png)！探索沉船，找到**箱子** ![](https://images.code.org/16cdd5779b38909d4bf47b29535c92b0-image-1538698950602.png)。
      HOC 2018 Level_6: 外边好冷啊！前往水底废墟的路上抓一条**鲑鱼**![](https://images.code.org/c66eadf25b3cdfe20bbfdc91e2c28c94-image-1538699000102.png)。
      HOC 2018 Level_7a: 找到了水下废墟。在沙石红搜寻包含**海晶石** ![](https://images.code.org/29a5fd76b869d755a60d39fbbb4057eb-image-1538699081910.png)宝藏的**箱子** ![](https://images.code.org/29a5fd76b869d755a60d39fbbb4057eb-image-1538699081910.png)。
      HOC 2018 Level_8: 先是冰山，现在又是岩浆？穿过火山岛，在珊瑚礁上寻找**热带鱼** ![](https://images.code.org/6d3293e7709cb1a43d9f7617fd0cc2b8-image-1538699180397.png) in the coral reef。
      HOC 2018 Level_9b: |-
        成功抵达珊瑚礁，赶快搜寻**海洋之心**吧
        ![](https://images.code.org/3035926d2a37aa695b5d47413adcffa2-image-1538699398781.png) ！使用蓝色和红色珊瑚找到**宝箱** ![](https://images.code.org/af697397dd70e5b6b93b00eb46c558af-image-1538699377397.png)。
      HOC Dance 3_draft: |-
        _给舞蹈加点炫酷效果！_

        在工具箱中找到一个能添加背景效果的模块。然后跟随音乐节拍，来看看新的效果吧！
      HOC Dance 4_draft: |-
        使用其他新模块让舞者**每 2 个小节**变换动作！

        \*\*选择“(下一步)”、“(上一步)”或“(随机)”，让舞者在代码每次运行时做不同的动作。
      HOC Dance 5_draft: |-
        _我们需要更多舞者！_

        创建名为“backup\_dancer1”的伴舞，与猫一起跳舞。
      HOC Dance 9_draft: |-
        <xml><block type="Dancelab_whenKey"></block></xml> 模块可以在上方向键按下时运行代码。

        可以更改跳舞动作，更改舞者的属性，或者快速做一次动作。激发创造力，寻找新模块！
      HOC Dance Freeplay: 随着节奏律动吧！创建自己的舞蹈，并与朋友分享。
      HOC Dance Freeplay_draft: 随着节奏律动吧！创建自己的舞蹈，并与朋友分享。
      HOC Dance Predraw: 随着节奏律动吧！创建自己的舞蹈，并与朋友分享。
      Harvesting: |-
        哦，不，我的地图丢了，我不记得我中了什么了！每一个新芽都有可能长成**玉米** ![玉米的图片](https://images.code.org/cac3133c40781553a70066a67298b2b5-image-1472493202556.png)
        , **豆子** ![豆子的图片](https://images.code.org/5e379ff595be17722237d9685b29fd96-image-1472493220871.png)
        , 或者**南瓜** ![南瓜的图片](https://images.code.org/03cf76a978e0788ccb53f14e9d264695-image-1472493237148.png)。你能写一些代码来捡起所有的庄稼吗？不管他们是什么。
      HoCAB_labyrinth1: |-
        用这些模块通过迷宫！

        <xml><block type="simple_move_down"/></xml><xml><block type="simple_move_up"/></xml><xml><block type="simple_move_right"/></xml><xml><block type="simple_move_left"/></xml>
      Inspirational Artwork: "<img src=\"https://images.code.org/1df195df9d808f0dd539bef0f5c2958b-image-1443049871563.02.54.png\"\nwidth=\"250px\"/>\\\\r\n\\\\r\n自由发挥灵感：你已经学会了所有需要创建这个模式的知识了！\\\\r\n\\\\r\n如果这个图形引起了你的联想，试试画出一些类似的图像。要不然，就画画你想画的一些东西。 \n\\\\r\n\\\\r\n注意：我们已经用`set alpha`（设置透明度）模块来让花瓣慢慢淡出。"
      InspirationalArtwork: |-
        现在你已经学到了所有你需要知道的东西来做这样的图案\\r
        \\r
        如果这张照片启发了你, 请试着制做一些类似的东西。要不然，就创建自己的。
      InspirationalArtwork_2018: |-
        现在你已经学到了所有你需要知道的东西来做这样的图案\\r
        \\r
        如果这张照片启发了你, 请试着制做一些类似的东西。要不然，就创建自己的。
      InspirationalArtwork_2019: |-
        现在你已经学到了所有你需要知道的东西来做这样的图案\\r
        \\r
        如果这张照片启发了你, 请试着制做一些类似的东西。要不然，就创建自己的。
      'Internet Simulator: Sending Text_2018': |-
        ## 发送文本

        **操作指南：** 设计一个编码系统来用互联网模拟器发送文本。老师会提供一系列你需要解决的越来越复杂的挑战。
      'Internet Simulator: Sending Text_2019': |-
        ## 发送文本

        **操作指南：** 设计一个编码系统来用互联网模拟器发送文本。老师会提供一系列你需要解决的越来越复杂的挑战。
      'Introduction to Conditionals: Boolean Expressions': |-
        ### 注意事项:

        1.  什么是 \* 布尔表达式？ \*
        2.  为什么它被称为 "布尔"？
        3.  这样表达是合法的吗？ `10 > 25`？
      'Introduction to Conditionals: Boolean Expressions_2018': |-
        ### 注意事项:

        1.  什么是 \* 布尔表达式？ \*
        2.  为什么它被称为 "布尔"？
        3.  这样表达是合法的吗？ `10 > 25`？
      'Introduction to Conditionals: Boolean Expressions_2019': |-
        ### 注意事项:

        1.  什么是 \* 布尔表达式？ \*
        2.  为什么它被称为 "布尔"？
        3.  这样表达是合法的吗？ `10 > 25`？
      K-1 Bee Loops 2: 用重复循环来移动，然后采花蜜，酿蜂蜜。
      K-1 Bee Loops 3: 用三个重复循环来采花蜜，酿蜂蜜！
      K-1 Bee Loops 4: 用重复循环来采花蜜，酿蜂蜜，并且移动。
      K-1 Bee Loops 5: 用重复循环来采花蜜，酿蜂蜜！
      K-1 Bee Loops 6: 用`重复`循环来采花蜜，酿蜂蜜，并且移动！
      K-1 Maze Loops 10: |-
        带我到猪那里！\\r
        使用`重复`循环会使它更容易。
      K-1 Maze Loops 11: |-
        带我到猪那里！\\r
        使用`重复`循环会更容易。
      K-1 Maze Loops 12: |-
        带我到猪那里！\\r
        使用`重复`循环会更容易。
      K-1 Maze Loops 2: 使用`重复`模块，让我到达那只猪!
      K-1 Maze Loops 3: |-
        带我到猪那里！\\r
        一定要使用`重复`循环。
      K-1 Maze Loops 5: |-
        带我到猪那里！\\r
        一定要使用`重复`循环。
      K-1 Maze Loops 6: |-
        带我到猪那里！\\r
        一定要使用`重复`循环。
      K-1 Maze Loops 7: |-
        带我到猪那里！\\r
        一定要使用`重复`循环。
      K-1 Maze Loops 8: 使用`重复`循环，让我到达那只猪！
      K-1 Maze Loops Assessment 1: |-
        看看我们学到了什么!  \\r
        使用`重复`循环, 让我到达那只猪!
      KIKI GLJ Test Response: 认真看看下面的代码。你觉得当点击"运行"时，飞机会做什么？\\r
      LaurelDebugging4Video1: |-
        这是罗瑞尔的冒险！\\r
        \\r
        请四处移动她, 并得到尽可能多的金子。
      MC Agent Freeplay: "**自由游戏时间：** 现在您自己来决定！使用代理人的代码来帮助您探索这个世界。"
      MC_2017_Ryan_02: |-
        使用循环可以让这样的代码变得更短！\\r
        \\r
        使用`重复`循环来帮助代理前进，让他到达压力板。
      MC_HOC_2017 Agent Test: |-
        点击“运行”并使用**方向键**移动玩家。 \\r
        \\r
        为了通关，您需要抵达门边上并打开它（使用**空格键**），这样您就可以抵达内部的橙色方形区域。
      MC_HOC_2017_01: |-
        点击“运行”并使用**方向键**移动玩家。 \\r
        \\r
        为了通关，您需要抵达门边上并打开它（使用**空格键**），这样您就可以抵达内部的橙色方形区域。
      MC_HOC_2017_01_Cole: 在路上收集工具。使用方向键左右移动，取到屋里的宝箱。
      MC_HOC_2017_01_Kiki: '运行时，您需要点击游戏空间下方的橙色"运行"按钮， 然后使用**方向键**移动玩家。  '
      MC_HOC_2017_01_RETRY: |-
        门锁上了，但是 Agent 已经赶来帮忙了！ \\r
         \\r
         \\r
        在工作间中，将一个"向前移动"方块粘贴到"当运行时"方块上，使代理人抵达压力板[PressurePlate_Up]，然后按"运行"并使用方向键移出房屋以收集**箱子**[chest]。
      MC_HOC_2017_01_RETRY_2019: |-
        门锁上了，但是 Agent 已经赶来帮忙了！ \\r
         \\r
         \\r
        在工作间中，将一个"向前移动"方块粘贴到"当运行时"方块上，使代理人抵达压力板[PressurePlate_Up]，然后按"运行"并使用方向键移出房屋以收集**箱子**[chest]。
      MC_HOC_2017_02: 玩家需要进入那片秘密树林。编写代码，帮助代理人抵达压力板并打开门。
      MC_HOC_2017_02_Cole: "{currentPlayerName} 正在经历一场冒险！为了帮他，您需要获得右侧锁住的门后边的**地图**[map_empty]。\\\\r\n \\\\r\n将代码粘贴至工作区中，使代理人移动至压力板[PressurePlate_Up]，以便让{currentPlayerName} 通过。 "
      MC_HOC_2017_02_Cole_2019: "{currentPlayerName} 正在经历一场冒险！为了帮他，您需要获得右侧锁住的门后边的**地图**[map_empty]。\\\\r\n \\\\r\n将代码粘贴至工作区中，使代理人移动至压力板[PressurePlate_Up]，以便让{currentPlayerName} 通过。 "
      MC_HOC_2017_02_Kiki: |-
        玩家正在经历一场冒险，但是其首先需要获得隐藏在锁住的门另一侧的火把。 \\r
        \\r
        为代理人编程，使其向前移动两次，并沿着白色路径抵达压力板，以便让他为玩家打开门。
      MC_HOC_2017_02_Will: |-
        为了完成当前关卡，玩家需要抵达锁住的门后面的秘密树林中的橙色方形区域。 \\r
        \\r
        工作区中的代码将会使代理人向前移动两次以抵达压力板，并为艾利克斯或者斯蒂夫打开门。
      MC_HOC_2017_03_Cole: "{currentPlayerName} 继续进行冒险，同时需要**指南针**[compass] 来为旅程做准备。\\\\r\n   \\\\r\n为代理人编写代码，使其打开门。 "
      MC_HOC_2017_03_Cole_2019: "{currentPlayerName} 继续进行冒险，同时需要**指南针**[compass] 来为旅程做准备。\\\\r\n   \\\\r\n为代理人编写代码，使其打开门。 "
      MC_HOC_2017_03_Kiki: |-
        玩家的冒险将会在锁住的门后面的秘密树林中开始！\\r
        \\r
        \\r
        编写代码，帮助代理人抵达压力板并打开门。
      MC_HOC_2017_04: 改动上一个关卡的循环，帮助特工找到过河的路。
      MC_HOC_2017_04POINT5_Cole: |-
        您已经成功走出了沼泽！现在，您需要让玩家安全抵达橙色方形区域。\\r
        \\r
        找到一种简单的模式并使用循环来穿过前两个压力板，帮助代理人清空路径。
      MC_HOC_2017_04POINT5_RYAN: |-
        您已经成功越过了！ \\r
        \\r
        现在，您需要使{currentPlayerName} 安全穿过迷宫并收集**斧头**[diamond_axe]
      MC_HOC_2017_04POINT5_RYAN_2019: |-
        您已经成功越过了！ \\r
        \\r
        现在，您需要使{currentPlayerName} 安全穿过迷宫并收集**斧头**[diamond_axe]
      MC_HOC_2017_04_Cole: "代理人可以在移动时越过水！ \\\\r\n\n \\\\r\n使用一个\"重复\"循环解决该难题，并帮助{currentPlayerName} 抵达门后面的**桶**[bucket_empty]。 "
      MC_HOC_2017_04_Cole_2019: "代理人可以在移动时越过水！ \\\\r\n\n \\\\r\n使用一个\"重复\"循环解决该难题，并帮助{currentPlayerName} 抵达门后面的**桶**[bucket_empty]。 "
      MC_HOC_2017_04_Kiki: |-
        秘密树林的入口通向了这片美丽的绿洲！为了完成当前关卡，玩家需要抵达小屋中的橙色方形区域。\\r
        \\r
        使用一个"重复"循环帮助代理人一路抵达压力板，后者将会打开小屋的门。
      MC_HOC_2017_05: |-
        循环并非总是有用的。 \\r
        \\r
        这些仙人掌的生长并不具有明显的模式，所以循环无法将它们正确地清空。因此，我们为您提供了一个叫做"摧毁并移动"的函数，每当代理人遇到障碍时，它可以为您做一些脏活累活。
      MC_HOC_2017_05_Cole: "哦不，桥没了！ \n\n为 代理人编写代码，使用<xml> <block type=\"craft_placeBlock\">\n\n<title name=\"TYPE\"> </title>\n</block></xml> 模块重新建造桥梁，以便让{currentPlayerName} 抵达**铲子**[diamond_shovel]。"
      MC_HOC_2017_05_Cole_2019: "哦不，桥没了！ \n\n为 代理人编写代码，使用<xml> <block type=\"craft_placeBlock\">\n\n<title name=\"TYPE\"> </title>\n</block></xml> 模块重新建造桥梁，以便让{currentPlayerName} 抵达**铲子**[diamond_shovel]。"
      MC_HOC_2017_05_Josh: |-
        哦不，桥没了！ \\r
        \\r
        帮助代理人重新建造桥梁，以便让玩家抵达**铲子**。
      MC_HOC_2017_05_Kiki: |-
        是时候让玩家离开秘密树林并继续冒险了，但是桥却没了！\\r
        \\r
        帮助代理人重新建造桥梁，然后移动至木板处，以便让玩家抵达橙色方形区域。
      MC_HOC_2017_06_Cole: "又一条河流，但是这条却宽多了！\\\\r\n \\\\r\n修复该代码，帮助代理人建造一座桥梁，以便让{currentPlayerName} 抵达**镐**[diamond_pickaxe]。 "
      MC_HOC_2017_06_Cole_2019: "又一条河流，但是这条却宽多了！\\\\r\n \\\\r\n修复该代码，帮助代理人建造一座桥梁，以便让{currentPlayerName} 抵达**镐**[diamond_pickaxe]。 "
      MC_HOC_2017_06_Josh: |-
        又一条河流，但是这条却宽多了！\\r
         \\r
        修复该代码，帮助代理人建造一座横跨该河流的桥梁。
      MC_HOC_2017_06_Kiki: |-
        又一条河流，但是这条却宽多了！ \\r
        \\r
        修复该代码，帮助代理人建造一座横跨该河流的桥梁。
      MC_HOC_2017_07_Cole: "路上有冰！\\\\r\n \\\\r\n\"清空路径\"函数能够帮助您摧毁冰层，使{currentPlayerName} 抵达矿车[minecart_normal]！ "
      MC_HOC_2017_07_Cole_2019: "路上有冰！\\\\r\n \\\\r\n\"清空路径\"函数能够帮助您摧毁冰层，使{currentPlayerName} 抵达矿车[minecart_normal]！ "
      MC_HOC_2017_07_Kiki: "循环并非重复代码的唯一方式！\\\\r\n\\\\r\n此处，我们为您提供了一个叫做\"清空仙人掌\"的函数，每当您使用它时，它能够帮助您清空三个仙人掌。使用两个\"清空仙人掌\"模块来清空通向橙色方形区域的路径。 "
      MC_HOC_2017_07a_Kiki: 现在，编辑该循环，帮助代理人清空通向橙色方形区域的路径。
      MC_HOC_2017_08_Cole: |-
        现在，您无需在移动前进行摧毁，而是需要放置一个模块。 \\r
        \\r
        改变提供的函数，使其适用于沙漠。
      MC_HOC_2017_08_Kiki: |-
        现在，您无需摧毁仙人掌，而是需要在岩浆上放置石头，然后摧毁沙石。 \\r
        \\r
        改变该函数，使其适用于当前关卡。
      MC_HOC_2017_08_RY: |-
        现在，有**两**个函数可供选择！ \\r
        \\r
        使用这些函数，为{currentPlayerName} 快速建造一座越过岩浆的桥梁。
      MC_HOC_2017_08_Will: |-
        现在，有**两**个函数可供选择！ \\r
        \\r
        使用这些函数，为玩家快速建造一座越过岩浆的桥梁。
      MC_HOC_2017_09_Cole: 使用功能，帮助代理人摧毁那些挡住了玩家通往压力板路径的巨型泥土方块。
      MC_HOC_2017_09_Kiki: "该初始代码无法被移除。\\\\r\n\\\\r\n为\"创建小径\"函数添加命令，以便工作区中的程序使代理人抵达压力板。 "
      MC_HOC_2017_09_RS_CLONE: 修复该函数并填充这些洞，然后踏上压力板以清空出一条通往火把的路径。
      MC_HOC_2017_10_Cole: 使用这些函数为矿车清空出一条路径，然后走进下界传送门。
      MC_HOC_2017_10_Cole_old: 尝试从头创建一个函数，使得代理人完成该矿车并使玩家抵达橙色方形区域的过程变得更加容易。
      MC_HOC_2017_10_Kiki: 尝试从头创建一个函数，使得代理人完成该矿车并使玩家抵达橙色方形区域的过程变得更加容易。
      MC_HOC_2017_10_RETRY: "您能在您的工作区中找出这两个函数的不同之处吗？\\\\r\n \\\\r\n使用这些函数以及工具箱中的其他代码，为矿车清空出一条路径，然后收集**打火石**[flint_and_steel]。 \\\\r "
      MC_HOC_2017_10_RETRY_2019: "您能在您的工作区中找出这两个函数的不同之处吗？\\\\r\n \\\\r\n使用这些函数以及工具箱中的其他代码，为矿车清空出一条路径，然后收集**打火石**[flint_and_steel]。 \\\\r "
      MC_HOC_2017_10_RYAN: 尝试从头创建一些函数，使得代理人完成该矿车并使玩家抵达橙色方形区域的过程变得更加容易。
      MC_HOC_2017_10_RYAN2: 尝试从头创建一些函数，使得代理人完成该矿车并使玩家抵达橙色方形区域的过程变得更加容易。
      MC_HOC_2017_11_Kiki: 现在得靠您自己了！看看您可以在这片冰湖周围创建些什么。
      MC_HOC_2017_13_Cole: "**自由游戏时间：** 现在您自己来决定！使用代理人的代码来帮助您探索这个世界。"
      MC_HOC_2017_4.5v2: |-
        您已经成功走出了沼泽！现在，您需要让玩家安全抵达橙色方形区域。\\r
        \\r
        找到一种简单的模式并使用循环来穿过前两个压力板，帮助代理人清空路径。
      MC_HOC_2017_Ali: '参看下方的函数。您将如何使用它们避开恶魂并帮助{currentPlayerName} 安全抵达**附魔书**[book_enchanted]？  '
      MC_HOC_2017_Ali_2019: '参看下方的函数。您将如何使用它们避开恶魂并帮助{currentPlayerName} 安全抵达**附魔书**[book_enchanted]？  '
      MC_HOC_2017_FP10x10: "**自由游戏时间：** 现在由你来决定了！您能挑战自我并收集完当前关卡的所有钻石吗？"
      MC_HOC_2017_FP10x10_RE: "**自由游戏时间：** 现在由你来决定了！您能挑战自我并收集完当前关卡的所有钻石吗？"
      MC_HOC_2017_FP20x20: "**自由游戏时间：** 现在您自己来决定！使用代理人的代码来帮助您探索这个世界。"
      MC_HOC_2017_FP20x20_2019: "**自由游戏时间：** 现在您自己来决定！使用代理人的代码来帮助您探索这个世界。"
      MC_HOC_2017_Ryan_03: |-
        您是否知道您可以在一个循环中放置不止一段代码？ \\r
        \\r
        使用一个"重复"循环帮助代理人，通过在水中放置方块的方式在河流上建造一座桥梁。
      MC_HOC_2017_Ryan_05: |-
        有时，您需要击倒那些阻碍了您的玩家的东西。 \\r
        使用"摧毁"方块清空在代理人和压力板之间的仙人掌。
      MC_HOC_Kiki_02: 需要有人位于压力板之上，侧门才会打开。帮助代理人抵达压力板，以便玩家能够离开房屋。
      Making Music: |-
        今天，你会学习如何创建和使用**函数**。\\r
        \\r
        创建函数会让你制作自己的模块！制作函数有两部分：\\r
        \\r
        制作一个有名字的新模块，将你想要运行的代码都放在它里面。\\r
        \-函数的xml定义- \\r
        \\r
        单个绿色的模块，是你使用或调用创建的函数。\\r
        \-函数调用的xml-\\r
        \\r
        准备熟悉函数，学习如何编辑它们，并创建自己的函数！
      Making Music_2018: |-
        今天，你会学习如何创建和使用**函数**。\\r
        \\r
        创建函数会让你制作自己的模块！制作函数有两部分：\\r
        \\r
        制作一个有名字的新模块，将你想要运行的代码都放在它里面。\\r
        \-函数的xml定义- \\r
        \\r
        单个绿色的模块，是你使用或调用创建的函数。\\r
        \-函数调用的xml-\\r
        \\r
        准备熟悉函数，学习如何编辑它们，并创建自己的函数！
      Making Music_2019: |-
        今天，你会学习如何创建和使用**函数**。\\r
        \\r
        创建函数会让你制作自己的模块！制作函数有两部分：\\r
        \\r
        制作一个有名字的新模块，将你想要运行的代码都放在它里面。\\r
        \-函数的xml定义- \\r
        \\r
        单个绿色的模块，是你使用或调用创建的函数。\\r
        \-函数调用的xml-\\r
        \\r
        准备熟悉函数，学习如何编辑它们，并创建自己的函数！
      Mike Test Bee Conditionals 1: |-
        云朵挡住了我的视线！
        \\r
        \\r
        检查一下云下面是否有花，然后只从有花的地方收集花蜜。\\r
        小心，它是变化的！
      Mike Test Bee Conditionals 2: |-
        评估：收集所有的花蜜。\\r
        小心，不要采集没有花蜜的紫花。
      NEW Course 4 Artist Functions 1: |-
        你能用重复循环，来画一个边长100像素的正方形吗？\\r
        \\r
      NEW Course 4 Artist Functions 10.1: 用前一关的函数来画这个图形。
      NEW Course 4 Artist Functions 10: |-
        点击"编辑"来填写函数定义中的模块，从而画出一个边长40像素的正方形。\\r
        \\r
      NEW Course 4 Artist Functions 11: |-
        现在，我们要创建一个叫做`draw a line of squares`（用正方形画一条线）的新函数，它会在一行画六个正方形。\\r
        \\r
        你能用`draw a square 20`（画一个边长20像素的正方形）函数来创建这个新的函数吗？\\r
        <br/><br/>\\r
        \\r
        _注意，我们已经将笔刷改得更细了1。点击`draw a square 20`（画一个边长20像素的正方形）函数上的"编辑"按钮看看怎么做。_
      NEW Course 4 Artist Functions 12: |-
        用上一关中的`draw a line
        of squares`（用正方形画一条线）函数来画这个图形。
      NEW Course 4 Artist Functions 13: |-
        你能用`draw a line of squares`（用正方形画一条线）的函数画星形吗？\\r
        \\r
        (请在转144度之前确定要`向前移动`60像素！）
      NEW Course 4 Artist Functions 14: 到了自由玩耍的时间了! 请画任何你喜欢的东西!
      NEW Course 4 Artist Functions 2: |-
        你能够画出相隔20像素的3 个正方形吗？\\r
        \\r
        每个正方形的大小都是100像素。
      NEW Course 4 Artist Functions 3: "这是一个新型的模块。它被称为 \"函数\"模块。单击 \"编辑\", 然后用绘制100像素边的正方形的代码来填充它。\\\\r\n\\\\r \n编辑完成后，单击 \"关闭\" 返回到程序中。"
      NEW Course 4 Artist Functions 4: '用`draw a square`（画一个正方形）函数来画这个图形。 '
      NEW Course 4 Artist Functions 5: |-
        `draw a square`（画一个正方形）模块如何直到要运行哪个命令？点击`draw a square`（画一个正方形）函数的"编辑"按钮。在函数编辑器里的定义组成了`draw a square`（画一个正方形）函数。\\r
        \\r
        <br/>\\r
        当你看完后，点击"保存并关闭"然后点击"运行"。\\r
        \\r
      NEW Course 4 Artist Functions 6: |-
        你能用“画正方形”函数来画出这个图形吗？提示：每个正方形相隔20像素。\\r
        \\r
      NEW Course 4 Artist Functions 7: "你已经懂得怎样使用函数模块了吗？让我们改一下`draw a square`（画一个正方形）的代码，来让它的边长是200像素。\\\\r\n\\\\r\n点击“编辑”来进入`draw a square`（画一个正方形）函数的编辑界面。\\\\r\n\\\\r\n记得点击右上角的“保存并关闭”。 "
      NEW Course 4 Artist Functions 8: 我们已为你创建了一个叫做"画一个三角形"的新函数。 你可以编辑这个函数来画一个边长 100 像素的三角形吗?
      NEW Course 4 Artist Functions 9: 你能只添加一个模块来解决这个问题吗？
      NEW Course 4 Artist Functions inspire: "<img src=\"https://images.code.org/5e50e6ef0cafb40a8b697ea158047412-image-1441260841174.11.12.png\"\nwidth=\"250px\"/>\\\\r\n\\\\r\n自由发挥灵感：你已经学会了所有需要创建这个模式的知识了！\\\\r\n\\\\r\n如果这个图形引起了你的联想，试试画出一些类似的图像。要不然，就画画你想画的一些东西。 \n\\\\r\n\\\\r"
      NEW Course 4 Artist Params 1: |-
        让我们定义这个函数来画一个边长50像素的正方形。点击“编辑”来开始。\\r
        \\r
      NEW Course 4 Artist Params 10: |-
        创建一个有“长度”参数的“画一个六边形”的函数。\\r
        \\r
        六边形的边长都是100像素。
      NEW Course 4 Artist Params 11: |-
        你能想出怎样画这个图形吗？\\r
        \\r
        编辑这个函数来使用“边数”参数。
      NEW Course 4 Artist Params 12: |-
        你能完成这个图形吗？\\r
        \\r
        所有形状的边长都是100像素。
      NEW Course 4 Artist Params 13: |-
        让我们编辑这个`画一个多边形`函数。

        它已经有一个`边数`参数了。现在，再加一个`长度`参数。

        每个图形的周长是200像素。你还记得当多边形有不同数量的边时，如何让它们一样长的等式吗？
      NEW Course 4 Artist Params 14: "编辑`draw a spiral edge`（画一个螺旋形）函数，来使用`length`（长度）和`sides`（边数）参数，然后重新创建这些形状。\\\\r\n\\\\r\n\\-\n正方形的最小边的长度是5像素。\\\\r\n\n-   三角形的最小边长是10像素。\\\\r\n-   六边形的最小边长度是2像素。\\\\r\n-   所有边都要增加到100像素。  "
      NEW Course 4 Artist Params 15: "**自由发挥**：这里除了你写的函数，还有更多的函数让你发挥。用不同的笔宽度来看看你能画出什么不一样的图形！"
      NEW Course 4 Artist Params 2: 从头开始创建一个 "绘制三角形" 函数，用它来绘制一个边长50像素的三角形。
      NEW Course 4 Artist Params 3: |-
        现在让我们用函数来在一行里画5个三角形。\\r
        \\r
        每个三角形之间相隔30像素。
      NEW Course 4 Artist Params 4: 你注意到这些函数模块有什么不同吗？点击“运行”来看看会发生什么。
      NEW Course 4 Artist Params 5: |-
        将“长度”参数的输入模块中的“???”。\\r
        \\r
        这个五边形的边长是100像素。
      NEW Course 4 Artist Params 6: "将长度参数中的“???”换成正确的数字。\\\\r\n\\\\r\n正方形和三角形的边长是100像素。\\\\r\n六边形的边长是75像素。 "
      NEW Course 4 Artist Params 7: |-
        你能完成这幅画吗？
        \\r
        \\r
        每个三角形的边长比前一个多25像素。\\r
        第一个三角形的边长是25像素。
      NEW Course 4 Artist Params 8: |-
        这个三角形的代码被破坏了。\\r
        \\r
        你能修好这个函数，让它能画边长25，50，75像素的三角形吗？
      NEW Course 4 Artist Params 9: |-
        点击“编辑”来填写这个`draw a square`（画一个正方形）函数的定义，并且加一个参数。\\r
        它应该像三角形一样有一个长度参数。\\r
        \\r
        **这次，画三个正方形：**边长分别为25，50，75像素。它们的左下角之间相隔100像素。
      NEW Course 4 Artist Params inspire: "<img src=\"https://images.code.org/1df195df9d808f0dd539bef0f5c2958b-image-1443049871563.02.54.png\"\nwidth=\"250px\"/>\\\\r\n\\\\r\n自由发挥灵感：你已经学会了所有需要创建这个模式的知识了！\\\\r\n\\\\r\n如果这个图形引起了你的联想，试试画出一些类似的图像。要不然，就画画你想画的一些东西。 \n\\\\r\n\\\\r\n注意：我们已经用`set alpha`（设置透明度）模块来让花瓣慢慢淡出。"
      NEW Course 4 Artist Vars 12: 现在，重新创造上一关的算法，然后创造一个边长为150像素的五边形。
      NEW Course 4 Artist Vars 2: '拖拽一个数字模块到“设置长度”模块和“重复次数”模块中来画一个边长50像素的三角形。 '
      NEW Course 4 Artist Vars 4: |-
        让我们再试一次！\\r
        \\r
        你能通过设置长度变量为60，来画出这个六边形？
      NEW Course 4 Artist Vars 6: |-
        通过将长度变量放到正确的地方，并设置正确的值来画出这个边长为100像素的五边形。\\r
        \\r
        看看怎么能只设置长度一次，而将它用到所有正确的地方？
      NEW Course 4 Bee For Loops 10a: |-
        准备好挑战了吗？用你学会的关于循环的知识来解决这个问题。\\r
        \\r
        记住：你可能需要尝试很多次才能找到正确的解法。\\r
      NEW Course 4 Bee For Loops 2: |-
        添加需要的代码来让蜜蜂收集到所有的花蜜。\\r
        \\r
        看看这一关需要多少代码！\\r
        （我们会在下一关中学到一个更简单的办法。）
      NEW Course 4 Bee For Loops 3: '啊，“计数循环”让这个简单多了！你需要的代码都已经写好了，看一下是怎么放到一起的，然后点击“运行”看看它是怎么工作的。 '
      NEW Course 4 Bee For Loops 4 4: 现在我们需要往前移动“计数器”这么多次，然后收集“计数器”这么多次花蜜。你能用两个重复循环来解决这个挑战吗？
      NEW Course 4 Bee For Loops 4: '将计数循环中的??? 换成蜜蜂能收集的最大数量的花蜜。 '
      NEW Course 4 Bee For Loops 5 5: 你找到计数循环的窍门了吗？让我们帮助蜜蜂收集到剩下的花蜜。
      NEW Course 4 Bee For Loops 5: 你也能用计数循环递减。试着通过从5到1，每次减1来递减计数收集花蜜。
      NEW Course 4 Bee For Loops 6: |-
        循环里的最后一个数字叫做“增量”。每次循环执行时，计数器变量都会改变“增量”这么多。\\r
        \\r
        试着用增量2来收集所有花蜜。
      NEW Course 4 Bee For Loops 7: |-
        现在让我们将`计数器`变量和一个数学模块一起使用！怎样通过用“计数器”变量来使用最少的模块来游览花园呢？

        这次需要什么来收集3，6，9，12，15个花蜜呢？秘密就是`计数器`变量！

        记住：如果你的循环是递增计数的，增量就会每次加到计数器变量上。
      NEW Course 4 Bee For Loops 95: 看一下刚刚创建的“计数循环”的每个部分。能想出哪个部分需要加倍来解决这个问题呢？为什么这样就能工作呢？
      NEW Course 4 Play Lab Params 11: |-
        现在是自由发挥时间！
        你可以用工具箱你的所有模块了，祝你玩得愉快！
        <br/>

        <h5>
        <details>
        <summary><b>需要一些创意吗？</b></summary>
        \t<br/>
        \t<h5>
        \t\t<ul>
        \t<li><strong>标签</strong>
        - 让角色2闲逛，然后用方向键控制角色1来追逐他，直到他俩碰到一起。</li>
        <li><strong>敲击小精灵</strong>
        - 让小精灵不断的从随机的位置突然出现。如果在它消失前点到了它，就得分。</li>
        <li><strong>最佳猜想</strong> - 让两个角色都消失，然后在一个随机的位置随机出现一个角色。点击到角色1时，得一分。但如果点击到了角色2，就扣一分！</li>
        </ul>
        \t</h5>
        </details>
        </h5>
      NEW Course 4 Play Labs For Loops 8a: "\\*\\* 挑战: \\*\\* 如何使用`for loop`（计数循环）从上走到下, 并让每个角色都说出他们的编号，然后从屏幕上消失？ "
      New Minecraft Hero Project: "**自由游戏时间：** 现在您自己来决定！使用代理人的代码来帮助您探索这个世界。"
      October15 bat: 自由发挥：这里除了写的函数，还有更多的函数发挥。用不同的笔宽度来看看能画出什么不一样的图形！
      Overworld Chop Tree: 木材是一种非常重要的资源。许多东西都是由它制成的。走到树边, 并使用`摧毁方块`模块命令将它砍倒。
      Overworld Chop Tree_2018: 木材是一种非常重要的资源。许多东西都是由它制成的。走到树边, 并使用`摧毁方块`模块命令将它砍倒。
      Overworld Chop Tree_2019: 木材是一种非常重要的资源。许多东西都是由它制成的。走到树边, 并使用`摧毁方块`模块命令将它砍倒。
      Overworld House Frame Chosen: 用你想要的任何材料来建立房子的剩余部分。`重复`命令将派上用场。
      Overworld House Frame Chosen_2018: 用你想要的任何材料来建立房子的剩余部分。`重复`命令将派上用场。
      Overworld House Frame Chosen_2019: 用你想要的任何材料来建立房子的剩余部分。`重复`命令将派上用场。
      Overworld Move to Sheep: 添加第二个 `向前移动` 模块达到绵羊的位置。
      Overworld Move to Sheep_2018: 添加第二个 `向前移动` 模块达到绵羊的位置。
      Overworld Move to Sheep_2019: 添加第二个 `向前移动` 模块达到绵羊的位置。
      Overworld Place Wall: 每栋房子都是从墙开始的。把`放置`和`向前移动`命令放进重复循环中来构建房子的第一部分。
      Overworld Place Wall_2018: 每栋房子都是从墙开始的。把`放置`和`向前移动`命令放进重复循环中来构建房子的第一部分。
      Overworld Place Wall_2019: 每栋房子都是从墙开始的。把`放置`和`向前移动`命令放进重复循环中来构建房子的第一部分。
      Overworld Shear Sheep: 剪羊毛的时间到了! 用`修剪`的命令从两只羊身上收集羊毛。
      Overworld Shear Sheep_2018: 剪羊毛的时间到了! 用`修剪`的命令从两只羊身上收集羊毛。
      Overworld Shear Sheep_2019: 剪羊毛的时间到了! 用`修剪`的命令从两只羊身上收集羊毛。
      PS - test - pixelation: |-
        # 这样做\\r

        \\r
        通过输入0和1来完成"X"形状。如果你想全部清除，可以随时点击"可读格式化"。
      PS copy - CSD U3 Variables Predict Where XY Embed: |-
        # 预测\\r

        \\r
        圆圈会被绘制到屏幕的哪个角落？\\r
        \\r
        _提示：点击"显示网格"按钮来帮助你找到屏幕上的精确位置。_[显示在哪里](#triggercallout=code_triggered)
      PS copy - CSD U3 Variables change circle size: "\\\\r\n\\\\r\n\n# \n\n调试：使用变量\\\\r\n\\\\r\n这个程序使用了`circleSize`（圆圈尺寸）变量来控制一个圆的宽和高。如果让圆圈足够大，它就会像右边的图片一样填满整个屏幕。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n\n-   改变赋给`circleSize`的值，让圆圈覆盖整个屏幕。"
      PS copy 2-3 Bee Conditionals 5: |-
        这些神奇的紫花会变化！\\r
        \\r
        每次你尝试这个关卡时，紫花有可能由1个花蜜，或根本没有花蜜...但是你在运行代码之前是不知道的！\\r
        \\r
        小心不要从没有花蜜的紫花里收集花蜜。\\r
        你必须先用“如果有花蜜”模块，来检查花蜜数量是否等于1.
      Pixel Filterator: |-
        # 自由发挥\\r

        \\r
        按照你的想象，做一些令人惊叹的东西。
      Pixelation - AllTheThings 4: "# 像素化：AllTheThings\n\n4\\\\r\n这个像素化关卡演示了`hide_encoding_controls`（隐藏编码控件）选项的用法。注意，这个关卡将图片数据显示为16进制，并且不会让你将它改为二进制。\\\\r            "
      Pixelation - AllTheThings 5: |-
        # 像素化: AllTheThings

        5\\r
        这个像素化关卡演示了"Hide sliders"（隐藏滑动条）选项。注意，快读和高度滑动条都不可用，并且宽和高值都不可编辑。
      Pixelation - Lesson 14 - Fix bit offset: |-
        # 哦，不！图片在传输时被弄乱了！\\r

        \\r
        <img src = "https://images.code.org/1f78b53ad4892dc8f9b50111fce35c7e-image-1439474859998.17.43 PM.png" align=right width=200 hspace=20>\\r
        \\r
        **问题：** 在code.org标志的C的数据流中多了额外的一个比特。<br>这个比特让其它比特串行了，让标志看起来乱了。\\r
        <br>**你的任务:** 找到这个额外的比特并移除它，从而修好Code.org的标志。 \\r
        <br>**提示:** 这个比特位置越靠前，被破坏的比特就越多。 \\r
      Pixelation - Lesson 14 - Fix bit offset_2018: |-
        # 哦，不！图片在传输时被弄乱了！\\r

        \\r
        <img src = "https://images.code.org/1f78b53ad4892dc8f9b50111fce35c7e-image-1439474859998.17.43 PM.png" align=right width=200 hspace=20>\\r
        \\r
        **问题：** 在code.org标志的C的数据流中多了额外的一个比特。<br>这个比特让其它比特串行了，让标志看起来乱了。\\r
        <br>**你的任务:** 找到这个额外的比特并移除它，从而修好Code.org的标志。 \\r
        <br>**提示:** 这个比特位置越靠前，被破坏的比特就越多。 \\r
      Pixelation - Lesson 14 - Fix bit offset_2019: |-
        # 哦，不！图片在传输时被弄乱了！\\r

        \\r
        <img src = "https://images.code.org/1f78b53ad4892dc8f9b50111fce35c7e-image-1439474859998.17.43 PM.png" align=right width=200 hspace=20>\\r
        \\r
        **问题：** 在code.org标志的C的数据流中多了额外的一个比特。<br>这个比特让其它比特串行了，让标志看起来乱了。\\r
        <br>**你的任务:** 找到这个额外的比特并移除它，从而修好Code.org的标志。 \\r
        <br>**提示:** 这个比特位置越靠前，被破坏的比特就越多。 \\r
      Pixelation - Lesson 15 - Color Shades 4x4: "# 像素: 任务 3\n\n<img src = \"https://code.org/images/cspunit1/ColorTask3.png\" align=right width=200 hspace=20> \n* * 方向: ** 开始先看麦迪在视频中创建的 4x4 图像。\n\n任务是用 _每像素12位_ 来填充 4x4 网格的颜色。最后的结果应该看起来像是 (但不完全一样) 显示在右边的图像。 \n\n有以下要求: \n\n-   第1行-用红色填充阴影。\n-   第2行-填充绿色阴影。\n-   第3行-填充蓝色阴影。\n-   第4行-填充灰色阴影。"
      Pixelation - Lesson 15 - Color Shades 4x4_2018: "# 像素: 任务 3\n\n<img src = \"https://code.org/images/cspunit1/ColorTask3.png\" align=right width=200 hspace=20> \n* * 方向: ** 开始先看麦迪在视频中创建的 4x4 图像。\n\n任务是用 _每像素12位_ 来填充 4x4 网格的颜色。最后的结果应该看起来像是 (但不完全一样) 显示在右边的图像。 \n\n有以下要求: \n\n-   第1行-用红色填充阴影。\n-   第2行-填充绿色阴影。\n-   第3行-填充蓝色阴影。\n-   第4行-填充灰色阴影。"
      Pixelation - Lesson 15 - Color Shades 4x4_2019: "# 像素: 任务 3\n\n<img src = \"https://code.org/images/cspunit1/ColorTask3.png\" align=right width=200 hspace=20> \n* * 方向: ** 开始先看麦迪在视频中创建的 4x4 图像。\n\n任务是用 _每像素12位_ 来填充 4x4 网格的颜色。最后的结果应该看起来像是 (但不完全一样) 显示在右边的图像。 \n\n有以下要求: \n\n-   第1行-用红色填充阴影。\n-   第2行-填充绿色阴影。\n-   第3行-填充蓝色阴影。\n-   第4行-填充灰色阴影。"
      Pixelation - Lesson 15 - Color Shades: |-
        # 颜色像素: 任务 2\\r

        **方向:**\\r
        <img src='https://images.code.org/548d1daa698a17b1005b1747f152587f-image-1439476855059.png' style="width: 150px;" align=right>从曼迪在视频中创建的红色色调开始。试试在图像下面用6比特颜色填充成为另一个颜色。这是一些蓝色色调的例子。试试自己的颜色吧！
      Pixelation - Lesson 15 - Color Shades_2018: |-
        # 颜色像素: 任务 2\\r

        **方向:**\\r
        <img src='https://images.code.org/548d1daa698a17b1005b1747f152587f-image-1439476855059.png' style="width: 150px;" align=right>从曼迪在视频中创建的红色色调开始。试试在图像下面用6比特颜色填充成为另一个颜色。这是一些蓝色色调的例子。试试自己的颜色吧！
      Pixelation - Lesson 15 - Color Shades_2019: |-
        # 颜色像素: 任务 2\\r

        **方向:**\\r
        <img src='https://images.code.org/548d1daa698a17b1005b1747f152587f-image-1439476855059.png' style="width: 150px;" align=right>从曼迪在视频中创建的红色色调开始。试试在图像下面用6比特颜色填充成为另一个颜色。这是一些蓝色色调的例子。试试自己的颜色吧！
      Pixelation - Lesson 15 - Complete 3-bit color: "# \n\n颜色像素: 任务 1 \n\\*\\* 方向: \\*\\*\n\n-   我们请您以玛蒂创建的 4x2 图像开始， 但我们已经把最后两个方块拿掉。\n-   找到丢失的两个颜色并对其进行编码来完成图像。"
      Pixelation - Lesson 15 - Complete 3-bit color_2018: "# \n\n颜色像素: 任务 1 \n\\*\\* 方向: \\*\\*\n\n-   我们请您以玛蒂创建的 4x2 图像开始， 但我们已经把最后两个方块拿掉。\n-   找到丢失的两个颜色并对其进行编码来完成图像。"
      Pixelation - Lesson 15 - Complete 3-bit color_2019: "# \n\n颜色像素: 任务 1 \n\\*\\* 方向: \\*\\*\n\n-   我们请您以玛蒂创建的 4x2 图像开始， 但我们已经把最后两个方块拿掉。\n-   找到丢失的两个颜色并对其进行编码来完成图像。"
      Pixelation Bee: |-
        # 每像素12比特的例子\\r

        -   这张大一点的密封的图片是用每像素12比特来编码的，但用16进制来查看会更容易明白每个像素的颜色。\\r
        -   如果要切换到二进制模式 --做好准备-- 这会是非常多比特。\\r
        -   试试另外一件令人兴奋的事情：如果每像素用24比特来表示。会怎样呢？你能解释这个现象吗？
      Pixelation Bee_2018: |-
        # 每像素12比特的例子\\r

        -   这张大一点的密封的图片是用每像素12比特来编码的，但用16进制来查看会更容易明白每个像素的颜色。\\r
        -   如果要切换到二进制模式 --做好准备-- 这会是非常多比特。\\r
        -   试试另外一件令人兴奋的事情：如果每像素用24比特来表示。会怎样呢？你能解释这个现象吗？
      Pixelation Bee_2019: |-
        # 每像素12比特的例子\\r

        -   这张大一点的密封的图片是用每像素12比特来编码的，但用16进制来查看会更容易明白每个像素的颜色。\\r
        -   如果要切换到二进制模式 --做好准备-- 这会是非常多比特。\\r
        -   试试另外一件令人兴奋的事情：如果每像素用24比特来表示。会怎样呢？你能解释这个现象吗？
      Pixelation Flappy: |-
        # 每像素更多比特的例子\\r

        这是一张每像素9比特的更大的图片。在每像素9比特的情况下，能表现出512种不同的颜色。点击来查看下一张图片，更复杂，但更容易理解。
      Pixelation Flappy_2018: |-
        # 每像素更多比特的例子\\r

        这是一张每像素9比特的更大的图片。在每像素9比特的情况下，能表现出512种不同的颜色。点击来查看下一张图片，更复杂，但更容易理解。
      Pixelation Flappy_2019: |-
        # 每像素更多比特的例子\\r

        这是一张每像素9比特的更大的图片。在每像素9比特的情况下，能表现出512种不同的颜色。点击来查看下一张图片，更复杂，但更容易理解。
      Pizza on a Plate: "**项目想法：** 创建一个真实世界中熟悉的事物的图片。这需要坚持和规划！"
      Poorva copy U3L2 Using Simple Commands: |-
        <img
        src="https://images.code.org/0aca9e3ba0945f31ddd56438a45ed69c-image-1436286498758.png"
        align=right>

        只用4个乌龟命令，在应用实验室写代码来完成下面每个画图挑战。目标是用尽可能高效的代码，只用提供的命令来解决问题。

        "高效"的意思是什么？在计算机科学中，根据不同的出发点，这意味着不同的事情。在这些挑战上，用你觉得最好的方法来解决，我们会在最后来提出关于效率的问题。

        <img src="https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif"
        align=right>

        # 这样做：

        用尽可能高效的办法在乌龟的左前方画一个 1x1 的正方形。程序在停止时，乌龟应该在出发的位置，并面朝原来的方向。

        一旦你觉得找到了解决方案，点击完成 - 它会在你运行了程序之后出现。
      Practice Create Performance Task_2018: |-
        # 创建表演任务

        是完成表演任务的时候了。 在这里完成。
      Practice Create Performance Task_2019: |-
        # 创建表演任务

        是完成表演任务的时候了。 在这里完成。
      Predict Loop I: |-
        # 预测\\r

        \\r
        此循环将打印什么结果？
      Predict Loop I_2018: |-
        # 预测\\r

        \\r
        此循环将打印什么结果？
      Predict Loop I_2019: |-
        # 预测\\r

        \\r
        此循环将打印什么结果？
      'Project: Finish Color Sleuth': |-
        # 挑战 - 找个方法让游戏结束并实现它。

        现在你的挑战是加上一些代码来完成自己的程序。用你已经学到的东西，以及阿历克斯和迈克尔的讨论来获得灵感。

        **这是最后一个编程关卡**

        -   按照自己的想法来改动或添加程序
        -   完成后，点击**提交**

        **目标** 添加代码来让游戏能够结束，比如：

        -   切换到`gameOver_screen`（游戏结束\_屏幕）
        -   \*
            通过显示`player1Win_label`（玩家1胜利_标签）或\`player2Win_label\`（玩家2胜利\_标签）来显示哪个玩家赢得了游戏。

            *我们为这个项目提供了`gameOver_screen`（ 游戏结束\_屏幕）模板 - 切换到设计模式来看看那里有什么。*

            **建议**
        -   \*
            如果你还是没有主意，试着实现"first
            to 10"（谁先到10分） - 第一个到达10分的玩家赢得游戏。
        -   你应该通过讨论来添加一个类似于`checkGameOver()`（检查游戏是否结束）的函数，并从`checkCorrect`（检查正确）函数里调用它。

        <details><summary><strong>超越：
        可选的额外选项 [点击展开]</strong></summary>

        <p>
        这里有一大堆方法来添加或扩展到项目里：

        </p>
        <ul>

        <li>在最后一个屏幕添加"重新开始"按钮，让它重置所有东西，并返回到游戏的开始屏幕。
        </li>
        <li>添加一个欢迎屏幕来解释规则，并且邀请玩家开始游戏（让它成为默认屏幕）
        </li>
        <li>让游戏更难一点：</li>
        <uL>
        <li>让颜色更相似一些（我们给每个RGB值增加了20，试试15或者10）。</li>
        <li>或者制作一个难度变量 - 你可以生成一个在5到20间的随机数，加到RGB值上。</li>
        <li>或者让过程更复杂 - 用一个变量来跟踪加到每个RGB值上的数，并随着时间慢慢减少它。</li>
        \t<li>或者在欢迎屏幕上问问玩家想要玩简单、正常、或困难的哪个难度。</li>
        </uL>

        <li>添加计时 - 在文档中寻找setTimeout（设置超时时间）函数，它会在过了一段时间后调用函数。（注意：你需要将项目在自由应用实验室中合成后，才能这样做 ）。
        </li>
        <li>你也可以在代码开始和结束时用
        <code>getTime()</code>函数来计算游戏用了多长时间，然后通过这个时间来判断分数。</li>
        </ul>
        </details>
      'Project: Finish Color Sleuth_2018': |-
        # 挑战 - 找个方法让游戏结束并实现它。

        现在你的挑战是加上一些代码来完成自己的程序。用你已经学到的东西，以及阿历克斯和迈克尔的讨论来获得灵感。

        **这是最后一个编程关卡**

        -   按照自己的想法来改动或添加程序
        -   完成后，点击**提交**

        **目标** 添加代码来让游戏能够结束，比如：

        -   切换到`gameOver_screen`（游戏结束\_屏幕）
        -   \*
            通过显示`player1Win_label`（玩家1胜利_标签）或\`player2Win_label\`（玩家2胜利\_标签）来显示哪个玩家赢得了游戏。

            *我们为这个项目提供了`gameOver_screen`（ 游戏结束\_屏幕）模板 - 切换到设计模式来看看那里有什么。*

            **建议**
        -   \*
            如果你还是没有主意，试着实现"first
            to 10"（谁先到10分） - 第一个到达10分的玩家赢得游戏。
        -   你应该通过讨论来添加一个类似于`checkGameOver()`（检查游戏是否结束）的函数，并从`checkCorrect`（检查正确）函数里调用它。

        <details><summary><strong>超越：
        可选的额外选项 [点击展开]</strong></summary>

        <p>
        这里有一大堆方法来添加或扩展到项目里：

        </p>
        <ul>

        <li>在最后一个屏幕添加"重新开始"按钮，让它重置所有东西，并返回到游戏的开始屏幕。
        </li>
        <li>添加一个欢迎屏幕来解释规则，并且邀请玩家开始游戏（让它成为默认屏幕）
        </li>
        <li>让游戏更难一点：</li>
        <uL>
        <li>让颜色更相似一些（我们给每个RGB值增加了20，试试15或者10）。</li>
        <li>或者制作一个难度变量 - 你可以生成一个在5到20间的随机数，加到RGB值上。</li>
        <li>或者让过程更复杂 - 用一个变量来跟踪加到每个RGB值上的数，并随着时间慢慢减少它。</li>
        \t<li>或者在欢迎屏幕上问问玩家想要玩简单、正常、或困难的哪个难度。</li>
        </uL>

        <li>添加计时 - 在文档中寻找setTimeout（设置超时时间）函数，它会在过了一段时间后调用函数。（注意：你需要将项目在自由应用实验室中合成后，才能这样做 ）。
        </li>
        <li>你也可以在代码开始和结束时用
        <code>getTime()</code>函数来计算游戏用了多长时间，然后通过这个时间来判断分数。</li>
        </ul>
        </details>
      'Project: Finish Color Sleuth_2019': |-
        # 挑战 - 找个方法让游戏结束并实现它。

        现在你的挑战是加上一些代码来完成自己的程序。用你已经学到的东西，以及阿历克斯和迈克尔的讨论来获得灵感。

        **这是最后一个编程关卡**

        -   按照自己的想法来改动或添加程序
        -   完成后，点击**提交**

        **目标** 添加代码来让游戏能够结束，比如：

        -   切换到`gameOver_screen`（游戏结束\_屏幕）
        -   \*
            通过显示`player1Win_label`（玩家1胜利_标签）或\`player2Win_label\`（玩家2胜利\_标签）来显示哪个玩家赢得了游戏。

            *我们为这个项目提供了`gameOver_screen`（ 游戏结束\_屏幕）模板 - 切换到设计模式来看看那里有什么。*

            **建议**
        -   \*
            如果你还是没有主意，试着实现"first
            to 10"（谁先到10分） - 第一个到达10分的玩家赢得游戏。
        -   你应该通过讨论来添加一个类似于`checkGameOver()`（检查游戏是否结束）的函数，并从`checkCorrect`（检查正确）函数里调用它。

        <details><summary><strong>超越：
        可选的额外选项 [点击展开]</strong></summary>

        <p>
        这里有一大堆方法来添加或扩展到项目里：

        </p>
        <ul>

        <li>在最后一个屏幕添加"重新开始"按钮，让它重置所有东西，并返回到游戏的开始屏幕。
        </li>
        <li>添加一个欢迎屏幕来解释规则，并且邀请玩家开始游戏（让它成为默认屏幕）
        </li>
        <li>让游戏更难一点：</li>
        <uL>
        <li>让颜色更相似一些（我们给每个RGB值增加了20，试试15或者10）。</li>
        <li>或者制作一个难度变量 - 你可以生成一个在5到20间的随机数，加到RGB值上。</li>
        <li>或者让过程更复杂 - 用一个变量来跟踪加到每个RGB值上的数，并随着时间慢慢减少它。</li>
        \t<li>或者在欢迎屏幕上问问玩家想要玩简单、正常、或困难的哪个难度。</li>
        </uL>

        <li>添加计时 - 在文档中寻找setTimeout（设置超时时间）函数，它会在过了一段时间后调用函数。（注意：你需要将项目在自由应用实验室中合成后，才能这样做 ）。
        </li>
        <li>你也可以在代码开始和结束时用
        <code>getTime()</code>函数来计算游戏用了多长时间，然后通过这个时间来判断分数。</li>
        </ul>
        </details>
      Repeat Predict Contained: |-
        # 预测\\r

        \\r
        以下的计数循环会运行多少次？
      Revisiting the Counter Pattern: |-
        今天，你会学习如何创建和使用**函数**。\\r
        \\r
        创建函数会让你制作自己的模块！制作函数有两部分：\\r
        \\r
        制作一个有名字的新模块，将你想要运行的代码都放在它里面。\\r
        \-函数的xml定义- \\r
        \\r
        单个绿色的模块，是你使用或调用创建的函数。\\r
        \-函数调用的xml-\\r
        \\r
        准备熟悉函数，学习如何编辑它们，并创建自己的函数！
      Revisiting the Counter Pattern_2018: |-
        今天，你会学习如何创建和使用**函数**。\\r
        \\r
        创建函数会让你制作自己的模块！制作函数有两部分：\\r
        \\r
        制作一个有名字的新模块，将你想要运行的代码都放在它里面。\\r
        \-函数的xml定义- \\r
        \\r
        单个绿色的模块，是你使用或调用创建的函数。\\r
        \-函数调用的xml-\\r
        \\r
        准备熟悉函数，学习如何编辑它们，并创建自己的函数！
      Revisiting the Counter Pattern_2019: |-
        今天，你会学习如何创建和使用**函数**。\\r
        \\r
        创建函数会让你制作自己的模块！制作函数有两部分：\\r
        \\r
        制作一个有名字的新模块，将你想要运行的代码都放在它里面。\\r
        \-函数的xml定义- \\r
        \\r
        单个绿色的模块，是你使用或调用创建的函数。\\r
        \-函数调用的xml-\\r
        \\r
        准备熟悉函数，学习如何编辑它们，并创建自己的函数！
      Robot Doodle: "**项目想法：** 创建一个真实世界中熟悉的事物的图片。这需要坚持和规划！"
      Robot Doodle_2018: "**项目想法：** 创建一个真实世界中熟悉的事物的图片。这需要坚持和规划！"
      Robot Doodle_2019: "**项目想法：** 创建一个真实世界中熟悉的事物的图片。这需要坚持和规划！"
      Robot Drawing: "**项目想法：** 创建一个真实世界中熟悉的事物的图片。这需要坚持和规划！"
      Robot: "**项目想法：** 创建一个真实世界中熟悉的事物的图片。这需要坚持和规划！"
      Room Escape Workshop - 1: "# 设置房间\\\\r\n\n\\\\r\n<img\nsrc=\"https://images.code.org/9d103d74f7c2da05aeccd5fc317e6ab6-image-1490368234432.08.44\nAM.png\" style=\"width:200px; float:right\">\\\\r\n\\\\r\n为了制作你的密室逃脱游戏，你需要设置房间使用户能够在里面四处探索。有些工作已经为你做好。你只需要决定房间的哪些不同的部件跟你选择的图片相像！\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n\n-   这一关从设计模式开始\\\\r\n-   为每一个空白的（灰色长方形）图像元素增加一个适当的图像。比如，你将需要为标记为门的图像元素增加一个门的图像。\\\\r\n-   右边是显示你的房间将是什么样子一个例子。"
      Room Escape Workshop - 10 - 2: |-
        # 开门\\r

        \\r
        <img
        src="https://images.code.org/57407cb51f50e08ecddb8ce7d2d89157-image-1491065952915.58.58
        PM.png" style="width:200px;float:right">\\r
        \\r
        如果他们有钥匙，就开门！\\r
        \\r

        # 这样做\\r

        \\r

        -   为敲门添加一个`onEvent()`（当事件发生时）模块。\\r
        -   在`onEvent()`（当事件发生时）中添加一个`如果`来检查是否要是移动到了屏幕的底部。\\r
            \\t\* 添加一个如果语句\\r
        -   \*
            在如果语句中添加`==`\\r
        -   在`==`的一边，放上在点击时，钥匙应该到达的x位置。\\r
        -   在另一边添加`getXPosition()`（获得x位置）模块 - ID（标识）应该是你的钥匙的ID！\\r
        -   如果钥匙打开了门，在`如果`语句里用`显示元素`来显示隐藏的门外的图片。
      Room Escape Workshop - 10: |-
        # 开门\\r

        \\r
        <img src="https://images.code.org/3651f7d5306bdcfd2d9a3d9bb842626e-image-1491066778787.12.36
        PM.png" style="width:200px;float:right">\\r
        \\r
        快要完成了！让我们将门准备好，让它可以被打开。\\r
        \\r

        # 这样做\\r

        \\r

        -   添加一张门外的图片。\\r
        -   给它设置一个好的ID（标识），可以是_outside_（外面）\\r
        -   隐藏门外的图片（它应该在门被打开的时候显示）。
      Room Escape Workshop - 11: |-
        # 获得钥匙\\r

        \\r
        为了确保用户在试图打开门前获得钥匙，我们需要一个变量来跟踪是否他们已经得到了钥匙。\\r
        \\r

        # 这样做\\r

        \\r
        \*
        在程序的最上面添加一个叫做gotKey（是否获得了钥匙）的变量，并在这个变量的右边设置为false（假）。\\r
        <img src="https://images.code.org/58e88b028ee9190b0288c7fcbabe389f-image-1490371419468.02.50
        PM.png" style="width:300px">\\r
        \\r

        -   在保险柜中钥匙的`onEvent`事件中，设置gotKey变量为true（真）来表示他们已经拿到了钥匙。\\r
            \\r
            <img
            src="https://images.code.org/def02108cabc85383129c5bb29b3af4f-image-1490371463514.04.10
            PM.png" style="width:400px">\\r
            \\r
        -   你会在下一关里用到它来设置门。
      Room Escape Workshop - 2: |-
        # 连接房间\\r

        \\r
        让我们实现它，这样用户就能在两间屋之间走了。每间屋都有一个方向按钮，能被用来在房间之间移动。为了让按钮能够响应点击，你需要为每个按钮添加一个事件处理函数。\\r
        \\r

        # 这样做\\r

        \\r

        -   为每个方向按钮添加一个`onEvent`模块\\r
        -   在每个`onEvent`模块中，用一个`setScreen`命令来表达要切换到哪个屏幕。
      Room Escape Workshop - 3-2: |-
        # 移动图片\\r

        \\r
        现在让用户可以通过点击图片找到密码。当他们点击图片时，图片应该向上移动。\\r
        \\r

        # 这样做\\r

        \\r
        \*
        拖出`onEvent()`（当事件发生时）模块\\r

        -   把`onEvent`模块里的标识点变成图片【也就是图片元素的ID（标识）】\\r
        -   在`onEvent`模块里增加`setPosition`（设置位置）模块，`setPosition`的输入为：\\r
            \\t\* ID（标识）：图片\\r
            \*
            下面两个输入是x和y的值 - 测试一下数值从而使图片像右边的图片那样运动。
      Room Escape Workshop - 3: |-
        # 隐藏代码\\r

        \\r
        <img
        src="https://images.code.org/6fa80456a39d9b6417545f5f66ec83a5-image-1490368827625.png"
        style="width:400px;float:right">\\r
        \\r

        1.  在设计模式里点击写着"CODE"（代码）的白色方块。让它显示你选择的密码\\r
        2.  2.
            往下拖动图片以覆盖密码\\r
            \\r
            ![](<>)
      Room Escape Workshop - 4: |-
        # 设置保险箱\\r

        \\r
        你已经生成了密码并使用户能够走到第二个房间。让我们给用户在点击保险箱时输入密码的能力。\\r
        \\r

        # 这样做\\r

        \\r

        -   增加一个`onEvent()`（当事件发生时）模块\\r
            \\t\* 为保险箱挑选一个ID\\r
        -   在`onEvent`模块里增加一个<img src="https://images.code.org/c0964a8543728d018d5d9583319e22b9-image-1491060910093.34.36
            AM.png" style="width:300px">模块\\r
            \\t\* 在左边把_x_(x变量的名称)改变成_猜测_ \\r
            -   在右边改变
                _"输入一个数值"_ (询问用户的提示) 为 _"输入密码"_
      Room Escape Workshop - 5: |-
        # 检查密码\\r

        \\r
        现在你已经从用户那里得到了一个密码的猜测，你需要检查它是否是正确的！我们可以用一个`如果`语句来做到。如果语句检查是否满足了一个条件是真。在这里，它会检查用户输入的数字是否和密码相等。\\r
        \\r

        # 这样做\\r

        \\r
        \*
        在保险柜的`onEvent`模块里加上一个提示命令<img
        src="https://images.code.org/5e9a434b1ad6b8f010db928b668127a5-image-1491061131564.37.01
        AM.png" style="width:100px">语句。\\r

        -   拖出<img src="https://images.code.org/f0680979704c30975550211b03ed222e-image-1491061134985.37.08
            AM.png" style="width:100px">模块来创建一个条件语句来检查是否两个东西相等。\\r
        -   \*
            在<img src="https://images.code.org/f0680979704c30975550211b03ed222e-image-1491061134985.37.08
            AM.png" style="width:100px">的一边放上_猜测_（ 用来存储用户猜测的变量的名字）\\r
        -   在另一边放上密码的值。
      Room Escape Workshop - 6: |-
        # 随机代码\\r

        \\r
        <img src="https://images.code.org/dfa3a28d30b7a1d2879e3fc95b8f42dc-image-1489603534640.44.51
        PM.png" style="width:200px;float:right">\\r
        \\r
        我们的秘密房间里有一个有密码锁的保险箱。这个密码锁藏在一个房间1里叫做"CODE”的图片的后面。为了让这个更有趣，我们会生成一个随机的4为数字来作为密码。\\r
        \\r

        # 这样做\\r

        \\r
        \*
        添加一个变量来存放密码。\\r
        \\t\* 拖出这个变量模块\\r
            \* 在var的后面为你的变量选个名字，比如safeCode（安全码）\\r

        -   在变量的右边将你的密码设置为一个随机数字\\r
            \\t\* 将随机数字模块添加到变量的右边\\r
            -   随机数字需要两个输入来设置随机生成的范围\\r
            -   你需要让它生成1000到9999之间的数字\\r
        -   设置房间1里的密码的文本\\r
            \\t\* 用setText模块来设置secretCode元素的文本
      Room Escape Workshop - 7: |-
        # 显示保险柜内部\\r

        \\r
        <img
        src="https://images.code.org/71e74305187a46d0badeb29a9a69ac56-image-1490371014841.55.37
        AM.png" style="width:200px;float:right">\\r
        \\r
        一旦你的程序能够检查密码了，你需要能"打开"保险箱，并显示里面的钥匙。首先，你需要在设计模式创建这些元素。\\r
        \\r

        # 这样做\\r

        \\r

        -   进入设计模式，并添加一个灰色的正方形图片\\r
            \\t\*
            点击并拖放一个图像元素<img src="https://images.code.org/8f4bc108415d83e5c528c9204502efc2-image-1491059181186.06.13
            AM.png" style="width:75px">到屏幕上\\r
            -   给它一个好的ID（标识）
                (比如_insideSafe_（保险箱内部）)\\r
            -   找到一个灰色的正方形来作为这张图片\\r
            -   \*
                这会作为保险箱的内部，当保险箱前面显示时，它会被隐藏起来。\\r
        -   添加一个钥匙图片\\r
            \\t\* 点击并拖出一个图像元素<img
            src="https://images.code.org/8f4bc108415d83e5c528c9204502efc2-image-1491059181186.06.13
            AM.png" style="width:75px">到屏幕上\\r
            -   给它一个好的ID（标识）
                (比如_key_（钥匙）)\\r
            -   找到并使用一张钥匙的图片\\r
        -   点击设计模式里灰色正方形和钥匙的的hidden（隐藏）属性。当他们隐藏起来时，看起来会像下面的设计模式。\\r
            \\r
            <img src="https://images.code.org/2c2c7e9996515f2b30d416b558fd1360-image-1489605526794.17.55
            PM.png" style="width:200px">
      Room Escape Workshop - 8: |-
        # 显示保险箱的内部\\r

        \\r
        当用户输入了正确的密码时，设置密码来显示钥匙和灰色正方形。\\r
        \\r

        # 这样做\\r

        \\r

        -   在创建的保险箱的`onEvent`命令里的`if`语句中增加：\\r
            -   `showElement`（显示元素）模块来显示灰色的正方形\\r
            -   `showElement` 模块来显示钥匙
      Room Escape Workshop - 9-2: |-
        # 点击钥匙\\r

        \\r
        <img src="https://images.code.org/1a736d2774860bebc5072b8ae8b38f34-image-1491066638078.10.00
        PM.png" style="width:170px;float:right">\\r
        \\r
        一旦用户点击了钥匙，要显示为他们拿到了它。你可以通过把钥匙移到房间下面的角落来做到这一点。\\r
        \\r

        # 这样做\\r

        \\r

        -   添加一个`onEvent`（当事件发生时）的模块用于用户点单击该键时触发。\\r
        -   在 `onEvent`（当事件发生时）模块内: \\r
            \\t\* 使用 `setPosition`（设置位置） 将钥匙移到屏幕的下角。
      Room Escape Workshop - 9: |-
        # 点击钥匙\\r

        \\r
        <img src="https://images.code.org/349cff555af4337118791d84acf1a5b2-image-1490371172781.59.08
        AM.png" style="width:200px;float:right">\\r
        \\r
        一旦用户点击了钥匙，要显示为他们拿到了它。你可以通过把钥匙移到房间下面的角落来做到这一点。\\r
        \\r

        # 这样做\\r

        \\r

        -   在房间的右下角添加一个钥匙图像\\r
        -   在设计模式下将钥匙设置为隐藏
      Room Escape Workshop - free play: |-
        # 你做到了！\\r

        \\r
        你制作了一个密室逃脱游戏！现在是时候定制它了。 \\r
        \\r
        考虑一下：\\r
        \\r
        \*
        添加更多房间\\r

        -   添加更多用户可以互动的东西\\r
        -   添加更多的房间款式
      Ryan App Loop Function Test: |-
        # 用函数切换颜色\\r

        \\r
        我们可以为所要设置的LED灯的不同颜色编写计数循环，但这基本上是很多相同的代码。这是个使用 _带参数的函数_的好地方！
        你已经使用过带参数的函数，但现在你要从头创建一个。\\r
        \\r

        # 这样做\\r

        \\r
        创建一个名为`setLedsColor`（设LED 灯颜色） 的函数, 它采用参数`color`（颜色）, 并用它来更改 所有LED 灯的颜色。\\r
        \\r
        \*在程序的底部，拖出一个带参数的函数模块
        ![expandable](https://images.code.org/bd6ec3d9a651cf760a7dc8e1949658c0-image-1512761901850.png)\\r

        -   把`myFunction`（我的函数）的名字改为`setLedsColor`（设LED 灯颜色） \\r
        -   把参数名字从`n`改为`color`（颜色）\\r
        -   在函数内，添加一个_计数循环_一直重复直到到达`colorLeds`（彩色LED灯）的最后\\r
        -   在_计数循环_内，把当前LED 灯颜色设置为参数`color`（颜色）（比如`colorLeds[i].color(color)`\\r
            \\r
            我们会在下一关卡添加使用此函数的事件处理函数，但现在，你可以用程序测试你的函数，并在调试控制台输入：`setLedsColor("blue")`
      Ryan_Demo: |-
        让这只驼鹿舞动起来吧！

        将<xml><block type="Dancelab_changeMoveLR"><title name="SPRITE">new\_dancer</title><title name="MOVE" config="MOVES.Dab, MOVES.Drop, MOVES.Floss">牙线舞</title><title name="DIR">-1</title></block></xml>模块拖放到工作区。将其连接到下面的 <xml><block type="Dancelab_atTimestamp"><title name="TIMESTAMP">4</title><title name="UNIT">"小节"</title></block></xml>模块。您的舞者应在第四个小节后开始新的动作。

        **小节**用于音乐计时。本教程中，一个小节长度为四个节拍。
      SG Add Subgoals practice: |-
        # 现在试着添加子目标！\\r

        \\r
        这次，我们给了你一个空的工作区和新的问题。要解决它，你需要从增加子目标**开始**，_然后_再增加代码。\\r
        \\r
        用子目标的_好处_是你能在被代码淹没或困住前，提前想好一个解决方案。一旦你解决了一个子目标，就可以开始下一个了。\\r
        \\r

        # 这样做\\r

        <img
        src="https://images.code.org/4bc7896538039f1904699eba35bcd5e3-image-1508447681081.png"
        style="float: right">\\r
        \\r
        **目标**：让乌龟画出两步（见右图）。\\r
        \\r
        理解并思考了问题后，你应该：\\r
        \\r

        1.  从将那些你认为能解决问题的**子目标拖拽到工作区开始**。\\r
        2.  **然后**开始和乌龟一起填满它。\\r
        3.  你应该不断进行**增量测试**
        4.  添加命令完成一个目标，运行代码。如果有问题，就修好它。然后再添加命令完成下一个目标。\\r
            \\r
            当你觉得完成后，点击`完成`并继续。\\r
            \\r
            **被难住了？** 这个动画显示了一个程序员添加了目标，然后再写代码。\\r
            \\r
            ![expandable](https://images.code.org/1805d750cb4e653ebf505f4a8a2c7840-image-1508447936880.gif)
      SG U3L01 Assessment1: 想想你为今天的活动设计的算法。指出两个例子说明可能有多种方法来指令你的说明并建议可以用来改善他们清晰度的方法。\\r
      SG U3L01 Assessment3: 描述编程语言和你日常生活中每天使用的语言的不同的特征，解释为什么编程语言必须以这种方式创建。\\r
      SG U3L02 Assessment: |-
        本课介绍了编程中"效率"的概念, 以及它可能在不同的时间意味着不同的事情。试想一下计算机科学_之外_的一个你听到 "效率" 这个词的例子，并将其与我们在编程里谈到的效率进行了比较。\\r
        \\r
        "效率"在哪个方面他们两者是一样的？哪些方面是不一样?
      SG U3L02 Free Response Getting Started: |-
        在本课中，我们用有限的一组指令模块（只有2个）来解决了一系列的问题。请给出至少一个理由说明学习如何使用有限的一组指令模块来解决问题以及编写解决方案是很有用的。\\r
        \\r
        在本课中，我们用”移动乌龟“和”定位乌龟“子目标来解决一系列的问题。举出至少一个理由说明把问题分割成子目标是解决问题的一种好方法。
      SG U3L02 Free Response Wrap Up: |-
        通过回答以下问题，总结一下你在第一次应用程序实验室课上的经验：\\r
        \\r
        \\r

        -   你能用这样一组有限的工具进行创新吗？\\r
        -   这项活动最让人沮丧的是什么？如果你可以添加一个额外的模块, 它会是什么以及为什么？那个模块能达成什么子目标？
      SG U3L03 - draw rect function: |-
        这是以前关卡的代码。 你知道可以编写函数来调用其他函数吗？\\r
        \\r
        将绘制矩形的代码移动到一个新的叫做`drawRectangle()（画矩形）的新函数中。程序的第一行是对`drawRectangle()`的一次调用。其余的代码应该只是函数定义，包括对 **右** 的定义。\r
        \r
        你只需要一个子目标,`//定义函数\`。\\r
        \\r
        备注:你的程序仍将执行同样的操作。 我们只是更改它的编写方式，来演示使用已经写好的函数来作为新函数的建构模块。\\r
        \\r
        ![](https://images.code.org/fd6e8b4d2218a242bae19ac9c78b5d5f-image-1447799438050.gif)
      SG U3L03 - draw step: |-
        我们将向你介绍一个流程, 它向你展示了思考关于编写函数的编程任务的好处.\\r
        \\r

        -   在接下来的3个关卡中, 我们将编写一个程序, 绘制显示在右边的图,它看起来有点像一个锯齿状的菱形形状。<img src="https://images.code.org/53679cc10ff90b6120184d93ad012797-image-1441770558200.png"
            align='right'>\\r
            \\r
        -   如果查看此图形, 你可能会认出重复的元素：这是一个4条边的图形，每个侧面都由一些曲折的台阶组成。\\r
            \\r
        -   我们将把编程分解成可用的部分, 然后将这些部分用作为制作更复杂的绘图的建构模块。\\r
            \\r
        -   首先让我们**定义**一个函数,它_只绘制这些曲折的台阶中的一条_。我们已经为你准备了你可以使用的`right()`（正确）的定义。\\r
            \\r
            # 这样做\\r
            \\r
            **定义 \*\* 并调用名为`drawStep()`（绘制台阶）的函数，它使得海龟如图所示向前和向左移动。\\r
            \\r
            \*\*注意**： 在最后，海龟应该面对它开始时相同的方向。\\r
            \\r
            \\r
            你要用到4个子目标。首先，需要**定义一个函数** (`//Define
            function`)，它会包括**移动乌龟** (`//Move turtle`)和
            **定向乌龟** (`//Orient turtle`)。最后，别忘了**调用这个函数** (`//Call function`)。如果被难住了，用子目标来规划你的解决方案。\\r
            \\r
            ![](https://images.code.org/4fa605353695afa0cd01ec01a1e2c709-image-1441772033658.gif)
      SG U3L03 Define and use turnAround: |-
        # 这样做：\\r

        **定义**一个叫做`turnAround()`（转向）的函数，它让乌龟转过身来。一旦你定义了函数，就**调用**它，确保它如你所期望地工作，然后如下所示向前移动乌龟。\\r
        \\r
        ![](https://images.code.org/4c31307ec14cc6dfd65589f2a813120e-image-1447884881189.gif)\\r
        \\r
        **记住**通常, 你在函数定义_上_调用代码行的函数

        -   这可能会让你觉得在反着工作，因为得你首先编写代码来定义函数，_然后_再添加一行来调用它。这是视频中的`moveTwice`（移动两次）的示例。你应该对转身做一些类似的操作：\\r
            \\r
            ![](https://images.code.org/3faf16575757ffae616dffd761085ab5-image-1467818996127.gif)\\r
            \\r
            你会使用四个子目标来解决此问题。首先，你将`//Define
            function`（定义函数）, 其中将包括`//乌龟定向`。正如你将开始看到的一样，有时候甚至子目标也可以被分解成子目标。在开始创建更复杂的函数时, 这将非常有用。\\r
            \\r
            然后你将`//Call
            function`（调用函数）并`//Move turtle`（移动乌龟）。\\r
            \\r
            别忘了为函数命名。
      SG U3L03 Draw a T using turnAround: |-
        # 这样做:\\r

        多练习**调用**函数。使用`turnAround()`（转身） 和你的老朋友`moveForward()`（向前移动） 函数创建一个如下所示，位于海龟第一个位置中间的加号标志。甚至虽然你刚刚写了这个函数, 我们已经为你**定义了** `turnAround()`函数。
        \\r
        \\r
        记住，将在函数定义的_上面_写调用函数的代码。函数定义写在函数调用之后，来支持**抽象 \*\*。如果你不需要知道函数里面是如何工作的，就不必去看它，可以直接调用它。\\r
        \\r
        \*备注: 乌龟应该在它开始的地方结束，这也是如下所示在加号的中间。加号的四个部分都是一个`moveForward()`（向前移动）长。\\r
        \\r
        \!\[](\<<https://images.code.org/9d6c2d7d69c2f1c68c5b273bdbae65c7-image-1441296690812.11.14>
        AM.png>)\\r
        \\r
        \\r
        你将使用三个子目标来解决这个问题：`//call function`（调用函数）,
        `//orient turtle`（乌龟定向）, 和`//move turtle`（移动乌龟）。函数定义已完成。我们已经为你把前几步的子目标放进去了。用子目标模块 (在**目标\*\* 选项卡中) 规划其余代码, 以获得最有效的路径, 然后再用模块来填充它。
      SG U3L03 Free Response Wrap Up: 用你自己的话至少说出一个原因，为什么计算机语言有函数。并用你这节课上的一个例子来说明。\\r
      SG U3L03 Three Steps: |-
        # 这样做:\\r

        <img src="https://images.code.org/5f20ab5fd8b95754e8cfc948a4b41522-image-1441772307480.png"
        align=right width=200>\\r
        我们要继续通过**定义**一个画钻石的一条边的函数，来继续绘制钻石。\\r
        如果你看见了我们要画的整个图形，你会注意到这4条边包含了调用3次`drawStep()`（画一步）函数，再加上一些额外的移动（用橙色显示）。\\r
        \\r
        现在，我们要写下画其中一条边的代码。因此……\\r
        \\r
        **定义**一个叫做`drawSide()`（画一条边）的函数，来在一行里调用3次 `drawStep()`，然后跟着一个`moveForward()` 和`right()`。\\r
        \\r
        用你新定义的`drawSide()`函数**替换**原先的调用`drawStep()`的代码。\\r
        \\r
        这幅图显示了计划的行动。\\r

        <table>\r
        <tr>\r
        <td>![](https://images.code.org/480f6787e4d2daf34d67642e25b29de6-image-1441772552026.png)
        </td>\r
        <td>![](https://images.code.org/02f52d406854d6f86535adf2f593ccc9-image-1441772709549.gif)
        </td>\r
        </tr>\r
        </table>\r
        \r
        为了通过这一关，你会用到三个子目标。
        你要**定义一个函数** (`//Define function`)，它会包括**调用**两个不同的函数(`//Call function`)，并**移动乌龟**(`//Move
        turtle`)。然后你要**调用你定义的函数**(`//Call function`)。
      SG U3L03 define turnRight and draw a rectangle: |-
        # 用向右画一个矩形\\r

        \\r
        正如你知道的，为了向右转，我们要调用`turnLeft()`（向左转）三次。我们从**定义**一个叫做`right()`（右）的函数触发。通过在这个函数定义中添加代码开始，调用它时，它会让乌龟向右转（通过调用三次向左转来实现）。\\r
        \\r
        然后在一些代码里**用**这个函数来画一个下图一样的矩形。确保乌龟在结束时面朝开始时的方向，并且也回到出发的地方。下面的矩形有两个`moveForward`（向前移动）高，1个`moveForward`宽。\\r
        \\r
        ![](https://images.code.org/fd6e8b4d2218a242bae19ac9c78b5d5f-image-1447799438050.gif)\\r
        \\r
        **注意**：
        你的程序会一直做同样的事。我们只是改变了它的写法，来说明你能在新函数里放置模块来实现。\\r
        \\r
        你会用到三个子目标来解决这个问题：`//Orient turtle`（定向乌龟）, `//Move turtle`（移动乌龟），和`//Call function`（调用函数）.
        `//Define function`（定义函数）已经为你写好了。注意，我们没有帮你填好子目标（正确的函数或画这个矩形）。如果你没法找到解决方案，在填模块之前先用子目标来计划你的方案。如果没有问题，可以随时跳过子目标。
      SG U3L03 draw diamond: |-
        # 这样做：\\r

        我们终于准备好制作自己的钻石了！**定义**一个叫做`function drawDiamond()`的函数，并多次**调用**`drawSide()`来完成这个图画。最终的解决方案应该通过**调用一次**`drawDiamond()`来触发。
        \\r
        \\r

        <table>\r
        <tr>\r
        <td><img src="https://s3.amazonaws.com/uploads.hipchat.com/65395/961892/NoxVhFlLf9HlybZ/upload.png"
        width=200></td>\r
        <td><img src="https://images.code.org/dca51c5b17a8c0778787337c3609557c-image-1441802821237.gif"
        width=200></td>\r
        </tr>\r
        </table>\r
        \r
        <hr>\r
        \r
        **注意**：\r
        \r
        最终，你会有4个函数定义：\r
        \r
        * drawDiamond()\r
        * drawSide()\r
        *
        drawStep()\r
        * right()\r
        \r
        这4个函数会像上下层级一样的起作用。最顶层的是`drawDiamond()`，它调用了`drawSide()`。而`drawSide()`又调用了`drawStep()`和`right()`。\r
        \r
        在你面对的大多数编程问题中，都不会被分解成这几关一样的碎片。你需要根据要重用多次的模式来组合出函数的层级。这是为什么在写代码前花点时间做计划会让你更高效。
        \r
        \r
        子目标能帮你做到这一点。一旦你意识到钻石能通过重复调用4次同样的函数来画出，你就可以记下一个子目标的注释，来提醒自己需要定义并调用叫做`drawSide()`的函数。然后，你能指出每条边能通过调用3次同一个函数以及其它几个步骤来画出，你就可以记下要定义并调用`drawStep()`。一旦你计划画了解决方案，就能填充模块来完成它了。
      SG U3L04 - 3 by 3 with functions: |-
        # 这样做：\\r

        \\r
        我们要重新看一下一个熟悉的问题。**用最有效的方法画一个3乘3的正方形**。唯一的不同是，这次你有能力来创建**层级的函数**来帮你设计更优美有效的方案。使用你学到的**将问题分解成层级的函数**，来改进前面的方案。想一想如何组合函数来使用尽可能少的模块。\\r
        \\r
        你需要4个子目标。想一想如何能`//Define function`（定义函数）并`//Call function`（调用函数）来画出大多数正方形，然后用`//Move turtle`和`//Orient turtle`来填充剩下的。\\r
        \\r
        \!\[](\<<https://images.code.org/121251ed82b4986848062abacdef6963-image-1441824892425.54.18>
        PM.png>)
      SG U3L04 - snowflake: |-
        # 这样做：\\r

        \\r
        你应该已经和伙伴一起将这个设计分解成了多层的函数了。现在，你有机会来为方案编程了。有几件事情要牢记：\\r
        \\r

        -   找出可重用的模式，并将他们**做成独立的函数**。\\r
        -   记住：你设计的这些函数**能调用其它函数**。这时你如何分层的抽象。\\r
        -   \*
            函数的名称应该是**描述性的，并有意义的**。\\r
        -   \*
            你的程序会从对一个函数的单词调用开始，然后它会调用一系列的函数。\\r
            \\r
            你会用到下面4个子目标：
            `//Define function` （定义函数），`//Call function`（调用函数），`//Move turtle`（移动乌龟）和`//Orient
            turtle`（定向乌龟）。如果你没找到别的方案，先用子目标来计划你的程序。\\r
            \\r
            \\r
            \!\[](\<<https://images.code.org/afed66de9dc3cdb10f627a176139c58f-image-1441822234028.09.33>
            PM.png>)
      SG U3L04 Assessment1: |-
        思考下面的图形。用自上而下的思维来设计一个解决方案。在提供的空间里，写下**只有名字**的函数列表，这些函数是你用来画出这个图形的程序。（假设长线段是乌龟移动6次那么长）。\\r
        \\r
        ![](https://images.code.org/43895f8ceccb12f72e7f5ba03152a6e6-image-1441914144956.png)\\r
      SG U3L04 Free Response Wrap Up: 在创建表演任务时，你会被要求找到程序的抽象，并解释它时如何帮助管理程序的复杂性。函数是抽象的一种形式。找一个你写的解决3乘3正方形问题的函数，并解释它是如何帮助管理程序的复杂性的。
      SG U3L06 - moveForwardwithParams: |-
        # 一个新的移动乌龟的方法\\r

        到目前为止，我们使用的`moveForward()`（向前移动）乌龟命令每次移动相同的距离（25像素）。类似的，`turnLeft()`（向左转）会每次向左转正好90度。今天我们要看看怎样让一些函数能够**接受输入**，比如一个数字，来让函数更灵活。例如，如果你愿意，可以写`moveForward(103)`来将乌龟向前移动正好103像素。\\r
        \\r

        # 这样做：\\r

        \\r
        **到屏幕的顶边有多远？**\\r
        \\r
        运行一下程序来看看新版的`moveForward()`函数。然后**只改变提供给`moveForward()`的数字**，将乌龟移动到屏幕的顶边。试验来找到乌龟位置和定边的像素距离。\\r
        \\r
        一旦你找到了，和旁边的同学比一下，看看是否是同样的，并点击**完成**来继续。\\r
        \\r
        你只需要一个子目标 - `//Move turtle`（移动乌龟） -但现在，你有更多的灵活性来确定如何完成这个子目标。\\r
        \\r
        **注意：** 也许乌龟到顶边的距离有点不同，这取决于是让乌龟刚好碰到边缘，还是完全到边缘外。
      SG U3L06 Assessment: 据说，_有参数的函数概括了更多的特定的命令，允许程序员用函数来代替重复的代码。_用turnLeft() 和turnLeft(angle) 的不同作为例子，来解释这是什么意思。\\r
      SG U3L06 Challenge 1 triangle: "# 术语：_参数_\\\\r\n\n\\\\r\n当你有了这样一个命令：`moveForward(100)`（向前移动100），我们可以说`moveForward()`命令\\*接受了一个**参数\\***。100是_给定_或_提供_给`moveForward()`的**参数**的值。因为这个值可以改变，你会经常看到像这样的给这个命令写的注释，**`moveForward(pixels)`**表明了提供给`moveForward()`的**参数**应该是你想要移动的像素的数值。\\\\r\n\\\\r\n老的`moveForward()`命令还在。事实上，它是和`moveForward(pixels)`**一样的命令**。这个\"无参数\"的`moveForward()`版本，只是简单的给了一个参数的**默认值**。我们也可以说`moveForward()`命令有一个**可选的参数**，因为你可以调用`moveForward()`或`moveForward(50)` 。在运行程序时，不会造成错误。\\\\r\n\\\\r\n\\\\r\n\n# 新命令！\\\\r\n\n\\\\r\n来看看，乌龟工具箱现在有了**参数化**版本的乌龟命令，包括`turnLeft(angle)`和`turnRight(angle)`。\\\\r\n\\\\r\n\n# \n\n这样做：\\\\r\n\\\\r\n用命令的参数化版本来画一个每条边都是100像素长的三角形。别忘了你可以通过定义和调用函数来让代码更高效\\\\r\n\\\\r\n至少，你要用`//Move turtle`（移动乌龟）和`//Orient turtle`（定向乌龟）来这样做。你能通过使用`//Define function`和`//Call function`来解决问题。\\\\r\n\\\\r\n<img src=\"https://images.code.org/0207568ff82b0571fa6757081330749d-image-1441901783815.png\"\nwidth=150>"
      SG U3L06 Challenge 2 purple square: |-
        # 这样做：\\r

        \\r
        **画正方形：** 用笔的颜色和宽度函数来画出和下面一样的，厚厚的蓝色的正方形。正方形的尺寸没有要求。\\r
        \\r
        除了通常的`//Move turtle`和`//Orient turtle` (如果你想更高效，还可以有`//Define function` 和
        `//Call function`)，你还需要新的子目标`//Set pen properties`（设置笔的属性）。\\r
        \\r
        <img src="https://images.code.org/6ed36a408e568a0410f10d017550843f-image-1441904430698.png"
        style="height: 250px">\\r
        \\r
        **记住：** 如果你在某个特定的模块那里被难住了，可以通过**鼠标悬停在**`penColor()`
        和`penWidth()`上来读一读文档，这两个函数能让你设置乌龟用来画画的笔的颜色和尺寸。\\r
        \\r
      SG U3L06 Challenge 3 fill pink: |-
        # 用点画画\\r

        \\r
        我们已经添加了一个叫做`dot()`（点）的新命令。 \\r
        \\r
        **阅读**`dot()`命令的文档。\\r
        \\r
        **做一个"雪人"**\\r
        \\r

        1.  设置笔的颜色为另一种新颜色（我们做的是粉色的）\\r
            \\t\* 注意：即使你想用默认的点的颜色 - 黑色 - 也可以在这里显式的将颜色设置为黑色。\\r
            \\r
        2.  2.
            用这个颜色来画一个很大的点，让它充满整个屏幕。\\r
            \\r
        3.  用另一个不同的颜色，在一列上画3个点，每个点都比下一个要小一点。（我们用白色的点，来让它看起来像雪人）\\r
            \\r
            你可能会想看看`penColor()`的文档，来找找其它颜色。\\r
            \\r
            ![](https://images.code.org/e63f3cf801abf22c01c475031c46ff66-image-1441992129690.gif)\\r
            \\r
            在这里有两个子目标：`//Set pen properties`（设置笔的属性）和`//Move Turtle`（移动乌龟）。因为你需要在开始时不用移动乌龟就画出两个点，你震度需要在一列里做两次`//Set pen properties`。这个问题需要做一点试验来找到点的正确尺寸，我们已经用子目标来勾画了问题的解决方案。
      SG U3L06 Challenge 4 bullseye: |-
        # 十六进制颜色\\r

        \\r
        读文档时，你可能注意到了，`penColor()`（笔颜色）接受**十六进制格式（例如，"#AC9100")**。在网站上的颜色经常会被表达为这个格式。它在图像中复制颜色时非常有用。\\r
        \\r
        **读文档：** 回顾`penColor()`的文档，并再注意一下如何用十六进制定义颜色。\\r
        \\r

        # 这样做：\\r

        **画出靶心：** 组合`penColor()`和`dot()`来画出下图的靶心。\\r
        \\r
        **_提示：_** _示例图片用了下面十六进制颜色中的三种：#00ABDC, #CC4400, #1188CC, #006699, #11CC00。
        你能想起十六进制颜色是如何起作用的，并在第一次尝试中就选出正确的颜色吗？_\\r
        \\r
        对于靶心的每个圆圈，都要完成同样的子目标：`//Set pen properties`（设置笔的属性）。\\r
        \\r
        <img src="https://images.code.org/d53ae656d6eeae3611449b65db669242-image-1441981098736.png"
        style="height: 250px">\\r
        \\r
        **记住：** 十六进制颜色必须用引号引起来，如：penColor(“#FF0099”) ，而不是：penColor(#FF0099)。
      SG U3L06 Challenge 5 overlapping circles: |-
        # 透明度

        -   红色，绿色，蓝色和透明值\\r
            \\r
            这是另一个可以设置笔的颜色的命令，叫做`penRGB(r,g,b,a)`。\\r
            \\r
        -   前3个参数表达的值（从0到255）是红，绿，蓝三个通道。\\r
        -   第4个参数`a`是"alpha"（阿尔法）的意思。颜色的"阿尔法通道"让你能够设置从0到1的**透明**级别。 因此，0.5表示50%的透明度。例如：`penRGB(113,
            102, 160, 0.5)`。\\r
            \\r
            目前为止，我们一直在让乌龟和笔的笔迹一起移动。在50年前用的原始的机器龟时代，这意味着笔尖一直在下方的纸上画。乌龟也能将笔抬起来，或者不在路径上画画。这里的`penUp()` 和`penDown()`两条命令能切换它。默认时，笔是在下方的，因此要停止画画时，要用`penUp()`。当再想画画时，就用`penDown()`。\\r
            \\r
            # 这样做：\\r
            \\r
            **读文档：**读文档来了解如何使用`penRGB()`，注意用给定**有多个值**的命令的语法。\\r
            \\r
            <img
            src="https://images.code.org/3247af8d88da11a042d0bd9a76b49f12-image-1441982501960.png"
            style="height: 250px; float: left; margin: 10px">\\r
            \\r
            \*\*画这些圆圈：
            \*\* \\r
            \\r
            用`penRGB()`，`penUp()`和`dot()`来像展示的图一样的，画两个重叠的圆圈。\\r
            \\r
            所有这些模块给了你新的方法来达成子目标`//Set pen properties`。你也可以多次使用`//Move turtle`子目标来完成这个问题。
      SG U3L06 Challenge 6 squiggles: "# 多个参数\n\n-   制作弧形\\\\r\n    \\\\r\n    很多命令都需要多于一个参数。当一个命令需要多个参数时，这些参数都用逗号来分隔，**参数的顺序也是有关系的**。\\\\r\n    \\\\r\n    两个新命令`arcLeft()` and `arcRight()`已经加到了模块画板里，它们都有两个参数。这两个模块可以用另一种方法来完成`//Move turtle`的子目标。\\\\r\n    \\\\r\n    读一下`arcLeft()`和`arcRight()`的文档。注意在文档中，你能看到参数的顺序时：第一个是角度，然后是半径。\\\\r\n    \\\\r\n    \\\\r\n    # 这样做：\\\\r\n    <img\n    src=\"https://images.code.org/320a5e54abb95b267738d5e15946b51c-image-1441985535028.png\"\n    style=\"height: 250px; float: left; margin: 10px\">\\\\r\n    \\\\r\n    **画一条弯曲的线：** \\\\r\n    \\\\r\n    用`arcLeft`和`arcRight`像你学过的函数一样，画一条**蓝色背景上的紫色的曲线**。随意用什么方法来选择颜色。\\\\r\n    \\\\r\n    \\\\r\n    \\\\r\n    提示：\\\\r\n-   \\*\n    为了精确的完成图形，你需要在调用`arcLeft()`或`arcRight()`前就要通过给乌龟转向，来`//Orient turtle`（定向乌龟）。\\\\r\n-   `arcLeft()`和`arcRight()`的参数是一样的。\\\\r\n-   颜色是\"PowderBlue\"（粉蓝）和\"Purple\"（紫色）\n-   如果你喜欢，也可以用其它颜色。\\\\r\n    \\\\r\n    这个问题的子目标已经放到工作区了，来帮助你开始。第一个`//Set pen properties`用来画背景。然后再画曲线。\n    注意，你会用新的弧形模块来完成`//Move turtle`（移动乌龟）。正如我们在应用实验室学到的功能一样，你有更多选择来完成子目标。 "
      SG U3L06 Challenge 7 smiley face: |-
        # 在屏幕上相对移动\\r

        \\r
        我们现在已经明白的乌龟的命令，都是将乌龟从**相对于当前位置和方向**来移动。如果你只想用`moveForward()` or `turnLeft()`来让乌龟移动到聘雇上一个特定的位置，你需要预先知道乌龟的位置。\\r
        \\r
        工具箱里有两个新的命令来帮助解决这个问题。`moveTo()`（移动到）会将乌龟移动到屏幕上一个基于x和y坐标的位置。`turnTo()`会将乌龟转向特定的方向。 将这两个命令结合起来，能够更容易的完成许多图像。\\r
        \\r
        像`moveForward()`一样，用`moveTo()`完成子目标`//Move turtle`。并像`turnLeft()`一样，用`turnTo()`完成子目标`//Orient turtle`。\\r
        \\r

        # 这样做：\\r

        \\r
        **读文档：** 阅读`moveTo()`和`turnTo()`的文档。特别要注意坐标系统在应用实验室中是如何安排的，这和你在数学课上看到的不一样。\\r
        \\r
        **画这个笑脸：**用这些命令来帮你画出下面的笑脸。\\r
        \\r
        \*\*提示：
        \*\* 别忘了使用`penUp()`和`penDown()`。\\r
        \\r
        在开始填充模块前，确保你用子目标规划了程序。特别是你需要用参数来试错时，用子目标规划能够帮你保持有条理。\\r
        \\r
        ![](https://images.code.org/20cab2a0b3a4fdfd53d7a1876963fa10-image-1441990625064.png)
      SG U3L06 Challenge 8 make your own: |-
        # 所有的乌龟API（应用程序接口）\\r

        \\r
        我们已经加了一些命令到工具箱里了。现在，你已经能访问应用实验室提供的每个乌龟命令了。我们已经通过探索明白了这些函数，你可以组合这些命令来创建更复杂的功能了。但在所有代码的最底层，只能用应用实验室提供的这组命令。\\r
        \\r
        <img src="https://images.code.org/7648c5293d04a57e4f715b5c08899ff9-image-1441996324573.png"
        style="height: 250px; float: left; margin: 10px">\\r
        \\r
        你写的代码总是基于用的语言所提供的命令。当有几个命令提供一个逻辑块时，比如一组乌龟命令，我们会将它们集合起来作为一个**函数库**来提供。一个语言提供的所有命令的集合，被叫做**application program interface**（应用程序接口），或者简称为**API**。\\r
        \\r
        当你获得更多经验后，你就会对你所用的语言的API更熟悉。但你会经常回来看**API文档**，来提醒你语言提供了什么样的功能。\\r
        \\r
        祝贺你，你真的走过了满满长路，成为了一个乌龟艺术家！\\r
        \\r

        # 这样做：\\r

        \\r
        **画你喜欢的东西！**  唯一的要求是：\\r
        \\r

        -   用至少三种颜色\\r
        -   使用moveTo\\r
            \\r
            浏览任何你看见的新命令的文档，用你的艺术家的技能和**API文档**的知识，来**画你自己想画的任何东西**。别忘了用子目标标签来做计划。\\r
            \\r
            如果有疑惑：试着从头创建这里显示的"我 [heart] 计算机科学"。
      SG U3L07 - allSeaGrass: |-
        # 添加海草\\r

        <img src="https://images.code.org/a67f893ea9187b253ec4f6abcb16b7cf-image-1443048301130.30.42
        PM.png" style="width: 200px; float: right">\\r
        新版本的`drawSeagrass`（画海草）现在用随机高度画出了单条海草。现在让我们用循环在`drawAllSeagrass`（画所有的还早）里用它填满整个海底。\\r
        \\r

        # 这样做：\\r

        \\r
        \*
        **添加一个`计数循环`**到`drawAllSeagrass`里，用更新后的`drawSeagrass`函数，来画大约**50条海草**。
      SG U3L07 - createTriangleParam: |-
        # 定义有参数的函数\\r

        \\r
        这次你需要写自己的有参数的函数来完成一幅图。两个`drawTriangle()`（画三角形）函数的调用已经放在程序的最上面了，但是函数本身还需要被定义。这个程序应该画这个：\\r
        \\r
        \!\[](\<<https://images.code.org/4a96eff03ba79b881b98137048140953-image-1442523578705.59.20>
        PM.png>)\\r
        \\r

        # 这样做：\\r

        **完成**`drawTriangle(sideLength)`的函数定义。注意，你已经被给定了一个**有描述性，并有意义的参数名字**, `sideLength`（边长），但你如果愿意的话，也可以改变它。\\r
        \\r
        **提示：**
        你应该在`drawTriangle()`的定义中将笔抬起和放下

        -   这能保证你调用drawTriangle时，肯定能实际画上。在函数的最后将笔抬起时很有用的，因为任何代码都不希望drawTriangle有任何副作用来把笔放下。\\r
            \\r
            提示一下，参考`drawSquare(size)`作为如何在函数里使用参数的正确示例。\\r
            \\r
            ![](https://images.code.org/ead2720df19b117cae753c4397dd832d-image-1442868072299.png)\\r
            \\r
            我们以前用子目标`//Define function`时，我们只给函数一个名字，然后将它用模块填满。在这个问题的子目标`//Define function`中包括给函数一个名字，定义参数，并用模块填满它。在这一关中，我们已经为你做了前两步，但你会在接下来的关卡中做所有的事情。\\r
            \\r
      SG U3L07 - fish: "# 增加鱼\\\\r\n\n\\\\r\n你要写的下一个高层函数是`drawAllFish`（画所有鱼）。这里已经有一个有参数的`drawFish`（画鱼）函数提供给你了。\\\\r\n\\\\r \n\n# 这样做：\\\\r\n\n\\\\r\n\n-   **阅读** `drawFish`函数，来直到它是如何工作的，以及接收哪些**参数**。\\\\r\n    \\\\r \\* **增加一个循环**来`drawAllFish`。\\\\r\n    \\\\r \\* **把这些函数里已有的命令放入你的循环。** 这样做你的代码将会在图片**顶部的360个像素**周围**随机移动乌龟**，并且用`drawFish`以**5到20**之间随机的大小画**15条鱼** 。\\\\r\n    \\\\r \\*一旦你的循环可以工作，就试着用随机的`red`、`green`、 `blue`参数调用`drawFish`来得到不同颜色的鱼。\\\\r\n    \\\\r\n    ![](<https://images.code.org/cbbb8e02c14cbc2d199ede4531090513-image-1443046439253.12.35 PM.png>)"
      SG U3L07 - introSquare: "# 开始学习循环\n\n一个**循环**是程序中一段重复的或者\"循环的\"代码。你要用`计数循环`模块创建循环。\n\n我们开始用一个类似于你在视频中看到的程序做实验。\n\n# \n\n这样做：\n\n-   **拖**出一个`计数循环`模块。这将实现子目标 `//Write a loop`（写一个循环）。跟子目标 `//Define function`（定义函数）很相似，你需要填写这个循环，包括更多的子目标，比如`//Move turtle`（移动乌龟）\n    和`//Orient turtle`（面向乌龟）\n\n-   **在循环内部：**\n    \\\\t\\* **增加**一个`moveForward()`（向前移动）的调用。\n    -   **增加**一个 `turnLeft()`（向左转）的调用。（提示：先试着转动137度。以后可以更改。）\n\n![](https://images.code.org/4da4a0c8a10a3c9637df96507fece183-image-1443038466204.gif)\n\n-   **运行**这个程序看循环如何运作。\n-   **实验：**\n-   **改变**运行循环的次数。\n-   **增加**运行速度看可以运行多快。\n-   循环运行**多少次**你才看不出图像的区别？\n\n如果你认为已经掌握了`for`循环：设置重复次数，运行程序，设置运行速度，那么请**继续**。"
      SG U3L07 - loopsWithRandom: |-
        # 使用多重循环\\r

        \\r
        有些复杂的任务不容易用一个循环解决。你需要用**一个接一个的循环**，每一个结局一部分问题。
        \\r
        \\r

        # 这样做：\\r

        \\r
        增加一个循环来用半透明的白点覆盖屏幕直到原来的点都被"擦掉"。\\r
        \\r
        <img src="https://images.code.org/329912b3c61cc62acbd36035ff4b823a-image-1443109101866.gif"
        style="float: right; width: 100px">\\r

        -   **拖动**第二个循环到你的代码里。这个将在第一个之后运行。\\r
        -   **增加**命令来在随机的位置画点。这些点是白色的，不透明度设置为0.5.\\r
        -   **增加重复次数**直到有颜色的点完全被擦除。需要多少次？\\r
            \\r
            提示：你可以复制／粘贴原来的循环，只需要改变点的颜色和重复的次数。
      SG U3L07 - randomDots1: |-
        # 用随机值循环\\r

        \\r
        <img
        src="https://images.code.org/520e45a90988b04bb0ff3baa184f080a-image-1443108426597.png"
        style="width: 100px; float: right;">\\r
        \\r
        如果你在循环里给乌龟的行为增加一些随性，每次程序运行将会稍微不同从而增加一些很酷的效果。\\r
        \\r
        你将会看到一个乌龟在每次循环中**移动到随机位置**并**画一些随机大小的点**并且这些点还有**随机颜色**的程序。我们已经通过设定alpha（透明度）值到0.5制作了半透明的点（50%透明度）。\\r
        \\r

        # 这样做：\\r

        \\r
        **搞明白需要多少次**
        （循环运行的次数）你把整个屏幕用点覆盖，直到盖住整个背景。每次实验需要的次数将稍微不同。\\r
        \\r
        与其他人的**比较你的发现**，看看结果有多大差异。然后**继续**。
      SG U3L07 - randomSquare: |-
        # 练习循环 - 第2部分\\r

        \\r
        让我们看看视频中第二个例子。\\r
        \\r
        用一个`计数循环`来调用你写的函数。我们已经为你提供了`drawSquare()`函数的代码。\\r
        \\r
        **拖出**一个`计数循环`。\\r
        \\r
        **在循环内**添加一个`drawSquare()`的调用，和一个`turnRight()`的调用。\\r
        \\r
        **运行程序**来看看会发生什么。\\r
        \\r

        # 这样做：\\r

        改变虚幻的迭代次数，来画出更多的正方形。试着创建下面显示的图（或其它类似的）。提示：下面的图里有72个正方形。\\r
        \\r
        ![](https://images.code.org/e4d3f180b2f1e421a96d40ecacce029a-image-1443104869913.gif)\\r
        \\r
        一旦你玩够了，懂得了在循环中调用函数的方法，然后**继续**。\\r
        \\r
        为了解决这个问题，你需要完成子目标`//Write a loop`（写一个循环），并在循环中，你要用`//Call function`和`//Orient turtle`。
      SG U3L07 - seaStar: |-
        # 增加海星\\r

        \\r
        通过编写`drawAllSeaStars`（画所有海星），我们已经能在图片里画海星了。会议我们已经写过的循环，来画出更多复杂的海星。\\r
        \\r

        # 这样做：\\r

        \\r

        -   **阅读**`drawSeaStar`函数，来明白它的原理，接受什么样的**参数**。\\r
            \\r
        -   **第一：修改** `drawSeaStar`函数使用`计数循环`\\r
            \\r
            \\t\* `drawSeaStar`有一部分很长的代码是在重复单个命令。\\r
            -   找到这个规律，并"用循环来"包起来，这样重复的代码就能通过循环完成了，而不是很多行函数调用了。\\r
                \\r
        -   **第二：增加循环**到`drawAllSeaStars`.\\r
            \\r
            \\t\* **将函数里的命令放到循环里。**这样，你的代码会在图像**底部的像素（y值在360到450之间）**之间**随机移动乌龟**。\\r
            \\r
        -   \*
            用`drawSeaStar`来**画5个海星**，它们的尺寸在随机的**10到30**之间。\\r
            \\r
            \!\[](\<<https://images.code.org/1aadf83bcecaf5ca6c505e46d43e5f45-image-1443046811335.20.04>
            PM.png>)
      SG U3L07 - sunBeams: "# 添加阳光\\\\r\n\n<img src=\"https://images.code.org/9e08dae8486f66422d492b8d8a6777eb-image-1443048962131.55.54\nPM.png\" style=\"width: 200px; float: right\">\\\\r\n最后，我们要用`drawAllSunbeams`加一些能看见的阳光。注意`turnTo`命令让乌龟在画每条阳光前，随机面向某个方向。\\\\r\n\\\\r\n\n# \n\n这样做：\\\\r\n\\\\r\n\n-   **阅读** `drawSunbeam`函数来理解它的原理，以及它接受什么样的**参数**。\\\\r\n    \\\\r\n-   **增加一个循环**到`drawAllSunbeams`来画出大约100束阳光。在你的循环里：\\\\r\n    \\\\r\n-   **将已经在函数里的命令放到循环中。**这海洋，代码会将乌龟移动到随机的x位置，以及屏幕的顶端（因为y一直都是0），用`turnTo`转向一个**165到175**度的随机的角度，并调用`drawSunbeam`。"
      SG U3L07 Free Response Reflection: |-
        当分解问题时，你会经常遇到会在代码中重复使用的元素。有时，适合写一个新函数；有时适合写一个循环。\\r
        \\r
        没有一成不变的规则说哪种方法更好，但是你觉得该如何呢？什么样的情况下，你会写一个函数，又在什么情况下使用循环呢？\\r
        \\r
      SG U3L07 More Subgoals: "# 更多新命令：笔的属性\\\\r\n\n\\\\r\n有两个很有用的新命令`penColor()`和`penWidth()`，已经加到工具箱里了。\n它们能用在新的子目标`//Set pen properties`（设置笔属性）上。通过改变笔的属性，你不必只能使用细的黑线了。\\\\r\n\\\\r\n\n# \n\n文档\\\\r\n当我们不断前进时，你会看到越来越多（越多！）的命令加到工具箱里。如果你看到一个不理解的命令，或者忘了它如何工作了，该怎么办呢？别着急，对于专业程序员，这也会随时发生！实际上，没人能记住一大串命令。大多数编程环境都有办法来快速查询正在使用的语言的命令。**好消息：应用实验室也有文档了！**\\\\r\n\\\\r\n![](https://images.code.org/3fe10e1b65edb37306099098161be001-image-1441990727053.gif)\\\\r\n\\\\r\n当你**将鼠标悬停在模块板中的一个非子目标的命令上**时，就有有一个函数是做什么的快速提醒弹出来，并说明它有什么参数。如果你点击了\"查看示例\"，你会看到这个命令更详细的文档，包括能直接复制粘贴的**代码示例**。\\\\r\n\\\\r\n**阅读文档：** 通过**悬停鼠标**来阅读`penColor()`和`penWidth()`的文档，它能设置乌龟用来画画的笔的颜色和尺寸。`penColor()`文档里有更多的内容！现在，先看看**命名的颜色**，比如\"red\"（红色），\"green\"（绿色）等等。别担心，你有很多机会用各种方法来练习颜色。现在只是开始！\\\\r\n\\\\r\n\n# 这样做\\\\r\n\n你应该浏览一些文档。然后运行代码，并点击完成。"
      SG U3L08 - createTwoParamTriangle: |-
        # 定义有多个参数的函数\\r

        \\r
        现在，该你来定义接受多个参数的函数了。就像前面的例子一样，记得将**参数用逗号分开**，并给它们**有描述性和意义**的名字。\\r
        \\r

        # 这样做：\\r

        -   **拖拽出**函数模块，并**命名**你的函数为`drawTriangle()`（画三角形）。 \\r
        -   **在圆括号中**，为`drawTriangle()`**定义的两个参数。给它们**描述性的并有意义的\*\*名字，并用逗号分隔，例如`(size,width)`。\\r
            \*
            这个动画显示了如何做（代码里没有子目标）！![expandable](https://images.code.org/b1f5eead2ccb60e5ae607feff590bd3c-image-1442850344677.gif)\\r
            \\r
        -   \*
            然后在`drawTriangle(size, width)`中**写**代码，来让它像描述的那样工作。\\r
        -   如果难住了，就先制定一个自上而下的计划，并用子目标来创建画三角形的函数。\\r
        -   \*
            试试看！**运行**代码，并试验创建一个和下面类似的图像。\\r
            \\r
            记住完成子目标`//Define function`，需要给它一个名字，标识参数，并将其填满模块。\\r
            \\r
            \!\[](\<<https://images.code.org/a389c07c259c8877989b6920328a4c78-image-1442529590755.39.38>
            PM.png>)
      SG U3L08 - drawSquareWithParam: "# 定义并使用有一个参数的函数\\\\r\n\n在视频里，你学到了定义多个函数来画出不同尺寸的正方形，但这样会产生很多重复的函数。\n\n-   除了一些数字，它们基本上是一样的 - 这样不太理想。\\\\r\n    任何时候，当你需要复制粘贴一大段代码时，通常这是个有更好方法的信号。\\\\r\n    \\\\r\n    # \n    这样做：\\\\r\n    哎呦！出错了！我们创建了这个运行的程序，但是它的结果和我们想的不一样。我们期望它能画两个这样的正方形：\\\\r\n    \\\\r\n    <img src=\"https://images.code.org/3eae30651dabc2f83a8bbbbbf8bea7ad-image-1442420537113.26.34\n    AM.png\" style=\"width: 150px;\"> \\\\r\n    \\\\r\n    我们已经给你了视频中创建的`drawSquare(size)`函数，但还不太正确。**修好`drawSquare()`函数中的代码，让程序能够正确的画出图形。**\\\\r\n    \\\\r\n    **提示：**\n    你只需要改变一行已有的代码。不需要增加或删除任何代码。记住：参数`size`实际上像一个值得占位符，它能被插入到每次调用`moveForward()`中。"
      SG U3L08 - fish: |-
        # 给函数_drawFish_（画鱼）添加参数：\\r

        \\r
        更新`drawFish()`函数来接受一个参数。当前`drawFish()`函数只能画尺寸为30的鱼。\\r
        \\r
        **加一个参数**到`drawFish()`的函数定义里，这能让你控制它的尺寸。（注意：笔的宽度在这里很重要。）确保你的参数有一个**描述性的而且有意义的**名字。\\r
        \\r
        **更新函数调用**来用新版本的`drawFish()`并改变图画里鱼的尺寸。\\r
        \\r
        \!\[](\<<https://images.code.org/35f9a55244004dad62781f4ae0ce7eb2-image-1442608034411.26.55>
        PM.png>)
      SG U3L08 - introUnderTheSea - recovery: |-
        # 在海里！\\r

        \\r
        在下面的几个挑战中，你会改进**一个程序**，来画海底场景。每次你完成一关，进入下一关，你的代码都会一起过去。你会得到新的指令来告诉你加什么。\\r
        \\r

        # 这样做：\\r

        \\r

        -   **通读**提供给你的程序，来对要做什么有个基本的理解。\\r
        -   **添加函数调用**到程序的最上面，来让**两条鱼，两条海星和两块海草**出现在场景的某个地方。在这个阶段，你不需要提供参数的值。\\r
        -   **提示：**你需要在画第二条鱼、海星或海草之前调用`moveTo`，否则，你不会看见第二个，因为它会完全盖住一样的第一个。 -- 这些函数画的东西都基于调用前乌龟的位置。\\r
        -   \*
            测试你的代码。如果有什么不像你想的那样工作，考虑是否能加什么东西到函数的定义里来，让它变得更好。\\r
        -   \*
            **继续**到下一关，**你的代码会在那里等你。**\\r
            \\r
            \!\[](\<<https://images.code.org/a53accb7edf7ed4e09d56bab903e1af9-image-1442604192660.22.35>
            PM.png>)
      SG U3L08 - introUnderTheSea: |-
        # 在海里！\\r

        \\r
        在下面的几个挑战中，你会改进**一个程序**，来画海底场景。每次你完成一关，进入下一关，你的代码都会一起过去。你会得到新的指令来告诉你加什么。\\r
        \\r

        # 这样做：\\r

        \\r

        -   **通读**提供给你的程序，来对要做什么有个基本的理解。\\r
        -   **添加函数调用**到程序的最上面，来让**两条鱼，两条海星和两块海草**出现在场景的某个地方。在这个阶段，你不需要提供参数的值。\\r
        -   **提示：**你需要在画第二条鱼、海星或海草之前调用`moveTo`，否则，你不会看见第二个，因为它会完全盖住一样的第一个。 -- 这些函数画的东西都基于调用前乌龟的位置。\\r
        -   \*
            测试你的代码。如果有什么不像你想的那样工作，考虑是否能加什么东西到函数的定义里来，让它变得更好。\\r
        -   \*
            **继续**到下一关，**你的代码会在那里等你。**\\r
            \\r
            \!\[](\<<https://images.code.org/a53accb7edf7ed4e09d56bab903e1af9-image-1442604192660.22.35>
            PM.png>)
      SG U3L08 - multiParamFish: |-
        # 多个参数\\r

        \\r
        让我们通过添加更多的颜色，来让画面更有意思。\\r
        \\r
        再**添加**三个参数，叫做`red`（红），`green`（绿），和`blue`（蓝）到你的`drawFish`函数定义里，这能让你在调用函数时设置鱼的颜色。记住将它们用逗号分割开来！\\r
        \\r
        **注意：**
        这意味着drawFish现在会有4个参数：size, red, green,
        and blue。记住分辨这些参数都在子目标`//Define function`中。\\r
        \\r
        **提示：** 在drawFish里只用将penRGB的值从数字替换为函数的参数。\\r
        \\r
        **改动**最上面函数的调用，来画出不同颜色的鱼。\\r
        \\r
        \!\[](\<<https://images.code.org/14b52d152c818903b0fc87061126f0f8-image-1442608501173.34.30>
        PM.png>)
      SG U3L08 - paramsToStarfish: '# 向函数中添加参数: \* 画海星\*\\r\\r 我们希望添加一些变化来使我们的图片更有趣。目前, "drawStarfish ()"（画海星） 函数只能绘制大小为60的海星.\\r\\r在 "drawStarfish ()" （画海星）的函数定义中**添加一个参数 \*\*, 它允许你控制其大小, 如 "drawStarfish (大小)"。请确保参数具有 \*\* 描述性和有意义的 \*\* 名称。还要确保使用你选择的参数名来更改函数中的模块. \\r\\r** 更新函数调用 \*\* 来使用新版本的 '' drawStarfish () ''（画海星） 和更改海星的大小。\\r\\r!\[] (<https://images.code.org/320485cb05b50bcdb8aa8d13c0164502-image-1442606362191.59.12> PM. png)'
      SG U3L08 - randomInput: |-
        # 随机输入\\r

        \\r
        你有一个新的模块，它可以让你生成一个随机数。每次调用函数时, 都可以用它而不必硬编码数值。\\r
        \\r
        ![](https://images.code.org/5ff13bfdf582692f009b787570d467d0-image-1470145136252.png)\\r
        \\r
        **请阅读 randomNumber（随机数字） 模块的文档**。\\r
        \\r

        # 这样做\\r

        -   使用 randomNumber （随机数字）提供随机输入\*_给_所有3个\*绘图函数。
            只在需要的地方插入`randomNumber()`（随机数字）调用，其它地方还是数字。\\r
            \\r
            就像这样：\\r
            ![](https://images.code.org/ad87d7d122ac585a6de9e46a49736228-image-1470146652402.png)\\r
            \\r
            在所有三个绘图函数中调用 randomNumber（随机数字）：\\r
            \\r
        -   drawStarfish（画海星）\\r
        -   drawSeagrass（画海草）\\r
        -   drawFish（画鱼）\\r
            \\r
            这是一个很好的**测试**函数，同时又能得到一些**有趣的图像**的方法。每次运行程序时, 你都可以得到和下面的稍微有点不同的画面。\\r
            \\r
            ![](https://images.code.org/d2031f555ed23bcfa4a6a6165074b559-image-1442852053630.png)
      SG U3L08 - seaGrass: |-
        # 将参数添加到函数：_drawSeagrass_（画海草）\\r

        \\r
        为了不断增加图像的多样性，让我们继续为函数添加参数。目前，`drawSeagrass()`（画海草）函数只能绘制一条半径为100的海草。\\r
        \\r
        在`drawSeagrass()`（画海草）的函数定义中**添加一个参数**，它可以让你控制其大小。（你只需要更改每个弧线的半径。）确保参数具有**描述性并有意义的**名称。\\r
        \\r
        \*\*更新函数调用 \*\*以使用新版本的`drawSeagrass()`（画海草），并更改图像中海草的大小。\\r
        \\r
        \!\[](\<<https://images.code.org/0b7d1750101a4c81ef8d77d8668f94f2-image-1442606862829.07.30>
        PM.png>)
      SG U3L08 - squareTwoParams: |-
        # 调用具有多个参数的函数\\r

        \\r
        这是`drawSquare()` (画正方形）的新定义，它带有二个参数：`drawSquare(size, borderWidth)`（画正方形（大小，边宽），注意 \*\*多个参数是用逗号分隔开的 \*\*。\\r
        \\r
        \!\[](\<<https://images.code.org/c9766f914d59531614c753e9147d29dd-image-1447801298794.01.15>
        PM.png>)\\r
        \\r

        # 这样做：\\r

        添加代码，对 `drawSquare()`（画正方形）新的两个参数版本进行**两次调用**，来使图像与此类似。\\r
        \\r
        \!\[](\<<https://images.code.org/ddd85deb33ff82f3c257d25cdc9e6384-image-1442526350229.45.38>
        PM.png>)\\r
        \\r
        就像子目标`//Define function`（定义函数）一样, 子目标`//Call function`（调用函数）过去只涉及标识函数的名称。现在当你调用函数时, 需要标识函数的名称和函数的参数值。
      SG U3L08 Assessment2: |-
        "抽象" 通常用于专注于一般情况，而忽略问题的特定实例。\\r
        \\r
        基于这个词的含义, 参数和函数是如何作为抽象的例子？
      SG U3L08 comments: |-
        # 为自己和合作者对代码进行注释\\r

        \\r
        程序员在他们的代码里写入注释有两个主要原因：(1) 和其他程序员分享代码，(2) 帮忙记住他们自己的想法或计划他们编写的代码。\\r
        \\r
        对于这两种情况，程序员**书写注释到代码中,来把想法解释给听众。**\\r
        \\r
        你已经看到的子目标就是一种特定的能帮助你学习的注释类型。随着你对编程的经验增加，你可以附加自己的注释，或甚至可以取代它。\\r
        \\r

        <details><summary
        ><b>更多：为什么写注释？</b></summary>\r
        <div style="background-color:
        #e9f7f7; margin-left: 20px; padding: 10px">\r
        <p>\r
        在和别人分享代码的时候，注释对于指出代码的哪部分可能需要帮忙是很有用的。或者它可以帮忙解释代码不容易懂的地方。 注释以实例这种方式书写很有帮助<code>//此函数假设鱼已经画好了</code>，因为它帮助读者理解何时，何地，为什么代码的那部分需要被执行。\r
        </p>\r
        <p></p>\r
        <p>\r
        在给自己写注释的时候，它可以是一个你计划如何解决问题的备注，或写下你做这个的原因好在日后重新要做的时候提醒自己。比如你可能会写下这样的注释:
        <code>//要做的事: 做一个函数来处理以下代码</code>\r
        </p>\r
        <p>\r
        很多程序员在他们重头编写代码的时候，他们喜欢在注释里写下主架构计划，然后才开始依照计划编写代码。 这在处理一个需要细分为小部分的大问题是非常重要的。你开始可以想想大的思路，并在注释里写下策略，这样你后面就不会忘记了--这很可能发生 -- 因为一旦你开始编写代码，你将面临很多小的障碍，你可能需要花很多时间去解决或找出缺陷。你需要你的头脑有多余的空间来处理这些。一个画海底世界图像的计划可能像这样：\r
        <pre>\r
            // 准备好画画\r
            //
        用颜色和水泡来画背景\r
            // 画鱼\r
            //
        画海草\r
            // 再次画水泡\r
         </pre>\r
        </p>\r
        </div>\r
        </details>\r
        \r
        #
        这样做\r
        \r
        **添加注释**到你在作业的代码中。想象你在和你的同学之一描述代码的目的。或者找个最复杂的部分，试着解释它。\r
        \r
        添加注释的方法是用`// Comment`（注释）模块，它在工具箱的**函数**选项卡里.\r
        \r
        **看怎么做:** ![expandable](https://images.code.org/fc29157949ee10369cb8a8db280b886f-image-1508515330684.gif)
      SG U3L08 how to add comments: "# 现在你来试试 - 添加一个注释\\\\r\n\n\\\\r\n所提供的开始代码已经有一些注释在里面。\\\\r\n\\\\r\n\n# \n\n这样做\\\\r\n\\\\r\n在要做海星的代码部分的上面插入一行注释说到 `// 在特定的地方画一个海星` . \\\\r\n\\\\r\n添加代码的方式是用`// Comment`（注释）模块,它在工具盒的**函数**选项卡里面([Show me](#triggercallout=show_comment)).\\\\r\n\\\\r\n**看看怎么做：** ![expandable](https://images.code.org/fc29157949ee10369cb8a8db280b886f-image-1508515330684.gif)\\\\r\n\\\\r\n**添加更多注释**到代码，说明每一节的代码是做什么的。想象你在和你同学之一描述代码的作用，或者找到最复杂的部分，试着解释它。\\\\r\n\\\\r\n**点击完成**\n一旦你已添加注释。在你继续的过程中不断添加注释!!!"
      SG U3L2 Using Simple Commands part 1: |-
        # 欢迎来到应用实验室 - 我们开始吧

        <img src="htt
        ps://images.code.org/f93dfb56ab00f689dcd5867eb4398fa8-image-1508424086651.png"
        align=right>

        我们要开始学习如何用乌龟命令来编程。只用两个乌龟命令，写代码完成下面的每个挑战。

        <img src="https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif"
        align=right>

        # 这样做：

        添加代码来尽量高效的，在左前方画一个1x1的正方形。程序停下来时，乌龟应该在初始的位置，面朝最初的方向。

        一旦有了解决方案，点击`完成`按钮 - 它会在你运行了一次程序后出现。
      SG U3L2 Using Simple Commands: "# 现在试试它！\\\\r\n\n\\\\r\n在这个单元里，我们要学习如何用子目标来编程。\\\\r\n\\\\r\n往往，你会通过从工具箱拖拽模块到工作区来解决问题。有时，我们会将解决问题的子目标放到工作区里，有时候，你需要自己找到子目标。\\\\r\n\\\\r\n这里，在工作区里已经有了一些`// Move turtle`（移动乌龟）和`// Orient turtle`（乌龟定向）的子目标。它们描述了如何解决1x1正方形的问题，但还没有完成。\\\\r\n\\\\r\n\n# \n\n这样做：\\\\r\n\\\\r\n\n-   完成已经开始的画1x1正方形的代码。\\\\r\n-   将每个乌龟模块拖拽到合适的子目标下。\\\\r\n    \\\\r\n    **点击看看如何做** ![expandable](https://images.code.org/5818d0b6080e3a30dc081a166cfbffcb-image-1508437404576.gif)\\\\r\n    \\\\r\n    <img\n    src=\"https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif\"\n    align=right>\\\\r\n    \\\\r\n-   记住：在结束时，乌龟应该在最初的位置，面朝最初的方向。\\\\r\n    \\\\r\n    一旦你认为完成后，点击`完成`按钮。"
      SG U3L2_Add-subgoals: |-
        # 新挑战 \<img src="<https://images.code.org/c15fee1f27c817a352a521c7ddcb5006-image-1436282127747.png>"

        style="float: right">\\r
        \\r
        在_右前_方，用最_高效_的代码画一个3x3的网格。\\r
        \\r
        "高效"意味着什么？
        在计算机科学里，根据不同的情况，它有不同的含义。在这个问题中，高效的意思是：**用尽可能少的乌龟命令**\\r
        \\r

        # 做这些\\r

        \\r

        1.  这个问题出现了一些困难的挑战。在你开始创建程序前，你可能想在纸上快速的试试自己的想法。和你的伙伴一起讨论一下可能的方案或策略。多找几个。\\r
            \\r
        2.  2.
            一旦你有了解决方案，从找到子目标**开始**，并将它们从**目标**标签中拖到工作区里。\\r
            \\r
        3.  然后开始用乌龟模块来填充它，并在过程中加一些命令就**测试**一下。然后不断的运行代码，再增加一些模块，再运行，不断的这样重复。\\r
            \\r
            当你认为完成时，点击`完成`并继续。\\r
      SG U3L2_Turtle3by3Grid: |-
        # 新挑战 \<img src="<https://images.code.org/c15fee1f27c817a352a521c7ddcb5006-image-1436282127747.png>"

        style="float: right">\\r
        \\r
        尽可能_高效_的在乌龟的_右前方_画一个3x3的网格。\\r
        \\r
        "高效"意味着什么？
        在计算机科学里，根据不同的情况，它有不同的含义。在这个问题中，高效的意思是：**用尽可能少的乌龟指令**\\r
        \\r
        **备注：**从现在开始，在此视频里提到的4 个乌龟指令会一直在工具箱里。现在在这个挑战里可能不需要`penUp()`（提起画笔）和`penDown()`（放下画笔），当将来你可能需要用到它们。([Show me where](#triggercallout=show_penup))\\r
        \\r

        # 做这些\\r

        \\r

        1.  这个问题里有一些微妙的挑战。在你开始创建程序前，你可能要在纸上快速地测试自己的想法。和你的伙伴一起讨论一下可能的方案或策略。多找几个。\\r
            \\r
            2.一旦你有了解决方案，从标识处子目标**开始**，并将它们从**目标**选项卡中拖到工作区里。([Show me where](#triggercallout=show_goals))\\r
            \\r
        2.  然后开始用乌龟模块来填充它，并在进行中添加一些指令来**测试**它，然后运行代码，再增加一些模块，再运行，不断的这样重复。\\r
            \\r
            当你认为完成时，点击`完成`并继续。
      SG U3L2_TurtleSquare_right: |-
        # 新问题 \<img src="<https://images.code.org/ad48e7224312a6c41f4fc5727af53cc0-image-1436287265071.png>"

        align=right> \\r
        \\r
        这一次，在乌龟的右上方画一个 1 x 1正方形。这意味着你需要通过移动和_向右转_来绘制它。\*\* 但这里现在没有右转的指令！\*\*\\r
        \\r
        当你唯一的指令是`turnLeft()`（向左转）时，你如何向右转？这需要弄清楚。\\r
        \\r

        ## 一个子目标 - 多行代码 \<img src="<https://images.code.org/ae8ac9b14b7c016437455d07fdbb6a7c-image-1508440383741.png>"

        style="float: right">\\r
        有时一个子目标如`// Orient Turtle`（乌龟定向）可能需要几行代码来完成。\\r
        \\r
        例如，在这个问题上，要让乌龟每次转右的定位_目标_意味着要向左拐几次。因此, 你将添加多个`turnLeft()`指令到单个`//Orient Turtle`的子目标下。(如右侧）。\\r\\r

        <div style="clear:
        both"> </div>\r
        \r
        #做这些\r
        \r
        \r
        * 我们再次添加子目标到工作区来解决此问题。 请注意，我们仍然只使用`移动乌龟`和`定向`。\r
        * 在每个子目标下面添加代码, 通过移动和*向右转*来绘制1 x 1正方形。\r
        * 提醒：程序结束时，乌龟应在它原来位置并朝着原来方向。\r
        \r
        完成后，单击 "完成" 按钮来继续下一个问题。\r
        \r
      SG csp_U3_plan_code_FR: |-
        <img src="https://images.code.org/01d3b0664443216b4363ec31914e592a-image-1506460763004.png"
        style="float: right">\\r
        \\r
        <br>\\r
        \\r
        这这堂课里，我们已谈到用自上而下的设计来建构你的解决方案来解决更大的编程问题。计划一下你会用来画这个图形的代码（如右图）。描述你要创建的每个函数。你不应该写下所有的代码，只需要写下你要创建的函数的名字和每个函数会做些什么的简短介绍。\\r
        \\r
        参照下面格式写下你的计划：\\r
        \\r

        <div
        style="clear: both"> </div>\r
        \r
            函数名称 - 描述它能做什么\r
        \r
            函数名称2 - 描述它能做什么\r
            ...
      SG csp_U3_square_v_rect_FR: |-
        <img src="https://images.code.org/2f9b8b6a1c42b7c6c881f89867352907-image-1506460228029.png"
        style="float: right">\\r
        \\r
        在这堂课里, 你编写了让乌龟绘制正方形的代码。简要描述一下绘制长方形的代码与绘制正方形的有什么不同。 （示例如右图长方形）
      SG subgoals_U3_turtle_prediction_FR: |-
        ## 跟踪代码\\r

        \\r
        用一两句话来解释你认为下面的代码是做什么。\\r
        \\r
        ![](https://images.code.org/5bc66acc4712cf1c835daac0c45422a8-image-1506532056958.png)
      SG subgoals_u3_top_down_FR: |-
        # 设计一个程序\\r

        \\r
        使用自上而下的方法描述如何创建一个程序使用随机数字在蓝色背景上绘制一个的白色雪花，使得每次运行代码时雪花都是唯一的。\\r
        \\r
        你不需要编写要使用的确切代码或模块, 但是你应该描述你需要创建哪些函数, 在哪里将或不使用循环, 以及在哪里将或不会使用随机数字。
      SGU3L07 - randomDots1: |-
        # 用随机值循环\\r

        \\r
        <img
        src="https://images.code.org/520e45a90988b04bb0ff3baa184f080a-image-1443108426597.png"
        style="width: 100px; float: right;">\\r
        \\r
        如果你在循环里给乌龟的行为增加一些随性，每次程序运行将会稍微不同从而增加一些很酷的效果。\\r
        \\r
        你将会看到一个乌龟在每次循环中**移动到随机位置**并**画一些随机大小的点**并且这些点还有**随机颜色**的程序。我们已经通过设定alpha（透明度）值到0.5制作了半透明的点（50%透明度）。\\r
        \\r

        # 这样做：\\r

        \\r
        **搞明白需要多少次**
        （循环运行的次数）你把整个屏幕用点覆盖，直到盖住整个背景。每次实验需要的次数将稍微不同。\\r
        \\r
        与其他人的**比较你的发现**，看看结果有多大差异。然后**继续**。
      SGU3L2A Introducing Subgoals: |-
        # 子目标介绍\\r

        编写代码很有趣，但是当你编写更长的程序来解决更复杂的问题时，在更高的层次上思考针对解决方案构建的 \*\* 系列子目标**是很有用的。\\r
        \\r
        在应用程序实验室中，我们提供了特殊的模块叫 [`Goals`](#triggercallout=goals_palette)（目标）来帮助你思考你正在解决的问题的**子目标\*\*。 ([Show me](#triggercallout=goals_palette))\\r
        \\r
        这些子目标模块被称为"注释"，程序员用它它来给自己或其他可能查看此代码的人做笔记。你可以将这些模块拖到代码中，来帮助标记内容并保持有组织化，但在运行程序时它们不会执行任何操作。试试看。\\r
        \\r

        # 这样做：\\r

        \\r

        -   不要添加任何代码，只需单击`运行`并注意以下内容：\\r
        -   在工作区中, 我们在代码中的几个地方添加了子目标`//Move turtle` （移动乌龟）和`//Orient turtle`（定向乌龟）。([让我看看](#triggercallout=show_code)) \\r
        -   在每个子目标下面，我们已经添加了模块来完成子目标。\\r
        -   重点是稍微留意一下，子目标不会改变图画或让乌龟做什么。\\r
        -   乌龟仍然只受蓝色乌龟指令模块控制。\\r
            \\r
            在运行程序后, 单击`完成`来继续尝试。\\r
            \\r
            \\r
            <!--\r
            \r
            这就是我们在整个单元中要使用应用实验室的方法。你要把模块从工具箱里拉到工作区内来过关。有时候工作区会告诉你关卡的子目标，有时你必须自己识别子目标。\r
            \r
            每个关卡的第一步将是将问题的子目标放在工作区中 （如果它们尚未在那里）。然后，你要把解决子目标的模块放在下面。\r
            \r
            在下面的工作区中，我们添加了两个子目标，移动乌龟和定向乌龟。在每个子目标下面，我们添加了模块来完成这些子目标。\r
            \r
            注释模块中描述了子目标。这意味着子目标注释将在代码中可见，但当运行代码时，它们不会做任何事情的。注释纯粹是为自己或其他可能查看此代码的人做笔记。\r
            \r
            这样做：\r
            \r
            按运行按钮来`运行`代码。请注意，子目标没有出现在绘图中。只有模块才能让乌龟做点什么。\r
            \r
            -->
      Standalone_Artist_2: |-
        用 120 度和 60 度的角度，再加上长达150像素的边来画个钻石型。\\r
        \\r
      Standalone_Artist_3: |-
        能够用100 像素的边和 60度的转度来绘制一个六边形吗？\\r
        \\r
      Standalone_Artist_4: |-
        现在你已获得一个新的块—循环，该块可以重复执行一连串的指令。如果你循环这些指令6次，看看会发生什么？\\r
        \\r
      Standalone_Artist_5.5: |-
        注意：如何将画钻石的代码转换成“循环”块来精简代码。你可以通过循环整个事件12次来花一朵花。提示：在每个画钻石的循环结束后，你需要向左（或右）转30°，这样你就不会总是在一个地方画钻石了。\\r
        \\r
      Standalone_Artist_5: |-
        你需要循环多少次钻石才能化成这朵花呢？\\r
        \\r
      Standalone_Artist_6: |-
        通过循环画六边形6次来创建一个图形。每次你需要转动多少度呢？
        提示：用一个圆周的度数除以你循环的次数。\\r
        \\r
      Standalone_Artist_7: |-
        函数是另一种帮助避免重复工作的编程工具。这个函数会画一朵花，因此你可以在任何想画一朵花的时候使用它。用这个和新的“跳”模块来画这些花。提示：花之间相隔150像素。\\r
        \\r
      Standalone_Artist_8: |-
        这里有一个叫做“画一个形状”的函数，我们用它来画一个六边形。运行这个代码来看看它做了什么，然后试试用这个函数看看发生什么。你能用它找到一个能画出正方形，三角形，或者八边形的模式吗？\\r
        \\r
      Standalone_Artist_9: |-
        现在制作任何你想要的图片吧！你设置可以从一个空函数开始，来做到你想的事！\\r
        \\r
      Test embedded K1 Blockly in instructions: |-
        用<xml><block type="maze_moveNorth"/></xml>模块 3 次来让收割者到达玉米的位置，最后别忘了用<xml><block
        type="harvester_corn"/></xml>模块捡起玉米！
      Test of comment block: |-
        ## 指示\\r

        \\r
        拖出所需的子目标标签模块。
      Testing Quantum Farmer: "哇，瞧瞧这里！\\\\r\n\\\\r\n我不知道要多少铲土才能填满它。\\\\r\n你能写一个程序用“填充”模块，直到它和地面一样平吗？  "
      The Accelerometer: |-
        今天，你会学习如何创建和使用**函数**。\\r
        \\r
        创建函数会让你制作自己的模块！制作函数有两部分：\\r
        \\r
        制作一个有名字的新模块，将你想要运行的代码都放在它里面。\\r
        \-函数的xml定义- \\r
        \\r
        单个绿色的模块，是你使用或调用创建的函数。\\r
        \-函数调用的xml-\\r
        \\r
        准备熟悉函数，学习如何编辑它们，并创建自己的函数！
      The Accelerometer_2018: |-
        今天，你会学习如何创建和使用**函数**。\\r
        \\r
        创建函数会让你制作自己的模块！制作函数有两部分：\\r
        \\r
        制作一个有名字的新模块，将你想要运行的代码都放在它里面。\\r
        \-函数的xml定义- \\r
        \\r
        单个绿色的模块，是你使用或调用创建的函数。\\r
        \-函数调用的xml-\\r
        \\r
        准备熟悉函数，学习如何编辑它们，并创建自己的函数！
      The Accelerometer_2019: |-
        今天，你会学习如何创建和使用**函数**。\\r
        \\r
        创建函数会让你制作自己的模块！制作函数有两部分：\\r
        \\r
        制作一个有名字的新模块，将你想要运行的代码都放在它里面。\\r
        \-函数的xml定义- \\r
        \\r
        单个绿色的模块，是你使用或调用创建的函数。\\r
        \-函数调用的xml-\\r
        \\r
        准备熟悉函数，学习如何编辑它们，并创建自己的函数！
      Total Artist Clone Me: 自由发挥：这里除了写的函数，还有更多的函数发挥。用不同的笔宽度来看看能画出什么不一样的图形！
      U1L11 Abstraction Reflection_2018: "抽象是用简单的东西来表示比较复杂的东西。在今天的课中, 十进制数是一个有用的抽象。对下面两个问题写一个简短的回答。 \n\n-   什么用于表示的基本复杂性十进制数？\n-   十进制数如何帮助设计系统以位表示文本？"
      U1L11 Abstraction Reflection_2019: "抽象是用简单的东西来表示比较复杂的东西。在今天的课中, 十进制数是一个有用的抽象。对下面两个问题写一个简短的回答。 \n\n-   什么用于表示的基本复杂性十进制数？\n-   十进制数如何帮助设计系统以位表示文本？"
      U1L11 Reflection Multiple Representations_2018: |-
        "二进制数字`01000001`代表数字65。"

        写一个简短的答复, 解释你是否相信这句话总是真实的。解释你的推理。
      U1L11 Reflection Multiple Representations_2019: |-
        "二进制数字`01000001`代表数字65。"

        写一个简短的答复, 解释你是否相信这句话总是真实的。解释你的推理。
      U1L8 Free Response Reflection_2018: |-
        <strong>完成发送号码提示 (在发送号码活动指南的第二页上</a>), 然后对以下问题作出回答。</strong>

        创建工作协议的努力中出现了哪些问题？为了解决这个/些问题, 你是怎么想的？
      U1L8 Free Response Reflection_2019: |-
        <strong>完成发送号码提示 (在发送号码活动指南的第二页上</a>), 然后对以下问题作出回答。</strong>

        创建工作协议的努力中出现了哪些问题？为了解决这个/些问题, 你是怎么想的？
      U1L9 Free Response Assessment: 选择你今天最喜欢学习的主题之一。描述你学习到的新信息以及它与我们创建和使用数字系统的方式之间的关系。
      U2L05 Lossy vs. Lossless FR 1_2018: |-
        ＃何时使用有损压缩？

        一般来说，为何会有人会选择使用有损压缩？ 在下面写一个简短的回答，其中至少包括一个适用于损压缩情况的例子。
      U2L05 Lossy vs. Lossless FR 1_2018_2019: |-
        ＃何时使用有损压缩？

        一般来说，为何会有人会选择使用有损压缩？ 在下面写一个简短的回答，其中至少包括一个适用于损压缩情况的例子。
      U3 - Simple Drawing - Personal Drawing: |-
        # 你自己的图画\\r

        \\r
        该你创建自己的图画了。你应该先在纸上规划一下。\\r
        \\r

        # 这样做\\r

        提醒自己要确保达到目标：\\r
        \\r
        \*
        创建一个可识别的，有名字的目标或设计（例如没有随机乱放的形状）\\r

        -   使用至少10个形状或文本条目（矩形、椭圆形、正多边形，文本）\\r
        -   用至少4个颜色来填充\\r
        -   用至少两个不同的颜色画轮廓\\r
        -   至少包含3个不同的有注释的逻辑模块\\r
      U3-AP-Practice-Choose-The-Abstraction: |-
        # AP 练习 - 找到抽象\\r

        \\r
        **AP创建表演任务**的其中一个部分是选择你开发的抽象。\\r
        \\r

        <div style="width:
        80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family:
        serif; font-size: 12pt">\r
        \r
        <b>3. 编写代码</b>\r
        <ul>\r
        <li>用一个<b>长方形</b>标示出程序中你开发的代表抽象的部分程序代码。</li>\r
        </ul>\r
        </div>\r
        <br>\r
        \r
        这是这个问题的评分指南\r\r
        <div style="magin:auto">\r
        \t<img src="https://images.code.org/341764b27f16965cf27680e20c893a23-image-1508190677805.50.59
        PM.png">\r
        </div>\r
        \r
        #选择学生创建的抽象\r
        \r
        下面是一位学生开发的程序里的程序代码。\r
        ![](https://images.code.org/86d48cfc2c9c81551aa059281e9c62f3-image-1508189804595.34.48
        PM.png)\r
        \r
        **写下哪个长方形(A, B, C, or D)是放在学生刚开发的抽象中。**\r
        \r
        **然后用评分指南中的标准来解释你的答案。**
      U3-AP-Practice-Choose-The-Abstraction_2018: |-
        # AP 练习 - 找到抽象\\r

        \\r
        **AP创建表演任务**的其中一个部分是选择你开发的抽象。\\r
        \\r

        <div style="width:
        80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family:
        serif; font-size: 12pt">\r
        \r
        <b>3. 编写代码</b>\r
        <ul>\r
        <li>用一个<b>长方形</b>标示出程序中你开发的代表抽象的部分程序代码。</li>\r
        </ul>\r
        </div>\r
        <br>\r
        \r
        这是这个问题的评分指南\r\r
        <div style="magin:auto">\r
        \t<img src="https://images.code.org/341764b27f16965cf27680e20c893a23-image-1508190677805.50.59
        PM.png">\r
        </div>\r
        \r
        #选择学生创建的抽象\r
        \r
        下面是一位学生开发的程序里的程序代码。\r
        ![](https://images.code.org/86d48cfc2c9c81551aa059281e9c62f3-image-1508189804595.34.48
        PM.png)\r
        \r
        **写下哪个长方形(A, B, C, or D)是放在学生刚开发的抽象中。**\r
        \r
        **然后用评分指南中的标准来解释你的答案。**
      U3-AP-Practice-Choose-The-Abstraction_2019: |-
        # AP 练习 - 找到抽象\\r

        \\r
        **AP创建表演任务**的其中一个部分是选择你开发的抽象。\\r
        \\r

        <div style="width:
        80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family:
        serif; font-size: 12pt">\r
        \r
        <b>3. 编写代码</b>\r
        <ul>\r
        <li>用一个<b>长方形</b>标示出程序中你开发的代表抽象的部分程序代码。</li>\r
        </ul>\r
        </div>\r
        <br>\r
        \r
        这是这个问题的评分指南\r\r
        <div style="magin:auto">\r
        \t<img src="https://images.code.org/341764b27f16965cf27680e20c893a23-image-1508190677805.50.59
        PM.png">\r
        </div>\r
        \r
        #选择学生创建的抽象\r
        \r
        下面是一位学生开发的程序里的程序代码。\r
        ![](https://images.code.org/86d48cfc2c9c81551aa059281e9c62f3-image-1508189804595.34.48
        PM.png)\r
        \r
        **写下哪个长方形(A, B, C, or D)是放在学生刚开发的抽象中。**\r
        \r
        **然后用评分指南中的标准来解释你的答案。**
      U3-AP-Practice-FR-design-process: |-
        # AP 练习 - 表演任务反应\\r

        \\r
        自上至下的设计是一个把复杂的事情拆分成小部分的设计过程和策略。AP创建表演任务让你在编写代码的时候写下你的开发过程.。\\r
        \\r
        让我们花一分钟的时间来了解这种书写提示以及它是如何计分的。 这里是AP创建任务指南里的实际书写提示**2b**：\\r
        \\r

        <div style="width:
        70%; margin: auto; font-family: serif; font-size: 12pt; line-height: 1.3;
        background-color: #EEEEEE; padding: 10px">\r
        \r
        <b>2b.</b> 描述你程序里的开发过程的进展和迭代，专注在该流程两个独特的地方。描述你遇到的困难和/或机会，以及它们是如何被解决或合并的。在你的描述里请清楚地说明该发展是独立的还是协同的。至少这些点里有一条必须是指向独立程序开发。<i>（不能超过200字）</i>\r
        </div>\r
        <br>\r
        你对这些提示的反应可以最高得2分，得分是必须找到这两大主要问题：\r
        \r
        1.
        (1 分) 你是否描述书写*整个*程序的实际*迭代*过程 - "增加和迭代" 表示你依照测试，反省或合作伙伴的回馈持续改善你的程序.\r
        \r
        2.
        (1 分) 在编写代码时，你是否及时真实描述这*两*点, 具体的问题是什么，你是如何通过*反省*或并入互动的合作伙伴的反馈来解决此问题的。\r
        \r
        这里是实际计分指南:\r
        \r
        ![](https://images.code.org/1cb4a1840d281a9c5c5096becc8c9054-image-1507827422107.png)\r
        \r
        ##
        现在你来试试\r
        \r
        试着对此AP 提示写你的反应，可以是你是怎么相出雪花绘制程序的想法，或者是你是如何解决3x3 格子程序的。你可能需要使用一点想象力，假设这是你自己创建的更大的程序的一部分. 这里的重点是*练习编写*开发过程.\r
        \r
        备注:
        想这样的反应需要花点时间来思考和起草。
      U3-AP-Practice-FR-design-process_2018: |-
        # AP 练习 - 表演任务反应\\r

        \\r
        自上至下的设计是一个把复杂的事情拆分成小部分的设计过程和策略。AP创建表演任务让你在编写代码的时候写下你的开发过程.。\\r
        \\r
        让我们花一分钟的时间来了解这种书写提示以及它是如何计分的。 这里是AP创建任务指南里的实际书写提示**2b**：\\r
        \\r

        <div style="width:
        70%; margin: auto; font-family: serif; font-size: 12pt; line-height: 1.3;
        background-color: #EEEEEE; padding: 10px">\r
        \r
        <b>2b.</b> 描述你程序里的开发过程的进展和迭代，专注在该流程两个独特的地方。描述你遇到的困难和/或机会，以及它们是如何被解决或合并的。在你的描述里请清楚地说明该发展是独立的还是协同的。至少这些点里有一条必须是指向独立程序开发。<i>（不能超过200字）</i>\r
        </div>\r
        <br>\r
        你对这些提示的反应可以最高得2分，得分是必须找到这两大主要问题：\r
        \r
        1.
        (1 分) 你是否描述书写*整个*程序的实际*迭代*过程 - "增加和迭代" 表示你依照测试，反省或合作伙伴的回馈持续改善你的程序.\r
        \r
        2.
        (1 分) 在编写代码时，你是否及时真实描述这*两*点, 具体的问题是什么，你是如何通过*反省*或并入互动的合作伙伴的反馈来解决此问题的。\r
        \r
        这里是实际计分指南:\r
        \r
        ![](https://images.code.org/1cb4a1840d281a9c5c5096becc8c9054-image-1507827422107.png)\r
        \r
        ##
        现在你来试试\r
        \r
        试着对此AP 提示写你的反应，可以是你是怎么相出雪花绘制程序的想法，或者是你是如何解决3x3 格子程序的。你可能需要使用一点想象力，假设这是你自己创建的更大的程序的一部分. 这里的重点是*练习编写*开发过程.\r
        \r
        备注:
        想这样的反应需要花点时间来思考和起草。
      U3-AP-Practice-FR-design-process_2019: |-
        # AP 练习 - 表演任务反应\\r

        \\r
        自上至下的设计是一个把复杂的事情拆分成小部分的设计过程和策略。AP创建表演任务让你在编写代码的时候写下你的开发过程.。\\r
        \\r
        让我们花一分钟的时间来了解这种书写提示以及它是如何计分的。 这里是AP创建任务指南里的实际书写提示**2b**：\\r
        \\r

        <div style="width:
        70%; margin: auto; font-family: serif; font-size: 12pt; line-height: 1.3;
        background-color: #EEEEEE; padding: 10px">\r
        \r
        <b>2b.</b> 描述你程序里的开发过程的进展和迭代，专注在该流程两个独特的地方。描述你遇到的困难和/或机会，以及它们是如何被解决或合并的。在你的描述里请清楚地说明该发展是独立的还是协同的。至少这些点里有一条必须是指向独立程序开发。<i>（不能超过200字）</i>\r
        </div>\r
        <br>\r
        你对这些提示的反应可以最高得2分，得分是必须找到这两大主要问题：\r
        \r
        1.
        (1 分) 你是否描述书写*整个*程序的实际*迭代*过程 - "增加和迭代" 表示你依照测试，反省或合作伙伴的回馈持续改善你的程序.\r
        \r
        2.
        (1 分) 在编写代码时，你是否及时真实描述这*两*点, 具体的问题是什么，你是如何通过*反省*或并入互动的合作伙伴的反馈来解决此问题的。\r
        \r
        这里是实际计分指南:\r
        \r
        ![](https://images.code.org/1cb4a1840d281a9c5c5096becc8c9054-image-1507827422107.png)\r
        \r
        ##
        现在你来试试\r
        \r
        试着对此AP 提示写你的反应，可以是你是怎么相出雪花绘制程序的想法，或者是你是如何解决3x3 格子程序的。你可能需要使用一点想象力，假设这是你自己创建的更大的程序的一部分. 这里的重点是*练习编写*开发过程.\r
        \r
        备注:
        想这样的反应需要花点时间来思考和起草。
      U3-AP-Practice-FR-manage-complexity: |-
        # AP 练习- 表演任务响应\\r

        \\r
        AP 创建表演任务要求你编写一个你开发并写入代码中的抽象。大多数情况下，这意味着确定一个你编写的函数或过程来帮助在你的程序中"管理复杂性"。\\r
        \\r
        这是创建表演任务中的提示：\\r \\r

        <div style="width: 70%; margin: auto;
        background-color: #EEEEEE; padding: 10px; font-family: serif; font-size: 12pt">\r
        \r
        <b>2d.</b>
        捕获并粘贴一个程序代码段，它包含你单独开发的抽象（用一个<b>长方形</b>标记）。这种抽象必须集成数学和逻辑概念。解释你的抽象是如何帮助管理程序的复杂性的。\r
        <br>\r
        <i>(不超过200字)</i>\r
        \r
        </div>\r
        \r
        <br>\r
        \r
        下面是一个 "海底"程序的代码段，它含有一个围绕着标识抽象的代码的长方形。假设它是你编写的, 而且你在起草有关此抽象如何管理复杂性的AP 响应。 (注意: 忽略抽象将 "数学和逻辑概念" 集成到此实践响应的要求。 只需写关于管理复杂性的信息)。\r
        \r
        ![](https://images.code.org/d98fa58fce78eff86fd734f32e2960e4-image-1507913593511.png)\r
        \r
        解释在上面的代码中用长方形标记的抽象如何帮助管理此程序的复杂性。
      U3-AP-Practice-FR-manage-complexity_2018: |-
        # AP 练习- 表演任务响应\\r

        \\r
        AP 创建表演任务要求你编写一个你开发并写入代码中的抽象。大多数情况下，这意味着确定一个你编写的函数或过程来帮助在你的程序中"管理复杂性"。\\r
        \\r
        这是创建表演任务中的提示：\\r \\r

        <div style="width: 70%; margin: auto;
        background-color: #EEEEEE; padding: 10px; font-family: serif; font-size: 12pt">\r
        \r
        <b>2d.</b>
        捕获并粘贴一个程序代码段，它包含你单独开发的抽象（用一个<b>长方形</b>标记）。这种抽象必须集成数学和逻辑概念。解释你的抽象是如何帮助管理程序的复杂性的。\r
        <br>\r
        <i>(不超过200字)</i>\r
        \r
        </div>\r
        \r
        <br>\r
        \r
        下面是一个 "海底"程序的代码段，它含有一个围绕着标识抽象的代码的长方形。假设它是你编写的, 而且你在起草有关此抽象如何管理复杂性的AP 响应。 (注意: 忽略抽象将 "数学和逻辑概念" 集成到此实践响应的要求。 只需写关于管理复杂性的信息)。\r
        \r
        ![](https://images.code.org/d98fa58fce78eff86fd734f32e2960e4-image-1507913593511.png)\r
        \r
        解释在上面的代码中用长方形标记的抽象如何帮助管理此程序的复杂性。
      U3-AP-Practice-FR-manage-complexity_2019: |-
        # AP 练习- 表演任务响应\\r

        \\r
        AP 创建表演任务要求你编写一个你开发并写入代码中的抽象。大多数情况下，这意味着确定一个你编写的函数或过程来帮助在你的程序中"管理复杂性"。\\r
        \\r
        这是创建表演任务中的提示：\\r \\r

        <div style="width: 70%; margin: auto;
        background-color: #EEEEEE; padding: 10px; font-family: serif; font-size: 12pt">\r
        \r
        <b>2d.</b>
        捕获并粘贴一个程序代码段，它包含你单独开发的抽象（用一个<b>长方形</b>标记）。这种抽象必须集成数学和逻辑概念。解释你的抽象是如何帮助管理程序的复杂性的。\r
        <br>\r
        <i>(不超过200字)</i>\r
        \r
        </div>\r
        \r
        <br>\r
        \r
        下面是一个 "海底"程序的代码段，它含有一个围绕着标识抽象的代码的长方形。假设它是你编写的, 而且你在起草有关此抽象如何管理复杂性的AP 响应。 (注意: 忽略抽象将 "数学和逻辑概念" 集成到此实践响应的要求。 只需写关于管理复杂性的信息)。\r
        \r
        ![](https://images.code.org/d98fa58fce78eff86fd734f32e2960e4-image-1507913593511.png)\r
        \r
        解释在上面的代码中用长方形标记的抽象如何帮助管理此程序的复杂性。
      U3-AP-Practice-FR-score-abstraction-response: "# AP 练习\n\n-   计分表演任务答复\\\\r\n    \\\\r\n    在此设想中，想象**你正在对AP 表演任务响应计分。** 在下面我们显示学生们递交的代码以及他们对书写提示**2d** 的响应。\\\\r\n    \\\\r\n    这是提示：\\\\r\n    \\\\r\n    <div style=\"width: 80%; margin: auto;\n    background-color: #EEEEEE; padding: 10px; font-family: serif; font-size: 12pt\">\\r\n    \\r\n    <b>2d.</b>\n    捕获并粘贴一个程序代码段，它包含你单独开发的抽象 (用 <b>长方形</b>标记)。这种抽象必须集成数学和逻辑概念。解释你的抽象是如何帮助管理程序的复杂性的。\\r\n    \\r\n    <br>\\r\n    <i>(不得超过200字)</i>\\r \n    </div>\\r\n    <br>\\r\n    \\r\n    这里是学生们对右边所示的代码所编写的响应：\\r\n    \\r\n    <div style=\"width: 80%; margin:\n    auto; background-color: #d9eff7; padding: 10px; font-family: monospace; font-size:\n    12pt; line-height: 18pt; display: inline-block\">\\r\n    \\r\n    <img src=\"https://images.code.org/732ea3633d67312724382facaa281955-image-1507928836621.png\"\n    style=\"float: right; margin-right: 40px\">\\r\n    <strong>Student response:</strong><br>\\r\n    2d).\\r\n    我已经确定的抽象是程序里的一颗心. 整个程序用乌龟图形绘制一张图写着\"我 [heart] 计算机科学\"，而\n    [heart]实际上是一个心形状的画。因为我使用的是这些乌龟函数的参数化版本，它帮助管理这些代码的复杂性。如果没用这些参数，也是可以画出这张画的，但它会要求更多行的代码。比如： <code>arcRight(220,\n    30)</code>指令 - 它让乌龟移动 220-度的弧度和30-像素的半径\n-   要用一长串重复的 <code>moveForward</code>和  <code>turnRight</code>指令来完成也是可能的,但可能需要上百个. 通过使用 <code>arcRight</code>指令，我把代码应该要做的放在一行内部，这样就不需要在几百行代码里推断。\\\\r\n    </div>\\r\n    <div style=\"clear:\n    both\"></div>\\r\n    <br>\\r\n    使用计分指南（如下显示）来决定学生对抽象（行7和8）的每两个条件是否可以得分\\r\n    \\r\n    ![](https://images.code.org/478c762d2ac876b8b830caabd62c1571-image-1507929333152.png)\\r\n    \\r\n    #\n    你得分了\\r\n    计分指南的每行都值一分，因此2d 反应总共可以得到2 分。学生总共应该得到0, 1 还是 2 分?\\r\n    \\r\n    下面解释你应该如何计分，以及你应该或不应该对每行计分。引用计分指南中的具体标准证明你的答复。"
      U3-AP-Practice-FR-score-abstraction-response_2018: "# AP 练习\n\n-   计分表演任务答复\\\\r\n    \\\\r\n    在此设想中，想象**你正在对AP 表演任务响应计分。** 在下面我们显示学生们递交的代码以及他们对书写提示**2d** 的响应。\\\\r\n    \\\\r\n    这是提示：\\\\r\n    \\\\r\n    <div style=\"width: 80%; margin: auto;\n    background-color: #EEEEEE; padding: 10px; font-family: serif; font-size: 12pt\">\\r\n    \\r\n    <b>2d.</b>\n    捕获并粘贴一个程序代码段，它包含你单独开发的抽象 (用 <b>长方形</b>标记)。这种抽象必须集成数学和逻辑概念。解释你的抽象是如何帮助管理程序的复杂性的。\\r\n    \\r\n    <br>\\r\n    <i>(不得超过200字)</i>\\r \n    </div>\\r\n    <br>\\r\n    \\r\n    这里是学生们对右边所示的代码所编写的响应：\\r\n    \\r\n    <div style=\"width: 80%; margin:\n    auto; background-color: #d9eff7; padding: 10px; font-family: monospace; font-size:\n    12pt; line-height: 18pt; display: inline-block\">\\r\n    \\r\n    <img src=\"https://images.code.org/732ea3633d67312724382facaa281955-image-1507928836621.png\"\n    style=\"float: right; margin-right: 40px\">\\r\n    <strong>Student response:</strong><br>\\r\n    2d).\\r\n    我已经确定的抽象是程序里的一颗心. 整个程序用乌龟图形绘制一张图写着\"我 [heart] 计算机科学\"，而\n    [heart]实际上是一个心形状的画。因为我使用的是这些乌龟函数的参数化版本，它帮助管理这些代码的复杂性。如果没用这些参数，也是可以画出这张画的，但它会要求更多行的代码。比如： <code>arcRight(220,\n    30)</code>指令 - 它让乌龟移动 220-度的弧度和30-像素的半径\n-   要用一长串重复的 <code>moveForward</code>和  <code>turnRight</code>指令来完成也是可能的,但可能需要上百个. 通过使用 <code>arcRight</code>指令，我把代码应该要做的放在一行内部，这样就不需要在几百行代码里推断。\\\\r\n    </div>\\r\n    <div style=\"clear:\n    both\"></div>\\r\n    <br>\\r\n    使用计分指南（如下显示）来决定学生对抽象（行7和8）的每两个条件是否可以得分\\r\n    \\r\n    ![](https://images.code.org/478c762d2ac876b8b830caabd62c1571-image-1507929333152.png)\\r\n    \\r\n    #\n    你得分了\\r\n    计分指南的每行都值一分，因此2d 反应总共可以得到2 分。学生总共应该得到0, 1 还是 2 分?\\r\n    \\r\n    下面解释你应该如何计分，以及你应该或不应该对每行计分。引用计分指南中的具体标准证明你的答复。"
      U3-AP-Practice-FR-score-abstraction-response_2019: "# AP 练习\n\n-   计分表演任务答复\\\\r\n    \\\\r\n    在此设想中，想象**你正在对AP 表演任务响应计分。** 在下面我们显示学生们递交的代码以及他们对书写提示**2d** 的响应。\\\\r\n    \\\\r\n    这是提示：\\\\r\n    \\\\r\n    <div style=\"width: 80%; margin: auto;\n    background-color: #EEEEEE; padding: 10px; font-family: serif; font-size: 12pt\">\\r\n    \\r\n    <b>2d.</b>\n    捕获并粘贴一个程序代码段，它包含你单独开发的抽象 (用 <b>长方形</b>标记)。这种抽象必须集成数学和逻辑概念。解释你的抽象是如何帮助管理程序的复杂性的。\\r\n    \\r\n    <br>\\r\n    <i>(不得超过200字)</i>\\r \n    </div>\\r\n    <br>\\r\n    \\r\n    这里是学生们对右边所示的代码所编写的响应：\\r\n    \\r\n    <div style=\"width: 80%; margin:\n    auto; background-color: #d9eff7; padding: 10px; font-family: monospace; font-size:\n    12pt; line-height: 18pt; display: inline-block\">\\r\n    \\r\n    <img src=\"https://images.code.org/732ea3633d67312724382facaa281955-image-1507928836621.png\"\n    style=\"float: right; margin-right: 40px\">\\r\n    <strong>Student response:</strong><br>\\r\n    2d).\\r\n    我已经确定的抽象是程序里的一颗心. 整个程序用乌龟图形绘制一张图写着\"我 [heart] 计算机科学\"，而\n    [heart]实际上是一个心形状的画。因为我使用的是这些乌龟函数的参数化版本，它帮助管理这些代码的复杂性。如果没用这些参数，也是可以画出这张画的，但它会要求更多行的代码。比如： <code>arcRight(220,\n    30)</code>指令 - 它让乌龟移动 220-度的弧度和30-像素的半径\n-   要用一长串重复的 <code>moveForward</code>和  <code>turnRight</code>指令来完成也是可能的,但可能需要上百个. 通过使用 <code>arcRight</code>指令，我把代码应该要做的放在一行内部，这样就不需要在几百行代码里推断。\\\\r\n    </div>\\r\n    <div style=\"clear:\n    both\"></div>\\r\n    <br>\\r\n    使用计分指南（如下显示）来决定学生对抽象（行7和8）的每两个条件是否可以得分\\r\n    \\r\n    ![](https://images.code.org/478c762d2ac876b8b830caabd62c1571-image-1507929333152.png)\\r\n    \\r\n    #\n    你得分了\\r\n    计分指南的每行都值一分，因此2d 反应总共可以得到2 分。学生总共应该得到0, 1 还是 2 分?\\r\n    \\r\n    下面解释你应该如何计分，以及你应该或不应该对每行计分。引用计分指南中的具体标准证明你的答复。"
      U3L01 Assessment1: 想想你为今天的活动设计的算法。指出两个例子说明可能有多种方法来指令你的说明并建议可以用来改善他们清晰度的方法。\\r
      U3L01 Assessment1_2018: 想想你为今天的活动设计的算法。指出两个例子说明可能有多种方法来指令你的说明并建议可以用来改善他们清晰度的方法。\\r
      U3L01 Assessment1_2019: 想想你为今天的活动设计的算法。指出两个例子说明可能有多种方法来指令你的说明并建议可以用来改善他们清晰度的方法。\\r
      U3L01 Assessment3: 描述编程语言和你日常生活中每天使用的语言的不同的特征，解释为什么编程语言必须以这种方式创建。\\r
      U3L01 Assessment3_2018: 描述编程语言和你日常生活中每天使用的语言的不同的特征，解释为什么编程语言必须以这种方式创建。\\r
      U3L01 Assessment3_2019: 描述编程语言和你日常生活中每天使用的语言的不同的特征，解释为什么编程语言必须以这种方式创建。\\r
      U3L02 Assessment: |-
        本课介绍了编程中"效率"的概念, 以及它可能在不同的时间意味着不同的事情。试想一下计算机科学_之外_的一个你听到 "效率" 这个词的例子，并将其与我们在编程里谈到的效率进行了比较。\\r
        \\r
        "效率"在哪个方面他们两者是一样的？哪些方面是不一样?
      U3L02 Assessment_2018: |-
        本课介绍了编程中"效率"的概念, 以及它可能在不同的时间意味着不同的事情。试想一下计算机科学_之外_的一个你听到 "效率" 这个词的例子，并将其与我们在编程里谈到的效率进行了比较。\\r
        \\r
        "效率"在哪个方面他们两者是一样的？哪些方面是不一样?
      U3L02 Assessment_2019: |-
        本课介绍了编程中"效率"的概念, 以及它可能在不同的时间意味着不同的事情。试想一下计算机科学_之外_的一个你听到 "效率" 这个词的例子，并将其与我们在编程里谈到的效率进行了比较。\\r
        \\r
        "效率"在哪个方面他们两者是一样的？哪些方面是不一样?
      U3L03 Free Response Wrap Up: 用你自己的话至少说出一个原因，为什么计算机语言有函数。并用你这节课上的一个例子来说明。\\r
      U3L03 Free Response Wrap Up_2018: 用你自己的话至少说出一个原因，为什么计算机语言有函数。并用你这节课上的一个例子来说明。\\r
      U3L03 Free Response Wrap Up_2019: 用你自己的话至少说出一个原因，为什么计算机语言有函数。并用你这节课上的一个例子来说明。\\r
      U3L04 Assessment1: |-
        思考下面的图形。用自上而下的思维来设计一个解决方案。在提供的空间里，写下**只有名字**的函数列表，这些函数是你用来画出这个图形的程序。（假设长线段是乌龟移动6次那么长）。\\r
        \\r
        ![](https://images.code.org/43895f8ceccb12f72e7f5ba03152a6e6-image-1441914144956.png)\\r
      U3L04 Assessment1_2018: |-
        思考下面的图形。用自上而下的思维来设计一个解决方案。在提供的空间里，写下**只有名字**的函数列表，这些函数是你用来画出这个图形的程序。（假设长线段是乌龟移动6次那么长）。\\r
        \\r
        ![](https://images.code.org/43895f8ceccb12f72e7f5ba03152a6e6-image-1441914144956.png)\\r
      U3L04 Assessment1_2019: |-
        思考下面的图形。用自上而下的思维来设计一个解决方案。在提供的空间里，写下**只有名字**的函数列表，这些函数是你用来画出这个图形的程序。（假设长线段是乌龟移动6次那么长）。\\r
        \\r
        ![](https://images.code.org/43895f8ceccb12f72e7f5ba03152a6e6-image-1441914144956.png)\\r
      U3L04 Free Response Wrap Up: 在创建表演任务时，你会被要求找到程序的抽象，并解释它时如何帮助管理程序的复杂性。函数是抽象的一种形式。找一个你写的解决3乘3正方形问题的函数，并解释它是如何帮助管理程序的复杂性的。
      U3L04 Free Response Wrap Up_2018: 在创建表演任务时，你会被要求找到程序的抽象，并解释它时如何帮助管理程序的复杂性。函数是抽象的一种形式。找一个你写的解决3乘3正方形问题的函数，并解释它是如何帮助管理程序的复杂性的。
      U3L04 Free Response Wrap Up_2019: 在创建表演任务时，你会被要求找到程序的抽象，并解释它时如何帮助管理程序的复杂性。函数是抽象的一种形式。找一个你写的解决3乘3正方形问题的函数，并解释它是如何帮助管理程序的复杂性的。
      U3L06 Assessment: 据说，_有参数的函数概括了更多的特定的命令，允许程序员用函数来代替重复的代码。_用turnLeft() 和turnLeft(angle) 的不同作为例子，来解释这是什么意思。\\r
      U3L06 Assessment_2018: 据说，_有参数的函数概括了更多的特定的命令，允许程序员用函数来代替重复的代码。_用turnLeft() 和turnLeft(angle) 的不同作为例子，来解释这是什么意思。\\r
      U3L06 Assessment_2019: 据说，_有参数的函数概括了更多的特定的命令，允许程序员用函数来代替重复的代码。_用turnLeft() 和turnLeft(angle) 的不同作为例子，来解释这是什么意思。\\r
      U3L07 - allSeaGrass: |-
        # 添加海草

        <img src="https://images.code.org/a67f893ea9187b253ec4f6abcb16b7cf-image-1443048301130.30.42
        PM.png" style="width: 200px; float: right">
        新版本的`drawSeagrass`（画海草）现在用随机高度画出了单条海草。现在让我们用循环在`drawAllSeagrass`（画所有的还早）里用它填满整个海底。

        # 这样做：

        -   **添加一个`计数循环`**到`drawAllSeagrass`里，用更新后的`drawSeagrass`函数，来画大约**50条海草**。
      U3L07 - allSeaGrass_2018: |-
        # 添加海草\\r

        <img src="https://images.code.org/a67f893ea9187b253ec4f6abcb16b7cf-image-1443048301130.30.42
        PM.png" style="width: 200px; float: right">\\r
        新版本的`drawSeagrass`（画海草）现在用随机高度画出了单条海草。现在让我们用循环在`drawAllSeagrass`（画所有的还早）里用它填满整个海底。\\r
        \\r

        # 这样做：\\r

        \\r
        \*
        **添加一个`计数循环`**到`drawAllSeagrass`里，用更新后的`drawSeagrass`函数，来画大约**50条海草**。
      U3L07 - allSeaGrass_2019: |-
        # 添加海草\\r

        <img src="https://images.code.org/a67f893ea9187b253ec4f6abcb16b7cf-image-1443048301130.30.42
        PM.png" style="width: 200px; float: right">\\r
        新版本的`drawSeagrass`（画海草）现在用随机高度画出了单条海草。现在让我们用循环在`drawAllSeagrass`（画所有的还早）里用它填满整个海底。\\r
        \\r

        # 这样做：\\r

        \\r
        \*
        **添加一个`计数循环`**到`drawAllSeagrass`里，用更新后的`drawSeagrass`函数，来画大约**50条海草**。
      U3L07 - fish: "# 增加鱼\\\\r\n\n\\\\r\n你要写的下一个高层函数是`drawAllFish`（画所有鱼）。这里已经有一个有参数的`drawFish`（画鱼）函数提供给你了。\\\\r\n\\\\r \n\n# 这样做：\\\\r\n\n\\\\r\n\n-   **阅读** `drawFish`函数，来直到它是如何工作的，以及接收哪些**参数**。\\\\r\n    \\\\r \\* **增加一个循环**来`drawAllFish`。\\\\r\n    \\\\r \\* **把这些函数里已有的命令放入你的循环。** 这样做你的代码将会在图片**顶部的360个像素**周围**随机移动乌龟**，并且用`drawFish`以**5到20**之间随机的大小画**15条鱼** 。\\\\r\n    \\\\r \\*一旦你的循环可以工作，就试着用随机的`red`、`green`、 `blue`参数调用`drawFish`来得到不同颜色的鱼。\\\\r\n    \\\\r\n    ![](<https://images.code.org/cbbb8e02c14cbc2d199ede4531090513-image-1443046439253.12.35 PM.png>)"
      U3L07 - fish_2018: "# 增加鱼\\\\r\n\n\\\\r\n你要写的下一个高层函数是`drawAllFish`（画所有鱼）。这里已经有一个有参数的`drawFish`（画鱼）函数提供给你了。\\\\r\n\\\\r \n\n# 这样做：\\\\r\n\n\\\\r\n\n-   **阅读** `drawFish`函数，来直到它是如何工作的，以及接收哪些**参数**。\\\\r\n    \\\\r \\* **增加一个循环**来`drawAllFish`。\\\\r\n    \\\\r \\* **把这些函数里已有的命令放入你的循环。** 这样做你的代码将会在图片**顶部的360个像素**周围**随机移动乌龟**，并且用`drawFish`以**5到20**之间随机的大小画**15条鱼** 。\\\\r\n    \\\\r \\*一旦你的循环可以工作，就试着用随机的`red`、`green`、 `blue`参数调用`drawFish`来得到不同颜色的鱼。\\\\r\n    \\\\r\n    ![](<https://images.code.org/cbbb8e02c14cbc2d199ede4531090513-image-1443046439253.12.35 PM.png>)"
      U3L07 - fish_2019: "# 增加鱼\\\\r\n\n\\\\r\n你要写的下一个高层函数是`drawAllFish`（画所有鱼）。这里已经有一个有参数的`drawFish`（画鱼）函数提供给你了。\\\\r\n\\\\r \n\n# 这样做：\\\\r\n\n\\\\r\n\n-   **阅读** `drawFish`函数，来直到它是如何工作的，以及接收哪些**参数**。\\\\r\n    \\\\r \\* **增加一个循环**来`drawAllFish`。\\\\r\n    \\\\r \\* **把这些函数里已有的命令放入你的循环。** 这样做你的代码将会在图片**顶部的360个像素**周围**随机移动乌龟**，并且用`drawFish`以**5到20**之间随机的大小画**15条鱼** 。\\\\r\n    \\\\r \\*一旦你的循环可以工作，就试着用随机的`red`、`green`、 `blue`参数调用`drawFish`来得到不同颜色的鱼。\\\\r\n    \\\\r\n    ![](<https://images.code.org/cbbb8e02c14cbc2d199ede4531090513-image-1443046439253.12.35 PM.png>)"
      U3L07 - loopsWithRandom_2018: |-
        # 使用多重循环\\r

        \\r
        有些复杂的任务不容易用一个循环解决。你需要用**一个接一个的循环**，每一个结局一部分问题。
        \\r
        \\r

        # 这样做：\\r

        \\r
        增加一个循环来用半透明的白点覆盖屏幕直到原来的点都被"擦掉"。\\r
        \\r
        <img src="https://images.code.org/329912b3c61cc62acbd36035ff4b823a-image-1443109101866.gif"
        style="float: right; width: 100px">\\r

        -   **拖动**第二个循环到你的代码里。这个将在第一个之后运行。\\r
        -   **增加**命令来在随机的位置画点。这些点是白色的，不透明度设置为0.5.\\r
        -   **增加重复次数**直到有颜色的点完全被擦除。需要多少次？\\r
            \\r
            提示：你可以复制／粘贴原来的循环，只需要改变点的颜色和重复的次数。
      U3L07 - loopsWithRandom_2019: |-
        # 使用多重循环\\r

        \\r
        有些复杂的任务不容易用一个循环解决。你需要用**一个接一个的循环**，每一个结局一部分问题。
        \\r
        \\r

        # 这样做：\\r

        \\r
        增加一个循环来用半透明的白点覆盖屏幕直到原来的点都被"擦掉"。\\r
        \\r
        <img src="https://images.code.org/329912b3c61cc62acbd36035ff4b823a-image-1443109101866.gif"
        style="float: right; width: 100px">\\r

        -   **拖动**第二个循环到你的代码里。这个将在第一个之后运行。\\r
        -   **增加**命令来在随机的位置画点。这些点是白色的，不透明度设置为0.5.\\r
        -   **增加重复次数**直到有颜色的点完全被擦除。需要多少次？\\r
            \\r
            提示：你可以复制／粘贴原来的循环，只需要改变点的颜色和重复的次数。
      U3L07 - seaStar: |-
        # 增加海星\\r

        \\r
        通过编写`drawAllSeaStars`（画所有海星），我们已经能在图片里画海星了。会议我们已经写过的循环，来画出更多复杂的海星。\\r
        \\r

        # 这样做：\\r

        \\r

        -   **阅读**`drawSeaStar`函数，来明白它的原理，接受什么样的**参数**。\\r
            \\r
        -   **第一：修改** `drawSeaStar`函数使用`计数循环`\\r
            \\r
            \\t\* `drawSeaStar`有一部分很长的代码是在重复单个命令。\\r
            -   找到这个规律，并"用循环来"包起来，这样重复的代码就能通过循环完成了，而不是很多行函数调用了。\\r
                \\r
        -   **第二：增加循环**到`drawAllSeaStars`.\\r
            \\r
            \\t\* **将函数里的命令放到循环里。**这样，你的代码会在图像**底部的像素（y值在360到450之间）**之间**随机移动乌龟**。\\r
            \\r
        -   \*
            用`drawSeaStar`来**画5个海星**，它们的尺寸在随机的**10到30**之间。\\r
            \\r
            \!\[](\<<https://images.code.org/1aadf83bcecaf5ca6c505e46d43e5f45-image-1443046811335.20.04>
            PM.png>)
      U3L07 - seaStar_2018: |-
        # 增加海星\\r

        \\r
        通过编写`drawAllSeaStars`（画所有海星），我们已经能在图片里画海星了。会议我们已经写过的循环，来画出更多复杂的海星。\\r
        \\r

        # 这样做：\\r

        \\r

        -   **阅读**`drawSeaStar`函数，来明白它的原理，接受什么样的**参数**。\\r
            \\r
        -   **第一：修改** `drawSeaStar`函数使用`计数循环`\\r
            \\r
            \\t\* `drawSeaStar`有一部分很长的代码是在重复单个命令。\\r
            -   找到这个规律，并"用循环来"包起来，这样重复的代码就能通过循环完成了，而不是很多行函数调用了。\\r
                \\r
        -   **第二：增加循环**到`drawAllSeaStars`.\\r
            \\r
            \\t\* **将函数里的命令放到循环里。**这样，你的代码会在图像**底部的像素（y值在360到450之间）**之间**随机移动乌龟**。\\r
            \\r
        -   \*
            用`drawSeaStar`来**画5个海星**，它们的尺寸在随机的**10到30**之间。\\r
            \\r
            \!\[](\<<https://images.code.org/1aadf83bcecaf5ca6c505e46d43e5f45-image-1443046811335.20.04>
            PM.png>)
      U3L07 - seaStar_2019: |-
        # 增加海星\\r

        \\r
        通过编写`drawAllSeaStars`（画所有海星），我们已经能在图片里画海星了。会议我们已经写过的循环，来画出更多复杂的海星。\\r
        \\r

        # 这样做：\\r

        \\r

        -   **阅读**`drawSeaStar`函数，来明白它的原理，接受什么样的**参数**。\\r
            \\r
        -   **第一：修改** `drawSeaStar`函数使用`计数循环`\\r
            \\r
            \\t\* `drawSeaStar`有一部分很长的代码是在重复单个命令。\\r
            -   找到这个规律，并"用循环来"包起来，这样重复的代码就能通过循环完成了，而不是很多行函数调用了。\\r
                \\r
        -   **第二：增加循环**到`drawAllSeaStars`.\\r
            \\r
            \\t\* **将函数里的命令放到循环里。**这样，你的代码会在图像**底部的像素（y值在360到450之间）**之间**随机移动乌龟**。\\r
            \\r
        -   \*
            用`drawSeaStar`来**画5个海星**，它们的尺寸在随机的**10到30**之间。\\r
            \\r
            \!\[](\<<https://images.code.org/1aadf83bcecaf5ca6c505e46d43e5f45-image-1443046811335.20.04>
            PM.png>)
      U3L07 Free Response Reflection: |-
        当分解问题时，你会经常遇到会在代码中重复使用的元素。有时，适合写一个新函数；有时适合写一个循环。\\r
        \\r
        没有一成不变的规则说哪种方法更好，但是你觉得该如何呢？什么样的情况下，你会写一个函数，又在什么情况下使用循环呢？\\r
        \\r
      U3L07 Free Response Reflection_2018: |-
        当分解问题时，你会经常遇到会在代码中重复使用的元素。有时，适合写一个新函数；有时适合写一个循环。\\r
        \\r
        没有一成不变的规则说哪种方法更好，但是你觉得该如何呢？什么样的情况下，你会写一个函数，又在什么情况下使用循环呢？\\r
        \\r
      U3L07 Free Response Reflection_2019: |-
        当分解问题时，你会经常遇到会在代码中重复使用的元素。有时，适合写一个新函数；有时适合写一个循环。\\r
        \\r
        没有一成不变的规则说哪种方法更好，但是你觉得该如何呢？什么样的情况下，你会写一个函数，又在什么情况下使用循环呢？\\r
        \\r
      U3L08 - introUnderTheSea - clone for recovery: |-
        # 恢复海底工程代码！\\r

        \\r
        在下面你应该看到计算机科学原理单元3 - 课程8 里的海底项目的代码 - 它的状态是在大约东部时间 3pm, 星期一 2017年10月30日。\\r
        \\r
        \*\*学生: \*\* 把下面的代码放回到单元 3-课程 8里... \\r

        -   从下面的工作区中选择所有代码 (用鼠标强调, 或使用 ctrl + A) \\r
        -   复制 (编辑-> 拷贝, 或 ctrl+ C) \\r
        -   将其粘贴 (编辑-> 粘贴或 ctrl + V) 到单元 3的项目中 \\r
        -   这里是一个将在新窗口中打开的项目的链接：<a href="https://studio.code.org/s/csp3/stage/8/puzzle/17"
            target=_blank>https\://studio.code.org/s/csp3/stage/8/puzzle/17</a>\\r
            \\r
            \*\*教师: \*\* 你可以使用蓝色教师托盘在这里查看学生的作业。 或者, 你也可以要求学生使用上面的流程。\\r
            \*\* 详细信息: \*\* \\r
        -   海底代码是一个"项目"，它在单元3，课程8里的第八关（“水泡”）10-17 后面。\\r
        -   在 2017年10月30日, 我们更新了那个项目导致代码在更新前，无法显示给那些已经提前做好作业的人。\\r
        -   你的代码仍然存在！只是它关联在下面提供的旧项目。\\r
        -   你可以将代码从下面复制并粘贴到当前单元3、课程8、关卡10-17中，它将对所有关卡起作用。(换言之, 关卡17的代码实际上是与关卡10-17 相同)\\r
            \\r
            我们对这个错误可能造成的不便和失望感到非常抱歉。希望你能够恢复你辛苦工作的代码。\\r
            \\r
            如果你有进一步的问题, 请提交一个缺陷报告 (选项在右上菜单) 或发送电子邮件到 support@code.org\\r
            \\r
            谢谢, \\r
            \\r
            计算机科学原理团队
      U3L08 - introUnderTheSea with comments: |-
        # 在海里！\\r

        \\r
        在下面的几个挑战中，你会改进**一个程序**，来画海底场景。每次你完成一关，进入下一关，你的代码都会一起过去。你会得到新的指令来告诉你加什么。**通读**提供给你的程序，来对要做什么有个基本的理解。\\r
        \\r

        # 这样做：\\r

        \\r

        -   **添加函数调用**到程序的最上面，来让**两条鱼，两条海星和两块海草**出现在场景的某个地方。在这个阶段，你不需要提供参数的值。\\r
            \\r
        -   **提示：**你需要在画第二条鱼、海星或海草之前调用`moveTo`，否则，你不会看见第二个，因为它会完全盖住一样的第一个。 -- 这些函数画的东西都基于调用前乌龟的位置。\\r
            \\r
        -   \*
            测试你的代码。如果有什么不像你想的那样工作，考虑是否能加什么东西到函数的定义里来，让它变得更好。\\r
            \\r
        -   \*
            **继续**到下一关，**你的代码会在那里等你。**\\r
            \\r
            \!\[](\<<https://images.code.org/a53accb7edf7ed4e09d56bab903e1af9-image-1442604192660.22.35>
            PM.png>)
      U3L08 - randomInput: |-
        # 随机输入\\r

        \\r
        你有一个新的模块，它可以让你生成一个随机数。每次调用函数时, 都可以用它而不必硬编码数值。\\r
        \\r
        ![](https://images.code.org/5ff13bfdf582692f009b787570d467d0-image-1470145136252.png)\\r
        \\r
        **请阅读 randomNumber（随机数字） 模块的文档**。\\r
        \\r

        # 这样做\\r

        -   使用 randomNumber （随机数字）提供随机输入\*_给_所有3个\*绘图函数。
            只在需要的地方插入`randomNumber()`（随机数字）调用，其它地方还是数字。\\r
            \\r
            就像这样：\\r
            ![](https://images.code.org/ad87d7d122ac585a6de9e46a49736228-image-1470146652402.png)\\r
            \\r
            在所有三个绘图函数中调用 randomNumber（随机数字）：\\r
            \\r
        -   drawStarfish（画海星）\\r
        -   drawSeagrass（画海草）\\r
        -   drawFish（画鱼）\\r
            \\r
            这是一个很好的**测试**函数，同时又能得到一些**有趣的图像**的方法。每次运行程序时, 你都可以得到和下面的稍微有点不同的画面。\\r
            \\r
            ![](https://images.code.org/d2031f555ed23bcfa4a6a6165074b559-image-1442852053630.png)
      U3L08 - randomInput_2018: |-
        # 随机输入\\r

        \\r
        你有一个新的模块，它可以让你生成一个随机数。每次调用函数时, 都可以用它而不必硬编码数值。\\r
        \\r
        ![](https://images.code.org/5ff13bfdf582692f009b787570d467d0-image-1470145136252.png)\\r
        \\r
        **请阅读 randomNumber（随机数字） 模块的文档**。\\r
        \\r

        # 这样做\\r

        -   使用 randomNumber （随机数字）提供随机输入\*_给_所有3个\*绘图函数。
            只在需要的地方插入`randomNumber()`（随机数字）调用，其它地方还是数字。\\r
            \\r
            就像这样：\\r
            ![](https://images.code.org/ad87d7d122ac585a6de9e46a49736228-image-1470146652402.png)\\r
            \\r
            在所有三个绘图函数中调用 randomNumber（随机数字）：\\r
            \\r
        -   drawStarfish（画海星）\\r
        -   drawSeagrass（画海草）\\r
        -   drawFish（画鱼）\\r
            \\r
            这是一个很好的**测试**函数，同时又能得到一些**有趣的图像**的方法。每次运行程序时, 你都可以得到和下面的稍微有点不同的画面。\\r
            \\r
            ![](https://images.code.org/d2031f555ed23bcfa4a6a6165074b559-image-1442852053630.png)
      U3L08 - randomInput_2019: |-
        # 随机输入\\r

        \\r
        你有一个新的模块，它可以让你生成一个随机数。每次调用函数时, 都可以用它而不必硬编码数值。\\r
        \\r
        ![](https://images.code.org/5ff13bfdf582692f009b787570d467d0-image-1470145136252.png)\\r
        \\r
        **请阅读 randomNumber（随机数字） 模块的文档**。\\r
        \\r

        # 这样做\\r

        -   使用 randomNumber （随机数字）提供随机输入\*_给_所有3个\*绘图函数。
            只在需要的地方插入`randomNumber()`（随机数字）调用，其它地方还是数字。\\r
            \\r
            就像这样：\\r
            ![](https://images.code.org/ad87d7d122ac585a6de9e46a49736228-image-1470146652402.png)\\r
            \\r
            在所有三个绘图函数中调用 randomNumber（随机数字）：\\r
            \\r
        -   drawStarfish（画海星）\\r
        -   drawSeagrass（画海草）\\r
        -   drawFish（画鱼）\\r
            \\r
            这是一个很好的**测试**函数，同时又能得到一些**有趣的图像**的方法。每次运行程序时, 你都可以得到和下面的稍微有点不同的画面。\\r
            \\r
            ![](https://images.code.org/d2031f555ed23bcfa4a6a6165074b559-image-1442852053630.png)
      U3L08 Assessment2: |-
        "抽象" 通常用于专注于一般情况，而忽略问题的特定实例。\\r
        \\r
        基于这个词的含义, 参数和函数是如何作为抽象的例子？
      U3L08 Assessment2_2018: |-
        "抽象" 通常用于专注于一般情况，而忽略问题的特定实例。\\r
        \\r
        基于这个词的含义, 参数和函数是如何作为抽象的例子？
      U3L08 Assessment2_2019: |-
        "抽象" 通常用于专注于一般情况，而忽略问题的特定实例。\\r
        \\r
        基于这个词的含义, 参数和函数是如何作为抽象的例子？
      U3L08 how to add comments: |-
        # 现在试试 - 添加注释\\r

        \\r
        初始的代码已经提供了一些注释了。\\r
        \\r

        # 这样做\\r

        \\r
        在调用`drawStarfish()`（画海星）前插入一条注释，`// 画所有的海星`。\\r
        \\r

        -   `// Comment`（注释）模块在函数工具箱中
            ([Show me](#triggercallout=show_comment))\\r
        -   **看看怎么做：**\\r
            ![expandable](https://images.code.org/1f97df1d6fc1ca2d5bd371ad7b0f76a3-image-1508960669302.gif)\\r
            \\r
            一旦你添加了注释后，**点击完成**。要接着添加注释！！！
      U3L08 how to add comments_2018: |-
        # 现在试试 - 添加注释\\r

        \\r
        初始的代码已经提供了一些注释了。\\r
        \\r

        # 这样做\\r

        \\r
        在调用`drawStarfish()`（画海星）前插入一条注释，`// 画所有的海星`。\\r
        \\r

        -   `// Comment`（注释）模块在函数工具箱中
            ([Show me](#triggercallout=show_comment))\\r
        -   **看看怎么做：**\\r
            ![expandable](https://images.code.org/1f97df1d6fc1ca2d5bd371ad7b0f76a3-image-1508960669302.gif)\\r
            \\r
            一旦你添加了注释后，**点击完成**。要接着添加注释！！！
      U3L08 how to add comments_2019: |-
        # 现在试试 - 添加注释\\r

        \\r
        初始的代码已经提供了一些注释了。\\r
        \\r

        # 这样做\\r

        \\r
        在调用`drawStarfish()`（画海星）前插入一条注释，`// 画所有的海星`。\\r
        \\r

        -   `// Comment`（注释）模块在函数工具箱中
            ([Show me](#triggercallout=show_comment))\\r
        -   **看看怎么做：**\\r
            ![expandable](https://images.code.org/1f97df1d6fc1ca2d5bd371ad7b0f76a3-image-1508960669302.gif)\\r
            \\r
            一旦你添加了注释后，**点击完成**。要接着添加注释！！！
      U3L2 Using Simple Commands: |-
        <img
        src="https://images.code.org/0aca9e3ba0945f31ddd56438a45ed69c-image-1436286498758.png"
        align=right>

        只用4个乌龟命令，在应用实验室写代码来完成下面每个画图挑战。目标是用尽可能高效的代码，只用提供的命令来解决问题。

        "高效"的意思是什么？在计算机科学中，根据不同的出发点，这意味着不同的事情。在这些挑战上，用你觉得最好的方法来解决，我们会在最后来提出关于效率的问题。

        <img src="https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif"
        align=right>

        # 这样做：

        用尽可能高效的办法在乌龟的左前方画一个 1x1 的正方形。程序在停止时，乌龟应该在出发的位置，并面朝原来的方向。

        一旦你觉得找到了解决方案，点击完成 - 它会在你运行了程序之后出现。
      U3L2 Using Simple Commands_2018: |-
        <img
        src="https://images.code.org/0aca9e3ba0945f31ddd56438a45ed69c-image-1436286498758.png"
        align=right>

        只用4个乌龟命令，在应用实验室写代码来完成下面每个画图挑战。目标是用尽可能高效的代码，只用提供的命令来解决问题。

        "高效"的意思是什么？在计算机科学中，根据不同的出发点，这意味着不同的事情。在这些挑战上，用你觉得最好的方法来解决，我们会在最后来提出关于效率的问题。

        <img src="https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif"
        align=right>

        # 这样做：

        用尽可能高效的办法在乌龟的左前方画一个 1x1 的正方形。程序在停止时，乌龟应该在出发的位置，并面朝原来的方向。

        一旦你觉得找到了解决方案，点击完成 - 它会在你运行了程序之后出现。
      U3L2 Using Simple Commands_2019: |-
        <img
        src="https://images.code.org/0aca9e3ba0945f31ddd56438a45ed69c-image-1436286498758.png"
        align=right>

        只用4个乌龟命令，在应用实验室写代码来完成下面每个画图挑战。目标是用尽可能高效的代码，只用提供的命令来解决问题。

        "高效"的意思是什么？在计算机科学中，根据不同的出发点，这意味着不同的事情。在这些挑战上，用你觉得最好的方法来解决，我们会在最后来提出关于效率的问题。

        <img src="https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif"
        align=right>

        # 这样做：

        用尽可能高效的办法在乌龟的左前方画一个 1x1 的正方形。程序在停止时，乌龟应该在出发的位置，并面朝原来的方向。

        一旦你觉得找到了解决方案，点击完成 - 它会在你运行了程序之后出现。
      U4 - CreateRecord - 3_2018: |-
        ＃记录是对象

        **什么是记录？**
        在数据库术语中，存储在表中的每项条目称为一条**记录**。这就是为什么该模块被称为`createRecord`(创建记录）。在应用实验室中，**一条记录是一个对象**，而数据表本质上是存储在云中的JavaScript对象的集合。

        **`createRecord`的第二个参数**是存储在数据库中的对象。

        -   正如所看到的，可以使用这样的符号来指定对象：`{name：“Alice”}`（名字：爱丽丝）
        -   但是可以**提供一个对象变量**并且将整个对象存储起来。
        -   应用实验室 **为对象的每个属性创建一个列。**

        ＃ 这样做：

        **初始代码已提供**，用于创建代表歌曲的简单JavaScript对象。

        -   拖出`createRecord`模块。
        -   **将表格名称**（第一个参数）设置为描述性内容，如“mySongs”。
        -   **将第二个参数**设置为要存储的对象的名称，在本例中为“song”(歌曲)。
        -   **运行程序。**
        -   在数据浏览器中**验证是否创建了一个新表，并且将`song`对象添加为记录**。

        ![](https://images.code.org/d587a1bc977f54d132acafa63764d813-image-1449241390939.gif)
      U4 - CreateRecord - 3_2019: |-
        ＃记录是对象

        **什么是记录？**
        在数据库术语中，存储在表中的每项条目称为一条**记录**。这就是为什么该模块被称为`createRecord`(创建记录）。在应用实验室中，**一条记录是一个对象**，而数据表本质上是存储在云中的JavaScript对象的集合。

        **`createRecord`的第二个参数**是存储在数据库中的对象。

        -   正如所看到的，可以使用这样的符号来指定对象：`{name：“Alice”}`（名字：爱丽丝）
        -   但是可以**提供一个对象变量**并且将整个对象存储起来。
        -   应用实验室 **为对象的每个属性创建一个列。**

        ＃ 这样做：

        **初始代码已提供**，用于创建代表歌曲的简单JavaScript对象。

        -   拖出`createRecord`模块。
        -   **将表格名称**（第一个参数）设置为描述性内容，如“mySongs”。
        -   **将第二个参数**设置为要存储的对象的名称，在本例中为“song”(歌曲)。
        -   **运行程序。**
        -   在数据浏览器中**验证是否创建了一个新表，并且将`song`对象添加为记录**。

        ![](https://images.code.org/d587a1bc977f54d132acafa63764d813-image-1449241390939.gif)
      U4 - Objects - Template Contacts: "![](https://images.code.org/e5a08f29a9c4e306de5553dafca9fb5d-image-1467913845542.gif)"
      U4 - Objects - Template Contacts_2018: "![](https://images.code.org/e5a08f29a9c4e306de5553dafca9fb5d-image-1467913845542.gif)"
      U4 - Objects - Template Contacts_2019: "![](https://images.code.org/e5a08f29a9c4e306de5553dafca9fb5d-image-1467913845542.gif)"
      U4 Model App: "# 这是U4模型应用的模板"
      U4 Model App_2018: "# 这是U4模型应用的模板"
      U4 Model App_2019: "# 这是U4模型应用的模板"
      U4 Model Design 1: |-
        <div markdown="1" style="float:
        right; margin: 20px;">\r
        \r
        ![expandable](https://curriculum.code.org/media/screen_model.png)\r
        \r
        <br/>\r
        \r
        点击展开\r
        \r
        </div>\r
        \r
        # 创建一个数字原型\r
        \r
        使用右侧的原型（点击图片来放大）你将会
        为示例应用“Recycling Finder”（回收查找者）创建一个数字原型。我们
        已经为你加入了一些元素，包含标题，但是它
        看起来还不完整。我们后面涵盖这里面的的每个元素，但
        现在我们 **先着重标题**.\r
        \r
        <!--<img src="https://images.code.org/66633526e03550bedb8503fefdc2ece3-image-1502921575904.png"
        style="width: 300px; float: right; clear: both;">-->\r
        \r
        # 这样做\r
        \r
        *
        **确认你在设计模式中，**开关出现在你应用窗口上方
        的左面。\r
        * **点击标题文字**来查看它的属性。\r
        *
        **更改属性“text”（文字）**为“回收查找者”.\r
        * **更改“font size”（字体大小）** 来增大标题。\r
        * **更改“text alignment”（字体对齐）**这样让标题在屏幕上居中。\r
        \r
        _注意：在你保存进度之前，确定点击了**"运行"** 。_
      U4 Model Design 1_2018: |-
        <div markdown="1" style="float:
        right; margin: 20px;">\r
        \r
        ![expandable](https://curriculum.code.org/media/screen_model.png)\r
        \r
        <br/>\r
        \r
        点击展开\r
        \r
        </div>\r
        \r
        # 创建一个数字原型\r
        \r
        使用右侧的原型（点击图片来放大）你将会
        为示例应用“Recycling Finder”（回收查找者）创建一个数字原型。我们
        已经为你加入了一些元素，包含标题，但是它
        看起来还不完整。我们后面涵盖这里面的的每个元素，但
        现在我们 **先着重标题**.\r
        \r
        <!--<img src="https://images.code.org/66633526e03550bedb8503fefdc2ece3-image-1502921575904.png"
        style="width: 300px; float: right; clear: both;">-->\r
        \r
        # 这样做\r
        \r
        *
        **确认你在设计模式中，**开关出现在你应用窗口上方
        的左面。\r
        * **点击标题文字**来查看它的属性。\r
        *
        **更改属性“text”（文字）**为“回收查找者”.\r
        * **更改“font size”（字体大小）** 来增大标题。\r
        * **更改“text alignment”（字体对齐）**这样让标题在屏幕上居中。\r
        \r
        _注意：在你保存进度之前，确定点击了**"运行"** 。_
      U4 Model Design 1_2019: |-
        <div markdown="1" style="float:
        right; margin: 20px;">\r
        \r
        ![expandable](https://curriculum.code.org/media/screen_model.png)\r
        \r
        <br/>\r
        \r
        点击展开\r
        \r
        </div>\r
        \r
        # 创建一个数字原型\r
        \r
        使用右侧的原型（点击图片来放大）你将会
        为示例应用“Recycling Finder”（回收查找者）创建一个数字原型。我们
        已经为你加入了一些元素，包含标题，但是它
        看起来还不完整。我们后面涵盖这里面的的每个元素，但
        现在我们 **先着重标题**.\r
        \r
        <!--<img src="https://images.code.org/66633526e03550bedb8503fefdc2ece3-image-1502921575904.png"
        style="width: 300px; float: right; clear: both;">-->\r
        \r
        # 这样做\r
        \r
        *
        **确认你在设计模式中，**开关出现在你应用窗口上方
        的左面。\r
        * **点击标题文字**来查看它的属性。\r
        *
        **更改属性“text”（文字）**为“回收查找者”.\r
        * **更改“font size”（字体大小）** 来增大标题。\r
        * **更改“text alignment”（字体对齐）**这样让标题在屏幕上居中。\r
        \r
        _注意：在你保存进度之前，确定点击了**"运行"** 。_
      U4 Model Design 2: |-
        <div markdown="1" style="float:
        right; margin: 20px;">\r
        \r
        ![expandable](https://images.code.org/c0a6e147bc1cb940893f87ffd25b5015-image-1505758331506.png)\r
        \r
        <br/>\r
        \r
        点击展开\r
        \r
        </div>\r
        \r
        # 增加更多文本\r
        \r
        应用的每个屏幕都由多个_elements_（元素）组成。你可以将元素从工作区左边的"设计工具箱"里拖出来。为了增加更多的文本模块，再拖出一个"label"（标签）元素。\r
        \r
        # 这样做\r
        \r
        *
        **拖出一个新的"label"（标签）元素**并将它放在"home_description"文本应该在的位置。\r
        * **改变它的id（标识）**来和原型匹配(home_description)\r
        *
        **改变"text"属性**来匹配原型。\r
        * 通过点击并拖拽右下角来**调整文本尺寸**。\r
        * **改变任何其它属性**来让文本和你想的一样。
      U4 Model Design 2_2018: |-
        <div markdown="1" style="float:
        right; margin: 20px;">\r
        \r
        ![expandable](https://images.code.org/c0a6e147bc1cb940893f87ffd25b5015-image-1505758331506.png)\r
        \r
        <br/>\r
        \r
        点击展开\r
        \r
        </div>\r
        \r
        # 增加更多文本\r
        \r
        应用的每个屏幕都由多个_elements_（元素）组成。你可以将元素从工作区左边的"设计工具箱"里拖出来。为了增加更多的文本模块，再拖出一个"label"（标签）元素。\r
        \r
        # 这样做\r
        \r
        *
        **拖出一个新的"label"（标签）元素**并将它放在"home_description"文本应该在的位置。\r
        * **改变它的id（标识）**来和原型匹配(home_description)\r
        *
        **改变"text"属性**来匹配原型。\r
        * 通过点击并拖拽右下角来**调整文本尺寸**。\r
        * **改变任何其它属性**来让文本和你想的一样。
      U4 Model Design 2_2019: |-
        <div markdown="1" style="float:
        right; margin: 20px;">\r
        \r
        ![expandable](https://images.code.org/c0a6e147bc1cb940893f87ffd25b5015-image-1505758331506.png)\r
        \r
        <br/>\r
        \r
        点击展开\r
        \r
        </div>\r
        \r
        # 增加更多文本\r
        \r
        应用的每个屏幕都由多个_elements_（元素）组成。你可以将元素从工作区左边的"设计工具箱"里拖出来。为了增加更多的文本模块，再拖出一个"label"（标签）元素。\r
        \r
        # 这样做\r
        \r
        *
        **拖出一个新的"label"（标签）元素**并将它放在"home_description"文本应该在的位置。\r
        * **改变它的id（标识）**来和原型匹配(home_description)\r
        *
        **改变"text"属性**来匹配原型。\r
        * 通过点击并拖拽右下角来**调整文本尺寸**。\r
        * **改变任何其它属性**来让文本和你想的一样。
      U4 Model Design 3: |-
        <div markdown="1" style="float:
        right; margin: 20px;">\r
        \r
        ![expandable](https://images.code.org/cad5b0e54f67976fee68ecf29c2a603b-image-1505758463551.png)\r
        \r
        <br/>\r
        \r
        点击展开\r
        \r
        </div>\r
        \r
        # 增加图片\r
        \r
        原型在标志的地方只有一个空的黑色正方形 - 让我们增加一张图片来添加乐趣。"image"（图片）元素允许你从电脑里上传，或是图标库里选一张。\r
        \r
        \r
        # 这样做\r
        \r
        *
        **拖出一个新的"image"（图片）**并将它放在描述和标题之间。\r
        * **改变id（标识）**来匹配原型。\r
        * **点击"image"属性旁的"选择..."链接**。\r
        * **选择"Icons"（图标）标签**并为你的标识来选个图标。\r
        * 用"icon color"（图标颜色）属性来**改变图标的颜色**。
      U4 Model Design 3_2018: |-
        <div markdown="1" style="float:
        right; margin: 20px;">\r
        \r
        ![expandable](https://images.code.org/cad5b0e54f67976fee68ecf29c2a603b-image-1505758463551.png)\r
        \r
        <br/>\r
        \r
        点击展开\r
        \r
        </div>\r
        \r
        # 增加图片\r
        \r
        原型在标志的地方只有一个空的黑色正方形 - 让我们增加一张图片来添加乐趣。"image"（图片）元素允许你从电脑里上传，或是图标库里选一张。\r
        \r
        \r
        # 这样做\r
        \r
        *
        **拖出一个新的"image"（图片）**并将它放在描述和标题之间。\r
        * **改变id（标识）**来匹配原型。\r
        * **点击"image"属性旁的"选择..."链接**。\r
        * **选择"Icons"（图标）标签**并为你的标识来选个图标。\r
        * 用"icon color"（图标颜色）属性来**改变图标的颜色**。
      U4 Model Design 3_2019: |-
        <div markdown="1" style="float:
        right; margin: 20px;">\r
        \r
        ![expandable](https://images.code.org/cad5b0e54f67976fee68ecf29c2a603b-image-1505758463551.png)\r
        \r
        <br/>\r
        \r
        点击展开\r
        \r
        </div>\r
        \r
        # 增加图片\r
        \r
        原型在标志的地方只有一个空的黑色正方形 - 让我们增加一张图片来添加乐趣。"image"（图片）元素允许你从电脑里上传，或是图标库里选一张。\r
        \r
        \r
        # 这样做\r
        \r
        *
        **拖出一个新的"image"（图片）**并将它放在描述和标题之间。\r
        * **改变id（标识）**来匹配原型。\r
        * **点击"image"属性旁的"选择..."链接**。\r
        * **选择"Icons"（图标）标签**并为你的标识来选个图标。\r
        * 用"icon color"（图标颜色）属性来**改变图标的颜色**。
      U4 Model Design 4: |-
        <div markdown="1" style="float:
        right; margin: 20px;">\r
        \r
        ![expandable](https://images.code.org/17b565cb2f5da12babc16fbd22685732-image-1505758655682.png)\r
        \r
        <br/>\r
        \r
        点击展开\r
        \r
        </div>\r
        \r
        # 添加按钮i\r
        \r
        按钮允许你和应用交互。这个原型屏幕需要三个按钮（每个灰色阴影）。我们已经增加了Search（搜索）按钮，你只需要增加Contact（联系人）和About（关于）按钮。\r
        \r
        # 这样做\r
        \r
        * 为剩下的两个按钮，各**拖出一个新的"button"（按钮）元素**\r
        *
        **改变它们的id**来和原型匹配。\r
        * **改变文本**来和原型匹配。\r
        * **改变其它属性**，来让屏幕变成你喜欢的样子。\r
        \r
        <img src="https://images.code.org/4cab6a5233cf07df0d8e312932762012-image-1444314797615.gif"
        style="width: 500px;">
      U4 Model Design 4_2018: |-
        <div markdown="1" style="float:
        right; margin: 20px;">\r
        \r
        ![expandable](https://images.code.org/17b565cb2f5da12babc16fbd22685732-image-1505758655682.png)\r
        \r
        <br/>\r
        \r
        点击展开\r
        \r
        </div>\r
        \r
        # 添加按钮i\r
        \r
        按钮允许你和应用交互。这个原型屏幕需要三个按钮（每个灰色阴影）。我们已经增加了Search（搜索）按钮，你只需要增加Contact（联系人）和About（关于）按钮。\r
        \r
        # 这样做\r
        \r
        * 为剩下的两个按钮，各**拖出一个新的"button"（按钮）元素**\r
        *
        **改变它们的id**来和原型匹配。\r
        * **改变文本**来和原型匹配。\r
        * **改变其它属性**，来让屏幕变成你喜欢的样子。\r
        \r
        <img src="https://images.code.org/4cab6a5233cf07df0d8e312932762012-image-1444314797615.gif"
        style="width: 500px;">
      U4 Model Design 4_2019: |-
        <div markdown="1" style="float:
        right; margin: 20px;">\r
        \r
        ![expandable](https://images.code.org/17b565cb2f5da12babc16fbd22685732-image-1505758655682.png)\r
        \r
        <br/>\r
        \r
        点击展开\r
        \r
        </div>\r
        \r
        # 添加按钮i\r
        \r
        按钮允许你和应用交互。这个原型屏幕需要三个按钮（每个灰色阴影）。我们已经增加了Search（搜索）按钮，你只需要增加Contact（联系人）和About（关于）按钮。\r
        \r
        # 这样做\r
        \r
        * 为剩下的两个按钮，各**拖出一个新的"button"（按钮）元素**\r
        *
        **改变它们的id**来和原型匹配。\r
        * **改变文本**来和原型匹配。\r
        * **改变其它属性**，来让屏幕变成你喜欢的样子。\r
        \r
        <img src="https://images.code.org/4cab6a5233cf07df0d8e312932762012-image-1444314797615.gif"
        style="width: 500px;">
      U4 Model Design 5: |-
        <div markdown="1" style="float:
        right; margin: 20px;">\r
        \r
        ![expandable](https://images.code.org/d257d0b06a24195a40adc60e4c96c0e1-image-1505759167176.png)\r
        \r
        <br/>\r
        \r
        点击展开\r
        \r
        </div>\r
        \r
        # 制作搜索框\r
        \r
        原型里的搜索框可以用一个"Text Input"（文本输入）元素。这是一个你的用户能够输入，然后你的软件能够从里读出用户输入了什么的控件。\r
        \r
        # 这样做\r
        \r
        * **添加一个文本输入**
        元素。\r
        * **改变id（标识）**来和原型匹配。\r
        * **添加一个标签**到你的文本框旁边，文本是"Location"（位置）。
      U4 Model Design 5_2018: |-
        <div markdown="1" style="float:
        right; margin: 20px;">\r
        \r
        ![expandable](https://images.code.org/d257d0b06a24195a40adc60e4c96c0e1-image-1505759167176.png)\r
        \r
        <br/>\r
        \r
        点击展开\r
        \r
        </div>\r
        \r
        # 制作搜索框\r
        \r
        原型里的搜索框可以用一个"Text Input"（文本输入）元素。这是一个你的用户能够输入，然后你的软件能够从里读出用户输入了什么的控件。\r
        \r
        # 这样做\r
        \r
        * **添加一个文本输入**
        元素。\r
        * **改变id（标识）**来和原型匹配。\r
        * **添加一个标签**到你的文本框旁边，文本是"Location"（位置）。
      U4 Model Design 5_2019: |-
        <div markdown="1" style="float:
        right; margin: 20px;">\r
        \r
        ![expandable](https://images.code.org/d257d0b06a24195a40adc60e4c96c0e1-image-1505759167176.png)\r
        \r
        <br/>\r
        \r
        点击展开\r
        \r
        </div>\r
        \r
        # 制作搜索框\r
        \r
        原型里的搜索框可以用一个"Text Input"（文本输入）元素。这是一个你的用户能够输入，然后你的软件能够从里读出用户输入了什么的控件。\r
        \r
        # 这样做\r
        \r
        * **添加一个文本输入**
        元素。\r
        * **改变id（标识）**来和原型匹配。\r
        * **添加一个标签**到你的文本框旁边，文本是"Location"（位置）。
      U4 Model Design 6: |-
        <div markdown="1" style="float:
        right; margin: 20px;">\r
        \r
        ![expandable](https://images.code.org/7c8f4893c0b1f4bcd2280c950e389c95-image-1505759396699.png)\r
        \r
        <br/>\r
        \r
        点击展开\r
        \r
        </div>\r
        \r
        # 复选框\r
        \r
        搜索的可回收类型可以用"Checkbox"（复选框）元素。我们已经为玻璃增加了一个复选框和标签，这样你可以为纸和塑料也增加了。\r
        \r
        # 这样做\r
        \r
        * 为每个选项**增加一个复选框**。\r
        *
        **改变它们的id（标识）**来和原型匹配。\r
        * **添加标签**来描述每个复选框。
      U4 Model Design 6_2018: |-
        <div markdown="1" style="float:
        right; margin: 20px;">\r
        \r
        ![expandable](https://images.code.org/7c8f4893c0b1f4bcd2280c950e389c95-image-1505759396699.png)\r
        \r
        <br/>\r
        \r
        点击展开\r
        \r
        </div>\r
        \r
        # 复选框\r
        \r
        搜索的可回收类型可以用"Checkbox"（复选框）元素。我们已经为玻璃增加了一个复选框和标签，这样你可以为纸和塑料也增加了。\r
        \r
        # 这样做\r
        \r
        * 为每个选项**增加一个复选框**。\r
        *
        **改变它们的id（标识）**来和原型匹配。\r
        * **添加标签**来描述每个复选框。
      U4 Model Design 6_2019: |-
        <div markdown="1" style="float:
        right; margin: 20px;">\r
        \r
        ![expandable](https://images.code.org/7c8f4893c0b1f4bcd2280c950e389c95-image-1505759396699.png)\r
        \r
        <br/>\r
        \r
        点击展开\r
        \r
        </div>\r
        \r
        # 复选框\r
        \r
        搜索的可回收类型可以用"Checkbox"（复选框）元素。我们已经为玻璃增加了一个复选框和标签，这样你可以为纸和塑料也增加了。\r
        \r
        # 这样做\r
        \r
        * 为每个选项**增加一个复选框**。\r
        *
        **改变它们的id（标识）**来和原型匹配。\r
        * **添加标签**来描述每个复选框。
      U4 Model Design 7: |-
        <div markdown="1" style="float:
        right; margin: 20px;">\r
        \r
        ![expandable](https://curriculum.code.org/media/screen_model.png)\r
        \r
        <br/>\r
        \r
        点击展开\r
        \r
        </div>\r
        \r
        # 最后润色\r
        \r
        现在，你应该有了一个快要完成（虽然还不能工作）的开始的纸上原型的数字版。现在要做的是检查你纸上的原型，增加任何遗漏的润色。\r
        \r
        #
        这样做\r
        \r
        * **与原型核对**来确保加上了所有东西。\r
        * **通读id（标识）**并修复任何没有描述性的标识。\r
        *
        通过调整大小或移动元素来**清除**任何草稿。
      U4 Model Design 7_2018: |-
        <div markdown="1" style="float:
        right; margin: 20px;">\r
        \r
        ![expandable](https://curriculum.code.org/media/screen_model.png)\r
        \r
        <br/>\r
        \r
        点击展开\r
        \r
        </div>\r
        \r
        # 最后润色\r
        \r
        现在，你应该有了一个快要完成（虽然还不能工作）的开始的纸上原型的数字版。现在要做的是检查你纸上的原型，增加任何遗漏的润色。\r
        \r
        #
        这样做\r
        \r
        * **与原型核对**来确保加上了所有东西。\r
        * **通读id（标识）**并修复任何没有描述性的标识。\r
        *
        通过调整大小或移动元素来**清除**任何草稿。
      U4 Model Design 7_2019: |-
        <div markdown="1" style="float:
        right; margin: 20px;">\r
        \r
        ![expandable](https://curriculum.code.org/media/screen_model.png)\r
        \r
        <br/>\r
        \r
        点击展开\r
        \r
        </div>\r
        \r
        # 最后润色\r
        \r
        现在，你应该有了一个快要完成（虽然还不能工作）的开始的纸上原型的数字版。现在要做的是检查你纸上的原型，增加任何遗漏的润色。\r
        \r
        #
        这样做\r
        \r
        * **与原型核对**来确保加上了所有东西。\r
        * **通读id（标识）**并修复任何没有描述性的标识。\r
        *
        通过调整大小或移动元素来**清除**任何草稿。
      U4 Model Program 1.5: |-
        <div markdown="1" style="float:
        right; margin: 20px;">\r
        \r
        ![expandable](https://curriculum.code.org/media/screen_model_about.png)\r
        \r
        <br/>\r
        \r
        点击展开\r
        \r
        </div>\r
        \r
        # 设计About（关于）屏幕\r
        \r
        为了添加元素到新的关于屏幕上，你需要首先从屏幕下拉框里选择它。\r
        \r
        # 这样做\r
        \r
        * 用右边的原型来**完成About（关于）屏幕**/\r
        * **用屏幕下来狂**来在Home（主页）和About（关于）屏幕间切换。
      U4 Model Program 1.5_2018: |-
        <div markdown="1" style="float:
        right; margin: 20px;">\r
        \r
        ![expandable](https://curriculum.code.org/media/screen_model_about.png)\r
        \r
        <br/>\r
        \r
        点击展开\r
        \r
        </div>\r
        \r
        # 设计About（关于）屏幕\r
        \r
        为了添加元素到新的关于屏幕上，你需要首先从屏幕下拉框里选择它。\r
        \r
        # 这样做\r
        \r
        * 用右边的原型来**完成About（关于）屏幕**/\r
        * **用屏幕下来狂**来在Home（主页）和About（关于）屏幕间切换。
      U4 Model Program 1.5_2019: |-
        <div markdown="1" style="float:
        right; margin: 20px;">\r
        \r
        ![expandable](https://curriculum.code.org/media/screen_model_about.png)\r
        \r
        <br/>\r
        \r
        点击展开\r
        \r
        </div>\r
        \r
        # 设计About（关于）屏幕\r
        \r
        为了添加元素到新的关于屏幕上，你需要首先从屏幕下拉框里选择它。\r
        \r
        # 这样做\r
        \r
        * 用右边的原型来**完成About（关于）屏幕**/\r
        * **用屏幕下来狂**来在Home（主页）和About（关于）屏幕间切换。
      U4 Model Program 1: |-
        # 添加新的屏幕\\r

        \\r
        为了完成你的应用程序，你需要的不仅仅是一个主屏幕。在纸上原型中创建的每张卡都由应用程序实验室中的"屏幕"表示。要创建更多屏幕，只需单击应用程序显示顶部的下拉列表, 然后选择 "新屏幕..." \\r
        \\r
        <img src="https://images.code.org/2b49c36a57fb904d4fcf219ca498647d-image-1504714832027.png"
        style="width: 200px">\\r
        \\r

        # 这样做\\r

        \\r

        -   \*\* 创建一个新屏幕\*\*并将它的ID（标识）设置为"about"（关于）。
      U4 Model Program 1_2018: |-
        # 添加新的屏幕\\r

        \\r
        为了完成你的应用程序，你需要的不仅仅是一个主屏幕。在纸上原型中创建的每张卡都由应用程序实验室中的"屏幕"表示。要创建更多屏幕，只需单击应用程序显示顶部的下拉列表, 然后选择 "新屏幕..." \\r
        \\r
        <img src="https://images.code.org/2b49c36a57fb904d4fcf219ca498647d-image-1504714832027.png"
        style="width: 200px">\\r
        \\r

        # 这样做\\r

        \\r

        -   \*\* 创建一个新屏幕\*\*并将它的ID（标识）设置为"about"（关于）。
      U4 Model Program 1_2019: |-
        # 添加新的屏幕\\r

        \\r
        为了完成你的应用程序，你需要的不仅仅是一个主屏幕。在纸上原型中创建的每张卡都由应用程序实验室中的"屏幕"表示。要创建更多屏幕，只需单击应用程序显示顶部的下拉列表, 然后选择 "新屏幕..." \\r
        \\r
        <img src="https://images.code.org/2b49c36a57fb904d4fcf219ca498647d-image-1504714832027.png"
        style="width: 200px">\\r
        \\r

        # 这样做\\r

        \\r

        -   \*\* 创建一个新屏幕\*\*并将它的ID（标识）设置为"about"（关于）。
      U4 Model Program 2.5: |-
        # 联系人屏幕导入\\r

        \\r
        已经有另一个学生创建了一个可以导入到应用程序中的联系人屏幕。他们的共享链接是 **<a href ="https://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/"
        target="_blank">https\://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/</a>**\\r
        \\r

        # 这样做\\r

        \\r

        -   从屏幕下拉列表中\*\*选择 "导入屏幕... \*\*\\r
        -   **复制并粘贴上述网址**到导入屏幕对话框中。\\r
        -   **选择要导入的屏幕**。\\r
        -   **单击导入** 来导入屏幕。\\r
        -   **使用屏幕下拉框**来检查应用程序里有主页、关于、联系人和搜索屏幕。
      U4 Model Program 2.5_2018: |-
        # 联系人屏幕导入\\r

        \\r
        已经有另一个学生创建了一个可以导入到应用程序中的联系人屏幕。他们的共享链接是 **<a href ="https://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/"
        target="_blank">https\://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/</a>**\\r
        \\r

        # 这样做\\r

        \\r

        -   从屏幕下拉列表中\*\*选择 "导入屏幕... \*\*\\r
        -   **复制并粘贴上述网址**到导入屏幕对话框中。\\r
        -   **选择要导入的屏幕**。\\r
        -   **单击导入** 来导入屏幕。\\r
        -   **使用屏幕下拉框**来检查应用程序里有主页、关于、联系人和搜索屏幕。
      U4 Model Program 2.5_2019: |-
        # 联系人屏幕导入\\r

        \\r
        已经有另一个学生创建了一个可以导入到应用程序中的联系人屏幕。他们的共享链接是 **<a href ="https://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/"
        target="_blank">https\://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/</a>**\\r
        \\r

        # 这样做\\r

        \\r

        -   从屏幕下拉列表中\*\*选择 "导入屏幕... \*\*\\r
        -   **复制并粘贴上述网址**到导入屏幕对话框中。\\r
        -   **选择要导入的屏幕**。\\r
        -   **单击导入** 来导入屏幕。\\r
        -   **使用屏幕下拉框**来检查应用程序里有主页、关于、联系人和搜索屏幕。
      U4 Model Program 2: "<div markdown=\"1\" style=\"float:\nright; margin: 20px;\">\\r\n\\r\n![expandable](https://images.code.org/9ca7398a9b7403dc39ec6a6b2d2b8a5e-image-1477346132059.png)\\r\n\\r\n<br/>\\r\n\\r\n点击展开\\r\n\\r\n</div>\\r\n\\r\n#屏幕导入\\r\n\\r \n除了添加新的空白屏幕之外, 你还可以用\"导入屏幕... \"。要从其他人那里导入屏幕，你需要的是他们给你共享网址。\\r\n\\r\n**备注: ** 你导入的屏幕_不能和_任何已经在应用程序里的元素共享任何ID（标识）！\\r\n\\r\n# 这样做\\r\n\\r \n其他学生已经创建了一个搜索结果屏幕可供你将其导入到你的应用程序中。他们的应用程序的共享链接是 **<a\nhref=\"https://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/\" target=\"_blank\">https://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/</a>**\\r\n\\r\n* **从屏幕下拉列表中选择 \"导入屏幕.. **\" 。\\r\n* **将上面的链接复制并粘贴**到导入屏幕对话框中。\\r\n* ** 选择要导入的屏幕 * 。\\r\n* **单击导入**把它导入屏幕。\\r\n* ** 使用屏幕下拉框** 在你的主页、关于和搜索屏幕之间进行切换。"
      U4 Model Program 2_2018: "<div markdown=\"1\" style=\"float:\nright; margin: 20px;\">\\r\n\\r\n![expandable](https://images.code.org/9ca7398a9b7403dc39ec6a6b2d2b8a5e-image-1477346132059.png)\\r\n\\r\n<br/>\\r\n\\r\n点击展开\\r\n\\r\n</div>\\r\n\\r\n#屏幕导入\\r\n\\r \n除了添加新的空白屏幕之外, 你还可以用\"导入屏幕... \"。要从其他人那里导入屏幕，你需要的是他们给你共享网址。\\r\n\\r\n**备注: ** 你导入的屏幕_不能和_任何已经在应用程序里的元素共享任何ID（标识）！\\r\n\\r\n# 这样做\\r\n\\r \n其他学生已经创建了一个搜索结果屏幕可供你将其导入到你的应用程序中。他们的应用程序的共享链接是 **<a\nhref=\"https://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/\" target=\"_blank\">https://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/</a>**\\r\n\\r\n* **从屏幕下拉列表中选择 \"导入屏幕.. **\" 。\\r\n* **将上面的链接复制并粘贴**到导入屏幕对话框中。\\r\n* ** 选择要导入的屏幕 * 。\\r\n* **单击导入**把它导入屏幕。\\r\n* ** 使用屏幕下拉框** 在你的主页、关于和搜索屏幕之间进行切换。"
      U4 Model Program 2_2019: "<div markdown=\"1\" style=\"float:\nright; margin: 20px;\">\\r\n\\r\n![expandable](https://images.code.org/9ca7398a9b7403dc39ec6a6b2d2b8a5e-image-1477346132059.png)\\r\n\\r\n<br/>\\r\n\\r\n点击展开\\r\n\\r\n</div>\\r\n\\r\n#屏幕导入\\r\n\\r \n除了添加新的空白屏幕之外, 你还可以用\"导入屏幕... \"。要从其他人那里导入屏幕，你需要的是他们给你共享网址。\\r\n\\r\n**备注: ** 你导入的屏幕_不能和_任何已经在应用程序里的元素共享任何ID（标识）！\\r\n\\r\n# 这样做\\r\n\\r \n其他学生已经创建了一个搜索结果屏幕可供你将其导入到你的应用程序中。他们的应用程序的共享链接是 **<a\nhref=\"https://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/\" target=\"_blank\">https://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/</a>**\\r\n\\r\n* **从屏幕下拉列表中选择 \"导入屏幕.. **\" 。\\r\n* **将上面的链接复制并粘贴**到导入屏幕对话框中。\\r\n* ** 选择要导入的屏幕 * 。\\r\n* **单击导入**把它导入屏幕。\\r\n* ** 使用屏幕下拉框** 在你的主页、关于和搜索屏幕之间进行切换。"
      U4 Model Program 3: |-
        # 按钮事件\\r

        \\r
        我们的屏幕现在已经到位，是时候开始实际编程应用程序，让它可以响应按钮点击。对于每个屏幕上的每个按钮，你都需要添加一个`onEvent`（当事件发生时）模块,用于监视该按钮被点击事件并进行适当的响应。刚开始我们将只看 "home_search_btn"（主页-搜索-按钮）按钮, 并在它被点击时打印一些东西到控制台。\\r
        \\r

        # 这样做\\r

        \\r
        你现在处于编码模式（你可以使用应用程序上方的按钮在编码模式和设计模式之间进行切换）。在这里你可以编写可以让响应用户你的应用程序互动的代码。\\r
        \\r
        ![](https://images.code.org/278b27dd31b6ca014c0dd32c5f964a54-image-1505764431751.png)\\r
        \\r

        -   \*\*从代码工具箱中拖出`onEvent`（当事件发生时）模块 。\\r
        -   \*\* 从 "id"（标识） 下拉列表中选择 "home_search_btn" \*\*（主页-搜索-按钮）。\\r
        -   \*\* 将`console.log`（控制台.日志）模块从变量抽屉拖出。\\r
        -   \*\* 运行你应用程序 \*\* 。\\r
        -   \*\* 单击搜索按钮\*\* 并在控制台中查找信息。
      U4 Model Program 3_2018: |-
        # 按钮事件\\r

        \\r
        我们的屏幕现在已经到位，是时候开始实际编程应用程序，让它可以响应按钮点击。对于每个屏幕上的每个按钮，你都需要添加一个`onEvent`（当事件发生时）模块,用于监视该按钮被点击事件并进行适当的响应。刚开始我们将只看 "home_search_btn"（主页-搜索-按钮）按钮, 并在它被点击时打印一些东西到控制台。\\r
        \\r

        # 这样做\\r

        \\r
        你现在处于编码模式（你可以使用应用程序上方的按钮在编码模式和设计模式之间进行切换）。在这里你可以编写可以让响应用户你的应用程序互动的代码。\\r
        \\r
        ![](https://images.code.org/278b27dd31b6ca014c0dd32c5f964a54-image-1505764431751.png)\\r
        \\r

        -   \*\*从代码工具箱中拖出`onEvent`（当事件发生时）模块 。\\r
        -   \*\* 从 "id"（标识） 下拉列表中选择 "home_search_btn" \*\*（主页-搜索-按钮）。\\r
        -   \*\* 将`console.log`（控制台.日志）模块从变量抽屉拖出。\\r
        -   \*\* 运行你应用程序 \*\* 。\\r
        -   \*\* 单击搜索按钮\*\* 并在控制台中查找信息。
      U4 Model Program 3_2019: |-
        # 按钮事件\\r

        \\r
        我们的屏幕现在已经到位，是时候开始实际编程应用程序，让它可以响应按钮点击。对于每个屏幕上的每个按钮，你都需要添加一个`onEvent`（当事件发生时）模块,用于监视该按钮被点击事件并进行适当的响应。刚开始我们将只看 "home_search_btn"（主页-搜索-按钮）按钮, 并在它被点击时打印一些东西到控制台。\\r
        \\r

        # 这样做\\r

        \\r
        你现在处于编码模式（你可以使用应用程序上方的按钮在编码模式和设计模式之间进行切换）。在这里你可以编写可以让响应用户你的应用程序互动的代码。\\r
        \\r
        ![](https://images.code.org/278b27dd31b6ca014c0dd32c5f964a54-image-1505764431751.png)\\r
        \\r

        -   \*\*从代码工具箱中拖出`onEvent`（当事件发生时）模块 。\\r
        -   \*\* 从 "id"（标识） 下拉列表中选择 "home_search_btn" \*\*（主页-搜索-按钮）。\\r
        -   \*\* 将`console.log`（控制台.日志）模块从变量抽屉拖出。\\r
        -   \*\* 运行你应用程序 \*\* 。\\r
        -   \*\* 单击搜索按钮\*\* 并在控制台中查找信息。
      U4 Model Program 4: "# 在点击时更改屏幕 \\\\r\n\n\\\\r \n`setScreen()`（设置屏幕）模块会将你的应用改变为你制定的任何屏幕。如果把一个`setScreen()`（设置屏幕）模块放在一个`onEvent`（当事件发生时）模块_内_，你就可以对按钮进行编码，使其改为正确的屏幕。\\\\r\n\\\\r\n\n# 这样做\\\\r\n\n\\\\r\n使用已创建的`onEvent`（当事件发生时）模块，让程序在 \"home_search_btn\"（主页-搜索-按钮）被点击时更改为 \"搜索\" 屏幕。\\\\r\n\\\\r\n\n-   \\*\\* 把 `setScreen()`（设置屏幕）模块\\*\\* 拉出并放入`onEvent`（当事件发生时）模块中。\\\\r\n-   从 `setScreen()`（设置屏幕）下拉列表中\\*\\*选择\"搜索\" \\*\\*。\\\\r\n-   \\*\\* 运行应用程序\\*\\* 并测试 \"home_search_btn\"（主页-搜索-按钮） 按钮。"
      U4 Model Program 4_2018: "# 在点击时更改屏幕 \\\\r\n\n\\\\r \n`setScreen()`（设置屏幕）模块会将你的应用改变为你制定的任何屏幕。如果把一个`setScreen()`（设置屏幕）模块放在一个`onEvent`（当事件发生时）模块_内_，你就可以对按钮进行编码，使其改为正确的屏幕。\\\\r\n\\\\r\n\n# 这样做\\\\r\n\n\\\\r\n使用已创建的`onEvent`（当事件发生时）模块，让程序在 \"home_search_btn\"（主页-搜索-按钮）被点击时更改为 \"搜索\" 屏幕。\\\\r\n\\\\r\n\n-   \\*\\* 把 `setScreen()`（设置屏幕）模块\\*\\* 拉出并放入`onEvent`（当事件发生时）模块中。\\\\r\n-   从 `setScreen()`（设置屏幕）下拉列表中\\*\\*选择\"搜索\" \\*\\*。\\\\r\n-   \\*\\* 运行应用程序\\*\\* 并测试 \"home_search_btn\"（主页-搜索-按钮） 按钮。"
      U4 Model Program 4_2019: "# 在点击时更改屏幕 \\\\r\n\n\\\\r \n`setScreen()`（设置屏幕）模块会将你的应用改变为你制定的任何屏幕。如果把一个`setScreen()`（设置屏幕）模块放在一个`onEvent`（当事件发生时）模块_内_，你就可以对按钮进行编码，使其改为正确的屏幕。\\\\r\n\\\\r\n\n# 这样做\\\\r\n\n\\\\r\n使用已创建的`onEvent`（当事件发生时）模块，让程序在 \"home_search_btn\"（主页-搜索-按钮）被点击时更改为 \"搜索\" 屏幕。\\\\r\n\\\\r\n\n-   \\*\\* 把 `setScreen()`（设置屏幕）模块\\*\\* 拉出并放入`onEvent`（当事件发生时）模块中。\\\\r\n-   从 `setScreen()`（设置屏幕）下拉列表中\\*\\*选择\"搜索\" \\*\\*。\\\\r\n-   \\*\\* 运行应用程序\\*\\* 并测试 \"home_search_btn\"（主页-搜索-按钮） 按钮。"
      U4 Model Program 5: |-
        # 将其他按钮连接起来\\r

        \\r
        现在你已经让一个按钮可以正常工作了，可以遵循相同的模式来制作其他的。\\r
        \\r

        # 这样做\\r

        \\r

        -   为每个按钮**添加一个 `onEvent`（当事件发生时）模块**。\\r
        -   从"id"（标识）下拉列表中**选择按钮ID（标识）**。\\r
        -   **添加一个 `setScreen()`（设置屏幕）模块**到每个`onEvent`（当事件发生时）模块内。\\r
        -   从每个 `setScreen()`（设置屏幕）下拉列表中\*\*选择屏幕 ID \*\*。\\r
        -   \*\* 运行应用程序 \*\* 并测试所有按钮是否正常工作。
      U4 Model Program 5_2018: |-
        # 将其他按钮连接起来\\r

        \\r
        现在你已经让一个按钮可以正常工作了，可以遵循相同的模式来制作其他的。\\r
        \\r

        # 这样做\\r

        \\r

        -   为每个按钮**添加一个 `onEvent`（当事件发生时）模块**。\\r
        -   从"id"（标识）下拉列表中**选择按钮ID（标识）**。\\r
        -   **添加一个 `setScreen()`（设置屏幕）模块**到每个`onEvent`（当事件发生时）模块内。\\r
        -   从每个 `setScreen()`（设置屏幕）下拉列表中\*\*选择屏幕 ID \*\*。\\r
        -   \*\* 运行应用程序 \*\* 并测试所有按钮是否正常工作。
      U4 Model Program 5_2019: |-
        # 将其他按钮连接起来\\r

        \\r
        现在你已经让一个按钮可以正常工作了，可以遵循相同的模式来制作其他的。\\r
        \\r

        # 这样做\\r

        \\r

        -   为每个按钮**添加一个 `onEvent`（当事件发生时）模块**。\\r
        -   从"id"（标识）下拉列表中**选择按钮ID（标识）**。\\r
        -   **添加一个 `setScreen()`（设置屏幕）模块**到每个`onEvent`（当事件发生时）模块内。\\r
        -   从每个 `setScreen()`（设置屏幕）下拉列表中\*\*选择屏幕 ID \*\*。\\r
        -   \*\* 运行应用程序 \*\* 并测试所有按钮是否正常工作。
      U4-AP-Practice-Choose-The-Data-Concern: "# AP练习 - 识别数据担忧\\\\r\n\n\\\\r\n**AP探索表演任务**的一个组成部分就是描述与计算创新相关的数据担忧。\\\\r\\\\r\n\n<div\nstyle=\"width: 80%; margin: auto; background-color: #EEEEEE; padding: 10px;\nfont-family: serif; font-size: 12pt\">\\r\\r\n<b>计算创新</b>\\r\n<br>\\r\n<br>\\r 2d.使用特定的详细信息, 描述 \\r\n<br>\\r\n<br>\\r\n<li>至少有一个数据存储担忧，数据隐私担忧，或数据安全担忧与这个计算创新直接相关。</li>\\r\n\\r\n</div>\\r\n<br>\\r\n\\r\n## 答复示例\\r\\r\n在下面的答复中，有两个个有数据存储、隐私或安全担忧而符合要求，另外两个则不符合。 你能辨认出是哪两个吗？\\r\n\\r\n---\\r\n** 答复A: ** 面部识别技术存储数据映射用户的脸，例如解锁手机。对这种技术的隐私担忧是， 政府可以迫使科技公司把这些数据移交给他们，使他们能够被动和持续地监测其公民的活动而不需要他们的认知或同意。*\\r\n\\r \n** 答复B: ** 软件跟踪足球运动员在球场上的动作可以用来产生新的统计数字，帮助评估每位球员的个人价值贡献。数据担忧是，这些信息可能被用来证明并除掉生产力较差的球员。\\r\n\\r\n** 答复C: ** 社交网络允许用户分享他们生活的大量私人信息。这项技术的一个安全担忧问题是, 这些公开提供的数据可能使潜行者或其他犯罪分子用来识别潜在的目标。*\\r\n\\r\n** 答复D: ** 自动驾驶车辆存储大量有关其位置和他们周围世界的信息。一个运输行业的数据担忧是，所有这些信息可以协调并使卡车能够更有效地驾驶，这可能导致许多以驾驶卡车谋生的人失去他们的工作。*\\r\n\\r\n---\\r \n这是该部分问题的评分指南 \\r \\r\n<div style=\"magin:auto\"><img src=\"https://images.code.org/6ff69107762c5afb27661625600d2bfb-image-1510609916491.51.42\nPM.png\">\\r\n</div>\\r\n\\r\n<br>\\r\n\\r\n## 选择两个 (2) 答复是有关的担忧。\\r\n\\r\n**选择两个响应 (A, B, C, 或 D) 可以作为数据存储、安全或隐私担忧来赢得分数。然后解释你为什么选择它们。**"
      U4-AP-Practice-Choose-The-Data-Concern_2018: "# AP练习 - 识别数据担忧\\\\r\n\n\\\\r\n**AP探索表演任务**的一个组成部分就是描述与计算创新相关的数据担忧。\\\\r\\\\r\n\n<div\nstyle=\"width: 80%; margin: auto; background-color: #EEEEEE; padding: 10px;\nfont-family: serif; font-size: 12pt\">\\r\\r\n<b>计算创新</b>\\r\n<br>\\r\n<br>\\r 2d.使用特定的详细信息, 描述 \\r\n<br>\\r\n<br>\\r\n<li>至少有一个数据存储担忧，数据隐私担忧，或数据安全担忧与这个计算创新直接相关。</li>\\r\n\\r\n</div>\\r\n<br>\\r\n\\r\n## 答复示例\\r\\r\n在下面的答复中，有两个个有数据存储、隐私或安全担忧而符合要求，另外两个则不符合。 你能辨认出是哪两个吗？\\r\n\\r\n---\\r\n** 答复A: ** 面部识别技术存储数据映射用户的脸，例如解锁手机。对这种技术的隐私担忧是， 政府可以迫使科技公司把这些数据移交给他们，使他们能够被动和持续地监测其公民的活动而不需要他们的认知或同意。*\\r\n\\r \n** 答复B: ** 软件跟踪足球运动员在球场上的动作可以用来产生新的统计数字，帮助评估每位球员的个人价值贡献。数据担忧是，这些信息可能被用来证明并除掉生产力较差的球员。\\r\n\\r\n** 答复C: ** 社交网络允许用户分享他们生活的大量私人信息。这项技术的一个安全担忧问题是, 这些公开提供的数据可能使潜行者或其他犯罪分子用来识别潜在的目标。*\\r\n\\r\n** 答复D: ** 自动驾驶车辆存储大量有关其位置和他们周围世界的信息。一个运输行业的数据担忧是，所有这些信息可以协调并使卡车能够更有效地驾驶，这可能导致许多以驾驶卡车谋生的人失去他们的工作。*\\r\n\\r\n---\\r \n这是该部分问题的评分指南 \\r \\r\n<div style=\"magin:auto\"><img src=\"https://images.code.org/6ff69107762c5afb27661625600d2bfb-image-1510609916491.51.42\nPM.png\">\\r\n</div>\\r\n\\r\n<br>\\r\n\\r\n## 选择两个 (2) 答复是有关的担忧。\\r\n\\r\n**选择两个响应 (A, B, C, 或 D) 可以作为数据存储、安全或隐私担忧来赢得分数。然后解释你为什么选择它们。**"
      U4-AP-Practice-Choose-The-Data-Concern_2019: "# AP练习 - 识别数据担忧\\\\r\n\n\\\\r\n**AP探索表演任务**的一个组成部分就是描述与计算创新相关的数据担忧。\\\\r\\\\r\n\n<div\nstyle=\"width: 80%; margin: auto; background-color: #EEEEEE; padding: 10px;\nfont-family: serif; font-size: 12pt\">\\r\\r\n<b>计算创新</b>\\r\n<br>\\r\n<br>\\r 2d.使用特定的详细信息, 描述 \\r\n<br>\\r\n<br>\\r\n<li>至少有一个数据存储担忧，数据隐私担忧，或数据安全担忧与这个计算创新直接相关。</li>\\r\n\\r\n</div>\\r\n<br>\\r\n\\r\n## 答复示例\\r\\r\n在下面的答复中，有两个个有数据存储、隐私或安全担忧而符合要求，另外两个则不符合。 你能辨认出是哪两个吗？\\r\n\\r\n---\\r\n** 答复A: ** 面部识别技术存储数据映射用户的脸，例如解锁手机。对这种技术的隐私担忧是， 政府可以迫使科技公司把这些数据移交给他们，使他们能够被动和持续地监测其公民的活动而不需要他们的认知或同意。*\\r\n\\r \n** 答复B: ** 软件跟踪足球运动员在球场上的动作可以用来产生新的统计数字，帮助评估每位球员的个人价值贡献。数据担忧是，这些信息可能被用来证明并除掉生产力较差的球员。\\r\n\\r\n** 答复C: ** 社交网络允许用户分享他们生活的大量私人信息。这项技术的一个安全担忧问题是, 这些公开提供的数据可能使潜行者或其他犯罪分子用来识别潜在的目标。*\\r\n\\r\n** 答复D: ** 自动驾驶车辆存储大量有关其位置和他们周围世界的信息。一个运输行业的数据担忧是，所有这些信息可以协调并使卡车能够更有效地驾驶，这可能导致许多以驾驶卡车谋生的人失去他们的工作。*\\r\n\\r\n---\\r \n这是该部分问题的评分指南 \\r \\r\n<div style=\"magin:auto\"><img src=\"https://images.code.org/6ff69107762c5afb27661625600d2bfb-image-1510609916491.51.42\nPM.png\">\\r\n</div>\\r\n\\r\n<br>\\r\n\\r\n## 选择两个 (2) 答复是有关的担忧。\\r\n\\r\n**选择两个响应 (A, B, C, 或 D) 可以作为数据存储、安全或隐私担忧来赢得分数。然后解释你为什么选择它们。**"
      U4-AP-Practice-Choose-The-Harmful-Effect: |-
        # AP 练习 - 证明分数 \\r

        \\r
        **AP探索表演任务**的一个组成部分描述数据担忧和计算创新的关系。\\r
        \\r

        <div
        style="width: 80%; margin: auto; background-color: #EEEEEE; padding: 10px;
        font-family: serif; font-size: 12pt">
        <b>计算创新</b>\r
        <br>\r
        <br>\r
        2d. 使用特定的详细信息，描述。 \r
        <br>\r
        <br>\r
        <ul>
        <li>至少有一个数据存储担忧，数据隐私担忧，或数据安全担忧与计算创新直接相关。</li>\r
        </ul>\r
        </div>\r
        <br>\r
        ** 学生响应示例: ** 一个学生提交了以下回答作为这个问题的一部分。\r
        \r
        *"脸部应用程序拥有在智能手机上使用许多设备的权限，包括摄像头。由此产生的数据担忧是公司可以使用此权限来查看你在做什么。"*\r
        \r
        ** 评分指南： ** 这是问题的这一部分的评分指南 \r
        \r
        <div
        style="magin:auto">\r
        \t<img src="https://images.code.org/96f6c02681616656f107dac058d15de6-image-1511206516901.35.08
        AM.png">\r
        </div>\r
        \r
        <br>\r
        \r
        # 证明分数\r
        \r
        基于上面列出的评分指南，该学生将不会得到答复的第6 行的分数, 并且很可能也无法获得第7行的奖励。\r
        \r
        ** 解释为什么学生不会在任意一行获得奖励。请就如何改进此响应提出建议 ** \r
        \r
        \r
      U4-AP-Practice-Device-or-Data?: "# AP练习 - 证明分数\\\\r\n\n\\\\r\n\\*\\* 书面提示 \\*\\* --  以下是 AP 探索表演任务的一部分书面答复提示 2d： \\\\r\n\\\\r\n\n<div style=\"width: 80%;\nmargin: auto; background-color: #EEEEEE; padding: 10px; font-family: serif;\nfont-size: 12pt\">\\r\n\\r\n<b>计算创新</b>\\r\n<br>\\r\n<br>\\r\n2d.使用特定的详细信息，描述 \\r\n<br><br>\\r\n<li>至少有一个数据存储担忧，数据隐私担忧，或数据安全担忧与计算创新直接相关。</li>\\r\n</div>\\r\n<br>\\r\n\\r\n**学生响应示例 ** -- 下面是一个学生响应如果解决数据担心问题的片段: \\r\n\\r\n<div\nstyle=\"width: 80%; margin: auto; background-color: #d9f3f5; padding: 10px;\nfont-family: serif; font-size: 12pt; line-height: 17pt\">\\r\n\\r\n<em> \n脸部摄取应用程序有权限使用你只能手机里的许多设备包括摄像头。一个由此产生的数据隐私的担忧是公司可以在你不知情的情况下访问摄像头看你在做什么。</em>\\r\n\\r\n</div>\\r\n\\r\n<br>\\r \n\\r\n** 零分!!!** -- 根据下面列出的评分准则，学生在第6行是 **不会** 获得分数的，而且在第7 行也很可能不会被奖励分数。\\r\n\\r\n**为什么？** 这里是第6 和 7 行的评分指南。\\r\n\\r\n![](https://images.code.org/96f6c02681616656f107dac058d15de6-image-1511206516901.35.08\nAM.png)\\r\n\\r\n##证明分数\\r\n\\r\n在以下地方提供解释：\\r\n\\r\n1. 依照评分指南，为什么学生在两行里都无法被奖励。\\r\n2. 提出一个建议, 说明如何修改响应可以让学生得到这分数。"
      U4-AP-Practice-Justify-the-Score: "# AP练习 - 证明分数\\\\r\n\n\\\\r\n\\*\\* 书面提示 \\*\\* --  以下是 AP 探索表演任务的一部分书面答复提示 2d： \\\\r\n\\\\r\n\n<div style=\"width: 80%;\nmargin: auto; background-color: #EEEEEE; padding: 10px; font-family: serif;\nfont-size: 12pt\">\\r\n\\r\n<b>计算创新</b>\\r\n<br>\\r\n<br>\\r\n2d.使用特定的详细信息，描述 \\r\n<br><br>\\r\n<li>至少有一个数据存储担忧，数据隐私担忧，或数据安全担忧与计算创新直接相关。</li>\\r\n</div>\\r\n<br>\\r\n\\r\n**学生响应示例 ** -- 下面是一个学生响应如果解决数据担心问题的片段: \\r\n\\r\n<div\nstyle=\"width: 80%; margin: auto; background-color: #d9f3f5; padding: 10px;\nfont-family: serif; font-size: 12pt; line-height: 17pt\">\\r\n\\r\n<em> \n脸部摄取应用程序有权限使用你只能手机里的许多设备包括摄像头。一个由此产生的数据隐私的担忧是公司可以在你不知情的情况下访问摄像头看你在做什么。</em>\\r\n\\r\n</div>\\r\n\\r\n<br>\\r \n\\r\n** 零分!!!** -- 根据下面列出的评分准则，学生在第6行是 **不会** 获得分数的，而且在第7 行也很可能不会被奖励分数。\\r\n\\r\n**为什么？** 这里是第6 和 7 行的评分指南。\\r\n\\r\n![](https://images.code.org/96f6c02681616656f107dac058d15de6-image-1511206516901.35.08\nAM.png)\\r\n\\r\n##证明分数\\r\n\\r\n在以下地方提供解释：\\r\n\\r\n1. 依照评分指南，为什么学生在两行里都无法被奖励。\\r\n2. 提出一个建议, 说明如何修改响应可以让学生得到这分数。"
      U4-AP-Practice-Justify-the-Score_2018: "# AP练习 - 证明分数\\\\r\n\n\\\\r\n\\*\\* 书面提示 \\*\\* --  以下是 AP 探索表演任务的一部分书面答复提示 2d： \\\\r\n\\\\r\n\n<div style=\"width: 80%;\nmargin: auto; background-color: #EEEEEE; padding: 10px; font-family: serif;\nfont-size: 12pt\">\\r\n\\r\n<b>计算创新</b>\\r\n<br>\\r\n<br>\\r\n2d.使用特定的详细信息，描述 \\r\n<br><br>\\r\n<li>至少有一个数据存储担忧，数据隐私担忧，或数据安全担忧与计算创新直接相关。</li>\\r\n</div>\\r\n<br>\\r\n\\r\n**学生响应示例 ** -- 下面是一个学生响应如果解决数据担心问题的片段: \\r\n\\r\n<div\nstyle=\"width: 80%; margin: auto; background-color: #d9f3f5; padding: 10px;\nfont-family: serif; font-size: 12pt; line-height: 17pt\">\\r\n\\r\n<em> \n脸部摄取应用程序有权限使用你只能手机里的许多设备包括摄像头。一个由此产生的数据隐私的担忧是公司可以在你不知情的情况下访问摄像头看你在做什么。</em>\\r\n\\r\n</div>\\r\n\\r\n<br>\\r \n\\r\n** 零分!!!** -- 根据下面列出的评分准则，学生在第6行是 **不会** 获得分数的，而且在第7 行也很可能不会被奖励分数。\\r\n\\r\n**为什么？** 这里是第6 和 7 行的评分指南。\\r\n\\r\n![](https://images.code.org/96f6c02681616656f107dac058d15de6-image-1511206516901.35.08\nAM.png)\\r\n\\r\n##证明分数\\r\n\\r\n在以下地方提供解释：\\r\n\\r\n1. 依照评分指南，为什么学生在两行里都无法被奖励。\\r\n2. 提出一个建议, 说明如何修改响应可以让学生得到这分数。"
      U4-AP-Practice-Justify-the-Score_2019: "# AP练习 - 证明分数\\\\r\n\n\\\\r\n\\*\\* 书面提示 \\*\\* --  以下是 AP 探索表演任务的一部分书面答复提示 2d： \\\\r\n\\\\r\n\n<div style=\"width: 80%;\nmargin: auto; background-color: #EEEEEE; padding: 10px; font-family: serif;\nfont-size: 12pt\">\\r\n\\r\n<b>计算创新</b>\\r\n<br>\\r\n<br>\\r\n2d.使用特定的详细信息，描述 \\r\n<br><br>\\r\n<li>至少有一个数据存储担忧，数据隐私担忧，或数据安全担忧与计算创新直接相关。</li>\\r\n</div>\\r\n<br>\\r\n\\r\n**学生响应示例 ** -- 下面是一个学生响应如果解决数据担心问题的片段: \\r\n\\r\n<div\nstyle=\"width: 80%; margin: auto; background-color: #d9f3f5; padding: 10px;\nfont-family: serif; font-size: 12pt; line-height: 17pt\">\\r\n\\r\n<em> \n脸部摄取应用程序有权限使用你只能手机里的许多设备包括摄像头。一个由此产生的数据隐私的担忧是公司可以在你不知情的情况下访问摄像头看你在做什么。</em>\\r\n\\r\n</div>\\r\n\\r\n<br>\\r \n\\r\n** 零分!!!** -- 根据下面列出的评分准则，学生在第6行是 **不会** 获得分数的，而且在第7 行也很可能不会被奖励分数。\\r\n\\r\n**为什么？** 这里是第6 和 7 行的评分指南。\\r\n\\r\n![](https://images.code.org/96f6c02681616656f107dac058d15de6-image-1511206516901.35.08\nAM.png)\\r\n\\r\n##证明分数\\r\n\\r\n在以下地方提供解释：\\r\n\\r\n1. 依照评分指南，为什么学生在两行里都无法被奖励。\\r\n2. 提出一个建议, 说明如何修改响应可以让学生得到这分数。"
      U5 AP Create Practice onEvent Doesnt Count: "# AP 练习- 创建表演任务 - 选择抽象 \\\\r\n\n\\\\r \n**AP 创建表演任务**的一个部分就是在你的程序中创建和描述抽象。这是实际的提示。\\\\r\n\\\\r\n\n<div style=\"width: 80%; margin: auto; background-color:\n#EEEEEE; padding: 10px; font-family: serif; font-size: 12pt\">\\r\n\\r\n<b>2.书写响应</b>\\r\n<ul>\\r \n2d. 采集并粘贴一个程序代码段，其中包含你独立开发的抽象 (用<b>长方形</b> 在 <b>章节3</b>下 )。此抽象必须集成数学和逻辑概念。\\r\n解释抽象如何帮助管理程序的复杂性。\\r\n<i>(不得超过200个字)</i>\\r\n</ul>\\r\n</div>\\r\n<br>\\r\n\\r\n这里是一行此问题的评分指南\\r\n\\r\n<div style=\"magin:auto\">\\r\n\\t<img\nsrc=\"https://images.code.org/7d5773ed70d947bf75e0c1b3f7e60911-image-1515454332418.32.05\nPM.png\">\\r\n</div>\\r\n\\r\n<br>\\r\n\\r\n# 对答复评分\\r\n\\r\n在下面是一个 \"点击器\" 程序的代码段，其中一个长方形围绕着一个标识抽象的代码的一部分。\\r\n\\r\n![](https://images.code.org/7ceaa61af4feb06707f593e4b4ec1947-image-1515454046037.26.18\nPM.png)\\r\n\\r\n每行都值一分, 既可以被授予也可以不授予得分。** 根据以上给出的标准，解释为什么你对第7 行会或不会授予奖励。**"
      U5 AP Create Practice onEvent Doesnt Count_2018: "# AP 练习- 创建表演任务 - 选择抽象 \\\\r\n\n\\\\r \n**AP 创建表演任务**的一个部分就是在你的程序中创建和描述抽象。这是实际的提示。\\\\r\n\\\\r\n\n<div style=\"width: 80%; margin: auto; background-color:\n#EEEEEE; padding: 10px; font-family: serif; font-size: 12pt\">\\r\n\\r\n<b>2.书写响应</b>\\r\n<ul>\\r \n2d. 采集并粘贴一个程序代码段，其中包含你独立开发的抽象 (用<b>长方形</b> 在 <b>章节3</b>下 )。此抽象必须集成数学和逻辑概念。\\r\n解释抽象如何帮助管理程序的复杂性。\\r\n<i>(不得超过200个字)</i>\\r\n</ul>\\r\n</div>\\r\n<br>\\r\n\\r\n这里是一行此问题的评分指南\\r\n\\r\n<div style=\"magin:auto\">\\r\n\\t<img\nsrc=\"https://images.code.org/7d5773ed70d947bf75e0c1b3f7e60911-image-1515454332418.32.05\nPM.png\">\\r\n</div>\\r\n\\r\n<br>\\r\n\\r\n# 对答复评分\\r\n\\r\n在下面是一个 \"点击器\" 程序的代码段，其中一个长方形围绕着一个标识抽象的代码的一部分。\\r\n\\r\n![](https://images.code.org/7ceaa61af4feb06707f593e4b4ec1947-image-1515454046037.26.18\nPM.png)\\r\n\\r\n每行都值一分, 既可以被授予也可以不授予得分。** 根据以上给出的标准，解释为什么你对第7 行会或不会授予奖励。**"
      U5 AP Create Practice onEvent Doesnt Count_2019: "# AP 练习- 创建表演任务 - 选择抽象 \\\\r\n\n\\\\r \n**AP 创建表演任务**的一个部分就是在你的程序中创建和描述抽象。这是实际的提示。\\\\r\n\\\\r\n\n<div style=\"width: 80%; margin: auto; background-color:\n#EEEEEE; padding: 10px; font-family: serif; font-size: 12pt\">\\r\n\\r\n<b>2.书写响应</b>\\r\n<ul>\\r \n2d. 采集并粘贴一个程序代码段，其中包含你独立开发的抽象 (用<b>长方形</b> 在 <b>章节3</b>下 )。此抽象必须集成数学和逻辑概念。\\r\n解释抽象如何帮助管理程序的复杂性。\\r\n<i>(不得超过200个字)</i>\\r\n</ul>\\r\n</div>\\r\n<br>\\r\n\\r\n这里是一行此问题的评分指南\\r\n\\r\n<div style=\"magin:auto\">\\r\n\\t<img\nsrc=\"https://images.code.org/7d5773ed70d947bf75e0c1b3f7e60911-image-1515454332418.32.05\nPM.png\">\\r\n</div>\\r\n\\r\n<br>\\r\n\\r\n# 对答复评分\\r\n\\r\n在下面是一个 \"点击器\" 程序的代码段，其中一个长方形围绕着一个标识抽象的代码的一部分。\\r\n\\r\n![](https://images.code.org/7ceaa61af4feb06707f593e4b4ec1947-image-1515454046037.26.18\nPM.png)\\r\n\\r\n每行都值一分, 既可以被授予也可以不授予得分。** 根据以上给出的标准，解释为什么你对第7 行会或不会授予奖励。**"
      U5 AP Practice Create Abstraction Color Sleuth: "# AP 练习- 创建表演任务 - 抽象 \\\\r\n\n\\\\r\n**AP 创建表演任务**的一个部分就是在你的程序中描述抽象。\\\\r\n\\\\r\n\n<div\nstyle=\"width: 80%; margin: auto; background-color: #EEEEEE; padding: 10px;\nfont-family: serif; font-size: 12pt\">\\r\n\\r\n<b>2.书写响应</b>\\r\n<ul>\\r \n2d. 采集并粘贴一个程序代码段，其中包含你独立开发的抽象（用<b>长方形</b> 在 <b>章节3</b>下）。此抽象必须集成数学和逻辑概念。解释抽象如何帮助管理程序的复杂性。\\r\n<i>（不能超过200字）</i></ul>\\r\n</div>\\r\n<br>\\r\n\\r\n这里是一行此问题的评分指南\\r\n\\r\n<div style=\"magin:auto\">\\r\n\\t<img\nsrc=\"https://images.code.org/d994f69c99550a352de5565ee4d74f54-image-1516226857132.04.40\nPM.png\">\\r\n</div>\\r\n\\r\n# 写下答复\\r\n\\r\n![](https://images.code.org/33f44fc55155b5e75afd37475640bc16-image-1515653209087.46.40\nPM.png)\\r\n\\r\n<div style=\"clear:both\"></div>\\r\n\\r\n<br>\\r\n\\r\n上面选择的代码是从你完成的颜色侦探活动中选出来的。在创建表演任务中，这些选择的代码**将会被算成抽象**，但为了获得第8行的分数**你需要描述这个抽象如何管理了复杂度**。\\r\n\\r\n\\r\n** 写下2d的答复，描述上面的抽象。用写作提示和评分向导作为指南。**"
      U5 AP Practice Create Abstraction Color Sleuth_2018: "# AP 练习- 创建表演任务 - 抽象 \\\\r\n\n\\\\r\n**AP 创建表演任务**的一个部分就是在你的程序中描述抽象。\\\\r\n\\\\r\n\n<div\nstyle=\"width: 80%; margin: auto; background-color: #EEEEEE; padding: 10px;\nfont-family: serif; font-size: 12pt\">\\r\n\\r\n<b>2.书写响应</b>\\r\n<ul>\\r \n2d. 采集并粘贴一个程序代码段，其中包含你独立开发的抽象（用<b>长方形</b> 在 <b>章节3</b>下）。此抽象必须集成数学和逻辑概念。解释抽象如何帮助管理程序的复杂性。\\r\n<i>（不能超过200字）</i></ul>\\r\n</div>\\r\n<br>\\r\n\\r\n这里是一行此问题的评分指南\\r\n\\r\n<div style=\"magin:auto\">\\r\n\\t<img\nsrc=\"https://images.code.org/d994f69c99550a352de5565ee4d74f54-image-1516226857132.04.40\nPM.png\">\\r\n</div>\\r\n\\r\n# 写下答复\\r\n\\r\n![](https://images.code.org/33f44fc55155b5e75afd37475640bc16-image-1515653209087.46.40\nPM.png)\\r\n\\r\n<div style=\"clear:both\"></div>\\r\n\\r\n<br>\\r\n\\r\n上面选择的代码是从你完成的颜色侦探活动中选出来的。在创建表演任务中，这些选择的代码**将会被算成抽象**，但为了获得第8行的分数**你需要描述这个抽象如何管理了复杂度**。\\r\n\\r\n\\r\n** 写下2d的答复，描述上面的抽象。用写作提示和评分向导作为指南。**"
      U5 AP Practice Create Abstraction Color Sleuth_2019: "# AP 练习- 创建表演任务 - 抽象 \\\\r\n\n\\\\r\n**AP 创建表演任务**的一个部分就是在你的程序中描述抽象。\\\\r\n\\\\r\n\n<div\nstyle=\"width: 80%; margin: auto; background-color: #EEEEEE; padding: 10px;\nfont-family: serif; font-size: 12pt\">\\r\n\\r\n<b>2.书写响应</b>\\r\n<ul>\\r \n2d. 采集并粘贴一个程序代码段，其中包含你独立开发的抽象（用<b>长方形</b> 在 <b>章节3</b>下）。此抽象必须集成数学和逻辑概念。解释抽象如何帮助管理程序的复杂性。\\r\n<i>（不能超过200字）</i></ul>\\r\n</div>\\r\n<br>\\r\n\\r\n这里是一行此问题的评分指南\\r\n\\r\n<div style=\"magin:auto\">\\r\n\\t<img\nsrc=\"https://images.code.org/d994f69c99550a352de5565ee4d74f54-image-1516226857132.04.40\nPM.png\">\\r\n</div>\\r\n\\r\n# 写下答复\\r\n\\r\n![](https://images.code.org/33f44fc55155b5e75afd37475640bc16-image-1515653209087.46.40\nPM.png)\\r\n\\r\n<div style=\"clear:both\"></div>\\r\n\\r\n<br>\\r\n\\r\n上面选择的代码是从你完成的颜色侦探活动中选出来的。在创建表演任务中，这些选择的代码**将会被算成抽象**，但为了获得第8行的分数**你需要描述这个抽象如何管理了复杂度**。\\r\n\\r\n\\r\n** 写下2d的答复，描述上面的抽象。用写作提示和评分向导作为指南。**"
      U5 AP Practice Create Algorithm Color Sleuth: |-
        # AP 练习 - 创建表演任务 - 算法\\r

        \\r
         **AP 创建表演任务**的一个组成部分是在你的程序里描述算法。\\r
        \\r

        <div style="width:
        80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family:
        serif; font-size: 12pt">\r
        \r
        <b>2. 书写答复</b>\r
        <ul>\r
        2c.
        采集并粘贴实现算法的代码片段（在<b>章节3</b>下用 <b>oval</b> ），它是你程序要取得设定目的的基础。此代码段必须是你自己独立开发的一个算法，必须包含两个或多个算法，而且必须和数学和/或逻辑概念集成。描述每个算法在你选择的算法里是如何独立作用的。以及它是如何与其他算法合并的，并组成一个新算法来帮助取得程序设定的目的。 <i>(不得超过200 字)</i>\r
        </ul>\r
        </div>\r
        <br>\r
        \r
        这是此问题计分指南的两行\r
        \r
        <div style="magin:auto">\r
        \t<img
        src="https://images.code.org/febdb2c140b9a4f34f2d4a93370c8b53-image-1515518259767.17.31
        AM.png">\r
        </div>\r
        \r
        # 书写答复\r
        \r
        <img src="https://images.code.org/e841e427e8020f075c8718631bf0cfb3-image-1516228295228.31.22
        PM.png" style="float:right">\r
        \r
        此代码是从你刚完成的颜色侦探活动中拿来的，在创建表演任务上**将被算为一个算法**。\r
        \r
        **书写响应 2c 来描述以上的算法.
        使用书写提示和计分指南作为指南。** 这里你务必要涵括的主要几点。\r
        \r
        * 命名主算法以及2 个子-算法的每一个\r
        * 解释每个子-算法是做*什么 *以及每个代码实际上是*如何*运作的\r
        * 解释主算法是如何运作的，以及它是如何达成程序目的的。
      U5 AP Practice Create Algorithm Color Sleuth_2018: |-
        # AP 练习 - 创建表演任务 - 算法\\r

        \\r
         **AP 创建表演任务**的一个组成部分是在你的程序里描述算法。\\r
        \\r

        <div style="width:
        80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family:
        serif; font-size: 12pt">\r
        \r
        <b>2. 书写答复</b>\r
        <ul>\r
        2c.
        采集并粘贴实现算法的代码片段（在<b>章节3</b>下用 <b>oval</b> ），它是你程序要取得设定目的的基础。此代码段必须是你自己独立开发的一个算法，必须包含两个或多个算法，而且必须和数学和/或逻辑概念集成。描述每个算法在你选择的算法里是如何独立作用的。以及它是如何与其他算法合并的，并组成一个新算法来帮助取得程序设定的目的。 <i>(不得超过200 字)</i>\r
        </ul>\r
        </div>\r
        <br>\r
        \r
        这是此问题计分指南的两行\r
        \r
        <div style="magin:auto">\r
        \t<img
        src="https://images.code.org/febdb2c140b9a4f34f2d4a93370c8b53-image-1515518259767.17.31
        AM.png">\r
        </div>\r
        \r
        # 书写答复\r
        \r
        <img src="https://images.code.org/e841e427e8020f075c8718631bf0cfb3-image-1516228295228.31.22
        PM.png" style="float:right">\r
        \r
        此代码是从你刚完成的颜色侦探活动中拿来的，在创建表演任务上**将被算为一个算法**。\r
        \r
        **书写响应 2c 来描述以上的算法.
        使用书写提示和计分指南作为指南。** 这里你务必要涵括的主要几点。\r
        \r
        * 命名主算法以及2 个子-算法的每一个\r
        * 解释每个子-算法是做*什么 *以及每个代码实际上是*如何*运作的\r
        * 解释主算法是如何运作的，以及它是如何达成程序目的的。
      U5 AP Practice Create Algorithm Color Sleuth_2019: |-
        # AP 练习 - 创建表演任务 - 算法\\r

        \\r
         **AP 创建表演任务**的一个组成部分是在你的程序里描述算法。\\r
        \\r

        <div style="width:
        80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family:
        serif; font-size: 12pt">\r
        \r
        <b>2. 书写答复</b>\r
        <ul>\r
        2c.
        采集并粘贴实现算法的代码片段（在<b>章节3</b>下用 <b>oval</b> ），它是你程序要取得设定目的的基础。此代码段必须是你自己独立开发的一个算法，必须包含两个或多个算法，而且必须和数学和/或逻辑概念集成。描述每个算法在你选择的算法里是如何独立作用的。以及它是如何与其他算法合并的，并组成一个新算法来帮助取得程序设定的目的。 <i>(不得超过200 字)</i>\r
        </ul>\r
        </div>\r
        <br>\r
        \r
        这是此问题计分指南的两行\r
        \r
        <div style="magin:auto">\r
        \t<img
        src="https://images.code.org/febdb2c140b9a4f34f2d4a93370c8b53-image-1515518259767.17.31
        AM.png">\r
        </div>\r
        \r
        # 书写答复\r
        \r
        <img src="https://images.code.org/e841e427e8020f075c8718631bf0cfb3-image-1516228295228.31.22
        PM.png" style="float:right">\r
        \r
        此代码是从你刚完成的颜色侦探活动中拿来的，在创建表演任务上**将被算为一个算法**。\r
        \r
        **书写响应 2c 来描述以上的算法.
        使用书写提示和计分指南作为指南。** 这里你务必要涵括的主要几点。\r
        \r
        * 命名主算法以及2 个子-算法的每一个\r
        * 解释每个子-算法是做*什么 *以及每个代码实际上是*如何*运作的\r
        * 解释主算法是如何运作的，以及它是如何达成程序目的的。
      U5 AP Practice Create Algorithm How vs What: |-
        # AP 练习 - 创建表演任务 - 过程\\r

        \\r
         **AP 创建表演任务** 的一个部分就是描述程序的开发过程。\\r
        \\r

        <div
        style="width: 80%; margin: auto; background-color: #EEEEEE; padding: 10px;
        font-family: serif; font-size: 12pt">\r
        \r
        <b>2. 书写答复</b>\r
        <ul>\r
        2b.
        描述程序开发过程的进展和迭代，专注在该程序的两大主要特点上。描述你遇到的困难和/或机会，以及它们是如何被解决或利用的。在你的描述里清楚地指明开发是协作或独立完成。至少有一点必须引用独立的程序开发。<i>(不能超出200字)</i>\r
        </ul>\r
        </div>\r
        <br>\r
        \r
        这是该问题计分指南中的2行\r
        \r
        <div style="magin:auto">\r
        \t<img
        src="https://images.code.org/18480a117da79e3c5599edfe0b98836a-image-1515438403469.06.32
        AM.png">\r
        </div>\r
        \r
        # 对答复评分\r
        \r
        一位学生书写以下答复。\r
        \r
        *"在我开发我的程序过程中，我遇到两大主要问题。第一个问题是在程序的早期，有时候苹果会从我的屏幕中消失。在解决此程序缺陷后， 我意识到随机数X 值得范围被设为0-3200，而非0-320。我很容易地纠正了代码中的这个问题。第二个问题发生在当我意识到使用此游戏的同学们不知道如何开始此游戏。为了解决此问题，我把按钮做得足够大，并和背景颜色不同。随后我再也没有看到此问题"*\r
        \r
        \r
        每行值一分，既可以也可以不给分。**参照以上所给的标准，解释为什么你对第2 行和第3 行会或不会授予分数。**
      U5 AP Practice Create Process: |-
        # AP 练习 - 创建表演任务 - 过程\\r

        \\r
        **AP 创建性能任务**的一个部分是描述用于程序的开发过程。\\r\\r

        <div style="width:
        80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family:
        serif; font-size: 12pt">
        <b>2.书写答复</b>
        <ul>\r
        2b. 描述程序开发过程的进展和迭代，专注在该程序的两大主要特点上。描述你遇到的困难和/或机会，以及它们是如何被解决或利用的。在你的描述里清楚地指明开发是协作或独立完成。至少有一点必须引用独立的程序开发。<i>(不能超出200字)</i>\r
        </ul>\r
        </div>\r
        <br>\r
        \r
        这是该问题计分指南中的第2 行\r
        \r
        <div style="magin:auto">\r
        \t<img
        src="https://images.code.org/18480a117da79e3c5599edfe0b98836a-image-1515438403469.06.32
        AM.png">\r
        </div>\r
        \r
        # 对响应评分\r\r
        一个学生编写了以下响应。 \r\r
        *"在我开发我的程序过程中，我遇到两大主要问题。第一个问题是在程序的早期，有时候苹果会从我的屏幕中消失。在解决此程序缺陷后， 我意识到随机数X 值得范围被设为0-3200，而非0-320。我很容易地纠正了代码中的这个问题。第二个问题发生在当我意识到使用此游戏的同学们不知道如何开始此游戏。为了解决此问题，我把按钮做得足够大，并和背景颜色不同。随后我再也没有看到此问题"*\r
         \r
        \r
        每行值一分，既可以也可以不给分。** 解释为什么你会或不会授予第2行和3行得分 **。\r
        \r
        提示：特别注意评分指南的最后一栏和定名为"不授予得分，如果...”的检查表。
      U5 AP Practice Create Process_2018: |-
        # AP 练习 - 创建表演任务 - 过程\\r

        \\r
        **AP 创建性能任务**的一个部分是描述用于程序的开发过程。\\r\\r

        <div style="width:
        80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family:
        serif; font-size: 12pt">
        <b>2.书写答复</b>
        <ul>\r
        2b. 描述程序开发过程的进展和迭代，专注在该程序的两大主要特点上。描述你遇到的困难和/或机会，以及它们是如何被解决或利用的。在你的描述里清楚地指明开发是协作或独立完成。至少有一点必须引用独立的程序开发。<i>(不能超出200字)</i>\r
        </ul>\r
        </div>\r
        <br>\r
        \r
        这是该问题计分指南中的第2 行\r
        \r
        <div style="magin:auto">\r
        \t<img
        src="https://images.code.org/18480a117da79e3c5599edfe0b98836a-image-1515438403469.06.32
        AM.png">\r
        </div>\r
        \r
        # 对响应评分\r\r
        一个学生编写了以下响应。 \r\r
        *"在我开发我的程序过程中，我遇到两大主要问题。第一个问题是在程序的早期，有时候苹果会从我的屏幕中消失。在解决此程序缺陷后， 我意识到随机数X 值得范围被设为0-3200，而非0-320。我很容易地纠正了代码中的这个问题。第二个问题发生在当我意识到使用此游戏的同学们不知道如何开始此游戏。为了解决此问题，我把按钮做得足够大，并和背景颜色不同。随后我再也没有看到此问题"*\r
         \r
        \r
        每行值一分，既可以也可以不给分。** 解释为什么你会或不会授予第2行和3行得分 **。\r
        \r
        提示：特别注意评分指南的最后一栏和定名为"不授予得分，如果...”的检查表。
      U5 AP Practice Create Process_2019: |-
        # AP 练习 - 创建表演任务 - 过程\\r

        \\r
        **AP 创建性能任务**的一个部分是描述用于程序的开发过程。\\r\\r

        <div style="width:
        80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family:
        serif; font-size: 12pt">
        <b>2.书写答复</b>
        <ul>\r
        2b. 描述程序开发过程的进展和迭代，专注在该程序的两大主要特点上。描述你遇到的困难和/或机会，以及它们是如何被解决或利用的。在你的描述里清楚地指明开发是协作或独立完成。至少有一点必须引用独立的程序开发。<i>(不能超出200字)</i>\r
        </ul>\r
        </div>\r
        <br>\r
        \r
        这是该问题计分指南中的第2 行\r
        \r
        <div style="magin:auto">\r
        \t<img
        src="https://images.code.org/18480a117da79e3c5599edfe0b98836a-image-1515438403469.06.32
        AM.png">\r
        </div>\r
        \r
        # 对响应评分\r\r
        一个学生编写了以下响应。 \r\r
        *"在我开发我的程序过程中，我遇到两大主要问题。第一个问题是在程序的早期，有时候苹果会从我的屏幕中消失。在解决此程序缺陷后， 我意识到随机数X 值得范围被设为0-3200，而非0-320。我很容易地纠正了代码中的这个问题。第二个问题发生在当我意识到使用此游戏的同学们不知道如何开始此游戏。为了解决此问题，我把按钮做得足够大，并和背景颜色不同。随后我再也没有看到此问题"*\r
         \r
        \r
        每行值一分，既可以也可以不给分。** 解释为什么你会或不会授予第2行和3行得分 **。\r
        \r
        提示：特别注意评分指南的最后一栏和定名为"不授予得分，如果...”的检查表。
      U5 Booleans: |-
        ### 注意事项:

        1.  什么是 \* 布尔表达式？ \*
        2.  为什么它被称为 "布尔"？
        3.  这样表达是合法的吗？ `10 > 25`？
      U5 Check Password if statement lock image: "<img src=\"https://images.code.org/117a2a8e098760173f16048fde721295-image-1479829058899.gif\" style=\"float: right; width: 150px\">\n\n## 试试看 -- 文本密码检查器\n\n\\*\\*关键 \\*\\*: 您可以使用 `==` 来比较字符串和数字。  \n\n-   在事件处理程序中使用 如果语句来比较用户在界面元素中输入的文本。\n\n\\*\\* 设置: \\*\\*\n\n-   注意设计模式下的设置\n-   有两个图像: 一个红色的锁和一个绿色的 \"解锁\"。\n-   绿色 \"解锁\" 开始是 _隐藏_ 状态。\n\n## 这样做:\n\n\\*\\* 将如果语句添加到事件处理程序，来检查密码。并仅在密码正确时显示 \"解锁\" \\*\\*  \n\n-   可以使用`==` 来比较从 *password\\_input* 文本框中获得的文本和要用作密码的字符串。应使用的布尔表达式应如下所:\n\n![](https://images.code.org/9124274f38ed19bdae6cfc4b492162b6-image-1479828796051.png)\n\n-   如果用户输入了正确的密码, 则 **显示** 绿色的\"解锁\" 并 **隐藏** 红色锁。\n    \\\\t\\* 我们提供了隐藏和显示图像的代码。只需要添加如果语句。\n-   否则不执行任何操作。 可以再试一次。"
      U5 Check Password if statement lock image_2018: "<img src=\"https://images.code.org/117a2a8e098760173f16048fde721295-image-1479829058899.gif\" style=\"float: right; width: 150px\">\n\n## 试试看 -- 文本密码检查器\n\n\\*\\*关键 \\*\\*: 您可以使用 `==` 来比较字符串和数字。  \n\n-   在事件处理程序中使用 如果语句来比较用户在界面元素中输入的文本。\n\n\\*\\* 设置: \\*\\*\n\n-   注意设计模式下的设置\n-   有两个图像: 一个红色的锁和一个绿色的 \"解锁\"。\n-   绿色 \"解锁\" 开始是 _隐藏_ 状态。\n\n## 这样做:\n\n\\*\\* 将如果语句添加到事件处理程序，来检查密码。并仅在密码正确时显示 \"解锁\" \\*\\*  \n\n-   可以使用`==` 来比较从 *password\\_input* 文本框中获得的文本和要用作密码的字符串。应使用的布尔表达式应如下所:\n\n![](https://images.code.org/9124274f38ed19bdae6cfc4b492162b6-image-1479828796051.png)\n\n-   如果用户输入了正确的密码, 则 **显示** 绿色的\"解锁\" 并 **隐藏** 红色锁。\n    \\\\t\\* 我们提供了隐藏和显示图像的代码。只需要添加如果语句。\n-   否则不执行任何操作。 可以再试一次。"
      U5 Check Password if statement lock image_2019: "<img src=\"https://images.code.org/117a2a8e098760173f16048fde721295-image-1479829058899.gif\" style=\"float: right; width: 150px\">\n\n## 试试看 -- 文本密码检查器\n\n\\*\\*关键 \\*\\*: 您可以使用 `==` 来比较字符串和数字。  \n\n-   在事件处理程序中使用 如果语句来比较用户在界面元素中输入的文本。\n\n\\*\\* 设置: \\*\\*\n\n-   注意设计模式下的设置\n-   有两个图像: 一个红色的锁和一个绿色的 \"解锁\"。\n-   绿色 \"解锁\" 开始是 _隐藏_ 状态。\n\n## 这样做:\n\n\\*\\* 将如果语句添加到事件处理程序，来检查密码。并仅在密码正确时显示 \"解锁\" \\*\\*  \n\n-   可以使用`==` 来比较从 *password\\_input* 文本框中获得的文本和要用作密码的字符串。应使用的布尔表达式应如下所:\n\n![](https://images.code.org/9124274f38ed19bdae6cfc4b492162b6-image-1479828796051.png)\n\n-   如果用户输入了正确的密码, 则 **显示** 绿色的\"解锁\" 并 **隐藏** 红色锁。\n    \\\\t\\* 我们提供了隐藏和显示图像的代码。只需要添加如果语句。\n-   否则不执行任何操作。 可以再试一次。"
      U5 ColorSleuth implement end game: |-
        # 挑战 - 找个方法让游戏结束并实现它。

        现在你的挑战是加上一些代码来完成自己的程序。用你已经学到的东西，以及阿历克斯和迈克尔的讨论来获得灵感。

        **这是最后一个编程关卡**

        -   按照自己的想法来改动或添加程序
        -   完成后，点击**提交**

        **目标** 添加代码来让游戏能够结束，比如：

        -   切换到`gameOver_screen`（游戏结束\_屏幕）
        -   \*
            通过显示`player1Win_label`（玩家1胜利_标签）或\`player2Win_label\`（玩家2胜利\_标签）来显示哪个玩家赢得了游戏。

            *我们为这个项目提供了`gameOver_screen`（ 游戏结束\_屏幕）模板 - 切换到设计模式来看看那里有什么。*

            **建议**
        -   \*
            如果你还是没有主意，试着实现"first
            to 10"（谁先到10分） - 第一个到达10分的玩家赢得游戏。
        -   你应该通过讨论来添加一个类似于`checkGameOver()`（检查游戏是否结束）的函数，并从`checkCorrect`（检查正确）函数里调用它。

        <details><summary><strong>超越：
        可选的额外选项 [点击展开]</strong></summary>

        <p>
        这里有一大堆方法来添加或扩展到项目里：

        </p>
        <ul>

        <li>在最后一个屏幕添加"重新开始"按钮，让它重置所有东西，并返回到游戏的开始屏幕。
        </li>
        <li>添加一个欢迎屏幕来解释规则，并且邀请玩家开始游戏（让它成为默认屏幕）
        </li>
        <li>让游戏更难一点：</li>
        <uL>
        <li>让颜色更相似一些（我们给每个RGB值增加了20，试试15或者10）。</li>
        <li>或者制作一个难度变量 - 你可以生成一个在5到20间的随机数，加到RGB值上。</li>
        <li>或者让过程更复杂 - 用一个变量来跟踪加到每个RGB值上的数，并随着时间慢慢减少它。</li>
        \t<li>或者在欢迎屏幕上问问玩家想要玩简单、正常、或困难的哪个难度。</li>
        </uL>

        <li>添加计时 - 在文档中寻找setTimeout（设置超时时间）函数，它会在过了一段时间后调用函数。（注意：你需要将项目在自由应用实验室中合成后，才能这样做 ）。
        </li>
        <li>你也可以在代码开始和结束时用
        <code>getTime()</code>函数来计算游戏用了多长时间，然后通过这个时间来判断分数。</li>
        </ul>
        </details>
      U5 video Booleans: |-
        ### 注意事项:

        1.  什么是 \* 布尔表达式？ \*
        2.  为什么它被称为 "布尔"？
        3.  这样表达是合法的吗？ `10 > 25`？
      U5-AP-Algorithm-Does-It-Count: |-
        # AP 练习 - 算法 - 给答复打分\\r

        \\r
         **AP表演任务**的一个部分是选择和描述你已开发的算法。\\r
        \\r

        <div style="width:
        80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family:
        serif; font-size: 12pt">\r
        \r
        <b>2. 书写答复</b>\r
        <ul>\r
        2c.
        采集并粘贴实现算法的代码片段（在<b>章节3</b>下用 <b>oval</b> ），它是你程序要取得设定目的的基础。此代码段必须是你自己独立开发的一个算法，必须包含两个或多个算法，而且必须和数学和/或逻辑概念集成。描述每个算法在你选择的算法里是如何独立作用的。以及它是如何与其他算法合并的，并组成一个新算法来帮助取得程序设定的目的。(不得超过200 字)\r
        </ul>\r
        </div>\r
        <br>\r
        \r
        这是此问题的计分指南\r
        \r
        <div style="magin:auto">\r
        \t<img
        src="https://images.code.org/73352bdcc7c3b46ee949f534a0de9dd4-image-1515191914293.38.22
        PM.png">\r
        </div>\r
        \r
        # 给答复打分\r
        \r
        **书写答复：**
        *"我的算法控制着此应用程序的登录。这部分对我的程序很重要因为在应用程序里的数据需要安全。此算法保证只有有正确密码的用户可以进入此应用程序来使用它。"*\r
        \r
        **编写代码：** \r
        \r
        <img src="https://images.code.org/e1929ddfdc31d0a96c9111a6e76f43d0-image-1517465128952.png"
        style="height:300px">\r
        \r
        **解释基于以上给出的标准你会或不会对第5行给分**\r
      U5-AP-Algorithm-Does-It-Count_2018: |-
        # AP 练习 - 算法 - 给答复打分\\r

        \\r
         **AP表演任务**的一个部分是选择和描述你已开发的算法。\\r
        \\r

        <div style="width:
        80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family:
        serif; font-size: 12pt">\r
        \r
        <b>2. 书写答复</b>\r
        <ul>\r
        2c.
        采集并粘贴实现算法的代码片段（在<b>章节3</b>下用 <b>oval</b> ），它是你程序要取得设定目的的基础。此代码段必须是你自己独立开发的一个算法，必须包含两个或多个算法，而且必须和数学和/或逻辑概念集成。描述每个算法在你选择的算法里是如何独立作用的。以及它是如何与其他算法合并的，并组成一个新算法来帮助取得程序设定的目的。(不得超过200 字)\r
        </ul>\r
        </div>\r
        <br>\r
        \r
        这是此问题的计分指南\r
        \r
        <div style="magin:auto">\r
        \t<img
        src="https://images.code.org/73352bdcc7c3b46ee949f534a0de9dd4-image-1515191914293.38.22
        PM.png">\r
        </div>\r
        \r
        # 给答复打分\r
        \r
        **书写答复：**
        *"我的算法控制着此应用程序的登录。这部分对我的程序很重要因为在应用程序里的数据需要安全。此算法保证只有有正确密码的用户可以进入此应用程序来使用它。"*\r
        \r
        **编写代码：** \r
        \r
        <img src="https://images.code.org/e1929ddfdc31d0a96c9111a6e76f43d0-image-1517465128952.png"
        style="height:300px">\r
        \r
        **解释基于以上给出的标准你会或不会对第5行给分**\r
      U5-AP-Algorithm-Does-It-Count_2019: |-
        # AP 练习 - 算法 - 给答复打分\\r

        \\r
         **AP表演任务**的一个部分是选择和描述你已开发的算法。\\r
        \\r

        <div style="width:
        80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family:
        serif; font-size: 12pt">\r
        \r
        <b>2. 书写答复</b>\r
        <ul>\r
        2c.
        采集并粘贴实现算法的代码片段（在<b>章节3</b>下用 <b>oval</b> ），它是你程序要取得设定目的的基础。此代码段必须是你自己独立开发的一个算法，必须包含两个或多个算法，而且必须和数学和/或逻辑概念集成。描述每个算法在你选择的算法里是如何独立作用的。以及它是如何与其他算法合并的，并组成一个新算法来帮助取得程序设定的目的。(不得超过200 字)\r
        </ul>\r
        </div>\r
        <br>\r
        \r
        这是此问题的计分指南\r
        \r
        <div style="magin:auto">\r
        \t<img
        src="https://images.code.org/73352bdcc7c3b46ee949f534a0de9dd4-image-1515191914293.38.22
        PM.png">\r
        </div>\r
        \r
        # 给答复打分\r
        \r
        **书写答复：**
        *"我的算法控制着此应用程序的登录。这部分对我的程序很重要因为在应用程序里的数据需要安全。此算法保证只有有正确密码的用户可以进入此应用程序来使用它。"*\r
        \r
        **编写代码：** \r
        \r
        <img src="https://images.code.org/e1929ddfdc31d0a96c9111a6e76f43d0-image-1517465128952.png"
        style="height:300px">\r
        \r
        **解释基于以上给出的标准你会或不会对第5行给分**\r
      U5-AP-Practice-Choose-The-Algorithm: |-
        # AP 练习 - 找到抽象\\r

        \\r
        **AP创建表演任务**的其中一个部分是选择你开发的抽象。\\r
        \\r

        <div style="width:
        80%; margin: auto; background-color: #EEEEEE; padding: 10px; font-family:
        serif; font-size: 12pt">\r
        \r
        <b>3. 编写代码</b>\r
        <ul>\r
        <li>用一个<b>长方形</b>标示出程序中你开发的代表抽象的部分程序代码。</li>\r
        </ul>\r
        </div>\r
        <br>\r
        \r
        这是这个问题的评分指南\r\r
        <div style="magin:auto">\r
        \t<img src="https://images.code.org/341764b27f16965cf27680e20c893a23-image-1508190677805.50.59
        PM.png">\r
        </div>\r
        \r
        #选择学生创建的抽象\r
        \r
        下面是一位学生开发的程序里的程序代码。\r
        ![](https://images.code.org/86d48cfc2c9c81551aa059281e9c62f3-image-1508189804595.34.48
        PM.png)\r
        \r
        **写下哪个长方形(A, B, C, or D)是放在学生刚开发的抽象中。**\r
        \r
        **然后用评分指南中的标准来解释你的答案。**
      U5-AP-Practice-FR-manage-complexity: |-
        # AP 练习- 表演任务响应\\r

        \\r
        AP 创建表演任务要求你编写一个你开发并写入代码中的抽象。大多数情况下，这意味着确定一个你编写的函数或过程来帮助在你的程序中"管理复杂性"。\\r
        \\r
        这是创建表演任务中的提示：\\r \\r

        <div style="width: 70%; margin: auto;
        background-color: #EEEEEE; padding: 10px; font-family: serif; font-size: 12pt">\r
        \r
        <b>2d.</b>
        捕获并粘贴一个程序代码段，它包含你单独开发的抽象（用一个<b>长方形</b>标记）。这种抽象必须集成数学和逻辑概念。解释你的抽象是如何帮助管理程序的复杂性的。\r
        <br>\r
        <i>(不超过200字)</i>\r
        \r
        </div>\r
        \r
        <br>\r
        \r
        下面是一个 "海底"程序的代码段，它含有一个围绕着标识抽象的代码的长方形。假设它是你编写的, 而且你在起草有关此抽象如何管理复杂性的AP 响应。 (注意: 忽略抽象将 "数学和逻辑概念" 集成到此实践响应的要求。 只需写关于管理复杂性的信息)。\r
        \r
        ![](https://images.code.org/d98fa58fce78eff86fd734f32e2960e4-image-1507913593511.png)\r
        \r
        解释在上面的代码中用长方形标记的抽象如何帮助管理此程序的复杂性。
      Underground Avoiding Lava: 岩浆隐藏在某些块的下方，你得填上它们才能前进。使用`如果`命令来解决这个问题。在合适的位置添加`向前移动`命令来采集这些资源。
      Underground Avoiding Lava_2018: 岩浆隐藏在某些块的下方，你得填上它们才能前进。使用`如果`命令来解决这个问题。在合适的位置添加`向前移动`命令来采集这些资源。
      Underground Avoiding Lava_2019: 岩浆隐藏在某些块的下方，你得填上它们才能前进。使用`如果`命令来解决这个问题。在合适的位置添加`向前移动`命令来采集这些资源。
      Underground If Statements: 现在事情变得越来越棘手了。挖掘3块红石, 但不要落入熔岩。使用`如果`指令将圆石放置在任何未掩盖的熔岩上。
      Underground If Statements_2018: 现在事情变得越来越棘手了。挖掘3块红石, 但不要落入熔岩。使用`如果`指令将圆石放置在任何未掩盖的熔岩上。
      Underground If Statements_2019: 现在事情变得越来越棘手了。挖掘3块红石, 但不要落入熔岩。使用`如果`指令将圆石放置在任何未掩盖的熔岩上。
      Using Accelerometer Events: |-
        今天，你会学习如何创建和使用**函数**。\\r
        \\r
        创建函数会让你制作自己的模块！制作函数有两部分：\\r
        \\r
        制作一个有名字的新模块，将你想要运行的代码都放在它里面。\\r
        \-函数的xml定义- \\r
        \\r
        单个绿色的模块，是你使用或调用创建的函数。\\r
        \-函数调用的xml-\\r
        \\r
        准备熟悉函数，学习如何编辑它们，并创建自己的函数！
      Using Accelerometer Events_2018: |-
        今天，你会学习如何创建和使用**函数**。\\r
        \\r
        创建函数会让你制作自己的模块！制作函数有两部分：\\r
        \\r
        制作一个有名字的新模块，将你想要运行的代码都放在它里面。\\r
        \-函数的xml定义- \\r
        \\r
        单个绿色的模块，是你使用或调用创建的函数。\\r
        \-函数调用的xml-\\r
        \\r
        准备熟悉函数，学习如何编辑它们，并创建自己的函数！
      Using Accelerometer Events_2019: |-
        今天，你会学习如何创建和使用**函数**。\\r
        \\r
        创建函数会让你制作自己的模块！制作函数有两部分：\\r
        \\r
        制作一个有名字的新模块，将你想要运行的代码都放在它里面。\\r
        \-函数的xml定义- \\r
        \\r
        单个绿色的模块，是你使用或调用创建的函数。\\r
        \-函数调用的xml-\\r
        \\r
        准备熟悉函数，学习如何编辑它们，并创建自己的函数！
      Valentine_artist_01: 帮助小艺术家完成他的羊驼心，将它从羊驼变为可爱的！小艺术家还需要画多少个羊驼？
      Valentine_playlab_01: |-
        足球女孩琪琪想让她的朋友在情人节相爱！给琪琪（演员1）编程，当按下左右键时，让她左右移动。当琪琪被点击时，她应该向朋友扔出爱心。\\r
        \\r
        \---\\r
        点击"运行"，来玩这个游戏。看看她要给多少朋友扔出爱心才能赢！
      Video. Introduction to Conditionals - Part 1: |-
        ### 注意事项:

        1.  什么是 \* 布尔表达式？ \*
        2.  为什么它被称为 "布尔"？
        3.  这样表达是合法的吗？ `10 > 25`？
      Virtual Pet 1 Predict: |-
        **做预测：**这是杰拉尔丁，你的宠物长颈鹿。

        你觉得在按下"▶ 运行"之后点击她会发生什么事？
      Virtual Pet 1 Predict_2019: |-
        **做预测：**这是杰拉尔丁，你的宠物长颈鹿。

        你觉得在按下"▶ 运行"之后点击她会发生什么事？
      Virtual Pet 1 Predict_simple: "**你觉得会怎样？** \n\n这只长颈鹿名字叫杰拉尔丁。  \n\n当你点击她后，她会做什么？"
      Virtual Pet 1 fix: |-
        这是杰拉尔丁，你的宠物长颈鹿。

        你觉得在按下"▶ 运行"之后点击她会发生什么事？
      Virtual Pet 1-validated: 这是杰拉尔丁，你的宠物长颈鹿。你觉得按下运行之后点击她会发生什么事？
      Virtual Pet 1: |-
        这是杰拉尔丁，你的宠物长颈鹿。

        你觉得在按下"▶ 运行"之后点击她会发生什么事？
      Virtual Pet 1_simple: |-
        这是杰拉尔丁，你的宠物长颈鹿。

        你觉得在按下"▶ 运行"之后点击她会发生什么事？
      Virtual Pet 2 - Validated (Ram): "那边角落里有个泥坑。  \n\n创建一个 **事件** 使得杰拉尔丁碰到泥坑的时候，她的颜色会变成棕色。"
      Virtual Pet 2 - Validated: "那边角落里有个泥坑。  \n\n创建一个 **事件** 使得杰拉尔丁碰到泥坑的时候，她的颜色会变成棕色。"
      Virtual Pet 2: "那边角落里有个泥坑。  \n\n创建一个 **事件** 使得杰拉尔丁碰到泥坑的时候，她的颜色会变成棕色。"
      Virtual Pet 2_2019: "那边角落里有个泥坑。  \n\n创建一个 **事件** 使得杰拉尔丁碰到泥坑的时候，她的颜色会变成棕色。"
      Virtual Pet 2_simple: "那边角落里有一堆灰尘。 \n\n创建一个 **事件** 使得杰拉尔丁碰到灰尘的时候，她的颜色会变成棕色。"
      Virtual Pet 2_simple_clone: "那边角落里有一堆灰尘。 \n\n创建一个 **事件** 使得杰拉尔丁碰到灰尘的时候，她的颜色会变成棕色。"
      Virtual Pet 3: "我们不能让脏兮兮的长颈鹿到处走来走去!  \n\n1.  在屏幕上添加一个新的肥皂精灵。  \n2.  你能否使长颈鹿和肥皂接触的时候变回正常的颜色？ \n\n* * *\n\n要重置颜色, 请使用此模块:\n<xml><block type=\"gamelab_removeTint\" inline=\"true\">\n<value name=\"THIS\">\n<block type=\"sprite_variables_get\">\n\n<title name=\"VAR\">mySprite</title>\n</block>\n</value>\n</block></xml>"
      Virtual Pet 3_2019: "我们不能让脏兮兮的长颈鹿到处走来走去!  \n\n1.  在屏幕上添加一个新的肥皂精灵。  \n2.  你能否使长颈鹿和肥皂接触的时候变回正常的颜色？ \n\n* * *\n\n要重置颜色, 请使用此模块:\n<xml><block type=\"gamelab_removeTint\" inline=\"true\">\n<value name=\"THIS\">\n<block type=\"sprite_variables_get\">\n\n<title name=\"VAR\">mySprite</title>\n</block>\n</value>\n</block></xml>"
      Virtual Pet 3_simple: "长颈鹿好脏!  \n\n1.  在屏幕上添加一个新的 肥皂 精灵。  \n2.  当长颈鹿和肥皂接触的时候她变回正常的颜色。 \n\n* * *\n\n要重置颜色, 请使用此模块:\n<xml><block type=\"gamelab_removeTint\" inline=\"true\">\n      <value name=\"THIS\">\n        <block type=\"sprite_variables_get\">\n          <title name=\"VAR\">mySprite</title>\n        </block>\n      </value>\n    </block></xml>"
      Virtual Pet 4: "我们不希望每次都要等着长颈鹿花时间清理它自己。  \n\n为肥皂添加行为使其变得可拖动，完成后拖动它来清洁长颈鹿。"
      Virtual Pet 4_2019: "我们不希望每次都要等着长颈鹿花时间清理它自己。  \n\n为肥皂添加行为使其变得可拖动，完成后拖动它来清洁长颈鹿。"
      Virtual Pet 4_simple: "我们不希望每次都要等着长颈鹿花时间清理它自己。 \n\n为肥皂添加行为使其变得可拖动，完成后拖动它来清洁长颈鹿。"
      Virtual Pet 5 - Validated: "玩耍是需要能量的！  \n\n对每个事件添加一个操作，使得长颈鹿每次和其他精灵碰撞时，她的尺寸减小5."
      Virtual Pet 5: "玩耍是需要能量的！  \n\n对每个事件添加一个操作，使得长颈鹿每次和其他精灵碰撞时，她的尺寸减小5."
      Virtual Pet 5_2019: "玩耍是需要能量的！  \n\n对每个事件添加一个操作，使得长颈鹿每次和其他精灵碰撞时，她的尺寸减小5."
      Virtual Pet 5_simple: "长颈鹿太大了！ \n\n在每个事件中添加动作，使长颈鹿在和其他精灵碰撞时变小。 "
      Virtual Pet 6: "均衡的饮食非常重要，我们需要给长颈鹿喂食好让她恢复体力。  \n\n在屏幕上添加一个苹果，并使得苹果和长颈鹿相碰时，长颈鹿变回原来的大小。"
      Virtual Pet 6_2019: "均衡的饮食非常重要，我们需要给长颈鹿喂食好让她恢复体力。  \n\n在屏幕上添加一个苹果，并使得苹果和长颈鹿相碰时，长颈鹿变回原来的大小。"
      Virtual Pet 6_simple: "长颈鹿饿了！ \n\n在每个事件中添加动作，使长颈鹿在和苹果碰撞时变回普通的大小。"
      Virtual Pet 8_2019: "自由发挥：还能让长颈鹿做些什么？ \n\n-   能添加更多特殊组件吗？  \n-   能为她找到朋友吗？  "
      Virtual Pet Freeplay: "自由发挥：还能让长颈鹿做些什么？ \n\n-   能添加更多特殊组件吗？  \n-   能为她找到朋友吗？  "
      Virtual Pet Freeplay_2019: "自由发挥：还能让长颈鹿做些什么？ \n\n-   能添加更多特殊组件吗？  \n-   能为她找到朋友吗？  "
      Virtual Pet Freeplay_simple: "自由发挥：你还能让长颈鹿做些什么？ \n\n\\-你能为长颈鹿添加更多特殊组件吗？  \n-你能为她找几个朋友吗？  "
      Virtual Pet Predict: '**做预测：**这是杰拉尔丁，你的宠物长颈鹿。你觉得在按下"▶ 运行"之后点击她会发生什么事？'
      Virtual Pet Template_2019: "那边角落里有个泥坑。  \n\n创建一个 **事件** 使得杰拉尔丁碰到泥坑的时候，她的颜色会变成棕色。"
      What is the difference between formative and summative assessment?: 下面的连接提供了正式的和总结性的评估的定义和示例的资源：
      aE1: |-
        <img src="https://images.code.org/fa3c416b74ff9071455535955bc4df35-image-1465507662295.gif"
        style="float:left; width:100px; margin: 0 20px 80px 100px;"/>\\r
        \\r

        <div
        style="color: #7665a0; font-size: 1.6em; line-height: 1.4em;">\r
        首先，我们需要些纸巾！\r
        \r
        选择你喜欢的形状：\r
        - 方形 （简单）\r
        - 三角形 （中等）\r
        - 五边形（难）\r
        \r
        </div>\r
        <br/>\r
        \r
      aE2: |-
        <img src="https://images.code.org/2a67ea28a0fb9f674fd764b350b297da-image-1465514320176.gif"
        style="width:400px; margin: 0 20px 20px 10px;"/>\\r
        \\r

        <div style="color:
        #7665a0; font-size: 1.6em; line-height: 1.4em;" >现在，我们需要为大家准备足够的数量！\r
        <br/><br/>\r
        \r
        让我们把刚刚做出来的形状排成14个纸巾一行。\r
        <br/>\r
        如果你把一个循环放到另一个循环里，我们管它叫嵌套循环。\r
        \r
        看看怎样才能循环上一步的所有代码来确保所有14个纸巾一个挨一个的排成一行？</div>\r
      aE3: |-
        <img src="https://images.code.org/e9fe83556eec68be9ebd7de9a16267b1-image-1465516277348.gif"
        style="width:400px; margin: 0 20px 20px 100px;" loop="infinite"/>\\r
        \\r

        <div
        style="color: #7665a0; font-size: 1.6em; line-height: 1.4em;" >\r
        我们
        需要一张桌布！<br/></br>\r
        \r
        用一个外层循环将14行餐巾纸都缝到一起，来成为一张桌布。\r
        </div>\r
        \r
      aE3alternate: |-
        \\r

        <div style="color: #7665a0; font-size:
        1.6em; line-height: 1.4em;" >\r
        如果这个用户选择了五角形餐巾纸而且修改了线条的宽度或颜色，
        这里显示的就是缝起来桌布的样子。\r
        </div>\r
        \r
      aE3alternateB: |-
        \\r

        <div style="color: #7665a0; font-size:
        1.6em; line-height: 1.4em;" >\r
        如果用户选择了三角形餐巾纸而且用代码将线条变粗，
        这个替换物显示的就是缝起来的桌布的样子。\r
        </div>\r
        \r
      aE4: |-
        \\r

        <div style="color: #7665a0; font-size: 1.6em;
        line-height: 1.4em;" >\r
        哦不 ！我们的餐巾纸太小了 ！\r
        <br/> <br/> \r
        我们需要有两倍大的餐巾纸，并仍然保持桌布大小相同。如果要做到这一点，您可以更改什么数字呢？\r
        <br/><br/>\r
        （如图所示的三角形）\r
        </div> \r
        \r
      aE5: |-
        \\r

        <div style="color: #7665a0; font-size: 1.6em;
        line-height: 1.4em;" >\r
        让我们一起来看看一些窗饰！\r
        <br/><br/>\r
        这里有你原先画一行纸巾的代码。将4条线放到一起，来装饰窗框。\r
        </div>\r
        \r
      aE6: |-
        <div style="color: #7665a0; font-size: 1.6em; line-height:
        1.4em;" >\r
        客人们需要可以坐的东西！\r
        <br/><br/>\r
        小艺术家有个主意来做些有趣的椅子。你需要循环多少次代码来画这个半圆？\r
        </div>
      aE7: |-
        <div style="color: #7665a0; font-size: 1.6em; line-height:
        1.4em;" >\r
        画一些丝带如何？\r
        <br/><br/>\r
        如果你像这样创建一个循环，但向左转而不是向右转，会发生什么？\r
        \r
        你能重复所有这些，来画出这个波浪吗？\r
        </div>
      aE8: |-
        <div style="color: #7665a0; font-size: 1.6em; line-height:
        1.4em;" >\r
        艺术家要给图片边框一些派对的感觉！\r
        <br/><br/>\r
        让我们从条幅中循环代码4次来创建此边框。\r
        <br/><br/>我们已经添加了一个叫做‘弯曲边角’ 的特殊模块可以让你得到很花俏的圆角！\r
        </div>
      aEfreeplay: "<div style=\"color: #7665a0; font-size: 1.6em; line-height: 1.4em;\" >\n<b>自由发挥:</b>\n做最后的修饰，我们需要一些装饰品挂在房子周围。\n<br/><br/>\n你能设计一个装饰来让派对更有味道吗？ \n</div>\n<br/>\n<h4>\n<details>\n\n<summary>需要一些主意？</summary>\n\n<br/>\n<br/>\n试着做一桌布满了钻石的餐巾! \n<img src=\"https://images.code.org/2c092ea5edbb33405c019110df3f5710-image-1466095499984.43.56.png\" width=\"200px\"/>\n<hr/>\n<br/>\n制作装饰品!  \n<img src=\"https://images.code.org/361d2ad667853418a040ec9383505169-image-1466096394561.56.12.png\" width=\"200px\"/>\n<hr/>\n\n<br/>\n做一些全新的东西! \n<img src=\"https://images.code.org/6809a1bd2a364ae7e0ff42745ec1fe1b-image-1466097871045.23.44.png\" width=\"200px\"/>\n<hr/>\n\n</details>\n</h4>"
      allthethings data blocks test: 测试应用实验室制作应用前请登录(应用实验室被设计为仅在登陆后可用。/_通常我们可以让人们自动登录，但是这个实现必须要让所有脚本都变成可强制执行的，显然对所有脚本都做一次这样的更改会很麻烦_/)。
      allthethings design mode elements: |-
        # 测试应用实验室制作应用前请登录(应用实验室被设计为仅在登陆后可用。/_通常我们可以让人们自动登录，但是这个实现必须要让所有脚本都变成可强制执行的，显然对所有脚本都做一次这样的更改会很麻烦_/)。

        。

        。

        。

        。

        。

        。

        。

        。

        。

        。

        。

        。

        。

        。

        。

        。

        。

        。

        相当长的说明的结尾。
      allthethings level dataTables: 测试应用实验室制作应用前请登录(应用实验室被设计为仅在登陆后可用。/_通常我们可以让人们自动登录，但是这个实现必须要让所有脚本都变成可强制执行的，显然对所有脚本都做一次这样的更改会很麻烦_/)。
      allthethings_template_backed1: '备份模板#1. 测试应用实验室制作应用前请登录(应用实验室被设计为仅在登陆后可用。/_通常我们可以让人们自动登录，但是这个实现必须要让所有脚本都变成可强制执行的，显然对所有脚本都做一次这样的更改会很麻烦_/)。 '
      allthethings_template_backed2: 备份模板#2. 测试应用实验室制作应用前请登录(应用实验室被设计为仅在登陆后可用。/_通常我们可以让人们自动登录，但是这个实现必须要让所有脚本都变成可强制执行的，显然对所有脚本都做一次这样的更改会很麻烦_/)。
      allthethings_ttscsd: |-
        <img src="https://images.code.org/a8ed6092389aedceceb38a83ac59fae1-image-1490832453029.07.10
        PM.png" style="float:right;height:150px">\\r
        \\r

        # 这样做\\r

        \\r

        -   写代码在绿色椭圆后面画一个橙色的椭圆。\\r
        -   别担心确切的尺寸，只要整个绿色椭圆在橙色里就行。
      allthethings_ttscsf contained: |-
        帮助农夫走过这条路来找到所有的莴苣\\r
        \\r
        这一关中，莴苣会在每条路的最末端生长。如果她的前面有路，农夫会一直往前走。否则，她需要采摘所有的莴苣，然后转弯继续在路上走。 \\r
        \\r
        \\r
        \\r
      allthethings_ttscsp: |-
        # 练习试试不同的事件类型

        <img src="https://images.code.org/9f013bd84577eb2498061757e18a72f4-image-1444322870272.46.06 AM.png" style="float: right">

        如果你还没有做过，你应该尝试用`onEvent`（当事件发生时）模块来实验不同的事件类型。在这里最好用的是与鼠标相关的比如：

        -   单击
        -   鼠标移动
        -   向下移动
        -   向上移动
        -   鼠标悬停

        _有一些事件会从键盘上捕获按键。这些是很有趣的，但他们不像按钮那样好用。现在我们将继续用鼠标事件，以后再去讲键盘事件._

        **确保** 一定要试验每一个以“鼠标..."开始的事件。

        一旦你练习了一会, 单击完成来继续。
      artistLoopsK2: |-
        <div style="color: #7665a0; font-size:
        1.6em; line-height: 1.4em;" >\r
        现在，用一个`重复`循环来画这条线5次！<br/><br/>\r
        </div>\r
        \r
        <img src="https://images.code.org/6d79b5f8291bd8e11c427bff25f423c2-image-1467935497388.gif"
        width="300"/>\r
      artistLoopsK2gradek_artist_loops3: |-
        <div style="color: #7665a0; font-size:
        1.6em; line-height: 1.4em;" >\r
        现在，用一个`重复`循环来画这条线5次！<br/><br/>\r
        </div>\r
        \r
        <img src="https://images.code.org/6d79b5f8291bd8e11c427bff25f423c2-image-1467935497388.gif"
        width="300"/>\r
      artistLoopsK3: |-
        <div style="color: #7665a0; font-size:
        1.6em; line-height: 1.4em;" >\r
        画一条8步长的先。这会是我们王国的领地！<br/><br/>\r
        </div>\r
        \r
        <img src="https://images.code.org/c00b930eb5fb13ae946847adc51c9bd3-image-1467935631246.gif"
        width="300"/>\r
      artistLoopsK4: |-
        <div style="color: #7665a0; font-size:
        1.6em; line-height: 1.4em;" >\r
        现在，我们需要一个有吊桥的城堡。修复代码，让桥立起来，而不是倒下了。<br/><br/>\r
        </div>\r
        \r
        <img
        src="https://images.code.org/84b93e1b9dad3ee52a46c767524d3558-image-1467935697224.gif"
        width="300"/>\r
      artistLoopsK5: |-
        <div style="color: #7665a0; font-size:
        1.6em; line-height: 1.4em;" >\r
        现在，我们需要修复城堡的顶端。你能重复这个代码3次吗？<br/><br/>\r
        </div>\r
        \r
        <img src="https://images.code.org/f418ccba20b7230baba1328143bd0092-image-1467935762464.gif"
        width="300"/>\r
      artistLoopsK6: |-
        <div style="color: #7665a0; font-size:
        1.6em; line-height: 1.4em;" >\r
        有人在塔里困住了！修好楼梯，让他们能出来。<br/><br/>\r
        </div>\r
        \r
        <img src="https://images.code.org/1efb95ca15f66b46145725769d3d279c-image-1467935856461.gif"
        width="300"/>\r
      artistLoopsK7: |-
        <div style="color: #7665a0; font-size:
        1.6em; line-height: 1.4em;" >\r
        这个塔非常可爱，楼下是什么？创建另一个楼梯来发现它！<br/><br/>\r
        </div>\r
        \r
        <img src="https://images.code.org/af040c27be11c3a639e18c440c8a047c-image-1467936046481.gif"
        width="300"/>\r
      artistLoopsK8: |-
        <div style="color: #7665a0; font-size:
        1.6em; line-height: 1.4em;" >\r
        哇！这里有一个花园！帮助修好这些楼梯，让我能到达那里。<br/><br/>\r
        </div>\r
        \r
        <img src="https://images.code.org/bf368872da36217b0d19261fc6b84bf6-image-1467936147116.gif"
        width="300"/>\r
      artistLoopsK9: |-
        <div style="color: #7665a0; font-size:
        1.6em; line-height: 1.4em;" >\r
        **挑战：** 太好了！让我们围着花园走一下。<br/><br/>\r
        </div>\r
        \r
        <img src="https://images.code.org/cb5646ef57f68b47fa6c2762253a7044-image-1467936260174.gif"
        width="300"/>\r
      artistLoopsKA: |-
        <div style="color: #7665a0; font-size:
        1.6em; line-height: 1.4em;" >\r
        这些石头放错了的位置。帮我移动它们，这样我就不会摔倒了！<br/><br/>\r
        </div>\r
        \r
        <img src="https://images.code.org/5ba9e8e5c1524eec2b0ba3e4684b0cef-image-1467936361364.gif"
        width="300"/>\r
      artistLoopsKB: |-
        <div style="color: #7665a0; font-size:
        1.6em; line-height: 1.4em;" >\r
        看！这里有个剧院。帮我设置楼梯，这样我们都能看到舞台了。<br/><br/>\r
        </div>\r
        \r
        <img src="https://images.code.org/c4263306ebb0ad1d99fe6f200a790d0c-image-1467936424533.gif"
        width="300"/>\r
      artistLoopsKFP: |-
        画图时间！用你学会的知识来画一下，你认为艺术家会在舞台上看到什么。\\r
        \\r

        <hr/>\r
        <h3>创意</h3>\r
        <table>\r
        <tr>\r
        <td>\r
        <img
        src="https://images.code.org/8f4f2a68dae2cf0aa82cc0a49ea4df04-image-1466787750475.gif"
        width="150"/><br/>\r
        <h4>唱歌的蜗牛</h4><br/><br/>\r
        </td>\r
        \r
        <td>\r
        <img
        src="https://images.code.org/732ce5dd91c7f49f06e88da1a9f664f3-image-1466794904255.gif"
        width="150"/><br/>\r
        <h4>一个大城市</h4><br/><br/>\r
        </td>\r
        \r
        <td>\r
        <img
        src="https://images.code.org/37fdd6fdd761df09fd4949d5e43f0a7f-image-1466795165642.gif"
        width="150"/><br/>\r
        <h4>一场音乐会</h4><br/><br/>\r
        </td>\r
        \r
        <td>\r
        <img
        src="https://images.code.org/f7bf86b0f86669d82ee2c1565738b9cb-image-1466794447737.gif"
        width="150"/><br/>\r
        <h4>一个生日蛋糕</h4><br/><br/>\r
        </td>\r
        \r
        </tr>\r
        </table>\r
      beeDebugVideo1: 采集所有的花蜜。
      collector example: |-
        用`收集`模块来收集所有的金子：\\r
        \\r
        <xml>\\r
          <block type="collector_collect"/></xml>
      collectorDebugVideo2: |-
        _"顺序很重要！"_\\r
        \\r
        你需要的模块已经在工作区了，但还没有连起来。\\r
        \\r
        将这些模块按顺序连接起来，来收集所有的金子并通过这关。
      collectorSkinVideo1: |-
        移动罗瑞尔来到达宝藏，然后用`收集`来捡起它。\\r
        \\r
        收集一堆宝藏来通过这关。
      collectorSkinVideo2: |-
        移动罗瑞尔来到达宝藏，然后用`收集`来捡起它。\\r
        \\r
        收集一堆宝藏来通过这关。
      comment_intro_maze_2018: |-
        _"我糊涂了。帮助我记住如何通过这个迷宫。"_

        * * *

        要通过这关，解决谜题，并使用新的<xml><block type="comment"><title name="TEXT"></title></block></xml>注释模块来给自己留下快速提醒。它们可以帮助记起在做什么以及原因！

        注释只用于**你自己**使用。游戏区域不会因为注释看起来不一样。
      comment_intro_maze_2018_2019: |-
        _"我糊涂了。帮助我记住如何通过这个迷宫。"_

        * * *

        要通过这关，解决谜题，并使用新的<xml><block type="comment"><title name="TEXT"></title></block></xml>注释模块来给自己留下快速提醒。它们可以帮助记起在做什么以及原因！

        注释只用于**你自己**使用。游戏区域不会因为注释看起来不一样。
      conditionals_forvideo_harvester: 收集所有的玉米和莴苣，然后捡起南瓜。
      course1_artist_loops_challenge2: 让我们玩游戏吧! 尽可能多地画 X。你能一排放3个吗？
      course1_artist_loops_challenge3: |-
        \*\* 小鸟啾啾！\*_\\r
        \\r
        \*"你能帮我做两个鸟屋吗？"_
      course1_artist_loops_challenge4: _"是时候掷骰子了! 你能帮我画这些吗？"_
      course1_maze_debugging_challenge1: 调试本关卡。去掉多余的模块并添加缺少的块。让鸟到达猪那里！
      course1_maze_debugging_challenge2: 调试本关卡。这些模块是正确的, 但他们的顺序错了!
      course1_maze_seq_challenge2: 在每个方向上最多只能移动四次。在你用完所有模块之前, 你能找到一条路吗？
      course1_playlab_events_challenge1: |-
        _"我的朋友藏在哪里？在这个游戏中，点击我，就会显示我的朋友奥丽芙猫！"_\\r
        \\r
        点击奥丽芙会让罗宾出现！你能也写代码来显示剩下角色吗？\\r
        \\r
        在这一关中，确保点击了提示！提示会帮你一步步完成这个项目！\\r
        \\r
        \!\[](\<<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19>
        PM.png>)
      course1_playlab_events_challenge2: |-
        _"帮我组织一次派对！当你点击我的朋友时，让他们做点什么。"_\\r
        \\r
        这个动物说什么了？还会发生什么？\\r
        \\r
        \\r
        \\r
        在这关中，别忘了点击提示！提示会让你尝试有趣的事情！\\r
        \\r
        \!\[](\<<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19>
        PM.png>)
      course2_artist_nestedLoops_challenge1: |-
        你能想出怎么做像这样的图吗？\\r
        \\r

        -   两个形状都有**50像素的边长。**\\r
        -   _八边形_要转向_45度_。\\r
        -   _三角形_要_120度_的转向。
      course2_artist_nestedLoops_challenge2: |-
        你能想出如何画一幅这样的图吗？\\r
        \\r

        -   第一个内循环应该画一个八边形。\\r
        -   第二个内循环应该画一个六边形。\\r
        -   第三个内循环应该画一个正方形。
      course2_artist_prog_challenge1: 为每种动物画房子。有很多种方法来通过这关，所以玩得愉快吧！
      course2_artist_prog_challenge2: "-   帮我在这条路上涂上黄线!\\*"
      course2_bee_conditionals_challenge1: 搜集所有的花蜜或酿造所有的蜂蜜。你只能从花搜集花蜜，并只能从蜂窝里酿蜂蜜。检查任何空间来看看那里是否有花或者蜂窝。
      course2_bee_conditionals_challenge2: 采所有花蜜，并酿所有蜂蜜。你可以用一个`while nectar > 0`循环，在一朵花里收集所有花蜜。
      course2_collector_loops_challenge2: |-
        _"让我们使用循环来寻找宝藏！"_\\r
        \\r
        通过找出此代码错误来帮助收集者得到所有的宝藏！
      course2_collector_prog_challenge1: 仔细看! 你能收集所有 **10** 块宝藏吗？
      course2_collector_prog_challenge2: 有**20**件宝藏要找。收集至少一半完成这一挑战！
      course2_harvester_loops_challenge1: 收集所有的玉米。
      course2_harvester_loops_challenge2: 收集所有的莴苣。避开树木和田野!
      course2_maze_programming_challenge1: _"猪藏起来了! 你能帮我找到一条路吗？"_
      course2_maze_programming_challenge2: 有时, 解决同一问题的方法不止一种。有时候向后走比前进快!
      course2_maze_seq_challenge2: 在每个方向上最多只能移动四次。在你用完所有模块之前, 你能找到一条路吗？
      course2_playlab_stage17_11: |-
        创建自己的故事。完成后, 单击 "完成", 让朋友们在他们的手机上试用你的故事。
        <br/>

        <h5>
        <details>

        <summary>
        <b>需要一些点子吗？</b>
        </summary>

        \\t<br/>
        \\t<h5>
        \\t\\t<ul>
        \\t<li><strong>谁在那里呢？</strong> -使角色和随机图像一起出现，这样没有人知道下一个显示的是谁。</li>

        <li><strong>去冒险</strong>
        - 改变背景，然后让角色谈论他们现在在哪里。</li>
        <li><strong>弹球</strong> - 使用箭头键 (使用`当上方向键按下时`，`当下方向键按下时`模块）来移动角色。然后当他和其他人物在屏幕上发生碰撞时播放随机的声音。
        </li>
        </ul>
        \t</h5>

        </details>
        </h5>
      course3_artist_concept_challenge1: "<img src=\"https://images.code.org/6cac10470af71bbb5d75bf5e2669046f-image-1439939145211.png\"\nwidth=\"200px\"/>\\\\r\n\\\\r\n挑战的时候到了！\\\\r\n\\\\r\n这个设计只使用了你见过的模块。你能想出如何再次创建出它吗？随便试错。没有人期待第一次就能做好。\\\\r\n\\\\r\n重复的形状基本和上一关的一样，只有第一个的循环的长度要小一点。 "
      course3_artist_functions_challenge1: 一旦你定义了一个函数, 你可以随心所欲一次又一次地调用它! 尝试此代码, 看看它是如何工作的, 然后改变它, 让您自己的设计更出色！
      course3_artist_functions_challenge2: |-
        你不仅能跳到一些预先设定的位置，比如画布的角落，你还能用`跳到`命令来到任何想去的绝对位置上！试试看这个代码，理解它的原理，并做出自己的程序！

        <xml>
        <block type="jump_to_xy">
        <title name="XPOS">???</title>
        <title name="YPOS">???</title>
        </block></xml>
      course3_bee_debugging_challenge1: 看蜜蜂如何得到花蜜。你能用同一种图案来帮助蜜蜂酿造所有的蜂蜜吗？
      course3_bee_functions_challenge1: 你得自己独立接受这个挑战。这可能比看起来更难！
      course3_bee_functions_challenge2: 你得自己独立面对这个挑战。
      course3_bee_functions_challenge3: 创建一个新的函数, 当前方有路的时候，收集所有的花蜜和蜂蜜。用它来完成关卡!
      course3_bee_functions_challenge4: 用你所学的来解决这个关卡。
      course3_collector_debugging_challenge2: 您是嵌套循环的专家吗？使用你所学到的收集所有的宝藏!
      course3_farmer_condLoops_challenge1: |-
        南瓜标记你应该转弯的地方。_在南瓜那向右转。_ 否则继续前进，但记得沿途收集所有的莴苣或玉米。\\r
        \\r
        **每个隐藏的作物只有一个玉米或莴苣。**
      course3_farmer_condLoops_challenge2: |-
        _"这是蔬菜迷宫！"_\\r
        \\r
        在南瓜那里向右转，在莴苣那里向左转。收集所有东西来完成此关卡。
      course3_farmer_until_challenge2: 使用如果/否则模块来跟随这条曲线的路。在每个转角处，用循环里的`移除一个`来清理土堆。
      course3_maze_debugging_challenge1: _"我只是绕圈子走吗？"_
      course3_maze_debugging_challenge2: _"如果我转得太频繁, 我可能会头晕! 帮助我只通过四个`转向`命令来到达猪那里。"_
      course3_maze_until_challenge1: 没有提示，只有挑战。把僵尸带到向日葵那里。
      course3_playLab_challenge1: "-   **松鼠**很害怕看到**恐龙**来到镇上！勇敢的**骑士**能帮忙赶走恐惧吗？\\*\n\n规则：\n\n1.  _碰到松鼠得分。_\n2.  _碰到恐龙丢很多分。_\n\n这是和玩过的不同的游戏！玩一玩，看看它是如何工作的。 \n\n当你有足够的分数或者分数太低时，会发生一些事情。添加一些代码到`游戏胜利`和`游戏失败`函数中，来让游戏按照它的方法工作。 \n点击提示获得主意！"
      course3_playlab_challenge2: |-
        你能指出"Fortune Teller"（预言家）应用如何工作的吗？试着将下面的功能加到游戏中：\\r
        \\r

        -   将"是"和"否"的答案改成其它东西来让游戏更有趣。\\r
        -   让玩家在演员说了预言后，来问另一个问题。\\r
        -   当巫师是`生气`或`正常`的情绪时，再让她说两件事情。\\r
        -   给巫师她自己的一组预言。\\r
        -   \*
            让每个演员都随机改变情绪。\\r
            \\r
            如果需要帮助，就看看提示！
      course4_artist_binary_challenge1: 在这个谜题中，您只能使用每个二进制值 (0或1) 一次。请尝试使用嵌套循环来画这幅图。
      course4_artist_binary_challenge2: |-
        网格里有256个比特 - 这意味着和容易因为一点小改动而造成大问题。你能坚持下去，把图标恢复正常吗？\\r
        \\r
        ![](https://images.code.org/74e15f513982b47762dd33ebbc21e5e9-image-1498776314610.png)
      course4_artist_concept_challenge2: 使用下面的代码创建五个风车的设计。
      course4_artist_functions_challenge2: |-
        你不仅能跳到一些预先设定的位置，比如画布的角落，你还能用`跳到`命令来到任何想去的绝对位置上！试试看这个代码，理解它的原理，并做出自己的程序！

        <xml>
        <block type="jump_to_xy">
        <title name="XPOS">???</title>
        <title name="YPOS">???</title>
        </block></xml>
      course4_artist_fwp_challenge1: 请尝试运行此程序，并进行更改，看看会发生什么。你能弄清楚它是如何工作的吗？（或者你可以把这段程序删掉并且重写成其他任何你想要的程序）
      course4_artist_variables_challenge1: 你能创建一个`length`（长度）变量，并用它来创建这个图案吗？
      course4_artist_variables_challenge2: |-
        <img src="https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png"
        width="250px"/>\\r
        \\r
        你已经学会了制作像这样的图案的所有知识了！这关有点困难。你能坚持下去，直到找到解决方案吗？
      course4_bee_for_challenge1: 用这个循环来收集所有的花蜜。有几个动作, 你需要重复`重复'计数器'`次。
      course4_bee_fwp_challenge1: 在函数中使用一个`计数循环`来收集所有的玉米。通过使用`length`（长度）参数，同样的`计数循环`可以数到不同的最大值。
      course4_bee_fwp_challenge2: |-
        让我们来看看你是否可以处理最后的测试！请用上你所学的全部知识！\\r
        \\r
        在函数里使用`计数循环`来收集每行的所有蔬菜。用`length`（长度）参数来使`计数循环`计数不同的最大值。在函数外使用第二个`计数循环`来使程序尽可能短。\\r
        \\r
        祝你好运！
      course4_collector_nested_loops_challenge2: |-
        让我们来寻找宝藏 - 用循环！\\r
        \\r
        只用工具箱里的模块来帮助收藏家至少拿到两堆宝藏。有可能收集到所有4堆。
      course4_harvester_nested_loops_challenge1: _"在农场上，我需要一些帮助！只用工具箱里的模块来帮我收获玉米。"_
      course4_playlab_variables_challenge1: 使用这些模块使演员分享一个敲门问答的笑话。改变警句和设置来讲你自己的笑话！
      course4_playlab_variables_challenge3: |-
        你能指出"Fortune Teller"（预言家）应用如何工作的吗？试着将下面的功能加到游戏中：\\r
        \\r

        -   将"是"和"否"的答案改成其它东西来让游戏更有趣。\\r
        -   让玩家在演员说了预言后，来问另一个问题。\\r
        -   当巫师是`生气`或`正常`的情绪时，再让她说两件事情。\\r
        -   给巫师她自己的一组预言。\\r
        -   \*
            让每个演员都随机改变情绪。\\r
            \\r
            如果需要帮助，就看看提示！
      courseA_artist_loops10: |-
        ## 是时候回到陆地。请帮助我放一些石头，这样我不会掉下去！\\r

        \\r
        ![expandable](https://images.code.org/d3213d375d0271e114aa4313cdeb34be-image-1498064942606.gif)
      courseA_artist_loops10_2018: |-
        ## 是时候回到陆地。请帮助我放一些石头，这样我不会掉下去！\\r

        \\r
        ![expandable](https://images.code.org/d3213d375d0271e114aa4313cdeb34be-image-1498064942606.gif)
      courseA_artist_loops10_2019: |-
        ## 是时候回到陆地。请帮助我放一些石头，这样我不会掉下去！\\r

        \\r
        ![expandable](https://images.code.org/d3213d375d0271e114aa4313cdeb34be-image-1498064942606.gif)
      courseA_artist_loops11: |-
        ## 帮我建一些台阶来观看船驶离。\\r

        \\r
        ![expandable](https://images.code.org/ed19f00a2350b186fbe86ea805e17925-image-1498065450651.gif)
      courseA_artist_loops11_2018: |-
        ## 帮我建一些台阶来观看船驶离。\\r

        \\r
        ![expandable](https://images.code.org/ed19f00a2350b186fbe86ea805e17925-image-1498065450651.gif)
      courseA_artist_loops11_2019: |-
        ## 帮我建一些台阶来观看船驶离。\\r

        \\r
        ![expandable](https://images.code.org/ed19f00a2350b186fbe86ea805e17925-image-1498065450651.gif)
      courseA_artist_loops12: |-
        画家看到远处有些滑稽的东西。画出你认为他看到的东西。\\r
        \\r
        \_\_\_\\r

        ### 点子\\r

        \\r
        ![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)\\r
        ![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)\\r
        ![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)\\r
        ![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)
      courseA_artist_loops12_2018: |-
        画家看到远处有些滑稽的东西。画出你认为他看到的东西。\\r
        \\r
        \_\_\_\\r

        ### 点子\\r

        \\r
        ![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)\\r
        ![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)\\r
        ![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)\\r
        ![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)
      courseA_artist_loops12_2019: |-
        画家看到远处有些滑稽的东西。画出你认为他看到的东西。\\r
        \\r
        \_\_\_\\r

        ### 点子\\r

        \\r
        ![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)\\r
        ![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)\\r
        ![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)\\r
        ![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)
      courseA_artist_loops2: |-
        帮助艺术家向前画这条线两次。\\r
        \\r
        ![](https://images.code.org/04501f26a36673460f5c8fe04e3e7686-image-1498002095108.gif)
      courseA_artist_loops2_2018: |-
        帮助艺术家向前画这条线两次。\\r
        \\r
        ![](https://images.code.org/04501f26a36673460f5c8fe04e3e7686-image-1498002095108.gif)
      courseA_artist_loops2_2019: |-
        帮助艺术家向前画这条线两次。\\r
        \\r
        ![](https://images.code.org/04501f26a36673460f5c8fe04e3e7686-image-1498002095108.gif)
      courseA_artist_loops3: "我们的艺术家试图画一条线五次, 但还是不能把它的画好。你能帮忙吗？\\\\r\n![expandable](https://images.code.org/6d79b5f8291bd8e11c427bff25f423c2-image-1467935497388.gif) "
      courseA_artist_loops3_2018: "我们的艺术家试图画一条线五次, 但还是不能把它的画好。你能帮忙吗？\\\\r\n![expandable](https://images.code.org/6d79b5f8291bd8e11c427bff25f423c2-image-1467935497388.gif) "
      courseA_artist_loops3_2019: "我们的艺术家试图画一条线五次, 但还是不能把它的画好。你能帮忙吗？\\\\r\n![expandable](https://images.code.org/6d79b5f8291bd8e11c427bff25f423c2-image-1467935497388.gif) "
      courseA_artist_loops4: |-
        现在使用 一个<xml><block type="controls_repeat_simplified_dropdown"><title
        name="TIMES" config="2-6">5</title></block></xml>循环画这条线5 次！\\r
        \\r
        ![](https://images.code.org/b2bc7f52ffdac2ad0d8e7c2d798c24df-image-1501875818062.gif)
      courseA_artist_loops4_2018: |-
        现在使用 一个<xml><block type="controls_repeat_simplified_dropdown"><title
        name="TIMES" config="2-6">5</title></block></xml>循环画这条线5 次！\\r
        \\r
        ![](https://images.code.org/b2bc7f52ffdac2ad0d8e7c2d798c24df-image-1501875818062.gif)
      courseA_artist_loops4_2019: |-
        现在使用 一个<xml><block type="controls_repeat_simplified_dropdown"><title
        name="TIMES" config="2-6">5</title></block></xml>循环画这条线5 次！\\r
        \\r
        ![](https://images.code.org/b2bc7f52ffdac2ad0d8e7c2d798c24df-image-1501875818062.gif)
      courseA_artist_loops5: |-
        ## 画一条7步长的线。这将成为我们的地平线。\\r

        \\r
        ![expandable](https://images.code.org/dc7c4317177f2b94421c5aa589c31ac7-image-1498002771889.gif)
      courseA_artist_loops5_2018: |-
        ## 画一条7步长的线。这将成为我们的地平线。\\r

        \\r
        ![expandable](https://images.code.org/dc7c4317177f2b94421c5aa589c31ac7-image-1498002771889.gif)
      courseA_artist_loops5_2019: |-
        ## 画一条7步长的线。这将成为我们的地平线。\\r

        \\r
        ![expandable](https://images.code.org/dc7c4317177f2b94421c5aa589c31ac7-image-1498002771889.gif)
      courseA_artist_loops6: |-
        ## 让我们在后面放一座漂亮的小山。\\r

        \\r
        ![expandable](https://images.code.org/f64d93b6d9a7d9c3edfce3c227c0dd49-image-1498062074031.gif)
      courseA_artist_loops6_2018: |-
        ## 让我们在后面放一座漂亮的小山。\\r

        \\r
        ![expandable](https://images.code.org/f64d93b6d9a7d9c3edfce3c227c0dd49-image-1498062074031.gif)
      courseA_artist_loops6_2019: |-
        ## 让我们在后面放一座漂亮的小山。\\r

        \\r
        ![expandable](https://images.code.org/f64d93b6d9a7d9c3edfce3c227c0dd49-image-1498062074031.gif)
      courseA_artist_loops7: |-
        ## 使用 <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>

        循环添加波浪到水中。\\r
        \\r
        ![expandable](https://images.code.org/01c5f6772a8b608a2fca5f6de7e25c67-image-1498062629139.gif)
      courseA_artist_loops7_2018: |-
        ## 使用 <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>

        循环添加波浪到水中。\\r
        \\r
        ![expandable](https://images.code.org/01c5f6772a8b608a2fca5f6de7e25c67-image-1498062629139.gif)
      courseA_artist_loops7_2019: |-
        ## 使用 <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>

        循环添加波浪到水中。\\r
        \\r
        ![expandable](https://images.code.org/01c5f6772a8b608a2fca5f6de7e25c67-image-1498062629139.gif)
      courseA_artist_loops7_forVideo: |-
        ## 使用 <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>

        循环添加波浪到水中。\\r
        \\r
        ![expandable](https://images.code.org/01c5f6772a8b608a2fca5f6de7e25c67-image-1498062629139.gif)
      courseA_artist_loops8: |-
        ## 我们需要一把梯子到船上去。\\r

        \\r
        ![expandable](https://images.code.org/ee90228fae25ecca1fba589b721f9120-image-1498063066878.gif)
      courseA_artist_loops8_2018: |-
        ## 我们需要一把梯子到船上去。\\r

        \\r
        ![expandable](https://images.code.org/ee90228fae25ecca1fba589b721f9120-image-1498063066878.gif)
      courseA_artist_loops8_2019: |-
        ## 我们需要一把梯子到船上去。\\r

        \\r
        ![expandable](https://images.code.org/ee90228fae25ecca1fba589b721f9120-image-1498063066878.gif)
      courseA_artist_loops9: |-
        ## \*\* 挑战: \*\* 通向码头的楼梯坏了。 帮我修好它。\\r

        \\r
        ![expandable](https://images.code.org/9d36df1afb6a738ba7bcff8734403ff3-image-1498063282074.gif)
      courseA_artist_loops9_2018: |-
        ## \*\* 挑战: \*\* 通向码头的楼梯坏了。 帮我修好它。

        ![expandable](https://images.code.org/9d36df1afb6a738ba7bcff8734403ff3-image-1498063282074.gif)
      courseA_artist_loops9_2019: |-
        ## \*\* 挑战: \*\* 通向码头的楼梯坏了。 帮我修好它。\\r

        \\r
        ![expandable](https://images.code.org/9d36df1afb6a738ba7bcff8734403ff3-image-1498063282074.gif)
      courseA_artist_loops_challenge1: |-
        可以使用循环在一行中绘制多条线。\\r
        \\r
        你能画一座房子吗？让它看起来和你喜欢的一样！尝试查找重复的模式! \\r
        \\r
        这里有一些点子: \\r
        \\r
        ![](https://images.code.org/6e59e881e0aa1d31186e81a203655a0b-image-1501785654664.png)
      courseA_artist_loops_challenge1_2018: |-
        可以使用循环在一行中绘制多条线。\\r
        \\r
        你能画一座房子吗？让它看起来和你喜欢的一样！尝试查找重复的模式! \\r
        \\r
        这里有一些点子: \\r
        \\r
        ![](https://images.code.org/6e59e881e0aa1d31186e81a203655a0b-image-1501785654664.png)
      courseA_artist_loops_challenge1_2019: |-
        可以使用循环在一行中绘制多条线。\\r
        \\r
        你能画一座房子吗？让它看起来和你喜欢的一样！尝试查找重复的模式! \\r
        \\r
        这里有一些点子: \\r
        \\r
        ![](https://images.code.org/6e59e881e0aa1d31186e81a203655a0b-image-1501785654664.png)
      courseA_artist_loops_challenge2: |-
        \*\* 小鸟啾啾！\*_\\r
        \\r
        \*"你能帮我做两个鸟屋吗？"_
      courseA_artist_loops_challenge2a: "_\"帮我把营地做好!\"_ \\\\r \n\\\\r\n使用工具箱中的模块来绘制这三个帐篷。"
      courseA_artist_loops_challenge2a_2018: "_\"帮我把营地做好!\"_ \\\\r \n\\\\r\n使用工具箱中的模块来绘制这三个帐篷。"
      courseA_artist_loops_challenge2a_2019: "_\"帮我把营地做好!\"_ \\\\r \n\\\\r\n使用工具箱中的模块来绘制这三个帐篷。"
      courseA_bee_seq1: 帮助蜜蜂采花蜜！
      courseA_bee_seq10: 自己试试吧！采集所有花蜜。
      courseA_bee_seq11: 多忙的蜜蜂！采集所有花蜜。
      courseA_bee_seq12: 帮助蜜蜂采花蜜！
      courseA_bee_seq13: |-
        嗡嗡嗡 嗡嗡嗡\\r\\r用<xml><block
        type="maze_moveWest"/></xml>模块 3 次来让蜜蜂飞到花那里！
        别忘了用<xml><block type="maze_nectar"/></xml>收集蜂蜜！
      courseA_bee_seq14: |-
        嗡嗡嗡 嗡嗡嗡\\r\\r用<xml><block type="maze_moveNorth"/></xml>模块 3 次来让蜜蜂飞到花那里！
        最后别忘了收集蜂蜜。
      courseA_bee_seq2: 增加_一个_模块来帮助蜜蜂从花里采花蜜。
      courseA_bee_seq3: 能找出这代码哪里出了问题吗？改正它来帮助蜜蜂飞到花儿那里去。
      courseA_bee_seq4: 自己试一试！
      courseA_bee_seq5: 你得在两个方向上移动才能找到那朵花! 帮助蜜蜂选择正确的方向。
      courseA_bee_seq6: 现在，蜜蜂需要从两朵花里采花蜜！
      courseA_bee_seq7: 添加两个模块来完成这个关卡！
      courseA_bee_seq8: 这个迷宫看起来很熟悉。。。你能找出来这个和之前那个在什么地方不一样吗？
      courseA_bee_seq9: 蜜蜂需要花蜜！你找到规律了吗？
      courseA_collector_loops1: |-
        \*\* 自由发挥: \*\* 这是冒险家罗瑞尔！四处移动她，并获得尽可能多的宝藏。\\r
        \\r
        将模块拖到工作区中，并尝试找出如何获取宝藏。 获得至少一种珠宝来通过此关卡。
      courseA_collector_loops12: |-
        _"尤里卡! 拿到尽可能多的宝藏！"_\\r
        (你不必得到全部。）
      courseA_collector_loops12_2018: |-
        _"尤里卡! 拿到尽可能多的宝藏！"_\\r
        (你不必得到全部。）
      courseA_collector_loops12_2019: |-
        _"尤里卡! 拿到尽可能多的宝藏！"_\\r
        (你不必得到全部。）
      courseA_collector_loops1_2018: |-
        \*\* 自由发挥: \*\* 这是冒险家罗瑞尔！四处移动她，并获得尽可能多的宝藏。\\r
        \\r
        将模块拖到工作区中，并尝试找出如何获取宝藏。 获得至少一种珠宝来通过此关卡。
      courseA_collector_loops1_2019: |-
        \*\* 自由发挥: \*\* 这是冒险家罗瑞尔！四处移动她，并获得尽可能多的宝藏。\\r
        \\r
        将模块拖到工作区中，并尝试找出如何获取宝藏。 获得至少一种珠宝来通过此关卡。
      courseA_collector_loops2: |-
        得到所有三堆宝藏！移动罗瑞尔到每一堆宝藏，然后使用这个模块: \\r
          <xml><block type="collector_collect"/></xml>
      courseA_collector_loops2_2018: |-
        得到所有三堆宝藏！移动罗瑞尔到每一堆宝藏，然后使用这个模块: \\r
          <xml><block type="collector_collect"/></xml>
      courseA_collector_loops2_2019: |-
        得到所有三堆宝藏！移动罗瑞尔到每一堆宝藏，然后使用这个模块: \\r
          <xml><block type="collector_collect"/></xml>
      courseA_collector_loops3: |-
        罗瑞尔怎么能只用一个 <xml><block type="maze_moveEast"/></xml>
        模块得到所有五堆宝藏呢？
      courseA_collector_loops3_2018: |-
        罗瑞尔怎么能只用一个 <xml><block type="maze_moveEast"/></xml>
        模块得到所有五堆宝藏呢？
      courseA_collector_loops3_2019: |-
        罗瑞尔怎么能只用一个 <xml><block type="maze_moveEast"/></xml>
        模块得到所有五堆宝藏呢？
      courseA_collector_loops_challenge1: _"你能帮我找出一些缺陷吗？我知道想走哪条路，但我不确定要走多少步。"_
      courseA_collector_loops_challenge1_2018: _"你能帮我找出一些缺陷吗？我知道想走哪条路，但我不确定要走多少步。"_
      courseA_collector_loops_challenge1_2019: _"你能帮我找出一些缺陷吗？我知道想走哪条路，但我不确定要走多少步。"_
      courseA_collector_preLoops1: |-
        这是冒险家罗瑞尔!\\r
        \\r
        按 "运行", 看到她走到宝藏, 并拿到它。
      courseA_collector_preLoops2: |-
        很好！现在你可以自己添加代码了！\\r
        \\r
        粘贴一个![](https://images.code.org/563c0deb5c51d43cdfa72d62dec3419d-image-1508904559201.05.30.png)
        模块到程序的底部, 并单击 "运行"!
      courseA_collector_preLoops3: |-
        要拿到宝藏,粘贴两个![](https://images.code.org/54c206b62a02f1d7ea8f1bee52664ecb-image-1508905670742.25.37.png)
        模块和一个 ![](https://images.code.org/563c0deb5c51d43cdfa72d62dec3419d-image-1508904559201.05.30.png)
         模块到程序的底部, 然后单击 "运行"!
      courseA_collector_preLoops7: |-
        得到所有三堆宝藏！移动罗瑞尔到每一堆宝藏，然后使用这个模块: \\r
          <xml><block type="collector_collect"/></xml>
      courseA_forVideoTest_artist: 重复循环对小艺术家也有用！
      courseA_harvester_forVideo: 你能只用**一个**移动模块来采摘所有玉米吗？
      courseA_harvester_loops1: 帮助收割者采摘所有的玉米！
      courseA_harvester_loops10: 帮助收割者捡起所有5束玉米！
      courseA_harvester_loops10_2019: 帮助收割者捡起所有5束玉米！
      courseA_harvester_loops11: 试试自己做一个！
      courseA_harvester_loops11_2019: 试试自己做一个！
      courseA_harvester_loops1_2019: 帮助收割者采摘所有的玉米！
      courseA_harvester_loops2: 收割者需要采摘所有的玉米！找到规律了吗？
      courseA_harvester_loops2_2019: 收割者需要采摘所有的玉米！找到规律了吗？
      courseA_harvester_loops3: 你能只用**一个**移动模块来采摘所有玉米吗？
      courseA_harvester_loops3_2019: 你能只用**一个**移动模块来采摘所有玉米吗？
      courseA_harvester_loops4: |-
        _"我需要找到哪里错了！"_\\r
        \\r
        你能帮助收割者找到她代码里的错误吗？
      courseA_harvester_loops4_2019: |-
        _"我需要找到哪里错了！"_\\r
        \\r
        你能帮助收割者找到她代码里的错误吗？
      courseA_harvester_loops5: 自己试一试！你能也采摘最后的玉米吗？
      courseA_harvester_loops5_2019: 自己试一试！你能也采摘最后的玉米吗？
      courseA_harvester_loops5a: 看看所有玉米？你能自己采摘它们吗？
      courseA_harvester_loops5a_2019: 看看所有玉米？你能自己采摘它们吗？
      courseA_harvester_loops5b: 你能改变代码来让收割者采摘所有玉米吗？
      courseA_harvester_loops5b_2019: 你能改变代码来让收割者采摘所有玉米吗？
      courseA_harvester_loops6: |-
        你需要**一个** <xml><block
        type="maze_moveWest"></block></xml>模块和**一个** <xml><block type="maze_moveNorth"></block></xml>
        模块来完成这关！
      courseA_harvester_loops6_2019: |-
        你需要**一个** <xml><block
        type="maze_moveWest"></block></xml>模块和**一个** <xml><block type="maze_moveNorth"></block></xml>
        模块来完成这关！
      courseA_harvester_loops7: '自己试试吧！ '
      courseA_harvester_loops7_2019: '自己试试吧！ '
      courseA_harvester_loops8: |-
        这是同样的难题，但现在你需要用这个模块重复**三次**，而不是**两次**：\\r
        \\r
        <xml><block
        type="controls_repeat_simplified_dropdown">\\r
            <title name="TIMES"
        config="2-10">3</title>\\r
          </block></xml>
      courseA_harvester_loops9: 你能想出如何收集_所有_玉米吗？
      courseA_harvester_loops9_2019: 你能想出如何收集_所有_玉米吗？
      courseA_harvester_seq1: 帮助收割者采摘玉米！
      courseA_harvester_seq10: 收割者需要采摘所有的玉米！找到规律了吗？
      courseA_harvester_seq10_2019: 收割者需要采摘所有的玉米！找到规律了吗？
      courseA_harvester_seq11: 自己试试吧！采摘所有玉米。
      courseA_harvester_seq11_2019: 自己试试吧！采摘所有玉米。
      courseA_harvester_seq12: |-
        _谢谢你帮助我！_
        \\r
        \\r
        采摘所有的玉米。
      courseA_harvester_seq12_2019: |-
        _谢谢你帮助我！_
        \\r
        \\r
        采摘所有的玉米。
      courseA_harvester_seq13: 帮助农夫采摘玉米！
      courseA_harvester_seq13_2019: 帮助农夫采摘玉米！
      courseA_harvester_seq1_2019: 帮助收割者采摘玉米！
      courseA_harvester_seq2: '用<xml><block type="maze_moveWest"/></xml>模块 3 次来让收割者到达玉米的位置！ '
      courseA_harvester_seq2_2019: '用<xml><block type="maze_moveWest"/></xml>模块 3 次来让收割者到达玉米的位置！ '
      courseA_harvester_seq3: 用<xml><block type="maze_moveNorth"/></xml>模块 3 次来让收割者到达玉米的位置，最后别忘了捡起它们。
      courseA_harvester_seq3_2019: 用<xml><block type="maze_moveNorth"/></xml>模块 3 次来让收割者到达玉米的位置，最后别忘了捡起它们。
      courseA_harvester_seq4: 添加_一个_模块来帮助农夫采摘玉米。
      courseA_harvester_seq4_2019: 添加_一个_模块来帮助农夫采摘玉米。
      courseA_harvester_seq5: 能找出这代码哪里出了问题吗？改正它来帮助收割者收获玉米。
      courseA_harvester_seq5_2019: 能找出这代码哪里出了问题吗？改正它来帮助收割者收获玉米。
      courseA_harvester_seq6: 自己试一试！
      courseA_harvester_seq6_2019: 自己试一试！
      courseA_harvester_seq7: 你得在两个方向上移动才能找到那朵花! 帮助收割者选择正确的方向。
      courseA_harvester_seq7_2019: 你得在两个方向上移动才能找到那朵花! 帮助收割者选择正确的方向。
      courseA_harvester_seq8: 现在收割者需要采摘玉米两次！
      courseA_harvester_seq8_2019: 现在收割者需要采摘玉米两次！
      courseA_harvester_seq9: 添加两个模块来完成这个关卡！
      courseA_harvester_seq9_2019: 添加两个模块来完成这个关卡！
      courseA_maze_ramp2_2018: |-
        将两个<xml><block type="maze_moveEast"/></xml>
        模块附加到<xml><block type="when_run"/></xml>上来完成代码，然后点击"▶运行"。
      courseA_maze_ramp2_2019: |-
        将两个<xml><block type="maze_moveEast"/></xml>
        模块附加到<xml><block type="when_run"/></xml>上来完成代码，然后点击"▶运行"。
      courseA_maze_ramp2a_2018: |-
        将<xml><block type="maze_moveEast"/></xml>
        模块附加到<xml><block type="when_run"/></xml>上来完成代码，然后点击 ![](https://images.code.org/727d03b75b490aa49ed2e23e1290fdd8-image-1522888269949.11.32.png)。
      courseA_maze_ramp3_2018: |-
        _"这只猪把我的羽毛弄皱了。"_\\r
        \\r
        这里有一个额外的模块会让小鸟坠落。\\r
        将它从其它模块上移除，并拖回工具箱来扔掉。
      courseA_maze_ramp3a_2018: 从工具箱里取出一个 <xml><block type="maze_moveNorth"/></xml>，并将它加到其它模块的最底下来完成代码，然后点击"▶ 运行"。
      courseA_maze_ramp3a_2019: 从工具箱里取出一个 <xml><block type="maze_moveNorth"/></xml>，并将它加到其它模块的最底下来完成代码，然后点击"▶ 运行"。
      courseA_maze_ramp3b_2018: |-
        在这个代码的末尾有一个多余的代码块!

        把它拖回工具箱来删除它。
      courseA_maze_ramp3b_2019: |-
        在这个代码的末尾有一个多余的代码块!

        把它拖回工具箱来删除它。
      courseA_maze_ramp4_2018: |-
        _"沿着这条路带我去找那只笨猪。"_\\r
        \\r
        躲开 TNT 炸药，不然我的羽毛就要被炸飞了！
      courseA_maze_ramp4a_2018: 你能想出要在这些模块下面增加什么模块来完成这段代码吗？
      courseA_maze_ramp4a_2019: 你能想出要在这些模块下面增加什么模块来完成这段代码吗？
      courseA_maze_ramp5_2018: |-
        _"沿着这条路，让我到猪那里！"_\\r
        \\r
        躲开TNT炸药。
      courseA_maze_ramp5a_2018: 试试自己完成它！
      courseA_maze_ramp5a_2019: 试试自己完成它！
      courseA_maze_seq1: _"摆弄这些模块并试着把我带到坏猪那里！"_
      courseA_maze_seq10: |-
        **挑战：** 绕开TNT 把鸟带到猪那里！\\r
        \\r
        ![expandable](https://images.code.org/a656e421bc90e530a7e1ce636e507752-image-1497996976195.gif)
      courseA_maze_seq10_2018: "**挑战：** 绕开TNT 把鸟带到猪那里！"
      courseA_maze_seq10_2019: "**挑战：** 绕开TNT 把鸟带到猪那里！"
      courseA_maze_seq11: |-
        到了更短的关卡了！往一个方向移动，然后另一个方向把鸟带到猪那里。\\r
        \\r
        ![expandable](https://images.code.org/bb4571384fc56702704a0c9395ee3695-image-1497996380902.gif)
      courseA_maze_seq11_2018: |-
        到了更短的关卡了！往一个方向移动，然后另一个方向把鸟带到猪那里。\\r
        \\r
        ![expandable](https://images.code.org/bb4571384fc56702704a0c9395ee3695-image-1497996380902.gif)
      courseA_maze_seq11_2019: |-
        到了更短的关卡了！往一个方向移动，然后另一个方向把鸟带到猪那里。\\r
        \\r
        ![expandable](https://images.code.org/bb4571384fc56702704a0c9395ee3695-image-1497996380902.gif)
      courseA_maze_seq12: |-
        抓住那只猪！\\r
        \\r
        ![expandable](https://images.code.org/c6ae5024441e2305db82d06679e5a281-image-1497997160569.gif)
      courseA_maze_seq12_2018: |-
        抓住那只猪！\\r
        \\r
        ![expandable](https://images.code.org/c6ae5024441e2305db82d06679e5a281-image-1497997160569.gif)
      courseA_maze_seq12_2019: |-
        抓住那只猪！\\r
        \\r
        ![expandable](https://images.code.org/c6ae5024441e2305db82d06679e5a281-image-1497997160569.gif)
      courseA_maze_seq1_2018: _"摆弄这些模块并试着把我带到坏猪那里！"_
      courseA_maze_seq1_2019: _"摆弄这些模块并试着把我带到坏猪那里！"_
      courseA_maze_seq2: |-
        _"一个缺陷！修复代码把我带到猪那里。"_\\r
        \\r
        \\r
        ![expandable](https://images.code.org/4af4959874b3ca1fdd3008dc4f77add4-image-1497994904322.gif)
      courseA_maze_seq2_2018: |-
        _"一个缺陷！修复代码把我带到猪那里。"_\\r
        \\r
        \\r
        ![expandable](https://images.code.org/4af4959874b3ca1fdd3008dc4f77add4-image-1497994904322.gif)
      courseA_maze_seq3: |-
        _"修复代码把我带到猪那里！"_\\r
        \\r
        ![expandable](https://images.code.org/4adca88dc6df7378846a91d0fb0e59d1-image-1497995239069.gif)
      courseA_maze_seq3_2018: |-
        _"修复代码把我带到猪那里！"_\\r
        \\r
        ![expandable](https://images.code.org/4adca88dc6df7378846a91d0fb0e59d1-image-1497995239069.gif)
      courseA_maze_seq4: |-
        _"一些事情不太对。"_\\r
        \\r
        移除一个模块把鸟带到猪那里！\\r
        \\r
        ![expandable](https://images.code.org/6af44fb0ba5ac5dd5502e2538f51fb9c-image-1497996162453.gif)
      courseA_maze_seq4_2018: |-
        _"一些事情不太对。"_\\r
        \\r
        移除一个模块把鸟带到猪那里！\\r
        \\r
        ![expandable](https://images.code.org/6af44fb0ba5ac5dd5502e2538f51fb9c-image-1497996162453.gif)
      courseA_maze_seq5: |-
        从头自己开始尝试这个。\\r
        \\r
        ![expandable](https://images.code.org/e4ef591b4580db478330c298d1af756f-image-1497997080163.gif)
      courseA_maze_seq5_2018: 尝试一下。
      courseA_maze_seq5_2019: 尝试一下。
      courseA_maze_seq5a_2018: |-
        _"在这里，小猪！"_\\r
        \\r
        要在代码最后增加什么来让小鸟到达猪那里？
      courseA_maze_seq5a_2019: |-
        _"在这里，小猪！"_\\r
        \\r
        要在代码最后增加什么来让小鸟到达猪那里？
      courseA_maze_seq6: |-
        往一条路走，然后另一条把鸟带到猪那里！\\r
        \\r
        ![expandable](https://images.code.org/8f71c406afa60c6898937d950c670205-image-1497996506419.gif)
      courseA_maze_seq6_2018: 往一条路走，然后走另一条把鸟带到猪那里！
      courseA_maze_seq6_2019: 往一条路走，然后走另一条把鸟带到猪那里！
      courseA_maze_seq7: |-
        找出什么缺少了，然后添加模块使鸟到达猪那！\\r
        \\r
        ![expandable](https://images.code.org/35bdb628dabd4259b581286b071c02f3-image-1497996651260.gif)
      courseA_maze_seq7_2018: |-
        找出什么缺少了，然后添加模块使鸟到达猪那！\\r
        \\r
        ![expandable](https://images.code.org/35bdb628dabd4259b581286b071c02f3-image-1497996651260.gif)
      courseA_maze_seq8: |-
        通过这关卡把鸟带到猪那！\\r
        \\r
        ![expandable](https://images.code.org/fb4735244f74a4e001d1fa7b5c6028f9-image-1497998330218.gif)
      courseA_maze_seq8_2018: 通过这关，把鸟带到猪那！
      courseA_maze_seq8_2019: 通过这关，把鸟带到猪那！
      courseA_maze_seq9: |-
        \*\* 挑战: \*\* 通过添加模块把鸟带到猪那里来调试这个关卡! \\r
        \\r
        ![expandable](https://images.code.org/3f35068dd3cf51c420a536fa078f854d-image-1497996843105.gif)
      courseA_maze_seq9_2018: |-
        \*\* 挑战: \*\* 通过添加模块把鸟带到猪那里来调试这个关卡! \\r
        \\r
        ![expandable](https://images.code.org/3f35068dd3cf51c420a536fa078f854d-image-1497996843105.gif)
      courseA_maze_seq_challenge1: 调试本关卡。去掉多余的模块并添加缺少的块。让鸟到达猪那里！
      courseA_maze_seq_challenge1_2018: 调试本关卡。去掉多余的模块并添加缺少的块。让鸟到达猪那里！
      courseA_maze_seq_challenge1_2019: 调试本关卡。去掉多余的模块并添加缺少的块。让鸟到达猪那里！
      courseA_playLab_events3: |-
        通过连接已经在工作区的<xml><block type="studio_move">\\r
            <title name="SPRITE">1</title>\\r
            <title
        name="DIR">8</title>\\r
          </block></xml> 模块到<xml><block type="studio_whenArrow">\\r
            <title
        name="VALUE">left</title>\\r
          </block></xml>事件模块帮助乔治狗移动。\\r
        \\r
        把乔治带到旗那里来过此关卡！
      courseA_playLab_events3_2018: |-
        通过连接已经在工作区的<xml><block type="studio_move">\\r
            <title name="SPRITE">1</title>\\r
            <title
        name="DIR">8</title>\\r
          </block></xml> 模块到<xml><block type="studio_whenArrow">\\r
            <title
        name="VALUE">left</title>\\r
          </block></xml>事件模块帮助乔治狗移动。\\r
        \\r
        把乔治带到旗那里来过此关卡！
      courseA_playLab_events3_2019: |-
        通过连接已经在工作区的<xml><block type="studio_move">\\r
            <title name="SPRITE">1</title>\\r
            <title
        name="DIR">8</title>\\r
          </block></xml> 模块到<xml><block type="studio_whenArrow">\\r
            <title
        name="VALUE">left</title>\\r
          </block></xml>事件模块帮助乔治狗移动。\\r
        \\r
        把乔治带到旗那里来过此关卡！
      courseA_playLab_events4: 现在，添加更多的模块，来让乔治在右方向键按下时，向右移动。
      courseA_playLab_events4_2018: 现在，添加另一个模块，来让乔治在右方向键按下时，向右移动。
      courseA_playLab_events4_2019: 现在，添加另一个模块，来让乔治在右方向键按下时，向右移动。
      courseA_playLab_events5: 添加事件让乔治在`上`和`下`按钮被点击时，向上和下移动。
      courseA_playLab_events5_2018: 添加事件让乔治在`上`和`下`按钮被点击时，向上和下移动。
      courseA_playLab_events5_2019: 添加事件让乔治在`上`和`下`按钮被点击时，向上和下移动。
      courseA_playLab_events7_2018: _任意发挥:_ 添加你想要的任何东西到这个游戏中。当乔治碰上恐龙的时候, 你能否让恐龙消失?
      courseA_playLab_events7_2019: _任意发挥:_ 添加你想要的任何东西到这个游戏中。当乔治碰上恐龙的时候, 你能否让恐龙消失?
      courseA_playlab_events_challenge1: |-
        点击奥丽芙将使罗宾出现！
        你能编写代码来显示其余的人物吗？\\r
        \\r
        在这个关卡中, 请务必点击提示！这些提示将帮助你逐步完成此项目!\\r
        \\r
        \!\[](\<<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19>
        PM.png>)
      courseA_playlab_events_challenge1_2018: |-
        点击奥丽芙将使罗宾出现！
        你能编写代码来显示其余的人物吗？\\r
        \\r
        在这个关卡中, 请务必点击提示！这些提示将帮助你逐步完成此项目!\\r
        \\r
        \!\[](\<<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19>
        PM.png>)
      courseA_playlab_events_challenge1_2019: |-
        点击奥丽芙将使罗宾出现！
        你能编写代码来显示其余的人物吗？\\r
        \\r
        在这个关卡中, 请务必点击提示！这些提示将帮助你逐步完成此项目!\\r
        \\r
        \!\[](\<<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19>
        PM.png>)
      courseA_playlab_events_challenge1a: |-
        我的朋友藏在哪里？在这个游戏中，点击我，就会显示我的朋友奥丽芙猫！点击奥丽芙会让罗宾出现！你能也写代码来显示我的其他朋友吗？\\r
        \\r
        \\r
        在这一关中，确保点击了提示！提示会帮你一步步完成这个项目！\\r
        \\r
        \!\[](\<<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19>
        PM.png>)
      courseA_playlab_events_challenge2: |-
        当你点击他们的时候让每个人做点什么。动物们会怎么说？还会发生什么呢？\\r
        \\r
        在这个关卡中, 请务必点击提示。这些提示会给你尝试一些有趣的事情!\\r
        \\r
        \!\[](\<<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19>
        PM.png>)
      courseA_playlab_events_challenge2_2018: |-
        当你点击他们的时候让每个人做点什么。动物们会怎么说？还会发生什么呢？\\r
        \\r
        在这个关卡中, 请务必点击提示。这些提示会给你尝试一些有趣的事情!\\r
        \\r
        \!\[](\<<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19>
        PM.png>)
      courseA_playlab_events_challenge2_2019: |-
        当你点击他们的时候让每个人做点什么。动物们会怎么说？还会发生什么呢？\\r
        \\r
        在这个关卡中, 请务必点击提示。这些提示会给你尝试一些有趣的事情!\\r
        \\r
        \!\[](\<<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19>
        PM.png>)
      courseA_playlab_events_challengeClone: |-
        我的朋友藏在哪里？在这个游戏中，点击我，就会显示我的朋友奥丽芙猫！点击奥丽芙会让罗宾出现！你能也写代码来显示我的其他朋友吗？\\r
        \\r
        \\r
        在这一关中，确保点击了提示！提示会帮你一步步完成这个项目！\\r
        \\r
        \!\[](\<<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19>
        PM.png>)
      courseB_Scrat_ramp1_2018: 让斯奎特到达橡子，将<xml><block type="maze_moveEast"/></xml>模块粘到<xml><block type="when_run"/></xml>模块的下面，然后点击"▶ 运行"！
      courseB_Scrat_ramp1_2019: 让斯奎特到达橡子，将<xml><block type="maze_moveEast"/></xml>模块粘到<xml><block type="when_run"/></xml>模块的下面，然后点击"▶ 运行"！
      courseB_Scrat_ramp2_2018: |-
        将两个<xml><block type="maze_moveEast"/></xml>
        模块附加到<xml><block type="when_run"/></xml>上来完成代码，然后点击"▶ 运行"。
      courseB_Scrat_ramp2_2019: |-
        将两个<xml><block type="maze_moveEast"/></xml>
        模块附加到<xml><block type="when_run"/></xml>上来完成代码，然后点击"▶ 运行"。
      courseB_Scrat_ramp3a_2018: 从工具箱里取出一个 <xml><block type="maze_moveNorth"/></xml>，并将它加到其它模块的最底下来完成代码，然后点击"▶ 运行"。
      courseB_Scrat_ramp3a_2019: 从工具箱里取出一个 <xml><block type="maze_moveNorth"/></xml>，并将它加到其它模块的最底下来完成代码，然后点击"▶ 运行"。
      courseB_Scrat_ramp3b_2018: |-
        在这个代码的末尾有一个多余的代码块!

        把它拖回工具箱来删除它。
      courseB_Scrat_ramp3b_2019: |-
        在这个代码的末尾有一个多余的代码块!

        把它拖回工具箱来删除它。
      courseB_Scrat_ramp4a_2018: 你能想出要在这些模块下面增加什么模块来完成这段代码吗？
      courseB_Scrat_ramp4a_2019: 你能想出要在这些模块下面增加什么模块来完成这段代码吗？
      courseB_Scrat_ramp5a_2018: 试试自己完成它！
      courseB_Scrat_ramp5a_2019: 试试自己完成它！
      courseB_artist_loops10: |-
        运用你已经学到的知识来画一幅你认为艺术家在回到家的时会看到的画。\\r
        \\r
        \_\_\_\\r

        ### 点子\\r

        \\r
        ![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)\\r
        ![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)\\r
        ![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)\\r
        ![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)
      courseB_artist_loops10_2018: |-
        运用你已经学到的知识来画一幅你认为艺术家在回到家的时会看到的画。\\r
        \\r
        \_\_\_\\r

        ### 点子\\r

        \\r
        ![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)\\r
        ![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)\\r
        ![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)\\r
        ![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)
      courseB_artist_loops10_2019: |-
        运用你已经学到的知识来画一幅你认为艺术家在回到家的时会看到的画。\\r
        \\r
        \_\_\_\\r

        ### 点子\\r

        \\r
        ![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)\\r
        ![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)\\r
        ![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)\\r
        ![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)
      courseB_artist_loops6: 在灌木丛后面是一条开满美丽花朵的藤。你能够爬上藤看它延到哪里吗？
      courseB_artist_loops6_2018: 在灌木丛后面是一条开满美丽花朵的藤。你能够爬上藤看它延到哪里吗？
      courseB_artist_loops6_2019: 在灌木丛后面是一条开满美丽花朵的藤。你能够爬上藤看它延到哪里吗？
      courseB_artist_loops7: "**挑战：**这是一个隐藏的花园！让我们四处走一走。"
      courseB_artist_loops7_2018: "**挑战：**这是一个隐藏的花园！让我们四处走一走。"
      courseB_artist_loops7_2019: "**挑战：**这是一个隐藏的花园！让我们四处走一走。"
      courseB_artist_loops_challenge1: _"是时候掷骰子了! 你能帮我画这些吗？"_
      courseB_artist_loops_challenge1_2018: _"是时候掷骰子了! 你能帮我画这些吗？"_
      courseB_artist_loops_challenge1_2019: _"是时候掷骰子了! 你能帮我画这些吗？"_
      courseB_artist_loops_challenge2: |-
        让我们玩游戏吧! 尽可能多地画 X。
        你可以做到一排放3 个吗？
      courseB_artist_loops_challenge2_2018: |-
        让我们玩游戏吧! 尽可能多地画 X。
        你可以做到一排放3 个吗？
      courseB_artist_loops_challenge2_2019: |-
        让我们玩游戏吧! 尽可能多地画 X。
        你可以做到一排放3 个吗？
      courseB_collector_loops1: |-
        \*\* 自由发挥: \*\* 这是冒险家罗瑞尔！四处移动她，并获得尽可能多的宝藏。\\r
        \\r
        将模块拖到工作区中，并尝试找出如何获取宝藏。 获得至少一种珠宝来通过此关卡。
      courseB_collector_loops1_2018: |-
        \*\* 自由发挥: \*\* 这是冒险家罗瑞尔！四处移动她，并获得尽可能多的宝藏。\\r
        \\r
        将模块拖到工作区中，并尝试找出如何获取宝藏。 获得至少一种珠宝来通过此关卡。
      courseB_collector_loops1_2019: |-
        \*\* 自由发挥: \*\* 这是冒险家罗瑞尔！四处移动她，并获得尽可能多的宝藏。\\r
        \\r
        将模块拖到工作区中，并尝试找出如何获取宝藏。 获得至少一种珠宝来通过此关卡。
      courseB_collector_loops2: |-
        移动罗瑞尔到宝藏, 然后使用<xml><block type="collector_collect"/></xml>模块来捡起它。\\r
        \\r
        \\r
        拿到所有四堆宝藏来通过此关卡。
      courseB_collector_loops2_2018: |-
        移动罗瑞尔到宝藏, 然后使用<xml><block type="collector_collect"/></xml>模块来捡起它。\\r
        \\r
        \\r
        拿到所有四堆宝藏来通过此关卡。
      courseB_collector_loops2_2019: |-
        移动罗瑞尔到宝藏, 然后使用<xml><block type="collector_collect"/></xml>模块来捡起它。\\r
        \\r
        \\r
        拿到所有四堆宝藏来通过此关卡。
      courseB_collector_loops3: |-
        罗瑞尔怎么能只用一个 <xml><block type="maze_moveEast"/></xml>
        模块得到所有五堆宝藏呢？
      courseB_collector_loops3_2018: |-
        罗瑞尔怎么能只用一个 <xml><block type="maze_moveEast"/></xml>
        模块得到所有五堆宝藏呢？
      courseB_collector_loops3_2019: |-
        罗瑞尔怎么能只用一个 <xml><block type="maze_moveEast"/></xml>
        模块得到所有五堆宝藏呢？
      courseB_collector_loops3_predict1: 罗瑞尔怎样只用`E -->`模块来收集所有5堆金子？
      courseB_collector_loops_challenge2a: |-
        _”让我们得到宝藏！“_\\r
        \\r
        帮助罗瑞尔得到至少**5** 片宝藏来完成此关卡。
      courseB_collector_loops_challenge2a_2018: |-
        _”让我们得到宝藏！“_\\r
        \\r
        帮助罗瑞尔得到至少**5** 片宝藏来完成此关卡。
      courseB_collector_loops_challenge2a_2019: |-
        _”让我们得到宝藏！“_\\r
        \\r
        帮助罗瑞尔得到至少**5** 片宝藏来完成此关卡。
      courseB_collector_prog3: 罗瑞尔怎样只用`E -->`模块来收集所有5堆金子？
      courseB_iceage_loops1: 帮助斯奎特穿过溜滑的冰去拿到橡子！
      courseB_iceage_loops10: 帮助斯奎特走过去拿到橡子！
      courseB_iceage_loops10_2019: 帮助斯奎特走过去拿到橡子！
      courseB_iceage_loops11: 帮助斯奎特得到橡子！
      courseB_iceage_loops11_2019: 帮助斯奎特得到橡子！
      courseB_iceage_loops11_forVideo: 帮助斯奎特得到橡子！
      courseB_iceage_loops12: 用各种方法来拿到橡子！
      courseB_iceage_loops12_2019: 用各种方法来拿到橡子！
      courseB_iceage_loops1_2019: 帮助斯奎特穿过溜滑的冰去拿到橡子！
      courseB_iceage_loops2: |-
        用 <xml><block type="maze_moveWest"/></xml>
        和 <xml><block type="maze_moveSouth"/></xml> 模块来获得橡子！
      courseB_iceage_loops2_2019: |-
        用 <xml><block type="maze_moveWest"/></xml>
        和 <xml><block type="maze_moveSouth"/></xml> 模块来获得橡子！
      courseB_iceage_loops3: 你能只用一个 <xml><block type="maze_moveWest"/></xml>模块来获得橡子吗？试试用循环！
      courseB_iceage_loops3_2019: 你能只用一个 <xml><block type="maze_moveWest"/></xml>模块来获得橡子吗？试试用循环！
      courseB_iceage_loops4: 再添加一个模块来让斯奎特用各种方法到达橡子！
      courseB_iceage_loops4_2019: 再添加一个模块来让斯奎特用各种方法到达橡子！
      courseB_iceage_loops5: 你能再增加一个循环来获得橡子吗？
      courseB_iceage_loops6: 你能增加一个循环到达橡子吗？
      courseB_iceage_loops6_2019: 你能增加一个循环到达橡子吗？
      courseB_iceage_loops7: 斯奎特真的想要那个橡子！
      courseB_iceage_loops7_2019: 斯奎特真的想要那个橡子！
      courseB_iceage_loops8: '你能修好这段代码吗？ '
      courseB_iceage_loops8_2019: '你能修好这段代码吗？ '
      courseB_iceage_loops9: 橡子太远了！你能用循环帮助斯奎特到达那里吗？
      courseB_iceage_loops9_2019: 橡子太远了！你能用循环帮助斯奎特到达那里吗？
      courseB_maze_seq3: _"修复代码来让我到达那只猪！"_
      courseB_maze_seq3_2018: _"修复代码来让我到达那只猪！"_
      courseB_maze_seq9: "**挑战：**绕开TNT炸药，让鸟到达猪那里。"
      courseB_maze_seq9_2018: "**挑战：**绕开破冰，让斯奎特到达橡子那里。"
      courseB_maze_seq9_2019: "**挑战：**绕开破冰，让斯奎特到达橡子那里。"
      courseB_maze_seq9_challenge1: 那只猪现在藏在哪里？
      courseB_maze_seqCold: "**挑战：**通过添加模块来调试这关, 让鸟到达猪那里!"
      courseB_maze_seq_challenge1: 每种移动模块你只有4个。你能在用完模块前，找到一条路吗？
      courseB_maze_seq_challenge1_2018: 每种移动模块你只有4个。你能在用完模块前，找到一条路吗？
      courseB_maze_seq_challenge1_2019: 每种移动模块你只有4个。你能在用完模块前，找到一条路吗？
      courseB_playLab_events1: |-
        这个游戏叫做"剧本实验室"。\\r
        \\r
        看看你能否指出每个模块做了什么。
      courseB_playLab_events1_2018: |-
        这个游戏叫做"剧本实验室"。\\r
        \\r
        看看你能否指出每个模块做了什么。
      courseB_playLab_events1_2019: |-
        这个游戏叫做"剧本实验室"。\\r
        \\r
        看看你能否指出每个模块做了什么。
      courseB_playlab_events3: 当你点击黛西龙时，用事件让她切换到随机的![](https://images.code.org/c365e065614fea592612264f33624c09-image-1475698889081.17.53.png)表情。
      courseB_playlab_events3_2018: 当你点击黛西龙时，用事件让她切换到随机的![](https://images.code.org/c365e065614fea592612264f33624c09-image-1475698889081.17.53.png)表情。
      courseB_playlab_events3_2019: 当你点击黛西龙时，用事件让她切换到随机的![](https://images.code.org/c365e065614fea592612264f33624c09-image-1475698889081.17.53.png)表情。
      courseB_playlab_events4: |-
        骑士时间!  \\r
        \\r
        添加一个事件，当点击左箭头时，让骑士移向龙。
      courseB_playlab_events4_2018: |-
        骑士时间！到达龙来完成这关。

        添加一个事件，当点击左箭头时，让骑士移向龙。
      courseB_playlab_events4_2019: |-
        骑士时间！到达龙来完成这关。

        添加一个事件，当点击左箭头时，让骑士移向龙。
      courseB_playlab_events5_2018: "现在添加一个事件, 当你按下右方向键时, 让骑士逃离那个龙。  \n\n将骑士向右移动通过这一关。"
      courseB_playlab_events5_2019: "现在添加一个事件, 当你按下右方向键时, 让骑士逃离那个龙。  \n\n将骑士向右移动通过这一关。"
      courseB_playlab_events6: |-
        帮助你的骑士得到所有的旗帜！\\r
        \\r
        要做到这个，你需要添加事件来帮助骑士上下左右移动。
      courseB_playlab_events6_2018: |-
        帮助你的骑士得到所有的旗帜！\\r
        \\r
        要做到这个，你需要添加事件来帮助骑士上下左右移动。
      courseB_playlab_events6_2019: |-
        帮助你的骑士得到所有的旗帜！\\r
        \\r
        要做到这个，你需要添加事件来帮助骑士上下左右移动。
      courseB_playlab_events7: |-
        当骑士在获得旗帜的路上碰到龙时，让他消失。这样会让游戏更有趣！
        \\r
        \\r
        当它们碰撞时，播放一个声音，让它感觉起来像真的一样。\\r
        \\r
        浏览所有的目标，然后撞上龙来通过这关。
      courseB_playlab_events7_2018: |-
        当骑士在获得旗帜的路上碰到龙时，让他消失。这样会让游戏更有趣！
        \\r
        \\r
        当它们碰撞时，播放一个声音，让它感觉起来像真的一样。\\r
        \\r
        浏览所有的目标，然后撞上龙来通过这关。
      courseB_playlab_events7_2019: |-
        当骑士在获得旗帜的路上碰到龙时，让他消失。这样会让游戏更有趣！
        \\r
        \\r
        当它们碰撞时，播放一个声音，让它感觉起来像真的一样。\\r
        \\r
        浏览所有的目标，然后撞上龙来通过这关。
      courseB_playlab_events_challenge1: |-
        大型的动物比赛的时间到了! 当你按`▼`时, 让动物们往下移动。\\r
        \\r
        看谁跑得最快？
      courseB_playlab_events_challenge1_2018: |-
        大型的动物比赛的时间到了! 当你按`▼`时, 让动物们往下移动。\\r
        \\r
        看谁跑得最快？
      courseB_playlab_events_challenge1_2019: |-
        大型的动物比赛的时间到了! 当你按`▼`时, 让动物们往下移动。\\r
        \\r
        看谁跑得最快？
      courseB_playlab_events_challenge2: |-
        在你点击动物时，让它们消失。\\r
        现在用狗先试试，然后帮助其它动物加入进来。你也可以增加声音和计分来做成一个捉动物的游戏！\\r
        \\r
        ![](https://images.code.org/d48437a0b08be90110541e0ef21076e0-image-1497907722000.gif)
      courseB_playlab_events_challenge2_2018: |-
        在你点击动物时，让它们消失。\\r
        现在用狗先试试，然后帮助其它动物加入进来。你也可以增加声音和计分来做成一个捉动物的游戏！\\r
        \\r
        ![](https://images.code.org/d48437a0b08be90110541e0ef21076e0-image-1497907722000.gif)
      courseB_playlab_events_challenge2_2019: |-
        在你点击动物时，让它们消失。\\r
        现在用狗先试试，然后帮助其它动物加入进来。你也可以增加声音和计分来做成一个捉动物的游戏！\\r
        \\r
        ![](https://images.code.org/d48437a0b08be90110541e0ef21076e0-image-1497907722000.gif)
      courseB_starWars_prog1: |-
        ![Rey](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)_"BB-8，去拿到那块废旧金属！"_\\r
        \\r
        小心墙和大木箱。像这样的废旧金属：![picture of scrap metal](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)
      courseB_starWars_prog10: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"你能得到所有的吗？"_
      courseB_starWars_prog10_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"你能得到所有的吗？"_
      courseB_starWars_prog10_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"你能得到所有的吗？"_
      courseB_starWars_prog11: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"继续！"_
      courseB_starWars_prog11_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"继续！"_
      courseB_starWars_prog11_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"继续！"_
      courseB_starWars_prog1_2018: |-
        ![Rey](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)_"BB-8，去拿到那块废旧金属！"_\\r
        \\r
        小心墙和大木箱。像这样的废旧金属：![picture of scrap metal](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)
      courseB_starWars_prog1_2019: |-
        ![Rey](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)_"BB-8，去拿到那块废旧金属！"_\\r
        \\r
        小心墙和大木箱。像这样的废旧金属：![picture of scrap metal](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)
      courseB_starWars_prog2: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"获得所有金属。"_
      courseB_starWars_prog2_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"获得所有金属。"_
      courseB_starWars_prog2_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"获得所有金属。"_
      courseB_starWars_prog3: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"继续，BB-8！"_
      courseB_starWars_prog3_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"继续，BB-8！"_
      courseB_starWars_prog3_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"继续，BB-8！"_
      courseB_starWars_prog4: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"拿到它，BB-8！"_
      courseB_starWars_prog4_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"拿到它，BB-8！"_
      courseB_starWars_prog4_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"拿到它，BB-8！"_
      courseB_starWars_prog5: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"你能得到所有的吗？"_
      courseB_starWars_prog5_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"你能得到所有的吗？"_
      courseB_starWars_prog5_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"你能得到所有的吗？"_
      courseB_starWars_prog6: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"你能做到！"_
      courseB_starWars_prog6_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"你能做到！"_
      courseB_starWars_prog6_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"你能做到！"_
      courseB_starWars_prog7: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"去拿到它！"_
      courseB_starWars_prog7_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"去拿到它！"_
      courseB_starWars_prog7_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"去拿到它！"_
      courseB_starWars_prog8: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8，坚持。"_\\r
        \\r
        **挑战**：收集所有的废旧金属。
      courseB_starWars_prog8_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8，坚持。"_\\r
        \\r
        **挑战**：收集所有的废旧金属。
      courseB_starWars_prog8_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8，坚持。"_\\r
        \\r
        **挑战**：收集所有的废旧金属。
      courseB_starWars_prog9: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"你能做到！"_
      courseB_starWars_prog9_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"你能做到！"_
      courseB_starWars_prog9_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"你能做到！"_
      courseC19_playLab_EOC1: |-
        你学到的大量知识太令人惊奇了！让我们一步步做个游戏。\\r
        \\r
        用工具箱里的新模块，选择一个新背景，然后捡起一个演员放到游戏中。
      courseC19_playLab_EOC2: |-
        用事件处理函数和动作这样的模块来让你的玩家根据键盘方向键来移动。\\r
        \\r
        让玩家到达目标来通过这关。
      courseC19_playLab_EOC3: |-
        让我们添加更多的角色到你的游戏里！\\r
        \\r
        用`设置演员`模块来增加更多的角色，然后移动到目标来完成这关。
      courseC19_playLab_EOC4: |-
        让好几个角色动起来，是游戏的好的开始，但我们需要增加更多的东西，让它感觉起来是个真游戏。让我们添加分数！\\r
        \\r
        用`当演员碰到`这样的事件模块来改变分数。得到10分来通关。
      courseC19_playLab_EOC5: 做的好！你有了一个游戏所有基本的部分了。现在花点时间来确保游戏会像你像的那样工作。加入一个胜利或失败的方法，然后玩到触发这些条件。
      courseC19_playLab_EOC6: 完成了！现在你可以玩自己的游戏，或者分享给你的朋友或同学了！
      courseC_PlayLab_events6_2019: 现在，写一个程序让企鹅四处移动，使用上/下/左/右键命中所有目标！
      courseC_PlayLab_events7: |-
        `一直重复`模块能让你一遍又一遍的一直运行代码。用这个代码来将恐龙迪诺（演员2）不停的上下移动400像素。\\r
        \\r
        ![](https://images.code.org/0cbe6dd5f4e2251e3f121dbabc0cc19d-image-1523040103822.com-resize.gif)
      courseC_PlayLab_events7_2018: |-
        `一直重复`模块能让你一遍又一遍的一直运行代码。用这个代码来将恐龙迪诺（演员2）不停的上下移动400像素。\\r
        \\r
        ![](https://images.code.org/0cbe6dd5f4e2251e3f121dbabc0cc19d-image-1523040103822.com-resize.gif)
      courseC_PlayLab_events7_2019: |-
        `一直重复`模块能让你一遍又一遍的一直运行代码。用这个代码来将恐龙迪诺（演员2）不停的上下移动400像素。\\r
        \\r
        ![](https://images.code.org/0cbe6dd5f4e2251e3f121dbabc0cc19d-image-1523040103822.com-resize.gif)
      courseC_PlayLab_events8: |-
        如果企鹅跑到了恐龙（演员1）那里，你能让它说"噢！"，并且播放"命中"的声音吗？\\r
        \\r
        当你写完代码, 请运行这个游戏让它发生.
        \\r
        ![](https://images.code.org/a634f249021651f60a1acf37bf78d07d-image-1475342557950.gif)
      courseC_PlayLab_events8_2018: |-
        如果企鹅跑到了恐龙（演员1）那里，你能让它说"噢！"，并且播放"命中"的声音吗？\\r
        \\r
        当你写完代码, 请运行这个游戏让它发生.
        \\r
        ![](https://images.code.org/a634f249021651f60a1acf37bf78d07d-image-1475342557950.gif)
      courseC_PlayLab_events8_2019: |-
        如果企鹅跑到了恐龙（演员1）那里，你能让它说"噢！"，并且播放"命中"的声音吗？\\r
        \\r
        当你写完代码, 请运行这个游戏让它发生.
        \\r
        ![](https://images.code.org/a634f249021651f60a1acf37bf78d07d-image-1475342557950.gif)
      courseC_PlayLab_events_challenge1: |-
        用这个新模块，在当企鹅碰到龙或者得分时，让它自动的走回开始的地方。这会让你的游戏更有挑战，更好玩！\\r
        \\r
        玩游戏，并用方向控制企鹅，直到得到了足够的分数。企鹅必须被移动到屏幕的`左中`的位置来结束这关。
      courseC_PlayLab_events_challenge1_2018: |-
        用这个新模块，在当企鹅碰到龙或者得分时，让它自动的走回开始的地方。这会让你的游戏更有挑战，更好玩！

        玩游戏，并用方向控制企鹅，直到得到了5分或更多分数。企鹅必须被移动到屏幕的`左中`的位置来结束这关。
      courseC_PlayLab_events_challenge1_2019: |-
        用这个新模块，在当企鹅碰到龙或者得分时，让它自动的走回开始的地方。这会让你的游戏更有挑战，更好玩！

        玩游戏，并用方向控制企鹅，直到得到了5分或更多分数。企鹅必须被移动到屏幕的`左中`的位置来结束这关。
      courseC_artist_loop1: |-
        太棒了！\\r
        \\r
        在开始循环前，让我们用`设置图案`模块来改变刷子的样式。
      courseC_artist_loop1_2018: |-
        "太棒了！"

        在开始循环前，让我们用<xml><block type="draw_line_style_pattern"><title name="VALUE">默认</title></block></xml>模块来添加一些样式。
      courseC_artist_loop1_2019: |-
        "太棒了！"

        在开始循环前，让我们用<xml><block type="draw_line_style_pattern"><title name="VALUE">默认</title></block></xml>模块来添加一些样式。
      courseC_artist_loops1a: |-
        **自由发挥：** 让我们创建一些更大的，一次一步的东西！你能创造任何想要的事物，但先看看如何创造这样的！\\r
        \\r
        ![expandable](https://images.code.org/5b67ed8d878d6c2a5009eee054427fd5-image-1496711253365.05.35.png)\\r
        \\r
        用`往上跳200再下200`来让小艺术家到达游戏区域中心，然后用`画一个贴画`模块来让一只鸟出现。\\r
        \\r
        \---\\r
        \\r
        当你对做的结果满意时，点击"完成"。
      courseC_artist_loops1a_2018: |-
        **自由发挥：** 让我们创建一些更大的，一次一步的东西！\\r
        \\r
        用`往上跳200再下200`来让小艺术家到达游戏区域中心，然后用`画一个贴画`模块来让一只鸟出现。\\r
        \\r
        \---\\r
        \\r
        当你对做的结果满意时，点击"完成"。
      courseC_artist_loops1a_2019: |-
        **自由发挥：** 让我们创建一些更大的，一次一步的东西！\\r
        \\r
        用`往上跳200再下200`来让小艺术家到达游戏区域中心，然后用`画一个贴画`模块来让一只鸟出现。\\r
        \\r
        \---\\r
        \\r
        当你对做的结果满意时，点击"完成"。
      courseC_artist_loops2: |-
        ## 现在，僵尸知道了他的路，帮他沿着路挖**20像素长**的洞，来种更多的花！\\r

        每个洞应该是25像素长\\r

        -   每个洞与前一个洞的空间是25像素
      courseC_artist_loops2a: 现在, 用一个循环旋转你的鸟大约12次, 每次转30度。
      courseC_artist_loops2a_2018: 现在, 用一个循环旋转你的鸟大约12次, 每次转30度。
      courseC_artist_loops2a_2019: 现在, 用一个循环旋转你的鸟大约12次, 每次转30度。
      courseC_artist_loops3a: |-
        太有趣了！ \\r
        \\r
        现在，在鸟的右后方加一个蝙蝠贴纸，来做一张像底下一样的图片。\\r
        \_\_\_\\r
        \\r
        ![expandable](https://images.code.org/3aa37f679eabc7a5a337291db614dd98-image-1496711069351.03.49.png)
      courseC_artist_loops3a_2018: |-
        太有趣了！ \\r
        \\r
        现在，在鸟的右后方加一个蝙蝠贴纸，来做一张像底下一样的图片。\\r
        \_\_\_\\r
        \\r
        ![expandable](https://images.code.org/3aa37f679eabc7a5a337291db614dd98-image-1496711069351.03.49.png)
      courseC_artist_loops3a_2019: |-
        太有趣了！ \\r
        \\r
        现在，在鸟的右后方加一个蝙蝠贴纸，来做一张像底下一样的图片。\\r
        \_\_\_\\r
        \\r
        ![expandable](https://images.code.org/3aa37f679eabc7a5a337291db614dd98-image-1496711069351.03.49.png)
      courseC_artist_loops4a: |-
        添加一个魔窟开到代码中，以便你在标记鸟和蝙蝠之间向前跳跃75个像素。在这个关卡中，确保在你的循环内有个`跳到200超过200下来`, 这样你可以留在中心！\\r
        \_\_\_\\r
        \\r
        ![expandable](https://images.code.org/5b67ed8d878d6c2a5009eee054427fd5-image-1496711253365.05.35.png)
      courseC_artist_loops4a_2018: |-
        编辑代码，以便你在标记鸟和蝙蝠之间向前跳跃75个像素。在这个关卡中，确保在你的循环内有个`跳到200超过200下来`, 这样你可以留在中心。\\r
        \_\_\_\\r
        \\r
        ![expandable](https://images.code.org/5b67ed8d878d6c2a5009eee054427fd5-image-1496711253365.05.35.png)
      courseC_artist_loops4a_2019: |-
        编辑代码，以便你在标记鸟和蝙蝠之间向前跳跃75个像素。在这个关卡中，确保在你的循环内有个`跳到200超过200下来`, 这样你可以留在中心。\\r
        \_\_\_\\r
        \\r
        ![expandable](https://images.code.org/5b67ed8d878d6c2a5009eee054427fd5-image-1496711253365.05.35.png)
      courseC_artist_loops5: |-
        太好了! 现在是时候在里面做个围栏这样可以把动物拦在外面。\\r
        做任何你想要的栅栏！\\r
        \\r
      courseC_artist_loops5a: |-
        当你用不同的生物替换一个或两个标签时会发生什么？\\r
        \_\_\_\\r
        ![expandable](https://images.code.org/cadb5e244db64a781bc02b55f2e7ccca-image-1496711397989.08.28.png)
      courseC_artist_loops5a_2018: |-
        当你用不同的生物替换一个或两个标签时会发生什么？\\r
        \_\_\_\\r
        ![expandable](https://images.code.org/cadb5e244db64a781bc02b55f2e7ccca-image-1496711397989.08.28.png)
      courseC_artist_loops5a_2019: |-
        当你用不同的生物替换一个或两个标签时会发生什么？\\r
        \_\_\_\\r
        ![expandable](https://images.code.org/cadb5e244db64a781bc02b55f2e7ccca-image-1496711397989.08.28.png)
      courseC_artist_loops5b: |-
        当你在循环内`向前移动`，然后`向后移动`100，200，或400 像素会发生什么？ \\r

        -   在开始循环之前, 请尝试使用`设置图案`模块来制作艺术作品。\\r
            \_\_\_\\r
            ![expandable](https://images.code.org/d523de02389fd23db3029327c03b727d-image-1497039953252.24.18.png)
      courseC_artist_loops5b_2018: |-
        当你在循环内`向前移动`，然后`向后移动`100，200，或400 像素会发生什么？ \\r

        -   在开始循环之前, 请尝试使用`设置图案`模块来制作艺术作品。\\r
            \_\_\_\\r
            ![expandable](https://images.code.org/d523de02389fd23db3029327c03b727d-image-1497039953252.24.18.png)
      courseC_artist_loops5b_2019: |-
        当你在循环内`向前移动`，然后`向后移动`100，200，或400 像素会发生什么？ \\r

        -   在开始循环之前, 请尝试使用`设置图案`模块来制作艺术作品。\\r
            \_\_\_\\r
            ![expandable](https://images.code.org/d523de02389fd23db3029327c03b727d-image-1497039953252.24.18.png)
      courseC_artist_loops6: |-
        僵尸应该在花园里放什么？\\r
        \\r
        在篱笆里面画任何你喜欢的东西。 你想要一些花还是一些虫子？\\r

        -   (请参阅提示以了解更多建议。）\* \\r
            \\r
            \\r
      courseC_artist_loops6a: |-
        在你想要的循环中的任意位置添加第三个标签！现在它看起来像什么？\\r

        -   更改画笔上的图案以进行更多的变化！\\r
            \\r
            \_\_\_\\r
            \\r
            ![expandable](https://images.code.org/b0f999ef4b9ab6bd9780e9fbac07dc8d-image-1497040845047.39.55.png)
      courseC_artist_loops6a_2018: |-
        在你想要的循环中的任意位置添加第三个标签！现在它看起来像什么？\\r

        -   更改画笔上的图案以进行更多的变化！\\r
            \\r
            \_\_\_\\r
            \\r
            ![expandable](https://images.code.org/b0f999ef4b9ab6bd9780e9fbac07dc8d-image-1497040845047.39.55.png)
      courseC_artist_loops6a_2019: |-
        在你想要的循环中的任意位置添加第三个标签！现在它看起来像什么？\\r

        -   更改画笔上的图案以进行更多的变化！\\r
            \\r
            \_\_\_\\r
            \\r
            ![expandable](https://images.code.org/b0f999ef4b9ab6bd9780e9fbac07dc8d-image-1497040845047.39.55.png)
      courseC_artist_loops7a: |-
        尝试更改`重复`循环以运行不同的次数。 你在一个完整的圆圈内要转多远才能绕完一圈？\\r

        -   试着改变你旋转的次数。 \\r
        -   尝试转弯6次，每次60度\\r
        -   尝试转18次，每次20度\\r
            \_\_\_\\r
            这张图片使用的是海盗，忍者和长颈鹿。他们循环了18次，每次转弯20度。\\r
            \\r
            ![expandable](https://images.code.org/99411638acb44e8a7ba5b9696fe11fa4-image-1496714175039.53.24.png)
      courseC_artist_loops7a_2018: |-
        尝试更改`重复`循环以运行不同的次数。 你在一个完整的圆圈内要转多远才能绕完一圈？\\r

        -   试着改变你旋转的次数。 \\r
        -   尝试转弯6次，每次60度\\r
        -   尝试转18次，每次20度\\r
            \_\_\_\\r
            这张图片使用的是海盗，忍者和长颈鹿。他们循环了18次，每次转弯20度。\\r
            \\r
            ![expandable](https://images.code.org/99411638acb44e8a7ba5b9696fe11fa4-image-1496714175039.53.24.png)
      courseC_artist_loops7a_2019: |-
        尝试更改`重复`循环以运行不同的次数。 你在一个完整的圆圈内要转多远才能绕完一圈？\\r

        -   试着改变你旋转的次数。 \\r
        -   尝试转弯6次，每次60度\\r
        -   尝试转18次，每次20度\\r
            \_\_\_\\r
            这张图片使用的是海盗，忍者和长颈鹿。他们循环了18次，每次转弯20度。\\r
            \\r
            ![expandable](https://images.code.org/99411638acb44e8a7ba5b9696fe11fa4-image-1496714175039.53.24.png)
      courseC_artist_loops8a: "现在自己做点什么吧。当你制作两个不同的贴纸圈时会发生什么？\\\\r \n\\_\\_\\_\\\\r\n需要一个点子吗？试着做一个像这样的设计。\\\\r\n\\\\r\n![expandable](https://images.code.org/d8e0ad6294aa5e04e4aab56631a6b50b-image-1496714582863.02.14.png)"
      courseC_artist_loops8a_2018: "现在自己做点什么吧。当你制作两个不同的贴纸圈时会发生什么？\\\\r \n\\_\\_\\_\\\\r\n需要一个点子吗？试着做一个像这样的设计。\\\\r\n\\\\r\n![expandable](https://images.code.org/d8e0ad6294aa5e04e4aab56631a6b50b-image-1496714582863.02.14.png)"
      courseC_artist_loops8a_2019: "现在自己做点什么吧。当你制作两个不同的贴纸圈时会发生什么？\\\\r \n\\_\\_\\_\\\\r\n需要一个点子吗？试着做一个像这样的设计。\\\\r\n\\\\r\n![expandable](https://images.code.org/d8e0ad6294aa5e04e4aab56631a6b50b-image-1496714582863.02.14.png)"
      courseC_artist_loopsPre1a: |-
        现在, 将此代码放入一个`重复`模块中, 并循环**6**次。\\r

        -   请注意，我们在循环代码的末尾添加了一个60度的转弯，以获得完整的旋转。
      courseC_artist_loopsPre1a_2018: |-
        现在, 将此代码放入一个`重复`模块中, 并循环**6**次。\\r

        -   请注意，我们在循环代码的末尾添加了一个60度的转弯，以获得完整的旋转。
      courseC_artist_loopsPre1a_2019: |-
        现在, 将此代码放入一个`重复`模块中, 并循环**6**次。\\r

        -   请注意，我们在循环代码的末尾添加了一个60度的转弯，以获得完整的旋转。
      courseC_artist_loopsPrePre1a: |-
        使用<xml><block type="jump_to_xy"
        id="callMe"><title name="XPOS">200</title><title name="YPOS">200</title></block></xml>
        模块把艺术家带到游戏区的中心。\\r
        然后用 <xml><block type="draw_move_by_constant"><title
        name="DIR">向前移动</title><title name="VALUE">50</title></block></xml>
        模块来画一条50 像素的线。
      courseC_artist_loopsPrePre1a_2018: "### 艺术家在错误的点上！\n\n使用<xml><block type=\"jump_to_xy\" id=\"callMe\"><title name=\"XPOS\">200</title><title name=\"YPOS\">200</title></block></xml>模块把艺术家带到游戏区的中心。 \n然后用 <xml><block type=\"draw_move_by_constant\"><title\nname=\"DIR\">向前移动</title><title name=\"VALUE\">50</title></block></xml>\n模块来画一条50 像素的线。"
      courseC_artist_loopsPrePre1a_2019: "### 艺术家在错误的点上！\n\n使用<xml><block type=\"jump_to_xy\" id=\"callMe\"><title name=\"XPOS\">200</title><title name=\"YPOS\">200</title></block></xml>模块把艺术家带到游戏区的中心。 \n然后用 <xml><block type=\"draw_move_by_constant\"><title\nname=\"DIR\">向前移动</title><title name=\"VALUE\">50</title></block></xml>\n模块来画一条50 像素的线。"
      courseC_artist_loopsTemplateA: '使用 `跳到200超过200下来`，让艺术家来到游戏区的中心, 然后使用`画一个标签`模块来使一只鸟出现。 '
      courseC_artist_loopsTemplateA_2018: '使用 `跳到200超过200下来`，让艺术家来到游戏区的中心, 然后使用`画一个标签`模块来使一只鸟出现。 '
      courseC_artist_loopsTemplateA_2019: '使用 `跳到200超过200下来`，让艺术家来到游戏区的中心, 然后使用`画一个标签`模块来使一只鸟出现。 '
      courseC_artist_prog1: |-
        _"嗨, 我是个艺术家。你可以编写代码来让我画几乎任何东西。“_ \\r
        \\r
        摆弄工具箱中的模块看看它们是做什么的！
      courseC_artist_prog1_2018: |-
        _"嗨, 我是个艺术家。你可以编写代码来让我画几乎任何东西。“_ \\r
        \\r
        摆弄工具箱中的模块看看它们是做什么的！
      courseC_artist_prog1_2019: |-
        _"嗨, 我是个艺术家。你可以编写代码来让我画几乎任何东西。“_ \\r
        \\r
        摆弄工具箱中的模块看看它们是做什么的！
      courseC_artist_prog2: |-
        -   "让我们为我的宠物怪兽做一个笼子!"\* \\r
            \\r
            将模块拖到屏幕上, 让艺术家在图片中的灰色线条上绘画。 \\r
            (每行100像素长)
      courseC_artist_prog2_2018: |-
        -   "让我们为我的宠物怪兽做一个笼子!"\* \\r
            \\r
            将模块拖到屏幕上, 让艺术家在图片中的灰色线条上绘画。 \\r
            (每行100像素长)
      courseC_artist_prog2_2019: |-
        -   "让我们为我的宠物怪兽做一个笼子!"\* \\r
            \\r
            将模块拖到屏幕上, 让艺术家在图片中的灰色线条上绘画。 \\r
            (每行100像素长)
      courseC_artist_prog3: |-
        _"这艘宇宙飞船需要一扇窗户!"_ \\r
        \\r
        正方形内的每条边是100像素，所有的角度都是90度。
      courseC_artist_prog3_2018: |-
        _"这艘宇宙飞船需要一扇窗户!"_ \\r
        \\r
        正方形内的每条边是100像素，所有的角度都是90度。
      courseC_artist_prog3_2019: |-
        _"这艘宇宙飞船需要一扇窗户!"_ \\r
        \\r
        正方形内的每条边是100像素，所有的角度都是90度。
      courseC_artist_prog4: |-
        _"哦，不! 斯黛拉的宠物外星人刚刚飞走了! 让我们帮助女宇航员！”_\\r
        \\r
        完成斯黛拉的火箭，这样她就可以追逐她的宠物。 \\r
        (三角形的每一边都是100像素长, 有120度的外角。)
      courseC_artist_prog4_2018: |-
        _"哦，不! 斯黛拉的宠物外星人刚刚飞走了! 让我们帮助女宇航员！”_\\r
        \\r
        完成斯黛拉的火箭，这样她就可以追逐她的宠物。 \\r
        (三角形的每一边都是100像素长, 有120度的外角。)
      courseC_artist_prog4_2019: |-
        _"哦，不! 斯黛拉的宠物外星人刚刚飞走了! 让我们帮助女宇航员！”_\\r
        \\r
        完成斯黛拉的火箭，这样她就可以追逐她的宠物。 \\r
        (三角形的每一边都是100像素长, 有120度的外角。)
      courseC_artist_prog5: |-
        _"也许我们应该为我们的每个宠物做一个标签, 以防他们走丢了!"_ \\r
        \\r
        在外部绘制长方形来完成此标签。 \\r
        (长边分别为200像素, 短边每个都是100像素)
      courseC_artist_prog5_2018: |-
        _"也许我们应该为我们的每个宠物做一个标签, 以防他们走丢了!"_ \\r
        \\r
        在外部绘制长方形来完成此标签。 \\r
        (长边分别为200像素, 短边每个都是100像素)
      courseC_artist_prog5_2019: |-
        _"也许我们应该为我们的每个宠物做一个标签, 以防他们走丢了!"_ \\r
        \\r
        在外部绘制长方形来完成此标签。 \\r
        (长边分别为200像素, 短边每个都是100像素)
      courseC_artist_prog6: |-
        _"现在为贝儿做一个标签!“_ \\r
        \\r
        绘制200像素边长的菱形。
      courseC_artist_prog6_2018: |-
        _"现在为贝儿做一个标签!“_ \\r
        \\r
        绘制200像素边长的菱形。
      courseC_artist_prog6_2019: |-
        _"现在为贝儿做一个标签!“_ \\r
        \\r
        绘制200像素边长的菱形。
      courseC_artist_prog7: |-
        \*\* 挑战: \*\* 这个标签是特别的一个！\\r
        \\r
        你能想出怎么画外框吗？ \\r
        (长边是150像素, 每个短边都是75像素。）
      courseC_artist_prog7_2018: |-
        \*\* 挑战: \*\* 这个标签是特别的一个！\\r
        \\r
        你能想出怎么画外框吗？ \\r
        (长边是150像素, 每个短边都是75像素。）
      courseC_artist_prog7_2019: |-
        \*\* 挑战: \*\* 这个标签是特别的一个！\\r
        \\r
        你能想出怎么画外框吗？ \\r
        (长边是150像素, 每个短边都是75像素。）
      courseC_artist_prog8: |-
        再来一个标签。这是圆周率的一个三角形。 \\r
        (每边为150像素)
      courseC_artist_prog8_2018: |-
        再来一个标签。这是圆周率的一个三角形。 \\r
        (每边为150像素)
      courseC_artist_prog8_2019: |-
        再来一个标签。这是圆周率的一个三角形。 \\r
        (每边为150像素)
      courseC_artist_prog_challenge1-doghouse: 让我们为乔治建个狗屋吧!
      courseC_artist_prog_challenge1: 为每一个动物绘制房间。有许多不同的方法来通过这个关卡, 所以让我们有一些乐趣！每个正方形的边长为100个像素。
      courseC_artist_prog_challenge1_2018: 为每一个动物绘制房间。有许多不同的方法来通过这个关卡, 所以让我们有一些乐趣！每个正方形的边长为100个像素。
      courseC_artist_prog_challenge1_2019: 为每一个动物绘制房间。有许多不同的方法来通过这个关卡, 所以让我们有一些乐趣！每个正方形的边长为100个像素。
      courseC_artist_prog_challenge2: "-   帮我在这条路上涂上黄线!\\*"
      courseC_artist_prog_challenge2a: |-
        _"帮我在这条路上画黄线!"_\\r
        \\r
        三条线段的长度为150、100和200像素！
      courseC_artist_prog_challenge2a_2018: |-
        _"帮我在这条路上画黄线!"_\\r
        \\r
        三条线段的长度为150、100和200像素！
      courseC_artist_prog_challenge2a_2019: |-
        _"帮我在这条路上画黄线!"_\\r
        \\r
        三条线段的长度为150、100和200像素！
      courseC_collector_loops_challenge2: |-
        -   "让我们寻宝吧!"\* \\r
            \\r
            帮助收集者至少得到 \*\* 5 \*\*件宝物。
      courseC_collector_loops_challenge2_2018: |-
        -   "让我们寻宝吧!"\* \\r
            \\r
            帮助收集者至少得到 \*\* 5 \*\*件宝物。
      courseC_collector_loops_challenge2_2019: |-
        -   "让我们寻宝吧!"\* \\r
            \\r
            帮助收集者至少得到 \*\* 5 \*\*件宝物。
      courseC_collector_prog1: |-
        \*\* 自由发挥: \*\* 这是冒险家罗瑞尔！四处移动她，并获得尽可能多的宝藏。使用`收集`模块来捡起宝藏！\\r
        \\r
        将模块拖到工作区中，并尝试找出如何获取宝藏。 获得至少一种宝物来通过此关卡。
      courseC_collector_prog1_2018: |-
        \*\* 自由发挥: \*\* 这是冒险家罗瑞尔！四处移动她，并获得尽可能多的宝藏。使用`收集`模块来捡起宝藏！\\r
        \\r
        将模块拖到工作区中，并尝试找出如何获取宝藏。 获得至少一种宝物来通过此关卡。
      courseC_collector_prog1_2019: |-
        \*\* 自由发挥: \*\* 这是冒险家罗瑞尔！四处移动她，并获得尽可能多的宝藏。使用`收集`模块来捡起宝藏！\\r
        \\r
        将模块拖到工作区中，并尝试找出如何获取宝藏。 获得至少一种宝物来通过此关卡。
      courseC_collector_prog2: 把罗瑞尔移到宝藏那里，然后使用 <xml><block type="collector_collect"/></xml> 把它捡起来。
      courseC_collector_prog2_2018: 把罗瑞尔移到宝藏那里，然后使用 <xml><block type="collector_collect"/></xml> 把它捡起来。
      courseC_collector_prog2_2019: 把罗瑞尔移到宝藏那里，然后使用 <xml><block type="collector_collect"/></xml> 把它捡起来。
      courseC_collector_prog3: |-
        _"顺序很重要！"_\\r
        \\r
        你需要的模块已经在工作区了，但还没有连起来。\\r
        \\r
        命令这些模块来收集所有的宝藏并通过此关。
      courseC_collector_prog3_2018: |-
        _"顺序很重要！"_\\r
        \\r
        你需要的模块已经在工作区了，但还没有连起来。\\r
        \\r
        命令这些模块来收集所有的宝藏并通过此关。
      courseC_collector_prog3_2019: |-
        _"顺序很重要！"_\\r
        \\r
        你需要的模块已经在工作区了，但还没有连起来。\\r
        \\r
        命令这些模块来收集所有的宝藏并通过此关。
      courseC_collector_prog4: |-
        _"顺序很重要！"_\\r
        \\r
        你需要的模块已经在工作区了，但还没有连起来。\\r
        \\r
        将这些模块按顺序连接起来，来收集所有的宝藏并通过这关。
      courseC_collector_prog4_2018: |-
        _"顺序很重要！"_\\r
        \\r
        你需要的模块已经在工作区了，但还没有连起来。\\r
        \\r
        将这些模块按顺序连接起来，来收集所有的宝藏并通过这关。
      courseC_collector_prog4_2019: |-
        _"顺序很重要！"_\\r
        \\r
        你需要的模块已经在工作区了，但还没有连起来。\\r
        \\r
        将这些模块按顺序连接起来，来收集所有的宝藏并通过这关。
      courseC_collector_prog5: |-
        _"帮我收集每个宝藏！"_\\r
        \\r
        这些模块的顺序错了。你能修好它们吗？
      courseC_collector_prog5_2018: |-
        _"帮我收集每个宝藏！"_\\r
        \\r
        这些模块的顺序错了。你能修好它们吗？
      courseC_collector_prog5_2019: |-
        _"帮我收集每个宝藏！"_\\r
        \\r
        这些模块的顺序错了。你能修好它们吗？
      courseC_collector_prog6: |-
        \*"帮我收集所有的宝藏！"\\r
        \\r
        这些模块的顺序错了。重新排列它们来收集所有的宝藏。
      courseC_collector_prog6_2018: |-
        \*"帮我收集所有的宝藏！"\\r
        \\r
        这些模块的顺序错了。重新排列它们来收集所有的宝藏。
      courseC_collector_prog6_2019: |-
        \*"帮我收集所有的宝藏！"\\r
        \\r
        这些模块的顺序错了。重新排列它们来收集所有的宝藏。
      courseC_collector_prog7: |-
        **挑战：** _这里怎么了？”_\\r
        \\r
        即使我们将顺序都排好了，还有一些东西缺失。\\r
        使用工具箱中的模块来收集所有的宝藏。
      courseC_collector_prog7_2018: |-
        **挑战：** _这里怎么了？”_\\r
        \\r
        即使我们将顺序都排好了，还有一些东西缺失。\\r
        使用工具箱中的模块来收集所有的宝藏。
      courseC_collector_prog7_2019: |-
        **挑战：** _这里怎么了？”_\\r
        \\r
        即使我们将顺序都排好了，还有一些东西缺失。\\r
        使用工具箱中的模块来收集所有的宝藏。
      courseC_collector_prog8: _"继续保持良好的工作! 帮我收集所有的宝藏。“_
      courseC_collector_prog8_2018: _"继续保持良好的工作! 帮我收集所有的宝藏。“_
      courseC_collector_prog8_2019: _"继续保持良好的工作! 帮我收集所有的宝藏。“_
      courseC_collector_prog9: _"让我们得到所有的宝藏!_
      courseC_collector_prog9_2018: _"让我们得到所有的宝藏!_
      courseC_collector_prog9_2019: _"让我们得到所有的宝藏!_
      courseC_collector_progA: 帮助罗瑞尔收集所有的宝藏。
      courseC_collector_progB: |-
        快要完成了！\\r
        \\r
        收集尽可能多的金币来完成这个阶段！
      courseC_collector_prog_challenge2: 在此洞穴中有20件宝藏。收集至少**10** 来完成这一挑战！
      courseC_collector_prog_challenge2_2018: 在此洞穴中有20件宝藏。收集至少**10** 来完成这一挑战！
      courseC_collector_prog_challenge2_2019: 在此洞穴中有20件宝藏。收集至少**10** 来完成这一挑战！
      courseC_flappy_events1: |-
        将`拍打正常数量`模块附加到`当点击时`事件, 然后按 "运行"。\\r
        \\r
        \---\\r
        \\r
        单击或点击播放空间，将像素鸟移动到目标处。
      courseC_flappy_events10: |-
        创建你自己的像素鸟游戏！\\r
        \\r
        你可以改变视觉和规则... 甚至重力！\\r
        当你完成后, 点击 "完成" 分享到朋友们的手机上。
      courseC_flappy_events10_2018: |-
        创建你自己的像素鸟游戏！\\r
        \\r
        你可以改变视觉和规则... 甚至重力！\\r
        当你完成后, 点击 "完成" 分享到朋友们的手机上。
      courseC_flappy_events10_2019: |-
        创建你自己的像素鸟游戏！\\r
        \\r
        你可以改变视觉和规则... 甚至重力！\\r
        当你完成后, 点击 "完成" 分享到朋友们的手机上。
      courseC_flappy_events1_2018: |-
        将`拍打正常数量`模块附加到`当点击时`事件, 然后按 "运行"。\\r
        \\r
        \---\\r
        \\r
        单击或点击播放空间，将像素鸟移动到目标处。
      courseC_flappy_events1_2019: |-
        将`拍打正常数量`模块附加到`当点击时`事件, 然后按 "运行"。\\r
        \\r
        \---\\r
        \\r
        单击或点击播放空间，将像素鸟移动到目标处。
      courseC_flappy_events2: |-
        `当运行时`事件允许你在游戏启动后立即运行代码。 \\r
        \\r
        尝试添加在按下 "运行" 按钮时设置级别速度的模块。\\r
        \\r
        \---\\r
        \\r
        播放游戏并拍打目标继续。
      courseC_flappy_events2_2018: |-
        `当运行时`事件允许你在游戏启动后立即运行代码。 \\r
        \\r
        尝试添加在按下 "运行" 按钮时设置级别速度的模块。\\r
        \\r
        \---\\r
        \\r
        播放游戏并拍打目标继续。
      courseC_flappy_events2_2019: |-
        `当运行时`事件允许你在游戏启动后立即运行代码。 \\r
        \\r
        尝试添加在按下 "运行" 按钮时设置级别速度的模块。\\r
        \\r
        \---\\r
        \\r
        播放游戏并拍打目标继续。
      courseC_flappy_events3: |-
        现在我们已经增加了地面。\\r
        \\r
        将`结束游戏`模块附加到`当命中地面`事件时。\\r
        \\r
        \---\\r
        玩游戏, 把鸟撞向地面继续。
      courseC_flappy_events3_2018: |-
        现在我们已经增加了地面。\\r
        \\r
        将`结束游戏`模块附加到`当命中地面`事件时。\\r
        \\r
        \---\\r
        玩游戏, 把鸟撞向地面继续。
      courseC_flappy_events3_2019: |-
        现在我们已经增加了地面。\\r
        \\r
        将`结束游戏`模块附加到`当命中地面`事件时。\\r
        \\r
        \---\\r
        玩游戏, 把鸟撞向地面继续。
      courseC_flappy_events4: |-
        像素鸟会飞过障碍，除非你写代码来让它能撞上。\\r
        \\r
        附加一个模块到`当碰到障碍时`时间，在像素鸟碰到第一个管道时，让游戏结束。
      courseC_flappy_events4_2018: |-
        像素鸟会飞过障碍，除非你写代码来让它能撞上。\\r
        \\r
        附加一个模块到`当碰到障碍时`时间，在像素鸟碰到第一个管道时，让游戏结束。
      courseC_flappy_events4_2019: |-
        像素鸟会飞过障碍，除非你写代码来让它能撞上。\\r
        \\r
        附加一个模块到`当碰到障碍时`时间，在像素鸟碰到第一个管道时，让游戏结束。
      courseC_flappy_events5: |-
        我们已经增加了分数板来统计像素鸟通过的障碍数。\\r
        \\r
        增加一个模块到`当通过了一个障碍`时间来得一分，然后点击"运行"让它飞过第一组管道。
      courseC_flappy_events5_2018: |-
        我们已经增加了分数板来统计像素鸟通过的障碍数。\\r
        \\r
        增加一个模块到`当通过了一个障碍`时间来得一分，然后点击"运行"让它飞过第一组管道。
      courseC_flappy_events5_2019: |-
        我们已经增加了分数板来统计像素鸟通过的障碍数。\\r
        \\r
        增加一个模块到`当通过了一个障碍`时间来得一分，然后点击"运行"让它飞过第一组管道。
      courseC_flappy_events6: |-
        点击`拍打正常数量`模块中的下箭头，来选择一个不同的拍打力量。\\r
        \\r
        看看把像素鸟的拍打每次改小或改大后，你还能否一直得分。
      courseC_flappy_events6_2018: |-
        点击`拍打正常数量`模块中的下箭头，来选择一个不同的拍打力量。\\r
        \\r
        看看把像素鸟的拍打每次改小或改大后，你还能否一直得分。
      courseC_flappy_events6_2019: |-
        点击`拍打正常数量`模块中的下箭头，来选择一个不同的拍打力量。\\r
        \\r
        看看把像素鸟的拍打每次改小或改大后，你还能否一直得分。
      courseC_flappy_events7: 接下来, 尝试通过将一个模块附加到 "运行时" 事件来更改场景。
      courseC_flappy_events7_2018: 接下来, 尝试通过将一个模块附加到 "运行时" 事件来更改场景。
      courseC_flappy_events7_2019: 接下来, 尝试通过将一个模块附加到 "运行时" 事件来更改场景。
      courseC_flappy_events8: |-
        不只在游戏开始时，你能在任何事件下设置背景。\\r
        \\r
        试着当其它时间发生时，设置一个**随机**的场景...例如，当通过一个障碍。
      courseC_flappy_events8_2018: |-
        不只在游戏开始时，你能在任何事件下设置背景。\\r
        \\r
        试着当其它时间发生时，设置一个**随机**的场景...例如，当通过一个障碍。
      courseC_flappy_events8_2019: |-
        不只在游戏开始时，你能在任何事件下设置背景。\\r
        \\r
        试着当其它时间发生时，设置一个**随机**的场景...例如，当通过一个障碍。
      courseC_flappy_events9: 把事情混合起来, 在像素鸟击倒障碍物的时候不是让游戏停止，试着把分数归零。
      courseC_flappy_events9_2018: 把事情混合起来, 在像素鸟击倒障碍物的时候不是让游戏停止，试着把分数归零。
      courseC_flappy_events9_2019: 把事情混合起来, 在像素鸟击倒障碍物的时候不是让游戏停止，试着把分数归零。
      courseC_harvester_loops1: |-
        循环不仅能重复移动。\\r
        \\r
        用循环来收集所有4个南瓜。
      courseC_harvester_loops10: 收集所有玉米和南瓜。
      courseC_harvester_loops10_2018: 收集所有玉米和南瓜。
      courseC_harvester_loops10_2019: 收集所有玉米和南瓜。
      courseC_harvester_loops11: 收集所有玉米和南瓜。
      courseC_harvester_loops11_2018: 收集所有玉米和南瓜。
      courseC_harvester_loops11_2019: 收集所有玉米和南瓜。
      courseC_harvester_loops1_2018: |-
        循环不仅能重复移动。\\r
        \\r
        用循环来收集所有4个南瓜。
      courseC_harvester_loops1_2019: |-
        循环不仅能重复移动。\\r
        \\r
        用循环来收集所有4个南瓜。
      courseC_harvester_loops2: 你能混合两个不同的循环来朝着南瓜移动，并收集它们吗？
      courseC_harvester_loops2_2018: 你能混合两个不同的循环来朝着南瓜移动，并收集它们吗？
      courseC_harvester_loops2_2019: 你能混合两个不同的循环来朝着南瓜移动，并收集它们吗？
      courseC_harvester_loops3: 收集所有南瓜。
      courseC_harvester_loops3_2018: 收集所有南瓜。
      courseC_harvester_loops3_2019: 收集所有南瓜。
      courseC_harvester_loops4: |-
        现在，也有玉米在生长了！\\r
        \\r
        收集所有的玉米和南瓜。
      courseC_harvester_loops4_2018: |-
        现在，也有玉米在生长了！\\r
        \\r
        收集所有的玉米和南瓜。
      courseC_harvester_loops4_2019: |-
        现在，也有玉米在生长了！\\r
        \\r
        收集所有的玉米和南瓜。
      courseC_harvester_loops5: 收集所有玉米和南瓜。
      courseC_harvester_loops5_2018: 收集所有玉米和南瓜。
      courseC_harvester_loops5_2019: 收集所有玉米和南瓜。
      courseC_harvester_loops6: 收集所有玉米和南瓜。
      courseC_harvester_loops6_2018: 收集所有玉米和南瓜。
      courseC_harvester_loops6_2019: 收集所有玉米和南瓜。
      courseC_harvester_loops7: 收集所有玉米和南瓜。
      courseC_harvester_loops7_2018: 收集所有玉米和南瓜。
      courseC_harvester_loops7_2019: 收集所有玉米和南瓜。
      courseC_harvester_loops8: |-
        **挑战：**收集所有的玉米和南瓜。\\r
        \\r
        你可以用任何方法完成这个挑战，但要么会做很多工作，要么多思考一下！
      courseC_harvester_loops8_2018: |-
        **挑战：**收集所有的玉米和南瓜。\\r
        \\r
        你可以用任何方法完成这个挑战，但要么会做很多工作，要么多思考一下！
      courseC_harvester_loops8_2019: |-
        **挑战：**收集所有的玉米和南瓜。\\r
        \\r
        你可以用任何方法完成这个挑战，但要么会做很多工作，要么多思考一下！
      courseC_harvester_loops9: 收集所有玉米和南瓜。
      courseC_harvester_loops9_2018: 收集所有玉米和南瓜。
      courseC_harvester_loops9_2019: 收集所有玉米和南瓜。
      courseC_harvester_loops_challenge1: 收集所有的玉米。
      courseC_harvester_loops_challenge2: 收集所有的莴苣。避开树木和田野!
      courseC_harvester_loops_challenge2_2018: 收集所有的莴苣。避开树木和田野!
      courseC_harvester_loops_challenge2_2019: 收集所有的莴苣。避开树木和田野!
      courseC_harvester_loops_forVid: 收集所有玉米和南瓜。
      courseC_maze_debugging1: |-
        这个代码不太正确！\\r
        \\r
        修复代码来帮助斯奎特获得橡子。
      courseC_maze_debugging1_2018: |-
        这个代码不太正确！\\r
        \\r
        修复代码来帮助斯奎特获得橡子。
      courseC_maze_debugging1_2019: |-
        这个代码不太正确！\\r
        \\r
        修复代码来帮助斯奎特获得橡子。
      courseC_maze_debugging3: |-
        有些事情不大对。
        \\r
        \\r
        移除模块来让斯奎特到达橡子！
      courseC_maze_debugging3_2018: |-
        有些事情不大对。
        \\r
        \\r
        移除模块来让斯奎特到达橡子！
      courseC_maze_debugging3_2019: |-
        有些事情不大对。
        \\r
        \\r
        移除模块来让斯奎特到达橡子！
      courseC_maze_debugging_challenge2: 如果斯奎特转得太频繁，他可能会头晕！只用4个`转向`命令来帮它拿到橡子。
      courseC_maze_debugging_challenge2_2018: 如果斯奎特转得太频繁，他可能会头晕！只用4个`转向`命令来帮它拿到橡子。
      courseC_maze_debugging_challenge2_2019: 如果斯奎特转得太频繁，他可能会头晕！只用4个`转向`命令来帮它拿到橡子。
      courseC_maze_loops2: |-
        通过`重复`模块，你能一次次循环代码。\\r
        \\r
        你能创建一个`重复`循环，并在里面只用一个`向前移动`模块来让小鸟到达猪吗？
      courseC_maze_loops2_predict1: |-
        一个神奇的模块出现了！\\r
        用`重复`模块，你能一次次的循环代码。\\r
        \\r
        你能创建一个`重复`循环，并在里面只用一个`向前移动`模块来让小鸟到达猪吗？
      courseC_maze_loops3: |-
        _"帮我到猪哪里！"_\\r
        \\r
        通过创建一个循环来通关！
      courseC_maze_loops4: 在这一关中，两个`重复`循环会用最少的模块帮你将小鸟带到猪那里！
      courseC_maze_loops5: _"让我用最快的方法到达猪那里！"_
      courseC_maze_loops6: |-
        _"这只猪弄乱了我的羽毛！"_\\r
        \\r
        循环里能放不只一个模块！你能循环这个序列吗？
      courseC_maze_loops7: |-
        _"让我到猪那里！"_\\r
        \\r
        用你在别的关卡学到的知识！
      courseC_maze_loops8: "**挑战：**将前几关的主意组合起来，完成这一关。"
      courseC_maze_loops_challenge2: 让我们使用循环来寻找宝藏! 通过找出此代码错误来帮助收集者得到所有的宝藏!
      courseC_maze_programming1: 对于这个关卡, 把所有的方块拖在一起, 并点击 "运行" 开始!
      courseC_maze_programming1_2018: 对于这个关卡, 把所有的方块拖在一起, 并点击 "运行" 开始!
      courseC_maze_programming1_2019: 对于这个关卡, 把所有的方块拖在一起, 并点击 "运行" 开始!
      courseC_maze_programming2: |-
        从工具箱中拖出一个额外的<xml><block
        type="maze_moveForward"/></xml>模块来完成你的代码。
      courseC_maze_programming2_2018: |-
        从工具箱中拖出一个额外的<xml><block
        type="maze_moveForward"/></xml>模块来完成你的代码。
      courseC_maze_programming2_2019: |-
        从工具箱中拖出一个额外的<xml><block
        type="maze_moveForward"/></xml>模块来完成你的代码。
      courseC_maze_programming3: |-
        _"这只猪把我的羽毛弄皱了。"_\\r
        \\r
        这里有一个额外的模块会让小鸟坠落。\\r
        将它从灰色的模块中取下，并拖回工具箱来扔掉。
      courseC_maze_programming3_2018: |-
        _"这只猪把我的羽毛弄皱了。"_\\r
        \\r
        这里有一个额外的模块会让小鸟坠落。\\r
        将它从灰色的模块中取下，并拖回工具箱来扔掉。
      courseC_maze_programming3_2019: |-
        _"这只猪把我的羽毛弄皱了。"_\\r
        \\r
        这里有一个额外的模块会让小鸟坠落。\\r
        将它从灰色的模块中取下，并拖回工具箱来扔掉。
      courseC_maze_programming4: |-
        _"沿着这条路带我去找那只笨猪。"_\\r
        \\r
        躲开 TNT 炸药，不然我的羽毛就要被炸飞了！
      courseC_maze_programming4_2018: |-
        _"沿着这条路带我去找那只笨猪。"_\\r
        \\r
        躲开 TNT 炸药，不然我的羽毛就要被炸飞了！
      courseC_maze_programming4_2019: |-
        _"沿着这条路带我去找那只笨猪。"_\\r
        \\r
        躲开 TNT 炸药，不然我的羽毛就要被炸飞了！
      courseC_maze_programming5: |-
        _"沿着这条路，让我到猪那里！"_\\r
        \\r
        躲开TNT炸药。
      courseC_maze_programming5_2018: |-
        _"沿着这条路，让我到猪那里！"_\\r
        \\r
        躲开TNT炸药。
      courseC_maze_programming5_2019: |-
        _"沿着这条路，让我到猪那里！"_\\r
        \\r
        躲开TNT炸药。
      courseC_maze_programming6: |-
        _"保持冷静，帮我找到那只坏猪。否则，我会生气的！"_\\r
        \\r
        让小鸟到达坏猪，还要躲开TNT炸药。
      courseC_maze_programming6_2018: |-
        _"保持冷静，帮我找到那只坏猪。否则，我会生气的！"_\\r
        \\r
        让小鸟到达坏猪，还要躲开TNT炸药。
      courseC_maze_programming6_2019: |-
        _"保持冷静，帮我找到那只坏猪。否则，我会生气的！"_\\r
        \\r
        让小鸟到达坏猪，还要躲开TNT炸药。
      courseC_maze_programming7: |-
        _"该生气了！"_\\r
        \\r
        **挑战：**
        这个代码有很多缺陷。你需要移除一些模块，并加上一些。
      courseC_maze_programming7_2018: |-
        _"该生气了！"_\\r
        \\r
        **挑战：**
        这个代码有很多缺陷。你需要移除一些模块，并加上一些。
      courseC_maze_programming7_2019: |-
        _"该生气了！"_\\r
        \\r
        **挑战：**
        这个代码有很多缺陷。你需要移除一些模块，并加上一些。
      courseC_maze_programming8: _"保持冷静，帮我找到那只坏猪。"_
      courseC_maze_programming8_2018: _"保持冷静，帮我找到那只坏猪。"_
      courseC_maze_programming8_2019: _"保持冷静，帮我找到那只坏猪。"_
      courseC_maze_programming8_predict1: _"保持冷静，帮我找到那只坏猪。"_
      courseC_maze_programming8_predict1_2018: _"保持冷静，帮我找到那只坏猪。"_
      courseC_maze_programming8_predict1_2019: _"保持冷静，帮我找到那只坏猪。"_
      courseC_maze_programming9: _"现在，用任何方法让我偷偷到达猪那里！"_
      courseC_maze_programming9_2018: _"现在，用任何方法让我偷偷到达猪那里！"_
      courseC_maze_programming9_2019: _"现在，用任何方法让我偷偷到达猪那里！"_
      courseC_maze_programming_challenge1: '小鸟需要你的帮助！猪躲起来了，目标是找到它。 '
      courseC_maze_programming_challenge1_2018: '小鸟需要你的帮助！猪躲起来了，目标是找到它。 '
      courseC_maze_programming_challenge1_2019: '小鸟需要你的帮助！猪躲起来了，目标是找到它。 '
      courseC_maze_programming_challenge2: 有时, 解决同一问题的方法不止一种。有时候向后走比前进快!
      courseC_maze_programming_challenge2_2018: 有时, 解决同一问题的方法不止一种。有时候向后走比前进快!
      courseC_maze_programming_challenge2_2019: 有时, 解决同一问题的方法不止一种。有时候向后走比前进快!
      courseC_playLab_embedded: |-
        ## 这是一个给你玩的游戏！\\r

        要获胜，让企鹅跑到章鱼那里。用箭头键来到处移动企鹅。\\r
        \\r
        完成后，你会学到如何制作这个游戏！
      courseC_puppy_loops8: "**挑战：**将前几关的主意组合起来，完成这一关。"
      courseC_puppy_loops8courseC_maze_loops8: "**挑战：**将前几关的主意组合起来，完成这一关。"
      courseC_starWars_loops1: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8，去拿到那块废金属！"_ \\r
        \\r
        用5个一样的模块来拿到废金属。废金属长这样：![](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)
      courseC_starWars_loops10: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\\r

        _"BB-8，去吧！"_\\r
        \\r
        你能做的很好！坚持下去！
      courseC_starWars_loops10_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\\r

        _"BB-8，去吧！"_\\r
        \\r
        你能做的很好！坚持下去！
      courseC_starWars_loops10_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)\\r

        _"BB-8，去吧！"_\\r
        \\r
        你能做的很好！坚持下去！
      courseC_starWars_loops11: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8，继续！"_\\r
        \\r
        快要成功了！这次选择你喜欢的路！
      courseC_starWars_loops11_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8，继续！"_\\r
        \\r
        快要成功了！这次选择你喜欢的路！
      courseC_starWars_loops11_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8，继续！"_\\r
        \\r
        快要成功了！这次选择你喜欢的路！
      courseC_starWars_loops1_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8，去拿到那块废金属！"_ \\r
        \\r
        用5个一样的模块来拿到废金属。废金属长这样：![](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)
      courseC_starWars_loops1_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8，去拿到那块废金属！"_ \\r
        \\r
        用5个一样的模块来拿到废金属。废金属长这样：![](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)
      courseC_starWars_loops2: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8，上!"_\\r
        \\r
        为了得到所有废金属，试着用`重复`模块创建一个循环，里面只放一个模块。
      courseC_starWars_loops2_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8，上!"_\\r
        \\r
        为了得到所有废金属，试着用`重复`模块创建一个循环，里面只放一个模块。
      courseC_starWars_loops2_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8，上!"_\\r
        \\r
        为了得到所有废金属，试着用`重复`模块创建一个循环，里面只放一个模块。
      courseC_starWars_loops4: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8，坚持下去。"_\\r
        \\r
        在这一关，两个`重复`循环会帮你用最少的模块帮助BB-8收集到所有的废金属！
      courseC_starWars_loops4_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8，坚持下去。"_\\r
        \\r
        在这一关，两个`重复`循环会帮你用最少的模块帮助BB-8收集到所有的废金属！
      courseC_starWars_loops4_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8，坚持下去。"_\\r
        \\r
        在这一关，两个`重复`循环会帮你用最少的模块帮助BB-8收集到所有的废金属！
      courseC_starWars_loops5: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8，上！"_
      courseC_starWars_loops5_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8，上！"_
      courseC_starWars_loops5_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8，上！"_
      courseC_starWars_loops6: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"你能得到所有的吗？"_\\r
        \\r
        循环里面能放多个模块！你能循环这个序列吗？
      courseC_starWars_loops6_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"你能得到所有的吗？"_\\r
        \\r
        循环里面能放多个模块！你能循环这个序列吗？
      courseC_starWars_loops6_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"你能得到所有的吗？"_\\r
        \\r
        循环里面能放多个模块！你能循环这个序列吗？
      courseC_starWars_loops7: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"你能做到！"_\\r
        \\r
        你能只用一个循环来收集所有的废金属吗？先试着完全写出代码，然后再找到重复的代码，并放到一个循环里。
      courseC_starWars_loops7_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"你能做到！"_\\r
        \\r
        你能只用一个循环来收集所有的废金属吗？先试着完全写出代码，然后再找到重复的代码，并放到一个循环里。
      courseC_starWars_loops7_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"你能做到！"_\\r
        \\r
        你能只用一个循环来收集所有的废金属吗？先试着完全写出代码，然后再找到重复的代码，并放到一个循环里。
      courseC_starWars_loops8: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8，坚持。"_\\r
        \\r
        **挑战**：结合前几关的主意来完成这一关。
      courseC_starWars_loops8_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8，坚持。"_\\r
        \\r
        **挑战**：结合前几关的主意来完成这一关。
      courseC_starWars_loops8_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"BB-8，坚持。"_\\r
        \\r
        **挑战**：结合前几关的主意来完成这一关。
      courseC_starWars_loops9: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"继续！"_\\r
        \\r
        用你学过的知识来捡起所有的废金属！
      courseC_starWars_loops9_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"继续！"_\\r
        \\r
        用你学过的知识来捡起所有的废金属！
      courseC_starWars_loops9_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"继续！"_\\r
        \\r
        用你学过的知识来捡起所有的废金属！
      courseD_Frozen_nested1: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“你好，我是阿伦达尔的爱莎，帮我画个图形吧。”_\\r
        \\r
        画一个**20和50**像素之间的小图案。可以是你喜欢的任何形状。  \\r

        <hr/>\r
        \r
        你可以试试下面这样的多边形：  \r
        ![](https://images.code.org/14e58b3901ca7c13319cc64f18ae5d82-image-1495765942356.21.06.png)\r
        ![](https://images.code.org/8f79d689ea4936a3725a37025f8fda40-image-1495765942357.25.49.png)\r
        ![](https://images.code.org/e5d222ae7356af4811aa153640af135e-image-1495765942357.26.09.png)  \r
        \r
          \r
          \r
        甚至这样的抽象形状：  \r
        ![](https://images.code.org/8471c095219da3044b3830bebeedefb3-image-1496436883704.32.19.png)\r
        ![](https://images.code.org/2fe6ed2db5308f4b34f7632fc6b8a64d-image-1496436883705.40.32.png)\r
        ![](https://images.code.org/abb0947f634bc4b712d47516587a6cb8-image-1496436883705.47.21.png)\r
      courseD_Frozen_nested2: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“现在，让我们再画一个。”_\\r
        \\r
        现在，将你的形状在一行里画两个或三个，每个之间往前跳一些像素。 \\r
        \\r

        -   如果往前跳得比图形的宽度要**少**，它们可能会重叠。\\r
        -   \-
            如果往前跳得比图形得宽度要**多**，它们之间可能会有空隙\\r
            \\r
            <hr/>\r
            \r
            这一行可能最后会像这些：\r
            \r
            ![](https://images.code.org/cefc818d8636c7ce185738311870ff1d-image-1495820778762.39.25.png)\r
            ![](https://images.code.org/80dc77914de15685dc696825dff61723-image-1495820778762.39.43.png)\r
            ![](https://images.code.org/00cda078f119b1ddb0af27ae4a44b089-image-1495820778761.39.08.png)\r
            <br/>  <br/>\r
            \r
            \r
            或者，你的形状可能像这样到处移动： \r
            \r
            ![](https://images.code.org/0c4066fe7547bc1f4495aacbeecdea6d-image-1496437220447.47.04.png)\r
            ![](https://images.code.org/4069376b784c147a8d443d49e22f783f-image-1496437220446.40.15.png)\r
            ![](https://images.code.org/02704ab3fb3356f76c544bb64c1a7cce-image-1496437220446.32.04.png)
      courseD_Frozen_nested3: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"让我们把它变成雪花。"_\\r
        \\r
        下次，用`向前跳200，向下跳200`模块来让艾莎回到屏幕中间，并自己转圈。从而让她自己转圈，来不停的在不同的方向画这个形状的线。 \\r
        \\r
        你做的雪花太美了！\\r

        <hr/>\r
        看看这些多边形的例子： \r
        ![](https://images.code.org/b32ebfb3be559bf8a6d017a854e0b97e-image-1495821528995.42.08.png)\r
        ![](https://images.code.org/08d7155f6829f82d878dfa57ad5dcaf3-image-1495821528996.42.26.png)\r
        ![](https://images.code.org/7d461ee9046871e6993406e558f28176-image-1495821528996.42.58.png)\r
        \r
        抽象形状可能做出更像这样的雪花： \r
        ![](https://images.code.org/376d7ba20b6bb86e08b1675370e87b92-image-1496695869798.44.00.png)\r
        ![](https://images.code.org/4f649cc779920632674afac5acce5c95-image-1496695869798.47.51.png)\r
        ![](https://images.code.org/a68f925ffd87241ebc09183acc908b4b-image-1496695869796.31.49.png)
      courseD_Frozen_nested4: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"如果我们在雪花上面画雪花会如何呢？\"_\\\\r\n\\\\r\n试着将两个不同形状的雪花叠到一起，一个放在另一个上面 -- 看看你能得到什么！ "
      courseD_Frozen_nested5: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"用形状和角度来创造一些东西，看看我们能画出什么种类的新雪花！"_\\r
      courseD_Frozen_nested6: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"让我们试试一些新东西。这次沿着之字形滑冰。"_\\r
        \\r
        \\r
        <img
        src="https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png"
        width="200px" style="float: left; margin: 0 15px 15px 0;" />\\r
        用75到105度间的转向来画出楼梯图案 -- 但要确保左右转都有同样的角度。 \\r
        （过会儿你会明白为什么。）
      courseD_Frozen_nested7: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"现在，让我们转向并回到来的路。"_\\r
        \\r
        转向180度，并再画出完全一样的楼梯图案！  \\r
        \\r

        -   如果你把所有代码都放到循环里让爱莎画画，这个阶段剩下的都会很简单。转180度，画画，然后再转180度。\\r
            \\r
            <hr/>\r
            \r
            这是转向76度的楼梯的例子：\r
            \r
            ![](https://images.code.org/ceea66fad37e79cc45a850911f90440c-image-1496696286635.16.27.png)
      courseD_Frozen_nested8: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"让我们转圈，来做雪花。"_\\r
        \\r
        在一个圆里，围着这个形状转5或6次。\\r

        -   如果选择了5次，每次转72度\\r
        -   \-
            如果选择了6次，每次转60度\\r
            <hr/>\r
            \r
            这是爱莎转6次的图案：\r
            \r
            ![](https://images.code.org/b0fe02e728f80ae7a4b731f32371a37b-image-1496697582505.19.34.png)
      courseD_Frozen_nested9: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)  _"现在，我们应该做什么？让我们浏览并创造自己的冬季仙境！"_\\r
        \\r
        试着摆弄你自己创建的。画自己喜欢的！\\r

        -   如果你在楼梯图案那里转两个不同的角度会发生什么？\\r
        -   如果你的钻石图案长一点或短一点会发生什么？\\r
        -   如果在一个雪花上画另一个雪花看起来会是什么样子？
      courseD_artist_1_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“嗨，我是阿伦达尔的爱莎，帮我画个图形吧。”_\\r
        \\r
        画一个边长50像素的六边形。  \\r
        \\r
        \---\\r
        \\r
        要画这个六边形，你需要： \\r

        -   向前移动**50**像素\\r
        -   向右转**60**度\\r
        -   \-
            一共重复**6**次\\r
            \\r
      courseD_artist_1_2018_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“嗨，我是阿伦达尔的爱莎，帮我画个图形吧。”_\\r
        \\r
        画一个边长50像素的六边形。  \\r
        \\r
        \---\\r
        \\r
        要画这个六边形，你需要： \\r

        -   向前移动**50**像素\\r
        -   向右转**60**度\\r
        -   \-
            一共重复**6**次\\r
            \\r
      courseD_artist_2_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“做得好！”_\\r
        \\r
        画完六边形后，向右转**60**度，然后画一条**150**像素长的线。   \\r
        \\r
        使用<xml><block type="jump_to"><title
        name="VALUE">中心位置</title></block></xml>模块，将爱莎放到区域中心来结束。\\r
        \\r
        \\r
      courseD_artist_2_2018_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“做得好！”_\\r
        \\r
        画完六边形后，向右转**60**度，然后画一条**150**像素长的线。   \\r
        \\r
        使用<xml><block type="jump_to"><title
        name="VALUE">中心位置</title></block></xml>模块，将爱莎放到区域中心来结束。\\r
        \\r
        \\r
      courseD_artist_3_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“我们来画一个雪花。”_\\r
        \\r
        为了将这段代码变成一个雪花，将所有代码嵌入到另一个`重复`循环中，并运行它**6**次。你只需要增加一个模块。\\r
        \\r
      courseD_artist_3_2018_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“我们来画一个雪花。”_\\r
        \\r
        为了将这段代码变成一个雪花，将所有代码嵌入到另一个`重复`循环中，并运行它**6**次。你只需要增加一个模块。\\r
        \\r
      courseD_artist_4_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"我们来画一个特别的雪花！"_\\r
        \\r
        **灵感：** 如果要在每条线的顶端画一个小正方形，需要在哪里增加代码？\\r
        \\r
        \---\\r
        你可以在这一关试试任何想做的事情，下面是一个主意：\\r
        \\r
        试着在每条线的顶端画一个小正方形\\r

        -   每条边都是15像素长\\r
        -   需要转90度\\r
        -   总共重复4次
      courseD_artist_4_2018_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"我们来画一个特别的雪花！"_\\r
        \\r
        **灵感：** 如果要在每条线的顶端画一个小正方形，需要在哪里增加代码？\\r
        \\r
        \---\\r
        你可以在这一关试试任何想做的事情，下面是一个主意：\\r
        \\r
        试着在每条线的顶端画一个小正方形\\r

        -   每条边都是15像素长\\r
        -   需要转90度\\r
        -   总共重复4次
      courseD_artist_5_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"试着改变形状或线条长度来画出自己的！"_\\r
        \\r
        <br/>  \\r
        \\r
        **灵感：**
        你可以用任何方法来画自己的形状，这里是一个主意:\\r
        \\r
        \-
        试着改变雪花顶端的图案！
      courseD_artist_5_2018_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"试着改变形状或线条长度来画出自己的！"_\\r
        \\r
        <br/>  \\r
        \\r
        **灵感：**
        你可以用任何方法来画自己的形状，这里是一个主意:\\r
        \\r
        \-
        试着改变雪花顶端的图案！
      courseD_artist_6_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"让我们试试一些新东西。这次沿着之字形滑冰。"_\\r
        \\r
        \\r
        <img
        src="https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png"
        width="200px" style="float: left; margin: 0 15px 15px 0;" />\\r
        用75到105度间的转向来画出楼梯图案 -- 但要确保左右转都有同样的角度。 \\r
        （过会儿你会明白为什么。）
      courseD_artist_6_2018_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"让我们试试一些新东西。这次沿着之字形滑冰。"_\\r
        \\r
        \\r
        <img
        src="https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png"
        width="200px" style="float: left; margin: 0 15px 15px 0;" />\\r
        用75到105度间的转向来画出楼梯图案 -- 但要确保左右转都有同样的角度。 \\r
        （过会儿你会明白为什么。）
      courseD_artist_7_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"现在，让我们转向并回到来的路。"_\\r
        \\r
        转向180度，并再画出完全一样的楼梯图案！  \\r
        \\r

        -   如果你把所有代码都放到循环里让爱莎画画，这个阶段剩下的都会很简单。转180度，画画，然后再转180度。\\r
            \\r
            <hr/>\r
            \r
            这是转向76度的楼梯的例子：\r
            \r
            ![](https://images.code.org/ceea66fad37e79cc45a850911f90440c-image-1496696286635.16.27.png)
      courseD_artist_8_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"让我们转圈，来做雪花。"_\\r
        \\r
        在一个圆里，围着这个形状转5或6次。\\r

        -   如果选择了5次，每次转72度\\r
        -   \-
            如果选择了6次，每次转60度\\r
            <hr/>\r
            \r
            这是爱莎转6次的图案：\r
            \r
            ![](https://images.code.org/b0fe02e728f80ae7a4b731f32371a37b-image-1496697582505.19.34.png)
      courseD_artist_9_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)  _"现在，我们应该做什么？让我们浏览并创造自己的冬季仙境！"_\\r
        \\r
        试着摆弄你自己创建的。画自己喜欢的！\\r

        -   如果你在楼梯图案那里转两个不同的角度会发生什么？\\r
        -   如果你的钻石图案长一点或短一点会发生什么？\\r
        -   如果在一个雪花上画另一个雪花看起来会是什么样子？
      courseD_artist_binary1: |-
        我们提供了一个"像素"网格，你可以穿过它，并通过打开某些特定的方块来做些图案。\\r
        \\r
        用下面的模块来让小艺术家在二进制的第一行画出"01010101"。
      courseD_artist_binary1_2018: |-
        我们提供了一个"像素"网格，你可以穿过它，并通过打开某些特定的方块来做些图案。\\r
        \\r
        用下面的模块来让小艺术家在二进制的第一行画出"01010101"。
      courseD_artist_binary1_2019: |-
        我们提供了一个"像素"网格，你可以穿过它，并通过打开某些特定的方块来做些图案。\\r
        \\r
        用下面的模块来让小艺术家在二进制的第一行画出"01010101"。
      courseD_artist_binary2: |-
        这个函数从一个二进制的字符串里面获得1和0，然后指导小艺术家根据它们来从左到右，从上到下。\\r
        **\_\\r
        当小艺术家看到1时，就会填满正方形，当看到0时，则什么也不做。\\r
        \_**\\r
        **运行一下代码，看看小艺术家是怎样用二进制来画出这个图形的。**
      courseD_artist_binary2_2018: |-
        这个函数从一个二进制的字符串里面获得1和0，然后指导小艺术家根据它们来从左到右，从上到下。\\r
        **\_\\r
        当小艺术家看到1时，就会填满正方形，当看到0时，则什么也不做。\\r
        \_**\\r
        **运行一下代码，看看小艺术家是怎样用二进制来画出这个图形的。**
      courseD_artist_binary2_2019: |-
        这个函数从一个二进制的字符串里面获得1和0，然后指导小艺术家根据它们来从左到右，从上到下。\\r
        **\_\\r
        当小艺术家看到1时，就会填满正方形，当看到0时，则什么也不做。\\r
        \_**\\r
        **运行一下代码，看看小艺术家是怎样用二进制来画出这个图形的。**
      courseD_artist_binary_challenge1: 在这个谜题中，您只能使用每个二进制值 (0或1) 一次。请尝试使用嵌套循环来画这幅图。
      courseD_artist_binary_challenge1_2018: 在这个谜题中，您只能使用每个二进制值 (0或1) 一次。请尝试使用嵌套循环来画这幅图。
      courseD_artist_binary_challenge1_2019: 在这个谜题中，您只能使用每个二进制值 (0或1) 一次。请尝试使用嵌套循环来画这幅图。
      courseD_artist_binary_challenge2: |-
        网格里有256个比特 - 这意味着和容易因为一点小改动而造成大问题。你能坚持下去，把图标恢复正常吗？\\r
        \\r
        ![](https://images.code.org/74e15f513982b47762dd33ebbc21e5e9-image-1498776314610.png)
      courseD_artist_binary_challenge2_2018: |-
        网格里有256个比特 - 这意味着和容易因为一点小改动而造成大问题。你能坚持下去，把图标恢复正常吗？\\r
        \\r
        ![](https://images.code.org/74e15f513982b47762dd33ebbc21e5e9-image-1498776314610.png)
      courseD_artist_binary_challenge2_2019: |-
        网格里有256个比特 - 这意味着和容易因为一点小改动而造成大问题。你能坚持下去，把图标恢复正常吗？\\r
        \\r
        ![](https://images.code.org/74e15f513982b47762dd33ebbc21e5e9-image-1498776314610.png)
      courseD_artist_binary_challenge3: |-
        网格里有256个比特 - 这意味着和容易因为一点小改动而造成大问题。你能坚持下去，把图标恢复正常吗？\\r
        \\r
        ![](https://images.code.org/74e15f513982b47762dd33ebbc21e5e9-image-1498776314610.png)
      courseD_artist_functions10: |-
        这次，用8个25像素边长的六边形画线。\\r
        \\r

        -   为了画出每个六边形，重复6次，每次转60度。\\r
        -   为了画出一个钻石，你需要交替转向60度和120度。
      courseD_artist_functions2: |-
        函数能让你定义新的模块。\\r
        \\r
        我们将画正方形的模块挪到了一个叫做`draw a square`（画一个正方形）的函数里。这次，用`draw a square`（画一个正方形）函数来画个眼镜。\\r

        <hr/>\r
        \r
        正方形间隔75像素。
      courseD_artist_functions3: |-
        我们很快就会回到函数部分。让我们先休息一下，练习画这个星星。\\r
        \\r
        可以通过增加一个重复循环来画这幅图。
      courseD_artist_functions4: |-
        现在，你已经能画一个星星了，试着画4个星星！\\r
        \\r

        -   每个行星的分支是25像素长\\r
        -   在分支之间转45度\\r
        -   在每个星星间跳100像素
      courseD_artist_functions5: |-
        什么时候画三个星星会比画4个难？当你需要跳过月亮的时候！\\r
        \\r
        只画出三个星星来完成这关。
      courseD_artist_functions6: |-
        做得很好！ \\r
        \\r
        通过画一个正方形来制作这个窗户，然后在画另一个前转90度，以此类推。
      courseD_artist_functions7: |-
        让我们将画窗口的代码拿走，并增加到函数`画一个窗户`中。现在只要需要，就能调用这个函数了，还不用再写一遍这个代码。
        \\r
        \\r
        <img src="https://images.code.org/57c016bcafe697e6ddb196e0f13c9ef9-image-1468602046641.gif"
        width="450px"/>\\r
        <br/> \\r
        \\r
        试着通过创建`画一个窗户`函数来通过这关，并且调用它5次。小心门！\\r
        \\r

        -   上面的窗户相互分隔50像素。 \\r
        -   下面的窗户离上面的100像素。
      courseD_artist_functions8: "**挑战：**创建你能想到的尽可能多的函数来画出这个50像素的正方形的图案。"
      courseD_artist_functions9: |-
        只用提供的模块创建这幅图。\\r
        \\r

        -   为了画出钻石，你需要交替旋转60度和120度。
      courseD_artist_nestedLoops1a: "现在，循环这个三角形6次。\\\\r\n\\\\r\n在画完每个三角形后，需要转60度。 "
      courseD_artist_nestedLoops1a_2018: "现在，循环这个三角形6次。\\\\r\n\\\\r\n在画完每个三角形后，需要转60度。 "
      courseD_artist_nestedLoops1a_2019: "现在，循环这个三角形6次。\\\\r\n\\\\r\n在画完每个三角形后，需要转60度。 "
      courseD_artist_nestedLoops2: |-
        这次，用尽可能少的模块完成这关。\\r
        \\r
        在画完每个三角形后，需要在画下一个前转60度。\\r
        看看用**嵌套循环**的话，会有多容易？
      courseD_artist_nestedLoops2_2018: |-
        这次，用尽可能少的模块完成这关。\\r
        \\r
        在画完每个三角形后，需要在画下一个前转60度。\\r
        看看用**嵌套循环**的话，会有多容易？
      courseD_artist_nestedLoops2_2019: |-
        这次，用尽可能少的模块完成这关。\\r
        \\r
        在画完每个三角形后，需要在画下一个前转60度。\\r
        看看用**嵌套循环**的话，会有多容易？
      courseD_artist_nestedLoops4: |-
        太棒了！用这些圆做一样的事情。\\r
        \\r

        -   每个圆都在移动1像素前转1度，循环360次。\\r
        -   每个圆都离一个圆结束位置50像素。
      courseD_artist_nestedLoops4_2018: |-
        太棒了！用这些圆做一样的事情。\\r
        \\r

        -   每个圆都在移动1像素前转1度，循环360次。\\r
        -   每个圆都离一个圆结束位置50像素。
      courseD_artist_nestedLoops4_2019: |-
        太棒了！用这些圆做一样的事情。\\r
        \\r

        -   每个圆都在移动1像素前转1度，循环360次。\\r
        -   每个圆都离一个圆结束位置50像素。
      courseD_artist_nestedLoops5: |-
        如果你在圆之间转90度，会发生什么？\\r
        \\r
        （为了画出这幅图，你需要在圆之间跳50像素）
      courseD_artist_nestedLoops5_2018: |-
        如果你在圆之间转90度，会发生什么？\\r
        \\r
        （为了画出这幅图，你需要在圆之间跳50像素）
      courseD_artist_nestedLoops5_2019: |-
        如果你在圆之间转90度，会发生什么？\\r
        \\r
        （为了画出这幅图，你需要在圆之间跳50像素）
      courseD_artist_nestedLoops7: |-
        用你学过的知识画这幅图。\\r
        \\r

        -   每个正方形有**100像素边长**和**90度的角**\\r
        -   需要**在每个正方形间转60度**。为什么？因为有6个正方形和360度（一个整圆的度数），360除以6是60度。\\r
        -   确保你跳了**50像素到下一个正方形**
      courseD_artist_nestedLoops7_2018: |-
        用你学过的知识画这幅图。\\r
        \\r

        -   每个正方形有**100像素边长**和**90度的角**\\r
        -   需要**在每个正方形间转60度**。为什么？因为有6个正方形和360度（一个整圆的度数），360除以6是60度。\\r
        -   确保你跳了**50像素到下一个正方形**
      courseD_artist_nestedLoops7_2019: |-
        用你学过的知识画这幅图。\\r
        \\r

        -   每个正方形有**100像素边长**和**90度的角**\\r
        -   需要**在每个正方形间转60度**。为什么？因为有6个正方形和360度（一个整圆的度数），360除以6是60度。\\r
        -   确保你跳了**50像素到下一个正方形**
      courseD_artist_nestedLoops8: |-
        用你从前面的关卡中学到的，从头构建这幅图。\\r
        \\r
        \-
        每个六边形都有**50像素的边**和**60度的转弯**
      courseD_artist_nestedLoops8_2018: |-
        用你从前面的关卡中学到的，从头构建这幅图。\\r
        \\r
        \-
        每个六边形都有**50像素的边**和**60度的转弯**
      courseD_artist_nestedLoops8_2019: |-
        用你从前面的关卡中学到的，从头构建这幅图。\\r
        \\r
        \-
        每个六边形都有**50像素的边**和**60度的转弯**
      courseD_artist_nestedLoops9: |-
        **挑战：** 你能想到如何做出这样一张图吗？\\r
        \\r

        -   两个形状都是**50像素的边长**\\r
        -   在每一对形状间，你需要往前跳边长那么远，并转向45度。
      courseD_artist_nestedLoops9_2018: |-
        **挑战：** 你能想到如何做出这样一张图吗？\\r
        \\r

        -   两个形状都是**50像素的边长**\\r
        -   在每一对形状间，你需要往前跳边长那么远，并转向45度。
      courseD_artist_nestedLoops9_2019: |-
        **挑战：** 你能想到如何做出这样一张图吗？\\r
        \\r

        -   两个形状都是**50像素的边长**\\r
        -   在每一对形状间，你需要往前跳边长那么远，并转向45度。
      courseD_artist_nestedLoops9_predict1: |-
        **挑战：**
        你能想出怎么画这样的图吗？\\r
        \\r

        -   两个形状都有50像素的边
      courseD_artist_nestedLoops9_predict1_2018: |-
        **挑战：**
        你能想出怎么画这样的图吗？\\r
        \\r

        -   两个形状都有50像素的边
      courseD_artist_nestedLoops9_predict1_2019: |-
        **挑战：**
        你能想出怎么画这样的图吗？\\r
        \\r

        -   两个形状都有50像素的边
      courseD_artist_nestedLoopsFP: |-
        该你了。用你学会的技能，做些你喜欢的东西！\\r
        \\r
        需要主意吗？试试下面之一：\\r
        \\r
        ![expandable](https://images.code.org/7ac814e356b3548f57bfab8a9eb31dff-image-1497993113904.png)\\r
        ![expandable](https://images.code.org/bd29d35c9a8abf9d27591b90b0f3ec0f-image-1497993121072.png)\\r
        ![expandable](https://images.code.org/2970f34785e51ae98be7aff6fe0827ce-image-1497993126938.png)
      courseD_artist_nestedLoopsFP_2018: |-
        该你了。用你学会的技能，做些你喜欢的东西！\\r
        \\r
        需要主意吗？试试下面之一：\\r
        \\r
        ![expandable](https://images.code.org/7ac814e356b3548f57bfab8a9eb31dff-image-1497993113904.png)\\r
        ![expandable](https://images.code.org/bd29d35c9a8abf9d27591b90b0f3ec0f-image-1497993121072.png)\\r
        ![expandable](https://images.code.org/2970f34785e51ae98be7aff6fe0827ce-image-1497993126938.png)
      courseD_artist_nestedLoopsFP_2019: |-
        该你了。用你学会的技能，做些你喜欢的东西！\\r
        \\r
        需要主意吗？试试下面之一：\\r
        \\r
        ![expandable](https://images.code.org/7ac814e356b3548f57bfab8a9eb31dff-image-1497993113904.png)\\r
        ![expandable](https://images.code.org/bd29d35c9a8abf9d27591b90b0f3ec0f-image-1497993121072.png)\\r
        ![expandable](https://images.code.org/2970f34785e51ae98be7aff6fe0827ce-image-1497993126938.png)
      courseD_artist_nestedLoops_challenge1: |-
        你能想出怎么做像这样的图吗？\\r
        \\r

        -   两个形状都有**50像素的边长。**\\r
        -   _八边形_要转向_45度_。\\r
        -   _三角形_要_120度_的转向。
      courseD_artist_nestedLoops_challenge1_2018: |-
        你能想出怎么做像这样的图吗？\\r
        \\r

        -   两个形状都有**50像素的边长。**\\r
        -   _八边形_要转向_45度_。\\r
        -   _三角形_要_120度_的转向。
      courseD_artist_nestedLoops_challenge1_2019: |-
        你能想出怎么做像这样的图吗？\\r
        \\r

        -   两个形状都有**50像素的边长。**\\r
        -   _八边形_要转向_45度_。\\r
        -   _三角形_要_120度_的转向。
      courseD_artist_nestedLoops_challenge2: |-
        这个代码有点不好！你能修复它，让它在工作区画出正确的图吗？\\r
        \\r
        \-
        第一个内循环应该画一个八边形。\\r

        -   第二个内循环应该画一个六边形。\\r
        -   第三个内循环应该画一个正方形。
      courseD_artist_nestedLoops_challenge2_2018: |-
        这个代码有点不好！你能修复它，让它在工作区画出正确的图吗？\\r
        \\r
        \-
        第一个内循环应该画一个八边形。\\r

        -   第二个内循环应该画一个六边形。\\r
        -   第三个内循环应该画一个正方形。
      courseD_artist_nestedLoops_challenge2_2019: |-
        这个代码有点不好！你能修复它，让它在工作区画出正确的图吗？\\r
        \\r
        \-
        第一个内循环应该画一个八边形。\\r

        -   第二个内循环应该画一个六边形。\\r
        -   第三个内循环应该画一个正方形。
      courseD_artist_project1: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“你好，我是阿伦达尔的爱莎，帮我画个图形吧。”_\\r
        \\r
        画一个**20和50**像素之间的小图案。可以是你喜欢的任何形状。  \\r

        <hr/>\r
        \r
        你可以试试下面这样的多边形：  \r
        ![](https://images.code.org/14e58b3901ca7c13319cc64f18ae5d82-image-1495765942356.21.06.png)\r
        ![](https://images.code.org/8f79d689ea4936a3725a37025f8fda40-image-1495765942357.25.49.png)\r
        ![](https://images.code.org/e5d222ae7356af4811aa153640af135e-image-1495765942357.26.09.png)  \r
        \r
          \r
          \r
        甚至这样的抽象形状：  \r
        ![](https://images.code.org/8471c095219da3044b3830bebeedefb3-image-1496436883704.32.19.png)\r
        ![](https://images.code.org/2fe6ed2db5308f4b34f7632fc6b8a64d-image-1496436883705.40.32.png)\r
        ![](https://images.code.org/abb0947f634bc4b712d47516587a6cb8-image-1496436883705.47.21.png)\r
      courseD_artist_project1_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“你好，我是阿伦达尔的爱莎，帮我画个图形吧。”_\\r
        \\r
        画一个**20和50**像素之间的小图案。可以是你喜欢的任何形状。  \\r

        <hr/>\r
        \r
        你可以试试下面这样的多边形：  \r
        ![](https://images.code.org/14e58b3901ca7c13319cc64f18ae5d82-image-1495765942356.21.06.png)\r
        ![](https://images.code.org/8f79d689ea4936a3725a37025f8fda40-image-1495765942357.25.49.png)\r
        ![](https://images.code.org/e5d222ae7356af4811aa153640af135e-image-1495765942357.26.09.png)  \r
        \r
          \r
          \r
        甚至这样的抽象形状：  \r
        ![](https://images.code.org/8471c095219da3044b3830bebeedefb3-image-1496436883704.32.19.png)\r
        ![](https://images.code.org/2fe6ed2db5308f4b34f7632fc6b8a64d-image-1496436883705.40.32.png)\r
        ![](https://images.code.org/abb0947f634bc4b712d47516587a6cb8-image-1496436883705.47.21.png)
      courseD_artist_project1_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“你好，我是阿伦达尔的爱莎，帮我画个图形吧。”_\\r
        \\r
        画一个**20和50**像素之间的小图案。可以是你喜欢的任何形状。  \\r

        <hr/>\r
        \r
        你可以试试下面这样的多边形：  \r
        ![](https://images.code.org/14e58b3901ca7c13319cc64f18ae5d82-image-1495765942356.21.06.png)\r
        ![](https://images.code.org/8f79d689ea4936a3725a37025f8fda40-image-1495765942357.25.49.png)\r
        ![](https://images.code.org/e5d222ae7356af4811aa153640af135e-image-1495765942357.26.09.png)  \r
        \r
          \r
          \r
        甚至这样的抽象形状：  \r
        ![](https://images.code.org/8471c095219da3044b3830bebeedefb3-image-1496436883704.32.19.png)\r
        ![](https://images.code.org/2fe6ed2db5308f4b34f7632fc6b8a64d-image-1496436883705.40.32.png)\r
        ![](https://images.code.org/abb0947f634bc4b712d47516587a6cb8-image-1496436883705.47.21.png)\r
      courseD_artist_project1a: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"让我们试试一些新东西。这次沿着之字形滑冰。"_\\r
        \\r
        \\r
        <img
        src="https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png"
        width="200px" style="float: left; margin: 0 15px 15px 0;" />\\r
        用75到105度间的转向来画出楼梯图案 -- 但要确保左右转都有同样的角度。 \\r
        （过会儿你会明白为什么。）
      courseD_artist_project1a_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"让我们试试一些新东西。这次沿着之字形滑冰。"_\\r
        \\r
        \\r
        <img
        src="https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png"
        width="200px" style="float: left; margin: 0 15px 15px 0;" />\\r
        用75到105度间的转向来画出楼梯图案 -- 但要确保左右转都有同样的角度。 \\r
        （过会儿你会明白为什么。）
      courseD_artist_project1a_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"让我们试试一些新东西。这次沿着之字形滑冰。"_\\r
        \\r
        \\r
        <img
        src="https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png"
        width="200px" style="float: left; margin: 0 15px 15px 0;" />\\r
        用75到105度间的转向来画出楼梯图案 -- 但要确保左右转都有同样的角度。 \\r
        （过会儿你会明白为什么。）
      courseD_artist_project2: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“现在，让我们再画一个。”_\\r
        \\r
        现在，将你的形状在一行里画两个或三个，每个之间往前跳一些像素。 \\r
        \\r

        -   如果往前跳得比图形的宽度要**少**，它们可能会重叠。\\r
        -   \-
            如果往前跳得比图形得宽度要**多**，它们之间可能会有空隙\\r
            \\r
            <hr/>\r
            \r
            这一行可能最后会像这些：\r
            \r
            ![](https://images.code.org/cefc818d8636c7ce185738311870ff1d-image-1495820778762.39.25.png)\r
            ![](https://images.code.org/80dc77914de15685dc696825dff61723-image-1495820778762.39.43.png)\r
            ![](https://images.code.org/00cda078f119b1ddb0af27ae4a44b089-image-1495820778761.39.08.png)\r
            <br/>  <br/>\r
            \r
            \r
            或者，你的形状可能像这样到处移动： \r
            \r
            ![](https://images.code.org/0c4066fe7547bc1f4495aacbeecdea6d-image-1496437220447.47.04.png)\r
            ![](https://images.code.org/4069376b784c147a8d443d49e22f783f-image-1496437220446.40.15.png)\r
            ![](https://images.code.org/02704ab3fb3356f76c544bb64c1a7cce-image-1496437220446.32.04.png)
      courseD_artist_project2_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“现在，让我们再画一个。”_\\r
        \\r
        现在，将你的形状在一行里画两个或三个，每个之间往前跳一些像素。 \\r
        \\r

        -   如果往前跳得比图形的宽度要**少**，它们可能会重叠。\\r
        -   \-
            如果往前跳得比图形得宽度要**多**，它们之间可能会有空隙\\r
            \\r
            <hr/>\r
            \r
            这一行可能最后会像这些：\r
            \r
            ![](https://images.code.org/cefc818d8636c7ce185738311870ff1d-image-1495820778762.39.25.png)\r
            ![](https://images.code.org/80dc77914de15685dc696825dff61723-image-1495820778762.39.43.png)\r
            ![](https://images.code.org/00cda078f119b1ddb0af27ae4a44b089-image-1495820778761.39.08.png)\r
            <br/>  <br/>\r
            \r
            \r
            或者，你的形状可能像这样到处移动： \r
            \r
            ![](https://images.code.org/0c4066fe7547bc1f4495aacbeecdea6d-image-1496437220447.47.04.png)\r
            ![](https://images.code.org/4069376b784c147a8d443d49e22f783f-image-1496437220446.40.15.png)\r
            ![](https://images.code.org/02704ab3fb3356f76c544bb64c1a7cce-image-1496437220446.32.04.png)
      courseD_artist_project2_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“现在，让我们再画一个。”_\\r
        \\r
        现在，将你的形状在一行里画两个或三个，每个之间往前跳一些像素。 \\r
        \\r

        -   如果往前跳得比图形的宽度要**少**，它们可能会重叠。\\r
        -   \-
            如果往前跳得比图形得宽度要**多**，它们之间可能会有空隙\\r
            \\r
            <hr/>\r
            \r
            这一行可能最后会像这些：\r
            \r
            ![](https://images.code.org/cefc818d8636c7ce185738311870ff1d-image-1495820778762.39.25.png)\r
            ![](https://images.code.org/80dc77914de15685dc696825dff61723-image-1495820778762.39.43.png)\r
            ![](https://images.code.org/00cda078f119b1ddb0af27ae4a44b089-image-1495820778761.39.08.png)\r
            <br/>  <br/>\r
            \r
            \r
            或者，你的形状可能像这样到处移动： \r
            \r
            ![](https://images.code.org/0c4066fe7547bc1f4495aacbeecdea6d-image-1496437220447.47.04.png)\r
            ![](https://images.code.org/4069376b784c147a8d443d49e22f783f-image-1496437220446.40.15.png)\r
            ![](https://images.code.org/02704ab3fb3356f76c544bb64c1a7cce-image-1496437220446.32.04.png)
      courseD_artist_project2a: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"现在，让我们转向并回到来的路。"_\\r
        \\r
        转向180度，并再画出完全一样的楼梯图案！  \\r
        \\r

        -   如果你把所有代码都放到循环里让爱莎画画，这个阶段剩下的都会很简单。转180度，画画，然后再转180度。\\r
            \\r
            <hr/>\r
            \r
            这是转向76度的楼梯的例子：\r
            \r
            ![](https://images.code.org/ceea66fad37e79cc45a850911f90440c-image-1496696286635.16.27.png)
      courseD_artist_project2a_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"现在，让我们转向并回到来的路。"_\\r
        \\r
        转向180度，并再画出完全一样的楼梯图案！  \\r
        \\r

        -   如果你把所有代码都放到循环里让爱莎画画，这个阶段剩下的都会很简单。转180度，画画，然后再转180度。\\r
            \\r
            <hr/>\r
            \r
            这是转向76度的楼梯的例子：\r
            \r
            ![](https://images.code.org/ceea66fad37e79cc45a850911f90440c-image-1496696286635.16.27.png)
      courseD_artist_project2a_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"现在，让我们转向并回到来的路。"_\\r
        \\r
        转向180度，并再画出完全一样的楼梯图案！  \\r
        \\r

        -   如果你把所有代码都放到循环里让爱莎画画，这个阶段剩下的都会很简单。转180度，画画，然后再转180度。\\r
            \\r
            <hr/>\r
            \r
            这是转向76度的楼梯的例子：\r
            \r
            ![](https://images.code.org/ceea66fad37e79cc45a850911f90440c-image-1496696286635.16.27.png)
      courseD_artist_project3: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"让我们把它变成雪花。"_\\r
        \\r
        下次，用`向前跳200，向下跳200`模块来让艾莎回到屏幕中间，并自己转圈。从而让她自己转圈，来不停的在不同的方向画这个形状的线。 \\r
        \\r
        你做的雪花太美了！\\r

        <hr/>\r
        看看这些多边形的例子： \r
        ![](https://images.code.org/b32ebfb3be559bf8a6d017a854e0b97e-image-1495821528995.42.08.png)\r
        ![](https://images.code.org/08d7155f6829f82d878dfa57ad5dcaf3-image-1495821528996.42.26.png)\r
        ![](https://images.code.org/7d461ee9046871e6993406e558f28176-image-1495821528996.42.58.png)\r
        \r
        抽象形状可能做出更像这样的雪花： \r
        ![](https://images.code.org/376d7ba20b6bb86e08b1675370e87b92-image-1496695869798.44.00.png)\r
        ![](https://images.code.org/4f649cc779920632674afac5acce5c95-image-1496695869798.47.51.png)\r
        ![](https://images.code.org/a68f925ffd87241ebc09183acc908b4b-image-1496695869796.31.49.png)
      courseD_artist_project3_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"让我们把它变成雪花。"_\\r
        \\r
        下次，用`向前跳200，向下跳200`模块来让艾莎回到屏幕中间，并自己转圈。从而让她自己转圈，来不停的在不同的方向画这个形状的线。 \\r
        \\r
        你做的雪花太美了！\\r

        <hr/>\r
        看看这些多边形的例子： \r
        ![](https://images.code.org/b32ebfb3be559bf8a6d017a854e0b97e-image-1495821528995.42.08.png)\r
        ![](https://images.code.org/08d7155f6829f82d878dfa57ad5dcaf3-image-1495821528996.42.26.png)\r
        ![](https://images.code.org/7d461ee9046871e6993406e558f28176-image-1495821528996.42.58.png)\r
        \r
        抽象形状可能做出更像这样的雪花： \r
        ![](https://images.code.org/376d7ba20b6bb86e08b1675370e87b92-image-1496695869798.44.00.png)\r
        ![](https://images.code.org/4f649cc779920632674afac5acce5c95-image-1496695869798.47.51.png)\r
        ![](https://images.code.org/a68f925ffd87241ebc09183acc908b4b-image-1496695869796.31.49.png)
      courseD_artist_project3_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"让我们把它变成雪花。"_\\r
        \\r
        下次，用`向前跳200，向下跳200`模块来让艾莎回到屏幕中间，并自己转圈。从而让她自己转圈，来不停的在不同的方向画这个形状的线。 \\r
        \\r
        你做的雪花太美了！\\r

        <hr/>\r
        看看这些多边形的例子： \r
        ![](https://images.code.org/b32ebfb3be559bf8a6d017a854e0b97e-image-1495821528995.42.08.png)\r
        ![](https://images.code.org/08d7155f6829f82d878dfa57ad5dcaf3-image-1495821528996.42.26.png)\r
        ![](https://images.code.org/7d461ee9046871e6993406e558f28176-image-1495821528996.42.58.png)\r
        \r
        抽象形状可能做出更像这样的雪花： \r
        ![](https://images.code.org/376d7ba20b6bb86e08b1675370e87b92-image-1496695869798.44.00.png)\r
        ![](https://images.code.org/4f649cc779920632674afac5acce5c95-image-1496695869798.47.51.png)\r
        ![](https://images.code.org/a68f925ffd87241ebc09183acc908b4b-image-1496695869796.31.49.png)
      courseD_artist_project3a: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"让我们转圈，来做雪花。"_\\r
        \\r
        在一个圆里，围着这个形状转5或6次。\\r

        -   如果选择了5次，每次转72度\\r
        -   \-
            如果选择了6次，每次转60度\\r
            <hr/>\r
            \r
            这是爱莎转6次的图案：\r
            \r
            ![](https://images.code.org/b0fe02e728f80ae7a4b731f32371a37b-image-1496697582505.19.34.png)
      courseD_artist_project3a_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"让我们转圈，来做雪花。"_\\r
        \\r
        在一个圆里，围着这个形状转5或6次。\\r

        -   如果选择了5次，每次转72度\\r
        -   \-
            如果选择了6次，每次转60度\\r
            <hr/>\r
            \r
            这是爱莎转6次的图案：\r
            \r
            ![](https://images.code.org/b0fe02e728f80ae7a4b731f32371a37b-image-1496697582505.19.34.png)
      courseD_artist_project3a_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"让我们转圈，来做雪花。"_\\r
        \\r
        在一个圆里，围着这个形状转5或6次。\\r

        -   如果选择了5次，每次转72度\\r
        -   \-
            如果选择了6次，每次转60度\\r
            <hr/>\r
            \r
            这是爱莎转6次的图案：\r
            \r
            ![](https://images.code.org/b0fe02e728f80ae7a4b731f32371a37b-image-1496697582505.19.34.png)
      courseD_artist_project4: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"如果我们在雪花上面画雪花会如何呢？\"_\\\\r\n\\\\r\n试着将两个不同形状的雪花叠到一起，一个放在另一个上面 -- 看看你能得到什么！ "
      courseD_artist_project4_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"如果我们在雪花上面画雪花会如何呢？\"_\\\\r\n\\\\r\n试着将两个不同形状的雪花叠到一起，一个放在另一个上面 -- 看看你能得到什么！ "
      courseD_artist_project4_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)\n_\"如果我们在雪花上面画雪花会如何呢？\"_\\\\r\n\\\\r\n试着将两个不同形状的雪花叠到一起，一个放在另一个上面 -- 看看你能得到什么！ "
      courseD_artist_project4a: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)  _"现在，我们应该做什么？让我们浏览并创造自己的冬季仙境！"_\\r
        \\r
        试着摆弄你自己创建的。画自己喜欢的！\\r

        -   如果你在楼梯图案那里转两个不同的角度会发生什么？\\r
        -   如果你的钻石图案长一点或短一点会发生什么？\\r
        -   如果在一个雪花上画另一个雪花看起来会是什么样子？
      courseD_artist_project4a_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)  _"现在，我们应该做什么？让我们浏览并创造自己的冬季仙境！"_\\r
        \\r
        试着摆弄你自己创建的。画自己喜欢的！\\r

        -   如果你在楼梯图案那里转两个不同的角度会发生什么？\\r
        -   如果你的钻石图案长一点或短一点会发生什么？\\r
        -   如果在一个雪花上画另一个雪花看起来会是什么样子？
      courseD_artist_project4a_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)  _"现在，我们应该做什么？让我们浏览并创造自己的冬季仙境！"_\\r
        \\r
        试着摆弄你自己创建的。画自己喜欢的！\\r

        -   如果你在楼梯图案那里转两个不同的角度会发生什么？\\r
        -   如果你的钻石图案长一点或短一点会发生什么？\\r
        -   如果在一个雪花上画另一个雪花看起来会是什么样子？
      courseD_artist_project5: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"用形状和角度来创造一些东西，看看我们能画出什么种类的新雪花！"_\\r
      courseD_artist_project5_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"用形状和角度来创造一些东西，看看我们能画出什么种类的新雪花！"_
      courseD_artist_project5_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"用形状和角度来创造一些东西，看看我们能画出什么种类的新雪花！"_\\r
      courseD_artist_project_embedded: 这是你即将要做的！
      courseD_artist_ramp11: |-
        太棒了！让我们用小艺术家画一个正方形！这些模块有点不同，但概念是一样的。\\r
        \_\_\_\\r
        正方形的每条边是200像素长，需要转90度来画每个角。
      courseD_artist_ramp12: |-
        用你学过的知识在三角形里画个正方形。\\r
        \_\_\_\\r

        ##### 每条边都是200像素长。需要转90度来画正方形，转120度来画三角形。
      courseD_autorun_binary2_2019: |-
        这个函数从一个二进制的字符串里面获得1和0，然后指导小艺术家根据它们来从左到右，从上到下。\\r
        **\_\\r
        当小艺术家看到1时，就会填满正方形，当看到0时，则什么也不做。\\r
        \_**\\r
        **运行一下代码，看看小艺术家是怎样用二进制来画出这个图形的。**
      courseD_bee_conditionals1: |-
        _"这朵云挡住了我的视线！"_\\r
        \\r
        检查是否云下面有花。如果有花，采花蜜。
      courseD_bee_conditionals10: |-
        即使你知道每个点会有什么，条件也会有帮助！\\r
        \\r
        收集所有的花蜜，并酿造所有的蜂蜜。
      courseD_bee_conditionals10_2018: |-
        即使你知道每个点会有什么，条件也会有帮助！\\r
        \\r
        收集所有的花蜜，并酿造所有的蜂蜜。
      courseD_bee_conditionals10_2019: |-
        即使你知道每个点会有什么，条件也会有帮助！\\r
        \\r
        收集所有的花蜜，并酿造所有的蜂蜜。
      courseD_bee_conditionals1_predict1: |-
        _"这朵云挡住了我的视线！"_\\r
        \\r
        检查是否云下面有花。如果有花，采花蜜。
      courseD_bee_conditionals1_predict1_2018: |-
        _"这朵云挡住了我的视线！"_\\r
        \\r
        检查是否云下面有花。如果有花，采花蜜。
      courseD_bee_conditionals1_predict1_2019: |-
        _"这朵云挡住了我的视线！"_\\r
        \\r
        检查是否云下面有花。如果有花，采花蜜。
      courseD_bee_conditionals2: |-
        更多的云！ \\r
        \\r
        在采花蜜前检查每朵云下面，看看是否藏着一朵花。如果云下面有花，蜜蜂需要采_一次_花蜜。 \\r
        \\r
        记住，不是每朵云下面都藏着一样的东西！
      courseD_bee_conditionals2_2018: |-
        更多的云！ \\r
        \\r
        在采花蜜前检查每朵云下面，看看是否藏着一朵花。如果云下面有花，蜜蜂需要采_一次_花蜜。 \\r
        \\r
        记住，不是每朵云下面都藏着一样的东西！
      courseD_bee_conditionals2_2019: |-
        更多的云！ \\r
        \\r
        在采花蜜前检查每朵云下面，看看是否藏着一朵花。如果云下面有花，蜜蜂需要采_一次_花蜜。 \\r
        \\r
        记住，不是每朵云下面都藏着一样的东西！
      courseD_bee_conditionals2_test: |-
        更多的云！ \\r
        \\r
        在采花蜜前检查每朵云下面，看看是否藏着一朵花。如果云下面有花，蜜蜂需要采_一次_花蜜。 \\r
        \\r
        记住，不是每朵云下面都藏着一样的东西！
      courseD_bee_conditionals3: 你只能从花上采集花蜜，但你能检查任何空间，看看是否那里有花。如果在任何云下面有花，蜜蜂需要采集_一次_花蜜。
      courseD_bee_conditionals3_2018: 你只能从花上采集花蜜，但你能检查任何空间，看看是否那里有花。如果在任何云下面有花，蜜蜂需要采集_一次_花蜜。
      courseD_bee_conditionals3_2019: 你只能从花上采集花蜜，但你能检查任何空间，看看是否那里有花。如果在任何云下面有花，蜜蜂需要采集_一次_花蜜。
      courseD_bee_conditionals4: |-
        在这一关中，我们知道每朵花都有正好一个花蜜，但是花没有均匀的分布。\\r
        \\r
        用尽可能少的模块采集所有花蜜。
      courseD_bee_conditionals4_2018: |-
        在这一关中，我们知道每朵花都有正好一个花蜜，但是花没有均匀的分布。\\r
        \\r
        用尽可能少的模块采集所有花蜜。
      courseD_bee_conditionals4_2019: |-
        在这一关中，我们知道每朵花都有正好一个花蜜，但是花没有均匀的分布。\\r
        \\r
        用尽可能少的模块采集所有花蜜。
      courseD_bee_conditionals6: |-
        _"现在我只想酿蜂蜜。"_\\r
        \\r
        有些云下面可能有蜂窝。确保检查是否每朵云后藏着蜂窝！如果有蜂窝，蜜蜂就需要酿_一次_蜂蜜。
      courseD_bee_conditionals6_2018: |-
        _"现在我只想酿蜂蜜。"_\\r
        \\r
        有些云下面可能有蜂窝。确保检查是否每朵云后藏着蜂窝！如果有蜂窝，蜜蜂就需要酿_一次_蜂蜜。
      courseD_bee_conditionals6_2019: |-
        _"现在我只想酿蜂蜜。"_\\r
        \\r
        有些云下面可能有蜂窝。确保检查是否每朵云后藏着蜂窝！如果有蜂窝，蜜蜂就需要酿_一次_蜂蜜。
      courseD_bee_conditionals7: |-
        有时，云覆盖了一朵花，有时覆盖了一个蜂窝！\\r
        \\r
        用`如果/否则`模块在花那里采花蜜，并在蜂窝那里酿蜂蜜。记住：如果有花，蜜蜂只需要采_一次_花蜜。如果有蜂窝，蜜蜂也只需要酿_一次_蜂蜜。
      courseD_bee_conditionals7_2018: |-
        有时，云覆盖了一朵花，有时覆盖了一个蜂窝！\\r
        \\r
        用`如果/否则`模块在花那里采花蜜，并在蜂窝那里酿蜂蜜。记住：如果有花，蜜蜂只需要采_一次_花蜜。如果有蜂窝，蜜蜂也只需要酿_一次_蜂蜜。
      courseD_bee_conditionals7_2019: |-
        有时，云覆盖了一朵花，有时覆盖了一个蜂窝！\\r
        \\r
        用`如果/否则`模块在花那里采花蜜，并在蜂窝那里酿蜂蜜。记住：如果有花，蜜蜂只需要采_一次_花蜜。如果有蜂窝，蜜蜂也只需要酿_一次_蜂蜜。
      courseD_bee_conditionals7_predict2: |-
        有时，云覆盖了一朵花，有时覆盖了一个蜂窝！\\r
        \\r
        用`如果/否则`模块在花那里采花蜜，并在蜂窝那里酿蜂蜜。记住：每朵云那里只会有_一个_蜂窝或_一朵_花。
      courseD_bee_conditionals7_predict2_2018: |-
        有时，云覆盖了一朵花，有时覆盖了一个蜂窝！

        用`如果/否则`模块在花那里采花蜜，并在蜂窝那里酿蜂蜜。记住：每朵云那里只会有_一个_蜂窝或_一朵_花。
      courseD_bee_conditionals7_predict2_2019: |-
        有时，云覆盖了一朵花，有时覆盖了一个蜂窝！

        用`如果/否则`模块在花那里采花蜜，并在蜂窝那里酿蜂蜜。记住：每朵云那里只会有_一个_蜂窝或_一朵_花。
      courseD_bee_conditionals8: |-
        **挑战：** 这些云下面要么有一朵花，要么有一个蜂窝！\\r
        \\r
        如果是花，就采一次花蜜。\\r
        否则，就酿一次蜂蜜（因为是蜂窝）。
      courseD_bee_conditionals8_2018: |-
        **挑战：** 这些云下面要么有一朵花，要么有一个蜂窝！\\r
        \\r
        如果是花，就采一次花蜜。\\r
        否则，就酿一次蜂蜜（因为是蜂窝）。
      courseD_bee_conditionals8_2019: |-
        **挑战：** 这些云下面要么有一朵花，要么有一个蜂窝！\\r
        \\r
        如果是花，就采一次花蜜。\\r
        否则，就酿一次蜂蜜（因为是蜂窝）。
      courseD_bee_conditionals9: 采集所有的花蜜或酿造所有的蜂蜜。你只能从花那里采花蜜，从蜂窝那里酿蜂蜜。检查所有空间看看有花还是蜂窝。每朵云后面要么有一朵花，要么有一个蜂窝。
      courseD_bee_conditionals9_2018: 采集所有的花蜜或酿造所有的蜂蜜。你只能从花那里采花蜜，从蜂窝那里酿蜂蜜。检查所有空间看看有花还是蜂窝。每朵云后面要么有一朵花，要么有一个蜂窝。
      courseD_bee_conditionals9_2019: 采集所有的花蜜或酿造所有的蜂蜜。你只能从花那里采花蜜，从蜂窝那里酿蜂蜜。检查所有空间看看有花还是蜂窝。每朵云后面要么有一朵花，要么有一个蜂窝。
      courseD_bee_conditionals_challenge1: 采所有的花蜜并酿造所有的蜂蜜。你只能从花那里采花蜜，从蜂窝酿蜂蜜。检查每个空间是否有花或者蜂窝。
      courseD_bee_conditionals_challenge1_2018: 采所有的花蜜并酿造所有的蜂蜜。你只能从花那里采花蜜，从蜂窝酿蜂蜜。检查每个空间是否有花或者蜂窝。
      courseD_bee_conditionals_challenge1_2019: 采所有的花蜜并酿造所有的蜂蜜。你只能从花那里采花蜜，从蜂窝酿蜂蜜。检查每个空间是否有花或者蜂窝。
      courseD_bee_conditionals_challenge2: 采所有花蜜，并酿所有蜂蜜。你可以用一个`while nectar > 0`循环，在一朵花里收集所有花蜜。
      courseD_bee_conditionals_challenge2_2018: 采所有花蜜，并酿所有蜂蜜。你可以用一个`while nectar > 0`循环，在一朵花里收集所有花蜜。
      courseD_bee_conditionals_challenge2_2019: 采所有花蜜，并酿所有蜂蜜。你可以用一个`while nectar > 0`循环，在一朵花里收集所有花蜜。
      courseD_bee_conditionals_challenge3: 采所有花蜜，并酿所有蜂蜜。你可以用一个`while nectar > 0`循环，在一朵花里收集所有花蜜。
      courseD_bee_debugging1: |-
        _"这些模块真的让我很困扰！"_\\r
        \\r
        改正错误，从而能够采集所有花蜜。
      courseD_bee_debugging2: |-
        _"哎呀，被蛰了！"_\\r
        \\r
        改正错误，从而能够采集所有花蜜。
      courseD_bee_debugging3: |-
        _"这些模块有点粘。"_\\r
        \\r
        改正错误，从而能够采集所有花蜜，并酿成蜂蜜。
      courseD_bee_debugging4: |-
        _"这会很甜！"_\\r
        \\r
        修复错误来酿蜂蜜。
      courseD_bee_debugging5: |-
        **挑战：** _"这关让我疯狂！"_\\r
        \\r
        你需要的所有命令都在这里了...现在用你的调试技能来找出如何解决这个问题。
      courseD_bee_debugging6: "**挑战：**修复错误来采集所有花蜜并酿造所有蜂蜜。"
      courseD_bee_debugging7: |-
        _"太粘了！"_\\r
        \\r
        帮助蜜蜂找到错误。
      courseD_bee_debugging8: |-
        _"这么多可爱的花！"_\\r
        \\r
        帮助蜜蜂修好代码来采集所有的花蜜。
      courseD_bee_debugging9: |-
        _"这是花蜜仙境！"_\\r
        \\r
        帮助蜜蜂修好代码来采集所有的花蜜。
      courseD_bee_debugging_challenge1: 看蜜蜂如何得到花蜜。你能用同一种图案来帮助蜜蜂制造所有的蜂蜜吗？
      courseD_bee_debugging_challenge1_2018: 看蜜蜂如何得到花蜜。你能用同一种图案来帮助蜜蜂制造所有的蜂蜜吗？
      courseD_bee_debugging_challenge1a: |-
        _"嗡嗡嗡！我知道怎么采花蜜，现在帮我酿蜂蜜！"_\\r
        \\r
        看看蜜蜂是怎么得到花蜜的。你能用同样的规律帮蜜蜂酿造所有蜂蜜吗？
      courseD_bee_debugging_challenge2: 看蜜蜂如何得到花蜜。你能用同一种图案来帮助蜜蜂制造所有的蜂蜜吗？
      courseD_bee_nestedLoops1: |-
        "_这会非常棒！_"

        帮蜜蜂收集所有花蜜。
      courseD_bee_nestedLoops1_2018: |-
        "_这会非常棒！_"

        帮蜜蜂收集所有花蜜。
      courseD_bee_nestedLoops1_2019: |-
        "_这会非常棒！_"

        帮蜜蜂收集所有花蜜。
      courseD_bee_nestedLoops1a: |-
        _"这会非常棒！"_

        帮蜜蜂收集所有花蜜。
      courseD_bee_nestedLoops1a_2018: |-
        *_"这会非常棒！"_*

        帮蜜蜂收集所有花蜜。
      courseD_bee_nestedLoops1a_2019: |-
        _"这会非常棒！"_

        帮蜜蜂收集所有花蜜。
      courseD_bee_nestedLoops2: 这一次, 使用尽可能少的模块帮助蜜蜂收集所有的花蜜。
      courseD_bee_nestedLoops2_2018: 这一次, 使用尽可能少的模块帮助蜜蜂收集所有的花蜜。
      courseD_bee_nestedLoops2_2019: 这一次, 使用尽可能少的模块帮助蜜蜂收集所有的花蜜。
      courseD_bee_nestedLoops2_predict1: 这一次, 使用尽可能少的模块帮助蜜蜂收集所有的花蜜。
      courseD_bee_nestedLoops2_predict1_2018: 这一次, 使用尽可能少的模块帮助蜜蜂收集所有的花蜜。
      courseD_bee_nestedLoops2_predict1_2019: 这一次, 使用尽可能少的模块帮助蜜蜂收集所有的花蜜。
      courseD_bee_nestedLoops3: "_\"你能相信这些都是花吗？\"_\\\\r\n\\\\r\n从每朵花收集所有的花蜜。 "
      courseD_bee_nestedLoops5: '从所有的花里收集花蜜，然后在蜂窝那里酿花蜜。 '
      courseD_bee_nestedLoops6: 酿花蜜。
      courseD_bee_nestedLoops6_2018: |-
        _"一定要吃到向日葵！"_\\r
        \\r
        用仅有的模块来让僵尸到达向日葵。
      courseD_bee_nestedLoops7: "**挑战：** 找出如何只使用现有模块得到所有的花蜜。"
      courseD_bee_nestedLoops7_2018: "**挑战：** 找出如何只使用现有模块得到所有的花蜜。"
      courseD_bee_nestedLoops7_2019: "**挑战：** 找出如何只使用现有模块得到所有的花蜜。"
      courseD_bee_nestedLoops8: '从所有的花里收集花蜜，然后在蜂窝那里酿花蜜。 '
      courseD_bee_nestedLoops8_2018: '从所有的花里收集花蜜，然后在蜂窝那里酿花蜜。 '
      courseD_bee_nestedLoops8_2019: '从所有的花里收集花蜜，然后在蜂窝那里酿花蜜。 '
      courseD_bee_nestedLoops9: 酿蜂蜜。
      courseD_bee_nestedLoops9_2018: 酿蜂蜜。
      courseD_bee_nestedLoops9_2019: 酿蜂蜜。
      courseD_bee_nestedLoops9_predict2: 酿蜂蜜。
      courseD_bee_nestedLoops9_predict2_2018: 酿蜂蜜。
      courseD_bee_nestedLoops9_predict2_2019: 酿蜂蜜。
      courseD_bee_nested_loops_challenge1: |-
        让我们寻找宝藏

        -   使用循环！帮助收集器只使用工具箱中的模块来得到至少两堆宝藏。
      courseD_bee_nested_loops_challenge2: |-
        让我们寻找宝藏

        -   使用循环！帮助收集器只使用工具箱中的模块来得到至少两堆宝藏。
      courseD_bounce_events1: 到旗帜那儿！将一个模块附加到“当按左方向键时”模块，并点按“运行”以将玩家移动到旗帜那里。
      courseD_bounce_events10s: |-
        现在最上面有个篮圈。  \\r
        \\r
        将`得分`模块附加到`当球命中时`时间上，并将`对手得分`模块放到`当球从手中丢失时`时间里，来制作一个游戏。 \\r
        \\r
        \---\\r
        \\r
        看看在对手两次得分前，你能得多少分。
      courseD_bounce_events10s_2018: |-
        现在最上面有个篮圈。  \\r
        \\r
        将`得分`模块附加到`当球命中时`时间上，并将`对手得分`模块放到`当球从手中丢失时`时间里，来制作一个游戏。 \\r
        \\r
        \---\\r
        \\r
        看看在对手两次得分前，你能得多少分。
      courseD_bounce_events10s_2019: |-
        现在最上面有个篮圈。  \\r
        \\r
        将`得分`模块附加到`当球命中时`时间上，并将`对手得分`模块放到`当球从手中丢失时`时间里，来制作一个游戏。 \\r
        \\r
        \---\\r
        \\r
        看看在对手两次得分前，你能得多少分。
      courseD_bounce_events11s: |-
        现在，你控球了！将`扔出新球`模块放到游戏中所有需要一个新球得地方。\\r
        \\r
        \---\\r
        \\r
        看看在对手得分两次前，你能得多少分！
      courseD_bounce_events11s_2018: |-
        现在，你控球了！将`扔出新球`模块放到游戏中所有需要一个新球得地方。\\r
        \\r
        \---\\r
        \\r
        看看在对手得分两次前，你能得多少分！
      courseD_bounce_events11s_2019: |-
        现在，你控球了！将`扔出新球`模块放到游戏中所有需要一个新球得地方。\\r
        \\r
        \---\\r
        \\r
        看看在对手得分两次前，你能得多少分！
      courseD_bounce_events1s: |-
        把球投到篮框里！ \\r
        加一个模块到`当按左方向键时`事件，并点击"运行"来将玩家移动到网那里。
      courseD_bounce_events1s_2018: "把球投到篮框里！ \n\n加一个模块到`当按左方向键时`事件，并点击\"运行\"来将玩家移动到网那里。"
      courseD_bounce_events1s_2019: "把球投到篮框里！ \n\n加一个模块到`当按左方向键时`事件，并点击\"运行\"来将玩家移动到网那里。"
      courseD_bounce_events2s: 现在, 在 "当向右时" 中附加一个方块, 这样手就可以够到两个篮子。
      courseD_bounce_events2s_2018: 现在, 在 "当向右时" 中附加一个方块, 这样手就可以够到两个篮子。
      courseD_bounce_events2s_2019: 现在, 在 "当向右时" 中附加一个方块, 这样手就可以够到两个篮子。
      courseD_bounce_events5s: 我们会朝着手发一个球。在`当球碰到手时`事件中加一个模块来确保球到达篮筐。
      courseD_bounce_events5s_2018: 我们会朝着手发一个球。在`当球碰到手时`事件中加一个模块来确保球到达篮筐。
      courseD_bounce_events5s_2019: 我们会朝着手发一个球。在`当球碰到手时`事件中加一个模块来确保球到达篮筐。
      courseD_bounce_events6s: |-
        现在篮筐在顶部。 \\r
        \\r
        添加代码，当球碰到墙时，让球弹起来，这样来通过这关。
      courseD_bounce_events6s_2018: |-
        现在篮筐在顶部。 \\r
        \\r
        添加代码，当球碰到墙时，让球弹起来，这样来通过这关。
      courseD_bounce_events6s_2019: |-
        现在篮筐在顶部。 \\r
        \\r
        添加代码，当球碰到墙时，让球弹起来，这样来通过这关。
      courseD_bounce_events7s: |-
        增加声音模块来制造出球进入篮筐时的刷刷声，在球脱手时的吹哨声。 \\r
        \\r
        \---\\r
        \\r
        弹球，直到它命中目标。
      courseD_bounce_events7s_2018: |-
        增加声音模块来制造出球进入篮筐时的刷刷声，在球脱手时的吹哨声。 \\r
        \\r
        \---\\r
        \\r
        弹球，直到它命中目标。
      courseD_bounce_events7s_2019: |-
        增加声音模块来制造出球进入篮筐时的刷刷声，在球脱手时的吹哨声。 \\r
        \\r
        \---\\r
        \\r
        弹球，直到它命中目标。
      courseD_collector_debugging1: |-
        _"哦，不！我看到有个问题。"_\\r
        \\r
        修复缺陷来收集所有宝藏。
      courseD_collector_debugging10_predict1: |-
        _"这是藏宝岛！"_\\r
        \\r
        帮助罗瑞尔修好代码，获得所有宝藏。
      courseD_collector_debugging10_predict1_2018: |-
        _"这是藏宝岛！"_\\r
        \\r
        帮助罗瑞尔修好代码，获得所有宝藏。
      courseD_collector_debugging1_2018: |-
        _"哦，不！我看到有个问题。"_\\r
        \\r
        修复缺陷来收集所有宝藏。
      courseD_collector_debugging1a: |-
        _"哦，不！我看到有个问题。"_\\r
        \\r
        修复缺陷来收集所有宝藏。
      courseD_collector_debugging1a_2018: |-
        _"哦，不！我看到有个问题。"_\\r
        \\r
        修复缺陷来收集所有宝藏。
      courseD_collector_debugging1a_2019: |-
        _"哦，不！我看到有个问题。"_\\r
        \\r
        修复缺陷来收集所有宝藏。
      courseD_collector_debugging2: |-
        _"你能做到！"_\\r
        \\r
        修复缺陷来收集所有宝藏。
      courseD_collector_debugging2_2018: |-
        _"你能做到！"_\\r
        \\r
        修复缺陷来收集所有宝藏。
      courseD_collector_debugging2a: |-
        _"你能做到！"_\\r
        \\r
        修复缺陷来收集所有宝藏。
      courseD_collector_debugging2a_2018: |-
        _"你能做到！"_\\r
        \\r
        修复缺陷来收集所有宝藏。
      courseD_collector_debugging2a_2019: |-
        _"你能做到！"_\\r
        \\r
        修复缺陷来收集所有宝藏。
      courseD_collector_debugging3: |-
        _"坚持下去，你能找到它。"_\\r
        \\r
        修复错误来收集所有宝藏。
      courseD_collector_debugging3_2018: |-
        _"坚持下去，你能找到它。"_\\r
        \\r
        修复错误来收集所有宝藏。
      courseD_collector_debugging3a: |-
        _"坚持下去，你能找到它。"_\\r
        \\r
        修复错误来收集所有宝藏。
      courseD_collector_debugging3a_2018: |-
        _"坚持下去，你能找到它。"_\\r
        \\r
        修复错误来收集所有宝藏。
      courseD_collector_debugging3a_2019: |-
        _"坚持下去，你能找到它。"_\\r
        \\r
        修复错误来收集所有宝藏。
      courseD_collector_debugging4: |-
        _"别失望。你能做到！"_\\r
        \\r
        修复这些错误并收集所有的宝贝.
      courseD_collector_debugging4_2018: |-
        _"别失望。你能做到！"_\\r
        \\r
        修复这些错误并收集所有的宝贝.
      courseD_collector_debugging4a: |-
        _"别失望。你能做到！"_\\r
        \\r
        修复这些错误并收集所有的宝贝.
      courseD_collector_debugging4a_2018: |-
        _"别失望。你能做到！"_\\r
        \\r
        修复这些错误并收集所有的宝贝.
      courseD_collector_debugging4a_2019: |-
        _"别失望。你能做到！"_\\r
        \\r
        修复这些错误并收集所有的宝贝.
      courseD_collector_debugging5: |-
        _"这关让我疯狂！"_\\r
        \\r
        你需要的所有命令都在这里了...现在用你的调试技能来找出如何解决这个问题。
      courseD_collector_debugging5_2018: |-
        _"这关让我疯狂！"_\\r
        \\r
        你需要的所有命令都在这里了...现在用你的调试技能来找出如何解决这个问题。
      courseD_collector_debugging5a: |-
        _"这关让我疯狂！"_\\r
        \\r
        你需要的所有命令都在这里了...现在用你的调试技能来找出如何解决这个问题。
      courseD_collector_debugging5a_2018: |-
        _"这关让我疯狂！"_\\r
        \\r
        你需要的所有命令都在这里了...现在用你的调试技能来找出如何解决这个问题。
      courseD_collector_debugging5a_2019: |-
        _"这关让我疯狂！"_\\r
        \\r
        你需要的所有命令都在这里了...现在用你的调试技能来找出如何解决这个问题。
      courseD_collector_debugging6: "**挑战：**  所有你需要的模块都在这里了...现在用你的调试技巧来修复错误，收集所有的宝藏。"
      courseD_collector_debugging6_2018: "**挑战：**  所有你需要的模块都在这里了...现在用你的调试技巧来修复错误，收集所有的宝藏。"
      courseD_collector_debugging6a: '挑战: 使用工作区的代码得到至少 \*\* 6 \*\* 块宝藏!'
      courseD_collector_debugging6a_2018: '挑战: 使用工作区的代码得到至少 \*\* 6 \*\* 块宝藏!'
      courseD_collector_debugging6a_2019: '挑战: 使用工作区的代码得到至少 \*\* 6 \*\* 块宝藏!'
      courseD_collector_debugging7: "**挑战**：你需要的所有命令都在这里了...现在用你的调试技巧来找到如何通过这关。"
      courseD_collector_debugging8: |-
        _"这么多宝藏！"_\\r
        \\r
        帮助罗瑞尔修好代码，获得所有宝藏。
      courseD_collector_debugging8_2018: |-
        _"这么多宝藏！"_\\r
        \\r
        帮助罗瑞尔修好代码，获得所有宝藏。
      courseD_collector_debugging8a: |-
        _"这么多宝藏！"_\\r
        \\r
        帮助罗瑞尔修好代码，获得所有宝藏。
      courseD_collector_debugging8a_2018: |-
        _"这么多宝藏！"_\\r
        \\r
        帮助罗瑞尔修好代码，获得所有宝藏。
      courseD_collector_debugging8a_2019: |-
        _"这么多宝藏！"_\\r
        \\r
        帮助罗瑞尔修好代码，获得所有宝藏。
      courseD_collector_debugging9: |-
        _"这是藏宝岛！"_\\r
        \\r
        帮助罗瑞尔修好代码，获得所有宝藏。
      courseD_collector_debugging9_2018: |-
        _"这是藏宝岛！"_\\r
        \\r
        帮助罗瑞尔修好代码，获得所有宝藏。
      courseD_collector_debugging9a: |-
        _"这是藏宝岛！"_\\r
        \\r
        帮助罗瑞尔修好代码，获得所有宝藏。
      courseD_collector_debugging9a_2018: |-
        _"这是藏宝岛！"_\\r
        \\r
        帮助罗瑞尔修好代码，获得所有宝藏。
      courseD_collector_debugging9a_2019: |-
        _"这是藏宝岛！"_\\r
        \\r
        帮助罗瑞尔修好代码，获得所有宝藏。
      courseD_collector_nested_loops_challenge2: |-
        让我们来寻找宝藏 - 用循环！\\r
        \\r
        只用工具箱里的模块来帮助收藏家至少拿到两堆宝藏。有可能收集到所有4堆。
      courseD_collector_nested_loops_challenge2_2018: |-
        让我们来寻找宝藏 - 用循环！\\r
        \\r
        只用工具箱里的模块来帮助收藏家至少拿到两堆宝藏。有可能收集到所有4堆。
      courseD_collector_nested_loops_challenge2_2019: |-
        让我们来寻找宝藏 - 用循环！\\r
        \\r
        只用工具箱里的模块来帮助收藏家至少拿到两堆宝藏。有可能收集到所有4堆。
      courseD_collector_nested_loops_challenge2a: |-
        让我们来寻找宝藏 - 用循环！\\r
        \\r
        只用工具箱里的模块来帮助罗瑞尔至少拿到两堆宝藏。有可能收集到所有4堆。
      courseD_collector_ramp10: 让罗瑞尔在正方形周围走走，收集找到的宝藏。
      courseD_collector_ramp8: |-
        这一关和上一关非常像，但现在罗瑞尔是探险者了！\\r
        \_\_\_\\r
        \\r
        和以前的路一样，但这次，用一个循环重复来收集遇到的宝藏。\\r
      courseD_collector_ramp9: 现在，有更多的宝藏了。你能帮罗瑞尔全收集起来吗？
      courseD_collector_until_challenge1: 看蜜蜂如何得到花蜜。你能用同一种图案来帮助蜜蜂制造所有的蜂蜜吗？
      courseD_debugging_1: |-
        _"这些模块真的让我很困扰！"_\\r
        \\r
        改正错误，从而能够采集所有花蜜。
      courseD_debugging_2: |-
        _"哎呀，被蛰了！"_\\r
        \\r
        改正错误，从而能够采集所有花蜜。
      courseD_debugging_3: |-
        _"这些模块真的让我很困扰！"_\\r
        \\r
        改正错误，从而能够采集所有花蜜，并酿造所有的蜂蜜。
      courseD_debugging_4: |-
        _"这会很甜！"_\\r
        \\r
        修复错误来酿蜂蜜。
      courseD_debugging_5: |-
        **挑战：** _"这关让我疯狂！"_\\r
        \\r
        你需要的所有命令都在这里了...现在用你的调试技能来找出如何解决这个问题。
      courseD_debugging_6: "**挑战：**修复错误来采集所有花蜜并酿造所有蜂蜜。"
      courseD_farmer_condLoops1: |-
        _"玉米，你今天帮我收获了吗？"_\\r
        \\r
        帮助收割者检查她这行玉米，看看有没有可以收获的。用条件语句在每个苗那里判断。每个玉米秆都会有**0或1**个玉米能收获了。
      courseD_farmer_condLoops1_2018: |-
        _"玉米，你今天帮我收获了吗？"_\\r
        \\r
        帮助收割者检查她这行玉米，看看有没有可以收获的。用条件语句在每个苗那里判断。每个玉米秆都会有**0或1**个玉米能收获了。
      courseD_farmer_condLoops1_2019: |-
        _"玉米，你今天帮我收获了吗？"_\\r
        \\r
        帮助收割者检查她这行玉米，看看有没有可以收获的。用条件语句在每个苗那里判断。每个玉米秆都会有**0或1**个玉米能收获了。
      courseD_farmer_condLoops2: |-
        _"莴苣，从这一行采摘所有庄稼！"_\\r
        \\r
        这个花园是混合的。它有**玉米和莴苣**  \\r
        \\r
        帮助收割者收获已经成熟的。每个作物都有**一个**玉米或**一个**莴苣。
      courseD_farmer_condLoops2_2018: |-
        _"莴苣，从这一行采摘所有庄稼！"_\\r
        \\r
        这个花园是混合的。它有**玉米和莴苣**  \\r
        \\r
        帮助收割者收获已经成熟的。每个作物都有**一个**玉米或**一个**莴苣。
      courseD_farmer_condLoops2_2019: |-
        _"莴苣，从这一行采摘所有庄稼！"_\\r
        \\r
        这个花园是混合的。它有**玉米和莴苣**  \\r
        \\r
        帮助收割者收获已经成熟的。每个作物都有**一个**玉米或**一个**莴苣。
      courseD_farmer_condLoops3: |-
        _"玉米、莴苣和南瓜！帮我全收了。"_\\r
        \\r
        每个作物可能是一穗玉米、一头莴苣或一个南瓜。
      courseD_farmer_condLoops3_2018: |-
        _"玉米、莴苣和南瓜！帮我全收了。"_\\r
        \\r
        每个作物可能是一穗玉米、一头莴苣或一个南瓜。
      courseD_farmer_condLoops3_2019: |-
        _"玉米、莴苣和南瓜！帮我全收了。"_\\r
        \\r
        每个作物可能是一穗玉米、一头莴苣或一个南瓜。
      courseD_farmer_condLoops4: |-
        _"哎呀！莴苣都长成团了！"_  \\r
        \\r
        收割者想要从她的莴苣菜园里采摘所有的作物。每个作物都有一个以上的莴苣，因此只要一直有莴苣长出来，农夫就要不停的采摘。 \\r
        \\r

        ##### (记住：这个菜园里只有莴苣！)
      courseD_farmer_condLoops4_2018: |-
        _"哎呀！莴苣都长成团了！"_  \\r
        \\r
        收割者想要从她的莴苣菜园里采摘所有的作物。每个作物都有一个以上的莴苣，因此只要一直有莴苣长出来，收割者就要不停的采摘。 \\r
        \\r

        ##### (记住：这个菜园里只有莴苣！)
      courseD_farmer_condLoops4_2019: |-
        _"哎呀！莴苣都长成团了！"_  \\r
        \\r
        收割者想要从她的莴苣菜园里采摘所有的作物。每个作物都有一个以上的莴苣，因此只要一直有莴苣长出来，收割者就要不停的采摘。 \\r
        \\r

        ##### (记住：这个菜园里只有莴苣！)
      courseD_farmer_condLoops4a: |-
        _"哎呀！现在作物都长成团了！"_  \\r
        \\r
        帮助农夫在移动到下一堆前，采摘每堆的所有莴苣。坚持下去，直到你得到南瓜！
      courseD_farmer_condLoops5: |-
        _"多么茂盛的庄稼！"_\\r
        \\r
        这片田里有一堆玉米和莴苣涨到一起了 -- 最后还有一个南瓜。你能收获所有的作物吗？
      courseD_farmer_condLoops5_2018: |-
        _"多么茂盛的庄稼！"_\\r
        \\r
        这片田里有一堆玉米和莴苣涨到一起了 -- 最后还有一个南瓜。你能收获所有的作物吗？
      courseD_farmer_condLoops5_2019: |-
        _"多么茂盛的庄稼！"_\\r
        \\r
        这片田里有一堆玉米和莴苣涨到一起了 -- 最后还有一个南瓜。你能收获所有的作物吗？
      courseD_farmer_condLoops6: |-
        _"让我们再多走一步！"_\\r
        \\r
        你能想出怎么收获南瓜吗？确保沿途收获了所有的玉米！
      courseD_farmer_condLoops6_2018: |-
        _"让我们再多走一步！"_\\r
        \\r
        你能想出怎么收获南瓜吗？确保沿途收获了所有的玉米！
      courseD_farmer_condLoops6_2019: |-
        _"让我们再多走一步！"_\\r
        \\r
        你能想出怎么收获南瓜吗？确保沿途收获了所有的玉米！
      courseD_farmer_condLoops7: "**挑战：**收集所有的玉米和莴苣，然后捡起南瓜。"
      courseD_farmer_condLoops7_2018: "**挑战：**收集所有的玉米和莴苣，然后捡起南瓜。"
      courseD_farmer_condLoops7_2019: "**挑战：**收集所有的玉米和莴苣，然后捡起南瓜。"
      courseD_farmer_condLoops8: 收集所有的玉米和莴苣，然后捡起南瓜。
      courseD_farmer_condLoops8_2018: 收集所有的玉米和莴苣，然后捡起南瓜。
      courseD_farmer_condLoops8_2019: 收集所有的玉米和莴苣，然后捡起南瓜。
      courseD_farmer_condLoops9: 收集所有的玉米和莴苣，然后捡起南瓜。
      courseD_farmer_condLoops9_2018: 收集所有的玉米和莴苣，然后捡起南瓜。
      courseD_farmer_condLoops9_2019: 收集所有的玉米和莴苣，然后捡起南瓜。
      courseD_farmer_condLoops9_predict1: 收集所有的玉米和莴苣，然后捡起南瓜。
      courseD_farmer_condLoops9_predict1_2018: 收集所有的玉米和莴苣，然后捡起南瓜。
      courseD_farmer_condLoops9_predict1_2019: 收集所有的玉米和莴苣，然后捡起南瓜。
      courseD_farmer_condLoops_challenge1: |-
        有南瓜标记的地方，你应该`向右转`。否则要一直向前走，但记着收集沿途所有的莴苣或玉米。\\r
        \\r
        **每个隐藏的作物只有一个玉米或莴苣。**
      courseD_farmer_condLoops_challenge1_2018: |-
        有南瓜标记的地方，你应该`向右转`。否则要一直向前走，但记着收集沿途所有的莴苣或玉米。\\r
        \\r
        **每个隐藏的作物只有一个玉米或莴苣。**
      courseD_farmer_condLoops_challenge1_2019: |-
        有南瓜标记的地方，你应该`向右转`。否则要一直向前走，但记着收集沿途所有的莴苣或玉米。\\r
        \\r
        **每个隐藏的作物只有一个玉米或莴苣。**
      courseD_farmer_condLoops_challenge2: |-
        _"这是多样的蔬菜迷宫！"_ \\r
        \\r
        在南瓜那里向右转，在莴苣那里向左转。收集所有东西来通过这关。
      courseD_farmer_condLoops_challenge2_2018: |-
        _"这是多样的蔬菜迷宫！"_ \\r
        \\r
        在南瓜那里向右转，在莴苣那里向左转。收集所有东西来通过这关。
      courseD_farmer_condLoops_challenge2_2019: |-
        _"这是多样的蔬菜迷宫！"_ \\r
        \\r
        在南瓜那里向右转，在莴苣那里向左转。收集所有东西来通过这关。
      courseD_farmer_condLoops_challenge2_clone: 这是蔬菜迷宫。在南瓜那里向右转，在莴苣那里向左转。收集所有东西来完成此关卡。
      courseD_farmer_conditionals1: |-
        _"你好，我是一个农夫。我需要你帮我把一块地翻平来为种植做准备！"_\\r
        \\r
        移动到那堆土上面，并使用`移除`模块来移除它。
      courseD_farmer_conditionals3: |-
        _"移动到土堆上，然后告诉我需要多少铲能够夷平。"_\\r
        \\r
        用尽可能少的模块来通过这关。
      courseD_farmer_conditionals4: |-
        _"我不知道这堆有多少土！"_\\r
        \\r
        帮助农夫用`当`循环来移除整堆土。
      courseD_farmer_conditionals6: |-
        看看这些洞！每个都需要不同数量的土。 \\r
        \\r
        你能很容易的用`当`循环来填满它们！
      courseD_farmer_conditionals8: "**挑战：** 用尽可能少的模块填满这些洞。 "
      courseD_farmer_until_challenge2: 使用`如果/否则`模块来跟随这条弯曲的路。在每个转角处，用循环里的`移除一个`模块来清理土堆。
      courseD_farmer_until_challenge2_2018: 使用`如果/否则`模块来跟随这条弯曲的路。在每个转角处，用循环里的`移除一个`模块来清理土堆。
      courseD_farmer_while1: |-
        _"你好，我是一个农夫。我需要你帮我把一块地翻平来为种植做准备！"_\\r
        \\r
        移动到那堆土上面，并使用`移除`模块来移除它。
      courseD_farmer_while1_2018: |-
        _"你好，我是一个农夫。我需要你帮我把一块地翻平来为种植做准备！"_\\r
        \\r
        移动到那堆土上面，并使用`移除`模块来移除它。
      courseD_farmer_while1_2019: |-
        _"你好，我是一个农夫。我需要你帮我把一块地翻平来为种植做准备！"_\\r
        \\r
        移动到那堆土上面，并使用`移除`模块来移除它。
      courseD_farmer_while3: |-
        _"移动到土堆上，然后告诉我需要多少铲能够夷平。"_\\r
        \\r
        用尽可能少的模块来通过这关。
      courseD_farmer_while3_2018: |-
        _"移动到土堆上，然后告诉我需要多少铲能够夷平。"_\\r
        \\r
        用尽可能少的模块来通过这关。
      courseD_farmer_while3_2019: |-
        _"移动到土堆上，然后告诉我需要多少铲能够夷平。"_\\r
        \\r
        用尽可能少的模块来通过这关。
      courseD_farmer_while4: |-
        _"我不知道这堆有多少土！"_\\r
        \\r
        帮助农夫用`当`循环来移除整堆土。
      courseD_farmer_while4_2018: |-
        _"我不知道这堆有多少土！"_\\r
        \\r
        帮助农夫用`当`循环来移除整堆土。
      courseD_farmer_while4_2019: |-
        _"我不知道这堆有多少土！"_\\r
        \\r
        帮助农夫用`当`循环来移除整堆土。
      courseD_farmer_while4_predict1: |-
        _"我不知道这堆有多少土！"_\\r
        \\r
        帮助农夫用`当`循环来移除整堆土。
      courseD_farmer_while4_predict1_2018: |-
        _"我不知道这堆有多少土！"_\\r
        \\r
        帮助农夫用`当`循环来移除整堆土。
      courseD_farmer_while4_predict1_2019: |-
        _"我不知道这堆有多少土！"_\\r
        \\r
        帮助农夫用`当`循环来移除整堆土。
      courseD_farmer_while6: |-
        看看这些洞！每个都需要不同数量的土。 \\r
        \\r
        你能很容易的用`当`循环来填满它们！
      courseD_farmer_while6_2018: |-
        看看这些洞！每个都需要不同数量的土。 \\r
        \\r
        你能很容易的用`当`循环来填满它们！
      courseD_farmer_while6_2019: |-
        看看这些洞！每个都需要不同数量的土。 \\r
        \\r
        你能很容易的用`当`循环来填满它们！
      courseD_farmer_while8: "**挑战：** 用尽可能少的模块填满这些洞。 "
      courseD_farmer_while8_2018: "**挑战：** 用尽可能少的模块填满这些洞。 "
      courseD_farmer_while8_2019: "**挑战：** 用尽可能少的模块填满这些洞。 "
      courseD_farmer_while_challenge1: 填补所有的洞, 并移走所有的土堆。
      courseD_farmer_while_challenge1_2018: 填补所有的洞, 并移走所有的土堆。
      courseD_farmer_while_challenge1_2019: 填补所有的洞, 并移走所有的土堆。
      courseD_farmer_while_challenge2: 填补所有的洞, 并移走所有的土堆。
      courseD_farmer_while_challenge2_2018: 填补所有的洞, 并移走所有的土堆。
      courseD_harvester_nested_loops_challenge1-broken: _"在农场上，我需要一些帮助！只用工具箱里的模块来帮我收获玉米。"_
      courseD_harvester_nested_loops_challenge1: _"在农场上，我需要一些帮助！只用工具箱里的模块来帮我收获玉米。"_
      courseD_harvester_nested_loops_challenge1_2018: _"在农场上，我需要一些帮助！只用工具箱里的模块来帮我收获玉米。"_
      courseD_harvester_nested_loops_challenge1_2019: _"在农场上，我需要一些帮助！只用工具箱里的模块来帮我收获玉米。"_
      courseD_iceage_loops1: 帮助斯奎特穿过溜滑的冰去拿到橡子！
      courseD_iceage_loops10: 帮助斯奎特走过去拿到橡子！
      courseD_iceage_loops10_2019: 帮助斯奎特走过去拿到橡子！
      courseD_iceage_loops11: 帮助斯奎特得到橡子！
      courseD_iceage_loops11_2019: 帮助斯奎特得到橡子！
      courseD_iceage_loops12: 用各种方法来拿到橡子！
      courseD_iceage_loops12_2019: 用各种方法来拿到橡子！
      courseD_iceage_loops1_2019: 帮助斯奎特穿过溜滑的冰去拿到橡子！
      courseD_iceage_loops2: |-
        用一个<xml><block type="maze_turn">\\r
            <title
        name="DIR">turnLeft</title>\\r
          </block></xml>模块来到达橡子！
      courseD_iceage_loops2_2019: |-
        用一个<xml><block type="maze_turn">\\r
            <title
        name="DIR">turnLeft</title>\\r
          </block></xml>模块来到达橡子！
      courseD_iceage_loops3: 你能只用一个 <xml><block type="maze_moveForward"/></xml>模块来获得橡子吗？试试用循环！
      courseD_iceage_loops3_2019: 你能只用一个 <xml><block type="maze_moveForward"/></xml>模块来获得橡子吗？试试用循环！
      courseD_iceage_loops4: 再添加一个模块来让斯奎特用各种方法到达橡子！
      courseD_iceage_loops4_2019: 再添加一个模块来让斯奎特用各种方法到达橡子！
      courseD_iceage_loops6: 你能增加一个循环到达橡子吗？
      courseD_iceage_loops6_2019: 你能增加一个循环到达橡子吗？
      courseD_iceage_loops7: 斯奎特真的想要那个橡子！
      courseD_iceage_loops7_2019: 斯奎特真的想要那个橡子！
      courseD_iceage_loops8: '你能修好这段代码吗？ '
      courseD_iceage_loops8_2019: '你能修好这段代码吗？ '
      courseD_iceage_loops9: 橡子太远了！你能用循环帮助斯奎特到达那里吗？
      courseD_iceage_loops9_2019: 橡子太远了！你能用循环帮助斯奎特到达那里吗？
      courseD_maze_intro4_2019: "”沿着路线，请把我带到猪的位置。”"
      courseD_maze_intro5a_2019: 注意顺序，看看你能否找出如何到达那头猪！
      courseD_maze_intro5c_2019: 小心TNT炸药！帮助小鸟到达猪的位置。
      courseD_maze_loops_challenge1: |-
        让我们寻找宝藏

        -   使用循环！帮助收集器只使用工具箱中的模块来得到至少两堆宝藏。
      courseD_maze_nestedLoops3: |-
        _"僵尸饿了！"_\\r
        \\r
        用尽可能少的模块让僵尸到达向日葵。
      courseD_maze_nestedLoops3_2018: |-
        _"僵尸饿了！"_\\r
        \\r
        用尽可能少的模块让僵尸到达向日葵。
      courseD_maze_nestedLoops3_2019: |-
        _"僵尸饿了！"_\\r
        \\r
        用尽可能少的模块让僵尸到达向日葵。
      courseD_maze_nestedLoops4: '用尽可能少的模块让僵尸到达向日葵！  '
      courseD_maze_nestedLoops4_2018: '用尽可能少的模块让僵尸到达向日葵！  '
      courseD_maze_nestedLoops4_2019: '用尽可能少的模块让僵尸到达向日葵！  '
      courseD_maze_nestedLoops6: |-
        _"一定要吃到向日葵！"_\\r
        \\r
        用仅有的模块来让僵尸到达向日葵。
      courseD_maze_nestedLoops6_2018: |-
        _"一定要吃到向日葵！"_\\r
        \\r
        用仅有的模块来让僵尸到达向日葵。
      courseD_maze_nestedLoops6_2019: |-
        _"一定要吃到向日葵！"_\\r
        \\r
        用仅有的模块来让僵尸到达向日葵。
      courseD_maze_ramp1: 对于这个关卡，把所有的块都拼在一起，并点击"运行"来看看！
      courseD_maze_ramp1_2018: 对于这个关卡，把所有的块都拼在一起，并点击"运行"来看看！
      courseD_maze_ramp1_2019: 对于这个关卡，把所有的块都拼在一起，并点击"运行"来看看！
      courseD_maze_ramp2: 将额外的`向前移动`块拖出工具箱, 然后将所有块附加到`当运行时`以完成代码。
      courseD_maze_ramp2_2018: 将额外的`向前移动`块拖出工具箱, 然后将所有块附加到`当运行时`以完成代码。
      courseD_maze_ramp2_2019: 将额外的`向前移动`块拖出工具箱, 然后将所有块附加到`当运行时`以完成代码。
      courseD_maze_ramp3: |-
        _"这只猪把我的羽毛弄皱了。"_\\r
        \\r
        这里有一个额外的模块会让小鸟坠落。\\r
        将它从其它模块上移除，并拖回工具箱来扔掉。
      courseD_maze_ramp3_2018: |-
        _"这只猪把我的羽毛弄皱了。"_\\r
        \\r
        这里有一个额外的模块会让小鸟坠落。\\r
        将它从其它模块上移除，并拖回工具箱来扔掉。
      courseD_maze_ramp3_2019: |-
        _"这只猪把我的羽毛弄皱了。"_\\r
        \\r
        这里有一个额外的模块会让小鸟坠落。\\r
        将它从其它模块上移除，并拖回工具箱来扔掉。
      courseD_maze_ramp4: |-
        _"沿着这条路带我去找那只笨猪。"_\\r
        \\r
        躲开 TNT 炸药，不然我的羽毛就要被炸飞了！
      courseD_maze_ramp4_2018: |-
        _"沿着这条路带我去找那只笨猪。"_\\r
        \\r
        躲开 TNT 炸药，不然我的羽毛就要被炸飞了！
      courseD_maze_ramp4_2019: |-
        _"沿着这条路带我去找那只笨猪。"_\\r
        \\r
        躲开 TNT 炸药，不然我的羽毛就要被炸飞了！
      courseD_maze_ramp5: |-
        _"沿着这条路，让我到猪那里！"_\\r
        \\r
        躲开TNT炸药。
      courseD_maze_ramp5_2018: |-
        _"沿着这条路，让我到猪那里！"_\\r
        \\r
        躲开TNT炸药。
      courseD_maze_ramp5_2019: |-
        _"沿着这条路，让我到猪那里！"_\\r
        \\r
        躲开TNT炸药。
      courseD_maze_ramp5a: 注意顺序，看看你能否找出如何到达那头猪！
      courseD_maze_ramp5a_2018: 注意顺序，看看你能否找出如何到达那头猪！
      courseD_maze_ramp5a_2019: 注意顺序，看看你能否找出如何到达那头猪！
      courseD_maze_ramp5b: "**挑战：**在这个迷宫中导航，帮助小鸟找到猪！"
      courseD_maze_ramp5b_2018: "**挑战：**在这个迷宫中导航，帮助小鸟找到猪！"
      courseD_maze_ramp5b_2019: "**挑战：**在这个迷宫中导航，帮助小鸟找到猪！"
      courseD_maze_ramp5c: 帮小鸟到达猪那里。
      courseD_maze_ramp5c_2018: 帮小鸟到达猪那里。
      courseD_maze_ramp5c_2019: 帮小鸟到达猪那里。
      courseD_maze_ramp5d: 帮小鸟到达那只猪。
      courseD_maze_ramp5d_2018: 帮小鸟到达那只猪。
      courseD_maze_ramp5d_2019: 帮小鸟到达那只猪。
      courseD_maze_ramp6: |-
        _"保持冷静，帮我找到坏猪。否则，我会生气的！"_\\r
        \\r
        当你将几个同样的模块排成一列时，试试用一个`重复`循环来代替。这用更少的代码来做相同的事情！
      courseD_maze_ramp6a: |-
        _"保持冷静，帮我找到坏猪。否则，我会生气的！"_\\r
        \\r
        当你将几个同样的模块排成一列时，试试用一个`重复`循环来代替。这用更少的代码来做相同的事情！
      courseD_maze_ramp7: |-
        _"我该生气了！"_  \\r
        \\r
        \\r
        用你学到的知识来帮小鸟抓到猪！
      courseD_maze_until10: 帮助僵尸到达向日葵。
      courseD_maze_until10_2018: 帮助僵尸到达向日葵。
      courseD_maze_until10_2019: 帮助僵尸到达向日葵。
      courseD_maze_until10_predict2: 帮助僵尸到达向日葵。
      courseD_maze_until10_predict2_2018: 帮助僵尸到达向日葵。
      courseD_maze_until10_predict2_2019: 帮助僵尸到达向日葵。
      courseD_maze_until2: 现在，用`重复直到`循环来做同样的事情，而不用指定需要多少次向前移动和转向。
      courseD_maze_until4: |-
        _"亲爱的人。我，僵尸。我，饿了。必须... 到... 向日葵那..."_\\r
        \\r
        你能只用这些模块让僵尸到达向日葵吗？
      courseD_maze_until4_2018: |-
        _"亲爱的人。我，僵尸。我，饿了。必须... 到... 向日葵那..."_\\r
        \\r
        你能只用这些模块让僵尸到达向日葵吗？
      courseD_maze_until4_2019: |-
        _"亲爱的人。我，僵尸。我，饿了。必须... 到... 向日葵那..."_\\r
        \\r
        你能只用这些模块让僵尸到达向日葵吗？
      courseD_maze_until5: 用`如果`模块来帮助僵尸决定何时转弯，然后让僵尸到达向日葵那里。
      courseD_maze_until5_2018: 用`如果`模块来帮助僵尸决定何时转弯，然后让僵尸到达向日葵那里。
      courseD_maze_until5_2019: 用`如果`模块来帮助僵尸决定何时转弯，然后让僵尸到达向日葵那里。
      courseD_maze_until6: 帮助僵尸到达向日葵。
      courseD_maze_until6_2018: 帮助僵尸到达向日葵。
      courseD_maze_until6_2019: 帮助僵尸到达向日葵。
      courseD_maze_until7: 帮助僵尸到达向日葵。
      courseD_maze_until7_2018: 帮助僵尸到达向日葵。
      courseD_maze_until7_2019: 帮助僵尸到达向日葵。
      courseD_maze_until8: 帮助僵尸到达向日葵。
      courseD_maze_until8_2018: 帮助僵尸到达向日葵。
      courseD_maze_until9: "**挑战：** 躲开食人花，让僵尸到达向日葵那里。"
      courseD_maze_until9_2018: "**挑战：** 躲开食人花，让僵尸到达向日葵那里。"
      courseD_maze_until9_2019: "**挑战：** 躲开食人花，让僵尸到达向日葵那里。"
      courseD_maze_until_challenge: |-
        没有提示，只有挑战。把僵尸带到向日葵那里。\\r
        记号说明
      courseD_maze_until_challenge1-delete-this-copy: |-
        没有提示，只有挑战。把僵尸带到向日葵那里。\\r
        记号说明
      courseD_maze_until_challenge1: 没有提示，只有挑战。把僵尸带到向日葵那里。
      courseD_maze_until_challenge1_2018: 没有提示，只有挑战。把僵尸带到向日葵那里。
      courseD_maze_until_challenge2: |-
        没有提示，只有挑战。把僵尸带到向日葵那里。\\r
        记号说明
      courseD_pixelation: |-
        # 制作自己的任何大小的图片\\r

        \\r
        ![](https://images.code.org/01c15fed4f1a2c6c3af531edc35e736e-image-1439596066108.png)\\r
        ![](https://images.code.org/24efcaa184d1fc852f37c32911b3b87c-image-1439596070178.png)\\r
        ![](https://images.code.org/c9a5d0fd5ba445b7f6b5744e08b50e49-image-1439596071878.png)\\r
        ![](https://images.code.org/f14e1b8dd722b0ca5bc54fa96b34f2eb-image-1439596074236.png)\\r
        ![](https://images.code.org/fe938c0c16453b9d461b4023098079df-image-1439596075744.png)\\r
        ![](https://images.code.org/02c88a7da51289b2f2d1f64bd8c97b28-image-1439596077514.png)\\r
        ![](https://images.code.org/309e3157dcfd91956181007f483f8e58-image-1439596079084.png)\\r
        \\r
        \\r
        **指导：**\\r
        \\r
        \*
        用`二进制`将任何你喜欢的图片编码。在下面敲入0和1来创建图片。\\r

        -   你可能想线做些计划，并先在纸上勾画轮廓。\\r
        -   创造它吧！你想画什么？
      courseD_playLab_cond1: |-
        为了开始游戏，海盗（演员1）需要能往所有方向走动。将模块连接到正确的事件上让海盗能移动。 \\r
        \\r
        \---\\r
        帮助海盗收集旗帜来通过这关。
      courseD_playLab_cond1_2018: |-
        为了开始游戏，海盗（演员1）需要能往所有方向走动。将模块连接到正确的事件上让海盗能移动。 \\r
        \\r
        \---\\r
        帮助海盗收集旗帜来通过这关。
      courseD_playLab_cond1_2019: |-
        为了开始游戏，海盗（演员1）需要能往所有方向走动。将模块连接到正确的事件上让海盗能移动。 \\r
        \\r
        \---\\r
        帮助海盗收集旗帜来通过这关。
      courseD_playLab_cond2: "该加分了！  \\\\r\n\\\\r\n编辑代码，当海盗（演员1）到达龙（演员 2）时，给他加一分。 "
      courseD_playLab_cond2_2018: "该加分了！  \\\\r\n\\\\r\n编辑代码，当海盗（演员1）到达龙（演员 2）时，给他加一分。 "
      courseD_playLab_cond2_2019: "该加分了！  \\\\r\n\\\\r\n编辑代码，当海盗（演员1）到达龙（演员 2）时，给他加一分。 "
      courseD_playLab_cond3: '用`一直重复`循环来让龙（演员2）每秒钟随机改变一次表情。  '
      courseD_playLab_cond3_2018: '用`一直重复`循环来让龙（演员2）每秒钟随机改变一次表情。  '
      courseD_playLab_cond3_2019: '用`一直重复`循环来让龙（演员2）每秒钟随机改变一次表情。  '
      courseD_playLab_cond3a: |-
        是时候用我们学到的关于条件的内容来让游戏更精彩了。 \\r
        \\r
        添加代码，当海盗到达龙时，_如果_龙高兴，他就得两分。否则，只能加一分。
      courseD_playLab_cond3a_2018: |-
        是时候用我们学到的关于条件的内容来让游戏更精彩了。 \\r
        \\r
        添加代码，当海盗到达龙时，_如果_龙高兴，他就得两分。否则，只能加一分。
      courseD_playLab_cond3a_2019: |-
        是时候用我们学到的关于条件的内容来让游戏更精彩了。 \\r
        \\r
        添加代码，当海盗到达龙时，_如果_龙高兴，他就得两分。否则，只能加一分。
      courseD_playLab_cond3b: 用一个`永远重复`循环让龙（演员2）永远上下移动！在龙的`向上移动`和`向下移动`模块间增加一个`等待1秒钟`模块。
      courseD_playLab_cond4: |-
        开始有趣了！\\r
        \\r
        添加一些代码，让忍者（演员3）在游戏开始时尽快抓住海盗。如果忍者在游戏结束时还没有抓住，就输了。
      courseD_playLab_cond4_2018: |-
        开始有趣了！\\r
        \\r
        添加一些代码，让忍者（演员3）在游戏开始时尽快抓住海盗。如果忍者在游戏结束时还没有抓住，就输了。
      courseD_playLab_cond4_2019: |-
        开始有趣了！\\r
        \\r
        添加一些代码，让忍者（演员3）在游戏开始时尽快抓住海盗。如果忍者在游戏结束时还没有抓住，就输了。
      courseD_playLab_cond5: |-
        现在，我们需要一种赢得方法。\\r
        \\r
        添加`一直重复`循环，让它不断检查**如果**比分大于5，就按照**胜利**来结束游戏。
      courseD_playLab_cond5_2018: |-
        现在，我们需要一种赢得方法。\\r
        \\r
        添加`一直重复`循环，让它不断检查**如果**比分大于5，就按照**胜利**来结束游戏。
      courseD_playLab_cond5_2019: |-
        现在，我们需要一种赢得方法。\\r
        \\r
        添加`一直重复`循环，让它不断检查**如果**比分大于5，就按照**胜利**来结束游戏。
      courseD_playLab_cond6: "哇，这个游戏很难赢！\\\\r\n\\\\r\n让我们自定义游戏来让它更有趣。有两部分挑战：\\\\r\n\\_\\_\\_\\\\r\n\\\\r\n\n1.  在你设置忍者（演员3）去抓海盗（演员1）前，让他变得更慢。  \\\\r\n    \\\\r\n2.  用`一直重复`循环来看看是否海盗在\"安全区\"，即章鱼线下面（大于225像素下）。如果他在，设置忍者**远离**海盗。否则，让忍者**抓住**海盗。  "
      courseD_playLab_cond6_2018: "哇，这个游戏很难赢！\\\\r\n\\\\r\n让我们自定义游戏来让它更有趣。有两部分挑战：\\\\r\n\\_\\_\\_\\\\r\n\\\\r\n\n1.  在你设置忍者（演员3）去抓海盗（演员1）前，让他变得更慢。  \\\\r\n    \\\\r\n2.  用`一直重复`循环来看看是否海盗在\"安全区\"，即章鱼线下面（大于225像素下）。如果他在，设置忍者**远离**海盗。否则，让忍者**抓住**海盗。  "
      courseD_playLab_cond6_2019: "哇，这个游戏很难赢！\\\\r\n\\\\r\n让我们自定义游戏来让它更有趣。有两部分挑战：\\\\r\n\\_\\_\\_\\\\r\n\\\\r\n\n1.  在你设置忍者（演员3）去抓海盗（演员1）前，让他变得更慢。  \\\\r\n    \\\\r\n2.  用`一直重复`循环来看看是否海盗在\"安全区\"，即章鱼线下面（大于225像素下）。如果他在，设置忍者**远离**海盗。否则，让忍者**抓住**海盗。  "
      courseD_playLab_cond6a: |-
        我们不想让海盗呆在"安全区"太久！ \\r
        \\r
        在`如果`语句下增加代码，如果海盗（演员1）在安全区里，程序等一秒，然后只要他呆在章鱼线下，就减一分。
      courseD_playLab_cond6a_2018: |-
        我们不想让海盗呆在"安全区"太久！ \\r
        \\r
        在`如果`语句下增加代码，如果海盗（演员1）在安全区里，程序等一秒，然后只要他呆在章鱼线下，就减一分。
      courseD_playLab_cond6a_2019: |-
        我们不想让海盗呆在"安全区"太久！ \\r
        \\r
        在`如果`语句下增加代码，如果海盗（演员1）在安全区里，程序等一秒，然后只要他呆在章鱼线下，就减一分。
      courseD_playLab_cond6cloneForTest: 我们能让这个工作吗？
      courseD_playLab_condFP_2018: |-
        现在让我们创建自己的游戏, 并向你的朋友展示!

        * * *

        你可以:
        \-让海盗和忍者一起从章鱼那里得到分数
        \-让两个章鱼跟随海盗, 当章鱼和忍者发生碰撞的时候, 对忍者进行双重的攻击
        \-当角色被忍者碰到的时候, 这个角色就消失
        \-发明自己的游戏!
      courseD_playLab_condFP_2019: |-
        现在让我们创建自己的游戏, 并向你的朋友展示!

        * * *

        你可以:
        \-让海盗和忍者一起从章鱼那里得到分数
        \-让两个章鱼跟随海盗, 当章鱼和忍者发生碰撞的时候, 对忍者进行双重的攻击
        \-当角色被忍者碰到的时候, 这个角色就消失
        \-发明自己的游戏!
      courseD_scrat_ramp1: 对于这个关卡，把所有的块都拼在一起，并点击"运行"来看看！
      courseD_scrat_ramp1_2018: 对于这个关卡，把所有的块都拼在一起，并点击"运行"来看看！
      courseD_scrat_ramp2: 将额外的`向前移动`块拖出工具箱, 然后将所有块附加到`当运行时`以完成代码。
      courseD_scrat_ramp2_2018: 将额外的`向前移动`块拖出工具箱, 然后将所有块附加到`当运行时`以完成代码。
      courseD_scrat_ramp3: |-
        这里有个额外的模块让斯奎特崩溃。 \\r
        通过将它和别的模块分开，并拖回工具箱来扔掉它。
      courseD_scrat_ramp3_2018: |-
        这里有个额外的模块让斯奎特崩溃。 \\r
        通过将它和别的模块分开，并拖回工具箱来扔掉它。
      courseD_scrat_ramp4: 绕开裂纹的冰来保持斯奎特的安全!
      courseD_scrat_ramp4_2018: 绕开裂纹的冰来保持斯奎特的安全!
      courseD_scrat_ramp5: 绕开破冰！
      courseD_scrat_ramp5_2018: 绕开破冰！
      courseD_scrat_ramp6: 使用循环帮助斯奎特得到橡子!
      courseD_scrat_ramp6_2018: 使用循环帮助斯奎特得到橡子!
      courseD_scrat_ramp7: 帮助斯奎特得到橡子！
      courseD_scrat_ramp7_2018: 帮助斯奎特得到橡子！
      courseD_scrat_ramp8: "**挑战：**用你学到的东西让斯奎特得到橡子!"
      courseD_scrat_ramp8_2018: "**挑战：**用你学到的东西让斯奎特得到橡子!"
      courseE_artist_concept1: |-
        重新创建图像。 \\r
        \\r
        \-
        六边形边长50像素\\r

        -   六边形之间相隔100像素\\r
        -   \-
            六边形笔的宽度是1像素，4像素和8像素。
      courseE_artist_concept1_2018: |-
        重新创建图像。 \\r
        \\r
        \-
        六边形边长50像素\\r

        -   六边形之间相隔100像素\\r
        -   \-
            六边形笔的宽度是1像素，4像素和8像素。
      courseE_artist_concept1_2019: |-
        重新创建图像。 \\r
        \\r
        \-
        六边形边长50像素\\r

        -   六边形之间相隔100像素\\r
        -   \-
            六边形笔的宽度是1像素，4像素和8像素。
      courseE_artist_concept4: |-
        重新创建这幅图。
        \\r
        \\r
        E每个正方形的边长是**20像素**，并且**每行有15个正方形**。
      courseE_artist_concept4_2018: |-
        重新创建这幅图。
        \\r
        \\r
        E每个正方形的边长是**20像素**，并且**每行有15个正方形**。
      courseE_artist_concept4_2019: |-
        重新创建这幅图。
        \\r
        \\r
        E每个正方形的边长是**20像素**，并且**每行有15个正方形**。
      courseE_artist_concept_challenge1: |-
        <img src="https://images.code.org/6cac10470af71bbb5d75bf5e2669046f-image-1439939145211.png"
        width="200px"/>\\r
        \\r
        该挑战了！\\r
        \\r
        这个设计只用了你看到的模块来做的。你能想出怎么重新创建它吗？随意试错。不需要第一次就画得很完美。
      courseE_artist_concept_challenge1_2018: |-
        <img src="https://images.code.org/6cac10470af71bbb5d75bf5e2669046f-image-1439939145211.png"
        width="200px"/>\\r
        \\r
        该挑战了！\\r
        \\r
        这个设计只用了你看到的模块来做的。你能想出怎么重新创建它吗？随意试错。不需要第一次就画得很完美。
      courseE_artist_concept_challenge1_2019: |-
        <img src="https://images.code.org/6cac10470af71bbb5d75bf5e2669046f-image-1439939145211.png"
        width="200px"/>\\r
        \\r
        该挑战了！\\r
        \\r
        这个设计只用了你看到的模块来做的。你能想出怎么重新创建它吗？随意试错。不需要第一次就画得很完美。
      courseE_artist_concept_challenge2: 使用下面的代码创建五个风车的设计。
      courseE_artist_concept_challenge2_2018: 使用下面的代码创建五个风车的设计。
      courseE_artist_concept_challenge2_2019: 使用下面的代码创建五个风车的设计。
      courseE_artist_functions1: |-
        _"我僵尸艺术家。我喜欢画！"_\\r
        \\r
        帮助僵尸用边长100像素的正方形画眼镜。  \\r
        镜片间的桥是75像素长。\\r
        \\r
      courseE_artist_functions10: |-
        这次，用8个25像素边长的六边形画线。\\r
        \\r

        -   为了画出每个六边形，重复6次，每次转60度。\\r
        -   在每个六边形间跳25像素。\\r
        -   为了画出一个钻石，你需要交替转向60度和120度。
      courseE_artist_functions10_2018: |-
        这次，用8个25像素边长的六边形画线。\\r
        \\r

        -   为了画出每个六边形，重复6次，每次转60度。\\r
        -   在每个六边形间跳25像素。\\r
        -   为了画出一个钻石，你需要交替转向60度和120度。
      courseE_artist_functions10_2019: |-
        这次，用8个25像素边长的六边形画线。\\r
        \\r

        -   为了画出每个六边形，重复6次，每次转60度。\\r
        -   在每个六边形间跳25像素。\\r
        -   为了画出一个钻石，你需要交替转向60度和120度。
      courseE_artist_functions1_2018: |-
        _"我僵尸艺术家。我喜欢画！"_\\r
        \\r
        帮助僵尸用边长100像素的正方形画眼镜。  \\r
        镜片间的桥是75像素长。\\r
        \\r
      courseE_artist_functions2: |-
        函数能让你定义新的模块。\\r
        \\r
        我们将画正方形的模块挪到了一个叫做`draw a square`（画一个正方形）的函数里。这次，用`draw a square`（画一个正方形）函数来画个眼镜。\\r

        <hr/>\r
        \r
        正方形间隔75像素。
      courseE_artist_functions2_2018: |-
        这里有一个叫做`draw a square`（画一个正方形）的函数。用它来完成这幅图。\\r
        \_\_\_\\r
        \\r
        正方形间隔75像素。
      courseE_artist_functions2_2019: |-
        这里有一个叫做`draw a square`（画一个正方形）的函数。用它来完成这幅图。\\r
        \_\_\_\\r
        \\r
        正方形间隔75像素。
      courseE_artist_functions3: |-
        我们很快就会回到函数部分。让我们先休息一下，练习画这个星星。\\r
        \\r
        可以通过增加一个重复循环来画这幅图。
      courseE_artist_functions3_2018: |-
        我们很快就会回到函数部分。让我们先休息一下，练习画这个星星。\\r
        \\r
        可以通过增加一个重复循环来画这幅图。
      courseE_artist_functions3_2019: |-
        我们很快就会回到函数部分。让我们先休息一下，练习画这个星星。\\r
        \\r
        可以通过增加一个重复循环来画这幅图。
      courseE_artist_functions4: |-
        现在，你已经能画一个星星了，试着画4个星星！\\r
        \\r

        -   每个行星的分支是25像素长\\r
        -   在分支之间转45度\\r
        -   在每个星星间跳100像素
      courseE_artist_functions4_2018: |-
        现在，你已经能画一个星星了，试着画4个星星！\\r
        \\r

        -   每个行星的分支是25像素长\\r
        -   在分支之间转45度\\r
        -   在每个星星间跳100像素
      courseE_artist_functions5: |-
        什么时候画三个星星会比画4个难？当你需要跳过月亮的时候！\\r
        \\r
        只画出三个星星来完成这关。
      courseE_artist_functions5_2018: |-
        什么时候画三个星星会比画4个难？当你需要跳过月亮的时候！\\r
        \\r
        只画出三个星星来完成这关。
      courseE_artist_functions5_2019: |-
        什么时候画三个星星会比画4个难？当你需要跳过月亮的时候！\\r
        \\r
        只画出三个星星来完成这关。
      courseE_artist_functions6: |-
        做得很好！ \\r
        \\r
        通过画一个正方形来制作这个窗户，然后在画另一个前转90度，以此类推。
      courseE_artist_functions6_2018: |-
        做得很好！ \\r
        \\r
        通过画一个正方形来制作这个窗户，然后在画另一个前转90度，以此类推。
      courseE_artist_functions7: |-
        让我们将画窗口的代码拿走，并增加到函数`画一个窗户`中。现在只要需要，就能调用这个函数了，还不用再写一遍这个代码。
        \\r
        \\r
        ![](https://images.code.org/615a5e93abdaffeed438a976a56fc1f5-image-1497998528859.gif)\\r
        \\r
        试着创建一个`画一个窗户`的函数并调用它5次。小心门！\\r
        \\r

        -   上面的的窗户每个之间50像素远。 \\r
        -   下面的窗户和上面的相隔100像素。
      courseE_artist_functions7_2018: |-
        一个一个的画所有这些窗口会很痛苦！ \\r
        \\r
        试着创建一个`draw a window`（画一个窗户）函数，并调用它5次来解决这个问题。小心门！\\r
        \\r
        \--- \\r

        -   每个窗户由4个 **25** 像素的正方形组成。\\r
        -   最上面的窗户相距 **100** 像素。 \\r
        -   下面的窗户离上面的有 **150** 像素。
      courseE_artist_functions7_2019: |-
        一个一个的画所有这些窗口会很痛苦！ \\r
        \\r
        试着创建一个`draw a window`（画一个窗户）函数，并调用它5次来解决这个问题。小心门！\\r
        \\r
        \--- \\r

        -   每个窗户由4个 **25** 像素的正方形组成。\\r
        -   最上面的窗户相距 **100** 像素。 \\r
        -   下面的窗户离上面的有 **150** 像素。
      courseE_artist_functions8: |-
        **挑战：**你知道怎么从其它函数_内部_调用函数吗？！\\r
        \\r
        创建尽可能多的，你觉得需要的函数来画这些50像素的正方形。
      courseE_artist_functions8a_2018: |-
        _"函数真容易!"_\\r
        \\r
        我们要开始构建一些奇特的东西！从为这个正方形创建函数开始。
      courseE_artist_functions8a_2019: |-
        _"函数真容易!"_\\r
        \\r
        我们要开始构建一些奇特的东西！从为这个正方形创建函数开始。
      courseE_artist_functions8b_2018: |-
        _"僵尸头晕了。"_\\r
        \\r
        从`draw a line of squares`（用正方形画一条线）函数中调用`draw a square`（画一个正方形）函数来让它简单点！\\r
        \\r
        \---\\r
        \\r

        -   正方形之间相距 _50_ 像素。
      courseE_artist_functions8b_2019: |-
        _"僵尸头晕了。"_\\r
        \\r
        从`draw a line of squares`（用正方形画一条线）函数中调用`draw a square`（画一个正方形）函数来让它简单点！\\r
        \\r
        \---\\r
        \\r

        -   正方形之间相距 _50_ 像素。
      courseE_artist_functions8c_2018: 再增加一个函数用`draw a line of squares`（用正方形画一条线）函数来创建交错正方形的堆栈。
      courseE_artist_functions8c_2019: 再增加一个函数用`draw a line of squares`（用正方形画一条线）函数来创建交错正方形的堆栈。
      courseE_artist_functions9: |-
        用提供的有限的模块来创造这幅图。 \\r
        \\r

        -   每个三角形的边长是**50像素**  \\r
        -   \-
            为了画钻石，你需要交替转向**60度和120度**。
      courseE_artist_functions9_2018: |-
        **挑战**：用提供的有限的模块来创造这幅图。 \\r
        \\r

        -   每个三角形的边长是**50像素**  \\r
        -   \-
            为了画钻石，你需要交替转向**60度和120度**。
      courseE_artist_functions9_2019: |-
        **挑战**：用提供的有限的模块来创造这幅图。 \\r
        \\r

        -   每个三角形的边长是**50像素**  \\r
        -   \-
            为了画钻石，你需要交替转向**60度和120度**。
      courseE_artist_functionsProj_2018: |-
        **灵感:** 用你学过的知识来做自己想做的东西！  \\r
        \\r
        你能做一些像这个风车一样的东西吗？
      courseE_artist_functionsProj_2019: |-
        **灵感:** 用你学过的知识来做自己想做的东西！  \\r
        \\r
        你能做一些像这个风车一样的东西吗？
      courseE_artist_functions_challenge: 一旦你定义了一个函数, 你可以随心所欲一次又一次地调用它! 尝试此代码, 看看它是如何工作的, 然后改变它, 让您自己的设计更出色！
      courseE_artist_functions_challenge1: 一旦你定义了一个函数, 你可以随心所欲一次又一次地调用它! 尝试此代码, 看看它是如何工作的, 然后改变它, 让您自己的设计更出色！
      courseE_artist_functions_challenge1_2018: 一旦你定义了一个函数, 你可以随心所欲一次又一次地调用它! 尝试此代码, 看看它是如何工作的, 然后改变它, 让您自己的设计更出色！
      courseE_artist_functions_challenge1_2019: 一旦你定义了一个函数, 你可以随心所欲一次又一次地调用它! 尝试此代码, 看看它是如何工作的, 然后改变它, 让您自己的设计更出色！
      courseE_artist_functions_challenge2: |-
        你不仅能跳到一些预先设定的位置，比如画布的角落，你还能用`跳到`命令来到任何想去的绝对位置上！试试看这个代码，理解它的原理，并做出自己的程序！

        <xml>
        <block type="jump_to_xy">
        <title name="XPOS">???</title>
        <title name="YPOS">???</title>
        </block></xml>
      courseE_artist_functions_challenge2_2018: |-
        你不仅能跳到一些预先设定的位置，比如画布的角落，你还能用`跳到`命令来到任何想去的绝对位置上！试试看这个代码，理解它的原理，并做出自己的程序！

        <xml>
        <block type="jump_to_xy">
        <title name="XPOS">???</title>
        <title name="YPOS">???</title>
        </block></xml>
      courseE_artist_functions_challenge2_2019: |-
        你不仅能跳到一些预先设定的位置，比如画布的角落，你还能用`跳到`命令来到任何想去的绝对位置上！试试看这个代码，理解它的原理，并做出自己的程序！

        <xml>
        <block type="jump_to_xy">
        <title name="XPOS">???</title>
        <title name="YPOS">???</title>
        </block></xml>
      courseE_artist_functions_predict1: 这是用了我们已经定义过的程序的关卡。 \\r
      courseE_artist_functions_predict1_2018: '这是用了我们已经定义过的程序的关卡。 '
      courseE_artist_functions_predict1_2019: 这是用了我们已经定义过的程序的关卡。 \\r
      courseE_artist_ramp10: |-
        你知道能把一个循环放到另一个里，让它更强大吗？这叫做"嵌套循环"。\\r
        \\r
        \_\_\_\\r
        \\r
        拖拽上一个三角形的代码到新循环里来旋转它，并制作一个雪花！\\r
        \\r
        _(需要旋转它6次，每次60度，来画出这个图案。)_
      courseE_artist_ramp11: |-
        太棒了！让我们用小艺术家画一个正方形！这些模块有点不同，但概念是一样的。\\r

        <hr/>\r
        正方形的每条边是200像素长，需要转90度来画每个角。
      courseE_artist_ramp12: |-
        用你学过的知识在三角形里画个正方形。\\r

        <hr/>\r
        每条边都是200像素长。需要转90度来画正方形，转120度来画三角形。
      courseE_artist_ramp8: |-
        太棒了！让我们用`重复`和小艺术家画一个正方形！小艺术家模块和其它关有点不同，但概念是一样的。\\r
        \_\_\_\\r

        ##### 正方形的每条边长度是200像素，需要转90度来形成每个角。
      courseE_artist_ramp8_2: |-
        太棒了！让我们用`重复`和小艺术家画一个正方形！小艺术家模块和其它关有点不同，但概念是一样的。\\r
        \_\_\_\\r

        ##### 正方形的每条边长度是200像素，需要转90度来形成每个角。
      courseE_artist_ramp8_2018: |-
        太棒了！让我们用`重复`和小艺术家画一个正方形！小艺术家模块和其它关有点不同，但概念是一样的。\\r
        \_\_\_\\r

        ##### 正方形的每条边长度是200像素，需要转90度来形成每个角。
      courseE_artist_ramp8_2_2018: |-
        太棒了！让我们用`重复`和小艺术家画一个正方形！小艺术家模块和其它关有点不同，但概念是一样的。\\r
        \_\_\_\\r

        ##### 正方形的每条边长度是200像素，需要转90度来形成每个角。
      courseE_artist_ramp9: |-
        用你所学的来画个等边三角形。\\r
        \_\_\_\\r

        ##### 这些边每条都是100像素长。每个角转120度。
      courseE_artist_ramp9_2: |-
        用你所学的来画个等边三角形。\\r
        \_\_\_\\r

        ##### 这些边每条都是100像素长。每个角转120度。
      courseE_artist_ramp9_2018: |-
        用你所学的来画个等边三角形。\\r
        \_\_\_\\r

        ##### 这些边每条都是100像素长。每个角转120度。
      courseE_artist_ramp9_2_2018: |-
        用你所学的来画个等边三角形。\\r
        \_\_\_\\r

        ##### 这些边每条都是100像素长。每个角转120度。
      courseE_bee_concept1: "_\"你能相信这些都是花吗？\"_\\\\r\n\\\\r\n从每朵花收集所有的花蜜。 "
      courseE_bee_concept1_2018: "_\"你能相信这些都是花吗？\"_\\\\r\n\\\\r\n从每朵花收集所有的花蜜。 "
      courseE_bee_concept1_2019: "_\"你能相信这些都是花吗？\"_\\\\r\n\\\\r\n从每朵花收集所有的花蜜。 "
      courseE_bee_concept2: |-
        帮助蜜蜂酿造所有蜂蜜。 \\r
        \\r
        只能在蜂窝酿蜂蜜，但可以检查每个空间是否有蜂窝。
      courseE_bee_concept2_2018: |-
        帮助蜜蜂酿造所有蜂蜜。 \\r
        \\r
        只能在蜂窝酿蜂蜜，但可以检查每个空间是否有蜂窝。
      courseE_bee_concept2_2019: |-
        帮助蜜蜂酿造所有蜂蜜。 \\r
        \\r
        只能在蜂窝酿蜂蜜，但可以检查每个空间是否有蜂窝。
      courseE_bee_concept5: |-
        你能帮助蜜蜂从花里收集所有花蜜吗？ \\r
        \\r
        只能从花里收集花蜜，但可以检查任何空间，看看是否有花。
      courseE_bee_concept5_2018: |-
        你能帮助蜜蜂从花里收集所有花蜜吗？ \\r
        \\r
        只能从花里收集花蜜，但可以检查任何空间，看看是否有花。
      courseE_bee_concept5_2019: |-
        你能帮助蜜蜂从花里收集所有花蜜吗？ \\r
        \\r
        只能从花里收集花蜜，但可以检查任何空间，看看是否有花。
      courseE_bee_functions10: |-
        _"给我看看蜂蜜！"_\\r
        \\r
        通过创建一个函数让蜜蜂做下面的事情来过关： \\r

        -   朝路径前面的分支转向\\r
        -   向前移动\\r
        -   酿造所有蜂蜜\\r
        -   转向主路 \\r
        -   转回原来的方向
      courseE_bee_functions10_2018: |-
        _"给我看看蜂蜜！"_\\r
        \\r
        通过创建一个函数让蜜蜂做下面的事情来过关： \\r

        -   朝路径前面的分支转向\\r
        -   向前移动\\r
        -   酿造所有蜂蜜\\r
        -   转向主路 \\r
        -   转回原来的方向
      courseE_bee_functions2: |-
        函数能执行多个模块来完成一个任务。\\r
        \\r
        使用`采2个花蜜`函数来从每朵花采花蜜。
      courseE_bee_functions2_2018: |-
        函数能执行多个模块来完成一个任务。\\r
        \\r
        使用`采2个花蜜`函数来从每朵花采花蜜。
      courseE_bee_functions3: 构建`获取5个`函数, 以便在这个关卡中使用。
      courseE_bee_functions3_2018: 构建`获取5个`函数, 以便在这个关卡中使用。
      courseE_bee_functions4: |-
        `移动并获得花蜜`函数会让蜜蜂转身并收集花蜜，然后会让蜜蜂返回出发的地方。\\r
        \\r
        用`移动并获得花蜜`函数收集所有的花蜜。
      courseE_bee_functions4_2018: |-
        `移动并获得花蜜`函数会让蜜蜂转身并收集花蜜，然后会让蜜蜂返回出发的地方。\\r
        \\r
        用`移动并获得花蜜`函数收集所有的花蜜。
      courseE_bee_functions8: |-
        **挑战：** 每次你运行这一关时，每朵花都有不同数量的花蜜。   \\r
        \\r
        创造一个函数，从每朵花里收集所有花蜜。
      courseE_bee_functions8_2018: |-
        **挑战：** 每次你运行这一关时，每朵花都有不同数量的花蜜。   \\r
        \\r
        创造一个函数，从每朵花里收集所有花蜜。
      courseE_bee_functions9b: |-
        _"我不能相信这块地有多满！"_\\r
        \\r
        非常认真的看看这关，看你能否用学会的知识通过它。
      courseE_bee_functions_challenge1: 你得自己独立接受这个挑战。这可能比看起来更难！
      courseE_bee_functions_challenge1_2018: 你得自己独立接受这个挑战。这可能比看起来更难！
      courseE_bee_ramp14: |-
        同样的技术对花蜜和蜂蜜都有用！ \\r
        \\r
        看看所有这些云。有些会有蜂蜜，另一些有花蜜。  \\r
        帮助蜜蜂沿着路通过这关。\\r
        \\r
        \\r
        \\r
      courseE_bee_ramp14_2018: |-
        同样的技术对花蜜和蜂蜜都有用！ \\r
        \\r
        看看所有这些云。有些会有蜂蜜，另一些有花蜜。  \\r
        帮助蜜蜂沿着路通过这关。\\r
        \\r
        \\r
        \\r
      courseE_bee_ramp17: '在这个阶段的最后一关，用你学过的所有知识来收集所有花蜜，酿造所有蜂蜜。  '
      courseE_collector_ramp10: 采取和以前一样的路，但这次要收集遭到的所有宝藏。\\r
      courseE_collector_ramp8: |-
        这一关和上一关非常像，但现在罗瑞尔是探险者了！\\r

        <hr/>\r
        \r
        和以前的路一样，但这次，用一个循环重复来收集遇到的宝藏。\r
      courseE_collector_ramp9: 采取和以前一样的路，但这次要收集遭到的所有宝藏。\\r
      courseE_farmer_concept4: 现在，让我们增加难度！我们已经将所有模块嵌套到另一个循环里了，但是你需要让小艺术家回来画下一行。哪些代码模块能放在最外层循环的下面来画出整个网格？
      courseE_farmer_functions1: |-
        _"我们以前见过吗？我是收割者！"_\\r
        \\r
        帮助收割者到达南瓜并捡起它。
      courseE_farmer_functions10a1_2018: "**挑战:** 用你学过的知识，用最多19个模块来解决这个难题！"
      courseE_farmer_functions10a1_2019: "**挑战:** 用你学过的知识，用最多19个模块来解决这个难题！"
      courseE_farmer_functions10b: 用新函数两次来过关。
      courseE_farmer_functions10b_2018: 用新函数两次来过关。
      courseE_farmer_functions11_predict: 找出要哪个函数，要删除哪个，然后通过这关！
      courseE_farmer_functions11_predict_2018: 找出要哪个函数，要删除哪个，然后通过这关！
      courseE_farmer_functions11_predict_2019: 找出要哪个函数，要删除哪个，然后通过这关！
      courseE_farmer_functions13_2018: |-
        用23个或更少的模块来解决这个难题。

        * * *

        ##### 每个芽会长出 _最多一个_ 玉米。要找到最佳方案的话，需要直接编辑函数。
      courseE_farmer_functions13_2019: |-
        用23个或更少的模块来解决这个难题。

        * * *

        ##### 每个芽会长出 _最多一个_ 玉米。要找到最佳方案的话，需要直接编辑函数。
      courseE_farmer_functions1_2018: |-
        _"我们以前见过吗？我是收割者！"_\\r
        \\r
        帮助收割者到达南瓜并捡起它。
      courseE_farmer_functions1_2019: |-
        _"我们以前见过吗？我是收割者！"_\\r
        \\r
        帮助收割者到达南瓜并捡起它。
      courseE_farmer_functions1a: |-
        _"噢，蔬菜长得到处都是！"_\\r
        \\r
        现在帮收割者捡起路上的所有玉米，直到最后的南瓜。\\r
        \_\_\_\\r

        ##### 主意：路上的每个通往南瓜的正方形上都有最多_一个_玉米。你需要用`如果`语句在采摘玉米前判断一下！
      courseE_farmer_functions1a_2018: |-
        _"噢，蔬菜长得到处都是！"_\\r
        \\r
        现在帮收割者捡起路上的所有玉米，直到最后的南瓜。\\r
        \_\_\_\\r

        ##### 注意：路上的每个通往南瓜的正方形上都有最多_一个_玉米。用提供的`check for corn`（检查玉米）函数来确保采摘了所有东西。
      courseE_farmer_functions1a_2019: |-
        _"噢，蔬菜长得到处都是！"_\\r
        \\r
        现在帮收割者捡起路上的所有玉米，直到最后的南瓜。\\r
        \_\_\_\\r

        ##### 注意：路上的每个通往南瓜的正方形上都有最多_一个_玉米。用提供的`check for corn`（检查玉米）函数来确保采摘了所有东西。
      courseE_farmer_functions2a: |-
        _"我感到很有用！"_\\r
        \\r
        在接下来的几关里，我们要检查很多农作物的方块。让我们将所有东西挪到函数里，这样更容易。
      courseE_farmer_functions2aALT: |-
        _"我感到很有用！"_\\r
        \\r
        在接下来的几关里，我们要检查很多农作物的方块。让我们将所有东西挪到函数里，这样更容易。
      courseE_farmer_functions2b: |-
        帮助收割者捡起玉米和南瓜。\\r
        \_\_\_\\r

        ##### 每个菜苗都会长出_最多一个_玉米。
      courseE_farmer_functions2b_2018: |-
        用函数帮助收割者捡起玉米和南瓜。\\r
        \_\_\_\\r

        ##### 每个菜苗会长出_一个_玉米或什么都长不出来。
      courseE_farmer_functions2b_2019: |-
        用函数帮助收割者捡起玉米和南瓜。\\r
        \_\_\_\\r

        ##### 每个菜苗会长出_一个_玉米或什么都长不出来。
      courseE_farmer_functions2ba: "_\"我感到很有用！\"_\\\\r\n\\\\r\n你注意到上一关中被重复的代码了吗？将它放在循环里不太好用，但我们**能**用函数。  \\\\r\n\\\\r\n在这一管理，我们要把重复的代码移到一个叫做`玉米和南瓜`的函数里。现在，你需要做的是将小的`玉米和南瓜`**函数调用模块**放到代码里需要的地方。\\\\r\n\\\\r\n\\_\\_\\_\\\\r\n\n##### \n\n每个菜苗都会长出_最多一个_玉米。"
      courseE_farmer_functions2ba_2018: "_\"我感到很有用！\"_\\\\r\n\\\\r\n你注意到上一关中被重复的代码了吗？将它放在循环里不太好用，但我们**能**用函数。  \\\\r\n\\\\r\n在这一管理，我们要把重复的代码移到一个叫做`玉米和南瓜`的函数里。现在，你需要做的是将小的`玉米和南瓜`**函数调用模块**放到代码里需要的地方。\\\\r\n\\\\r\n\\_\\_\\_\\\\r\n\n##### \n\n每个菜苗都会长出_最多一个_玉米。"
      courseE_farmer_functions2ba_2019: "_\"我感到很有用！\"_\\\\r\n\\\\r\n你注意到上一关中被重复的代码了吗？将它放在循环里不太好用，但我们**能**用函数。  \\\\r\n\\\\r\n在这一管理，我们要把重复的代码移到一个叫做`玉米和南瓜`的函数里。现在，你需要做的是将小的`玉米和南瓜`**函数调用模块**放到代码里需要的地方。\\\\r\n\\\\r\n\\_\\_\\_\\\\r\n\n##### \n\n每个菜苗都会长出_最多一个_玉米。"
      courseE_farmer_functions3b: |-
        _"噢，蔬菜长得到处都是！"_\\r
        \\r
        现在帮助农夫捡起玉米、莴苣**和**南瓜。
      courseE_farmer_functions3c: |-
        现在，通过从代码中拖拽并放到**函数定义**中来自己填满函数。  \\r
        \\r
        别忘了完成后，在程序里需要的地方加一个小的**函数调用**模块来使用这个函数。
      courseE_farmer_functions3c1_2018: |-
        你注意到上一关有很多重复的代码了吗？我们可以调用`pick along path`（沿路采摘）函数来减少代码，并用一个新函数来调用其它函数！\\r
        \\r
        用`pick along path`（沿路采摘）来使用更少的模块解决这个难题。
      courseE_farmer_functions3c1_2019: |-
        你注意到上一关有很多重复的代码了吗？我们可以调用`pick along path`（沿路采摘）函数来减少代码，并用一个新函数来调用其它函数！\\r
        \\r
        用`pick along path`（沿路采摘）来使用更少的模块解决这个难题。
      courseE_farmer_functions3c_2018: |-
        现在，通过从代码中拖拽并放到**函数定义**中来自己填满函数。  \\r
        \\r
        别忘了完成后，在程序里需要的地方加一个小的**函数调用**模块来使用这个函数。
      courseE_farmer_functions3c_2019: |-
        现在，通过从代码中拖拽并放到**函数定义**中来自己填满函数。  \\r
        \\r
        别忘了完成后，在程序里需要的地方加一个小的**函数调用**模块来使用这个函数。
      courseE_farmer_functions4b: 使用你的新函数来通关。
      courseE_farmer_functions4b_2018: 使用你的新函数来通关。
      courseE_farmer_functions5b: |-
        _"它们正在成倍生长！"_\\r
        \\r
        这些庄稼都长成堆了。添加一些新的`当`循环到函数里，来确保能收集到所有的作物。
      courseE_farmer_functions5c: 你的函数能在这里派上用场。
      courseE_farmer_functions5c_2018: 你的函数能在这里派上用场。
      courseE_farmer_functions6b: 捡起所有的作物。
      courseE_farmer_functions6c: "_\"莴苣捡起所有作物！\"_\\\\r\n\\\\r\n现在菜苗是玉米**或**莴苣。在采摘之前，你需要在程序里加什么来检查每个菜苗？\\\\r\n\\_\\_\\_\\\\r\n\n##### \n\n主意，每个菜苗都会变成**一个**玉米或**一个**莴苣。"
      courseE_farmer_functions6c_2018: "_\"莴苣捡起所有作物！\"_\\\\r\n\\\\r\n现在菜苗是玉米**或**莴苣。在采摘之前，你需要在程序里加什么来检查每个菜苗？\\\\r\n\\_\\_\\_\\\\r\n\n##### \n\n主意，每个菜苗都会变成**一个**玉米或**一个**莴苣。"
      courseE_farmer_functions7a1_2018: |-
        _"**lettuce**函数用更少的代码做更多的事情！"_

        创建函数来让收割者走到正方形路径上，从每行的中间采摘单个莴苣。
      courseE_farmer_functions7a1_2019: |-
        _"**lettuce**函数用更少的代码做更多的事情！"_

        创建函数来让收割者走到正方形路径上，从每行的中间采摘单个莴苣。
      courseE_farmer_functions7b: |-
        _"收成太棒了！"_\\r
        \\r
        帮助收割者在蜿蜒的路里找到方向，并在南瓜那里**左**转，在莴苣那里**右**转。 \\r
        \\r
        _（别忘了采摘沿途所有的作物！）_
      courseE_farmer_functions7b_2018: |-
        _"收成太棒了！"_\\r
        \\r
        帮助收割者在蜿蜒的路里找到方向，并在南瓜那里**左**转，在莴苣那里**右**转。 \\r
        \\r
        _（别忘了采摘沿途所有的作物！）_
      courseE_farmer_functions8a1_2018: 试着再写一次函数。有帮助吗？如何让它在本关中能工作？
      courseE_farmer_functions8a1_2019: 试着再写一次函数。有帮助吗？如何让它在本关中能工作？
      courseE_farmer_functions8b: |-
        **挑战：** 不是迷宫里所有的角落都标出来了，这意味着需要多次用导航的代码来知道要去哪里。  \\r
        \\r
        你能想出需要做什么吗？
      courseE_farmer_functions8b_2018: |-
        **挑战：** 不是迷宫里所有的角落都标出来了，这意味着需要多次用导航的代码来知道要去哪里。  \\r
        \\r
        你能想出需要做什么吗？
      courseE_farmer_functions9a1_2018: |-
        \*这一关太棒了!\*\*\\r
        \\r
        你的函数还能在这一关中有用吗？
      courseE_farmer_functions9a1_2019: |-
        \*这一关太棒了!\*\*\\r
        \\r
        你的函数还能在这一关中有用吗？
      courseE_farmer_functions9b: 好好看看这关。你能想出规律吗？
      courseE_farmer_functions9b_2018: 好好看看这关。你能想出规律吗？
      courseE_farmer_functions9b_clone: 好好看看这关。你能想出规律吗？
      courseE_farmer_predict1: |-
        帮助农夫走过这条路来找到所有的莴苣\\r
        \\r
        这一关中，莴苣会在每条路的最末端生长。如果她的前面有路，农夫会一直往前走。否则，她需要采摘所有的莴苣，然后转弯继续在路上走。 \\r
        \\r
        \\r
        \\r
      courseE_farmer_predict1_2018: |-
        帮助农夫走过这条路来找到所有的莴苣\\r
        \\r
        这一关中，莴苣会在每条路的最末端生长。如果她的前面有路，农夫会一直往前走。否则，她需要采摘所有的莴苣，然后转弯继续在路上走。 \\r
        \\r
        \\r
        \\r
      courseE_farmer_ramp11a: "天哪！土堆太大了，很难猜有多少土。  \\\\r\n\\\\r\n\\_\\_\\_\\\\r\n\\\\r\n我们在工具箱里增加了一个新模块，叫做`当有土堆时`。使用它，当有土时，就不停的用它来移除土！ "
      courseE_farmer_ramp11a_2018: "天哪！土堆太大了，很难猜有多少土。  \\\\r\n\\\\r\n\\_\\_\\_\\\\r\n\\\\r\n我们在工具箱里增加了一个新模块，叫做`当有土堆时`。使用它，当有土时，就不停的用它来移除土！ "
      courseE_farmer_ramp11a_2019: "天哪！土堆太大了，很难猜有多少土。  \\\\r\n\\\\r\n\\_\\_\\_\\\\r\n\\\\r\n我们在工具箱里增加了一个新模块，叫做`当有土堆时`。使用它，当有土时，就不停的用它来移除土！ "
      courseE_farmer_ramp11b: 让我们再试试，但有更多的土堆了！
      courseE_farmer_ramp11b_2018: 让我们再试试，但有更多的土堆了！
      courseE_farmer_ramp11b_2019: 让我们再试试，但有更多的土堆了！
      courseE_farmer_ramp12: 捡起所有的莴苣。
      courseE_farmer_ramp12_2018: 捡起所有的莴苣。
      courseE_farmer_ramp12_forswap: 捡起所有的莴苣。
      courseE_farmer_ramp12_forswap_2018: 捡起所有的莴苣。
      courseE_farmer_ramp12_forswap_2019: 捡起所有的莴苣。
      courseE_farmer_ramp12a: "帮助农夫走过这条路来找到所有的莴苣\\\\r\n\\\\r\n这一关中，莴苣会在每条路的最末端生长。如果她的前面有路，农夫会一直往前走。否则，她需要采摘所有的莴苣，然后转弯继续在路上走。 "
      courseE_farmer_ramp12a_2018: |-
        帮助农夫走过这条路来找到所有的莴苣\\r
        \\r
        这一关中，莴苣会在每条路的最末端生长。如果她的前面有路，农夫会一直往前走。否则，她需要采摘所有的莴苣，然后转弯继续在路上走。 \\r
        \\r
        \\r
        \\r
      courseE_farmer_ramp12b: 现在收割者需要采摘所有莴苣。在一个`重复`循环里使用`当有莴苣时`来收获所有的！
      courseE_farmer_ramp12b_2018: 现在收割者需要采摘所有莴苣。在一个`重复`循环里使用`当有莴苣时`来收获所有的！
      courseE_farmer_ramp12b_2019: 现在收割者需要采摘所有莴苣。在一个`重复`循环里使用`当有莴苣时`来收获所有的！
      courseE_farmer_ramp12c: "莴苣现在只在路的尽头。\\\\r\n沿着路走，**直到**碰到一颗莴苣，然后**当这里还有莴苣时**，不断的采摘它。  "
      courseE_farmer_ramp12c_2018: "莴苣现在只在路的尽头。\\\\r\n沿着路走，**直到**碰到一颗莴苣，然后**当这里还有莴苣时**，不断的采摘它。  "
      courseE_farmer_ramp12c_2019: "莴苣现在只在路的尽头。\\\\r\n沿着路走，**直到**碰到一颗莴苣，然后**当这里还有莴苣时**，不断的采摘它。  "
      courseE_farmer_ramp12d: "莴苣现在只在菜园的尽头。\\\\r\n沿着每条路走，**直到**碰到一颗莴苣，然后**当这里还有莴苣时**，不断的采摘它。  "
      courseE_farmer_ramp12d_2018: "莴苣现在只在菜园的尽头。\\\\r\n沿着每条路走，**直到**碰到一颗莴苣，然后**当这里还有莴苣时**，不断的采摘它。  "
      courseE_farmer_ramp12d_2019: "莴苣现在只在菜园的尽头。\\\\r\n沿着每条路走，**直到**碰到一颗莴苣，然后**当这里还有莴苣时**，不断的采摘它。  "
      courseE_farmer_ramp12e: "莴苣现在只在菜园的尽头。\\\\r\n沿着每条路走，**直到**碰到一颗莴苣，然后**当这里还有莴苣时**，不断的采摘它。  "
      courseE_farmer_ramp12e_2018: "莴苣现在只在菜园的尽头。\\\\r\n沿着每条路走，**直到**碰到一颗莴苣，然后**当这里还有莴苣时**，不断的采摘它。  "
      courseE_farmer_ramp12e_2019: "莴苣现在只在菜园的尽头。\\\\r\n沿着每条路走，**直到**碰到一颗莴苣，然后**当这里还有莴苣时**，不断的采摘它。  "
      courseE_farmer_ramp12f: "**挑战**：获得所有庄稼的唯一办法是，一直往前走，直到获得莴苣。然后**如果**左边有路，就向左转。否则，向右转。"
      courseE_farmer_ramp12f_2018: "**挑战**：获得所有庄稼的唯一办法是，一直往前走，直到获得莴苣。然后**如果**左边有路，就向左转。否则，向右转。"
      courseE_farmer_ramp12f_2019: "**挑战**：获得所有庄稼的唯一办法是，一直往前走，直到获得莴苣。然后**如果**左边有路，就向左转。否则，向右转。"
      courseE_farmer_ramp12g: 向前走, 直到你到达莴苣，然后**如果** 有一条路径向左，就左转。否则就右拐。
      courseE_farmer_ramp12g_2018: 向前走, 直到你到达莴苣，然后**如果** 有一条路径向左，就左转。否则就右拐。
      courseE_farmer_ramp12g_2019: 向前走, 直到你到达莴苣，然后**如果** 有一条路径向左，就左转。否则就右拐。
      courseE_farmer_ramp13: |-
        太美好了！看看所有这些菜苗。它们有些会长成玉米，有些会是莴苣。 \\r
        \\r
        一直走到路的尽头，当有莴苣时，采摘莴苣，当有玉米时，采摘玉米。 \\r
        \\r
      courseE_farmer_ramp13_2018: |-
        太美好了！看看所有这些菜苗。它们有些会长成玉米，有些会是莴苣。 \\r
        \\r
        一直走到路的尽头，当有莴苣时，采摘莴苣，当有玉米时，采摘玉米。 \\r
        \\r
      courseE_farmer_ramp15: |-
        只有已有的模块来通过这关。\\r
        \\r
        这关会让你练习`重复直到`哦模块。采摘所有的玉米和莴苣，直到到达南瓜。
        （别忘了也要捡起南瓜！）
      courseE_farmer_ramp15_2018: |-
        只有已有的模块来通过这关。\\r
        \\r
        这关会让你练习`重复直到`哦模块。采摘所有的玉米和莴苣，直到到达南瓜。
        （别忘了也要捡起南瓜！）
      courseE_farmer_ramp16: "\\*\\* 挑战: \\*\\* 用最少的块数解决这个关卡。"
      courseE_maze_ramp1: 对于这个关卡, 把所有的方块拖在一起, 并点击 "运行" 开始!
      courseE_maze_ramp13: |-
        是时候把上一关的都拉到一起了！\\r
        \\r
        用嵌套循环来让小鸟到猪那里。
      courseE_maze_ramp1_2018: 对于这个关卡, 把所有的方块拖在一起, 并点击 "运行" 开始!
      courseE_maze_ramp2: 将额外的`向前移动`块拖出工具箱, 然后将所有块附加到`当运行时`以完成代码。
      courseE_maze_ramp2_2018: 将额外的`向前移动`块拖出工具箱, 然后将所有块附加到`当运行时`以完成代码。
      courseE_maze_ramp3: |-
        _"这只猪把我的羽毛弄皱了。"_\\r
        \\r
        这里有一个额外的模块会让小鸟坠落。\\r
        将其拖回工具箱来扔掉它。
      courseE_maze_ramp3_2018: |-
        _"这只猪把我的羽毛弄皱了。"_\\r
        \\r
        这里有一个额外的模块会让小鸟坠落。\\r
        将其拖回工具箱来扔掉它。
      courseE_maze_ramp4: |-
        _"沿着这条路带我去找那只笨猪。"_\\r
        \\r
        躲开 TNT 炸药，不然我的羽毛就要被炸飞了！
      courseE_maze_ramp4_2018: |-
        _"沿着这条路带我去找那只笨猪。"_\\r
        \\r
        躲开 TNT 炸药，不然我的羽毛就要被炸飞了！
      courseE_maze_ramp5: |-
        _"沿着这条路，让我到猪那里！"_\\r
        \\r
        躲开TNT炸药。
      courseE_maze_ramp5_2018: |-
        _"沿着这条路，让我到猪那里！"_\\r
        \\r
        躲开TNT炸药。
      courseE_maze_ramp6: |-
        _"保持冷静，帮我找到那只坏猪。否则，我会生气的！"_\\r
        \\r
        当你将几个同样的模块排成一列时，试试将它们挪到`重复`循环里。这能更少的代码做到相同的事情！
      courseE_maze_ramp6_2018: |-
        _"保持冷静，帮我找到那只坏猪。否则，我会生气的！"_\\r
        \\r
        当你将几个同样的模块排成一列时，试试将它们挪到`重复`循环里。这能更少的代码做到相同的事情！
      courseE_maze_ramp7: |-
        _"我该生气了！"_ \\r
        \\r
        \\r
        **挑战：**用你学到的知识来帮小鸟抓到猪！
      courseE_maze_ramp7_2018: |-
        _"我该生气了！"_ \\r
        \\r
        \\r
        **挑战：**用你学到的知识来帮小鸟抓到猪！
      courseE_multi_maze_ramp5: |-
        _"沿着这条路，让我到猪那里！"_\\r
        \\r
        躲开TNT炸药。
      courseE_playLab_challenge1: "-   **松鼠**很害怕看到**恐龙**来到镇上！勇敢的**骑士**能帮忙赶走恐惧吗？\\*\n\n规则：\n\n1.  _碰到松鼠得分。_\n2.  _碰到恐龙丢很多分。_\n\n这是和玩过的不同的游戏！玩一玩，看看它是如何工作的。 \n\n当你有足够的分数或者分数太低时，会发生一些事情。添加一些代码到`游戏胜利`和`游戏失败`函数中，来让游戏按照它的方法工作。 \n点击提示获得主意！"
      courseE_playLab_challenge1_2018: "-   **松鼠**很害怕看到**恐龙**来到镇上！勇敢的**骑士**能帮忙赶走恐惧吗？\\*\n\n规则：\n\n1.  _碰到松鼠得分。_\n2.  _碰到恐龙丢很多分。_\n\n这是和玩过的不同的游戏！玩一玩，看看它是如何工作的。 \n\n当你有足够的分数或者分数太低时，会发生一些事情。添加一些代码到`游戏胜利`和`游戏失败`函数中，来让游戏按照它的方法工作。 \n点击提示获得主意！"
      courseE_playLab_scaffold1: |-
        你学到的大量知识太令人惊奇了！让我们一步步做个游戏。\\r
        \\r
        用工具箱里的新模块，选择一个新背景，然后捡起一个演员放到游戏中。
      courseE_playLab_scaffold1_2018: |-
        你学到的大量知识太令人惊奇了！让我们一步步做个游戏。\\r
        \\r
        用工具箱里的新模块，选择一个新背景，然后捡起一个演员放到游戏中。
      courseE_playLab_scaffold2: |-
        用事件处理函数和动作这样的模块来让你的玩家根据键盘方向键来移动。\\r
        \\r
        让玩家到达目标来通过这关。
      courseE_playLab_scaffold2_2018: |-
        用事件处理函数和动作这样的模块来让你的玩家根据键盘方向键来移动。\\r
        \\r
        让玩家到达目标来通过这关。
      courseE_playLab_scaffold3: |-
        让我们添加更多的角色到你的游戏里！\\r
        \\r
        用`设置演员`模块来增加更多的角色，然后移动到目标来完成这关。
      courseE_playLab_scaffold3_2018: |-
        让我们添加更多的角色到你的游戏里！\\r
        \\r
        用`设置演员`模块来增加更多的角色，然后移动到目标来完成这关。
      courseE_playLab_scaffold4: |-
        让好几个角色动起来，是游戏的好的开始，但我们需要增加更多的东西，让它感觉起来是个真游戏。让我们添加分数！\\r
        \\r
        用`当演员碰到`这样的事件模块来改变分数。得到10分来通关。
      courseE_playLab_scaffold4_2018: |-
        让好几个角色动起来，是游戏的好的开始，但我们需要增加更多的东西，让它感觉起来是个真游戏。让我们添加分数！\\r
        \\r
        用`当演员碰到`这样的事件模块来改变分数。得到10分来通关。
      courseE_playLab_scaffold5: 做的好！你有了一个游戏所有基本的部分了。现在花点时间来确保游戏会像你像的那样工作。加入一个胜利或失败的方法，然后玩到触发这些条件。
      courseE_playLab_scaffold5_2018: 做的好！你有了一个游戏所有基本的部分了。现在花点时间来确保游戏会像你像的那样工作。加入一个胜利或失败的方法，然后玩到触发这些条件。
      courseE_playLab_scaffold6: 完成了！现在你可以玩自己的游戏，或者分享给你的朋友或同学了！
      courseE_playLab_scaffold6_2018: 完成了！现在你可以玩自己的游戏，或者分享给你的朋友或同学了！
      courseE_playlab_challenge2: |-
        你能指出"Fortune Teller"（预言家）应用如何工作的吗？试着将下面的功能加到游戏中：\\r
        \\r

        -   将"是"和"否"的答案改成其它东西来让游戏更有趣。\\r
        -   让玩家在演员说了预言后，来问另一个问题。\\r
        -   当巫师是`生气`或`正常`的情绪时，再让她说两件事情。\\r
        -   给巫师她自己的一组预言。\\r
        -   \*
            让每个演员都随机改变情绪。\\r
            \\r
            如果需要帮助，就看看提示！
      courseE_playlab_variables_challenge2: |-
        你能指出"Fortune Teller"（预言家）应用如何工作的吗？试着将下面的功能加到游戏中：\\r
        \\r

        -   将"是"和"否"的答案改成其它东西来让游戏更有趣。\\r
        -   让玩家在演员说了预言后，来问另一个问题。\\r
        -   当巫师是`生气`或`正常`的情绪时，再让她说两件事情。\\r
        -   给巫师她自己的一组预言。\\r
        -   \*
            让每个演员都随机改变情绪。\\r
            \\r
            如果需要帮助，就看看提示！
      courseF_IceAge_1: |-
        喜得（演员1）想为一次新的冒险集合所有人。你能通过拖一个`演员1说`模块，并将它放到`当运行时`事件下，来帮助他说"你好！"吗？\\r
        \\r
        别忘了在里面输入"你好！"！
      courseF_IceAge_10: |-
        喜得想让他的奶奶格瑞尼，知道他很爱她。\\r
        \\r
        用`演员 __ 扔`命令来让喜得（演员1）向格瑞尼（演员2）扔爱心！\\r
        当格瑞尼碰到爱心时，设置她的表情为高兴。
      courseF_IceAge_11: |-
        是时候创建你自己的故事了！\\r
        \\r
        完成后，点击"完成"来让朋友们在他们的手机、平板或计算机上试试你的游戏。\\r
        不知道如何做？点击提示来获得详细方法。
      courseF_IceAge_2: 曼尼（演员2）发现了喜得（演员1），想邀请他一同冒险。通过使用`演员__说`模块两次来帮助他们相互打招呼。
      courseF_IceAge_3: 斯奎特 在找他的橡子! 你能帮他移动最后200像素吗？
      courseF_IceAge_4: 迪亚哥（演员1）正在寻找曼尼（演员2）你能帮忙将他俩带到一起吗？将一个模块连接到`当演员碰到时`事件下，在当他俩碰到一起时，播放声音。
      courseF_IceAge_5: "`一直重复`模块能让你连续的运行代码。你能将模块放到它里面，帮助格瑞尼不停的左右移动来进行锻炼吗？"
      courseF_IceAge_6: |-
        当你点击喜得时，能帮助他呼唤他的朋友吗？\\r
        \\r
        完成后，点击"运行"来开始。点击喜得来让你的代码起作用！
      courseF_IceAge_7: |-
        斯奎特一直在找橡子！
        \\r
        给每个事件模块下加一个`移动演员1`的模块，并改变其方向来让每个方向键都能起作用。这样来帮助他能四处跑。\\r
        完成后，点击"运行"并试着收集所有的橡子。
      courseF_IceAge_8: |-
        这是你上一关的代码，这个代码也会左右移动格瑞尼。\\r
        你能完成这个程序，当喜得和格瑞尼碰上是，让它**播放声音**并**得一分**吗？\\r
        点击"运行"来玩这个游戏。
      courseF_IceAge_9: |-
        每个人都要快点移动，因为冰暴就要来了！\\r
        将场景改为冰雪的背景，并设置喜得（演员1）的速度为快速。\\r
        按下"运行"，并将喜得移动到迪亚哥那里警告他。
      courseF_IceAge_template: |-
        斯奎特一直在找橡子！
        \\r
        给每个事件模块下加一个`移动演员1`的模块，并改变其方向来让每个方向键都能起作用。这样来帮助他能四处跑。\\r
        完成后，点击"运行"并试着收集所有的橡子。
      courseF_artist_for1: |-
        **自由发挥：** 体验`计数循环`和`counter`（计数器）变量。  \\r
        \\r
        拖出一些模块，看看会发生什么。 \\r
      courseF_artist_for10: |-
        **自由发挥：** 试着用`counter`（计数器）变量和其它画图元素来制作像这样的神奇的图画。\\r
        \\r
        ![](https://images.code.org/5a4eec10a53aa78ad6b12fb5e48680f8-image-1497991505852.png)
      courseF_artist_for10_2018: |-
        **自由发挥：** 试着用`counter`（计数器）变量和其它画图元素来制作像这样的神奇的图画。\\r
        \\r
        ![](https://images.code.org/5a4eec10a53aa78ad6b12fb5e48680f8-image-1497991505852.png)
      courseF_artist_for10_2019: |-
        **自由发挥：** 试着用`counter`（计数器）变量和其它画图元素来制作像这样的神奇的图画。\\r
        \\r
        ![](https://images.code.org/5a4eec10a53aa78ad6b12fb5e48680f8-image-1497991505852.png)
      courseF_artist_for1_2018: |-
        **自由发挥：** 体验`计数循环`和`counter`（计数器）变量。  \\r
        \\r
        拖出一些模块，看看会发生什么。 \\r
      courseF_artist_for1_2019: |-
        **自由发挥：** 体验`计数循环`和`counter`（计数器）变量。  \\r
        \\r
        拖出一些模块，看看会发生什么。 \\r
      courseF_artist_for2: 在`计数循环`循环里使用`重复`循环来创建从50像素到100像素边长的三角形的堆。
      courseF_artist_for2_2018: 在`计数循环`循环里使用`重复`循环来创建从50像素到100像素边长的三角形的堆。
      courseF_artist_for2_2019: 在`计数循环`循环里使用`重复`循环来创建从50像素到100像素边长的三角形的堆。
      courseF_artist_for3: 创建这些边长从20到200像素的三角形，每个都比上一个要大20像素。
      courseF_artist_for3_2018: 创建这些边长从20到200像素的三角形，每个都比上一个要大20像素。
      courseF_artist_for3_2019: 创建这些边长从20到200像素的三角形，每个都比上一个要大20像素。
      courseF_artist_for5: |-
        只从上一关的代码中改动一处就能创建出这幅图像。你能找到什么需要改动吗？\\r
        \_\_\_\\r
        提示：你需要移除某项！
      courseF_artist_for5_2018: |-
        只从上一关的代码中改动一处就能创建出这幅图像。你能找到什么需要改动吗？\\r
        \_\_\_\\r
        提示：你需要移除某项！
      courseF_artist_for5_2019: |-
        只从上一关的代码中改动一处就能创建出这幅图像。你能找到什么需要改动吗？\\r
        \_\_\_\\r
        提示：你需要移除某项！
      courseF_artist_for6: |-
        如果每次都比正常的多转或少转一些角度，这会创造一个有规律的效果。\\r
        \\r
        重新创建上一关的代码，但是每次转89度来创造螺旋形的正方形。
      courseF_artist_for6_2018: |-
        如果每次都比正常的多转或少转一些角度，这会创造一个有规律的效果。\\r
        \\r
        重新创建上一关的代码，但是每次转89度来创造螺旋形的正方形。
      courseF_artist_for6_2019: |-
        如果每次都比正常的多转或少转一些角度，这会创造一个有规律的效果。\\r
        \\r
        重新创建上一关的代码，但是每次转89度来创造螺旋形的正方形。
      courseF_artist_for7: '将上一关的代码做三个小小的改动来画出这个！  '
      courseF_artist_for7_2018: '将上一关的代码做三个小小的改动来画出这个！  '
      courseF_artist_for7_2019: '将上一关的代码做三个小小的改动来画出这个！  '
      courseF_artist_for9: |-
        **灵感：** 用`set alpha`（设置透明度）模块中的计数器来画像这个淡出中心的效果。  \\r
        （这个六边形图形是通过60度转向来画的。）
      courseF_artist_for9_2018: |-
        **灵感：** 用`set alpha`（设置透明度）模块中的计数器来画像这个淡出中心的效果。  \\r
        （这个六边形图形是通过60度转向来画的。）
      courseF_artist_for9_2019: |-
        **灵感：** 用`set alpha`（设置透明度）模块中的计数器来画像这个淡出中心的效果。  \\r
        （这个六边形图形是通过60度转向来画的。）
      courseF_artist_for_Template: |-
        如果每次都多转或少转一些角度，那么你可以创造出来一个有规律的效果。\\r
        \\r
        试着重用上一关的一些代码，但是转89度来创造螺旋的正方形出来。
      courseF_artist_for_Template_2018: |-
        如果每次都多转或少转一些角度，那么你可以创造出来一个有规律的效果。\\r
        \\r
        试着重用上一关的一些代码，但是转89度来创造螺旋的正方形出来。
      courseF_artist_for_Template_2019: |-
        如果每次都多转或少转一些角度，那么你可以创造出来一个有规律的效果。\\r
        \\r
        试着重用上一关的一些代码，但是转89度来创造螺旋的正方形出来。
      courseF_artist_for_challenge1: |-
        你能想出如何重新创建这幅画吗？\\r
        \\r
        <img src="https://images.code.org/724b2efa8aefe863bd0d6491a3f1590f-image-1445563707400.26.50.png"
        width="350px"/>
      courseF_artist_for_challenge1_2018: |-
        你能想出如何重新创建这幅画吗？\\r
        \\r
        <img src="https://images.code.org/724b2efa8aefe863bd0d6491a3f1590f-image-1445563707400.26.50.png"
        width="350px"/>
      courseF_artist_for_challenge1_2019: |-
        你能想出如何重新创建这幅画吗？\\r
        \\r
        <img src="https://images.code.org/724b2efa8aefe863bd0d6491a3f1590f-image-1445563707400.26.50.png"
        width="350px"/>
      courseF_artist_for_challenge2: |-
        你能想出如何重画这幅画吗？ \\r
        \\r
        <img
        src="https://images.code.org/b0d15d06465d645c5ca533e5da6387b3-image-1446075597132.36.04.png"
        width="350px"/>
      courseF_artist_for_challenge2_2018: |-
        你能想出如何重画这幅画吗？ \\r
        \\r
        <img
        src="https://images.code.org/b0d15d06465d645c5ca533e5da6387b3-image-1446075597132.36.04.png"
        width="350px"/>
      courseF_artist_for_challenge2_2019: |-
        你能想出如何重画这幅画吗？ \\r
        \\r
        <img
        src="https://images.code.org/b0d15d06465d645c5ca533e5da6387b3-image-1446075597132.36.04.png"
        width="350px"/>
      courseF_artist_fwp1: 今天，我们要接着用强大的函数编辑器。看看你是否记得如何编辑`画一个正方形`函数来找到缺陷。
      courseF_artist_fwp1_2018: 今天，我们要接着用强大的函数编辑器。看看你是否记得如何编辑`画一个正方形`函数来找到缺陷。
      courseF_artist_fwp2: |-
        编辑函数来接受一个叫做`length`（长度）的参数。 \\r
        \\r
        这个正方形的边应该比上一个长25像素。第一个正方形边长25像素。
      courseF_artist_fwp2_2018: |-
        编辑函数来接受一个叫做`length`（长度）的参数。 \\r
        \\r
        这个正方形的边应该比上一个长25像素。第一个正方形边长25像素。
      courseF_artist_fwp2_predict1: |-
        编辑函数来接受一个叫做`length`（长度）的参数。 \\r
        \\r
        这个正方形的边应该比上一个长25像素。第一个正方形边长25像素。将'???'替换成正确的值来画这幅图。
      courseF_artist_fwp2_predict1_2018: |-
        编辑函数来接受一个叫做`length`（长度）的参数。 \\r
        \\r
        这个正方形的边应该比上一个长25像素。第一个正方形边长25像素。将'???'替换成正确的值来画这幅图。
      courseF_artist_fwp3: |-
        现在从头来创建函数！  \\r
        \\r
        创建一个叫做`draw a square`（画一个正方形）的函数，然后用它画出4个盒子的轮廓。 \\r
        确保给`length`（长度）加一个参数。\\r
        \\r
        \_\_\_\\r
        从右上角开始，这些盒子的宽是50，100，150和200。
      courseF_artist_fwp3_2018: |-
        现在从头来创建函数！  \\r
        \\r
        创建一个叫做`draw a square`（画一个正方形）的函数，然后用它画出4个盒子的轮廓。 \\r
        确保给`length`（长度）加一个参数。\\r
        \\r
        \_\_\_\\r
        从右上角开始，这些盒子的宽是50，100，150和200。
      courseF_artist_fwp4: |-
        做的好！现在编辑函数来增加一个多边形边数的函数。\\r
        \\r
        所有形状的边长都是100像素。
      courseF_artist_fwp4_2018: |-
        做的好！现在编辑函数来增加一个多边形边数的函数。\\r
        \\r
        所有形状的边长都是100像素。
      courseF_artist_fwp5: |-
        用上一关的函数来画这一系列的形状。 \\r
        \\r
        \\r
        三角形有21像素的边，接下来的每个形状都比上一个长7像素。   \\r
        用`multiplication`（乘法）模块来确保每个只有一次函数调用。\\r
        *\_\_\\r
        `乘法` 模块像这样 <xml>\<block type="math*arithmetic"
        inline="true">\\r
              <title name="OP">MULTIPLY</title>\\r
            </block></xml>
      courseF_artist_fwp5_2018: |-
        用上一关的函数来画这一系列的形状。 \\r
        \\r
        \\r
        三角形有21像素的边，接下来的每个形状都比上一个长7像素。   \\r
        用`multiplication`（乘法）模块来确保每个只有一次函数调用。\\r
        *\_\_\\r
        `乘法` 模块像这样 <xml>\<block type="math*arithmetic"
        inline="true">\\r
              <title name="OP">MULTIPLY</title>\\r
            </block></xml>
      courseF_artist_fwp6: |-
        **挑战：** 编辑`画一个螺旋的边缘`来使用`length`（长度）和`sides`（边数）参数，然后重新创建这些形状。\\r
        \\r
        \-
        这些正方形从3个像素到90像素。\\r

        -   这些六边形从3像素到100像素。\\r
        -   这些三角形从3像素到95像素。
      courseF_artist_fwp6_2018: |-
        **挑战：** 编辑`画一个螺旋的边缘`来使用`length`（长度）和`sides`（边数）参数，然后重新创建这些形状。\\r
        \\r
        \-
        这些正方形从3个像素到90像素。\\r

        -   这些六边形从3像素到100像素。\\r
        -   这些三角形从3像素到95像素。
      courseF_artist_fwp7: |-
        完成`画一个螺旋边缘`的函数来为一个螺旋的中心请求最小的长度。\\r
        \\r
        \-
        中心最短边的正方形是50像素长\\r

        -   外面螺旋形最长边是200像素长
      courseF_artist_fwp7_2018: |-
        完成`画一个螺旋边缘`的函数来为一个螺旋的中心请求最小的长度。\\r
        \\r
        \-
        中心最短边的正方形是50像素长\\r

        -   外面螺旋形最长边是200像素长
      courseF_artist_fwp8: |-
        自由发挥！你能想出如何用刚刚创建的函数来画这个图形吗？\\r
        \\r

        -   红色的螺旋从50像素到200像素\\r
        -   蓝色螺旋从25像素到150像素\\r
        -   绿色螺旋从100像素到350像素
      courseF_artist_fwp8_2018: |-
        自由发挥！你能想出如何用刚刚创建的函数来画这个图形吗？\\r
        \\r

        -   红色的螺旋从50像素到200像素\\r
        -   蓝色螺旋从25像素到150像素\\r
        -   绿色螺旋从100像素到350像素
      courseF_artist_fwp9: "**自由发挥：**下面是你写的函数，还有更多的让你摆弄的函数。用笔的宽度来看看你的画看起来会如何的不同！建议都在提示里！"
      courseF_artist_fwp9_2018: "**自由发挥：**下面是你写的函数，还有更多的让你摆弄的函数。用笔的宽度来看看你的画看起来会如何的不同！建议都在提示里！"
      courseF_artist_fwp_challenge1: |-
        尝试运行此程序。
        进行一些更改，看看会发生什么。你能弄清楚它是如何工作的吗？你可以把这段程序删掉并且重写成其他任何你想要的程序。
      courseF_artist_fwp_challenge1_2018: |-
        尝试运行此程序。
        进行一些更改，看看会发生什么。你能弄清楚它是如何工作的吗？你可以把这段程序删掉并且重写成其他任何你想要的程序。
      courseF_artist_fwp_challenge2: "哇！用你在前一关学到的来画这样的图形。\\\\r\n\\\\r\n_提示：用在数来让代码更简单。_\\\\r\n\\\\r\n<br/>\\\\r\n<img src=\"https://images.code.org/d3d6a51fafdcc0a09a5c6b0e0f3c2b92-image-1446239805818.08.59.png\"\nwidth=\"300px\"/>\\\\r\n<br/>  "
      courseF_artist_fwp_challenge2_2018: "哇！用你在前一关学到的来画这样的图形。\\\\r\n\\\\r\n_提示：用在数来让代码更简单。_\\\\r\n\\\\r\n<br/>\\\\r\n<img src=\"https://images.code.org/d3d6a51fafdcc0a09a5c6b0e0f3c2b92-image-1446239805818.08.59.png\"\nwidth=\"300px\"/>\\\\r\n<br/>  "
      courseF_artist_ramp10: |-
        你知道能把一个循环放到另一个里，让它更强大吗？这叫做"嵌套循环"。\\r
        \\r
        \_\_\_\\r
        \\r
        拖拽上一个三角形的代码到新循环里来旋转它，并制作一个雪花！\\r
        \\r
        _(需要旋转它6次60度，来画出这个图案。)_
      courseF_artist_ramp10_2018: |-
        你知道能把一个循环放到另一个里，让它更强大吗？这叫做"嵌套循环"。\\r
        \\r
        \_\_\_\\r
        \\r
        拖拽上一个三角形的代码到新循环里来旋转它，并制作一个雪花！\\r
        \\r
        _(需要旋转它6次60度，来画出这个图案。)_
      courseF_artist_ramp8: |-
        太好了！现在让我们用小艺术家画正方形！小艺术家的模块和别的关有点不同，但概念是一样的。\\r
        \_\_\_\\r
        正方形的每条边都是200像素长，你需要转90度来制造每个角。
      courseF_artist_ramp8_2018: |-
        太好了！现在让我们用小艺术家画正方形！小艺术家的模块和别的关有点不同，但概念是一样的。\\r
        \_\_\_\\r
        正方形的每条边都是200像素长，你需要转90度来制造每个角。
      courseF_artist_ramp9: |-
        用你所学的来画个等边三角形。\\r
        \_\_\_\\r

        ##### 这些边每条都是100像素长。每个角转120度。
      courseF_artist_ramp9_2018: |-
        用你所学的来画个等边三角形。\\r
        \_\_\_\\r

        ##### 这些边每条都是100像素长。每个角转120度。
      courseF_artist_variables10: |-
        这是你上一关的代码。试着用其它方法编辑变量。\\r

        -   如果你从`length`（长度）小于150开始，会发生什么？\\r
        -   如果每次都给变量乘以1.25会发生什么？\\r
        -   如果转119度，代码会做什么？
      courseF_artist_variables10_2018: |-
        这是你上一关的代码。试着用其它方法编辑变量。\\r

        -   如果你从`length`（长度）小于150开始，会发生什么？\\r
        -   如果每次都给变量乘以1.25会发生什么？\\r
        -   如果转119度，代码会做什么？
      courseF_artist_variables10_2019: |-
        这是你上一关的代码。试着用其它方法编辑变量。\\r

        -   如果你从`length`（长度）小于150开始，会发生什么？\\r
        -   如果每次都给变量乘以1.25会发生什么？\\r
        -   如果转119度，代码会做什么？
      courseF_artist_variables2: |-
        现在用另一个循环来画这相邻的三个三角形。\\r
        \\r
        你可以嵌套上一关的代码。
      courseF_artist_variables2_2018: |-
        现在用另一个循环来画这相邻的三个三角形。\\r
        \\r
        你可以嵌套上一关的代码。
      courseF_artist_variables2_2019: |-
        现在用另一个循环来画这相邻的三个三角形。\\r
        \\r
        你可以嵌套上一关的代码。
      courseF_artist_variables3: |-
        在事情变得难办前，你能将长度50放到一个变量里，以便下面几关我们都能用到它吗？\\r
        \\r
        ![expandable](https://images.code.org/73447d004093c6be8ab01a1358155f16-image-1498068386665.gif)
      courseF_artist_variables3_2018: |-
        在事情变得难办前，你能将长度50放到一个变量里，以便下面几关我们都能用到它吗？\\r
        \\r
        ![expandable](https://images.code.org/73447d004093c6be8ab01a1358155f16-image-1498068386665.gif)
      courseF_artist_variables3_2019: |-
        在事情变得难办前，你能将长度50放到一个变量里，以便下面几关我们都能用到它吗？\\r
        \\r
        ![expandable](https://images.code.org/73447d004093c6be8ab01a1358155f16-image-1498068386665.gif)
      courseF_artist_variables4: 现在，用`length`（长度）变量来让小艺术家在三角形之间向前跳`length`（长度）像素。
      courseF_artist_variables4_2018: 现在，用`length`（长度）变量来让小艺术家在三角形之间向前跳`length`（长度）像素。
      courseF_artist_variables4_2019: 现在，用`length`（长度）变量来让小艺术家在三角形之间向前跳`length`（长度）像素。
      courseF_artist_variables6: |-
        不好！\\r
        \\r
        我们实际上需要三角形是60像素宽，并且跳50像素。\\r
        \\r
        你不想使用一个变量吗？
      courseF_artist_variables6_2018: |-
        不好！\\r
        \\r
        我们实际上需要三角形是60像素宽，并且跳50像素。\\r
        \\r
        你不想使用一个变量吗？
      courseF_artist_variables6_2019: |-
        不好！\\r
        \\r
        我们实际上需要三角形是60像素宽，并且跳50像素。\\r
        \\r
        你不想使用一个变量吗？
      courseF_artist_variables6a: 用你学到的来制作这个80像素边长的正方形的图案，并且在每个之间让小艺术家跳过80像素。
      courseF_artist_variables6a_2018: 用你学到的来制作这个80像素边长的正方形的图案，并且在每个之间让小艺术家跳过80像素。
      courseF_artist_variables6a_2019: 用你学到的来制作这个80像素边长的正方形的图案，并且在每个之间让小艺术家跳过80像素。
      courseF_artist_variables7: |-
        让我们画150像素边长的三角形来开始这个章节。\\r
        \\r
        确保使用`length`（长度）变量和重复循环。
      courseF_artist_variables7_2018: |-
        让我们画150像素边长的三角形来开始这个章节。\\r
        \\r
        确保使用`length`（长度）变量和重复循环。
      courseF_artist_variables7_2019: |-
        让我们画150像素边长的三角形来开始这个章节。\\r
        \\r
        确保使用`length`（长度）变量和重复循环。
      courseF_artist_variables8: |-
        重新创建上一关的三角形代码，但这次要用`设置长度为`模块来在每次循环迭代的结束时，将`length`（长度）变量改为`length`+10。\\r
        \\r
        <xml>\\r
        <block
        type="variables_set" inline="false">\\r
                                <title
        name="VAR">length</title>\\r
                                <value name="VALUE">\\r
                                  <block
        type="math_arithmetic" inline="true">\\r
                                    <title
        name="OP">ADD</title>\\r
                                    <value name="A">\\r
                                      <block
        type="variables_get">\\r
                                        <title name="VAR">length</title>\\r
                                      </block>\\r
                                    </value>\\r
                                    <value
        name="B">\\r
                                      <block type="math_number">\\r
                                        <title
        name="NUM">10</title>\\r
                                      </block>\\r
                                    </value>\\r
                                  </block>\\r
                                </value>\\r
                              </block>\\r
        </xml>\\r
        \\r
        三角形的第一条边长是150像素。
      courseF_artist_variables8_2018: |-
        重新创建上一关的三角形代码，但这次要用`设置长度为`模块来在每次循环迭代的结束时，将`length`（长度）变量改为`length`+10。\\r
        \\r
        <xml>\\r
        <block
        type="variables_set" inline="false">\\r
                                <title
        name="VAR">length</title>\\r
                                <value name="VALUE">\\r
                                  <block
        type="math_arithmetic" inline="true">\\r
                                    <title
        name="OP">ADD</title>\\r
                                    <value name="A">\\r
                                      <block
        type="variables_get">\\r
                                        <title name="VAR">length</title>\\r
                                      </block>\\r
                                    </value>\\r
                                    <value
        name="B">\\r
                                      <block type="math_number">\\r
                                        <title
        name="NUM">10</title>\\r
                                      </block>\\r
                                    </value>\\r
                                  </block>\\r
                                </value>\\r
                              </block>\\r
        </xml>\\r
        \\r
        三角形的第一条边长是150像素。
      courseF_artist_variables8_2019: |-
        重新创建上一关的三角形代码，但这次要用`设置长度为`模块来在每次循环迭代的结束时，将`length`（长度）变量改为`length`+10。\\r
        \\r
        <xml>\\r
        <block
        type="variables_set" inline="false">\\r
                                <title
        name="VAR">length</title>\\r
                                <value name="VALUE">\\r
                                  <block
        type="math_arithmetic" inline="true">\\r
                                    <title
        name="OP">ADD</title>\\r
                                    <value name="A">\\r
                                      <block
        type="variables_get">\\r
                                        <title name="VAR">length</title>\\r
                                      </block>\\r
                                    </value>\\r
                                    <value
        name="B">\\r
                                      <block type="math_number">\\r
                                        <title
        name="NUM">10</title>\\r
                                      </block>\\r
                                    </value>\\r
                                  </block>\\r
                                </value>\\r
                              </block>\\r
        </xml>\\r
        \\r
        三角形的第一条边长是150像素。
      courseF_artist_variables9: |-
        是时候来些艺术了！\\r
        \\r
        看看当你重复上一关的代码**30**次, 而不是3次会是什么结果！\\r
        \\r
        你可以选择任何颜色的线条或图案。
      courseF_artist_variables9_2018: |-
        是时候来些艺术了！\\r
        \\r
        看看当你重复上一关的代码**30**次, 而不是3次会是什么结果！\\r
        \\r
        你可以选择任何颜色的线条或图案。
      courseF_artist_variables9_2019: |-
        是时候来些艺术了！\\r
        \\r
        看看当你重复上一关的代码**30**次, 而不是3次会是什么结果！\\r
        \\r
        你可以选择任何颜色的线条或图案。
      courseF_artist_variablesFP: |-
        **自由发挥：** 用你学会的知识来创建自己的图画。 \\r
        \\r
        怎样使用变量来创建正方形，五边形或六边形？
      courseF_artist_variablesFP_2018: |-
        **自由发挥：** 用你学会的知识来创建自己的图画。 \\r
        \\r
        怎样使用变量来创建正方形，五边形或六边形？
      courseF_artist_variablesFP_2019: |-
        **自由发挥：** 用你学会的知识来创建自己的图画。 \\r
        \\r
        怎样使用变量来创建正方形，五边形或六边形？
      courseF_artist_variables_10: |-
        这是你上一关的代码。试着用其它方法编辑变量。\\r

        -   如果你从`length`（长度）小于150开始，会发生什么？\\r
        -   如果每次都给变量乘以1.25会发生什么？\\r
        -   如果转119度，代码会做什么？
      courseF_artist_variables_2: |-
        现在用另一个循环来画这相邻的三个三角形。\\r
        \\r
        你可以嵌套上一关的代码。
      courseF_artist_variables_3: |-
        在事情变得难办前，你能将长度50放到一个变量里，以便下面几关我们都能用到它吗？\\r
        <br/>\\r
        \\r
        <img src="https://images.code.org/e6eac1f6aeb68a9a7584516e28663c14-image-1477533059853.gif"
        width="65%"/>
      courseF_artist_variables_4: 现在，用`length`（长度）变量来让小艺术家在三角形之间向前跳`length`（长度）像素。
      courseF_artist_variables_5: 在代码的末尾添加另一组循环来再增加三个三角形。这次，向前移动，并向上！
      courseF_artist_variables_6: |-
        不好！我们实际上需要三角形是60像素宽，并且跳50像素。\\r
        你不想使用一个变量吗？
      courseF_artist_variables_6a: 用你学到的来制作这个80像素边长的正方形的图案，并且在每个之间让小艺术家跳过80像素。
      courseF_artist_variables_7: |-
        让我们画150像素边长的三角形来开始这个章节。\\r
        \\r
        确保使用`length`（长度）变量和重复循环。
      courseF_artist_variables_8: |-
        用上一关的来重新创建这个三角形的代码，但这次用`设置长度为`模块，在每次循环迭代结束的地方来重置`length`（长度）变量为`length`+10。\\r
        \\r
        ![](https://images.code.org/6525bebee31ee15b84a48761b2866f53-image-1477531948829.31.37.png)
      courseF_artist_variables_9: |-
        是时候来些艺术了！\\r
        \\r
        看看当你重复上一关的代码30次, 而不是3次会是什么结果！\\r
        \\r
        你可以选择任何颜色的线条或图案。
      courseF_artist_variables_FP: |-
        **自由发挥：** 用你学会的知识来创建自己的图画。 \\r
        \\r
        怎样使用变量来创建正方形，五边形或六边形？
      courseF_artist_variables_challenge1: |-
        挑战警报！
        你能创建一个`length`（长度）变量，并用它来创建这个图案吗？
      courseF_artist_variables_challenge1_2018: |-
        挑战警报！
        你能创建一个`length`（长度）变量，并用它来创建这个图案吗？
      courseF_artist_variables_challenge1_2019: |-
        挑战警报！
        你能创建一个`length`（长度）变量，并用它来创建这个图案吗？
      courseF_artist_variables_challenge1a: |-
        <img src="https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png"
        width="250px"/>\\r
        \\r
        你已经学会了制作像这样的图案的所有知识了！这关有点困难。你能坚持下去，直到找到解决方案吗？
      courseF_artist_variables_challenge2: |-
        <img src="https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png"
        width="250px"/>\\r
        \\r
        你已经学会了制作像这样的图案的所有知识了！这关有点困难。你能坚持下去，直到找到解决方案吗？
      courseF_artist_variables_challenge2_2018: |-
        <img src="https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png"
        width="250px"/>\\r
        \\r
        你已经学会了制作像这样的图案的所有知识了！这关有点困难。你能坚持下去，直到找到解决方案吗？
      courseF_artist_variables_challenge2_2019: |-
        <img src="https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png"
        width="250px"/>\\r
        \\r
        你已经学会了制作像这样的图案的所有知识了！这关有点困难。你能坚持下去，直到找到解决方案吗？
      courseF_artistembed_variables9: |-
        是时候来些艺术了！\\r
        \\r
        看看当你重复上一关的代码**30**次, 而不是3次会是什么结果！\\r
        \\r
        你可以选择任何颜色的线条或图案。
      courseF_bee_conditionals10: |-
        即使你知道每个点会有什么，条件也会有帮助！\\r
        \\r
        收集所有的花蜜，并酿造所有的蜂蜜。
      courseF_bee_conditionals10_2018: |-
        即使你知道每个点会有什么，条件也会有帮助！\\r
        \\r
        收集所有的花蜜，并酿造所有的蜂蜜。
      courseF_bee_conditionals1_predict1: |-
        _"这朵云挡住了我的视线！"_\\r
        \\r
        检查是否云下面有花。如果有花，采花蜜。
      courseF_bee_conditionals1_predict1_2018: |-
        _"这朵云挡住了我的视线！"_\\r
        \\r
        检查是否云下面有花。如果有花，采花蜜。
      courseF_bee_conditionals2: |-
        _"太多云了，一朵花都看不到！"_\\r
        \\r
        在采花蜜前，检查每朵云下面是否藏着一朵花。如果云下面有花，蜜蜂需要采**一次**花蜜。 \\r
        \\r
        记住：不是所有云下面藏着一样的东西！
      courseF_bee_conditionals2_2018: |-
        _"太多云了，一朵花都看不到！"_\\r
        \\r
        在采花蜜前，检查每朵云下面是否藏着一朵花。如果云下面有花，蜜蜂需要采**一次**花蜜。 \\r
        \\r
        记住：不是所有云下面藏着一样的东西！
      courseF_bee_conditionals3: 你只能从花上采集花蜜，但你能检查任何空间，看看是否那里有花。如果在任何云下面有花，蜜蜂需要采集**一次**花蜜。
      courseF_bee_conditionals3_2018: 你只能从花上采集花蜜，但你能检查任何空间，看看是否那里有花。如果在任何云下面有花，蜜蜂需要采集**一次**花蜜。
      courseF_bee_conditionals4: |-
        在这一关中，我们知道每朵花都有正好一个花蜜，但是花没有均匀的分布。\\r
        \\r
        用尽可能少的模块采集所有花蜜。
      courseF_bee_conditionals4_2018: |-
        在这一关中，我们知道每朵花都有正好一个花蜜，但是花没有均匀的分布。\\r
        \\r
        用尽可能少的模块采集所有花蜜。
      courseF_bee_conditionals7_predict2: |-
        有时云下面是花，有时候是蜂窝。\\r
        \\r
        用`如果/否则`来在花那里采花蜜，在蜂窝那里酿蜂蜜。
      courseF_bee_conditionals7_predict2_2018: |-
        有时云下面是花，有时候是蜂窝。\\r
        \\r
        用`如果/否则`来在花那里采花蜜，在蜂窝那里酿蜂蜜。
      courseF_bee_conditionals8: |-
        **挑战：** 这些云下面要么有一朵花，要么有一个蜂窝！\\r
        \\r
        如果是花，就采一次花蜜。否则，就酿一次蜂蜜（因为是蜂窝）。
      courseF_bee_conditionals8_2018: |-
        **挑战：** 这些云下面要么有一朵花，要么有一个蜂窝！\\r
        \\r
        如果是花，就采一次花蜜。否则，就酿一次蜂蜜（因为是蜂窝）。
      courseF_bee_for10: |-
        **挑战：** 还用你学会的，关于`计数循环`的知识来试着解决这个问题。 \\r
        \\r
        记住，你可能需要多运行几次才能想出所有的步骤。
      courseF_bee_for10_2018: |-
        **挑战：** 还用你学会的，关于`计数循环`的知识来试着解决这个问题。 \\r
        \\r
        记住，你可能需要多运行几次才能想出所有的步骤。
      courseF_bee_for10_2019: |-
        **挑战：** 还用你学会的，关于`计数循环`的知识来试着解决这个问题。 \\r
        \\r
        记住，你可能需要多运行几次才能想出所有的步骤。
      courseF_bee_for11: |-
        如果你的循环是递减的，就在每次迭代时，从计数器变量中**减去**增量。
        \\r
        \\r
        什么样的增量能够收集15，然后12，然后9，6，3个花蜜？
      courseF_bee_for11_2018: |-
        如果你的循环是递减的，就在每次迭代时，从计数器变量中**减去**增量。
        \\r
        \\r
        什么样的增量能够收集15，然后12，然后9，6，3个花蜜？
      courseF_bee_for11_2019: |-
        如果你的循环是递减的，就在每次迭代时，从计数器变量中**减去**增量。
        \\r
        \\r
        什么样的增量能够收集15，然后12，然后9，6，3个花蜜？
      courseF_bee_for2: |-
        写代码帮助蜜蜂收集所有的花蜜。\\r
        \\r
        这一关需要大量的模块，但我们会在下一关学到一种更容易的方法。
      courseF_bee_for2_2018: |-
        写代码帮助蜜蜂收集所有的花蜜。\\r
        \\r
        这一关需要大量的模块，但我们会在下一关学到一种更容易的方法。
      courseF_bee_for2_2019: |-
        写代码帮助蜜蜂收集所有的花蜜。\\r
        \\r
        这一关需要大量的模块，但我们会在下一关学到一种更容易的方法。
      courseF_bee_for3: |-
        啊哈，`计数循环`让这个容易多了！\\r
        \\r
        用`计数循环`和`counter`（计数器）变量试试这一关，看看代码能变得多短。
      courseF_bee_for6: |-
        你也能用`计数循环`递减。\\r
        \\r
        试着通过从**5**到**1**，每次减**1**来递减计数收集花蜜。
      courseF_bee_for6_2018: |-
        你也能用`计数循环`递减。\\r
        \\r
        试着通过从**5**到**1**，每次减**1**来递减计数收集花蜜。
      courseF_bee_for6_2019: |-
        你也能用`计数循环`递减。\\r
        \\r
        试着通过从**5**到**1**，每次减**1**来递减计数收集花蜜。
      courseF_bee_for7: |-
        循环里的最后一个数字叫做**"增量"**。每次循环运行时，counter（计数器）变量就会改变**增量**这么多值。\\r
        \\r
        试试用**增量**2来收集花。
      courseF_bee_for7_2018: |-
        循环里的最后一个数字叫做**"增量"**。每次循环运行时，counter（计数器）变量就会改变**增量**这么多值。\\r
        \\r
        试试用**增量**2来收集花。
      courseF_bee_for7_2019: |-
        循环里的最后一个数字叫做**"增量"**。每次循环运行时，counter（计数器）变量就会改变**增量**这么多值。\\r
        \\r
        试试用**增量**2来收集花。
      courseF_bee_for8: |-
        你已经明白了！\\r
        \\r
        应该**递增**多少才能收集到3, 6, 9, 12, 15个花蜜？\\r
      courseF_bee_for8_2018: |-
        你已经明白了！\\r
        \\r
        应该**递增**多少才能收集到3, 6, 9, 12, 15个花蜜？\\r
      courseF_bee_for8_2019: |-
        你已经明白了！\\r
        \\r
        应该**递增**多少才能收集到3, 6, 9, 12, 15个花蜜？\\r
      courseF_bee_for9: |-
        现在，让我们将`counter`（计数器）变量和`math`（数学）模块混合起来！\\r
        \\r
        如何能用`counter`（计数器）变量来用最少的模块浏览花园？
      courseF_bee_for9_2018: |-
        现在，让我们将`counter`（计数器）变量和`math`（数学）模块混合起来！\\r
        \\r
        如何能用`counter`（计数器）变量来用最少的模块浏览花园？
      courseF_bee_for9_2019: |-
        现在，让我们将`counter`（计数器）变量和`math`（数学）模块混合起来！\\r
        \\r
        如何能用`counter`（计数器）变量来用最少的模块浏览花园？
      courseF_bee_for_challenge1: |-
        用这个`计数循环`来收集所有的花蜜。不可思议！\\r
        \\r
        这里有些简单的动作，你会希望来`重复'计数器'次`。
      courseF_bee_for_challenge1_2018: |-
        用这个`计数循环`来收集所有的花蜜。不可思议！\\r
        \\r
        这里有些简单的动作，你会希望来`重复'计数器'次`。
      courseF_bee_for_challenge1_2019: |-
        用这个`计数循环`来收集所有的花蜜。不可思议！\\r
        \\r
        这里有些简单的动作，你会希望来`重复'计数器'次`。
      courseF_bee_for_challenge2: 用最少的模块来通过这一关。
      courseF_bee_for_challenge2_2018: 用最少的模块来通过这一关。
      courseF_bee_for_challenge2_2019: 用最少的模块来通过这一关。
      courseF_bee_for_challenge3: "\\*\\*计数循环超级挑战: \\*\\* 用最少的模块通过这个关卡。"
      courseF_bee_functions2: |-
        为了让事情简单点儿，是时候学习函数了！\\r
        \\r
        从现在开始，你会用到一个新的_函数编辑器_。这个编辑器是独立的窗口，会在你编辑函数的时候出现。当你在工作区写代码时，你不会看到你的函数的所有代码。但是别担心...它一直都在的！ \\r
        \_\_\_\\r
        \\r
        让我们从这个函数开始练习，它只在蜜蜂在花上时，才采花蜜。要看见里面的代码，点击蓝色的"编辑"按钮！\\r
        \\r
        用`只采花蜜`函数来从每朵花收集花蜜。
      courseF_bee_functions2_2018: |-
        为了让事情简单点儿，是时候学习函数了！\\r
        \\r
        从现在开始，你会用到一个新的_函数编辑器_。这个编辑器是独立的窗口，会在你编辑函数的时候出现。当你在工作区写代码时，你不会看到你的函数的所有代码。但是别担心...它一直都在的！ \\r
        \_\_\_\\r
        \\r
        让我们从这个函数开始练习，它只在蜜蜂在花上时，才采花蜜。要看见里面的代码，点击蓝色的"编辑"按钮！\\r
        \\r
        用`只采花蜜`函数来从每朵花收集花蜜。
      courseF_bee_functions3: 现在该你了，制作一个函数来**只**在有蜂窝的时候才酿蜂蜜！点击"编辑"来创建`只酿蜂蜜`函数，然后用它来通过这关。
      courseF_bee_functions3_2018: 现在该你了，制作一个函数来**只**在有蜂窝的时候才酿蜂蜜！点击"编辑"来创建`只酿蜂蜜`函数，然后用它来通过这关。
      courseF_bee_functions3a: |-
        每朵云要么藏着一朵花，或一个蜂窝！写一个函数，如果在花上就采花蜜，否则酿蜂蜜。\\r
        \\r
        用你的函数来通过这关！
      courseF_bee_functions3a_2018: |-
        每朵云要么藏着一朵花，或一个蜂窝！写一个函数，如果在花上就采花蜜，否则酿蜂蜜。\\r
        \\r
        用你的函数来通过这关！
      courseF_bee_functions4: |-
        你知道你能从一个函数_里_调用另一个函数吗？ \\r
        \\r
        在新的`移动并检查`函数里调用你的`检查花蜜或蜂蜜`函数，来帮助蜜蜂转弯，到达的云下的东西，然后转回来！
      courseF_bee_functions4_2018: |-
        你知道你能从一个函数_里_调用另一个函数吗？ \\r
        \\r
        在新的`移动并检查`函数里调用你的`检查花蜜或蜂蜜`函数，来帮助蜜蜂转弯，到达的云下的东西，然后转回来！
      courseF_bee_functions5a: 现在，创建`移动并检查`函数来让蜜蜂能够无论右边是否有路都到达云那里，然后用它通过这关！
      courseF_bee_functions5a_2018: 现在，创建`移动并检查`函数来让蜜蜂能够无论右边是否有路都到达云那里，然后用它通过这关！
      courseF_bee_functions6: |-
        _"这块地太神奇了！"_\\r
        \\r
        创建你自己的函数来帮助蜜蜂在花那里左转，在蜂窝那里右转来通过这个迷宫。别忘了沿途收集所有花蜜，并酿蜂蜜！
      courseF_bee_functions6_2018: |-
        _"这块地太神奇了！"_\\r
        \\r
        创建你自己的函数来帮助蜜蜂在花那里左转，在蜂窝那里右转来通过这个迷宫。别忘了沿途收集所有花蜜，并酿蜂蜜！
      courseF_bee_functions7: |-
        从上一关中重建你的函数来通过这个迷宫。\\r
        \\r
        在蜂窝向左转，在花那里向右转。\\r
        **注意：**有些角落没有标出来！
      courseF_bee_functions7_2018: |-
        从上一关中重建你的函数来通过这个迷宫。\\r
        \\r
        在蜂窝向左转，在花那里向右转。\\r
        **注意：**有些角落没有标出来！
      courseF_bee_functions8a: |-
        在云的下面，可能有不知道有多少花蜜的花，或者不知道有多少蜂蜜的蜂窝\\r
        \\r
        你能写一个程序来处理这些情况吗？
      courseF_bee_functions8a_2018: |-
        在云的下面，可能有不知道有多少花蜜的花，或者不知道有多少蜂蜜的蜂窝\\r
        \\r
        你能写一个程序来处理这些情况吗？
      courseF_bee_functionsPre7: |-
        现在，试着创建一个函数来通过这个迷宫。这和上次的有什么不同？\\r
        \\r
        在蜂窝那里向左转，在花那里向右转。  \\r
        **注意：** 有些角落没有标记！
      courseF_bee_functionsPre7_2018: |-
        现在，试着创建一个函数来通过这个迷宫。这和上次的有什么不同？\\r
        \\r
        在蜂窝那里向左转，在花那里向右转。  \\r
        **注意：** 有些角落没有标记！
      courseF_bee_functions_3_2018: |-
        _"这个花园太棒了！"_\\r
        \\r
        这一关中，每次补丁需要变量比上一次少1。如果想在这关用同样的函数，要在每次循环时让变量减少1。
      courseF_bee_functions_challenge1: 创建一个新的函数, 当前方有路的时候，收集所有的花蜜和蜂蜜。用它来完成关卡!
      courseF_bee_functions_challenge1_2018: 创建一个新的函数, 当前方有路的时候，收集所有的花蜜和蜂蜜。用它来完成关卡!
      courseF_bee_functions_challenge2: 用你所学的来解决这个关卡。
      courseF_bee_functions_challenge2_2018: 用你所学的来解决这个关卡。
      courseF_bee_functions_challenge2_recursion: |-
        在云的下面，可能有不知道有多少花蜜的花，或者不知道有多少蜂蜜的蜂窝\\r
        \\r
        你能写一个程序来处理这些情况吗？
      courseF_bee_fwp1: |-
        检查云下面，来看看是否花里有花蜜。 \\r
        \\r
        在整个阶段，每朵花都有正好**一个**花蜜，每个蜂窝也会有正好**一个**蜂蜜。 \\r
        \\r
        \\r
      courseF_bee_fwp1_2018: |-
        检查云下面，来看看是否花里有花蜜。 \\r
        \\r
        在整个阶段，每朵花都有正好**一个**花蜜，每个蜂窝也会有正好**一个**蜂蜜。 \\r
        \\r
        \\r
      courseF_bee_fwp2: |-
        这里有一些通过上一关的代码。  \\r
        让我们将它拖到一个函数里，然后调用这个函数来检查一行花蜜。 \\r
        \_\_\_\\r
        这现在看起来是很奇怪的一步，但它很快就真的有帮助！
      courseF_bee_fwp2_2018: |-
        这里有一些通过上一关的代码。  \\r
        让我们将它拖到一个函数里，然后调用这个函数来检查一行花蜜。 \\r
        \_\_\_\\r
        这现在看起来是很奇怪的一步，但它很快就真的有帮助！
      courseF_bee_fwp3: |-
        是时候测试函数了！ \\r
        \\r
        让我们看看是否有更容易的方法收集所有三行花蜜。
      courseF_bee_fwp3_2018: |-
        是时候测试函数了！ \\r
        \\r
        让我们看看是否有更容易的方法收集所有三行花蜜。
      courseF_bee_fwp4: |-
        _"你的函数怎么样了？"_   \\r
        \\r
        在这里，我们需要一些调节。点击"编辑"来增加一个`length`（长度）参数到函数里，这样当每行长度不同时，它也能工作。
      courseF_bee_fwp4_2018: |-
        _"你的函数怎么样了？"_   \\r
        \\r
        在这里，我们需要一些调节。点击"编辑"来增加一个`length`（长度）参数到函数里，这样当每行长度不同时，它也能工作。
      courseF_bee_fwp5: |-
        _"到目前为止，你一直做得很棒！"_\\r
        \\r
        让我们用函数来采花蜜。
      courseF_bee_fwp5_2018: |-
        _"到目前为止，你一直做得很棒！"_\\r
        \\r
        让我们用函数来采花蜜。
      courseF_bee_fwp6: |-
        当你将函数和其它变成元素混合起来时，你的代码能够更短，更有效。  \\r
        \_\_\_\\r
        你想在函数里用什么模块来为这一关创建一个又短又美的解决方案？
      courseF_bee_fwp6_2018: |-
        当你将函数和其它变成元素混合起来时，你的代码能够更短，更有效。  \\r
        \_\_\_\\r
        你想在函数里用什么模块来为这一关创建一个又短又美的解决方案？
      courseF_bee_fwp7: "**挑战：**有些东西看起来有点不同。编辑你的函数来酿蜂蜜。"
      courseF_bee_fwp7_2018: "**挑战：**有些东西看起来有点不同。编辑你的函数来酿蜂蜜。"
      courseF_bee_fwp_challenge1: 在函数中使用一个`计数循环`来收集所有的玉米。通过使用`length`（长度）参数，同样的`计数循环`可以数到不同的最大值。
      courseF_bee_fwp_challenge1_2018: 在函数中使用一个`计数循环`来收集所有的玉米。通过使用`length`（长度）参数，同样的`计数循环`可以数到不同的最大值。
      courseF_bee_fwp_challenge2: |-
        _"**莴苣** 看看你是否能通过最后的测试！吧你学到的都用上！"_\\r
        \\r
        在函数里用一个`计数循环`来收集这样的所有蔬菜。
        用`length`（长度）参数来让`计数循环`为不同的最大值计数。通过在函数外使用第二个`计数循环`来让你的程序尽可能的短。\\r
        \\r
        祝你好运！
      courseF_bee_fwp_challenge2_2018: |-
        _"**莴苣** 看看你是否能通过最后的测试！吧你学到的都用上！"_\\r
        \\r
        在函数里用一个`计数循环`来收集这样的所有蔬菜。
        用`length`（长度）参数来让`计数循环`为不同的最大值计数。通过在函数外使用第二个`计数循环`来让你的程序尽可能的短。\\r
        \\r
        祝你好运！
      courseF_bee_variables_3_2018: |-
        _"这个花园太棒了！"_\\r
        \\r
        这一关中，每次补丁需要变量比上一次少1。如果想在这关用同样的函数，要在每次循环时让变量减少1。
      courseF_bee_variables_3_2019: |-
        _"这个花园太棒了！"_\\r
        \\r
        这一关中，每次补丁需要变量比上一次少1。如果想在这关用同样的函数，要在每次循环时让变量减少1。
      courseF_bee_variables_4_2018: |-
        \*"不可思议!"

        编辑代码，让它在本关中也能工作。
      courseF_bee_variables_4_2019: |-
        \*"不可思议!"

        编辑代码，让它在本关中也能工作。
      courseF_maze_ramp1: 在这一关，在<block type="when_run"/></xml>下连接工作区里的所有模块，并点击"运行"来看它运行！
      courseF_maze_ramp13: |-
        现在另一个愤怒的小鸟关卡全放到一起了！\\r
        \\r
        用嵌套循环让小鸟到达猪那里。
      courseF_maze_ramp15: |-
        _"我该生气了！"_ \\r
        \\r
        \\r
        **挑战：**用你学到的知识来帮小鸟抓到猪！
      courseF_maze_ramp1_2018: 在这一关，在<block type="when_run"/></xml>下连接工作区里的所有模块，并点击"运行"来看它运行！
      courseF_maze_ramp2: |-
        将一个 <xml><block type="controls_repeat"><title
        name="TIMES">7</title></block></xml>模块拖出工具箱，并附加到<xml><block type="when_run"/></xml> 事件下。\\r
        \\r
        将<xml><block
        type="maze_moveForward"/></xml>模块放到循环里来完成代码。
      courseF_maze_ramp2_2018: |-
        将一个 <xml><block type="controls_repeat"><title
        name="TIMES">7</title></block></xml>模块拖出工具箱，并附加到<xml><block type="when_run"/></xml> 事件下。\\r
        \\r
        将<xml><block
        type="maze_moveForward"/></xml>模块放到循环里来完成代码。
      courseF_maze_ramp4: |-
        _"沿着这条路带我去找那只笨猪。"_\\r
        \\r
        躲开 TNT 炸药，不然我的羽毛就要被炸飞了！
      courseF_maze_ramp4_2018: |-
        _"沿着这条路带我去找那只笨猪。"_\\r
        \\r
        躲开 TNT 炸药，不然我的羽毛就要被炸飞了！
      courseF_maze_ramp5: |-
        _"沿着这条路，让我到猪那里！"_\\r
        \\r
        躲开TNT炸药。
      courseF_maze_ramp5_2018: |-
        _"沿着这条路，让我到猪那里！"_\\r
        \\r
        躲开TNT炸药。
      courseF_maze_ramp6: |-
        _"保持冷静，帮我找到坏猪。否则，我会生气的！"_\\r
        \\r
        当你将几个同样的模块排成一列时，试试将它们挪到<xml><block type="controls_repeat"><title
        name="TIMES">???</title></block></xml>循环里。这会用更少的代码来做相同的事情！
      courseF_maze_ramp6_2018: |-
        _"保持冷静，帮我找到坏猪。否则，我会生气的！"_\\r
        \\r
        当你将几个同样的模块排成一列时，试试将它们挪到<xml><block type="controls_repeat"><title
        name="TIMES">???</title></block></xml>循环里。这会用更少的代码来做相同的事情！
      courseF_maze_ramp7: |-
        _"我该生气了！"_ \\r
        \\r
        \\r
        **挑战：**用你学到的知识来帮小鸟抓到猪！
      courseF_playlab_brokenText: |-
        在这个阶段剩下来的时间，我们要用多个`问`模块和多个`如果/否则`模块来创造一个**你**控制的游戏！\\r
        \\r
        从设置"codename"（代号）变量开始，来设置一个你能记得的词语。然后用一个`问`模块来从用户那里获得一个代号。你需要`如果/否则`模块来看是否输入的代号和你设置的代号是一样的。
      courseF_playlab_variables0: |-
        这是海盗。他这几天非常难以理解！\\r
        \\r
        通过改变代码中的文本块来解码他的话：\\r

        -   "arrrg"应该是"a"\\r
        -   "ye"应该是"e"\\r
            \\r
      courseF_playlab_variables1: |-
        这是海盗。他这几天非常难以理解！\\r
        \\r
        通过改变代码中的文本块来解码他的话：\\r

        -   "arrrg"应该是"a"\\r
        -   "ye"应该是"e"\\r
            \\r
      courseF_playlab_variables1a: |-
        变量能够用来存放晚一些想用的文本。\\r
        \\r
        通过将这个文本赋值给`shout`（喊叫）变量，让足球运动员琪琪喊出："进球了！"
      courseF_playlab_variables1a_2018: |-
        变量能够用来存放晚一些想用的文本。\\r
        \\r
        通过将这个文本赋值给`shout`（喊叫）变量，让足球运动员琪琪喊出："进球了！"
      courseF_playlab_variables2: |-
        ## 现在，通过在两个地方改变变量的值来解码海盗的话！  \\r

        "arrrg"应该是"a" \\r

        -   "ye"应该是"e"\\r
            \\r
      courseF_playlab_variables2a: |-
        ## 现在，通过在两个地方改变变量的值来解码海盗的话！  \\r

        "arrrg"应该是"a" \\r

        -   "ye"应该是"e"\\r
            \\r
      courseF_playlab_variables2b RYAN CLONE: |-
        我们能通过将几段文本和变量混合到一起来做出更有趣的句子。\\r
        \\r
        通过将`color`（颜色）变量放到`连接`模块的空位中，来将它插入到句子中间。
      courseF_playlab_variables2b: |-
        我们能通过将几段文本和变量混合到一起来做出更有趣的句子。\\r
        \\r
        通过将`color`（颜色）变量放到`连接`模块的空位中，来将它插入到句子中间。
      courseF_playlab_variables2b_2018: |-
        我们能通过将几段文本和变量混合到一起来做出更有趣的句子。\\r
        \\r
        通过将`color`（颜色）变量放到`连接`模块的空位中，来将它插入到句子中间。
      courseF_playlab_variables3: |-
        太好了！现在你理解了如何用变量来让角色说话，可以接着使用`问`模块了。  \\r
        \\r
        `问`模块会自动将用户的回答存到选择的变量中。 \\r
        \\r
        运行程序，并输入一些东西让海盗说出来。\\r
        \\r
      courseF_playlab_variables3b: '帮助琪琪和布赖恩对话，使用变量`age`来放到所有需要使用年龄`12`的地方。 '
      courseF_playlab_variables3bEdit: '帮助琪琪和布赖恩对话，使用变量`A1`来放到所有需要使用年龄`12`的地方。 '
      courseF_playlab_variables3b_josh: '帮助琪琪和布赖恩对话，使用变量`age`来放到所有需要使用年龄`12`的地方。 '
      courseF_playlab_variables3b_josh_2018: '帮助琪琪和布赖恩对话，使用变量`age`来放到所有需要使用年龄`12`的地方。 '
      courseF_playlab_variables4: |-
        现在，我们要用`用... 创建文本`模块加入一个变量到海盗下个句子开始的地方。\\r
        \\r
        你能在工具箱里找到正确的变量填到这个空位里吗？\\r
        \\r
      courseF_playlab_variables4b: |-
        现在，海盗有些问题要问布赖恩。\\r
        \\r
        代码用了一个`问`模块，因此你可以在点击"运行"按钮后，输入布赖恩的回答。\\r
        \\r
        将变量放到正确的地方来创建这个对话。
      courseF_playlab_variables4b_2018: |-
        现在，海盗有些问题要问布赖恩。\\r
        \\r
        代码用了一个`问`模块，因此你可以在点击"运行"按钮后，输入布赖恩的回答。\\r
        \\r
        将变量放到正确的地方来创建这个对话。
      courseF_playlab_variables5: |-
        现在我们要在海盗的句子中间加一个变量，因此需要用到多于一个`用... 创建文本`模块。\\r
        \\r
        这是如何将`用... 创建文本`模块连接组成长句子的说明：\\r
        \\r
        ![](https://images.code.org/1c9bdc9e73d60b5ed053c3c4e9e1dcd4-image-1476993588379.gif)
      courseF_playlab_variables5b: |-
        海盗要问**你**一些问题。\\r
        \\r
        将所有变量放在正确的位置上，让他的故事合理。
      courseF_playlab_variables5c RYAN Copy: |-
        让我们将`问`模块和一个`如果/否则`模块组合在一起来做一个游戏！\\r
        \\r
        海盗要问你一个问题。拖拽一个`answer`（回答）变量到`如果`语句的条件中，来检查是否你输入了正确的颜色。
      courseF_playlab_variables5c: |-
        让我们将`问`模块和一个`如果/否则`模块组合在一起来做一个游戏！\\r
        \\r
        海盗要问你一个问题。拖拽一个`answer`（回答）变量到`如果`语句的条件中，来检查是否你输入了正确的颜色。
      courseF_playlab_variables5c_2018: |-
        让我们将`问`模块和一个`如果/否则`模块组合在一起来做一个游戏！\\r
        \\r
        海盗要问你一个问题。拖拽一个`answer`（回答）变量到`如果`语句的条件中，来检查是否你输入了正确的颜色。
      courseF_playlab_variables6b: |-
        你不能在一个演员的说话泡泡里写太多的文字，因此有时你要让演员说好几次。\\r
        \\r
        我们提供了一些初始的问题和变量给你。将它们连到一起来做一个有趣的故事，并用多于一个泡泡来讲它。
      courseF_playlab_variables6c: |-
        在这个阶段剩下来的时间，我们要用多个`问`模块和多个`如果/否则`模块来创造一个**你**控制的游戏！\\r
        \\r
        从设置"codename"（代号）变量开始，来设置一个你能记得的词语。然后用一个`问`模块来从用户那里获得一个代号。你需要`如果/否则`模块来看是否输入的代号和你设置的代号是一样的。
      courseF_playlab_variables6c_2018: |-
        在这个阶段剩下来的时间，我们要用多个`问`模块和多个`如果/否则`模块来创造一个**你**控制的游戏！\\r
        \\r
        从设置"codename"（代号）变量开始，来设置一个你能记得的词语。然后用一个`问`模块来从用户那里获得一个代号。你需要`如果/否则`模块来看是否输入的代号和你设置的代号是一样的。
      courseF_playlab_variables7b: |-
        是时候做你自己的项目了！ \\r
        \\r
        将一些问题和答案创建并编制到自己的故事里。\\r
        \\r
        如果你需要创意，点击提示图标。
      courseF_playlab_variables7b_2018: |-
        是时候做你自己的项目了！ \\r
        \\r
        将一些问题和答案创建并编制到自己的故事里。\\r
        \\r
        如果你需要创意，点击提示图标。
      courseF_playlab_variables7c: |-
        添加另一个`ask`（问）模块来让用户猜一个颜色。\\r
        \\r
        保留`如果/否则`语句，这样你的代号能永远赢的游戏，但是其它的代号都会输。
      courseF_playlab_variables7c_2018: |-
        添加另一个`ask`（问）模块来让用户猜一个颜色。\\r
        \\r
        保留`如果/否则`语句，这样你的代号能永远赢的游戏，但是其它的代号都会输。
      courseF_playlab_variables8b: |-
        用你学会的来在演员之间创造一个即兴的场景。\\r
        \\r
        **即兴的：** _演员在舞台上用观众的信息来表演。_
      courseF_playlab_variables8c: 用`连接`模块（在工具箱的"文本"里）来制作一个输/赢的消息，通过将`codename`（代号）和`color`（颜色）变量放到响应中来进行个性化。
      courseF_playlab_variables8c_2018: 用`连接`模块（在工具箱的"文本"里）来制作一个输/赢的消息，通过将`codename`（代号）和`color`（颜色）变量放到响应中来进行个性化。
      courseF_playlab_variables_challenge1: 使用这些模块使演员分享一个敲门问答的笑话。改变警句和设置来讲你自己的笑话！
      courseF_playlab_variables_challenge1_2018: 使用这些模块使演员分享一个敲门问答的笑话。改变警句和设置来讲你自己的笑话！
      courseF_playlab_variables_challenge2: |-
        现在是捉人游戏！捉住小猫（演员2）得2分。捉住企鹅（演员3）得3分。得到正好10分就赢了！\\r
        \\r
        但是小心，当小猫和企鹅互相碰到时，他们就会把分数要回去。\\r
        \\r
        \---\\r
        \\r
        添加所需的模块能让这个游戏按照解说的运行。\\r

        -   怎样让小狗能用方向键往所有方向移动？\\r
        -   怎样在小狗捉住小猫或者企鹅时加分？\\r
        -   怎样在小猫和企鹅碰到时扣分？
      courseF_playlab_variables_challenge2_2018: |-
        现在是捉人游戏！捉住小猫（演员2）得2分。捉住企鹅（演员3）得3分。得到正好10分就赢了！\\r
        \\r
        但是小心，当小猫和企鹅互相碰到时，他们就会把分数要回去。\\r
        \\r
        \---\\r
        \\r
        添加所需的模块能让这个游戏按照解说的运行。\\r

        -   怎样让小狗能用方向键往所有方向移动？\\r
        -   怎样在小狗捉住小猫或者企鹅时加分？\\r
        -   怎样在小猫和企鹅碰到时扣分？
      courseF_playlab_variables_challenge3: |-
        你能指出"Fortune Teller"（预言家）应用如何工作的吗？试着将下面的功能加到游戏中：\\r
        \\r

        -   将"是"和"否"的答案改成其它东西来让游戏更有趣。\\r
        -   让玩家在演员说了预言后，来问另一个问题。\\r
        -   当巫师是`生气`或`正常`的情绪时，再让她说两件事情。\\r
        -   给巫师她自己的一组预言。\\r
        -   \*
            让每个演员都随机改变情绪。\\r
            \\r
            如果需要帮助，就看看提示！
      course_playlab_variables1: |-
        这是海盗。他这几天非常难以理解！\\r
        \\r
        通过改变代码中的文本块来解码他的话：\\r

        -   "arrrg"应该是"a"\\r
        -   "ye"应该是"e"\\r
            \\r
      course_playlab_variables2: |-
        ## 现在，通过在两个地方改变变量的值来解码海盗的话！  \\r

        "arrrg"应该是"a" \\r

        -   "ye"应该是"e"\\r
            \\r
      course_playlab_variables3: |-
        ## 现在，通过在两个地方改变变量的值来解码海盗的话！  \\r

        "arrrg"应该是"a" \\r

        -   "ye"应该是"e"\\r
            \\r
      coursea_maze_ramp1_2018: 让小鸟到达猪那里，将<xml><block type="maze_moveEast"/></xml>模块粘到<xml><block type="when_run"/></xml>模块的下面，然后点击"▶ 运行"！
      coursea_maze_ramp1_2019: 让小鸟到达猪那里，将<xml><block type="maze_moveEast"/></xml>模块粘到<xml><block type="when_run"/></xml>模块的下面，然后点击"▶ 运行"！
      coursef_maze_ramp3: |-
        _"这只猪把我的羽毛弄皱了。"_\\r
        \\r
        这里有一个额外的模块会让小鸟坠落。\\r
        将其拖回工具箱来扔掉它。
      coursef_maze_ramp3_2018: |-
        _"这只猪把我的羽毛弄皱了。"_\\r
        \\r
        这里有一个额外的模块会让小鸟坠落。\\r
        将其拖回工具箱来扔掉它。
      csd-post-survey-2017-FR: 有什么别的你想说的，关于在课程中的体验吗？
      csd-post-survey-2017-FR_2018: 请提供你对本课程的反馈。
      csd-post-survey-2017-FR_2019: 有什么别的你想说的，关于在课程中的体验吗？
      csd-post-survey-2018-topics-liked-FR: 请提供你对本课程的反馈。
      csd-post-survey-2018-topics-want-FR: 有哪些主题是你有兴趣并打算在将来学习的？
      csd-pulse-check-survey-1-free-response U1Ch2: 有什么你想让老师知道别的事情吗？
      csd-pulse-check-survey-1-free-response U1Ch2_2018: 有什么你想让老师知道别的事情吗？
      csd-pulse-check-survey-1-free-response U2Ch1: 有什么你想让老师知道别的事情吗？
      csd-pulse-check-survey-1-free-response U2Ch2: 有什么你想让老师知道别的事情吗？
      csd-pulse-check-survey-1-free-response U3Ch1: 有什么你想让老师知道别的事情吗？
      csd-pulse-check-survey-1-free-response U3Ch2: 有什么你想让老师知道别的事情吗？
      csd-pulse-check-survey-1-free-response U4Ch1: 有什么你想让老师知道别的事情吗？
      csd-pulse-check-survey-1-free-response U4Ch1_2018: 有什么你想让老师知道别的事情吗？
      csd-pulse-check-survey-1-free-response U4Ch2: 有什么你想让老师知道别的事情吗？
      csd-pulse-check-survey-1-free-response U4Ch2_2018: 有什么你想让老师知道别的事情吗？
      csd-pulse-check-survey-1-free-response U5Ch1: 有什么你想让老师知道别的事情吗？
      csd-pulse-check-survey-1-free-response U5Ch1_2018: 有什么你想让老师知道别的事情吗？
      csd-pulse-check-survey-1-free-response U5Ch2: 有什么你想让老师知道别的事情吗？
      csd-pulse-check-survey-1-free-response U5Ch2_2018: 有什么你想让老师知道别的事情吗？
      csd-pulse-check-survey-1-free-response U6Ch1: 有什么你想让老师知道别的事情吗？
      csd-pulse-check-survey-1-free-response U6Ch1_2018: 有什么你想让老师知道别的事情吗？
      csd-pulse-check-survey-1-free-response U6Ch2: 有什么你想让老师知道别的事情吗？
      csd-pulse-check-survey-1-free-response U6Ch2_2018: 有什么你想让老师知道别的事情吗？
      csd-pulse-check-survey-1-free-response: 有什么你想让老师知道别的事情吗？
      csd-thursday-facilitation: "# 星期四反思引导\\\\r\n\n\\\\r\n\n## \n\n讨论环节\\\\r\n\\\\r\n你已经看到了一系列的着重于讨论的环节。一些特别的例子会包括在社区（星期三），和招聘/学生需要（星期四）的环节。这些环节有什么共同的引导员策略？\\\\r\n\\\\r\n\n-   引导员要做什么？\\\\r\n-   老师要做什么？"
      csd-thursday-pedagogy: "# 星期四教育法反思\n\n第一部分\\\\r\n\\\\r\n\n## 有差别的说明\\\\r\n\n\\\\r\n你从有差别说明中学到了什么策略，用来满足学生在计算机科学发现学习时的不同需求？列出至少两个主意。 "
      csd-thursday-pedagogy2: |-
        # 星期四反思教育

        第二部分\\r
        \\r

        ## 招聘和学生需求\\r

        \\r
        在社区环节，今早你们讨论了招聘学生和满足你工作地区的学生的需要。（如果你不在自己的地区，想一想自己在这个环节的体验，也许能应用到你的地区。）\\r
        \\r
        \*
        什么是你的地区的教师共同的招聘的痛处？\\r
        \*
        什么是你的地区的教师共同的，支持学生的需求？\\r
        \*
        今天你看到的东西，有没有想要一整年都参与的？\\r

        -   到今年底，你希望在你的地区要完成的招聘目标是什么？\\r
      csd-thursday-unit: |-
        # 星期四单元反思 第一部分

        \\r
        \\r

        ## 游戏实验室\\r

        \\r
        你会如何向一位对使用它感兴趣的新教师解释游戏实验室的编程？ \\r
        \\r

        -   游戏实验室的什么方式比专业教育工具还有用？ \\r
        -   使用游戏实验室，有什么样的学生支持？\\r
      csd-thursday-unit2: "# 星期四单元反思 第二部分\\\\r\n\n\\\\r\n\n## \n\n教师在插电的单元\\\\r\n\\\\r\n教师在这个单元的角色，有多少计算机科学的内容嵌入到了这些关卡中？"
      csd-tuesday-facilitation: "# 反思引导\\\\r\n\n\\\\r\n\n## \n\nTLOs\\\\r\n\\\\r\n你已经看见了3个模型TLOs（引导员教的）和两个参与者的TLOs（老师教的）。你注意到引导员在这些环节中做的有什么规律吗（考虑这堂课本身和汇报）？\\\\r\n\\\\r\n\\*\n引导员在课程中做了什么？\\\\r\n\n-   引导员在汇报中做了什么？\\\\r\n-   引导员谈论的和老师做的时间上如何分配的？ \\\\r"
      csd-tuesday-pedagogy: "# 星期二教育反思\\\\r\n\n\\\\r\n\n## \n\n课堂练习\\\\r\n\\\\r\n命名两个<a href=\"https://docs.google.com/document/d/1FhHPqlC6dU_z9retuBYb-duUwyKpnjwuEgjF4zfdhvI/edit#heading=h.xbvgs2732c34\">\n课堂练习</a>，在过去的天里看到的5个TLOs，有榜样吗？ \\\\r\n\\\\r\n\n-   他们什么时候成功的？\\\\r\n-   当他们的课堂改进时，有什么样的特征？"
      csd-tuesday-unit: "# 星期二单元反思 第一部分\\\\r\n\n\\\\r\n\n## \n\n离线的单元1\\\\r\n\\\\r\n你该如何回应老师问为什么第一单元不用计算机？"
      csd-tuesday-unit2: "# 星期二单元反思第二部分\\\\r\n\n\\\\r\n\n## \n\n积极的课堂社区\\\\r\n\\\\r\n教案支持用什么样的方法构建一个积极的课堂社区？"
      csd-wednesday-facilitation: |-
        # 星期三引导反思\\r

        \\r

        ## 引导员展示\\r

        \\r
        你已经看过了三个早上的开始环节和三个下午的结束环节。在这些环节中，有什么共同的引导员策略？\\r
        \\r

        -   引导员要做什么？\\r
        -   \*
            教师要做什么？\\r
        -   你看到引导员用什么策略让老师保持兴趣？\\r
      csd-wednesday-pedagogy: "# 星期三教育反思\\\\r\n\n\\\\r\n\n## \n\n建立社区与处理障碍\\\\r\n\\\\r\n在早上的社区环节，你们讨论了建立社团以及处理障碍来发展当你社区的计算机科学教育。（如果你不在自己的地区，思考一下这个环节遇到问题也许会发生在你的地区。）\\\\r\n\\\\r\n\n-   什么是你的地区老师经常分享的障碍？\\\\r\n-   你遇到过被别的老师分享过的障碍吗？\\\\r\n-   你能在本地社区帮上什么吗？\\\\r\n-   今天有什么你看到的东西，想整年都检查一下？\\\\r\n-   \\*\n    你希望在年底前帮助你的地区实现哪些社区发展目标？\\\\r"
      csd-wednesday-unit: |-
        # 星期三单元反思第一部分\\r

        \\r

        ## 第1单元和第2单元联系\\r

        \\r
        第1单元里的什么联系能被用在第2单元开始的激励环节？
      csd-wednesday-unit2: |-
        # 星期三单元反思第2部分\\r

        \\r

        ## 网络实验室\\r

        \\r
        你如何向对网络实验室感兴趣的教师介绍它？\\r
        \\r

        -   网络实验室的什么方式比专业的教育工具还有用？ \\r
        -   学生们用网络实验室时，有什么可能的支持方式？\\r
      csd1dlp-assessment: |-
        <br><br>\\r
        \\r

        > **注意：在你开始这个反思之前，确保回顾了第1单元的课程，并对整个单元的角色评估有了很好的认识。如果你还没有回顾这些资料，可以现在做，稍后再回到这个反思部分。**\\r
        > \\r
        > \\r

        # 第1单元的评估\\r

        \\r
        在这个反思里，你要考虑下面的每个提示，写下一个回应来展示你对第一单元课程的理解。你的答复应该清楚的达到以下目标： \\r
        \\r

        1.  这个单元里有什么样的总结和正式的评估机会？ \\r
            \\t\* 这个单元在这个项目中有什么作用？ \\r
            \\t\* 在这个单元里，这些项目如何让内容和技巧得到发展？ \\r
        2.  通过活动和项目，这个单元里的哪个学生练习（PPCCC）最能得到磨练？ \\r
        3.  这个单元里K12框架里的2017CSTA核心里的标准或思路是什么？\\r
            \\r
            \\r
            > ## 完成反思获得分数 \\r
            >
            > \\r
            >
            > -   一旦你提交了反思，对问题的答复会被匿名分享，并被同伴评论，你也会评论其他引导员的答复。评论者会寻找有思考的和深入的答案，这些答案显示你花了时间来思考问题。评论者也有机会给你的提交写反馈，你还能回应反馈并再次提交。\\r
        4.  为了完成答复并获得分数，需要两个评论者来完全同意你的答复。如果评论者不能决定你提交的答复，他们可以提交到教练那里来评论。你随时有机会来回答他们的反馈，并重新提交反思！一旦评论者有了反馈，它们会显示在页面的最下方。 \\r

        \\r
        \\r
      csd1dlp-lessons: "<br><br>\\\\r\n\\\\r\n\n> **注意：在你开始这个反思之前，确保回顾了第1单元的课程，并对课程间的联系有了很好的认识。如果你还没有回顾这些资料，可以现在做，稍后再回到这个反思部分。**\\\\r\n> \\\\r\n> \\\\r\n\n# \n\n第1单元课程联系和理念\\\\r\n\\\\r\n在这个反思里，你要考虑下面的每个提示，写下一个回应来展示你对第一单元课程的理解。你的答复应该清楚的达到以下目标： \\\\r\n\\\\r\n\n1.  这个单元里，一次典型的课程是什么样子的？ \\\\r\n    \\\\r\n2.  前后的课程之间有什么关联？\\\\r\n    \\\\r\n3.  在这个单元中，哪里让你看到了教案的价值和哲学得到了强调？\\\\r\n    \\\\t- 教案支持用什么方式构建一个积极主动的班集体？\\\\r\n    \\\\r\n4.  输入-输出-存储-处理的模型，是如何帮助学生深入思考计算机帮助我们解决问题的方式的？\\\\r\n    \\\\r\n    \\\\r\n    > ## 完成反思获得分数 \\\\r\n    >\n    > \\\\r\n    >\n    > -   一旦你提交了反思，对问题的答复会被匿名分享，并被同伴评论，你也会评论其他引导员的答复。评论者会寻找有思考的和深入的答案，这些答案显示你花了时间来思考问题。评论者也有机会给你的提交写反馈，你还能回应反馈并再次提交。\\\\r\n5.  为了完成答复并获得分数，需要两个评论者来完全同意你的答复。如果评论者不能决定你提交的答复，他们可以提交到教练那里来评论。你随时有机会来回答他们的反馈，并重新提交反思！一旦评论者有了反馈，它们会显示在页面的最下方。 \\\\r\n\n\\\\r\n\\\\r"
      csd1dlp-tools: |-
        \\r
        \\r
        <br><br>\\r
        \\r

        > **注意：在你开始这个反思之前，确保回顾了第1单元的课程，并对课程中工具的角色有了很好的认识。如果你还没有回顾这些资料，可以现在做，稍后再回到这个反思部分。**\\r
        > \\r
        > \\r

        # 第1单元工具理念和使用\\r

        \\r
        在这个反思里，你要考虑下面的每个提示，写下一个回应来展示你对第一单元课程的理解。你的答复应该清楚的达到以下目标： \\r
        \\r

        -   如果一位老师问你为什么第一单元不使用计算机，你会如何回答？\\r
            \\r
            \\r
            > ## 完成反思获得分数 \\r
            >
            > \\r
            >
            > -   一旦你提交了反思，对问题的答复会被匿名分享，并被同伴评论，你也会评论其他引导员的答复。评论者会寻找有思考的和深入的答案，这些答案显示你花了时间来思考问题。评论者也有机会给你的提交写反馈，你还能回应反馈并再次提交。\\r
        -   为了完成答复并获得分数，需要两个评论者来完全同意你的答复。如果评论者不能决定你提交的答复，他们可以提交到教练那里来评论。你随时有机会来回答他们的反馈，并重新提交反思！一旦评论者有了反馈，它们会显示在页面的最下方。 \\r
            \\r
            \\r
            \\r
      csd2dlp-assessment: |-
        <br><br>\\r
        \\r

        > **注意：在你开始这个反思之前，确保回顾了第2单元的课程，并对整个单元的角色评估有了很好的认识。如果你还没有回顾这些资料，可以现在做，稍后再回到这个反思部分。**\\r
        > \\r
        > \\r

        # 第2单元里的评估\\r

        \\r
        在这个反思里，你要考虑下面的每个提示，写下一个回应来展示你对第2单元课程的理解。你的答复应该清楚的达到以下目标： \\r
        \\r

        1.  这个单元里有什么总结并正式的评估的机会？ \\r
            \\t\* 这个单元里的项目是什么角色？ \\r
            \\t\* 这些项目是如何应用在这个单元中发展的内容和技能的？ \\r
            \\t\* 这个单元中的长项目有什么特殊的考虑？\\r
        2.  2.
            学完这单元后，学生们会获得什么样的技能和知识？\\r
        3.  这个单元里K12框架里的2017CSTA核心里的标准或思路是什么？\\r
            \\r
            \\r
            \\r
            > ## 完成反思获得分数 \\r
            >
            > \\r
            >
            > -   一旦你提交了反思，对问题的答复会被匿名分享，并被同伴评论，你也会评论其他引导员的答复。评论者会寻找有思考的和深入的答案，这些答案显示你花了时间来思考问题。评论者也有机会给你的提交写反馈，你还能回应反馈并再次提交。\\r
        4.  为了完成答复并获得分数，需要两个评论者来完全同意你的答复。如果评论者不能决定你提交的答复，他们可以提交到教练那里来评论。你随时有机会来回答他们的反馈，并重新提交反思！一旦评论者有了反馈，它们会显示在页面的最下方。 \\r

         \\r
        \\r
      csd2dlp-lessons: "<br><br>\\\\r\n\\\\r\n\n> **注意：在你开始这个反思之前，确保回顾了第2单元的课程，并对课程间的联系有了很好的认识。如果你还没有回顾这些资料，可以现在做，稍后再回到这个反思部分。**\\\\r\n> \\\\r\n> \\\\r\n\n# \n\n第2单元课程联系和理念\\\\r\n\\\\r\n在这个反思里，你要考虑下面的每个提示，写下一个回应来展示你对第2单元课程的理解。你的答复应该清楚的达到以下目标： \\\\r\n\\\\r\n\n1.  这个单元中哪堂课比较难教，为什么？ \\\\r\n2.  这单元的内容是如何一步步递进的？ \\\\r\n3.  第1单元的内容能被如何联系并激励第2单元中前面的课程？\\\\r\n4.  为什么游戏实验室要在教Javascript前，先教HTML和CSS？ \\\\r\n5.  你觉得这个单元中最重要的两个课堂练习是什么？为什么？\\\\r\n    \\\\r\n    > ## 完成反思获得分数 \\\\r\n    >\n    > \\\\r\n    >\n    > -   一旦你提交了反思，对问题的答复会被匿名分享，并被同伴评论，你也会评论其他引导员的答复。评论者会寻找有思考的和深入的答案，这些答案显示你花了时间来思考问题。评论者也有机会给你的提交写反馈，你还能回应反馈并再次提交。\\\\r\n6.  为了完成答复并获得分数，需要两个评论者来完全同意你的答复。如果评论者不能决定你提交的答复，他们可以提交到教练那里来评论。你随时有机会来回答他们的反馈，并重新提交反思！一旦评论者有了反馈，它们会显示在页面的最下方。 \n    \\\\r\n    \\\\r\n    \\\\r\n    \\\\r"
      csd2dlp-tools: "\\\\r\n\\\\r\n<br><br>\\\\r\n\\\\r\n\n> **注意：在你开始这个反思之前，确保回顾了第2单元的课程，并对课程中工具的角色有了很好的认识。如果你还没有回顾这些资料，可以现在做，稍后再回到这个反思部分。**\\\\r\n> \\\\r\n> \\\\r\n\n# 第2单元工具理念和使用\\\\r\n\n\\\\r\n在这个反思里，你要考虑下面的每个提示，写下一个回应来展示你对第2单元课程的理解。你的答复应该清楚的达到以下目标： \\\\r\n\\\\r\n\n1.  如果一位老师说，他们只是让学生坐在电脑前，让他们自己按照自己的节奏来进行，你会如何回应？\\\\r\n2.  这单元中，使用网络实验室的理念是什么？ \\\\r\n    \\\\t\\* 是什么让网络实验室教育比专业工具要好？ \\\\r\n    \\\\t\\* 学生们使用网络实验室时，会得到什么样的支持？\\\\r\n    \\\\r\n    \\\\r\n    \\\\r\n    > ## 完成反思获得分数 \\\\r\n    >\n    > \\\\r\n    >\n    > -   一旦你提交了反思，对问题的答复会被匿名分享，并被同伴评论，你也会评论其他引导员的答复。评论者会寻找有思考的和深入的答案，这些答案显示你花了时间来思考问题。评论者也有机会给你的提交写反馈，你还能回应反馈并再次提交。\\\\r\n3.  为了完成答复并获得分数，需要两个评论者来完全同意你的答复。如果评论者不能决定你提交的答复，他们可以提交到教练那里来评论。你随时有机会来回答他们的反馈，并重新提交反思！一旦评论者有了反馈，它们会显示在页面的最下方。 \n    \\\\r\n    \\\\r\n    \\\\r"
      csd3dlp-assessment: "<br><br>\\\\r\n\\\\r\n\n> **注意：在你开始这个反思之前，确保回顾了第3单元的课程，并对整个单元的角色评估有了很好的认识。如果你还没有回顾这些资料，可以现在做，稍后再回到这个反思部分。**\\\\r\n> \\\\r\n> \\\\r\n\n# 第3单元里的评估\\\\r\n\n\\\\r\n在这个反思里，你要考虑下面的每个提示，写下一个回应来展示你对第3单元课程的理解。你的答复应该清楚的达到以下目标： \\\\r\n\\\\r\n\n1.  这个单元里有什么总结并正式的评估的机会？ \\\\r\n    \\\\t\\* 这个单元里的项目是什么角色？ \\\\r\n    \\\\t\\* 这些项目是如何应用在这个单元中发展的内容和技能的？ \\\\r\n2.  通过这个单元的额活动和项目，哪些学生训练（PPCCC）会最能得到磨练？ \\\\r\n3.  在这单元中，什么核心的2017CSTA学生概念（算法和编程，计算机系统，数据分析，计算的影响和计算机网络与互联网），以及练习（鼓励和包容计算机文化，计算机的合作，认识和定义可计算的问题，开发和使用抽象，创造可计算的作品，测试和重定义可计算的作品和计算的通信）得到了强调？它们是如何得到强调的？\\\\r\n    \\\\r\n    > ## 完成反思获得分数 \\\\r\n    >\n    > \\\\r\n    >\n    > -   一旦你提交了反思，对问题的答复会被匿名分享，并被同伴评论，你也会评论其他引导员的答复。评论者会寻找有思考的和深入的答案，这些答案显示你花了时间来思考问题。评论者也有机会给你的提交写反馈，你还能回应反馈并再次提交。\\\\r\n4.  为了完成答复并获得分数，需要两个评论者来完全同意你的答复。如果评论者不能决定你提交的答复，他们可以提交到教练那里来评论。你随时有机会来回答他们的反馈，并重新提交反思！一旦评论者有了反馈，它们会显示在页面的最下方。 \n    \\\\r\n    \\\\r"
      csd3dlp-lessons: "<br><br>\\\\r\n\\\\r\n\n> **注意：在你开始这个反思之前，确保回顾了第3单元的课程，并对课程间的联系有了很好的认识。如果你还没有回顾这些资料，可以现在做，稍后再回到这个反思部分。**\\\\r\n> \\\\r\n> \\\\r\n\n# \n\n第3单元课程联系和理念\\\\r\n\\\\r\n在这个反思里，你要考虑下面的每个提示，写下一个回应来展示你对第3单元课程的理解。你的答复应该清楚的达到以下目标： \\\\r\n\\\\r\n\n1.  这个单元中哪堂课比较难教，为什么？ \\\\r\n2.  在这个单元的哪一课非常基础，为什么？\\\\r\n3.  这个单元的课程是如何逐步递进提高的？\\\\r\n4.  如果某位教师的学生们有着非常不同的编程背景，你如何推荐教师对这单元做区别式的说明？\\\\r\n    \\\\r\n    > ## 完成反思获得分数 \\\\r\n    >\n    > \\\\r\n    >\n    > -   一旦你提交了反思，对问题的答复会被匿名分享，并被同伴评论，你也会评论其他引导员的答复。评论者会寻找有思考的和深入的答案，这些答案显示你花了时间来思考问题。评论者也有机会给你的提交写反馈，你还能回应反馈并再次提交。\\\\r\n5.  为了完成答复并获得分数，需要两个评论者来完全同意你的答复。如果评论者不能决定你提交的答复，他们可以提交到教练那里来评论。你随时有机会来回答他们的反馈，并重新提交反思！一旦评论者有了反馈，它们会显示在页面的最下方。 \\\\r\n    \\\\r\n    \\\\r\n    \\\\r"
      csd3dlp-tools: |-
        \\r
        \\r
        <br><br>\\r
        \\r

        > **注意：在你开始这个反思之前，确保回顾了第3单元的课程，并对课程中工具的角色有了很好的认识。如果你还没有回顾这些资料，可以现在做，稍后再回到这个反思部分。**\\r
        > \\r
        > \\r

        # 第3单元工具理念和使用\\r

        \\r
        在这个反思里，你要考虑下面的每个提示，写下一个回应来展示你对第3单元课程的理解。你的答复应该清楚的达到以下目标： \\r
        \\r

        1.  在这个单元中，教师的角色是什么？计算机科学的内容有多少嵌入到这些关卡中？\\r
            \\t\* 在游戏实验室里编程的理念是什么？ \\r
            \\t_从哪些方面来说，游戏实验室是个教育工具，而不是专业工具？
            \\r
            \\t_ 学生们使用游戏实验室时，可以获得什么样的支持？\\r
        2.  当教师帮助学生们从网络实验室转向游戏实验室时，他们应该注意什么？\\r
            \\r
            \\r
            \\r
            > ## 完成反思获得分数 \\r
            >
            > \\r
            >
            > -   一旦你提交了反思，对问题的答复会被匿名分享，并被同伴评论，你也会评论其他引导员的答复。评论者会寻找有思考的和深入的答案，这些答案显示你花了时间来思考问题。评论者也有机会给你的提交写反馈，你还能回应反馈并再次提交。\\r
        3.  为了完成答复并获得分数，需要两个评论者来完全同意你的答复。如果评论者不能决定你提交的答复，他们可以提交到教练那里来评论。你随时有机会来回答他们的反馈，并重新提交反思！一旦评论者有了反馈，它们会显示在页面的最下方。\\r

        \\r
        \\r
        \\r
      csd4dlp-assessment: |-
        <br><br>\\r
        \\r

        > **注意：在你开始这个反思之前，确保回顾了第4单元的课程，并对整个单元的角色评估有了很好的认识。如果你还没有回顾这些资料，可以现在做，稍后再回到这个反思部分。**\\r
        > \\r
        > \\r

        # 第4单元的评估\\r

        \\r
        在这个反思里，你要考虑下面的每个提示，写下一个回应来展示你对第4单元课程的理解。你的答复应该清楚的达到以下目标： \\r
        \\r

        1.  学生们在学完这个单元后，应该获得什么样的技巧和知识？这个单元里有什么样的总结和正式的评估机会，来评估这些技巧和知识？\\r
        2.  这个单元中的小组有没有什么特别的考虑？\\r
        3.  在这单元中，什么核心的2017CSTA学生概念（算法和编程，计算机系统，数据分析，计算的影响和计算机网络与互联网），以及练习（鼓励和包容计算机文化，计算机的合作，认识和定义可计算的问题，开发和使用抽象，创造可计算的作品，测试和重定义可计算的作品和计算的通信）得到了强调？它们是如何得到强调的？\\r
            \\r
            > ## 完成反思获得分数 \\r
            >
            > \\r
            >
            > -   一旦你提交了反思，对问题的答复会被匿名分享，并被同伴评论，你也会评论其他引导员的答复。评论者会寻找有思考的和深入的答案，这些答案显示你花了时间来思考问题。评论者也有机会给你的提交写反馈，你还能回应反馈并再次提交。\\r
        4.  为了完成答复并获得分数，需要两个评论者来完全同意你的答复。如果评论者不能决定你提交的答复，他们可以提交到教练那里来评论。你随时有机会来回答他们的反馈，并重新提交反思！一旦评论者有了反馈，它们会显示在页面的最下方。
            \\r
      csd4dlp-lessons: "<br><br>\\\\r\n\\\\r\n\n> **注意：在你开始这个反思之前，确保回顾了第4单元的课程，并对课程间的联系有了很好的认识。如果你还没有回顾这些资料，可以现在做，稍后再回到这个反思部分。**\\\\r\n> \\\\r\n> \\\\r\n\n# \n\n第4单元课程联系和理念\\\\r\n\\\\r\n在这个反思里，你要考虑下面的每个提示，写下一个回应来展示你对第4单元课程的理解。你的答复应该清楚的达到以下目标： \\\\r\n\\\\r\n\n1.  计算机科学发现允许作为两个独立的学期来设置。第4单元也许是一个新课程的第一单元。这个单元在教案的第二个学习开始的角色是什么？\\\\r\n2.  在这个单元里，解决问题的流程是如何被用到的？解决问题的流程是如何与第1到3单元中联系上的？\\\\r\n3.  在课程中，你在哪里看到了教案价值和理念被强调了？\\\\r\n    \\\\r\n    > ## 完成反思获得分数 \\\\r\n    >\n    > \\\\r\n    >\n    > -   一旦你提交了反思，对问题的答复会被匿名分享，并被同伴评论，你也会评论其他引导员的答复。评论者会寻找有思考的和深入的答案，这些答案显示你花了时间来思考问题。评论者也有机会给你的提交写反馈，你还能回应反馈并再次提交。\\\\r\n4.  为了完成答复并获得分数，需要两个评论者来完全同意你的答复。如果评论者不能决定你提交的答复，他们可以提交到教练那里来评论。你随时有机会来回答他们的反馈，并重新提交反思！一旦评论者有了反馈，它们会显示在页面的最下方。\n    \\\\r\n    \\\\r\n    \\\\r"
      csd4dlp-tools: |-
        \\r
        \\r
        <br><br>\\r
        \\r

        > **注意：在你开始这个反思之前，确保回顾了第4单元的课程，并对课程中工具的角色有了很好的认识。如果你还没有回顾这些资料，可以现在做，稍后再回到这个反思部分。**\\r
        > \\r
        > \\r

        # 第4单元工具理念和使用\\r

        \\r
        在这个反思里，你要考虑下面的每个提示，写下一个回应来展示你对第4单元课程的理解。你的答复应该清楚的达到以下目标： \\r
        \\r

        1.  这个单元中，应用实验室会在晚一点的课程中用到。应用实验室在这个单元中的角色是什么？它和教程中其他时间的工具有什么不同？\\r
            \\r
            \\r
            > ## 完成反思获得分数 \\r
            >
            > \\r
            >
            > -   一旦你提交了反思，对问题的答复会被匿名分享，并被同伴评论，你也会评论其他引导员的答复。评论者会寻找有思考的和深入的答案，这些答案显示你花了时间来思考问题。评论者也有机会给你的提交写反馈，你还能回应反馈并再次提交。\\r
        2.  为了完成答复并获得分数，需要两个评论者来完全同意你的答复。如果评论者不能决定你提交的答复，他们可以提交到教练那里来评论。你随时有机会来回答他们的反馈，并重新提交反思！一旦评论者有了反馈，它们会显示在页面的最下方。\\r
            \\r
            \\r
            \\r
      csd5dlp-assessment: "<br><br>\\\\r\n\\\\r\n\n> **注意：在你开始这个反思之前，确保回顾了第5单元的课程，并对整个单元的角色评估有了很好的认识。如果你还没有回顾这些资料，可以现在做，稍后再回到这个反思部分。**\\\\r\n> \\\\r\n> \\\\r\n\n# 第5单元的评估\\\\r\n\n\\\\r\n在这个反思里，你要考虑下面的每个提示，写下一个回应来展示你对第5单元课程的理解。你的答复应该清楚的达到以下目标： \\\\r\n\\\\r\n\n1.  学生们在学完这个单元后，应该获得什么样的技巧和知识？这个单元里有什么样的总结和正式的评估机会，来评估这些技巧和知识？\\\\r\n2.  在这单元中，什么核心的2017CSTA学生概念（算法和编程，计算机系统，数据分析，计算的影响和计算机网络与互联网），以及练习（鼓励和包容计算机文化，计算机的合作，认识和定义可计算的问题，开发和使用抽象，创造可计算的作品，测试和重定义可计算的作品和计算的通信）得到了强调？它们是如何得到强调的？\n    \\\\r\n    > ## 完成反思获得分数 \\\\r\n    >\n    > \\\\r\n    >\n    > -   一旦你提交了反思，对问题的答复会被匿名分享，并被同伴评论，你也会评论其他引导员的答复。评论者会寻找有思考的和深入的答案，这些答案显示你花了时间来思考问题。评论者也有机会给你的提交写反馈，你还能回应反馈并再次提交。\\\\r\n3.  为了完成答复并获得分数，需要两个评论者来完全同意你的答复。如果评论者不能决定你提交的答复，他们可以提交到教练那里来评论。你随时有机会来回答他们的反馈，并重新提交反思！一旦评论者有了反馈，它们会显示在页面的最下方。 \n    \\\\r"
      csd5dlp-lessons: "<br><br>\\\\r\n\\\\r\n\n> **注意：在你开始这个反思之前，确保回顾了第5单元的课程，并对课程间的联系有了很好的认识。如果你还没有回顾这些资料，可以现在做，稍后再回到这个反思部分。**\\\\r\n> \\\\r\n> \\\\r\n\n# \n\n第5单元课程联系和理念\\\\r\n\\\\r\n在这个反思里，你要考虑下面的每个提示，写下一个回应来展示你对第5单元课程的理解。你的答复应该清楚的达到以下目标： \\\\r\n\\\\r\n\n1.  这个单元中哪堂课比较难教，为什么？ \\\\r\n2.  这个单元的第1章节和第2章节有什么联系？\\\\r\n3.  期望学生们将二进制表达系统理解到什么深度？课程的顺序和结构如何支持他们达到这个理解深度？\\\\r\n    \\\\r\n    \\\\r\n    > ## 完成反思获得分数 \\\\r\n    >\n    > \\\\r\n    >\n    > -   一旦你提交了反思，对问题的答复会被匿名分享，并被同伴评论，你也会评论其他引导员的答复。评论者会寻找有思考的和深入的答案，这些答案显示你花了时间来思考问题。评论者也有机会给你的提交写反馈，你还能回应反馈并再次提交。\\\\r\n4.  为了完成答复并获得分数，需要两个评论者来完全同意你的答复。如果评论者不能决定你提交的答复，他们可以提交到教练那里来评论。你随时有机会来回答他们的反馈，并重新提交反思！一旦评论者有了反馈，它们会显示在页面的最下方。\\\\r\n    \\\\r\n    \\\\r"
      csd5dlp-tools: |-
        \\r
        \\r
        <br><br>\\r
        \\r

        > **注意：在你开始这个反思之前，确保回顾了第5单元的课程，并对课程中工具的角色有了很好的认识。如果你还没有回顾这些资料，可以现在做，稍后再回到这个反思部分。**\\r
        > \\r
        > \\r

        # 第5单元工具理念和使用\\r

        \\r
        在这个反思里，你要考虑下面的每个提示，写下一个回应来展示你对第5单元课程的理解。你的答复应该清楚的达到以下目标： \\r
        \\r

        1.  这个单元使用了可选的工具（教师们如果愿意，可以用一个表格工具）。如果教师询问是否需要用工具，应该如何回答来支持他们？\\r
            \\r
            > ## 完成反思获得分数 \\r
            >
            > \\r
            >
            > -   一旦你提交了反思，对问题的答复会被匿名分享，并被同伴评论，你也会评论其他引导员的答复。评论者会寻找有思考的和深入的答案，这些答案显示你花了时间来思考问题。评论者也有机会给你的提交写反馈，你还能回应反馈并再次提交。\\r
        2.  为了完成答复并获得分数，需要两个评论者来完全同意你的答复。如果评论者不能决定你提交的答复，他们可以提交到教练那里来评论。你随时有机会来回答他们的反馈，并重新提交反思！一旦评论者有了反馈，它们会显示在页面的最下方。
            \\r
            \\r
            \\r
      csd6dlp-assessment: |-
        <br><br>\\r
        \\r

        > **注意：在你开始这个反思之前，确保回顾了第6单元的课程，并对整个单元的角色评估有了很好的认识。如果你还没有回顾这些资料，可以现在做，稍后再回到这个反思部分。**\\r
        > \\r
        > \\r

        # 第6单元的评估\\r

        \\r
        在这个反思里，你要考虑下面的每个提示，写下一个回应来展示你对第6单元课程的理解。你的答复应该清楚的达到以下目标： \\r
        \\r

        1.  学生们在学完这个单元后，应该获得什么样的技巧和知识？这个单元里有什么样的总结和正式的评估机会，来评估这些技巧和知识？\\r
        2.  在这单元中，什么核心的2017CSTA学生概念（算法和编程，计算机系统，数据分析，计算的影响和计算机网络与互联网），以及练习（鼓励和包容计算机文化，计算机的合作，认识和定义可计算的问题，开发和使用抽象，创造可计算的作品，测试和重定义可计算的作品和计算的通信）得到了强调？它们是如何得到强调的？\\r
            \\r
            > ## 完成反思获得分数 \\r
            >
            > \\r
            >
            > -   一旦你提交了反思，对问题的答复会被匿名分享，并被同伴评论，你也会评论其他引导员的答复。评论者会寻找有思考的和深入的答案，这些答案显示你花了时间来思考问题。评论者也有机会给你的提交写反馈，你还能回应反馈并再次提交。\\r
        3.  为了完成答复并获得分数，需要两个评论者来完全同意你的答复。如果评论者不能决定你提交的答复，他们可以提交到教练那里来评论。你随时有机会来回答他们的反馈，并重新提交反思！一旦评论者有了反馈，它们会显示在页面的最下方。
            \\r
      csd6dlp-lessons: "<br><br>\\\\r\n\\\\r\n\n> **注意：在你开始这个反思之前，确保回顾了第6单元的课程，并对课程间的联系有了很好的认识。如果你还没有回顾这些资料，可以现在做，稍后再回到这个反思部分。**\\\\r\n> \\\\r\n> \\\\r\n\n# \n\n第6单元课程联系和理念\\\\r\n\\\\r\n在这个反思里，你要考虑下面的每个提示，写下一个回应来展示你对第6单元课程的理解。你的答复应该清楚的达到以下目标： \\\\r\n\\\\r\n\n1.  这个单元中哪堂课比较难教，为什么？ \\\\r\n2.  在这个单元的哪一课非常基础，为什么？\\\\r\n3.  第3单元的什么编程技巧能够用到这个单元？什么新的技巧被引入了？\\\\r\n4.  学生们使用的电路游戏板和第1单元的输入-输出-存储-处理模型之间是怎么联系上的？\\\\r\n    \\\\r\n    > ## 完成反思获得分数 \\\\r\n    >\n    > \\\\r\n    > \\\\r\n    >\n    > -   一旦你提交了反思，对问题的答复会被匿名分享，并被同伴评论，你也会评论其他引导员的答复。评论者会寻找有思考的和深入的答案，这些答案显示你花了时间来思考问题。评论者也有机会给你的提交写反馈，你还能回应反馈并再次提交。\\\\r\n5.  为了完成答复并获得分数，需要两个评论者来完全同意你的答复。如果评论者不能决定你提交的答复，他们可以提交到教练那里来评论。你随时有机会来回答他们的反馈，并重新提交反思！一旦评论者有了反馈，它们会显示在页面的最下方。 \\\\r\n\n\\\\r\n\\\\r"
      csd6dlp-tools: |-
        \\r
        \\r
        <br><br>\\r
        \\r

        > **注意：在你开始这个反思之前，确保回顾了第6单元的课程，并对课程中工具的角色有了很好的认识。如果你还没有回顾这些资料，可以现在做，稍后再回到这个反思部分。**\\r
        > \\r
        > \\r

        # 第6单元工具理念和使用\\r

        \\r
        在这个反思里，你要考虑下面的每个提示，写下一个回应来展示你对第6单元课程的理解。你的答复应该清楚的达到以下目标： \\r
        \\r

        1.  你对教师如何从游戏实验室编程切换到应用实验室编程，有什么建议？ \\r
            \\t\* 用Maker工具包在应用实验室编程是什么理念？ \\r
        2.  从哪些方面来说，这个单元的工具是教育工具，而不是专业工具？ \\r
            \\r
            > ## 完成反思获得分数 \\r
            >
            > \\r
            >
            > -   一旦你提交了反思，对问题的答复会被匿名分享，并被同伴评论，你也会评论其他引导员的答复。评论者会寻找有思考的和深入的答案，这些答案显示你花了时间来思考问题。评论者也有机会给你的提交写反馈，你还能回应反馈并再次提交。\\r
        3.  为了完成答复并获得分数，需要两个评论者来完全同意你的答复。如果评论者不能决定你提交的答复，他们可以提交到教练那里来评论。你随时有机会来回答他们的反馈，并重新提交反思！一旦评论者有了反馈，它们会显示在页面的最下方。
            \\r
            \\r
            \\r
      csp-post-survey-2017-FR: 有什么别的你想说的，关于在课程中的体验吗？
      csp-post-survey-2017-FR_2018: 有什么别的你想说的，关于在课程中的体验吗？
      csp-post-survey-2017-q36-e: 我因为别的原因担心：
      csp-post-survey-2017-q36-e_2018: 我因为别的原因担心：
      csp-post-survey-2018-PT-feedback-FR: 关于 AP 考试或表现测试的任何其他反馈？
      csp-post-survey-2018-topics-liked-FR: 请提供你对本课程的反馈。
      csp-post-survey-2018-topics-want-FR: 有哪些主题是你有兴趣并打算在将来学习的？
      csp-pre-survey-2017-q36-e: 我因为别的原因担心：
      csp-pre-survey-2017-q36-e_2018: 我因为别的原因担心：
      csp-pre-survey-2017-q36-e_2019: 我因为别的原因担心：
      csp-pre-survey-2017-q38: 如果是，在当前的计算机科学课程前，你还学过什么计算机科学课程？
      csp-pre-survey-2017-q38_2018: 如果是，在当前的计算机科学课程前，你还学过什么计算机科学课程？
      csp-pre-survey-2017-q38_2019: 如果是，在当前的计算机科学课程前，你还学过什么计算机科学课程？
      csp-pulse-check-survey-1-q6-FR-U1Ch2: 有什么你想让老师知道别的事情吗？
      csp-pulse-check-survey-1-q6-FR-U1Ch2_2018: 有什么你想让老师知道别的事情吗？
      csp-pulse-check-survey-1-q6-FR-U1Ch2_2019: 有什么你想让老师知道别的事情吗？
      csp-pulse-check-survey-2-q6-FR-U2Ch1: 有什么你想让老师知道别的事情吗？
      csp-pulse-check-survey-2-q6-FR-U2Ch1_2018: 有什么你想让老师知道别的事情吗？
      csp-pulse-check-survey-2-q6-FR-U2Ch1_2019: 有什么你想让老师知道别的事情吗？
      csp-pulse-check-survey-3-q6-FR-U2Ch2: 有什么你想让老师知道别的事情吗？
      csp-pulse-check-survey-3-q6-FR-U2Ch2_2018: 有什么你想让老师知道别的事情吗？
      csp-pulse-check-survey-3-q6-FR-U2Ch2_2019: 有什么你想让老师知道别的事情吗？
      csp-pulse-check-survey-4-q6-FR-U3Ch1: 有什么你想让老师知道别的事情吗？
      csp-pulse-check-survey-4-q6-FR-U3Ch1_2018: 有什么你想让老师知道别的事情吗？
      csp-pulse-check-survey-4-q6-FR-U3Ch1_2019: 有什么你想让老师知道别的事情吗？
      csp-pulse-check-survey-5-q6-FR-U4Ch1: 有什么你想让老师知道别的事情吗？
      csp-pulse-check-survey-5-q6-FR-U4Ch1_2018: 有什么你想让老师知道别的事情吗？
      csp-pulse-check-survey-5-q6-FR-U4Ch1_2019: 有什么你想让老师知道别的事情吗？
      csp-pulse-check-survey-6-q6-FR-U4Ch2: 有什么你想让老师知道别的事情吗？
      csp-pulse-check-survey-6-q6-FR-U5Ch1: 有什么你想让老师知道别的事情吗？
      csp-pulse-check-survey-6-q6-FR-U5Ch1_2018: 有什么你想让老师知道别的事情吗？
      csp-pulse-check-survey-6-q6-FR-U5Ch1_2019: 有什么你想让老师知道别的事情吗？
      csp-pulse-check-survey-7-q6-FR-U5Ch1: 有什么你想让老师知道别的事情吗？
      csp-pulse-check-survey-7-q6-FR-U5Ch2: 有什么你想让老师知道别的事情吗？
      csp-pulse-check-survey-7-q6-FR-U5Ch2_2018: 有什么你想让老师知道别的事情吗？
      csp-pulse-check-survey-7-q6-FR-U5Ch2_2019: 有什么你想让老师知道别的事情吗？
      csp-pulse-check-survey-8-q6-FR-U5Ch2: 有什么你想让老师知道别的事情吗？
      csp-thursday-facilitation: "# 星期四反思引导\\\\r\n\n\\\\r\n\n## \n\n讨论环节\\\\r\n\\\\r\n你已经看到了一系列的着重于讨论的环节。一些特别的例子会包括在社区（星期三），和招聘/学生需要（星期四）的环节。这些环节有什么共同的引导员策略？\\\\r\n\\\\r\n\n-   引导员要做什么？\\\\r\n-   老师要做什么？"
      csp-thursday-pedagogy: |-
        # 星期四教育法反思\\r

        \\r

        ## 差异化\\r

        \\r
        你从差别差异化说明中学到了什么策略，用来满足学生在计算机科学原理学习时的不同需求？列出至少两个主意。
      csp-thursday-pedagogy2: |-
        # 星期二反思教育

        第1部分\\r
        \\r

        ## 招聘和学生需求\\r

        \\r
        在社区环节，今早你们讨论了招聘学生和满足你工作地区的学生的需要。（如果你不在自己的地区，想一想自己在这个环节的体验，也许能应用到你的地区。）\\r
        \\r
        \*
        什么是你的地区的教师共同的招聘的痛处？\\r
        \*
        什么是你的地区的教师共同的，支持学生的需求？\\r
        \*
        今天你看到的东西，有没有想要一整年都参与的？\\r

        -   到今年底，你希望在你的地区要完成的招聘目标是什么？\\r
      csp-thursday-unit: |-
        # 星期四单元反思\\r

        \\r

        ## 第1单元和2单元的联系\\r

        \\r
        第1单元里的什么联系能被用在第2单元开始的激励环节？\\r
      csp-thursday-unit2: "# 星期四单元反思 第二部分\\\\r\n\n\\\\r\n\n## \n\n在线的单元\\\\r\n\\\\r\n教师在这个单元的角色，有多少计算机科学的内容嵌入到了这些关卡中？\\\\r"
      csp-tuesday-facilitation: "# 星期二引导练习\\\\r\n\n\\\\r\n\n## \n\nTLO\\\\r\n\\\\r\n你已经看见了3个模型TLOs（引导员教的）和两个参与者的TLOs（老师教的）。你注意到引导员在这些环节中做的有什么规律吗（分开考虑课程的输出和汇报部分）？\\\\r\n\\\\r\n\n-   引导员在课程中做了什么？\\\\r\n-   引导员在汇报中做了什么？教师做了什么？\\\\r\n-   在模型课程中，引导员谈论的和老师做的时间上如何分配的？ "
      csp-tuesday-pedagogy: "# 星期二教育反思\\\\r\n\n\\\\r\n\n## \n\n课堂练习\\\\r\n\\\\r\n命名两个<a href=\"https://docs.google.com/document/d/1trq3FeCBaq2G-CFugZP4ElkJapAqAtoBfl4zf7DbW48/edit#heading=h.f8m5xr9s44e2\">\n课堂练习</a>，在过去的天里看到的5个TLOs，有榜样吗？ \\\\r\n\\\\r\n\n-   他们什么时候成功的？\\\\r\n-   当他们的课堂改进时，有什么样的特征？"
      csp-tuesday-unit: "# 星期二单元单元反思第1部分\\\\r\n\n\\\\r\n\n## \n\n第4课\\\\r\n\\\\r\n如果有教师说第4课\"有什么意义\"，你该如何回答？\\\\r"
      csp-tuesday-unit2: "# 星期二单元反思\\\\r\n\n\\\\r\n\n## \n\n技术问题\\\\r\n\\\\r\n很多班级在开始的那年都会有计数问题（计算机没准备好，等等）如果教师在技术上遇到了问题，你会推荐他们如何解决？\\\\r"
      csp-wednesday-facilitation: |-
        # 星期三引导反思\\r

        \\r

        ## 引导员展示\\r

        \\r
        你已经看过了三个早上的开始环节和三个下午的结束环节。在这些环节中，有什么共同的引导员策略？\\r
        \\r

        -   引导员要做什么？\\r
        -   \*
            教师要做什么？\\r
        -   你看到引导员用什么策略让老师保持兴趣？\\r
      csp-wednesday-pedagogy: "# 星期三教育反思\\\\r\n\n\\\\r\n\n## \n\n建立社区与处理障碍\\\\r\n\\\\r\n在早上的社区环节，你们讨论了建立社团以及处理障碍来发展当你社区的计算机科学教育。（如果你不在自己的地区，思考一下这个环节遇到问题也许会发生在你的地区。）\\\\r\n\\\\r\n\n-   什么是你的地区老师经常分享的障碍？\\\\r\n-   你遇到过被别的老师分享过的障碍吗？\\\\r\n-   你能在本地社区帮上什么吗？\\\\r\n-   今天有什么你看到的东西，想整年都检查一下？\\\\r\n-   \\*\n    你希望在年底前帮助你的地区实现哪些社区发展目标？\\\\r"
      csp-wednesday-unit: "# 星期三单元反思\\\\r\n\n\\\\r\n\n## \n\n互联网模拟疲劳\\\\r\n\\\\r\n这是一个非常繁重的互联网模拟单元。什么策略能用来应对学生们在这个单元结束时感到的疲惫？\\\\r\n\\\\r"
      csp-wednesday-unit2: |-
        # 星期三单元反思第二部分r

        \\r

        ## 解释互联网模拟器\\r

        \\r
        你应该如何向一个有兴趣使用互联网模拟器的教师来介绍它？\\r
        \\r
        \*
        在哪些方面，互联网模拟器是一个教育的，而不是专业的工具？\\r

        -   什么教育哲学看起来对互联网模拟器最有效？\\r
      csp1dlp-assessment: "<br><br>\n\n> **注意：在你开始这个反思之前，确保回顾了第1单元的课程，并对整个单元的角色评估有了很好的认识。如果你还没有回顾这些资料，可以现在做，稍后再回到这个反思部分。**\n\n# 第1单元的评估\n\n在这个反思里，你要考虑下面的每个提示，写下一个回应来展示你对第1单元课程的理解。你的答复应该清楚的达到以下目标： \n\n1.\n在这个单元里，练习表演任务的角色是什么？\n\n-   哪个表演任务正在被练习？\n-   表演任务练习如何建立在这个单元发展到的内容和技能上？ \n-   这个单元里有什么样的总结和正式的评估机会？ \n\n> ## 完成反思获得分数\n>\n> -   一旦你提交了反思，对问题的答复会被匿名分享，并被同伴评论，你也会评论其他引导员的答复。评论者会寻找有思考的和深入的答案，这些答案显示你花了时间来思考问题。评论者也有机会给你的提交写反馈，你还能回应反馈并再次提交。\n\n-   为了完成答复并获得分数，需要两个评论者来完全同意你的答复。如果评论者不能决定你提交的答复，他们可以提交到教练那里来评论。你随时有机会来回答他们的反馈，并重新提交反思！一旦评论者有了反馈，它们会显示在页面的最下方。"
      csp1dlp-lessons: "<br><br>\n\n> **注意：在你开始这个反思之前，确保回顾了第1单元的课程，并对课程间的联系有了很好的认识。如果你还没有回顾这些资料，可以现在做，稍后再回到这个反思部分。**\n\n# \n\n第1单元课程联系和理念\n\n在这个反思里，你要考虑下面的每个提示，写下一个回应来展示你对第1单元课程的理解。你的答复应该清楚的达到以下目标： \n\n1.  学完这个单元，学生们应该有什么样的技能和知识？\n2.  学生们学到最大的思想是什么？这些大的思想在哪里，并如何被学到的？\n3.  通过这些活动和项目，哪些计算式的练习或技能得到了磨练？\n4.  前后的课程间有什么联系？\n5.  这单元的内容是如何一步步递进的？ \n6.  什么基础内容在开始就铺垫了，如何又在整个单元中层层提高？为什么？ \n7.  如果教师说\"第4课有什么意义\"，你该怎样回答？ \n8.  这个单元中哪堂课比较难教，为什么？ \n\n> ## 完成反思获得分数\n>\n> -   一旦你提交了反思，对问题的答复会被匿名分享，并被同伴评论，你也会评论其他引导员的答复。评论者会寻找有思考的和深入的答案，这些答案显示你花了时间来思考问题。评论者也有机会给你的提交写反馈，你还能回应反馈并再次提交。\n\n-   为了完成答复并获得分数，需要两个评论者来完全同意你的答复。如果评论者不能决定你提交的答复，他们可以提交到教练那里来评论。你随时有机会来回答他们的反馈，并重新提交反思！一旦评论者有了反馈，它们会显示在页面的最下方。 "
      csp1dlp-tools: |-
        \\r
        \\r
        <br><br>\\r
        \\r

        > **注意：在你开始这个反思之前，确保回顾了第1单元的课程，并对课程中工具的角色有了很好的认识。如果你还没有回顾这些资料，可以现在做，稍后再回到这个反思部分。**\\r
        > \\r
        > \\r

        # 第1单元工具理念和使用\\r

        \\r
        在这个反思里，你要考虑下面的每个提示，写下一个回应来展示你对第1单元课程的理解。你的答复应该清楚的达到以下目标： \\r
        \\r

        -   为什么我们要使用互联网模拟器？ \\r
        -   互联网模拟器为什么是教育工具，而不是专业工具？ \\r
        -   用互联网模拟器的教育理念是什么？ \\r
        -   这是一个互联网模拟器很重的单元。学生在学完这个单元后感到心力交瘁，应该用什么策略？ \\r
        -   很多课程在开始的那年都会遇到技术问题（如计算机没准备好，等等）。如果一个教师在第1单元遇到了技术问题，你会推荐他用什么方法来解决？\\r
            \\r
            \\r
            > ## 完成反思获得分数 \\r
            >
            > \\r
            > \\r
            >
            > -   一旦你提交了反思，对问题的答复会被匿名分享，并被同伴评论，你也会评论其他引导员的答复。评论者会寻找有思考的和深入的答案，这些答案显示你花了时间来思考问题。评论者也有机会给你的提交写反馈，你还能回应反馈并再次提交。\\r
        -   为了完成答复并获得分数，需要两个评论者来完全同意你的答复。如果评论者不能决定你提交的答复，他们可以提交到教练那里来评论。你随时有机会来回答他们的反馈，并重新提交反思！一旦评论者有了反馈，它们会显示在页面的最下方。\\r

        \\r
        \\r
        \\r
      csp2dlp-assessment: "<br><br>\n\n> **注意：在你开始这个反思之前，确保回顾了第2单元的课程，并对整个单元的角色评估有了很好的认识。如果你还没有回顾这些资料，可以现在做，稍后再回到这个反思部分。**\n\n# 第2单元里的评估\n\n在这个反思里，你要考虑下面的每个提示，写下一个回应来展示你对第2单元课程的理解。你的答复应该清楚的达到以下目标： \n\n1.  在这个单元里，练习表演任务的角色是什么？\n2.  表演任务练习如何建立在这个单元发展到的内容和技能上？ \n3.  这个单元里有什么样的总结和正式的评估机会？ \n\n> ## 完成反思获得分数\n>\n> -   一旦你提交了反思，对问题的答复会被匿名分享，并被同伴评论，你也会评论其他引导员的答复。评论者会寻找有思考的和深入的答案，这些答案显示你花了时间来思考问题。评论者也有机会给你的提交写反馈，你还能回应反馈并再次提交。\n\n-   为了完成答复并获得分数，需要两个评论者来完全同意你的答复。如果评论者不能决定你提交的答复，他们可以提交到教练那里来评论。你随时有机会来回答他们的反馈，并重新提交反思！一旦评论者有了反馈，它们会显示在页面的最下方。"
      csp2dlp-lessons: "<br><br>\n\n> **注意：在你开始这个反思之前，确保回顾了第2单元的课程，并对课程间的联系有了很好的认识。如果你还没有回顾这些资料，可以现在做，稍后再回到这个反思部分。**\n\n# \n\n第2单元课程联系和理念\n\n在这个反思里，你要考虑下面的每个提示，写下一个回应来展示你对第2单元课程的理解。你的答复应该清楚的达到以下目标： \n\n1.  学完这个单元，学生们应该有什么样的技能和知识？\n2.  在数据的大思想下，第二单元的第2章节讲述了哪个学习目标？这些数据相关的学习目标在探索任务中有准备的兴趣。你该如何解释第二章中用来查看数据的透镜，和这与探索任务之间的关系？\n3.  通过这些活动和项目，哪些技能或计算式练习得到了磨练？ \n4.  前后课程之间有什么联系？\n5.  第1单元中哪些连接可以用在第2单元前面的课程里来作为激励？ \n6.  你会如何给教师描述第1章和第2章之间的联系？ \n7.  什么基础内容在开始就铺垫了，如何又在整个单元中层层提高？为什么？ \n8.  这个单元中哪堂课特别难教，为什么？ \n\n> ## 完成反思获得分数\n>\n> -   一旦你提交了反思，对问题的答复会被匿名分享，并被同伴评论，你也会评论其他引导员的答复。评论者会寻找有思考的和深入的答案，这些答案显示你花了时间来思考问题。评论者也有机会给你的提交写反馈，你还能回应反馈并再次提交。\n\n-   为了完成答复并获得分数，需要两个评论者来完全同意你的答复。如果评论者不能决定你提交的答复，他们可以提交到教练那里来评论。你随时有机会来回答他们的反馈，并重新提交反思！一旦评论者有了反馈，它们会显示在页面的最下方。 "
      csp2dlp-tools: "<br><br>\\\\r\n\\\\r\n\n> **注意：在你开始这个反思之前，确保回顾了第2单元的课程，并对课程中工具的角色有了很好的认识。如果你还没有回顾这些资料，可以现在做，稍后再回到这个反思部分。**\\\\r\n> \\\\r\n> \\\\r\n\n# 第2单元工具理念和使用\\\\r\n\n\\\\r\n在这个反思里，你要考虑下面的每个提示，写下一个回应来展示你对第2单元课程的理解。你的答复应该清楚的达到以下目标： \\\\r\n\\\\r\n\n-   为什么在单元中我们用了一些工具，而不是空手教学呢？ \\\\r\n-   从哪些方面来看，这个单元中的工具是教育用的，而不是专业的？ \\\\r\n-   用这些工具教课的理念是什么？ \\\\r\n    \\\\r\n    \\\\r\n    \\\\r\n    > ## 完成反思获得分数 \\\\r\n    >\n    > \\\\r\n    >\n    > -   一旦你提交了反思，对问题的答复会被匿名分享，并被同伴评论，你也会评论其他引导员的答复。评论者会寻找有思考的和深入的答案，这些答案显示你花了时间来思考问题。评论者也有机会给你的提交写反馈，你还能回应反馈并再次提交。\\\\r\n-   为了完成答复并获得分数，需要两个评论者来完全同意你的答复。如果评论者不能决定你提交的答复，他们可以提交到教练那里来评论。你随时有机会来回答他们的反馈，并重新提交反思！一旦评论者有了反馈，它们会显示在页面的最下方。 \n    \\\\r\n    \\\\r"
      csp3dlp-assessment: "<br><br>\n\n> **注意：在你开始这个反思之前，确保回顾了第3单元的课程，并对整个单元的角色评估有了很好的认识。如果你还没有回顾这些资料，可以现在做，稍后再回到这个反思部分。**\n\n# 第3单元里的评估\n\n在这个反思里，你要考虑下面的每个提示，写下一个回应来展示你对第3单元课程的理解。你的答复应该清楚的达到以下目标： \n\n1.  在这个单元里，练习表演任务的角色是什么？\n2.  创建表演任务如何建立在这个单元发展到的内容和技能上？ \n3.  这个单元里有什么样的总结和正式的评估机会？\n\n> ## 完成反思获得分数\n>\n> -   一旦你提交了反思，对问题的答复会被匿名分享，并被同伴评论，你也会评论其他引导员的答复。评论者会寻找有思考的和深入的答案，这些答案显示你花了时间来思考问题。评论者也有机会给你的提交写反馈，你还能回应反馈并再次提交。\n\n-   为了完成答复并获得分数，需要两个评论者来完全同意你的答复。如果评论者不能决定你提交的答复，他们可以提交到教练那里来评论。你随时有机会来回答他们的反馈，并重新提交反思！一旦评论者有了反馈，它们会显示在页面的最下方。 "
      csp3dlp-lessons: "<br><br>\n\n> **注意：在你开始这个反思之前，确保回顾了第3单元的课程，并对课程间的联系有了很好的认识。如果你还没有回顾这些资料，可以现在做，稍后再回到这个反思部分。**\n\n# \n\n第3单元课程联系和理念\n\n在这个反思里，你要考虑下面的每个提示，写下一个回应来展示你对第3单元课程的理解。你的答复应该清楚的达到以下目标： \n\n1.  学完这单元后，学生们会获得什么样的技能和知识？\n2.  学生们学到最大的思想是什么？这些大的思想在哪里，并如何被学到的？ \n3.  通过这些活动和项目，哪些计算式的练习或技能得到了磨练？\n4.  前后的课程间有什么联系？\n5.  这单元的内容是如何一步步递进的？ \n6.  如果教师说\"第1-3课有什么意义\"，你该怎样回答？ \n7.  第3单元从序列，函数，有参数的函数开始，而这不是典型的开始编程的单元（比如，很多是从变量开始的）。这样安排的潜在的原因和益处是什么？\n8.  什么基础内容在开始就铺垫了，如何又在整个单元中层层提高？为什么？ \n9.  这个单元中哪堂课特别难教，为什么？ \n10. 如果某位教师的学生有着非常不同的编程背景，你如何推荐教师对这单元做区别式的说明？\n\n> ## 完成反思获得分数\n>\n> -   一旦你提交了反思，对问题的答复会被匿名分享，并被同伴评论，你也会评论其他引导员的答复。评论者会寻找有思考的和深入的答案，这些答案显示你花了时间来思考问题。评论者也有机会给你的提交写反馈，你还能回应反馈并再次提交。\n\n-   为了完成答复并获得分数，需要两个评论者来完全同意你的答复。如果评论者不能决定你提交的答复，他们可以提交到教练那里来评论。你随时有机会来回答他们的反馈，并重新提交反思！一旦评论者有了反馈，它们会显示在页面的最下方。"
      csp3dlp-tools: |-
        \\r
        <br><br>\\r
        \\r

        > **注意：在你开始这个反思之前，确保回顾了第3单元的课程，并对课程中工具的角色有了很好的认识。如果你还没有回顾这些资料，可以现在做，稍后再回到这个反思部分。**\\r
        > \\r
        > \\r

        # 第3单元工具理念和使用\\r

        \\r
        在这个反思里，你要考虑下面的每个提示，写下一个回应来展示你对第3单元课程的理解。你的答复应该清楚的达到以下目标： \\r
        \\r

        -   为什么我们要在代码工作室里用应用实验室，而不是其它工具？ \\r
        -   应用实验室如何是一个教育工具，而不是专业工具？ \\r
        -   这个单元中，教师的角色是什么？计算机科学内容是如何嵌入导这些关卡中的？\\r
            \\r
            \\r
            > ## 完成反思获得分数 \\r
            >
            > \\r
            >
            > -   一旦你提交了反思，对问题的答复会被匿名分享，并被同伴评论，你也会评论其他引导员的答复。评论者会寻找有思考的和深入的答案，这些答案显示你花了时间来思考问题。评论者也有机会给你的提交写反馈，你还能回应反馈并再次提交。\\r
        -   为了完成答复并获得分数，需要两个评论者来完全同意你的答复。如果评论者不能决定你提交的答复，他们可以提交到教练那里来评论。你随时有机会来回答他们的反馈，并重新提交反思！一旦评论者有了反馈，它们会显示在页面的最下方。\\r
            \\r
      csp4dlp-assessment: |-
        <br><br>\\r
        \\r

        > **注意：在你开始这个反思之前，确保回顾了第4单元的课程，并对整个单元的角色评估有了很好的认识。如果你还没有回顾这些资料，可以现在做，稍后再回到这个反思部分。**\\r
        > \\r
        > \\r

        # 第4单元的评估\\r

        \\r
        在这个反思里，你要考虑下面的每个提示，写下一个回应来展示你对第4单元课程的理解。你的答复应该清楚的达到以下目标： \\r
        \\r

        1.  在这个单元里，练习表演任务的角色是什么？ \\r
        2.  这个单元里有什么样的总结和正式的评估机会？\\r
            \\r
            \\r
            \\r
            > ## 完成反思获得分数 \\r
            >
            > \\r
            >
            > -   一旦你提交了反思，对问题的答复会被匿名分享，并被同伴评论，你也会评论其他引导员的答复。评论者会寻找有思考的和深入的答案，这些答案显示你花了时间来思考问题。评论者也有机会给你的提交写反馈，你还能回应反馈并再次提交。\\r
        3.  为了完成答复并获得分数，需要两个评论者来完全同意你的答复。如果评论者不能决定你提交的答复，他们可以提交到教练那里来评论。你随时有机会来回答他们的反馈，并重新提交反思！一旦评论者有了反馈，它们会显示在页面的最下方。\\r
            \\r
            \\r
      csp4dlp-lessons: "<br><br>\\\\r\n\\\\r\n\n> **注意：在你开始这个反思之前，确保回顾了第4单元的课程，并对课程间的联系有了很好的认识。如果你还没有回顾这些资料，可以现在做，稍后再回到这个反思部分。**\\\\r\n> \\\\r\n> \\\\r\n\n# \n\n第4单元课程联系和理念\\\\r\n\\\\r\n在这个反思里，你要考虑下面的每个提示，写下一个回应来展示你对第4单元课程的理解。你的答复应该清楚的达到以下目标： \\\\r\n\\\\r\n\n1.  学生们学到最大的思想是什么？这些大的思想在哪里，并如何被学到的？\n    \\\\r\n2.  通过这些活动和项目，哪些计算式的练习或技能得到了磨练？\\\\r\n3.  你对这个单元的可选课程有何推荐？（什么时候为什么教师应该选择使用它们？）\\\\r\n4.  前面单元的覆盖的内容如何与第4单元的主题联系起来？（特别是互联网和数据） \\\\r\n5.  这个单元中哪堂课比较难教，为什么？ \\\\r\n    \\\\r\n    \\\\r\n    > ## 完成反思获得分数 \\\\r\n    >\n    > \\\\r\n    >\n    > -   一旦你提交了反思，对问题的答复会被匿名分享，并被同伴评论，你也会评论其他引导员的答复。评论者会寻找有思考的和深入的答案，这些答案显示你花了时间来思考问题。评论者也有机会给你的提交写反馈，你还能回应反馈并再次提交。\\\\r\n6.  为了完成答复并获得分数，需要两个评论者来完全同意你的答复。如果评论者不能决定你提交的答复，他们可以提交到教练那里来评论。你随时有机会来回答他们的反馈，并重新提交反思！一旦评论者有了反馈，它们会显示在页面的最下方。\n    \\\\r"
      csp4dlp-tools: "<br><br>\\\\r\n\\\\r\n\n> **注意：在你开始这个反思之前，确保回顾了第4单元的课程，并对课程中工具的角色有了很好的认识。如果你还没有回顾这些资料，可以现在做，稍后再回到这个反思部分。**\\\\r\n> \\\\r\n> \\\\r\n\n# \n\n# 第4单元工具理念和使用\\\\r\n\n\\\\r\n在这个反思里，你要考虑下面的每个提示，写下一个回应来展示你对第4单元课程的理解。你的答复应该清楚的达到以下目标： \\\\r\n\\\\r\n\n-   为什么在单元中我们用了一些工具，而不是空手教学呢？ \\\\r\n-   用这些工具教课的理念是什么？\\\\r\n    \\\\r\n    \\\\r\n    > ## 完成反思获得分数 \\\\r\n    >\n    > \\\\r\n    >\n    > -   一旦你提交了反思，对问题的答复会被匿名分享，并被同伴评论，你也会评论其他引导员的答复。评论者会寻找有思考的和深入的答案，这些答案显示你花了时间来思考问题。评论者也有机会给你的提交写反馈，你还能回应反馈并再次提交。\\\\r\n-   为了完成答复并获得分数，需要两个评论者来完全同意你的答复。如果评论者不能决定你提交的答复，他们可以提交到教练那里来评论。你随时有机会来回答他们的反馈，并重新提交反思！一旦评论者有了反馈，它们会显示在页面的最下方。\n    \\\\r"
      csp5dlp-assessment: |-
        <br><br>\\r
        \\r

        > **注意：在你开始这个反思之前，确保回顾了第5单元的课程，并对整个单元的角色评估有了很好的认识。如果你还没有回顾这些资料，可以现在做，稍后再回到这个反思部分。**\\r
        > \\r
        > \\r

        # 第5单元的评估\\r

        \\r
        在这个反思里，你要考虑下面的每个提示，写下一个回应来展示你对第5单元课程的理解。你的答复应该清楚的达到以下目标： \\r
        \\r

        1.  第5单元中覆盖的内容，哪些是创建表演任务所必需的？哪些内容会在固定响应测验（正如在课程和测验描述里的测验手册一样），但不是表演任务所必需的？\\r
        2.  这个单元里有什么总结并正式的评估的机会？ \\r
            \\r
            \\r
            \\r
            \\r
            > ## 完成反思获得分数
            >
            > \\r
            > \\r
            >
            > -   一旦你提交了反思，对问题的答复会被匿名分享，并被同伴评论，你也会评论其他引导员的答复。评论者会寻找有思考的和深入的答案，这些答案显示你花了时间来思考问题。评论者也有机会给你的提交写反馈，你还能回应反馈并再次提交。\\r
        3.  为了完成答复并获得分数，需要两个评论者来完全同意你的答复。如果评论者不能决定你提交的答复，他们可以提交到教练那里来评论。你随时有机会来回答他们的反馈，并重新提交反思！一旦评论者有了反馈，它们会显示在页面的最下方。 \\r

        \\r
        \\r
        \\r
      csp5dlp-lessons: "<br><br>\\\\r\n\\\\r\n\n> **注意：在你开始这个反思之前，确保回顾了第5单元的课程，并对课程间的联系有了很好的认识。如果你还没有回顾这些资料，可以现在做，稍后再回到这个反思部分。**\\\\r\n> \\\\r\n> \\\\r\n\n# \n\n第5单元课程联系和理念\\\\r\n\\\\r\n在这个反思里，你要考虑下面的每个提示，写下一个回应来展示你对第5单元课程的理解。你的答复应该清楚的达到以下目标： \\\\r\n\\\\r\n\n1.  学生们学到最大的思想是什么？这些大的思想在哪里，并如何被学到的？\n    \\\\r\n2.  通过这些活动和项目，哪些计算式的练习或技能得到了磨练？ \\\\r\n3.  你如何建议教师怎样从乌龟（前面的第3单元）转换到事件驱动编程（第5单元）？  \\\\r\n4.  这个单元的哪些课程是基础的？它们对于接下来课程的成功有什么重要性？\\\\r\n5.  这个单元中哪堂课比较难教，为什么？ \\\\r\n    \\\\r\n    > ## 完成反思获得分数 \\\\r\n    >\n    > \\\\r\n    >\n    > -   一旦你提交了反思，对问题的答复会被匿名分享，并被同伴评论，你也会评论其他引导员的答复。评论者会寻找有思考的和深入的答案，这些答案显示你花了时间来思考问题。评论者也有机会给你的提交写反馈，你还能回应反馈并再次提交。\\\\r\n6.  为了完成答复并获得分数，需要两个评论者来完全同意你的答复。如果评论者不能决定你提交的答复，他们可以提交到教练那里来评论。你随时有机会来回答他们的反馈，并重新提交反思！一旦评论者有了反馈，它们会显示在页面的最下方。\n    \\\\r\n    \\\\r"
      csp5dlp-tools: |-
        \\r
        \\r
        <br><br>\\r
        \\r

        > **注意：在你开始这个反思之前，确保回顾了第5单元的课程，并对课程中工具的角色有了很好的认识。如果你还没有回顾这些资料，可以现在做，稍后再回到这个反思部分。**\\r
        > \\r
        > \\r

        # 第5单元工具理念和使用\\r

        \\r
        在这个反思里，你要考虑下面的每个提示，写下一个回应来展示你对第5单元课程的理解。你的答复应该清楚的达到以下目标： \\r
        \\r

        1.  用应用实验室教学的理念是什么？ \\r
        2.  第5单元课程共同的层级和结构是如何的？_（这些关卡典型的课程结构是如何递进的，并有什么一般性的发展？）_\\r
            \\r
            \\r
            \\r
            > ## 完成反思获得分数 \\r
            >
            > \\r
            >
            > -   一旦你提交了反思，对问题的答复会被匿名分享，并被同伴评论，你也会评论其他引导员的答复。评论者会寻找有思考的和深入的答案，这些答案显示你花了时间来思考问题。评论者也有机会给你的提交写反馈，你还能回应反馈并再次提交。\\r
        3.  为了完成答复并获得分数，需要两个评论者来完全同意你的答复。如果评论者不能决定你提交的答复，他们可以提交到教练那里来评论。你随时有机会来回答他们的反馈，并重新提交反思！一旦评论者有了反馈，它们会显示在页面的最下方。
      csp_U3_plan_code_FR: |-
        <img src="https://images.code.org/01d3b0664443216b4363ec31914e592a-image-1506460763004.png"
        style="float: right">\\r
        \\r
        <br>\\r
        \\r
        这堂课，我们会谈到如何用函数为大一点的编程函数建立解决方案。计划一下你会用来画这个图形的代码（显示在右边）。描述你要创建的每个函数。你不应该写下所有的代码，只需要函数的名字和每个函数会做些什么的简短介绍。\\r
        \\r
        将你的计划写成下面的格式：\\r
        \\r

        <div
        style="clear: both"> </div>\r
        \r
            函数名称 - 描述它能做什么\r
        \r
            函数名称2 - 描述它能做什么\r
            ...
      csp_U3_plan_code_FR_2018: |-
        <img src="https://images.code.org/01d3b0664443216b4363ec31914e592a-image-1506460763004.png"
        style="float: right">\\r
        \\r
        <br>\\r
        \\r
        这堂课，我们会谈到如何用函数为大一点的编程函数建立解决方案。计划一下你会用来画这个图形的代码（显示在右边）。描述你要创建的每个函数。你不应该写下所有的代码，只需要函数的名字和每个函数会做些什么的简短介绍。\\r
        \\r
        将你的计划写成下面的格式：\\r
        \\r

        <div
        style="clear: both"> </div>\r
        \r
            函数名称 - 描述它能做什么\r
        \r
            函数名称2 - 描述它能做什么\r
            ...
      csp_U3_plan_code_FR_2019: |-
        <img src="https://images.code.org/01d3b0664443216b4363ec31914e592a-image-1506460763004.png"
        style="float: right">\\r
        \\r
        <br>\\r
        \\r
        这堂课，我们会谈到如何用函数为大一点的编程函数建立解决方案。计划一下你会用来画这个图形的代码（显示在右边）。描述你要创建的每个函数。你不应该写下所有的代码，只需要函数的名字和每个函数会做些什么的简短介绍。\\r
        \\r
        将你的计划写成下面的格式：\\r
        \\r

        <div
        style="clear: both"> </div>\r
        \r
            函数名称 - 描述它能做什么\r
        \r
            函数名称2 - 描述它能做什么\r
            ...
      csp_U3_square_v_rect_FR: |-
        <img src="https://images.code.org/2f9b8b6a1c42b7c6c881f89867352907-image-1506460228029.png"
        style="float: right">\\r
        \\r
        在这堂课里, 你编写了让乌龟绘制正方形的代码。简要描述一下绘制长方形的代码与绘制正方形的有什么不同。 （示例如右图长方形）
      csp_U3_square_v_rect_FR_2018: |-
        <img src="https://images.code.org/2f9b8b6a1c42b7c6c881f89867352907-image-1506460228029.png"
        style="float: right">\\r
        \\r
        在这堂课里, 你编写了让乌龟绘制正方形的代码。简要描述一下绘制长方形的代码与绘制正方形的有什么不同。 （示例如右图长方形）
      csp_U3_square_v_rect_FR_2019: |-
        <img src="https://images.code.org/2f9b8b6a1c42b7c6c881f89867352907-image-1506460228029.png"
        style="float: right">\\r
        \\r
        在这堂课里, 你编写了让乌龟绘制正方形的代码。简要描述一下绘制长方形的代码与绘制正方形的有什么不同。 （示例如右图长方形）
      csp_affirmation_control: |-
        这个简短的活动能让你反思一下在这堂课中学到了什么。这是你的老师提供给你的，但是_你不会在这里被评分_。\\r
        \\r
        你也许对这堂课的一些主题感兴趣，但对另一些没兴趣。\\r
        \\r
        <strong>\\r
        1\.
        写下一到两个你最感兴趣的主题：\\r
        \\r
        </strong>\\r
        \\r
        <input
        type=text><br>\\r
        <input type=text>\\r
        <br><br>\\r
        \\r
        <strong>\\r
        2\.
        你会如何准备讨论这个测试？你感觉对有兴趣的主题准备得太多，还是太少了？\\r
        </strong>\\r
        \\r
        _写下一些句子，集中在你的想法和感觉上，别担心写得好不好。_
      csp_affirmation_control_2: |-
        这个简短的活动能让你反思一下在这堂课中学到了什么。这是你的老师提供给你的，但是_你不会在这里被评分_。\\r
        \\r
        你也许对这堂课的一些主题感兴趣，但对另一些没兴趣。\\r
        \\r
        <strong>\\r
        1\.
        写下一到两个你最感兴趣的主题：\\r
        \\r
        </strong>\\r
        \\r
        <input
        type=text><br>\\r
        <input type=text>\\r
        <br><br>\\r
        \\r
        <strong>\\r
        2\.
        你会如何准备讨论这个测试？你感觉对有兴趣的主题准备得太多，还是太少了？\\r
        </strong>\\r
        \\r
        _写下一些句子，集中在你的想法和感觉上，别担心写得好不好。_
      csp_affirmation_control_2018: |-
        这个简短的活动能让你反思一下在这堂课中学到了什么。这是你的老师提供给你的，但是_你不会在这里被评分_。\\r
        \\r
        你也许对这堂课的一些主题感兴趣，但对另一些没兴趣。\\r
        \\r
        <strong>\\r
        1\.
        写下一到两个你最感兴趣的主题：\\r
        \\r
        </strong>\\r
        \\r
        <input
        type=text><br>\\r
        <input type=text>\\r
        <br><br>\\r
        \\r
        <strong>\\r
        2\.
        你会如何准备讨论这个测试？你感觉对有兴趣的主题准备得太多，还是太少了？\\r
        </strong>\\r
        \\r
        _写下一些句子，集中在你的想法和感觉上，别担心写得好不好。_
      csp_affirmation_control_2_2018: |-
        这个简短的活动能让你反思一下在这堂课中学到了什么。这是你的老师提供给你的，但是_你不会在这里被评分_。\\r
        \\r
        你也许对这堂课的一些主题感兴趣，但对另一些没兴趣。\\r
        \\r
        <strong>\\r
        1\.
        写下一到两个你最感兴趣的主题：\\r
        \\r
        </strong>\\r
        \\r
        <input
        type=text><br>\\r
        <input type=text>\\r
        <br><br>\\r
        \\r
        <strong>\\r
        2\.
        你会如何准备讨论这个测试？你感觉对有兴趣的主题准备得太多，还是太少了？\\r
        </strong>\\r
        \\r
        _写下一些句子，集中在你的想法和感觉上，别担心写得好不好。_
      csp_affirmation_control_2_2019: |-
        这个简短的活动能让你反思一下在这堂课中学到了什么。这是你的老师提供给你的，但是_你不会在这里被评分_。\\r
        \\r
        你也许对这堂课的一些主题感兴趣，但对另一些没兴趣。\\r
        \\r
        <strong>\\r
        1\.
        写下一到两个你最感兴趣的主题：\\r
        \\r
        </strong>\\r
        \\r
        <input
        type=text><br>\\r
        <input type=text>\\r
        <br><br>\\r
        \\r
        <strong>\\r
        2\.
        你会如何准备讨论这个测试？你感觉对有兴趣的主题准备得太多，还是太少了？\\r
        </strong>\\r
        \\r
        _写下一些句子，集中在你的想法和感觉上，别担心写得好不好。_
      csp_affirmation_control_3: |-
        这个简短的活动能让你反思一下在这堂课中学到了什么。这是你的老师提供给你的，但是_你不会在这里被评分_。\\r
        \\r
        你也许对这堂课的一些主题感兴趣，但对另一些没兴趣。\\r
        \\r
        <strong>\\r
        1\.
        写下一到两个你最感兴趣的主题：\\r
        \\r
        </strong>\\r
        \\r
        <input
        type=text><br>\\r
        <input type=text>\\r
        <br><br>\\r
        \\r
        <strong>\\r
        2\.
        你会如何准备讨论这个测试？你感觉对有兴趣的主题准备得太多，还是太少了？\\r
        </strong>\\r
        \\r
        _写下一些句子，集中在你的想法和感觉上，别担心写得好不好。_
      csp_affirmation_control_3_2018: |-
        这个简短的活动能让你反思一下在这堂课中学到了什么。这是你的老师提供给你的，但是_你不会在这里被评分_。\\r
        \\r
        你也许对这堂课的一些主题感兴趣，但对另一些没兴趣。\\r
        \\r
        <strong>\\r
        1\.
        写下一到两个你最感兴趣的主题：\\r
        \\r
        </strong>\\r
        \\r
        <input
        type=text><br>\\r
        <input type=text>\\r
        <br><br>\\r
        \\r
        <strong>\\r
        2\.
        你会如何准备讨论这个测试？你感觉对有兴趣的主题准备得太多，还是太少了？\\r
        </strong>\\r
        \\r
        _写下一些句子，集中在你的想法和感觉上，别担心写得好不好。_
      csp_affirmation_control_4: |-
        这个简短的活动能让你反思一下在这堂课中学到了什么。这是你的老师提供给你的，但是_你不会在这里被评分_。\\r
        \\r
        你也许对这堂课的一些主题感兴趣，但对另一些没兴趣。\\r
        \\r
        <strong>\\r
        1\.
        写下一到两个你最感兴趣的主题：\\r
        \\r
        </strong>\\r
        \\r
        <input
        type=text><br>\\r
        <input type=text>\\r
        <br><br>\\r
        \\r
        <strong>\\r
        2\.
        你会如何准备讨论这个测试？你感觉对有兴趣的主题准备得太多，还是太少了？\\r
        </strong>\\r
        \\r
        _写下一些句子，集中在你的想法和感觉上，别担心写得好不好。_
      csp_affirmation_control_4_2018: |-
        这个简短的活动能让你反思一下在这堂课中学到了什么。这是你的老师提供给你的，但是_你不会在这里被评分_。\\r
        \\r
        你也许对这堂课的一些主题感兴趣，但对另一些没兴趣。\\r
        \\r
        <strong>\\r
        1\.
        写下一到两个你最感兴趣的主题：\\r
        \\r
        </strong>\\r
        \\r
        <input
        type=text><br>\\r
        <input type=text>\\r
        <br><br>\\r
        \\r
        <strong>\\r
        2\.
        你会如何准备讨论这个测试？你感觉对有兴趣的主题准备得太多，还是太少了？\\r
        </strong>\\r
        \\r
        _写下一些句子，集中在你的想法和感觉上，别担心写得好不好。_
      csp_affirmation_control_5: |-
        这个简短的活动能让你反思一下在这堂课中学到了什么。这是你的老师提供给你的，但是_你不会在这里被评分_。\\r
        \\r
        你也许对这堂课的一些主题感兴趣，但对另一些没兴趣。\\r
        \\r
        <strong>\\r
        1\.
        写下一到两个你最感兴趣的主题：\\r
        \\r
        </strong>\\r
        \\r
        <input
        type=text><br>\\r
        <input type=text>\\r
        <br><br>\\r
        \\r
        <strong>\\r
        2\.
        你会如何准备讨论这个测试？你感觉对有兴趣的主题准备得太多，还是太少了？\\r
        </strong>\\r
        \\r
        _写下一些句子，集中在你的想法和感觉上，别担心写得好不好。_
      csp_affirmation_control_5_2018: |-
        这个简短的活动能让你反思一下在这堂课中学到了什么。这是你的老师提供给你的，但是_你不会在这里被评分_。\\r
        \\r
        你也许对这堂课的一些主题感兴趣，但对另一些没兴趣。\\r
        \\r
        <strong>\\r
        1\.
        写下一到两个你最感兴趣的主题：\\r
        \\r
        </strong>\\r
        \\r
        <input
        type=text><br>\\r
        <input type=text>\\r
        <br><br>\\r
        \\r
        <strong>\\r
        2\.
        你会如何准备讨论这个测试？你感觉对有兴趣的主题准备得太多，还是太少了？\\r
        </strong>\\r
        \\r
        _写下一些句子，集中在你的想法和感觉上，别担心写得好不好。_
      csp_affirmation_intervention: |-
        这个简短的活动会让你反思一下，对于你来说，什么是最重要的。这是你的老师提供给你的，但是_你不会在这里被评分_。\\r
        \\r
        下面是价值和质量的列表。其中一些也许对你重要，另一些不重要。\\r
        \\r
        <strong>\\r

        1.  什么是对你最重要的？</strong>
            （选择一项或多项）\\r
            \\r
            \\r

        <table bordercolor="#FFFFFF" width=75% cellpadding=5
        cellspacing=10 style="background-color: #d9eff7; border-width: 10px; border-color:
        #FFFFFF">\r
          <tr style="border: 5px solid white">\r
            <td width=25%
        style="border: 5px solid white;">\r
            <label><input type="checkbox">
        与朋友和家人的关系\r
            </label></td>\r
            <td width=25%
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        体育运动\r
            </label></td>\r
            <td width=25% style="border:
        5px solid white">\r
            <label><input type="checkbox"> 和朋友或家人的关系\r
            </label></td>\r
            <td  width=25% style="border:
        5px solid white">\r
            <label><input type="checkbox"> 创造\r
            </label></td>\r
          </tr>\r
          <tr>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        精神或信仰\r
            </label></td>\r
            <td style="border: 5px
        solid white">\r
            <label><input type="checkbox"> 幽默感\r
            </label></td>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        健康与健身\r
            </label></td>\r
            <td style="border: 5px solid
        white">\r
            <label><input type="checkbox"> 吸引力\r
            </label></td>\r
          </tr>\r
          <tr>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        浪漫的价值观\r
            </label></td>\r
            <td style="border: 5px solid
        white">\r
            <label><input type="checkbox"> 善良\r
            </label></td>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        顺其自然的享受生命的当下\r
            </label></td>\r
            <td style="border:
        5px solid white">\r
            <label><input type="checkbox"> 独立\r
            </label></td>\r
          </tr>\r
        </table>\r
        <br>\r
        <br>\r
        \r
        <strong>\r
        &#50;.
        为什么它们对你很重要？描述一个它们在你的生命中真的很重要的时刻。\r
        </strong>\r
        \r
        *写下一些句子。集中在你的思考和感想，别担心写得好不好。*
      csp_affirmation_intervention_2: |-
        这个简短的活动会让你反思一下，对于你来说，什么是最重要的。这是你的老师提供给你的，但是_你不会在这里被评分_。\\r
        \\r
        下面是价值和质量的列表。其中一些也许对你重要，另一些不重要。\\r
        \\r
        <strong>\\r

        1.  什么是对你最重要的？</strong>
            （选择一项或多项）\\r
            \\r
            \\r

        <table bordercolor="#FFFFFF" width=75% cellpadding=5
        cellspacing=10 style="background-color: #d9eff7; border-width: 10px; border-color:
        #FFFFFF">\r
          <tr style="border: 5px solid white">\r
            <td width=25%
        style="border: 5px solid white;">\r
            <label><input type="checkbox">
        与朋友和家人的关系\r
            </label></td>\r
            <td width=25%
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        体育运动\r
            </label></td>\r
            <td width=25% style="border:
        5px solid white">\r
            <label><input type="checkbox"> 和朋友或家人的关系\r
            </label></td>\r
            <td  width=25% style="border:
        5px solid white">\r
            <label><input type="checkbox"> 创造\r
            </label></td>\r
          </tr>\r
          <tr>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        精神或信仰\r
            </label></td>\r
            <td style="border: 5px
        solid white">\r
            <label><input type="checkbox"> 幽默感\r
            </label></td>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        健康与健身\r
            </label></td>\r
            <td style="border: 5px solid
        white">\r
            <label><input type="checkbox"> 吸引力\r
            </label></td>\r
          </tr>\r
          <tr>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        浪漫的价值观\r
            </label></td>\r
            <td style="border: 5px solid
        white">\r
            <label><input type="checkbox"> 善良\r
            </label></td>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        顺其自然的享受生命的当下\r
            </label></td>\r
            <td style="border:
        5px solid white">\r
            <label><input type="checkbox"> 独立\r
            </label></td>\r
          </tr>\r
        </table>\r
        <br>\r
        <br>\r
        \r
        <strong>\r
        &#50;.
        为什么它们对你很重要？描述一个它们在你的生命中真的很重要的时刻。\r
        </strong>\r
        \r
        *写下一些句子。集中在你的思考和感想，别担心写得好不好。*
      csp_affirmation_intervention_2018: |-
        这个简短的活动会让你反思一下，对于你来说，什么是最重要的。这是你的老师提供给你的，但是_你不会在这里被评分_。\\r
        \\r
        下面是价值和质量的列表。其中一些也许对你重要，另一些不重要。\\r
        \\r
        <strong>\\r

        1.  什么是对你最重要的？</strong>
            （选择一项或多项）\\r
            \\r
            \\r

        <table bordercolor="#FFFFFF" width=75% cellpadding=5
        cellspacing=10 style="background-color: #d9eff7; border-width: 10px; border-color:
        #FFFFFF">\r
          <tr style="border: 5px solid white">\r
            <td width=25%
        style="border: 5px solid white;">\r
            <label><input type="checkbox">
        与朋友和家人的关系\r
            </label></td>\r
            <td width=25%
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        体育运动\r
            </label></td>\r
            <td width=25% style="border:
        5px solid white">\r
            <label><input type="checkbox"> 和朋友或家人的关系\r
            </label></td>\r
            <td  width=25% style="border:
        5px solid white">\r
            <label><input type="checkbox"> 创造\r
            </label></td>\r
          </tr>\r
          <tr>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        精神或信仰\r
            </label></td>\r
            <td style="border: 5px
        solid white">\r
            <label><input type="checkbox"> 幽默感\r
            </label></td>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        健康与健身\r
            </label></td>\r
            <td style="border: 5px solid
        white">\r
            <label><input type="checkbox"> 吸引力\r
            </label></td>\r
          </tr>\r
          <tr>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        浪漫的价值观\r
            </label></td>\r
            <td style="border: 5px solid
        white">\r
            <label><input type="checkbox"> 善良\r
            </label></td>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        顺其自然的享受生命的当下\r
            </label></td>\r
            <td style="border:
        5px solid white">\r
            <label><input type="checkbox"> 独立\r
            </label></td>\r
          </tr>\r
        </table>\r
        <br>\r
        <br>\r
        \r
        <strong>\r
        &#50;.
        为什么它们对你很重要？描述一个它们在你的生命中真的很重要的时刻。\r
        </strong>\r
        \r
        *写下一些句子。集中在你的思考和感想，别担心写得好不好。*
      csp_affirmation_intervention_2_2018: |-
        这个简短的活动会让你反思一下，对于你来说，什么是最重要的。这是你的老师提供给你的，但是_你不会在这里被评分_。\\r
        \\r
        下面是价值和质量的列表。其中一些也许对你重要，另一些不重要。\\r
        \\r
        <strong>\\r

        1.  什么是对你最重要的？</strong>
            （选择一项或多项）\\r
            \\r
            \\r

        <table bordercolor="#FFFFFF" width=75% cellpadding=5
        cellspacing=10 style="background-color: #d9eff7; border-width: 10px; border-color:
        #FFFFFF">\r
          <tr style="border: 5px solid white">\r
            <td width=25%
        style="border: 5px solid white;">\r
            <label><input type="checkbox">
        与朋友和家人的关系\r
            </label></td>\r
            <td width=25%
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        体育运动\r
            </label></td>\r
            <td width=25% style="border:
        5px solid white">\r
            <label><input type="checkbox"> 和朋友或家人的关系\r
            </label></td>\r
            <td  width=25% style="border:
        5px solid white">\r
            <label><input type="checkbox"> 创造\r
            </label></td>\r
          </tr>\r
          <tr>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        精神或信仰\r
            </label></td>\r
            <td style="border: 5px
        solid white">\r
            <label><input type="checkbox"> 幽默感\r
            </label></td>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        健康与健身\r
            </label></td>\r
            <td style="border: 5px solid
        white">\r
            <label><input type="checkbox"> 吸引力\r
            </label></td>\r
          </tr>\r
          <tr>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        浪漫的价值观\r
            </label></td>\r
            <td style="border: 5px solid
        white">\r
            <label><input type="checkbox"> 善良\r
            </label></td>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        顺其自然的享受生命的当下\r
            </label></td>\r
            <td style="border:
        5px solid white">\r
            <label><input type="checkbox"> 独立\r
            </label></td>\r
          </tr>\r
        </table>\r
        <br>\r
        <br>\r
        \r
        <strong>\r
        &#50;.
        为什么它们对你很重要？描述一个它们在你的生命中真的很重要的时刻。\r
        </strong>\r
        \r
        *写下一些句子。集中在你的思考和感想，别担心写得好不好。*
      csp_affirmation_intervention_2_2019: |-
        这个简短的活动会让你反思一下，对于你来说，什么是最重要的。这是你的老师提供给你的，但是_你不会在这里被评分_。\\r
        \\r
        下面是价值和质量的列表。其中一些也许对你重要，另一些不重要。\\r
        \\r
        <strong>\\r

        1.  什么是对你最重要的？</strong>
            （选择一项或多项）\\r
            \\r
            \\r

        <table bordercolor="#FFFFFF" width=75% cellpadding=5
        cellspacing=10 style="background-color: #d9eff7; border-width: 10px; border-color:
        #FFFFFF">\r
          <tr style="border: 5px solid white">\r
            <td width=25%
        style="border: 5px solid white;">\r
            <label><input type="checkbox">
        与朋友和家人的关系\r
            </label></td>\r
            <td width=25%
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        体育运动\r
            </label></td>\r
            <td width=25% style="border:
        5px solid white">\r
            <label><input type="checkbox"> 和朋友或家人的关系\r
            </label></td>\r
            <td  width=25% style="border:
        5px solid white">\r
            <label><input type="checkbox"> 创造\r
            </label></td>\r
          </tr>\r
          <tr>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        精神或信仰\r
            </label></td>\r
            <td style="border: 5px
        solid white">\r
            <label><input type="checkbox"> 幽默感\r
            </label></td>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        健康与健身\r
            </label></td>\r
            <td style="border: 5px solid
        white">\r
            <label><input type="checkbox"> 吸引力\r
            </label></td>\r
          </tr>\r
          <tr>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        浪漫的价值观\r
            </label></td>\r
            <td style="border: 5px solid
        white">\r
            <label><input type="checkbox"> 善良\r
            </label></td>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        顺其自然的享受生命的当下\r
            </label></td>\r
            <td style="border:
        5px solid white">\r
            <label><input type="checkbox"> 独立\r
            </label></td>\r
          </tr>\r
        </table>\r
        <br>\r
        <br>\r
        \r
        <strong>\r
        &#50;.
        为什么它们对你很重要？描述一个它们在你的生命中真的很重要的时刻。\r
        </strong>\r
        \r
        *写下一些句子。集中在你的思考和感想，别担心写得好不好。*
      csp_affirmation_intervention_3: |-
        这个简短的活动会让你反思一下，对于你来说，什么是最重要的。这是你的老师提供给你的，但是_你不会在这里被评分_。\\r
        \\r
        下面是价值和质量的列表。其中一些也许对你重要，另一些不重要。\\r
        \\r
        <strong>\\r

        1.  什么是对你最重要的？</strong>
            （选择一项或多项）\\r
            \\r
            \\r

        <table bordercolor="#FFFFFF" width=75% cellpadding=5
        cellspacing=10 style="background-color: #d9eff7; border-width: 10px; border-color:
        #FFFFFF">\r
          <tr style="border: 5px solid white">\r
            <td width=25%
        style="border: 5px solid white;">\r
            <label><input type="checkbox">
        与朋友和家人的关系\r
            </label></td>\r
            <td width=25%
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        体育运动\r
            </label></td>\r
            <td width=25% style="border:
        5px solid white">\r
            <label><input type="checkbox"> 和朋友或家人的关系\r
            </label></td>\r
            <td  width=25% style="border:
        5px solid white">\r
            <label><input type="checkbox"> 创造\r
            </label></td>\r
          </tr>\r
          <tr>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        精神或信仰\r
            </label></td>\r
            <td style="border: 5px
        solid white">\r
            <label><input type="checkbox"> 幽默感\r
            </label></td>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        健康与健身\r
            </label></td>\r
            <td style="border: 5px solid
        white">\r
            <label><input type="checkbox"> 吸引力\r
            </label></td>\r
          </tr>\r
          <tr>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        浪漫的价值观\r
            </label></td>\r
            <td style="border: 5px solid
        white">\r
            <label><input type="checkbox"> 善良\r
            </label></td>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        顺其自然的享受生命的当下\r
            </label></td>\r
            <td style="border:
        5px solid white">\r
            <label><input type="checkbox"> 独立\r
            </label></td>\r
          </tr>\r
        </table>\r
        <br>\r
        <br>\r
        \r
        <strong>\r
        &#50;.
        为什么它们对你很重要？描述一个它们在你的生命中真的很重要的时刻。\r
        </strong>\r
        \r
        *写下一些句子。集中在你的思考和感想，别担心写得好不好。*
      csp_affirmation_intervention_3_2018: |-
        这个简短的活动会让你反思一下，对于你来说，什么是最重要的。这是你的老师提供给你的，但是_你不会在这里被评分_。\\r
        \\r
        下面是价值和质量的列表。其中一些也许对你重要，另一些不重要。\\r
        \\r
        <strong>\\r

        1.  什么是对你最重要的？</strong>
            （选择一项或多项）\\r
            \\r
            \\r

        <table bordercolor="#FFFFFF" width=75% cellpadding=5
        cellspacing=10 style="background-color: #d9eff7; border-width: 10px; border-color:
        #FFFFFF">\r
          <tr style="border: 5px solid white">\r
            <td width=25%
        style="border: 5px solid white;">\r
            <label><input type="checkbox">
        与朋友和家人的关系\r
            </label></td>\r
            <td width=25%
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        体育运动\r
            </label></td>\r
            <td width=25% style="border:
        5px solid white">\r
            <label><input type="checkbox"> 和朋友或家人的关系\r
            </label></td>\r
            <td  width=25% style="border:
        5px solid white">\r
            <label><input type="checkbox"> 创造\r
            </label></td>\r
          </tr>\r
          <tr>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        精神或信仰\r
            </label></td>\r
            <td style="border: 5px
        solid white">\r
            <label><input type="checkbox"> 幽默感\r
            </label></td>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        健康与健身\r
            </label></td>\r
            <td style="border: 5px solid
        white">\r
            <label><input type="checkbox"> 吸引力\r
            </label></td>\r
          </tr>\r
          <tr>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        浪漫的价值观\r
            </label></td>\r
            <td style="border: 5px solid
        white">\r
            <label><input type="checkbox"> 善良\r
            </label></td>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        顺其自然的享受生命的当下\r
            </label></td>\r
            <td style="border:
        5px solid white">\r
            <label><input type="checkbox"> 独立\r
            </label></td>\r
          </tr>\r
        </table>\r
        <br>\r
        <br>\r
        \r
        <strong>\r
        &#50;.
        为什么它们对你很重要？描述一个它们在你的生命中真的很重要的时刻。\r
        </strong>\r
        \r
        *写下一些句子。集中在你的思考和感想，别担心写得好不好。*
      csp_affirmation_intervention_4: |-
        这个简短的活动会让你反思一下，对于你来说，什么是最重要的。这是你的老师提供给你的，但是_你不会在这里被评分_。\\r
        \\r
        下面是价值和质量的列表。其中一些也许对你重要，另一些不重要。\\r
        \\r
        <strong>\\r

        1.  什么是对你最重要的？</strong>
            （选择一项或多项）\\r
            \\r
            \\r

        <table bordercolor="#FFFFFF" width=75% cellpadding=5
        cellspacing=10 style="background-color: #d9eff7; border-width: 10px; border-color:
        #FFFFFF">\r
          <tr style="border: 5px solid white">\r
            <td width=25%
        style="border: 5px solid white;">\r
            <label><input type="checkbox">
        与朋友和家人的关系\r
            </label></td>\r
            <td width=25%
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        体育运动\r
            </label></td>\r
            <td width=25% style="border:
        5px solid white">\r
            <label><input type="checkbox"> 和朋友或家人的关系\r
            </label></td>\r
            <td  width=25% style="border:
        5px solid white">\r
            <label><input type="checkbox"> 创造\r
            </label></td>\r
          </tr>\r
          <tr>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        精神或信仰\r
            </label></td>\r
            <td style="border: 5px
        solid white">\r
            <label><input type="checkbox"> 幽默感\r
            </label></td>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        健康与健身\r
            </label></td>\r
            <td style="border: 5px solid
        white">\r
            <label><input type="checkbox"> 吸引力\r
            </label></td>\r
          </tr>\r
          <tr>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        浪漫的价值观\r
            </label></td>\r
            <td style="border: 5px solid
        white">\r
            <label><input type="checkbox"> 善良\r
            </label></td>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        顺其自然的享受生命的当下\r
            </label></td>\r
            <td style="border:
        5px solid white">\r
            <label><input type="checkbox"> 独立\r
            </label></td>\r
          </tr>\r
        </table>\r
        <br>\r
        <br>\r
        \r
        <strong>\r
        &#50;.
        为什么它们对你很重要？描述一个它们在你的生命中真的很重要的时刻。\r
        </strong>\r
        \r
        *写下一些句子。集中在你的思考和感想，别担心写得好不好。*
      csp_affirmation_intervention_4_2018: |-
        这个简短的活动会让你反思一下，对于你来说，什么是最重要的。这是你的老师提供给你的，但是_你不会在这里被评分_。\\r
        \\r
        下面是价值和质量的列表。其中一些也许对你重要，另一些不重要。\\r
        \\r
        <strong>\\r

        1.  什么是对你最重要的？</strong>
            （选择一项或多项）\\r
            \\r
            \\r

        <table bordercolor="#FFFFFF" width=75% cellpadding=5
        cellspacing=10 style="background-color: #d9eff7; border-width: 10px; border-color:
        #FFFFFF">\r
          <tr style="border: 5px solid white">\r
            <td width=25%
        style="border: 5px solid white;">\r
            <label><input type="checkbox">
        与朋友和家人的关系\r
            </label></td>\r
            <td width=25%
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        体育运动\r
            </label></td>\r
            <td width=25% style="border:
        5px solid white">\r
            <label><input type="checkbox"> 和朋友或家人的关系\r
            </label></td>\r
            <td  width=25% style="border:
        5px solid white">\r
            <label><input type="checkbox"> 创造\r
            </label></td>\r
          </tr>\r
          <tr>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        精神或信仰\r
            </label></td>\r
            <td style="border: 5px
        solid white">\r
            <label><input type="checkbox"> 幽默感\r
            </label></td>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        健康与健身\r
            </label></td>\r
            <td style="border: 5px solid
        white">\r
            <label><input type="checkbox"> 吸引力\r
            </label></td>\r
          </tr>\r
          <tr>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        浪漫的价值观\r
            </label></td>\r
            <td style="border: 5px solid
        white">\r
            <label><input type="checkbox"> 善良\r
            </label></td>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        顺其自然的享受生命的当下\r
            </label></td>\r
            <td style="border:
        5px solid white">\r
            <label><input type="checkbox"> 独立\r
            </label></td>\r
          </tr>\r
        </table>\r
        <br>\r
        <br>\r
        \r
        <strong>\r
        &#50;.
        为什么它们对你很重要？描述一个它们在你的生命中真的很重要的时刻。\r
        </strong>\r
        \r
        *写下一些句子。集中在你的思考和感想，别担心写得好不好。*
      csp_affirmation_intervention_5: |-
        这个简短的活动会让你反思一下，对于你来说，什么是最重要的。这是你的老师提供给你的，但是_你不会在这里被评分_。\\r
        \\r
        下面是价值和质量的列表。其中一些也许对你重要，另一些不重要。\\r
        \\r
        <strong>\\r

        1.  什么是对你最重要的？</strong>
            （选择一项或多项）\\r
            \\r
            \\r

        <table bordercolor="#FFFFFF" width=75% cellpadding=5
        cellspacing=10 style="background-color: #d9eff7; border-width: 10px; border-color:
        #FFFFFF">\r
          <tr style="border: 5px solid white">\r
            <td width=25%
        style="border: 5px solid white;">\r
            <label><input type="checkbox">
        与朋友和家人的关系\r
            </label></td>\r
            <td width=25%
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        体育运动\r
            </label></td>\r
            <td width=25% style="border:
        5px solid white">\r
            <label><input type="checkbox"> 和朋友或家人的关系\r
            </label></td>\r
            <td  width=25% style="border:
        5px solid white">\r
            <label><input type="checkbox"> 创造\r
            </label></td>\r
          </tr>\r
          <tr>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        精神或信仰\r
            </label></td>\r
            <td style="border: 5px
        solid white">\r
            <label><input type="checkbox"> 幽默感\r
            </label></td>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        健康与健身\r
            </label></td>\r
            <td style="border: 5px solid
        white">\r
            <label><input type="checkbox"> 吸引力\r
            </label></td>\r
          </tr>\r
          <tr>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        浪漫的价值观\r
            </label></td>\r
            <td style="border: 5px solid
        white">\r
            <label><input type="checkbox"> 善良\r
            </label></td>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        顺其自然的享受生命的当下\r
            </label></td>\r
            <td style="border:
        5px solid white">\r
            <label><input type="checkbox"> 独立\r
            </label></td>\r
          </tr>\r
        </table>\r
        <br>\r
        <br>\r
        \r
        <strong>\r
        &#50;.
        为什么它们对你很重要？描述一个它们在你的生命中真的很重要的时刻。\r
        </strong>\r
        \r
        *写下一些句子。集中在你的思考和感想，别担心写得好不好。*
      csp_affirmation_intervention_5_2018: |-
        这个简短的活动会让你反思一下，对于你来说，什么是最重要的。这是你的老师提供给你的，但是_你不会在这里被评分_。\\r
        \\r
        下面是价值和质量的列表。其中一些也许对你重要，另一些不重要。\\r
        \\r
        <strong>\\r

        1.  什么是对你最重要的？</strong>
            （选择一项或多项）\\r
            \\r
            \\r

        <table bordercolor="#FFFFFF" width=75% cellpadding=5
        cellspacing=10 style="background-color: #d9eff7; border-width: 10px; border-color:
        #FFFFFF">\r
          <tr style="border: 5px solid white">\r
            <td width=25%
        style="border: 5px solid white;">\r
            <label><input type="checkbox">
        与朋友和家人的关系\r
            </label></td>\r
            <td width=25%
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        体育运动\r
            </label></td>\r
            <td width=25% style="border:
        5px solid white">\r
            <label><input type="checkbox"> 和朋友或家人的关系\r
            </label></td>\r
            <td  width=25% style="border:
        5px solid white">\r
            <label><input type="checkbox"> 创造\r
            </label></td>\r
          </tr>\r
          <tr>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        精神或信仰\r
            </label></td>\r
            <td style="border: 5px
        solid white">\r
            <label><input type="checkbox"> 幽默感\r
            </label></td>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        健康与健身\r
            </label></td>\r
            <td style="border: 5px solid
        white">\r
            <label><input type="checkbox"> 吸引力\r
            </label></td>\r
          </tr>\r
          <tr>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        浪漫的价值观\r
            </label></td>\r
            <td style="border: 5px solid
        white">\r
            <label><input type="checkbox"> 善良\r
            </label></td>\r
            <td
        style="border: 5px solid white">\r
            <label><input type="checkbox">
        顺其自然的享受生命的当下\r
            </label></td>\r
            <td style="border:
        5px solid white">\r
            <label><input type="checkbox"> 独立\r
            </label></td>\r
          </tr>\r
        </table>\r
        <br>\r
        <br>\r
        \r
        <strong>\r
        &#50;.
        为什么它们对你很重要？描述一个它们在你的生命中真的很重要的时刻。\r
        </strong>\r
        \r
        *写下一些句子。集中在你的思考和感想，别担心写得好不好。*
      csp_socialBelonging_control: |-
        \\r

        ## 开始计算机科学\\r

        \\r
        计算机科学改变了我们相互的通信方式，制作艺术和电影，种植事物，甚至治疗疾病。
        **每个人都能学习计算机科学，并做出改变：**你已经有的计算机科学经验有多少骑士真的不重要，年龄、性别或肤色也不重要。\\r
        \\r
        \*\*\*\\r
        \\r

        ## 引自学生\\r

        \\r
        一直以来，我们认为第一次学习计算机科学课程会很难。这是一些学生的花，描述了他们的策略，和学这个课的一些提示。 **请认真阅读这些引言，并答复下面的提问。** \\r
        \\r

        <div style="background-color:
        #d9eff7; border-radius: 40px 40px 40px 5px; color: #000000; width: 80%; padding:
        0.5px 20px 1px 20px;">\r
        \r
        <p style="font-size: 70px; margin-bottom:
        -10px; margin-top: 30px; opacity: 0.5">&ldquo;</p>\r
        <p style="line-height:
        1.5; margin-left: 10px; margin-right: 30px; ">\r
        在课程的第一周，我很快就拉下了。有太多的新的信息要学习了。为了赶上，我找到了一个更好的方法来学习。我试着在课程和我已经知道的事务中建立练习。这对我记住东西非常有帮助。我也试图不要做得太夸张。我开始在课程间有些小的休息，然后回来看看是否我仍然记得刚学过得。这很有帮助。\r
         </p>\r
        <p style="font-size: 70px; text-align:
        right; margin-right: 5%; margin-top: -10px; opacity: 0.5">&rdquo;</p>\r
        <p
        style="text-align: right; font-size: 125%; font-style: italic; margin-right:
        70px; margin-top: -20px; ">\r
        索菲亚 P. （16岁）\r
        </p>\r
        \r
        </div>\r
        <br>\r
        \r
        <div
        style="background-color: #d9eff7; border-radius: 40px 40px 5px 40px; color:
        #000000; width: 80%; margin-left: 10%; padding: 0.5px 20px 1px 20px;">\r
        \r
        \r
        <p
        style="font-size: 70px; margin-bottom: -10px; margin-top: 30px; opacity:
        0.5">&ldquo;</p>\r
        <p style="line-height: 1.5; margin-left: 10px; margin-right:
        30px;">一些天，我感到非常累，我的想法都飘走了。这是个问题，因为我已经忘了我们学了什么了。因此，我开始早点回去睡觉，尽力集中精力。在每节课老师开始总结\r
        我们这天学了些什么，那真的很有帮助。我开始记笔记，因为这让我从走神中回来。这些小技巧让我完成了课程，也学到了更多。</p>\r
        <p style="font-size: 70px; text-align: right;
        opacity: 0.5">&rdquo;</p>\r
        <p style="text-align: right; font-size: 125%;  font-style:
        italic; margin-right: 30px; margin-top: -20px">\r
        詹姆斯 D. （17岁）\r
        </p>\r
        </div>\r
        <br>\r
        \r
        <div
        style="background-color: #d9eff7; border-radius: 40px 40px 40px 5px; color:
        #000000; width: 80%; padding: 0.5px 20px 1px 20px;">\r
        \r
        <p style="font-size:
        70px; margin-bottom: -10px; margin-top: 30px; opacity: 0.5">&ldquo;</p>\r
        <p
        style="line-height: 1.5; margin-left: 10px; margin-right: 30px; ">我有时候非常容易忘事，这在课堂中是个问题。我觉得这因为我们在电脑上做了太多事情。对于其它课程，我会在纸上记笔记，回家一遍遍的读它们。因此，我发现在课堂中，在纸上记笔记非常有帮助，并能对自己测试这些概念。我开始不确定是否有用，但最后我觉得它帮了大忙。</p>\r
        \r
        <p style="font-size: 70px; text-align:
        right; opacity: 0.5">&rdquo;</p>\r
        <p style="text-align: right; font-size:
        125%;  font-style: italic; margin-right: 30px; margin-top: -20px">\r
        山姆
        J. （17岁）\r
        </p>\r
        </div>\r
        \r
        ***\r
        <p style="font-size: 125%">现在思考你刚刚读到的关于最佳学习的策略和领悟。
        </p>\r
        \r
        ## 反思和总结 \r
        \r
        <p style="font-size: 150%;
        color: black; font-weight: bolder; line-height: 1.5">你自己的关于学习的最佳策略和领悟是什么？并且，它们和你刚才从其他同学那里听到的有什么相似或不同？ </p>\r
        \r
        *写下一小段。别担心拼写、语法或写得怎样。*
      csp_socialBelonging_control_2018: |-
        \\r

        ## 开始计算机科学\\r

        \\r
        计算机科学改变了我们相互的通信方式，制作艺术和电影，种植事物，甚至治疗疾病。
        **每个人都能学习计算机科学，并做出改变：**你已经有的计算机科学经验有多少骑士真的不重要，年龄、性别或肤色也不重要。\\r
        \\r
        \*\*\*\\r
        \\r

        ## 引自学生\\r

        \\r
        一直以来，我们认为第一次学习计算机科学课程会很难。这是一些学生的花，描述了他们的策略，和学这个课的一些提示。 **请认真阅读这些引言，并答复下面的提问。** \\r
        \\r

        <div style="background-color:
        #d9eff7; border-radius: 40px 40px 40px 5px; color: #000000; width: 80%; padding:
        0.5px 20px 1px 20px;">\r
        \r
        <p style="font-size: 70px; margin-bottom:
        -10px; margin-top: 30px; opacity: 0.5">&ldquo;</p>\r
        <p style="line-height:
        1.5; margin-left: 10px; margin-right: 30px; ">\r
        在课程的第一周，我很快就拉下了。有太多的新的信息要学习了。为了赶上，我找到了一个更好的方法来学习。我试着在课程和我已经知道的事务中建立练习。这对我记住东西非常有帮助。我也试图不要做得太夸张。我开始在课程间有些小的休息，然后回来看看是否我仍然记得刚学过得。这很有帮助。\r
         </p>\r
        <p style="font-size: 70px; text-align:
        right; margin-right: 5%; margin-top: -10px; opacity: 0.5">&rdquo;</p>\r
        <p
        style="text-align: right; font-size: 125%; font-style: italic; margin-right:
        70px; margin-top: -20px; ">\r
        索菲亚 P. （16岁）\r
        </p>\r
        \r
        </div>\r
        <br>\r
        \r
        <div
        style="background-color: #d9eff7; border-radius: 40px 40px 5px 40px; color:
        #000000; width: 80%; margin-left: 10%; padding: 0.5px 20px 1px 20px;">\r
        \r
        \r
        <p
        style="font-size: 70px; margin-bottom: -10px; margin-top: 30px; opacity:
        0.5">&ldquo;</p>\r
        <p style="line-height: 1.5; margin-left: 10px; margin-right:
        30px;">一些天，我感到非常累，我的想法都飘走了。这是个问题，因为我已经忘了我们学了什么了。因此，我开始早点回去睡觉，尽力集中精力。在每节课老师开始总结\r
        我们这天学了些什么，那真的很有帮助。我开始记笔记，因为这让我从走神中回来。这些小技巧让我完成了课程，也学到了更多。</p>\r
        <p style="font-size: 70px; text-align: right;
        opacity: 0.5">&rdquo;</p>\r
        <p style="text-align: right; font-size: 125%;  font-style:
        italic; margin-right: 30px; margin-top: -20px">\r
        詹姆斯 D. （17岁）\r
        </p>\r
        </div>\r
        <br>\r
        \r
        <div
        style="background-color: #d9eff7; border-radius: 40px 40px 40px 5px; color:
        #000000; width: 80%; padding: 0.5px 20px 1px 20px;">\r
        \r
        <p style="font-size:
        70px; margin-bottom: -10px; margin-top: 30px; opacity: 0.5">&ldquo;</p>\r
        <p
        style="line-height: 1.5; margin-left: 10px; margin-right: 30px; ">我有时候非常容易忘事，这在课堂中是个问题。我觉得这因为我们在电脑上做了太多事情。对于其它课程，我会在纸上记笔记，回家一遍遍的读它们。因此，我发现在课堂中，在纸上记笔记非常有帮助，并能对自己测试这些概念。我开始不确定是否有用，但最后我觉得它帮了大忙。</p>\r
        \r
        <p style="font-size: 70px; text-align:
        right; opacity: 0.5">&rdquo;</p>\r
        <p style="text-align: right; font-size:
        125%;  font-style: italic; margin-right: 30px; margin-top: -20px">\r
        山姆
        J. （17岁）\r
        </p>\r
        </div>\r
        \r
        ***\r
        <p style="font-size: 125%">现在思考你刚刚读到的关于最佳学习的策略和领悟。
        </p>\r
        \r
        ## 反思和总结 \r
        \r
        <p style="font-size: 150%;
        color: black; font-weight: bolder; line-height: 1.5">你自己的关于学习的最佳策略和领悟是什么？并且，它们和你刚才从其他同学那里听到的有什么相似或不同？ </p>\r
        \r
        *写下一小段。别担心拼写、语法或写得怎样。*
      csp_socialBelonging_control_2019: |-
        \\r

        ## 开始计算机科学\\r

        \\r
        计算机科学改变了我们相互的通信方式，制作艺术和电影，种植事物，甚至治疗疾病。
        **每个人都能学习计算机科学，并做出改变：**你已经有的计算机科学经验有多少骑士真的不重要，年龄、性别或肤色也不重要。\\r
        \\r
        \*\*\*\\r
        \\r

        ## 引自学生\\r

        \\r
        一直以来，我们认为第一次学习计算机科学课程会很难。这是一些学生的花，描述了他们的策略，和学这个课的一些提示。 **请认真阅读这些引言，并答复下面的提问。** \\r
        \\r

        <div style="background-color:
        #d9eff7; border-radius: 40px 40px 40px 5px; color: #000000; width: 80%; padding:
        0.5px 20px 1px 20px;">\r
        \r
        <p style="font-size: 70px; margin-bottom:
        -10px; margin-top: 30px; opacity: 0.5">&ldquo;</p>\r
        <p style="line-height:
        1.5; margin-left: 10px; margin-right: 30px; ">\r
        在课程的第一周，我很快就拉下了。有太多的新的信息要学习了。为了赶上，我找到了一个更好的方法来学习。我试着在课程和我已经知道的事务中建立练习。这对我记住东西非常有帮助。我也试图不要做得太夸张。我开始在课程间有些小的休息，然后回来看看是否我仍然记得刚学过得。这很有帮助。\r
         </p>\r
        <p style="font-size: 70px; text-align:
        right; margin-right: 5%; margin-top: -10px; opacity: 0.5">&rdquo;</p>\r
        <p
        style="text-align: right; font-size: 125%; font-style: italic; margin-right:
        70px; margin-top: -20px; ">\r
        索菲亚 P. （16岁）\r
        </p>\r
        \r
        </div>\r
        <br>\r
        \r
        <div
        style="background-color: #d9eff7; border-radius: 40px 40px 5px 40px; color:
        #000000; width: 80%; margin-left: 10%; padding: 0.5px 20px 1px 20px;">\r
        \r
        \r
        <p
        style="font-size: 70px; margin-bottom: -10px; margin-top: 30px; opacity:
        0.5">&ldquo;</p>\r
        <p style="line-height: 1.5; margin-left: 10px; margin-right:
        30px;">一些天，我感到非常累，我的想法都飘走了。这是个问题，因为我已经忘了我们学了什么了。因此，我开始早点回去睡觉，尽力集中精力。在每节课老师开始总结\r
        我们这天学了些什么，那真的很有帮助。我开始记笔记，因为这让我从走神中回来。这些小技巧让我完成了课程，也学到了更多。</p>\r
        <p style="font-size: 70px; text-align: right;
        opacity: 0.5">&rdquo;</p>\r
        <p style="text-align: right; font-size: 125%;  font-style:
        italic; margin-right: 30px; margin-top: -20px">\r
        詹姆斯 D. （17岁）\r
        </p>\r
        </div>\r
        <br>\r
        \r
        <div
        style="background-color: #d9eff7; border-radius: 40px 40px 40px 5px; color:
        #000000; width: 80%; padding: 0.5px 20px 1px 20px;">\r
        \r
        <p style="font-size:
        70px; margin-bottom: -10px; margin-top: 30px; opacity: 0.5">&ldquo;</p>\r
        <p
        style="line-height: 1.5; margin-left: 10px; margin-right: 30px; ">我有时候非常容易忘事，这在课堂中是个问题。我觉得这因为我们在电脑上做了太多事情。对于其它课程，我会在纸上记笔记，回家一遍遍的读它们。因此，我发现在课堂中，在纸上记笔记非常有帮助，并能对自己测试这些概念。我开始不确定是否有用，但最后我觉得它帮了大忙。</p>\r
        \r
        <p style="font-size: 70px; text-align:
        right; opacity: 0.5">&rdquo;</p>\r
        <p style="text-align: right; font-size:
        125%;  font-style: italic; margin-right: 30px; margin-top: -20px">\r
        山姆
        J. （17岁）\r
        </p>\r
        </div>\r
        \r
        ***\r
        <p style="font-size: 125%">现在思考你刚刚读到的关于最佳学习的策略和领悟。
        </p>\r
        \r
        ## 反思和总结 \r
        \r
        <p style="font-size: 150%;
        color: black; font-weight: bolder; line-height: 1.5">你自己的关于学习的最佳策略和领悟是什么？并且，它们和你刚才从其他同学那里听到的有什么相似或不同？ </p>\r
        \r
        *写下一小段。别担心拼写、语法或写得怎样。*
      csp_socialBelonging_intervention: |-
        ## 开始计算机科学\\r

        \\r
        计算机科学改变了我们相互的通信方式，制作艺术和电影，种植事物，甚至治疗疾病。
        **每个人都能学习计算机科学，并做出改变：**你已经有的计算机科学经验有多少骑士真的不重要，年龄、性别或肤色也不重要。\\r
        \\r
        \*\*\*\\r
        \\r

        ## 引自学生\\r

        \\r
        一直以来我们认为第一次学习计算机科学课程都会感到很气馁。因此，这是一些学生的经验。**请认真阅读引言，并对下面的提示做出回应**。 \\r
        \\r
        \\r

        <div style="background-color: #d9eff7; border-radius:
        40px 40px 40px 5px; color: #000000; width: 80%; padding: 0.5px 20px 1px 20px;">\r
        \r
        <p
        style="font-size: 70px; margin-bottom: -10px; margin-top: 30px; opacity:
        0.5">&ldquo;</p>\r
        <p style="line-height: 1.5; margin-left: 10px; margin-right:
        30px; ">\r
        在我刚开始课程时，我很担心我和别的学生是否会不同。我不确定我是否能融入 - 我\r担心我不能做到，老师和同学们会看不起我。我开始了一些天以后，我才认识到，大部分同学开始都不能确定自己是否能行。这是每个人都要经理的。现在看起来好好笑 - 每个人一开始都觉得自己不一样，但实际上他们的感觉都是一样的。</p>\r
        <p style="font-size: 70px; text-align:
        right; margin-right: 5%; margin-top: -10px; opacity: 0.5">&rdquo;</p>\r
        <p
        style="text-align: right; font-size: 125%; font-style: italic; margin-right:
        70px; margin-top: -20px; ">\r
        索菲亚 P。（16岁）\r
        </p>\r
        \r
        </div>\r
        <br>\r
        \r
        <div
        style="background-color: #d9eff7; border-radius: 40px 40px 5px 40px; color:
        #000000; width: 80%; margin-left: 10%; padding: 0.5px 20px 1px 20px;">\r
        \r
        \r
        <p
        style="font-size: 70px; margin-bottom: -10px; margin-top: 30px; opacity:
        0.5">&ldquo;</p>\r
        <p style="line-height: 1.5; margin-left: 10px; margin-right:
        30px;">我超爱计算机科学课！我遇到了一些很酷的人，也学到了很多。但这是一个很困难的转变。开始的几天我很怯场，不确定自己是否应该学习计算机科学。为什么我需要它？但我们在课堂上谈论的东西我很感兴趣，比如音乐和设计，所以我意识到我能学到如何做很酷的新事物。关于计算机科学，我头脑里的印象显然错了，它实际上非常有创造力！我必须有耐心，找到方法把课程和我真的关心东西连接起来。</p>\r
        <p style="font-size: 70px; text-align: right; opacity:
        0.5">&rdquo;</p>\r
        <p style="text-align: right; font-size: 125%;  font-style:
        italic; margin-right: 30px; margin-top: -20px">\r
        詹姆斯 D. （17岁）\r
        </p>\r
        </div>\r
        <br>\r
        \r
        <div
        style="background-color: #d9eff7; border-radius: 40px 40px 40px 5px; color:
        #000000; width: 80%; padding: 0.5px 20px 1px 20px;">\r
        \r
        <p style="font-size:
        70px; margin-bottom: -10px; margin-top: 30px; opacity: 0.5">&ldquo;</p>\r
        <p
        style="line-height: 1.5; margin-left: 10px; margin-right: 30px; ">我以前没有任何代码经验，我很担心我还没准备好上这个课。别的学生在家里或者夏令营里编过一些程序。我第一天的时候，我很担心自己会得到很差的分数，或者看起来像个傻瓜。但是然后，我开始感觉好点了 - 我和其他同学开始交谈，对课程更喜欢了。当我有问题时，我感觉能很放松的请求帮助了。这证明原来有计算机科学经验的学生和我有一样的问题。啊哈，这花了些时间，现在我感觉我好像属于计算机科学课程。</p>\r
        \r
        <p
        style="font-size: 70px; text-align: right; opacity: 0.5">&rdquo;</p>\r
        <p
        style="text-align: right; font-size: 125%;  font-style: italic; margin-right:
        30px; margin-top: -20px">\r
        山姆 J. （17岁）\r
        </p>\r
        </div>\r
        \r
        ***\r
        <p
        style="font-size: 125%"> 这些每个学生都有相似的体验和认识。 </p>\r
        \r
        ## 反思和总结：\r
        \r
        \r
        <p style="font-size:
        150%; color: black; font-weight: bolder; line-height: 1.5">为什么你觉得学生们一开始会担心自己是否属于这个课程？他们如何过段时间感觉到放松的？</p>\r
        \r
        *请写下一个短的段落。别担心拼写或者字写得好不好。*
      csp_socialBelonging_intervention_2018: |-
        ## 开始计算机科学\\r

        \\r
        计算机科学改变了我们相互的通信方式，制作艺术和电影，种植事物，甚至治疗疾病。
        **每个人都能学习计算机科学，并做出改变：**你已经有的计算机科学经验有多少骑士真的不重要，年龄、性别或肤色也不重要。\\r
        \\r
        \*\*\*\\r
        \\r

        ## 引自学生\\r

        \\r
        一直以来我们认为第一次学习计算机科学课程都会感到很气馁。因此，这是一些学生的经验。**请认真阅读引言，并对下面的提示做出回应**。 \\r
        \\r
        \\r

        <div style="background-color: #d9eff7; border-radius:
        40px 40px 40px 5px; color: #000000; width: 80%; padding: 0.5px 20px 1px 20px;">\r
        \r
        <p
        style="font-size: 70px; margin-bottom: -10px; margin-top: 30px; opacity:
        0.5">&ldquo;</p>\r
        <p style="line-height: 1.5; margin-left: 10px; margin-right:
        30px; ">\r
        在我刚开始课程时，我很担心我和别的学生是否会不同。我不确定我是否能融入 - 我\r担心我不能做到，老师和同学们会看不起我。我开始了一些天以后，我才认识到，大部分同学开始都不能确定自己是否能行。这是每个人都要经理的。现在看起来好好笑 - 每个人一开始都觉得自己不一样，但实际上他们的感觉都是一样的。</p>\r
        <p style="font-size: 70px; text-align:
        right; margin-right: 5%; margin-top: -10px; opacity: 0.5">&rdquo;</p>\r
        <p
        style="text-align: right; font-size: 125%; font-style: italic; margin-right:
        70px; margin-top: -20px; ">\r
        索菲亚 P。（16岁）\r
        </p>\r
        \r
        </div>\r
        <br>\r
        \r
        <div
        style="background-color: #d9eff7; border-radius: 40px 40px 5px 40px; color:
        #000000; width: 80%; margin-left: 10%; padding: 0.5px 20px 1px 20px;">\r
        \r
        \r
        <p
        style="font-size: 70px; margin-bottom: -10px; margin-top: 30px; opacity:
        0.5">&ldquo;</p>\r
        <p style="line-height: 1.5; margin-left: 10px; margin-right:
        30px;">我超爱计算机科学课！我遇到了一些很酷的人，也学到了很多。但这是一个很困难的转变。开始的几天我很怯场，不确定自己是否应该学习计算机科学。为什么我需要它？但我们在课堂上谈论的东西我很感兴趣，比如音乐和设计，所以我意识到我能学到如何做很酷的新事物。关于计算机科学，我头脑里的印象显然错了，它实际上非常有创造力！我必须有耐心，找到方法把课程和我真的关心东西连接起来。</p>\r
        <p style="font-size: 70px; text-align: right; opacity:
        0.5">&rdquo;</p>\r
        <p style="text-align: right; font-size: 125%;  font-style:
        italic; margin-right: 30px; margin-top: -20px">\r
        詹姆斯 D. （17岁）\r
        </p>\r
        </div>\r
        <br>\r
        \r
        <div
        style="background-color: #d9eff7; border-radius: 40px 40px 40px 5px; color:
        #000000; width: 80%; padding: 0.5px 20px 1px 20px;">\r
        \r
        <p style="font-size:
        70px; margin-bottom: -10px; margin-top: 30px; opacity: 0.5">&ldquo;</p>\r
        <p
        style="line-height: 1.5; margin-left: 10px; margin-right: 30px; ">我以前没有任何代码经验，我很担心我还没准备好上这个课。别的学生在家里或者夏令营里编过一些程序。我第一天的时候，我很担心自己会得到很差的分数，或者看起来像个傻瓜。但是然后，我开始感觉好点了 - 我和其他同学开始交谈，对课程更喜欢了。当我有问题时，我感觉能很放松的请求帮助了。这证明原来有计算机科学经验的学生和我有一样的问题。啊哈，这花了些时间，现在我感觉我好像属于计算机科学课程。</p>\r
        \r
        <p
        style="font-size: 70px; text-align: right; opacity: 0.5">&rdquo;</p>\r
        <p
        style="text-align: right; font-size: 125%;  font-style: italic; margin-right:
        30px; margin-top: -20px">\r
        山姆 J. （17岁）\r
        </p>\r
        </div>\r
        \r
        ***\r
        <p
        style="font-size: 125%"> 这些每个学生都有相似的体验和认识。 </p>\r
        \r
        ## 反思和总结：\r
        \r
        \r
        <p style="font-size:
        150%; color: black; font-weight: bolder; line-height: 1.5">为什么你觉得学生们一开始会担心自己是否属于这个课程？他们如何过段时间感觉到放松的？</p>\r
        \r
        *请写下一个短的段落。别担心拼写或者字写得好不好。*
      csp_socialBelonging_intervention_2019: |-
        ## 开始计算机科学\\r

        \\r
        计算机科学改变了我们相互的通信方式，制作艺术和电影，种植事物，甚至治疗疾病。
        **每个人都能学习计算机科学，并做出改变：**你已经有的计算机科学经验有多少骑士真的不重要，年龄、性别或肤色也不重要。\\r
        \\r
        \*\*\*\\r
        \\r

        ## 引自学生\\r

        \\r
        一直以来我们认为第一次学习计算机科学课程都会感到很气馁。因此，这是一些学生的经验。**请认真阅读引言，并对下面的提示做出回应**。 \\r
        \\r
        \\r

        <div style="background-color: #d9eff7; border-radius:
        40px 40px 40px 5px; color: #000000; width: 80%; padding: 0.5px 20px 1px 20px;">\r
        \r
        <p
        style="font-size: 70px; margin-bottom: -10px; margin-top: 30px; opacity:
        0.5">&ldquo;</p>\r
        <p style="line-height: 1.5; margin-left: 10px; margin-right:
        30px; ">\r
        在我刚开始课程时，我很担心我和别的学生是否会不同。我不确定我是否能融入 - 我\r担心我不能做到，老师和同学们会看不起我。我开始了一些天以后，我才认识到，大部分同学开始都不能确定自己是否能行。这是每个人都要经理的。现在看起来好好笑 - 每个人一开始都觉得自己不一样，但实际上他们的感觉都是一样的。</p>\r
        <p style="font-size: 70px; text-align:
        right; margin-right: 5%; margin-top: -10px; opacity: 0.5">&rdquo;</p>\r
        <p
        style="text-align: right; font-size: 125%; font-style: italic; margin-right:
        70px; margin-top: -20px; ">\r
        索菲亚 P。（16岁）\r
        </p>\r
        \r
        </div>\r
        <br>\r
        \r
        <div
        style="background-color: #d9eff7; border-radius: 40px 40px 5px 40px; color:
        #000000; width: 80%; margin-left: 10%; padding: 0.5px 20px 1px 20px;">\r
        \r
        \r
        <p
        style="font-size: 70px; margin-bottom: -10px; margin-top: 30px; opacity:
        0.5">&ldquo;</p>\r
        <p style="line-height: 1.5; margin-left: 10px; margin-right:
        30px;">我超爱计算机科学课！我遇到了一些很酷的人，也学到了很多。但这是一个很困难的转变。开始的几天我很怯场，不确定自己是否应该学习计算机科学。为什么我需要它？但我们在课堂上谈论的东西我很感兴趣，比如音乐和设计，所以我意识到我能学到如何做很酷的新事物。关于计算机科学，我头脑里的印象显然错了，它实际上非常有创造力！我必须有耐心，找到方法把课程和我真的关心东西连接起来。</p>\r
        <p style="font-size: 70px; text-align: right; opacity:
        0.5">&rdquo;</p>\r
        <p style="text-align: right; font-size: 125%;  font-style:
        italic; margin-right: 30px; margin-top: -20px">\r
        詹姆斯 D. （17岁）\r
        </p>\r
        </div>\r
        <br>\r
        \r
        <div
        style="background-color: #d9eff7; border-radius: 40px 40px 40px 5px; color:
        #000000; width: 80%; padding: 0.5px 20px 1px 20px;">\r
        \r
        <p style="font-size:
        70px; margin-bottom: -10px; margin-top: 30px; opacity: 0.5">&ldquo;</p>\r
        <p
        style="line-height: 1.5; margin-left: 10px; margin-right: 30px; ">我以前没有任何代码经验，我很担心我还没准备好上这个课。别的学生在家里或者夏令营里编过一些程序。我第一天的时候，我很担心自己会得到很差的分数，或者看起来像个傻瓜。但是然后，我开始感觉好点了 - 我和其他同学开始交谈，对课程更喜欢了。当我有问题时，我感觉能很放松的请求帮助了。这证明原来有计算机科学经验的学生和我有一样的问题。啊哈，这花了些时间，现在我感觉我好像属于计算机科学课程。</p>\r
        \r
        <p
        style="font-size: 70px; text-align: right; opacity: 0.5">&rdquo;</p>\r
        <p
        style="text-align: right; font-size: 125%;  font-style: italic; margin-right:
        30px; margin-top: -20px">\r
        山姆 J. （17岁）\r
        </p>\r
        </div>\r
        \r
        ***\r
        <p
        style="font-size: 125%"> 这些每个学生都有相似的体验和认识。 </p>\r
        \r
        ## 反思和总结：\r
        \r
        \r
        <p style="font-size:
        150%; color: black; font-weight: bolder; line-height: 1.5">为什么你觉得学生们一开始会担心自己是否属于这个课程？他们如何过段时间感觉到放松的？</p>\r
        \r
        *请写下一个短的段落。别担心拼写或者字写得好不好。*
      cspu3_assess1_filltable: |-
        用自上而下的设计策略来填下面的表格。第一行已经填好了。你可以用更多或更少的行。\\r
        \\r
        _主意：对表格里每个项目都用新行。每行的格式应该是"函数名: 描述"_\\r
        \\r
        **自上而下的设计策略：**\\r
        \\r

        -   看看总体的情况…\\r
        -   找到一个子任务…\\r
        -   将子任务分解成更小的子任务...\\r
        -   继续下去，直到分解成了能够使用的命令。\\r
            \\r
            | 函数名 | 描述/理由
            \|\\r
            \|-----------------\|-----------------------------\|\\r
            | drawSnowflake()
            | 画六个点的雪花 |\\r
            | (你的答案)   | (你的答案)               |\\r
            \\r
            \\r
      cspu3_assess1_filltable_2018: |-
        用自上而下的设计策略来填下面的表格。第一行已经填好了。你可以用更多或更少的行。\\r
        \\r
        _主意：对表格里每个项目都用新行。每行的格式应该是"函数名: 描述"_\\r
        \\r
        **自上而下的设计策略：**\\r
        \\r

        -   看看总体的情况…\\r
        -   找到一个子任务…\\r
        -   将子任务分解成更小的子任务...\\r
        -   继续下去，直到分解成了能够使用的命令。\\r
            \\r
            | 函数名 | 描述/理由
            \|\\r
            \|-----------------\|-----------------------------\|\\r
            | drawSnowflake()
            | 画六个点的雪花 |\\r
            | (你的答案)   | (你的答案)               |\\r
            \\r
            \\r
      cspu3_assess1_filltable_2019: |-
        用自上而下的设计策略来填下面的表格。第一行已经填好了。你可以用更多或更少的行。\\r
        \\r
        _主意：对表格里每个项目都用新行。每行的格式应该是"函数名: 描述"_\\r
        \\r
        **自上而下的设计策略：**\\r
        \\r

        -   看看总体的情况…\\r
        -   找到一个子任务…\\r
        -   将子任务分解成更小的子任务...\\r
        -   继续下去，直到分解成了能够使用的命令。\\r
            \\r
            | 函数名 | 描述/理由
            \|\\r
            \|-----------------\|-----------------------------\|\\r
            | drawSnowflake()
            | 画六个点的雪花 |\\r
            | (你的答案)   | (你的答案)               |\\r
            \\r
            \\r
      cspu3_assess1_filltable_exam_prep: |-
        用自上而下的设计策略来填下面的表格。第一行已经填好了。你可以用更多或更少的行。\\r
        \\r
        _主意：对表格里每个项目都用新行。每行的格式应该是"函数名: 描述"_\\r
        \\r
        **自上而下的设计策略：**\\r
        \\r

        -   看看总体的情况…\\r
        -   找到一个子任务…\\r
        -   将子任务分解成更小的子任务...\\r
        -   继续下去，直到分解成了能够使用的命令。\\r
            \\r
            | 函数名 | 描述/理由
            \|\\r
            \|-----------------\|-----------------------------\|\\r
            | drawSnowflake()
            | 画六个点的雪花 |\\r
            | (你的答案)   | (你的答案)               |\\r
            \\r
            \\r
      cspu3_assess1_freeresponse: 解释抽象是如何帮助创造复杂性不断增加的系统的。在回答中要参考自上而下的设计策略。
      cspu3_assess1_freeresponse_2018: 解释抽象是如何帮助创造复杂性不断增加的系统的。在回答中要参考自上而下的设计策略。
      cspu3_assess1_freeresponse_2019: 解释抽象是如何帮助创造复杂性不断增加的系统的。在回答中要参考自上而下的设计策略。
      cspu3_assess1_freeresponse_exam_prep: 解释抽象是如何帮助创造复杂性不断增加的系统的。在回答中要参考自上而下的设计策略。
      cspu5_assess1_shortresponse: |-
        **简答题：**
        \\r
        \\r
        有两个学生，卡莱布和亨特，他们在课堂里争论关于应用实验室的项目。卡莱布说："啊，原来按钮和图片实际上是一样的！"。亨特回答道："它们完全不一样啊！\\r
        \\t解释一下卡莱布这么说的可能的原因。
      cspu5_assess1_shortresponse_2018: |-
        **简答题：**
        \\r
        \\r
        有两个学生，卡莱布和亨特，他们在课堂里争论关于应用实验室的项目。卡莱布说："啊，原来按钮和图片实际上是一样的！"。亨特回答道："它们完全不一样啊！\\r
        \\t解释一下卡莱布这么说的可能的原因。
      cspu5_assess1_shortresponse_2019: |-
        **简答题：**
        \\r
        \\r
        有两个学生，卡莱布和亨特，他们在课堂里争论关于应用实验室的项目。卡莱布说："啊，原来按钮和图片实际上是一样的！"。亨特回答道："它们完全不一样啊！\\r
        \\t解释一下卡莱布这么说的可能的原因。
      cspu5_assess1_shortresponse_exam_prep: |-
        **简答题：**
        \\r
        \\r
        有两个学生，卡莱布和亨特，他们在课堂里争论关于应用实验室的项目。卡莱布说："啊，原来按钮和图片实际上是一样的！"。亨特回答道："它们完全不一样啊！\\r
        \\t解释一下卡莱布这么说的可能的原因。
      cspu5_assess2_pseudocode2: |-
        一个_伪代码_程序从要求用户输入一个数值并存储在变量中开始。继续编写伪代码以完成此任务： \\r
        \\r
        如果这个小时在上课时间（8点到15点），那么显示"很高兴见到你！"，否则显示"该回家了！"\\r
        \\r
            DISPLAY (“Enter the hour of day (0-23)”)\\r
            hour
        \<- INPUT ()
      cspu5_assess2_pseudocode2_2018: |-
        一个_伪代码_程序从要求用户输入一个数值并存储在变量中开始。继续编写伪代码以完成此任务： \\r
        \\r
        如果这个小时在上课时间（8点到15点），那么显示"很高兴见到你！"，否则显示"该回家了！"\\r
        \\r
            DISPLAY (“Enter the hour of day (0-23)”)\\r
            hour
        \<- INPUT ()
      cspu5_assess2_pseudocode2_2019: |-
        一个_伪代码_程序从要求用户输入一个数值并存储在变量中开始。继续编写伪代码以完成此任务： \\r
        \\r
        如果这个小时在上课时间（8点到15点），那么显示"很高兴见到你！"，否则显示"该回家了！"\\r
        \\r
            DISPLAY (“Enter the hour of day (0-23)”)\\r
            hour
        \<- INPUT ()
      cspu5_assess2_pseudocode2_exam_prep: |-
        一个_伪代码_程序从要求用户输入一个数值并存储在变量中开始。继续编写伪代码以完成此任务： \\r
        \\r
        如果这个小时在上课时间（8点到15点），那么显示"很高兴见到你！"，否则显示"该回家了！"\\r
        \\r
            DISPLAY (“Enter the hour of day (0-23)”)\\r
            hour
        \<- INPUT ()
      cspu5_assess2_shortAnswer: |-
        **简答题：**
        什么时候程序员需要创建全局变量，而不是局部变量？
      cspu5_assess2_shortAnswer_2018: |-
        **简答题：**
        什么时候程序员需要创建全局变量，而不是局部变量？
      cspu5_assess2_shortAnswer_2019: |-
        **简答题：**
        什么时候程序员需要创建全局变量，而不是局部变量？
      cspu5_assess2_shortAnswer_exam_prep: |-
        **简答题：**
        什么时候程序员需要创建全局变量，而不是局部变量？
      cspu5_assess4_challenge: |-
        **挑战问题：**
        想象一下，有一个用英尺的高度列表，用来表示一座山的路的等高点。这幅图表示了这个数据的例子。例如： \\r
        \\r
        ![](https://images.code.org/8046cbdb63d7e7d68eb133c58362b099-image-1477862090668.png)\\r
        \\r
        一个程序员想写个程序来计算净海拔 - 一个旅行者上去下来的英尺的数量。例如，看看旅行的前三段，净海拔是7英尺（上3，上1， 下3）。 \\r
        \\r
        写下过程（用JavaScript或者伪代码），命名为processPath(data)，并且：\\r
        \\r
        \*
        接受一个海拔数据的列表作为参数\\r

        -   对于列表里的每个值\\r
            \\t\* 比较每个值和它下一个的差的绝对值。\\r
            \\t\* 将差值加到运行的总数上\\r
        -   返回旅行的总海拔\\r
            \\r
            再写这个过程时，你可以假设可以调用一个叫做_absDiff(a,b)_的函数。\\r
            \\r
            ![](https://images.code.org/0a7b91a830319d5d690ddf2efa264395-image-1477862205239.png)\\r
            \\r
            在下面写下完整的过程。
      cspu5_assess4_challenge_2018: |-
        **挑战问题：**
        想象一下，有一个用英尺的高度列表，用来表示一座山的路的等高点。这幅图表示了这个数据的例子。例如： \\r
        \\r
        ![](https://images.code.org/8046cbdb63d7e7d68eb133c58362b099-image-1477862090668.png)\\r
        \\r
        一个程序员想写个程序来计算净海拔 - 一个旅行者上去下来的英尺的数量。例如，看看旅行的前三段，净海拔是7英尺（上3，上1， 下3）。 \\r
        \\r
        写下过程（用JavaScript或者伪代码），命名为processPath(data)，并且：\\r
        \\r
        \*
        接受一个海拔数据的列表作为参数\\r

        -   对于列表里的每个值\\r
            \\t\* 比较每个值和它下一个的差的绝对值。\\r
            \\t\* 将差值加到运行的总数上\\r
        -   返回旅行的总海拔\\r
            \\r
            再写这个过程时，你可以假设可以调用一个叫做_absDiff(a,b)_的函数。\\r
            \\r
            ![](https://images.code.org/0a7b91a830319d5d690ddf2efa264395-image-1477862205239.png)\\r
            \\r
            在下面写下完整的过程。
      cspu5_assess4_challenge_2019: |-
        **挑战问题：**
        想象一下，有一个用英尺的高度列表，用来表示一座山的路的等高点。这幅图表示了这个数据的例子。例如： \\r
        \\r
        ![](https://images.code.org/8046cbdb63d7e7d68eb133c58362b099-image-1477862090668.png)\\r
        \\r
        一个程序员想写个程序来计算净海拔 - 一个旅行者上去下来的英尺的数量。例如，看看旅行的前三段，净海拔是7英尺（上3，上1， 下3）。 \\r
        \\r
        写下过程（用JavaScript或者伪代码），命名为processPath(data)，并且：\\r
        \\r
        \*
        接受一个海拔数据的列表作为参数\\r

        -   对于列表里的每个值\\r
            \\t\* 比较每个值和它下一个的差的绝对值。\\r
            \\t\* 将差值加到运行的总数上\\r
        -   返回旅行的总海拔\\r
            \\r
            再写这个过程时，你可以假设可以调用一个叫做_absDiff(a,b)_的函数。\\r
            \\r
            ![](https://images.code.org/0a7b91a830319d5d690ddf2efa264395-image-1477862205239.png)\\r
            \\r
            在下面写下完整的过程。
      cspu5_assess4_challenge_exam_prep: |-
        **挑战问题：**
        想象一下，有一个用英尺的高度列表，用来表示一座山的路的等高点。这幅图表示了这个数据的例子。例如： \\r
        \\r
        ![](https://images.code.org/8046cbdb63d7e7d68eb133c58362b099-image-1477862090668.png)\\r
        \\r
        一个程序员想写个程序来计算净海拔 - 一个旅行者上去下来的英尺的数量。例如，看看旅行的前三段，净海拔是7英尺（上3，上1， 下3）。 \\r
        \\r
        写下过程（用JavaScript或者伪代码），命名为processPath(data)，并且：\\r
        \\r
        \*
        接受一个海拔数据的列表作为参数\\r

        -   对于列表里的每个值\\r
            \\t\* 比较每个值和它下一个的差的绝对值。\\r
            \\t\* 将差值加到运行的总数上\\r
        -   返回旅行的总海拔\\r
            \\r
            再写这个过程时，你可以假设可以调用一个叫做_absDiff(a,b)_的函数。\\r
            \\r
            ![](https://images.code.org/0a7b91a830319d5d690ddf2efa264395-image-1477862205239.png)\\r
            \\r
            在下面写下完整的过程。
      cspu5_assess4_scoreToGrade: |-
        **简答题：**
        吉米写了一个过程scoreToGrade，它接收一个得分参数 - 一个问题的分数范围在0到100之间。这个过程应该返回一个字母的评分等级。他觉得这个程序时正确的，因为他用3，29和67进行了测试。萨丽觉得这个程序不正确，因为她测试了73和86。代码在语法上是正确的，程序运行时也不会发生错误，但是结果有时候是错的。为什么这个过程对吉米的测试能返回正确的值，但是萨丽的不能呢？ \\r
        \\r
            PROCEDURE scoreToGrade (percent)\\r
            {\\r
                IF
        (percent \< 60)\\r
                {\\r
                    RETURN ("F")\\r
                }\\r
                ELSE
        IF (percent >= 60)\\r
                {\\r
                \\tRETURN ("D")\\r
                }\\r
                ELSE
        IF (percent >= 70)\\r
                {\\r
                    RETURN ("C")\\r
                }\\r
                ELSE
        IF (percent >= 80)\\r
                {\\r
                    RETURN ("B")\\r
                }\\r
                ELSE\\r
                {\\r
                \\tRETURN
        ("A")\\r
                }\\r
            }
      cspu5_assess4_scoreToGrade_2018: |-
        **简答题：**
        吉米写了一个过程scoreToGrade，它接收一个得分参数 - 一个问题的分数范围在0到100之间。这个过程应该返回一个字母的评分等级。他觉得这个程序时正确的，因为他用3，29和67进行了测试。萨丽觉得这个程序不正确，因为她测试了73和86。代码在语法上是正确的，程序运行时也不会发生错误，但是结果有时候是错的。为什么这个过程对吉米的测试能返回正确的值，但是萨丽的不能呢？ \\r
        \\r
            PROCEDURE scoreToGrade (percent)\\r
            {\\r
                IF
        (percent \< 60)\\r
                {\\r
                    RETURN ("F")\\r
                }\\r
                ELSE
        IF (percent >= 60)\\r
                {\\r
                \\tRETURN ("D")\\r
                }\\r
                ELSE
        IF (percent >= 70)\\r
                {\\r
                    RETURN ("C")\\r
                }\\r
                ELSE
        IF (percent >= 80)\\r
                {\\r
                    RETURN ("B")\\r
                }\\r
                ELSE\\r
                {\\r
                \\tRETURN
        ("A")\\r
                }\\r
            }
      cspu5_assess4_scoreToGrade_2019: |-
        **简答题：**
        吉米写了一个过程scoreToGrade，它接收一个得分参数 - 一个问题的分数范围在0到100之间。这个过程应该返回一个字母的评分等级。他觉得这个程序时正确的，因为他用3，29和67进行了测试。萨丽觉得这个程序不正确，因为她测试了73和86。代码在语法上是正确的，程序运行时也不会发生错误，但是结果有时候是错的。为什么这个过程对吉米的测试能返回正确的值，但是萨丽的不能呢？ \\r
        \\r
            PROCEDURE scoreToGrade (percent)\\r
            {\\r
                IF
        (percent \< 60)\\r
                {\\r
                    RETURN ("F")\\r
                }\\r
                ELSE
        IF (percent >= 60)\\r
                {\\r
                \\tRETURN ("D")\\r
                }\\r
                ELSE
        IF (percent >= 70)\\r
                {\\r
                    RETURN ("C")\\r
                }\\r
                ELSE
        IF (percent >= 80)\\r
                {\\r
                    RETURN ("B")\\r
                }\\r
                ELSE\\r
                {\\r
                \\tRETURN
        ("A")\\r
                }\\r
            }
      cspu5_assess4_scoreToGrade_exam_prep: |-
        **简答题：**
        吉米写了一个过程scoreToGrade，它接收一个得分参数 - 一个问题的分数范围在0到100之间。这个过程应该返回一个字母的评分等级。他觉得这个程序时正确的，因为他用3，29和67进行了测试。萨丽觉得这个程序不正确，因为她测试了73和86。代码在语法上是正确的，程序运行时也不会发生错误，但是结果有时候是错的。为什么这个过程对吉米的测试能返回正确的值，但是萨丽的不能呢？ \\r
        \\r
            PROCEDURE scoreToGrade (percent)\\r
            {\\r
                IF
        (percent \< 60)\\r
                {\\r
                    RETURN ("F")\\r
                }\\r
                ELSE
        IF (percent >= 60)\\r
                {\\r
                \\tRETURN ("D")\\r
                }\\r
                ELSE
        IF (percent >= 70)\\r
                {\\r
                    RETURN ("C")\\r
                }\\r
                ELSE
        IF (percent >= 80)\\r
                {\\r
                    RETURN ("B")\\r
                }\\r
                ELSE\\r
                {\\r
                \\tRETURN
        ("A")\\r
                }\\r
            }
      cspu5_assess4_shortAnswerShopping: "**简答题：** 希西利娅想写一个应用来帮助管理管理一次到杂货铺的出行。这个应用要维护一个购物的清单（一个词语列表），即所有要买的东西。描述一下，希西利娅会在应用里用上另一个列表。还有什么信息需要被跟踪？描述一下这个列表在应用里会被如何使用和更新。\\\\r"
      cspu5_assess4_shortAnswerShopping_2018: "**简答题：** 希西利娅想写一个应用来帮助管理管理一次到杂货铺的出行。这个应用要维护一个购物的清单（一个词语列表），即所有要买的东西。描述一下，希西利娅会在应用里用上另一个列表。还有什么信息需要被跟踪？描述一下这个列表在应用里会被如何使用和更新。\\\\r"
      cspu5_assess4_shortAnswerShopping_2019: "**简答题：** 希西利娅想写一个应用来帮助管理管理一次到杂货铺的出行。这个应用要维护一个购物的清单（一个词语列表），即所有要买的东西。描述一下，希西利娅会在应用里用上另一个列表。还有什么信息需要被跟踪？描述一下这个列表在应用里会被如何使用和更新。\\\\r"
      cspu5_assess4_shortAnswerShopping_exam_prep: "**简答题：** 希西利娅想写一个应用来帮助管理管理一次到杂货铺的出行。这个应用要维护一个购物的清单（一个词语列表），即所有要买的东西。描述一下，希西利娅会在应用里用上另一个列表。还有什么信息需要被跟踪？描述一下这个列表在应用里会被如何使用和更新。\\\\r"
      debrief-monday: |-
        # 第1天: 今日结束后的总结

        -   领导者今天有哪些收获 (例如，老师的感悟和需求，作为引导员一起工作，维持了群体间的健康关系，等)？
        -   有没有对教学方法的改进计划？如果有，要对哪里进行改动，为什么要这样改？
      debrief-thursday: |-
        # 第4天: 今日结束后的总结

        -   领导者今天有哪些收获 (例如，老师的感悟和需求，作为引导员一起工作，维持了群体间的健康关系，等)？
        -   有没有对教学方法的改进计划？如果有，要对哪里进行改动，为什么要这样改？
      debrief-tuesday: |-
        # 第2天: 今日结束后的总结

        -   领导者今天有哪些收获 (例如，老师的感悟和需求，作为引导员一起工作，维持了群体间的健康关系，等)？
        -   有没有对教学方法的改进计划？如果有，要对哪里进行改动，为什么要这样改？
      debrief-wednesday: |-
        # 第3天: 今日结束后的总结

        -   领导者今天有哪些收获 (例如，老师的感悟和需求，作为引导员一起工作，维持了群体间的健康关系，等)？
        -   有没有对教学方法的改进计划？如果有，要对哪里进行改动，为什么要这样改？
      engagement-monday: |-
        # 第1天: 参与

        分析今天参与者所面临的挑战。

        -   挑战是什么？
        -   引导员是怎样应对它的？
        -   在你引导的课程中如何应对挑战？
      engagement-thursday: |-
        # 第4天: 参与

        分析一个参与者所面临的挑战

        \*这挑战是什么？
        \*引导员是怎样应对它的？
        \*换位思考，如果作为引导员，你会如何应对它？
      engagement-tuesday: |-
        # 第2天: 参与

        分析今天参与者所面临的挑战。

        -   挑战是什么？
        -   引导员是怎样应对它的？
        -   在你引导的课程中如何应对挑战？
      engagement-wednesday: |-
        # 第3天: 参与

        分析一个参与者所面临的挑战

        \*这挑战是什么？
        \*引导员是怎样应对它的？
        \*换位思考，如果作为引导员，你会如何应对它？
      expresslink: |-
        <a href="https://studio.code.org/s/express"><img
        src="https://images.code.org/32b135ea9a16684b30f89ffe0f6606b1-image-1507039514762.05.01
        AM.png"/><img src="https://images.code.org/cfea3adf1aec120e23e039ed06856f6f-image-1507039555039.05.48
        AM.png"/></a>
      feel-monday: |-
        # 第1天: 感受

        尝试用几个词或句描述参与者今天的总体感受(例如，困惑，忙碌，焦虑，等)

        -   哪些事情促使大家有了这样的情绪？
        -   从你的视角来看，今天，引导员做了什么来处理它们或支持参与者的体验？
      feel-thursday: |-
        # 第4天: 感受

        尝试用几个词或句描述参与者今天的总体感受(例如，困惑，忙碌，焦虑，等)

        -   哪些事情促使大家有了这样的情绪？
        -   从你的视角来看，今天，引导员做了什么来处理它们或支持参与者的体验？
      feel-tuesday: |-
        # 第2天: 感受

        尝试用几个词或句描述参与者今天的总体感受(例如，困惑，忙碌，焦虑，等)

        -   哪些事情促使大家有了这样的情绪？
        -   从你的视角来看，今天，引导员做了什么来处理它们或支持参与者的体验？
      feel-wednesday: |-
        # 第3天: 感受

        尝试用几个词或句描述参与者今天的总体感受(例如，困惑，忙碌，焦虑，等)

        -   哪些事情促使大家有了这样的情绪？
        -   从你的视角来看，今天，引导员做了什么来处理它们或支持参与者的体验？
      frozen circle function in circle: 现在让我们创建20个交叠的圆圈，在每圆圈之间转18度。
      frozen circle function with parameter: 这里有一个“创建圆圈”的模块，可以画不同大小的圆圈。你可以用它来创建一个5像素的小圆圈和10像素的大圆圈吗?
      frozen circle function: 使用新的"创建一个圆"块来创建 10 个相互重叠的圆圈。画圈之间别忘了跳一下哦。
      frozen circle: 圆形是一种特殊的形. 你可以计算出什么号码能取代问号来画圆形吗?
      frozen cross rotate dense: 让我们重复90次！ 90进入360是多少次？提示：这是一个非常小的数目。
      frozen cross rotate: 现在请尝试重复 10 次。每个行之间你需要转多少度？
      frozen cross: 将这些命令放到“重复”模块里来画一个加号。你注意到爱莎可以前后移动了吗？
      frozen diamond mini snowflake: 你知道每个雪花的形状都不同吗？让我们用另一个循环来重复平行四边形4次来创建一个新的雪花。在每个平行四边形之间转90度。
      frozen diamond snowflake: 現在，让我们创建一个新的雪花, 使用“重复”块来重复一个平行四边形10次，把每一个平行四边形之间转右36度
      frozen diamond: 将这些模块放到一个重复模块里来创建一个平行四边形。它和长方形很像，但是角度不同。这个平行四边形的角是60度和120度，而正方形的所有角度都是90度。
      frozen freeplay: 你已经正式成为艺术大师！创建一个冬季仙境。
      frozen perpendicular: 现在让我们看看我们是否可以画两条直线，前提是彼此必须存着90度角的相位关系。您将需要使用“转向”块和“移动”块。
      frozen snowflake branch: 试试用“创建雪花分支”模块来创建三个分支，来让它看起来像一片雪花。
      frozen snowflake full: 现在，让我们重复8次，做一个漂亮的雪花!
      frozen snowflower: 错综复杂的雪花模式可以用非常简单的形状来创建。 你可以重复5个大小为5的圆圈和5个大小为10的圆圈来做成一个模式吗?
      frozen square iterative: 我们好像已经成功地绘制了半个正方形。来，我们一起把四行条线组合起来绘制一个完整的正方形。
      frozen square loop 3x: 让我们绘制三个正方形，每绘制一个正方形后，别忘了先转120度后再继续绘制下一个正方形。
      frozen square loop: 你好！我是艾伦代尔的安娜公主！我们一起应用“重复“块绘制一个正方形。这样一来，我们可以减少必须使用的代码块。你觉得“重复”块必须循环多少次（???）才能让里面的代码块绘制出一个正方形呢？
      frozen square snowflake: 你可以试试绘制一朵雪花。用“重复”块绘制10个正方形，而且记得在绘制成每个正方形移之后，先把它移转36度后才开始画下一个正方形。
      gl jr clone me ram2: 克隆这一关，并制作自己的程序！
      gl jr clone me: 克隆这一关，并制作自己的程序！
      grade1_adventurer_loops2: 罗瑞尔怎样只用`E -->`模块来收集所有5堆金子？
      grade1_artist_loops6: "**挑战：**这是一个隐藏的花园！让我们四处走一走。"
      grade2_CaringForNewPet_0: 对于这个关卡, 把所有的方块拖在一起, 并点击 "运行" 开始!
      grade2_CaringForNewPet_1: 从工具箱中拖出另一个`向前移动`模块来完成代码。
      grade2_CaringForNewPet_11: _"保持冷静，帮我找到那只坏猪。"_
      grade2_CaringForNewPet_2: |-
        _"这只猪把我的羽毛弄皱了。"_\\r
        \\r
        这里有一个额外的模块会让小鸟坠落。\\r
        将其拖回工具箱来扔掉它。
      grade2_CaringForNewPet_2courseC_maze_programming3: |-
        _"这只猪把我的羽毛弄皱了。"_\\r
        \\r
        这里有一个额外的模块会让小鸟坠落。\\r
        将其拖回工具箱来扔掉它。
      grade2_MakeDogTag_1: |-
        -   "让我们为我的宠物怪兽做一个笼子!"\* \\r
            \\r
            将模块拖到屏幕上, 让艺术家在图片中的灰色线条上绘画。 \\r
            (每行100像素长)
      grade2_MakeDogTag_2: |-
        _"这艘宇宙飞船需要一扇窗户!"_ \\r
        \\r
        正方形内的每条边是100像素，所有的角度都是90度。
      grade2_MakeDogTag_4: |-
        _"也许我们应该为我们的每个宠物做一个标签, 以防他们走丢了!"_ \\r
        \\r
        在外部绘制长方形来完成此标签。 \\r
        (长边分别为200像素, 短边每个都是100像素)
      grade2_MakeDogTag_5: |-
        _"现在为贝儿做一个标签!“_ \\r
        \\r
        绘制200像素边长的菱形。
      grade2_MakeDogTag_7: |-
        再来一个标签。这是圆周率的一个三角形。 \\r
        (每边为150像素)
      grade2_MakeDogTag_8: 现在，让我们把这一堆V用循环连在一起。
      grade2_MakeDogTag_9: |-
        是时候做一些漂亮的东西了！
        \\r
        \\r
        重构刚刚那一关的代码，但是这次，加一个左转30度到循环里。现在，重复24次，而不是8次。
      grade2_MakeDogTag_BFP: |-
        _"嗨, 我是个艺术家。你可以编写代码来让我画几乎任何东西。“_ \\r
        \\r
        摆弄工具箱中的模块看看它们是做什么的！
      grade2_PuppyLoops_10: |-
        我的老师说应该有始有终！\\r
        \\r
        帮我完成我的风车。你能找出哪里错了吗？
      grade2_PuppyLoops_2: |-
        突然，一个神奇的模块出现了！用“重复”模块，你能一次次的循环代码。\\r
        \\r
        你能通过创建一个重复循环，里面只包含一个“向前移动”模块，来抓住那只猪吗？
      grade2_PuppyLoops_4: 在这道题里，两个“重复”循环能够让你用最少数量的模块来到达猪那里！
      grade2_PuppyLoops_8: |-
        这只猫的三条胡须的代码是错误的。
        \\r
        \\r
        修改代码来画出一样长的胡须。
      grade2_PuppyLoops_9: |-
        代码里面的这个“C”看起来像是画反了！\\r
        \\r
        你能把它再改成“C”吗？
      grade2_collector_10: |-
        快要完成了！\\r
        \\r
        收集尽可能多的宝藏来完成这个阶段！
      grade2_collector_10_2018: |-
        快要完成了！\\r
        \\r
        收集尽可能多的宝藏来完成这个阶段！
      grade2_collector_10_2019: |-
        快要完成了！\\r
        \\r
        收集尽可能多的宝藏来完成这个阶段！
      grade2_collector_2: 把罗瑞尔移到宝藏上, 然后用`收集`来捡起来。
      grade2_collector_3: |-
        _"顺序很重要！"_\\r
        \\r
        你需要的模块已经在工作区了，但还没有连起来。将这些模块按顺序连接起来，来收集所有的金子并通过这关。
      grade2_collector_4: 顺序很重要！你需要的模块已经在工作区了，但还没有连起来。将这些模块按顺序连接起来，来收集所有的金子并通过这关。
      grade2_collector_5: |-
        _"帮我收集每个金币！"_\\r
        \\r
        这些模块的顺序错了。你能修好它们吗？
      grade2_collector_6: |-
        "帮我收集所有的宝藏！"\\r
        \\r
        这些模块的顺序错了。重新排列它们来收集所有的宝藏。
      grade2_collector_7: |-
        **挑战：** 这里怎么了？\\r
        \\r
        即使我们将顺序都排好了，还会有些丢了。\\r
        使用工具箱中的模块来收集所有的宝藏。
      grade2_collector_8: _"继续保持良好的工作! 帮我收集所有的金币。"_
      grade2_collector_9: _"让我们得到所有的金币！_
      grade2_collector_9a: "\\*\\* 挑战: \\*\\* 收集所有的硬币。"
      grade2_collector_A: 帮助罗瑞尔收集所有的宝藏。
      grade2_collector_A_2018: 帮助罗瑞尔收集所有的宝藏。
      grade2_collector_A_2019: 帮助罗瑞尔收集所有的宝藏。
      grade2_collector_pre1: |-
        _"嗨，我是罗瑞尔。今天，我到狗公园里寻宝！"_\\r
        \\r
        试试这些模块来看看是否你能帮助罗瑞尔收集一些金子。
      grade2_maze_debuggingFP: _"现在，用任何方法让我偷偷到达猪那里！"_
      grade2_playlab_project_3: |-
        如果企鹅跑到了恐龙（演员1）那里，你能让它说"噢！"，并且播放"命中"的声音吗？\\r
        \\r
        当你写完代码, 请运行这个游戏让它发生.
        \\r
        ![](https://images.code.org/a634f249021651f60a1acf37bf78d07d-image-1475342557950.gif)
      grade2_puppy_loops2: |-
        突然，一个神奇的模块出现了！用“重复”模块，你能一次次的循环代码。\\r
        \\r
        你能通过创建一个重复循环，里面只包含一个“向前移动”模块，来抓住那只猪吗？
      grade2_puppy_loops3: |-
        _"帮我到猪哪里！"_\\r
        \\r
        通过创建一个循环来通关！
      grade2_puppy_loops4: 在这道题里，两个“重复”循环能够让你用最少数量的模块来到达猪那里！
      grade2_puppy_loops5: _"让我用最快的方法到达猪那里！"_
      grade2_puppy_loops6: |-
        _"这只猪弄乱了我的羽毛！"_\\r
        \\r
        循环里能放不只一个模块！你能循环这个序列吗？
      grade2_puppy_loops7: |-
        _"让我到猪那里！"_\\r
        \\r
        用你在别的关卡学到的知识！
      grade3_ConditionalsElse_1: |-
        云朵挡住了我的视线！
        \\r
        \\r
        检查一下云下面是否有花，然后只从有花的地方收集花蜜。\\r
        小心，它是变化的！
      grade3_ConditionalsElse_2: |-
        更多的云！\\r
        \\r
        检查每朵云下面是不是藏着花。如果是的话，再采集花蜜。\\r
        \\r
        记住：
        不是所有云下面都是一样的东西！
      grade3_ConditionalsElse_4: |-
        有时云下面是花，有时云下面是蜂蜜！\\r
        \\r
        使用“如果/否则”模块，如果是一朵花，就收集花里的花蜜。\\r
        否则酿蜂蜜（因为它是蜂巢）。
      grade3_ConditionalsElse_5: |-
        在云底下要么是花，要么是蜂巢！\\r
        \\r
        如果是花，用“如果/否则”模块来收集花蜜。\\r
        否则酿蜂蜜（因为它是蜂巢）。
      grade3_ConditionalsElse_6: |-
        我不确定这朵花有多少花蜜， 但我知道它可能有1个，两个或3个花蜜。\\r
        \\r
        将一个“如果/否则”模块和另一个“如果/否则”模块混合在一起，成为了一个“如果，否则如果，否则”模块，来采集花里的所有花蜜。\\r
        \\r
        记住，每次你运行谜题时，花蜜的数量都会变化的！
      grade3_ConditionalsElse_7: |-
        这些花里可能有一个，两个或三个花蜜。
        \\r
        \\r
        完成“检查紫色花朵”的函数，然后用它来从所有花里收集花蜜。
      grade3_ConditionalsElse_8: |-
        完成“检查花朵，酿造蜂蜜”的函数。\\r
        \\r
        你的函数应该检查紫色的花是否有3个，2个或1个花蜜，然后收集所有的花蜜。\\r
        然后，往前移动并酿造蜂蜜。
      grade3_ConditionalsElse_9: |-
        评估：这朵云要么藏着一朵有一个花蜜的花，或者有一个蜂蜜的蜂蜜罐。
        \\r
        \\r
        完成这个“采集花蜜或酿造蜂蜜”的函数，然后调用它来采集所有花蜜，并且酿蜂蜜。\\r
      grade3_ConditionalsElse_TeacherIDo: |-
        在云底下要么是花，要么是蜂巢！\\r
        \\r
        如果是花，用“如果/否则”模块来收集花蜜。\\r
        否则酿蜂蜜（因为它是蜂巢）。
      grade3_Conditionals_1: |-
        我是一只饥饿的蜜蜂！\\r
        \\r
        \\r
        帮我用最少的模块从花朵中采集花蜜。
      grade3_Conditionals_10: |-
        这里有好多！\\r
        \\r
        用你学到的知识来收集所有的花蜜，并制作蜂蜜。
      grade3_Conditionals_11 BAD: 评估 - 用“当”循环来收集所有花蜜。
      grade3_Conditionals_11: |-
        让我们把东西都放到一起！\\r
        \\r
        用你学到的知识只从有花蜜的花里收集，用的模块越少越好。\\r
        \\r
        别忘了最后制作蜂蜜。
      grade3_Conditionals_12: |-
        这个像阶梯一样的图形看起来很熟悉。\\r
        \\r
        你能用尽量少的模块从花里收集一些花蜜吗？
      grade3_Conditionals_13: |-
        评估：收集所有的花蜜。\\r
        小心，不要采集没有花蜜的紫花。
      grade3_Conditionals_2: "查看所有的花蜜！\\\\r\n\\\\r\n帮我用尽可能少的模块来收集花蜜并酿成蜂蜜。  "
      grade3_Conditionals_3: |-
        这些神奇的紫花会变化！\\r
        \\r
        每次你尝试这个关卡时，紫花有可能由1个花蜜，或根本没有花蜜...但是你在运行代码之前是不知道的！\\r
        \\r
        小心不要从没有花蜜的紫花里收集花蜜。\\r
        你必须先用“如果有花蜜”模块，来检查花蜜数量是否等于1.
      grade3_Conditionals_8: "我想知道那里有什么！\\\\r\n\\\\r\n帮我飞到院子里，只从有花蜜的花里收集花蜜。 "
      grade3_Debugging_1: |-
        这些模块真的让我很困扰。\\r
        \\r
        改正错误，从而能够采集所有花蜜。
      grade3_Debugging_10: |-
        **挑战：** _"这关让我疯狂！"_\\r
        \\r
        你需要的所有命令都在这里了...现在用你的调试技能来找出如何解决这个问题。
      grade3_Debugging_11: "**挑战：**修复错误来采集所有花蜜并酿造所有蜂蜜。"
      grade3_Debugging_2: |-
        _"这些模块真的让我很困扰！"_\\r
        \\r
        改正错误，从而能够采集所有花蜜。
      grade3_Debugging_3: |-
        _"哎呀，被蛰了！"_\\r
        \\r
        改正错误，从而能够采集所有花蜜。
      grade3_Debugging_4: |-
        _"这些模块真的让我很困扰！"_\\r
        \\r
        改正错误，从而能够采集所有花蜜，并酿造所有的蜂蜜。
      grade3_Debugging_5: |-
        那朵花看起来很好吃！\\r
        \\r
        改正错误，从而能够采集所有花蜜。\\r
        你可以用“运行”和“下一步”了。
      grade3_Debugging_6: |-
        真是一个甜蜜的挑战！\\r
        \\r
        改正错误，从而能够采集所有花蜜。
      grade3_Debugging_8: |-
        _"这会很甜！"_\\r
        \\r
        修复错误来酿蜂蜜。
      grade3_Debugging_9: |-
        有点耐心！\\r
        \\r
        你需要修复这个程序的一些问题，，从而能够采集所有花蜜，并酿成蜂蜜。
      grade3_Loops_10: |-
        忙碌的蜜蜂！\\r
        \\r
        帮助蜜蜂用尽可能少的模块来收集花蜜并酿蜂蜜。
      grade3_Loops_11: |-
        这条路的形状和其它的不一样。\\r
        \\r
        你能用尽量少的模块来收集所有花蜜吗？
      grade3_Loops_3: 用一个“重复”循环来收集所有花蜜。
      grade3_Loops_4: 现在，用“重复”模块来收集花蜜，并酿造蜂蜜。
      grade3_Loops_6: |-
        这个谜题中的循环应该进行多少次？\\r
        \\r
        循环是你的朋友！用一些循环来减少模块，并完成这道谜题。
      grade3_Loops_7: |-
        这些花看上去很好吃！\\r
        \\r
        用尽可能少的模块，从每朵花里收集蜂蜜。
      grade3_Loops_TeacherIDo: |-
        这些花看上去很好吃！\\r
        \\r
        用尽可能少的模块，从每朵花里收集蜂蜜。
      grade3_RunningFarm_10: 收集所有的玉米和莴苣，然后捡起南瓜。
      grade3_RunningFarm_11a: 收集所有的玉米和莴苣，然后捡起南瓜。
      grade3_RunningFarm_6: |-
        _"让我们再多走一步！"_\\r
        \\r
        你能想出怎么收获南瓜吗？确保沿途收获了所有的玉米！
      grade3_RunningFarm_7: "**挑战：**收集所有的玉米和莴苣，然后捡起南瓜。"
      grade3_RunningFarm_9: |-
        你能帮我最后一次吗？
        我想在田里长满杂草前，收集尽可能多的庄稼。
        你觉得我们能得到多少？
      grade3_bee_conditionals_new2a: |-
        在这一关中，我们知道每朵花都有正好一个花蜜，但是花没有均匀的分布。\\r
        \\r
        用尽可能少的模块采集所有花蜜。
      grade3_bee_conditionals_new3b: |-
        即使你知道每个点会有什么，条件也会有帮助！\\r
        \\r
        收集所有的花蜜，并酿造所有的蜂蜜。
      grade3_bee_conditionals_quantum1: |-
        _"这朵云挡住了我的视线！"_\\r
        \\r
        检查是否云下面有花。如果有花，采花蜜。
      grade3_bee_conditionals_quantum2: |-
        更多的云！\\r
        \\r
        检查每朵云下面是不是藏着花。如果是的话，再采集花蜜。\\r
        \\r
        记住：
        不是所有云下面都是一样的东西！
      grade3_maze_Loop1: '评估：只用5个模块帮我到达太阳花！ '
      grade3_maze_loops2: '用尽可能少的模块让僵尸到达向日葵！  '
      grade3_maze_loops2a: |-
        _"僵尸饿了！"_\\r
        \\r
        用尽可能少的模块让僵尸到达向日葵。
      grade3_maze_loops3: |-
        _"一定要吃到向日葵！"_\\r
        \\r
        用仅有的模块来让僵尸到达向日葵。
      grade3_maze_nestedLoops2: |-
        突然，一个神奇的模块出现了！用“重复”模块，你能一次次的循环代码。\\r
        \\r
        你能通过创建一个重复循环，里面只包含一个“向前移动”模块，来抓住那只猪吗？
      grade3_maze_nestedLoops3: 帮我到达猪那里！这次只能用一个“向前移动”模块。
      grade3_maze_nestedLoops4: 在这道题里，两个“重复”循环能够让你用最少数量的模块来到达猪那里！
      grade4_arist_nested_loop_circles1: 评估：用嵌套循环来完成这幅画。
      grade4_arist_nested_loop_flags1: 循环下面的代码来创建一个风车。
      grade4_arist_nested_loop_polygons1: |-
        循环这个图形10次。\\r
        \\r
        你的循环里每次需要转多少度呢？
      grade4_arist_nested_loop_polygons2: "循环这个图形6次。\\\\r\n\\\\r\n你的循环里每次需要转多少度呢？ "
      grade4_arist_nested_loop_squares1: |-
        你能用嵌套循环画出人行道上的十个正方形吗？\\r
        \\r
        每个正方形是30像素。
      grade4_arist_nested_loop_triangles2: "现在，把这个循环放到另一个循环里，来画出10个三角形。\\\\r\n这就叫做嵌套循环。  "
      grade4_arist_nested_loop_triangles3: 你可以通过循环三角形代码来画一个六边形吗?
      grade4_arist_nested_loop_triangles4: 在鳄鱼嘴里画上牙齿！
      grade4_arist_nested_loop_triangles5: |-
        通过将开始的代码嵌套到另一个循环中来画一个太阳。\\r
        \\r
        如果要画出这个很酷的中空设计，你需要在转弯前往前跳三角形长度那么多。
      grade4_arist_nested_loop_triangles6: 你能用嵌套循环画出36个三角形吗？
      grade4_artist_functions1: |-
        _"我僵尸艺术家。我喜欢画！"_\\r
        \\r
        帮助僵尸用边长100像素的正方形画眼镜。  \\r
        镜片间的桥是75像素长。\\r
        \\r
      grade4_artist_functions2: |-
        函数能让你定义新的模块。\\r
        \\r
        我们将画正方形的模块挪到了一个叫做“画一个正方形”的函数里。这次，用“画一个正方形”函数来画个眼镜吗。
        \\r
        \\r
        正方形间隔75像素。
      grade4_artist_functions2a: |-
        只用提供的模块创建这幅图。\\r
        \\r

        -   为了画出钻石，你需要交替旋转60度和120度。
      grade4_artist_functions3a: |-
        只用提供的模块创建这幅图。\\r
        \\r

        -   为了画出钻石，你需要交替旋转60度和120度。
      grade4_artist_functions3b: |-
        这次，用8个25像素边长的六边形画线。\\r
        \\r

        -   为了画出每个六边形，重复6次，每次转60度。\\r
        -   为了画出一个钻石，你需要交替转向60度和120度。
      grade4_artist_functionsChallenge0: "**挑战：**创建你能想到的尽可能多的函数来画出这个50像素的正方形的图案。"
      grade4_artist_functions_challenge: "**函数的超级挑战：**用提供的函数来画四行六边形。要注意是怎样让偶数行转移到右边的？"
      grade4_artist_functions_challenge2: "**函数的超级挑战：**用提供的函数来画四行六边形。要注意是怎样让偶数行转移到右边的？"
      grade4_artist_functions_stars0: |-
        我们很快就会回到函数部分。让我们先休息一下，练习画这个星星。\\r
        \\r
        可以通过增加一个重复循环来画这幅图。
      grade4_artist_functions_stars1: |-
        现在，你已经能画一个星星了，试着画4个星星！\\r
        \\r

        -   每个行星的分支是25像素长\\r
        -   在分支之间转45度\\r
        -   在每个星星间跳100像素
      grade4_artist_functions_stars2: |-
        什么时候画三个星星会比画4个难？当你需要跳过月亮的时候！\\r
        \\r
        只画出三个星星来完成这关。
      grade4_artist_functions_windows0: |-
        做得很好！ \\r
        \\r
        通过画一个正方形来制作这个窗户，然后在画另一个前转90度，以此类推。
      grade4_artist_functions_windows2: |-
        让我们将画窗口的代码拿走，并增加到函数`画一个窗户`中。现在只要需要，就能调用这个函数了，还不用再写一遍这个代码。
        \\r
        \\r
        <img src="https://images.code.org/57c016bcafe697e6ddb196e0f13c9ef9-image-1468602046641.gif"
        width="450px"/>\\r
        <br/> \\r
        \\r
        试着通过创建`画一个窗户`函数来通过这关，并且调用它5次。小心门！\\r
        \\r

        -   上面的窗户相互分隔50像素。 \\r
        -   下面的窗户离上面的100像素。
      grade4_artist_nestedLoops_challenge: "<img src=\"https://images.code.org/c876143212d195192013582f57c6df04-image-1445625392518.36.18.png\" width=\"150px;\" style=\"mix-blend-mode: multiply;\" />\n\n**游戏时间：** 这是一个有趣的形状的代码。\n\n当你重复它多次，在每个迭代间转向时，会发生什么？ \n\n注意形状中的这些转向最多增加_420度_。这意味着，当小艺术家完成绘画时，他朝向的方向和开始时不同。新方向和开始的方向相比，会恰好往_右_ _60度_。\n\n<hr/>\n\n<h4>\n<details>\n<summary><b>重复4次</b></summary>\n<br/>\n如果你想只重复4次来画一个整圆，你需要让小艺术家每次转**360度/4 = 90度**。通过加入一个` 向右转30度`模块到外层循环来实现（因为**60+30=90**。）\n<br/>\n<img src=\"https://images.code.org/9da67a628ed72e87520a02a0d917e2af-image-1440132370113.44.12.png\"\nwidth=\"500px;\" style=\"mix-blend-mode: multiply;\" />\n<br/><br/>\n</details>\n</h4>\n\n<h4>\n<details>\n<summary><b>重复6次</b></summary>\n<br/>\n当你重复这个形状6次，能一共转**6x60度**，正好是一整个圆的**360 度**。\n<img\nsrc=\"https://images.code.org/b79f96b87097ce3afe8a6a5608d04e36-image-1440132287456.44.27.png\" width=\"500px;\" style=\"mix-blend-mode:\nmultiply;\" />\n</details>\n</h4>\n\n<h4>\n<details>\n<summary><b>重复12次</b></summary>\n<br/>\n如果你重复这个图12次，每次需要转**360度/12=30度**。这意味着你要在重复形状前，用`向左转30度`来调整一下小艺术家。<br/><br/>\n<img src=\"https://images.code.org/ad254952522674496918561096817c66-image-1440132424792.44.01.png\" width=\"500px;\" style=\"mix-blend-mode: multiply;\" />\n\n</details>\n</h4>\n\n现在，到你了！你能通过重复开始的形状来重新创建每个图片吗？  "
      grade4_artist_nestedLoops_challenge2: "<img src=\"https://images.code.org/6cac10470af71bbb5d75bf5e2669046f-image-1439939145211.png\"\nwidth=\"200px\"/>\\\\r\n\\\\r\n挑战的时候到了！\\\\r\n\\\\r\n这个设计只使用了你见过的模块。你能想出如何再次创建出它吗？随便试错。没有人期待第一次就能做好。\\\\r\n\\\\r\n重复的形状基本和上一关的一样，只有第一个的循环的长度要小一点。 "
      grade4_artist_nested_loop_circles1: 评估：用嵌套循环来完成这幅画。
      grade4_artist_nested_loop_flags1: 循环下面的代码来创建一个风车。
      grade4_artist_nested_loop_polygons1: |-
        循环这个图形10次。\\r
        \\r
        你的循环里每次需要转多少度呢？
      grade4_artist_nested_loop_squares1: |-
        你能用嵌套循环画出人行道上的十个正方形吗？\\r
        \\r
        每个正方形是30像素。
      grade4_artist_nested_loop_triangles1: |-
        完成代码来画出这些三角形。第一个三角形已经帮你画好了。提示：三个三角形一共旋转了360度。\\r
        \\r
      grade4_artist_nested_loop_triangles5: |-
        通过将开始的代码嵌套到另一个循环中来画一个太阳。\\r
        \\r
        如果要画出这个很酷的中空设计，你需要在转弯前往前跳三角形长度那么多。
      grade4_artist_nested_loop_triangles6: 你能用嵌套循环画出36个三角形吗？
      grade4_artist_parameters_squares1: |-
        点击“编辑”来填写这个`draw a square`（画一个正方形）函数的定义，并且加一个参数。\\r
        它应该像三角形一样有一个长度参数。\\r
        \\r
        **这次，画三个正方形：**边长分别为25，50，75像素。它们的左下角之间相隔100像素。
      grade4_artist_parameters_triangles2: 你注意到这些函数模块有什么不同吗？点击“运行”来看看会发生什么。
      grade4_artist_parameters_triangles2b: |-
        你能完成这幅画吗？
        \\r
        \\r
        每个三角形的边长比前一个多25像素。\\r
        第一个三角形的边长是25像素。
      grade4_artist_parameters_triangles3: |-
        你能完成这幅画吗？
        \\r
        \\r
        每个三角形的边长比前一个多25像素。\\r
        第一个三角形的边长是25像素。
      grade4_artist_parameters_triangles4: |-
        这个三角形的代码被破坏了。\\r
        \\r
        你能修好这个函数，让它能画边长25，50，75像素的三角形吗？
      grade4_artist_parameters_trianglesx: |-
        你能完成这幅画吗？
        \\r
        \\r
        每个三角形的边长比前一个多25像素。\\r
        第一个三角形的边长是25像素。
      grade4_bee_conditionals_nested_loops: |-
        评估：收集所有的花蜜。\\r
        小心，不要采集没有花蜜的紫花。
      grade4_bee_conditionals_new1: |-
        评估：收集所有的花蜜。\\r
        小心，不要采集没有花蜜的紫花。
      grade4_bee_conditionals_quantum1: |-
        云朵挡住了我的视线！
        \\r
        \\r
        检查一下云下面是否有花，然后只从有花的地方收集花蜜。\\r
        小心，它是变化的！
      grade4_bee_conditionals_quantum2: |-
        更多的云！\\r
        \\r
        检查每朵云下面是不是藏着花。如果是的话，再采集花蜜。\\r
        \\r
        记住：
        不是所有云下面都是一样的东西！
      grade4_bee_conditionals_quantum4: |-
        有时云下面是花，有时云下面是蜂蜜！\\r
        \\r
        使用“如果/否则”模块，如果是一朵花，就收集花里的花蜜。\\r
        否则酿蜂蜜（因为它是蜂巢）。
      grade4_bee_conditionals_quantum5: |-
        在云底下要么是花，要么是蜂巢！\\r
        \\r
        如果是花，用“如果/否则”模块来收集花蜜。\\r
        否则酿蜂蜜（因为它是蜂巢）。
      grade4_bee_functions2: |-
        函数能执行多个模块来完成一个任务。\\r
        \\r
        使用`采2个花蜜`函数来从每朵花采花蜜。
      grade4_bee_functions3: 构建`获取5个`函数, 以便在这个关卡中使用。
      grade4_bee_functions4: |-
        `移动并获得花蜜`函数会让蜜蜂转身并收集花蜜，然后会让蜜蜂返回出发的地方。\\r
        \\r
        用`移动并获得花蜜`函数收集所有的花蜜。
      grade4_bee_functions9: |-
        **挑战：** 每次你运行这一关时，每朵花都有不同数量的花蜜。   \\r
        \\r
        创造一个函数，从每朵花里收集所有花蜜。
      grade4_bee_nestedLoops1: "_\"你能相信这些都是花吗？\"_\\\\r\n\\\\r\n从每朵花收集所有的花蜜。 "
      grade4_bee_nestedLoops2: "**挑战：** 找出如何只使用现有模块得到所有的花蜜。"
      grade4_bee_nestedLoops4: '从所有的花里收集花蜜，然后在蜂窝那里酿花蜜。 '
      grade4_frozen_freeplay: 你已经正式成为艺术大师！创建一个冬季仙境。
      grade4_frozen_functions0: 圆形是一种特殊的形. 你可以计算出什么号码能取代问号来画圆形吗?
      grade4_frozen_functions1a: 使用新的"创建一个圆"块来创建 10 个相互重叠的圆圈。画圈之间别忘了跳一下哦。
      grade4_frozen_functions2: 现在让我们创建20个交叠的圆圈，在每圆圈之间转18度。
      grade4_frozen_functions3: 这里有一个“创建圆圈”的模块，可以画不同大小的圆圈。你可以用它来创建一个5像素的小圆圈和10像素的大圆圈吗?
      grade4_frozen_functions4: 错综复杂的雪花模式可以用非常简单的形状来创建。 你可以重复5个大小为5的圆圈和5个大小为10的圆圈来做成一个模式吗?
      grade4_frozen_nested_loop_diamonds2: 你知道每个雪花的形状都不同吗？让我们用另一个循环来重复平行四边形4次来创建一个新的雪花。在每个平行四边形之间转90度。
      grade4_frozen_nested_loop_diamonds3: 現在，让我们创建一个新的雪花, 使用“重复”块来重复一个平行四边形10次，把每一个平行四边形之间转右36度
      grade4_frozen_square: 你好！我是艾伦代尔的安娜公主！我们一起应用“重复“块绘制一个正方形。这样一来，我们可以减少必须使用的代码块。你觉得“重复”块必须循环多少次（???）才能让里面的代码块绘制出一个正方形呢？
      grade4_frozen_square_loop1: 你好！我是艾伦代尔的安娜公主！我们一起应用“重复“块绘制一个正方形。这样一来，我们可以减少必须使用的代码块。你觉得“重复”块必须循环多少次（???）才能让里面的代码块绘制出一个正方形呢？
      grade4_frozen_square_loop2: 让我们绘制三个正方形，每绘制一个正方形后，别忘了先转120度后再继续绘制下一个正方形。
      grade4_frozen_square_loop3: 你可以试试绘制一朵雪花。用“重复”块绘制10个正方形，而且记得在绘制成每个正方形移之后，先把它移转36度后才开始画下一个正方形。
      grade4_playlab_freeplay: |-
        现在是自由发挥时间！
        你可以用工具箱你的所有模块了，祝你玩得愉快！
        <br/>

        <h5>
        <details>
        <summary><b>需要一些创意吗？</b></summary>
        \t<br/>
        \t<h5>
        \t\t<ul>
        \t<li><strong>标签</strong>
        - 让角色2闲逛，然后用方向键控制角色1来追逐他，直到他俩碰到一起。</li>
        <li><strong>敲击小精灵</strong>
        - 让小精灵不断的从随机的位置突然出现。如果在它消失前点到了它，就得分。</li>
        <li><strong>最佳猜想</strong> - 让两个角色都消失，然后在一个随机的位置随机出现一个角色。点击到角色1时，得一分。但如果点击到了角色2，就扣一分！</li>
        </ul>
        \t</h5>
        </details>
        </h5>
      grade4_playlab_test: "<h5><b>\n在我们的游戏里，应该如何得分？\n</b></h5> \n<br/>\n\n1.  每次小狗用一块馅饼打到猫时，在`point`（得分）变量上加1。<br/>    <br/> \n2.  用`当演员2碰到任何东西时`事件来触发对分数的更新。可以通过`points = points + 1.`来增加变量。  <br/>\n    <br/>\n3.  设置为得到10分时通过这关。\n\n<br/><br/>\n\n<h4>\n**注意：** 用右方向键来扔出馅饼！\n</h4>"
      grade4_playlab_test2: |-
        这里有个叫做“跳”的函数，它能让你的演员跳100像素。\\r
        \\r
        运行程序，用方向箭头来移动小狗，用“跳”函数来收集所有的旗帜。
      grade4_review_artist2: |-
        这所房子需要一个屋顶 ！绘制三角形。 \\r
        \\r
        提示︰ 所有三条边是相同的长度。 \\r
        \\r
        <img src="https://images.code.org/8b10073fd1a7fe53b4da33ec2229894b-image-1468018903891.gif"
        width="300"/>
      grade4_review_artist3: |-
        “跳”模块会移动艺术家但不画线。通过使用“向前跳”块和“向前移动”块来画出虚线。
        每行是50像素长。
      grade4_review_bee1: 现在，用“重复”模块来收集花蜜，并酿造蜂蜜。
      grade4_review_bee3: |-
        忙碌的蜜蜂！\\r
        \\r
        帮助蜜蜂用尽可能少的模块来收集花蜜并酿蜂蜜。
      grade4_scaffolded_project6: 完成了！现在你可以玩自己的游戏，或者分享给你的朋友或同学了！
      grade5_artist_binary1: |-
        二进制是只用两个选择来表达信息的方法。这里，我们会使用选项“关”（通过数字0来表达）和“开”（通过数字1来表达）。
        我们给你提供了一个“像素”的网格，你能穿过并将某些正方形像素设置为“开”。你能让小画家在第一行画出二进制字符串“01010101”吗？
      grade5_artist_binary10: "<img src=\"https://images.code.org/0a30f23ff6138828d053267719d34fa8-image-1444435986654.00.22.png\"\nwidth=\"250px\"/>\\\\r\n\\\\r\n**自由发挥灵感：**你已经学会了所有需要创建这个模式的知识了！\\\\r\n\\\\r\n如果这个图形引起了你的联想，试试画出一些类似的图像。要不然，就画画你想画的一些东西。 \n\\\\r\n<br/>"
      grade5_artist_binary2: |-
        这个函数从一个二进制的字符串里面获得1和0，然后指导小艺术家根据它们来从左到右，从上到下。\\r
        \\r
        当小艺术家看到1时，就会填满正方形，当看到0时，则什么也不做。\\r
        \\r
        运行一下代码，看看小艺术家是怎样用二进制来画出这个图形的。
      grade5_artist_for_loops1: 用一个计数循环来画这个边长50的三角形。如果你从1数到3，每次增加1，这就像一个“重复”循环模块。
      grade5_artist_for_loops10: 挑战：你能想出怎样用所有你学到的知识，来创建出这个所有边长都是40像素的多边形吗？
      grade5_artist_for_loops5: |-
        只从上一关的代码中改动一处就能创建出这幅图像。你能找到什么需要改动吗？\\r
        \\r
        提示：你需要移除某项！
      grade5_artist_for_loops6: |-
        如果每次都多转或少转一些角度，那么你可以创造出来一个有规律的效果。\\r
        \\r
        试着重用上一关的一些代码，但是转89度来创造螺旋的正方形出来。
      grade5_artist_for_loops7a: 将角度改小为72度来得到一个螺旋状的五边形。
      grade5_artist_for_loops8: |-
        还记得在前一阶段中，我们用变量来控制形状中边的数量吗？现在，我们要用“计数器”变量来做同样的事情了。\\r
        \\r
        这个图形从一个三角形开始，并且每次加一条边直到画出一个十边形。每条边应该是100像素长。 \\r
        \\r
        你应该怎样用“计数”循环中的“计数器”变量来重新画这个图形呢？
      grade5_artist_for_loops9: |-
        让我们总结一下吧！\\r
        \\r
        用你的“计数循环”和“计数器”的知识，来创造出每个形状都比上一个多两条边的画。确保每条边的长度都是这个多边形边的数量的10倍。\\r
        \\r
        这里有非常少的一些代码。
      grade5_artist_for_loopsfreeplay11: |-
        <br/><br/>\\r
        <img
        src="https://images.code.org/9b5897e059bb29bd2faf8504659a3cfc-image-1440719685627.49.33.png"
        width="250px"/>\\r
        <br/><br/>\\r
        自由发挥灵感：你已经学会了所有需要创建这个模式的知识了！如果这个图形引起了你的联想，试试画出一些类似的图像。要不然，就画画你想画的一些东西。
      grade5_artist_functionparameters10: "<img src=\"https://images.code.org/1df195df9d808f0dd539bef0f5c2958b-image-1443049871563.02.54.png\"\nwidth=\"250px\"/>\\\\r\n\\\\r\n自由发挥灵感：你已经学会了所有需要创建这个模式的知识了！\\\\r\n\\\\r\n如果这个图形引起了你的联想，试试画出一些类似的图像。要不然，就画画你想画的一些东西。 \n\\\\r\n\\\\r\n注意：我们已经用`set alpha`（设置透明度）模块来让花瓣慢慢淡出。"
      grade5_artist_functionparameters9a: |-
        完成`画一个螺旋边缘`的函数来为一个螺旋的中心请求最小的长度。\\r
        \\r
        \-
        中心最短边的正方形是50像素长\\r

        -   外面螺旋形最长边是200像素长
      grade5_artist_functionparameters_6: |-
        做的好！现在编辑函数来增加一个多边形边数的函数。\\r
        \\r
        所有形状的边长都是100像素。
      grade5_artist_parameters_squares1: |-
        点击“编辑”来填写这个`draw a square`（画一个正方形）函数的定义，并且加一个参数。\\r
        它应该像三角形一样有一个长度参数。\\r
        \\r
        **这次，画三个正方形：**边长分别为25，50，75像素。它们的左下角之间相隔100像素。
      grade5_artist_parameters_squares2a: |-
        编辑函数来接受一个叫做`length`（长度）的参数。 \\r
        \\r
        这个正方形的边应该比上一个长25像素。第一个正方形边长25像素。将'???'替换成正确的值来画这幅图。
      grade5_artist_parameters_triangles2: |-
        你能完成这幅画吗？
        \\r
        \\r
        每个三角形的边长比前一个多25像素。\\r
        第一个三角形的边长是25像素。
      grade5_artist_parameters_triangles2a: 你注意到这些函数模块有什么不同吗？点击“运行”来看看会发生什么。
      grade5_artist_parameters_triangles4: |-
        这个三角形的代码被破坏了。\\r
        \\r
        你能修好这个函数，让它能画边长25，50，75像素的三角形吗？
      grade5_artist_variables_freeplay10: "**自由发挥：** 试试这个形状边的数字。你能改变算法，无论多少条边，都让大小保持大致一样吗？"
      grade5_artist_variables_freeplay14: |-
        自由发挥：试试看！
        现在你的算法嵌套到了一个循环中。试着改变这两个变量的值来画出很酷的图形。\\r
        \\r
        如果想看到更好的效果，试试使用颜色模块！在循环里面使用随机颜色，看看效果如何。
      grade5_artist_variables_freeplay15: "<img src=\"https://images.code.org/b5e28b084cb331ee030ea3853ed921bd-image-1440060815818.51.21.png\"\nwidth=\"250px\"/>\\\\r\n\\\\r\n自由发挥灵感：你已经学会了所有需要创建这个模式的知识了！如果这个图形引起了你的联想，试试画出一些类似的图像。要不然，就画画你想画的一些东西。 "
      grade5_artist_variables_hexagons1: |-
        让我们再试一次！\\r
        \\r
        你能通过设置长度变量为60，来画出这个六边形？
      grade5_artist_variables_letterT11: |-
        这里用了和上一关一样的概念，但更复杂一些。你应该将`边`的变量设置成什么，来用正方形画出这张图？\\r
        \\r

        <p
        style="font-size:small; padding: 15px 15px 15px 40px; background-color:#dcf3f3;
        border-radius:10px;">\r
        \t只是好玩：试试在这个图案中，使用不同的数字！\r
        </p>
      grade5_artist_variables_octagons13: |-
        当一个图形有很多条边时，为了让它能显示在屏幕中，要让每条边都短一些。
        \\r
        \\r
        让我们重新创建这个算法来得到这个神奇的图形。为了不手动输入“长度”变量，让我们将“边数”变量放到一个“数学”模块中，来确保每个图形都能显示完整。\\r
        \\r
        每个多边形的周长都是300像素。
      grade5_artist_variables_pentagon8: |-
        用你在上一关中学到的来用边数变量创建这个六边形。\\r
        \\r
        看看如何就改一个值来画出一个三角形、正方形、五边形或者八边形？
      grade5_artist_variables_pentagon9: 现在，重新创造上一关的算法，然后创造一个边长为150像素的五边形。
      grade5_artist_variables_pentagons1: |-
        通过将长度变量放到正确的地方，并设置正确的值来画出这个边长为100像素的五边形。\\r
        \\r
        看看怎么能只设置长度一次，而将它用到所有正确的地方？
      grade5_artist_variables_pentagons12: "让我们将`边数`变量设置为5. 我们会加更多的边到这个算法中，边数越大，就越能明白整个模式！\n\n<br/>\n注意，这里有另一个叫做`长度`的变量。 \n我们能在任何`向前移动`模块中使用它。\n\n将`长度`变量设置为75。"
      grade5_artist_variables_rectangle6: 现在，我们来画一个高度是宽度两倍的长方形。这里有一个叫做“宽度”的变量需要设置为100。你能用“数学”模块来完成代码吗？
      grade5_artist_variables_square7: |-
        这些代码能画任何规则的多边形。\\r
        \\r
        这里有个叫做“边数”的变量设置为4。\\r
        \\r
        不管边数是多少，你都能用“边数”变量与数学模块一起来转正确的度数吗？
      grade5_artist_variables_triangles1: |-
        让我们画一个等边三角形。\\r
        \\r
        它的每条边都正好是50像素。\\r
        \\r
      grade5_artist_variables_triangles1_2018: |-
        让我们画一个等边三角形。\\r
        \\r
        它的每条边都正好是50像素。\\r
        \\r
      grade5_artist_variables_triangles1_2019: |-
        让我们画一个等边三角形。\\r
        \\r
        它的每条边都正好是50像素。\\r
        \\r
      grade5_artist_variables_triangles2: 改进“向前移动150像素”，让移动模块使用一个叫做“长度”的变量。你能将长度设置为150来重新画这个三角形吗？
      grade5_artist_variables_triangles3: '拖拽一个数字模块到“设置长度”模块和“重复次数”模块中来画一个边长50像素的三角形。 '
      grade5_bee_for_loops10: |-
        如果你的循环是递减的，就在每次迭代时，从计数器变量中**减去**增量。
        \\r
        \\r
        什么样的增量能够收集15，然后12，然后9，6，3个花蜜？
      grade5_bee_for_loops11: |-
        **挑战：** 还用你学会的，关于`计数循环`的知识来试着解决这个问题。 \\r
        \\r
        记住，你可能需要多运行几次才能想出所有的步骤。
      grade5_bee_for_loops4: 帮助蜜蜂收集所有的花蜜。
      grade5_bee_for_loops5: 现在我们需要往前移动“计数器”这么多次，然后收集“计数器”这么多次花蜜。你能用两个重复循环来解决这个挑战吗？
      grade5_bee_for_loops6: 你也能用计数循环递减。试着通过从5到1，每次减1来递减计数收集花蜜。
      grade5_bee_parameters_new3: |-
        是时候测试函数了！ \\r
        \\r
        让我们看看是否有更容易的方法收集所有三行花蜜。
      grade5_bee_parameters_new4: |-
        _"你的函数怎么样了？"_   \\r
        \\r
        在这里，我们需要一些调节。点击"编辑"来增加一个`length`（长度）参数到函数里，这样当每行长度不同时，它也能工作。
      grade5_bee_parameters_new8a: 使用你的新函数来解决这个螺旋。
      grade5_bee_parameters_new9a: 使用你的新函数来解决这个螺旋。
      grade5_playlab_freeplay: |-
        现在是自由发挥时间！
        你可以用工具箱你的所有模块了，祝你玩得愉快！
        <br/>

        <h5>
        <details>
        <summary><b>需要一些创意吗？</b></summary>
        \t<br/>
        \t<h5>
        \t\t<ul>
        \t<li><strong>标签</strong>
        - 让角色2闲逛，然后用方向键控制角色1来追逐他，直到他俩碰到一起。</li>
        <li><strong>敲击小精灵</strong>
        - 让小精灵不断的从随机的位置突然出现。如果在它消失前点到了它，就得分。</li>
        <li><strong>最佳猜想</strong> - 让两个角色都消失，然后在一个随机的位置随机出现一个角色。点击到角色1时，得一分。但如果点击到了角色2，就扣一分！</li>
        </ul>
        \t</h5>
        </details>
        </h5>
      grade5_playlab_variables1: |-
        这次你不需要写任何代码，点击`运行`来玩游戏吧！

        <br/>
        在这个游戏里，你会扮演小狗，要比小猫收集到更多的旗帜。用下方向键来控制小狗。玩完后，点击`完成`。
      grade5_playlab_variables10: 编辑`巡逻`函数来添加一个`演员`参数。调用它时，能让屏幕上每个演员都动起来。记住，演员对应到数字1和2，3上。
      grade5_playlab_variables11: 添加另一个叫做“速度”的参数到“巡逻”函数里。试着在“设置速度”模块中使用新的“速度”参数，来帮助企鹅在别的小动物之前得到所有旗帜。
      grade5_playlab_variables12: |-
        来点好玩的！看看这里的代码，是否你能明白每个模块都做了什么。\\r
        \\r
        看完以后，用方向键来让小狗收集到所有旗帜。\\r
        \\r
        注意：你不必改动代码。
      grade5_playlab_variables13: 在小狗碰到任何一个演员时，用“当演员碰到”模块来把小狗送回左上角。
      grade5_playlab_variables14: |-
        现在是自由发挥时间！
        你可以用工具箱你的所有模块了，祝你玩得愉快！
        <br/>

        <h5>
        <details>
        <summary><b>需要一些创意吗？</b></summary>
        \t<br/>
        \t<h5>
        \t\t<ul>
        \t<li><strong>标签</strong>
        - 让角色2闲逛，然后用方向键控制角色1来追逐他，直到他俩碰到一起。</li>
        <li><strong>敲击小精灵</strong>
        - 让小精灵不断的从随机的位置突然出现。如果在它消失前点到了它，就得分。</li>
        <li><strong>最佳猜想</strong> - 让两个角色都消失，然后在一个随机的位置随机出现一个角色。点击到角色1时，得一分。但如果点击到了角色2，就扣一分！</li>
        </ul>
        \t</h5>
        </details>
        </h5>
      grade5_playlab_variables2: 最后关卡中的比赛不是很公平! 更改`dog_speed`（狗\_速度）变量以确保你可以收集比猫更多的旗子。第一个收集到10面旗子的赢！
      grade5_playlab_variables3: |-
        这是一种新的游戏!\\r
        \\r
        你不需要在这个关卡上改变任何东西. \\r
        \\r
        \*\*玩法: \*\* 使用左右箭头来移动, 向上箭头来跳跃。看看你能否收集所有的旗子。
      grade5_playlab_variables4: 现在，我们用一个叫做“高度”的变量来控制小狗能跳多高。修改“高度”变量，让小狗能跳足够高，得到所有旗帜。\\r
      grade5_playlab_variables71: |-
        这是一个早先的游戏，但是大部分代码都隐藏了。我们加了个新函数叫做`score_points`（得分）。
        <br/>

        <hr>
        <br/>
        <h4>
        编辑这个函数，使得`points`（分数）参数能加到 `player_score`（玩家分数）变量上。
        <br/>
        `player_score`（玩家分数）变量会在每次小狗的馅饼碰到小猫时增加，在小猫的三明治碰到小狗时减少。
        </h4>
        <br/>
        <hr>
        *注意：当你完成后，点击“运行”来玩玩。当小狗得到6分时，就可以进入下一关。*
      grade5_playlab_variables81: |-
        我们已为你添加了上一关的函数。

        <hr/>

        <h4>
        用“如果”模块来编写你的游戏，当play_score(玩家分数) 大于某个值时，调用level_up(升级) 函数。<br/><br/>
        </h4>
        <i>例如：“play_score” > 6</i>

        <hr/>
        <i>玩游戏，并且达到第3级来到达下一关。 </i>
      grade5_playlab_variables9: |-
        这里有个函数叫做`巡逻`。\\r
        \\r
        编辑`巡逻`来让猫向上移动400像素，再向下移动400像素。
      grade5_playlab_variables_freeplay: |-
        自由游戏时间！这是除了使用过的所有变量，还有一些别的变量。\\r
        \\r
        注意：现在工具箱里有很多模块需要组织在一起！我们将这些模块放到了合适的分类中。花一些时间来看看每种类型都有哪些模块吧。当你看完后，可以用重复、变量和事件做出一个故事或者游戏。\\r
        \\r
        _提示：往下滚动鼠标来查看工作区的所有命令。_
      gradek_artist_loops1: |-
        帮助艺术家向前画这条线两次。\\r
        \\r
        ![](https://images.code.org/04501f26a36673460f5c8fe04e3e7686-image-1498002095108.gif)
      gradek_playlab_events1c: 乔治狗想说“大家好”。你可以帮它吗？
      harvester_Kahoot: |-
        _"噢，蔬菜长得到处都是！"_\\r
        \\r
        现在帮农夫捡起路上的所有玉米，直到最后的南瓜。\\r
        \_\_\_\\r

        ##### 主意：路上的每个通往南瓜的正方形上都有最多_一个_玉米。你需要用`如果`语句在采摘玉米前判断一下！
      harvey_snowflake_artist1: |-
        _是时候让雪花准备好3D打印了！_

        \!\[](\<<https://images.code.org/ba50acd509bd25e07e7d4622a86ba158-image-1503785370113.08.08>
        PM.png>) 为了让图片能够正确打印，要遵循下面的规则：

        -   确保你的图片只有**一整块**！分开的部分会被分开打印。
        -   确保你的整个图片能完全**放进**这张画布中。
        -   只在白背景上用**黑色的线**。
        -   在程序结束时，让小艺术家跳回左上角(-10 左方, -10 下)：

        <xml> <block type="jump_to_xy"><title name="XPOS">-10</title><title name="YPOS">-10</title>
        </block>
        <block type="jump_to"><title name="VALUE">7</title>
        </block></xml>

        完成后，右击来保存图片，然后将它通过<a
        href="https://classroom.google.com">Google课堂</a>发给我。
      harvey_snowflake_artist2: |-
        _是时候让雪花准备好3D打印了！_

        \!\[](\<<https://images.code.org/ba50acd509bd25e07e7d4622a86ba158-image-1503785370113.08.08>
        PM.png>) 为了让图片能够正确打印，要遵循下面的规则：

        -   确保你的图片只有**一整块**！分开的部分会被分开打印。
        -   确保你的整个图片能完全**放进**这张画布中。
        -   只在白背景上用**黑色的线**。
        -   在程序结束时，让小艺术家跳回左上角(-10 左方, -10 下)：

        <xml> <block type="jump_to_xy"><title name="XPOS">-10</title><title name="YPOS">-10</title>
        </block>
        <block type="jump_to"><title name="VALUE">7</title>
        </block></xml>

        完成后，右击来保存图片，然后将它通过<a
        href="https://classroom.google.com">Google课堂</a>发给我。
      iceAgeLoopsforVideo: 你能只用一个 <xml><block type="maze_moveForward"/></xml>模块来获得橡子吗？试试用循环！
      iceage_click_hello: |-
        当你点击喜得时，能帮助他呼唤他的朋友吗？\\r
        完成后，点击"运行"来开始。点击喜得来让你的代码起作用！
      iceage_click_hello_2018: |-
        当你点击喜得时，能帮助他呼唤他的朋友吗？\\r
        完成后，点击"运行"来开始。点击喜得来让你的代码起作用！
      iceage_free_play: |-
        是时候创建你自己的故事了！\\r
        \\r
        完成后，点击"完成"来让朋友们在他们的手机、平板或计算机上试试你的游戏。\\r
        不知道如何做？点击提示来获得详细方法。
      iceage_free_play_2018: |-
        是时候创建你自己的故事了！\\r
        \\r
        完成后，点击"完成"来让朋友们在他们的手机、平板或计算机上试试你的游戏。\\r
        不知道如何做？点击提示来获得详细方法。
      iceage_free_playcourseF_IceAge_11: |-
        是时候创建你自己的故事了！\\r
        \\r
        完成后，点击"完成"来让朋友们在他们的手机、平板或计算机上试试你的游戏。\\r
        不知道如何做？点击提示来获得详细方法。
      iceage_hello1: |-
        喜得（演员1）想为一次新的冒险集合所有人。你能通过拖一个`说`模块，并将它放到`当运行时`事件下，来帮助他说"你好！"吗？\\r
        \\r
        别忘了在里面输入"你好！"！
      iceage_hello1_2018: |-
        喜得（演员1）想为一次新的冒险集合所有人。你能通过拖一个`说`模块，并将它放到`当运行时`事件下，来帮助他说"你好！"吗？\\r
        \\r
        别忘了在里面输入"你好！"！
      iceage_hello2: 曼尼（演员2）发现了喜得（演员1），想邀请他一同冒险。通过使用`演员__说`模块两次来帮助他们相互打招呼。
      iceage_hello2_2018: 曼尼（演员2）发现了喜得（演员1），想邀请他一同冒险。通过使用`演员__说`模块两次来帮助他们相互打招呼。
      iceage_move_events: |-
        斯奎特一直在找橡子！
        \\r
        给每个事件模块下加一个`移动演员1`的模块，并改变其方向来让每个方向键都能起作用。这样来帮助他能四处跑。\\r
        完成后，点击"运行"并试着收集所有的橡子。
      iceage_move_events_2018: |-
        斯奎特一直在找橡子！
        \\r
        给每个事件模块下加一个`移动演员1`的模块，并改变其方向来让每个方向键都能起作用。这样来帮助他能四处跑。\\r
        完成后，点击"运行"并试着收集所有的橡子。
      iceage_move_to_actor: 迪亚哥（演员1）正在寻找曼尼（演员2）你能帮忙将他俩带到一起吗？将一个模块连接到`当演员碰到时`事件下，在当他俩碰到一起时，播放声音。
      iceage_move_to_actor_2018: 迪亚哥（演员1）正在寻找曼尼（演员2）你能帮忙将他俩带到一起吗？将一个模块连接到`当演员碰到时`事件下，在当他俩碰到一起时，播放声音。
      iceage_move_to_flag: 斯奎特 在找他的橡子! 你能帮他移动最后200像素吗？
      iceage_move_to_flag_2018: 斯奎特 在找他的橡子! 你能帮他移动最后200像素吗？
      iceage_repeat: "`一直重复`模块能让你连续的运行代码。你能将模块放到它里面，帮助格瑞尼不停的左右移动来进行锻炼吗？"
      iceage_repeat_2018: "`一直重复`模块能让你连续的运行代码。你能将模块放到它里面，帮助格瑞尼不停的左右移动来进行锻炼吗？"
      iceage_sound_and_points: |-
        这是你上一关的代码，这个代码也会左右移动格瑞尼。\\r
        你能完成这个程序，当喜得和格瑞尼碰上是，让它**播放声音**并**得一分**吗？\\r
        点击"运行"来玩这个游戏。
      iceage_sound_and_points_2018: |-
        这是你上一关的代码，这个代码也会左右移动格瑞尼。\\r
        你能完成这个程序，当喜得和格瑞尼碰上是，让它**播放声音**并**得一分**吗？\\r
        点击"运行"来玩这个游戏。
      iceage_throw_hearts: |-
        喜得想让他的奶奶格瑞尼，知道他很爱她。\\r
        \\r
        用`演员 __ 扔`命令来让喜得（演员1）向格瑞尼（演员2）扔爱心！\\r
        当格瑞尼碰到爱心时，设置她的表情为高兴。
      iceage_throw_hearts_2018: |-
        喜得想让他的奶奶格瑞尼，知道他很爱她。\\r
        \\r
        用`演员 __ 扔`命令来让喜得（演员1）向格瑞尼（演员2）扔爱心！\\r
        当格瑞尼碰到爱心时，设置她的表情为高兴。
      iceage_warn_ice_age: |-
        每个人都要快点移动，因为冰暴就要来了！\\r
        将场景改为冰雪的背景，并设置喜得（演员1）的速度为快速。\\r
        按下"运行"，并将喜得移动到迪亚哥那里警告他。
      iceage_warn_ice_age_2018: |-
        每个人都要快点移动，因为冰暴就要来了！\\r
        将场景改为冰雪的背景，并设置喜得（演员1）的速度为快速。\\r
        按下"运行"，并将喜得移动到迪亚哥那里警告他。
      level 'grade3_Loops_10: |-
        忙碌的蜜蜂！\\r
        \\r
        帮助蜜蜂用尽可能少的模块来收集花蜜并酿蜂蜜。
      level 'grade3_Loops_11: |-
        这条路的形状和其它的不一样。\\r
        \\r
        你能用尽量少的模块来收集所有花蜜吗？
      level 'grade3_Loops_3: 用一个“重复”循环来收集所有花蜜。
      level 'grade3_Loops_4: 现在，用“重复”模块来收集花蜜，并酿造蜂蜜。
      level 'grade3_Loops_5: |-
        多美的花园啊！\\r
        \\r
        帮助蜜蜂访问每一朵。\\r
        \\r
        你能找到只用7个模块就实现的方法吗？
      level 'grade3_Loops_6: |-
        这个谜题中的循环应该进行多少次？\\r
        \\r
        循环是你的朋友！用一些循环来减少模块，并完成这道谜题。
      level 'grade3_Loops_7: |-
        这些花看上去很好吃！\\r
        \\r
        用尽可能少的模块，从每朵花里收集蜂蜜。
      loop pet test 2: |-
        **挑战！** 当黛西得到胡萝卜时，会非常激动。你能让她跳一段派对舞蹈吗？在你拿开胡萝卜之前，她应该一直跳。\\r
        \\r
        你会需要用到所有这些模块：\\r
        \!\[](\<<https://images.code.org/83c295bd00536dffed3c93a40bba75ae-image-1523562330282.41.06>
        PM.png>)
      loop pet test 3: |-
        **做出预测！** 在点击"运行"前，写下这些问题的答案。然后试试代码，看看会发生什么！\\r
        \\r

        -   将胡萝卜拖到黛西狗那里后，她会做什么？\\r
        -   当你按下上方向键后，黛西狗会做什么？\\r
      loop pet test 4: |-
        **是时候做你自己的虚拟宠物了！**
        你能为自己的宠物改变任何代码。这是一些主意：\\r

        -   你能在点击宠物时，让它开始一个新的事情吗？\\r
        -   \*
            你能在将吸尘器拖动到宠物那里时，让它跑掉吗？\\r
        -   你能给宠物增加别的动物朋友吗？
      maker workshop final: |-
        # 挑战：探索！\\r

        \\r
        现在你已经测试了一下水了，继续探索这个工具的完整扩展。在这一关中，你会看到很多新模块，甚至一些全新的功能领域（比如数据库后端！）。随机返回前一关来获得一些激励，或者创建一些完全数据自己的东西。
      name 'CSD U3 Keypress Boolean Predict': |-
        # 做出预测：

        keyDown()（按下键时）\\r
        `keyDown()`（按下键时）模块是我们的第一个能从用户得到输入的模块。这是我们做一个真正的游戏的第一步！看看你是否能明白`keyDown()`（按下键时）模块是如何工作的。\\r
        \\r
        你觉得当你运行程序并按下”上方向键”时会发生什么？将你的预测写下来，并运行程序来看看你的预测是否精确。
      playEventsK1: |-
        这个游戏叫做"剧本实验室"。\\r
        \\r
        看看你能否指出每个模块做了什么。
      playEventsK2: |-
        乔治想说：“你好”。\\r
        \\r
        你能帮助他吗？\\r
        \\r
        ![](https://images.code.org/f32d285fa6f45e1f8d042c04c55f32c8-image-1467988839292.gif)
      playEventsK3: |-
        乔治想要被挠挠耳朵后面！\\r
        \\r
        你能做到当点击乔治时，让他高兴吗？\\r
        \\r
        ![](https://images.code.org/04fb37990455b215e0f20884363092d0-image-1467988943134.gif)
      playEventsK4: |-
        你能在点击上方向键时，让小狗乔治抓住小鸟罗宾吗？\\r
        \\r
        ![](https://images.code.org/2fbf6c793bb77a961fa7a52f27e4c59d-image-1467989013878.gif)
      playEventsK5: |-
        现在添加代码，当你点击向前箭头时，让罗宾飞走。\\r
        \\r
        ![](https://images.code.org/a7e224c5f13e39e5342011f8a76d3b6b-image-1467989101328.gif)
      playEventsK6: |-
        当你点击罗宾时，让她和乔治对话。\\r
        \\r
        ![](https://images.code.org/fc80b1febbb7a472026b6bf2c535b2f4-image-1467989171517.gif)
      playEventsK7: |-
        在这个有趣的场景中，你还能做些什么呢？
        <br/>

        <h5>
        <details>
        <summary>

        <b>需要灵感？</b>

        </summary>
        \t<br/>
        \t<h5>
        \t\t<ul>
        \t<li><strong>对话</strong>- 让小精灵被点击时，相互交谈。</li>
        <li><strong>弹球游戏</strong>- 让小精灵被另一个小精灵碰到时发出声音。</li>
        <li><strong>方向键</strong>- 让小精灵能够根据按下的方向键，来向对应的方向移动！</li>
        </ul>
        \t</h5>

        </details>
        </h5>
      post-assessment survey q32: "（可选）：请说明一下为什么你（会/不会）向另一个学生推荐这门计算机科学课程。"
      post-assessment survey q37: "（可选）如果你没有选择这个AP测验，有什么会让你改变主意，从而选择它呢？"
      pre-assessment survey q25A: 如果是，在当前的计算机科学课程前，你还学过什么计算机科学课程？
      ramp_artist_loops1: |-
        多么美好的一天！ \\r
        \\r
        通过向前移动60像素，在冬天前，帮助小艺术家盖上他的花。
      ramp_artist_loops1_2018: |-
        多么美好的一天！ \\r
        \\r
        通过向前移动60像素，在冬天前，帮助小艺术家盖上他的花。
      ramp_artist_loops1_2019: |-
        多么美好的一天！ \\r
        \\r
        通过向前移动60像素，在冬天前，帮助小艺术家盖上他的花。
      ramp_artist_loops2: 通过重复步骤5次，添加一些美丽，并在每次移动之间改变一个随机的颜色。
      ramp_artist_loops2_2018: 通过重复步骤5次，添加一些美丽，并在每次移动之间改变一个随机的颜色。
      ramp_artist_loops2_2019: 通过重复步骤5次，添加一些美丽，并在每次移动之间改变一个随机的颜色。
      ramp_artist_loops3: 再画5次彩色的线，这次用一个`重复`循环。
      ramp_artist_loops3_2018: 再画5次彩色的线，这次用一个`重复`循环。
      ramp_artist_loops3_2019: 再画5次彩色的线，这次用一个`重复`循环。
      ramp_artist_loops4: 当您在循环的最后添加了右转72度后, 会发生什么？
      ramp_artist_loops4_2018: 当您在循环的最后添加了右转72度后, 会发生什么？
      ramp_artist_loops4_2019: 当您在循环的最后添加了右转72度后, 会发生什么？
      ramp_artist_loops5: |-
        循环一定能让写代码更容易！\\r
        \\r
        用循环来画这个楼梯。\\r

        -   楼梯的每一级都是50像素长，50像素高\\r
        -   需要在每个方向上转90度
      ramp_artist_loops5_2018: |-
        循环一定能让写代码更容易！\\r
        \\r
        用循环来画这个楼梯。\\r

        -   楼梯的每一级都是50像素长，50像素高\\r
        -   需要在每个方向上转90度
      ramp_artist_loops5_2019: |-
        循环一定能让写代码更容易！\\r
        \\r
        用循环来画这个楼梯。\\r

        -   楼梯的每一级都是50像素长，50像素高\\r
        -   需要在每个方向上转90度
      ramp_artist_loops6: |-
        这个楼梯大多了，但是它用了和上一关一样数量的代码！\\r
        \\r
        修复循环来完成这一关。
      ramp_artist_loops6_2018: |-
        这个楼梯大多了，但是它用了和上一关一样数量的代码！\\r
        \\r
        修复循环来完成这一关。
      ramp_artist_loops6_2019: |-
        这个楼梯大多了，但是它用了和上一关一样数量的代码！\\r
        \\r
        修复循环来完成这一关。
      ramp_artist_loops7: 寻找规律，使用循环使此代码更短！
      ramp_artist_loops7_2018: 寻找规律，使用循环使此代码更短！
      ramp_artist_loops7_2019: 寻找规律，使用循环使此代码更短！
      ramp_artist_loops8: "**挑战：**寻找规律，使用循环使此代码更短！"
      ramp_artist_loops8_2018: "**挑战：**寻找规律，使用循环使此代码更短！"
      ramp_artist_loops8_2019: "**挑战：**寻找规律，使用循环使此代码更短！"
      ramp_artist_loops8_clone: "**挑战：**寻找规律，使用循环使此代码更短！"
      ramp_artist_loops9: 画一个边长200像素的正方形来通过这关。
      ramp_artist_loops9_2018: 画一个边长200像素的正方形来通过这关。
      ramp_artist_loops9_2019: 画一个边长200像素的正方形来通过这关。
      subgoal U3 L4 introducing subgoal labels: |-
        <img
        src="https://images.code.org/0aca9e3ba0945f31ddd56438a45ed69c-image-1436286498758.png"
        align=right>

        只用4个乌龟命令，在应用实验室写代码来完成下面每个画图挑战。目标是用尽可能高效的代码，只用提供的命令来解决问题。

        "高效"的意思是什么？在计算机科学中，根据不同的出发点，这意味着不同的事情。在这些挑战上，用你觉得最好的方法来解决，我们会在最后来提出关于效率的问题。

        <img src="https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif"
        align=right>

        # 这样做：

        用尽可能高效的办法在乌龟的左前方画一个 1x1 的正方形。程序在停止时，乌龟应该在出发的位置，并面朝原来的方向。

        一旦你觉得找到了解决方案，点击完成 - 它会在你运行了程序之后出现。
      subgoal U3L2 Using Simple Commands: |-
        <img
        src="https://images.code.org/0aca9e3ba0945f31ddd56438a45ed69c-image-1436286498758.png"
        align=right>

        只用4个乌龟命令，在应用实验室写代码来完成下面每个画图挑战。目标是用尽可能高效的代码，只用提供的命令来解决问题。

        "高效"的意思是什么？在计算机科学中，根据不同的出发点，这意味着不同的事情。在这些挑战上，用你觉得最好的方法来解决，我们会在最后来提出关于效率的问题。

        <img src="https://images.code.org/d26ed114448c5ffe75a75ed761fab5f0-image-1447888033281.gif"
        align=right>

        # 这样做：

        用尽可能高效的办法在乌龟的左前方画一个 1x1 的正方形。程序在停止时，乌龟应该在出发的位置，并面朝原来的方向。

        一旦你觉得找到了解决方案，点击完成 - 它会在你运行了程序之后出现。
      subgoal-test-clone: |-
        ### 用目标标签来结构化你的解决方案。\\r

        \\r
        乌龟需要顺时针移动来画一个正方形。.\\r
        \\r
        拖出"移动乌龟"子目标标签放到工作区中。
      subgoal-test: |-
        ### 用目标标签来结构化你的解决方案。\\r

        \\r
        乌龟需要顺时针移动来画一个正方形。.\\r
        \\r
        拖出 ["移动乌龟"
        子目标标签](#triggercallout=trigger_move_subgoal) 放到工作区中。
      subgoalU3L2_TurtleSquare_right: |-
        <img src="https://images.code.org/ad48e7224312a6c41f4fc5727af53cc0-image-1436287265071.png"
        align=right> \\r

        # 这样做：\\r

        这次，用最高效的方法在乌龟的右前方画一个1X1的正方形。注意这里没有向右转的命令！你需要找出只用向左转和向前移动来画出这个。程序停止时，乌龟应该在原先的位置，面朝原先的方向。\\r
        \\r
        完成后，点击完成按钮来继续下一个问题。\\r
      subgoals_U3_turtle_prediction_FR: |-
        ## 跟踪代码\\r

        \\r
        用一两句话来解释你认为下面的代码是做什么。\\r
        \\r
        ![](https://images.code.org/5bc66acc4712cf1c835daac0c45422a8-image-1506532056958.png)
      subgoals_U3_turtle_prediction_FR_2018: |-
        ## 跟踪代码\\r

        \\r
        用一两句话来解释你认为下面的代码是做什么。\\r
        \\r
        ![](https://images.code.org/5bc66acc4712cf1c835daac0c45422a8-image-1506532056958.png)
      subgoals_U3_turtle_prediction_FR_2019: |-
        ## 跟踪代码\\r

        \\r
        用一两句话来解释你认为下面的代码是做什么。\\r
        \\r
        ![](https://images.code.org/5bc66acc4712cf1c835daac0c45422a8-image-1506532056958.png)
      subgoals_u3_top_down_FR: |-
        # 设计一个程序\\r

        \\r
        使用自上而下的方法描述如何创建一个程序使用随机数字在蓝色背景上绘制一个的白色雪花，使得每次运行代码时雪花都是唯一的。\\r
        \\r
        你不需要编写要使用的确切代码或模块, 但是你应该描述你需要创建哪些函数, 在哪里将或不使用循环, 以及在哪里将或不会使用随机数字。
      subgoals_u3_top_down_FR_2018: |-
        # 设计一个程序\\r

        \\r
        使用自上而下的方法描述如何创建一个程序使用随机数字在蓝色背景上绘制一个的白色雪花，使得每次运行代码时雪花都是唯一的。\\r
        \\r
        你不需要编写要使用的确切代码或模块, 但是你应该描述你需要创建哪些函数, 在哪里将或不使用循环, 以及在哪里将或不会使用随机数字。
      subgoals_u3_top_down_FR_2019: |-
        # 设计一个程序\\r

        \\r
        使用自上而下的方法描述如何创建一个程序使用随机数字在蓝色背景上绘制一个的白色雪花，使得每次运行代码时雪花都是唯一的。\\r
        \\r
        你不需要编写要使用的确切代码或模块, 但是你应该描述你需要创建哪些函数, 在哪里将或不使用循环, 以及在哪里将或不会使用随机数字。
      test_sarah: 你好
      timeforcs_demo_sl_1: "**猜猜看：** 这个图形名叫`外星人一号`！当点击她时猜猜会发生什么？"
      timeforcs_demo_sl_2: "这个外星人对自己在火星上的舞技非常自信，但现在她只能上下移动了。 \n\n你能在<xml><block type=\"gamelab_addBehaviorSimple\" inline=\"true\">\n<value name=\"SPRITE\">\n<block type=\"sprite_variables_get\">\n\n<title name=\"VAR\">alien1</title>\n</block>\n</value>\n</block></xml>中改变行为，让它可以旋转吗？  "
      timeforcs_demo_sl_4: "创造一个叫`外星人2`的精灵。 \n\n让她在被点击时完成一个新的舞步。  "
      timeforcs_demo_sl_5: "创造一个叫`外星人3`的精灵。 \n\n你能让所有外星人排成一条直线吗？现在你有一个外星人舞蹈团了！"
      timeforcs_demo_sl_6: |-
        可以在点击精灵时，在程序中做出任何的改变。现在来换个颜色吧！

        **在这里添加代码，使每个外星人在被单击时改变自己的颜色。**
      timeforcs_demo_sl_7: "这些外星人太调皮了！ \n\n用<xml><block type=\"gamelab_removeAllBehaviors\" inline=\"true\"><value name=\"SPRITE\"/></block></xml>模块来让每个外星人被单击时停下来。"
      timeforcs_demo_sl_8: |-
        最后一步，创建一个新的钟形精灵，命名为`myBell`。

        当点击这个钟时，所有的外星人会跳同一支舞！
      timeforcs_demo_sl_9: |-
        现在可以创建自己的外星人迪斯科啦！想找点灵感？试试这些：

        -   创建两个时钟，让外星人在不同时钟的控制下完成不同的舞步
        -   当外星人相互接触时，让他们开始不同的舞蹈
      u3-old-drawing-view: |-
        # 你自己的图画\\r

        \\r
        该你创建自己的图画了。你应该先在纸上规划一下。\\r
        \\r

        # 这样做\\r

        提醒自己要确保达到目标：\\r
        \\r
        \*
        创建一个可识别的，有名字的目标或设计（例如没有随机乱放的形状）\\r

        -   使用至少10个形状或文本条目（矩形、椭圆形、正多边形，文本）\\r
        -   用至少4个颜色来填充\\r
        -   用至少两个不同的颜色画轮廓\\r
        -   至少包含3个不同的有注释的逻辑模块\\r
      valentine_artist_03: 现在，制作一个情人卡，分享给特别的人吧！它能是任何你想的东西。
