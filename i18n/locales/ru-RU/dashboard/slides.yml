ru:
  slides:
    maze_intro:
      1:
        text: "Добро пожаловать в твой первый час кода! Ощути вкус программирования."
      2:
        text: "Мы будем использовать Блокли — визуальный язык программирования, в котором программа создается перетаскиванием необходимых блоков."
      3:
        text: "Большинство программ состоят из текстовых строк кода, но Блокли — визуальный язык программирования. Каждый блок соответствует строке «настоящего» кода."
      4:
        text: "Ты узнаешь об основах компьютерных технологий, понятиях, которые используются и для создания простых программ, и для управления марсоходом."
      5:
        text: "Программа — это набор команд, которые должен выполнять твой компьютер."
      6:
        text: "Цель первой программы — провести сердитую птичку (Angry Bird) по лабиринту, чтобы разобраться с зеленой свиньей."
      7:
        text: "С левой стороны находится лабиринт, в котором выполняется твоя программа. Инструкции для каждой головоломки находятся под лабиринтом."
      8:
        text: "Средняя часть экрана — это панель инструментов с командами для управления сердитой птичкой (Angry Bird). Ты будешь использовать их для создания своего кода."
      9:
        text: "С правой стороны находится твоя рабочая среда, куда ты будешь перетаскивать блоки с панели инструментов для создания программы. Чтобы удалить блок, перетащи его в корзину в углу."
      10:
        text: "Каждый блок — это одна инструкция. Если ты перенесешь блок «двигаться вперед» в рабочую среду и нажмешь кнопку «Выполнить программу», птичка продвинется в лабиринте на одну клетку вперед."
      11:
        text: "Чтобы выполнить несколько действий, ты можешь перетащить в свою рабочую среду много блоков и соединить их вместе. Птичка будет выполнять команды сверху вниз."
      12:
        text: "Если ты запустил программу, а затем хочешь что-то исправить и снова ее запустить, нажми кнопку «Сброс»."
      13:
        text: "Давай зададим этим свиньям!"
    artist_intro:
      1:
        text: "Привет, я Джей Ар! Каждой гоночной команде для победы нужны компьютерные специалисты. Они анализируют информацию с машины, чтобы сделать ее еще быстрее."
      2:
        text: "В этой серии задач ты станешь художником, который рисует линию на пути своего движения, куда бы он ни направлялся."
      3:
        text: "Этот блок содержит команду «двигаться вперед на 100 пикселей». Пиксели — это совсем крохотные пятнышки на твоем мониторе."
      4:
        text: "Этот блок содержит команду «повернуть направо на 90 градусов». Он будет поворачивать твоего художника на то же количество градусов, что и блоки «повернуть» в головоломках с лабиринтами."
      5:
        text: "Нажми на стрелку на любом из этих блоков, чтобы изменить число шагов вперед, которые делает художник, или число градусов, на которые он поворачивает. Экспериментируй с этими блоками, чтобы получше с ними познакомиться."
    farmer_intro:
      1:
        text: "Привет, я Паола! В этой головоломке ты станешь фермером, который должен полностью выровнять свое поле, чтобы начать сажать растения."
      2:
        text: "Ты должен помочь ей раскидать все кучи земли и засыпать все ямы."
      3:
        text: "Новые блоки могут раскидывать 1 лопату земли из кучи или засыпать 1 лопату земли в яму."
      4:
        text: "Ямы и кучи имеют различные размеры, так что тебе надо будет указать фермеру, сколько раз махать лопатой."
    flappy_intro:
      1:
        image: 'Примечания/flappy01.jpg'
        text: "Привет, я Кэти! Одна из самых интересных вещей в изучении информатики — это то, что компьютерная программа может взаимодействовать с пользователем."
      2:
        image: 'Примечания/flappy02.jpg'
        text: "При каждом щелчке мышью, касании экрана или печати на компьютере или телефоне запускается СОБЫТИЕ и определенный код, который решает, что делать, когда происходит СОБЫТИЕ."
      3:
        image: 'Примечания/flappy03.jpg'
        text: "Например, у вас может быть такой ОБРАБОТЧИК СОБЫТИЙ: «по щелчку мыши воспроизвести звук» "
      4:
        image: 'Примечания/flappy04.jpg'
        text: "Ты когда-нибудь слышал об игре FlappyBird? С помощью обработчиков событий мы будем учиться программировать нашу собственную пользовательскую версию игры FlappyBird!"
      5:
        image: 'Примечания/flappy05.jpg'
        text: "Код, который ты будешь писать, содержит перенесенные и скрепленные между собой блоки, представляющие собой команды для компьютера. По сути каждый из этих блоков представляет собой настоящий код."
      6:
        image: 'Примечания/flappy06.jpg'
        text: "Если ты посмотришь на рабочую область, там есть некоторые зеленые блоки, которые заполняются для тебя; это «обработчики событий» "
      7:
        image: 'Примечания/flappy07.jpg'
        text: "Если ты хочешь, чтобы птичка ВЗЛЕТЕЛА при НАЖАТИИ кнопки мыши, ты можешь сделать это путем присоединения блока «ВЗЛЕТЕТЬ» в соответствующем обработчике событий, и теперь в игре при нажатии кнопки мыши птичка будет взлетать."
      8:
        image: 'Примечания/flappy08.jpg'
        text: "В каждой головоломке данного задания мы познакомимся с новыми типами событий, которые будут представлены зелеными блоками на рабочей области, и ты можешь добавить соответствующие блоки в ответ на эти события."
      9:
        image: 'Примечания/flappy09.jpg'
        text: "Если ты видишь такую стрелку выпадающего меню, это значит, что можно изменить настройки, например, выбрать звук, который воспроизводится, когда порхающая птичка падает на землю."
      10:
        image: 'Примечания/flappy10.jpg'
        text: "В последней головоломке у тебя будет возможность создать свою собственную игру и поделиться ей с друзьями. Развлекайся!"
    loop_times:
      1:
        text: "Привет, я Марк! Давай познакомимся с циклами. С помощью цикла ты можешь сказать компьютеру, чтобы он повторял любой набор команд снова и снова, тысячи или даже миллиарды раз."
      2:
        text: "В этой головоломке мы хотим добиться того, чтобы птичка продвинулась вперед на 5 клеток и добралась до свиньи."
      3:
        text: "Мы можем использовать новый блок «повторить», чтобы упростить создание программы."
      4:
        text: "Вместо перетаскивания 5 блоков «двигаться вперед»..."
      5:
        text: "Мы можем поместить блок «двигаться вперед» внутрь блока «повторить» и написать число в блоке, указывающее на количество повторений."
      6:
        text: "Важно отметить: ты можешь вставить несколько команд в блок «повторить»."
      7:
        text: "Приятного использования нового блока «повторить»!"
    loop_until:
      1:
        text: "Привет, я Крис. До того как стать игроком баскетбольного клуба «Майями Хит», я изучал информатику в Технологическом институте Джорджии. Давай опробуем наш новый блок «повторять пока не»."
      2:
        text: "А если мы не знаем, какое расстояние должна преодолеть птичка, чтобы добраться до свиньи?"
      3:
        text: "Если мы поместим блок «двигаться вперед» внутрь блока «повторять, пока не», птичка будет двигаться вперед, ПОКА она не доберется до свиньи (или пока не врежется в стену)."
      4:
        text: 'Вот что важно: как и раньше, мы можем помещать различное количество блоков в блок «повторять пока не», и они все будут повторяться.'
    if:
      1:
        text: "Привет, я Билл! Давай изучим новое базовое понятие: операторы «если». Этот оператор служит для принятия решений компьютером."
      2:
        text: "Ты сам используешь операторы «если» каждый день. Каждое утро перед выходом на улицу ты говоришь: «ЕСЛИ на улице дождь, то мне следует надеть куртку»."
      3:
        text: "Мы можем сделать так, чтобы зомби проверял, есть ли путь налево, и ЕСЛИ он найдет путь налево, мы можем повернуть его туда."
      4:
        text: "Чтобы написать код для этого случая, понадобится перенести блок «повернуть налево» в блок «если»."
      5:
        text: "Если теперь мы поместим блок «двигаться вперед» над ним, а всю конструкцию поместим внутрь блока «повторить», зомби на каждом шагу будет проверять, есть ли здесь поворот налево, и если он есть, то зомби повернет. Команда «повторить» критически важна для того, чтобы проверять возможность поворота на каждом шагу."
      6:
        text: "Операторы «если» занимают в информатике важное место. Одной из первых написанных мною программ была игра «крестики-нолики», и она была построена на таком «если»: ЕСЛИ противник близок к победе, займи нужную ему для победы клетку."
      7:
        text: "Удачи с использованием блока «если»!"
    if_else:
      1:
        text: "Привет, я Салони. Я использую информатику для решения проблем в области здравоохранения и медицины. Давай изучим блок «если иначе». Этот блок напоминает блок «если», но в конце содержит дополнительную часть «иначе»."
      2:
        text: "Если я помещаю блок «двигаться вперед» в место, где содержится команда «выполнить»,», и блок «поверни налево» в место, где содержится команда «иначе», у зомби быть выбор из 2 вариантов. ЕСЛИ дорога впереди свободна, зомби будет двигаться вперед, а ИНАЧЕ (если впереди нет дороги), зомби повернет налево."
      3:
        text: "Так же, как блок «если», блок «если иначе» можно поместить внутрь блоков «повторить», чтобы зомби с помощью блока «если иначе» постоянно проверял во время движения наличие поворота."
      4:
        text: "Теперь отправь этих зомби туда, где им положено быть!"
    if_else_scrat:
      1:
        text: "Оператор «если-иначе» служит для выбора одного из двух вариантов. Давай посмотрим, как мы можем использовать оператор «если-иначе» вместе с нашим приятелем, белкой Скратом."
      2:
        text: "Этот блок выглядит так же, как блок «если», но внизу содержит дополнительную часть с командой «иначе». Если я помещаю блок «двигаться вперед» в ту часть блока «если иначе», где содержится команда «выполнить», и блок «повернуть налево» в ту часть блока «если иначе», где содержится команда «иначе», это значит, что белка Скрат будет двигаться вперед, если впереди есть дорога. Если впереди нет дороги, Скрат повернет налево."
      3:
        text: "Данный оператор служит для принятия решения и выполнения одного из двух действий на основании данного решения. И так же, как с блоками «если», ты можешь размещать блоки «если-иначе» внутри блоков «повторить»."
      4:
        text: "А теперь давай поможем Скрату добыть этот желудь!"
    function:
      1:
        text: "Привет, я Брина, инженер компании Instagram. Функция — определенные строки кода, которые ты хочешь использовать снова и снова; таким образом, вместо многократного написания этого кода ты можешь просто использовать один блок."
      2:
        text: "Давай изучим, как давать определения функций. Определения функций отмечены звездочкой в углу. Имя функции написано в верхней строке."
      3:
        text: "Блоки, размещенные внутри определения, сообщают нам, что делает функция. Так, определение этой функции звучит как «засыпать 5 раз», а функция состоит из блока «повторить» и блока «засыпать»."
      4:
        text: "Определение находится в рабочей области, но наш фермер не может выполнять функцию, пока мы не достанем блок функции «засыпать 5 раз» из категории функций."
      5:
        text: "Пусть работа с функциями будет приятной! "
    loop_while:
      1:
        text: "Привет, я Макинде! Давай изучим блок «пока». "
      2:
        text: "Блок «пока» будет делать все, что ты поместишь внутрь него, ПОКА условие, написанное наверху, ВЕРНО."
      3:
        text: "Например, если фермер стоит на куче, он будет продолжать разбрасывать по 1 лопате земли, ПОКА под ним еще есть куча."
    loop_for:
      1:
        text: "Привет, я Трина, и я работаю в компании Pixar. Я работала над многими фильмами, в том числе над «Шреком»."
      2:
        text: "Это наш новый цикл «счетчик». Он будет выполнять действия снова и снова, и ты можешь каждый раз немного изменять их."
      3:
        text: "В этом примере наш цикл «счетчик» дает команду «считать с помощью счетчика от 50 до 90 с шагом 10» и внутри него размещен блок «нарисовать квадрат». Перетащи блок «счетчик» из группы «Переменные» в ячейку «длина»."
      4:
        text: "Это означает, что наш художник собирается нарисовать квадрат со сторонами длиной 50 пикселей, затем добавить еще 10 пикселей и нарисовать квадрат со сторонами длиной 60 пикселей. Далее он продолжит добавлять по 10 пикселей и рисовать квадраты до тех пор, пока не дойдет до 90. Таким образом, у нас будут квадраты с длиной сторон 50, 60, 70, 80 и 90."
    parameters:
      1:
        text: "Привет, я Жанет, и я работаю инженером в компании Zynga."
      2:
        text: "Что надо делать, если мы хотим нарисовать несколько треугольников со сторонами разной длины?"
      3:
        text: "Мы могли бы написать этот код вручную или использовать функцию с параметрами."
      4:
        text: "Чтобы сделать это, нажми на голубую звездочку в определении функции «нарисовать треугольник». Затем перетащи блок «ввести имя» в блок «ввод»."
      5:
        text: "Теперь, если ты напишешь «длина» в том месте, где указано «x», и нажмешь «Ввод», ты создашь параметр длины для функции."
      6:
        text: "Затем нажми на звездочку. Теперь ты хочешь нажать на категорию «переменные» и перетащить блок «длина» в блок «двигаться вперед» твоего определения функции. И удали старый блок с числом."
      7:
        text: "Чтобы использовать функцию с параметрами, открой категорию «Функции» и перенесите функцию «нарисовать треугольник с длиной»."
      8:
        text: "Теперь ты можешь использовать математический блок для ввода разных чисел, чтобы рисовать треугольники разного размера."
    hoc_wrapup:
      1:
        text: "Поздравляем! В последней решенной тобой головоломке ты написал код, по которому ЛЮБОЙ робот может найти дорогу через лабиринт или туннель любого размера, если он не содержит ответвлений. Робот может быть зомби, птичкой, луноходом или даже самоуправляемым автомобилем."
      2:
        text: "Основные использованные тобой понятия лежат в основе любой программы или приложения, которыми ты когда-либо пользовался.  Мы изучили циклы «повторить», операторы «повторять, пока не», «если» и «если иначе»."
      3:
        text: "Если тебе понравился твой первый час кода, заходи на сайт code.org и продолжай изучение информатики! После прохождения нашего 20-часового курса ты освоишь основы программирования и сможешь начать учиться написанию мобильных приложений, инструкций для автоматизированных устройств, игр и тому подобному."
      4:
        text: "Технологии меняют все, чем мы занимаемся, и совершенно не важно, сколько тебе лет. Программирование — это творческое и занимательное занятие, и ему может обучиться каждый!"
    20_wrapup:
      1:
        text: "Показать заметки, которые скоро будут доступны!"
    frozen_intro:
      1:
        text: "Привет, я Линдси. Я моделирую, продумываю и пишу собственные приложения. Давайте использовать код, чтобы присоединиться к Анне и Эльзе, открывающим магию и красоту льда."
      2:
        text: "Будем кататься на коньках и рисовать на льду снежинки и узоры; создавать зимнюю страну чудес и делиться этим с друзьями."
      3:
        text: "В течение следующего часа ты будешь изучать основы написания кода. Традиционное программирование обычно использует текстовое представление, но мы воспользуемся языком программирования Блокли, использующим визуальные блоки, которые ты можешь перетаскивать и соединять для написания программ. Даже студенты университетов изучают основы таким образом. Но по сути, ты все равно создаешь код."
      4:
        text: "Программа — это набор инструкций, указывающих компьютеру, что делать. Давай создадим код или программу, которая поможет Эльзе нарисовать простую линию. Позже мы воспользуемся ею для создания более сложных узоров."
      5:
        text: "Твой экран разделен на три основные части. Слева — ледяная поверхность, на которой будет выполняться твоя программа. Инструкции для каждого уровня написаны прямо под ней."
      6:
        text: "Средняя часть экрана — это панель инструментов, и каждый из этих блоков — действие, которое Эльза и Анна могут совершить."
      7:
        text: "Белое поле справа — это рабочая среда, в которой мы пишем программу. Чтобы перемещаться по ледяной поверхности, используй блок «двигаться вперед»."
      8:
        text: "Теперь блок «двигаться вперед» означает «двигайся вперед на 100 пикселей». Что произойдет, когда мы нажмем «Выполнить»? Эльза перемещается вперед по экрану на определенное расстояние. Точнее, на 100 пикселей! В сущности пиксели — это крошечные квадратики на мониторе твоего компьютера."
      9:
        text: "Другой блок, который мы используем для этой головоломки, означает «повернуть направо на 90 градусов». И когда мы используем этот блок «повернуть направо», Эльза поворачивает на определенное количество градусов. Ты можешь поэкспериментировать с тем, как сильно поворачивает Эльза. Угол рассчитывается от дороги, расположенной перед Эльзой. Вот это поворот на 90 градусов. А вот это — на 120 градусов."
      10:
        text: "Помни, что можно менять количество пикселей и градусов, нажимая на стрелки рядом с ними."
    frozen_loops:
      1:
        text: "Привет, я Паола! Компьютеры здорово подходят для выполнения повторяющихся действий. Ты можешь считать до 10, 20 или до 100. Но компьютер может считать до миллиарда или триллиона. Он не заскучает и потратит на это лишь несколько секунд. Независимо от того, какое действие выполняет компьютер — рисует, считает или делает еще что-то — компьютеры могут повторять действия сотни или даже миллиарды раз."
      2:
        text: "В программировании мы называем это циклом. Цикл — это когда ты повторяешь свой код снова и снова. В следующей головоломке твоей задачей будет помочь Анне нарисовать квадрат с помощью блока «повторить»."
      3:
        text: "Любой блок кода, который ты поместишь внутрь блока «повторить», будет повторяться последовательно столько раз, сколько ты захочешь."
      4:
        text: "Чтобы нарисовать квадрат, ты можешь 4 раза использовать блоки «двигаться вперед» и «повернуть направо». Но проще будет один раз скомандовать компьютеру «двигаться вперед» и «повернуть направо на 90 градусов», а затем скомандовать повторить эту пару действий 4 раза. Для этого тебе нужно поместить блоки «двигаться вперед» и «повернуть направо» внутрь блока «повторить»."
      5:
        text: "Помни, ты можешь поменять число внутри блока «повторить» на любое другое, и то, что находится внутри этого блока, повторится указанное число раз."
    frozen_functions:
      1:
        text: "Привет, я Крис Бош. Я профессиональный баскетболист и занимался программированием во время учебы в колледже."
      2:
        text: "В информатике очень важно понимать, как сформулировать новую команду. Большинство компьютерных языков содержит лишь около 100 слов или команд. И это настоящее искусство и волшебство — собрать свои собственные новые слова из этих структурных элементов."
      3:
        text: "Как только ты научишь компьютер, как совершать действие, используя данную последовательность команд, ты можешь придумать для этого действия свое имя, так будет проще повторять его в дальнейшем. Когда ты определяешь свою команду и даешь ей название, это называется «функция»."
      4:
        text: "Привет, я Джесс. Когда ты программируешь с помощью блоков, то, если в твоей программе есть набор действий, который ты хотел бы повторить много раз, тебе стоит использовать функции. Например, ты написал код для рисования квадрата."
      5:
        text: "Можно определить это как функцию и назвать ее «создать квадрат»."
      6:
        text: "Теперь у тебя есть новый блок, который можно использовать множество раз, чтобы создать множество квадратов."
      7:
        text: "Многие простые фигуры можно использовать для создания более сложных узоров. В следующей головоломке недавно написанный тобой код для рисования круга можно использовать в качестве новой функции, которая позволит рисовать круги разных размеров. Можешь воспользоваться ею, чтобы помочь Эльзе рисовать на снегу замысловатые и красивые узоры?"
    playlab_intro:
      1:
        text: "Мы будем создавать игры с помощью лаборатории игр. У хороших игр есть сюжет, и в каждом сюжете есть персонажи. Мы будет учиться тому, как сделать так, чтобы наши персонажи — ведьмы, инопланетяне и животные — начали говорить, двигаться и взаимодействовать друг с другом. Пройдя этот учебник до конца, ты сможешь создать игру с нуля и поделиться ей с друзьями."
      2:
        text: "Твой экран разделен на 3 основные части. Слева — игровое пространство, где будет выполняться твоя программа. Инструкции для каждого уровня написаны прямо под ним."
      3:
        text: "Средняя часть экрана — это панель инструментов, и каждый из этих блоков представляет собой фрагмент кода. Белое поле справа — это рабочая среда, в которой мы пишем программу."
      4:
        text: "Для начала тебе нужно присоединить свои блоки к оранжевому блоку «при запуске». Ты можешь соединить вместе несколько блоков, перетаскивая их до тех пор, пока не ты не увидишь желтую линию, тогда они соединятся друг с другом."
      5:
        text: "В этой первой головоломке наш персонаж — пингвин, и мы заставим его сказать «Привет!», перетащив блок «говорить», присоединив его к блоку «при запуске» и введя в него текст «Привет». Также мы можем заставить пингвина двигаться с помощью блоков «двигаться вправо» и «двигаться влево». После того как блоки расставлены по местам, нажми кнопку «Выполнить», чтобы увидеть, как работает твоя программа."
      6:
        text: "Начни, и в конце концов ты сможешь создать свою собственную игру с различными персонажами, которые могут общаться, веселиться, грустить, зарабатывать очки, бросать огненные шары, даже делать так, чтобы другие игроки исчезали. Все зависит от тебя и от того, какую игру ты хочешь создать."
    playlab_events:
      1:
        text: "Теперь мы собираемся изучить то, чем все разработчики игр пользуются каждый день. Это называется события. Событие командует твоей программе ожидать, когда что-то произойдет. Когда это случается, программа выполняет соответствующее действие."
      2:
        text: "Например, событиями могут быть ожидание нажатия кнопки мыши, клавиши со стрелкой или касания сенсорного экрана."
      3:
        text: "Теперь мы собираемся сделать так, чтобы космобот приветствовал землян, когда игрок нажимает на него мышкой. Мы воспользуемся блоком «по щелчку» и прикрепим к нему блок «говорить». Когда игрок нажимает на космобота, происходит выполнение всех действий, заданных для данного блока «по щелчку». Что говорит твой инопланетянин?"
      4:
        text: "Существуют также блоки «при нажатии стрелки». Если ты присоединяешь к ним блоки «двигаться», ты можешь начать двигать своих персонажей вверх, вниз, влево или вправо. Шаг за шагом твоя игра становится более интерактивной."
    playlab_repeat_forever:
      1:
        text: "Это блок «повторять бесконечно». Все блоки, находящиеся внутри этого блока, будут выполняться в течение всей игры."
      2:
        text: "Если ты хочешь, чтобы персонаж постоянно что-нибудь делал без вмешательства игрока, помести эти блоки внутрь блока «повторять бесконечно»."
      3:
        text: "В следующей головоломке наша задача — помочь волшебнику патрулировать границы королевства, непрерывно перемещаясь влево и вправо. Изучение работы команд повторения сбережет тебе кучу времени в будущем, когда ты будешь создавать собственную игру."
    C1_artist_intro:
      1:
        text: "Это твои блоки для рисования. Используй правильный блок, чтобы переместить художника, когда ему понадобится двигаться, чтобы закрасить серые линии."
      2:
        text: "Это блоки прыжков. Когда ты их используешь, художник перемещается, но не рисует, так что воспользуйся ими, чтобы перепрыгнуть на следующую серую линию."
    C1_bee_level_intro:
      1:
        text: "Разве пчелы не суперкруты? В следующем наборе головоломок твоя цель состоит в том, чтобы помочь пчеле облететь цветы, собрать нектар с цветков и долететь до соты, чтобы приготовить мед. Для этого упражнения тебе потребуются блоки «собрать нектар» и «приготовить мед»."
      2:
        text: "В каждом цветке содержится разное количество порций нектара: 1, 2, 3 или больше. Мы знаем, сколько порций нектара в красных цветах; на это указывает маленькая цифра в углу. Так что убедись в том, что ты собрал весь нектар, перед тем, как двигаться вперед. Также в каждой соте может храниться только определенное количество порций меда: 1, 2, 3 или больше. Так что убедись, что ты приготовил столько меда, сколько может храниться в соте."
      3:
        text: "Если ты смог собрать весь нектар и приготовить весь мед, ты успешно решил головоломку и переходишь на следующий уровень. В противном случае тебе необходимо еще раз попытаться решить эту головоломку. Поиграй в нее немного и ощути, каково это — быть «пчелиным» программистом!"
    C1_bee_loops:
      1:
        text: "Цикл — это повторение ряда действий. Заходя в улей для проверки, я смотрю на рамку и затем возвращаю ее на место, таким образом, я повторяю одну и ту же последовательность действий много раз. Процесс зацикливается, повторяя один и тот же ряд действий много раз."
      2:
        text: "На этом уровне мы хотим, чтобы пчела собрала с цветка три порции нектара. Вместо того чтобы использовать три блока «собрать нектар», тебе необходимо использовать блок «повторить», чтобы собрать нектар три раза. Нажми «Выполнить» и посмотри, правильно ли ты все сделал. Прекрасно!"
    C1_bigevent_unplugged:
      1:
        text: "Этот урок называется «большое событие». Он посвящен тому, как мы можем управлять нашими программами и фактически изменять алгоритм выполнения программы по ходу работы с помощью таких событий, как нажатие кнопки или щелчок мыши."
      2:
        text: "На этом уроке тобой будут управлять с помощью бумажного пульта дистанционного управления. Это как видеоигра наяву."
      3:
        text: "Событие — это действие, которое приводит к тому, что что-то происходит. Например, когда ты нажимаешь кнопку мышки, загружается веб-страница. Это событие. Когда ты касаешься экрана своего планшета, чтобы прокрутить страницу, это тоже событие. События являются отличной возможностью позволить пользователям управлять твоей программой каждый раз, когда им это требуется."
      4:
        text: "Все мы реагируем на некоторые вещи. Когда мы голодны, мы идем к холодильнику. Мы слышим, что пришел почтальон и кладет письмо в почтовый ящик, и идем забирать почту. Это точно такие же события, как нажатие кнопки или перемещение джойстика. Это то, что происходит и заставляет нас что-то делать."
      5:
        text: "В видеоиграх есть событие под названием «Обновить», и оно происходит 30 или 60 раз в секунду. Для разработчиков игр это едва ли не более важное событие, чем кнопки или джойстик."
      6:
        text: "Главное событие, которого мы ожидаем, это момент выполнения события «Обновить». И затем мы в этот момент проверяем джойстик. То есть мы говорим: «Хм, нажал ли кто-то кнопку в этот момент? Да или нет?» Без событий игрок не смог бы двигаться, ты не смог бы прыгать и управлять тем, что происходит. Видеоигра перестала бы быть динамичной."
    C1_building_foundation:
      1:
        text: "Когда ты строишь песчаные замки, ты должен понимать, что неудача — это тоже часть процесса. Но если ты проявляешь упорство, у тебя станет получаться все лучше, и это занятие станет для тебя все более увлекательным. Упорство — это самое главное. Держись, тебе понравится."
      2:
        text: "Этот урок называется «создание основы». На нем мы будем работать над заданием, которое должно быть очень трудным. Ты должен будешь придумать, как построить сооружение высотой не ниже одной из этих чашек и достаточно крепкое, чтобы выдержать вес книги."
      3:
        text: "Бывает так, что наше решение не работает. Бывает так, что мы разочарованы и хотим все бросить. Это может происходить неоднократно. Но если мы снова и снова продолжаем попытки сделать все возможное, то мы обязательно добьемся своего в ближайшее время."
      4:
        text: "Упорство означает продолжать действовать, когда тебе по-настоящему хочется все бросить. Если ты хочешь создать что-то новое и особенное, на пути к этому будет множество неудачных попыток."
      5:
        text: "Сохранить упорство можно лишь продолжая действовать и извлекая уроки из своих неудач вместо того, чтобы все бросить из-за разочарования. По большому счету, разочарование означает, что вот-вот произойдет что-то прекрасное. Так что не бросай раньше, чем достигнешь своей цели. Ууууу!"
    C1_getting_loopy:
      1:
        text: "Привет, я Мирал Котб. Я основатель команды Iluminate. В моей работе есть кое-что, что мы используем как для танцев, так и при программировании костюмов со светодиодными элементами. А это циклы! Циклы повторяют действие снова и снова."
      2:
        text: "Повторяя что-то много раз, например, как когда я двигаюсь, чтобы хулахуп продолжал крутиться, я выполняю цикл этого действия. Это цикл. Это цикл. И это цикл."
      3:
        text: "Сегодня мы собираемся устроить танцевальную вечеринку. Мы будем использовать циклы в новом танце. Итерация. Мы изучим циклы с помощью танца. Ты выучишь пару простых движений и будешь повторять их снова и снова, чтобы станцевать танец."
      4:
        text: "Вот движения, которые тебе нужно выучить. Хлопни в ладоши. Положи руки за голову. Положи руки на талию. Подними левую руку вверх. Подними правую руку вверх. Довольно просто, правда? Ты обнаружишь, что можешь сократить количество инструкций, поместив несколько танцевальных движений в циклы."
      5:
        text: "Мы на самом деле используем циклы, когда танцуем. На наших танцорах закреплены компьютеры, объединенные в единую сеть. Я могла бы зажигать подсветку на костюмах танцоров снова и снова, используя циклы. В цикле я могу задать шаг цикла, в котором указываю, что ты хотел бы зациклить действие по зажиганию подсветки на костюмах этих шести танцоров, зажигая ее снова и снова, и, кроме того, увеличивать скорость подсветки с каждым шагом. И все это делается с помощью циклов. Циклы очень важны в информатике, потому что они делают нашу работу быстрее и проще."
    C1_happy_maps_unplugged:
      1:
        text: "Этот урок называется «Веселые карты». Сегодня мы собираемся помочь нашей маленькой пушистой подружке Флурб добраться до своего фрукта."
      2:
        text: "Помоги Флурб найти дорогу к твоему фрукту. Для этого тебе нужно определить, в каком направлении Флурб должна идти, и направлять ее с помощью стрелок. В каком направлении должна двигаться Флурб, чтобы добраться до яблока? Направь ее вверх."
      3:
        text: "Для перемещения тебе нужно очертить путь, по которому нужно двигаться."
      4:
        text: "Создай свой алгоритм, приклеивая стрелки рядом с картой, которую ты пытаешься разгадать. Второй алгоритм такой же, но направлен вниз."
      5:
        text: "Это как программирование на бумаге. Правильно!"
    C1_maze_debugging:
      1:
        text: "Отладка — это обнаружение и исправление ошибок. Существует множество способов отладки. Один из самых простых заключается в пошаговом движении до тех пор, пока ты не найдешь что-то, что идет неправильно. Здесь я пытаюсь сделать сальто назад на бревне, но постоянно падаю."
      2:
        text: "Я шаг за шагом прошла по всем элементам движения и поняла, в чем была моя ошибка. Я неправильно ставила руки на бревно. Так что я попробовала сделать сальто назад на бревне еще раз, держа руки по-новому, и у меня получилось. Я была очень довольна, что выявила и устранила ошибки в своем сальто назад."
      3:
        text: "Изучение процесса отладки мы начнем с помощью набора блоков, уже используемых программой. Ты заметишь, что эти блоки не приводят к выполнению твоей цели. Нам необходимо отладить решение и исправить его. Что пошло не так? Ты заметишь, что тебе нужно было двигаться на запад еще на один блок."
      4:
        text: "Давай исправим это, добавив еще один блок «двигаться на запад», и нажмем «Выполнить», чтобы посмотреть, правильно ли ты все сделал. Ура, ты сделал это!"
    C1_maze_intro_sequencing:
      1:
        text: "В этой головоломке тебе нужно помочь птичке добраться до свиньи. Посмотри на головоломку и определи, какие инструкции тебе необходимо дать."
      2:
        text: "Тебе нужно перетащить блоки с панели инструментов в рабочую среду. Убедись, что они находятся под блоком «при запуске», и когда ты посчитаешь, что у тебя есть правильное решение, нажми «Выполнить» и наблюдай за перемещением птички к свинье."
    C1_maze_loops:
      1:
        text: "Повторение команд — это одна из тех вещей, для которых компьютеры отлично подходят. Тебе будет очень скучно, если тебе придется делать одно и то же много-много раз подряд, потому что ты человек. Но компьютер может повторять одно и то же миллионы или даже миллиарды раз, при этом он не заскучает и сможет сделать это по-настоящему хорошо."
      2:
        text: "Например, если бы я хотел поздравить каждого пользователя Facebook с днем рождения, отправив ему электронное письмо, я мог бы потрать больше ста лет, чтобы все-таки написать все эти письма пользователям. Но с помощью всего нескольких строк кода я могу получить инструмент, который будет отправлять всем пользователям Facebook электронные письма, поздравляя их с днем рождения."
      3:
        text: "Чтобы доставить птичку к свинье на этом уровне... вместо того, чтобы перетаскивать в рабочую среду три блока «двигаться на север», ты используешь блок «повторить». Перетащи блок «повторить» в рабочую среду и введи число 3. Затем перетащи блок «двигаться на север» в блок «повторить» и нажми «Выполнить», чтобы выяснить, правильно ли ты все сделал. Поздравляем, ты сделал это!"
    C1_moveitmoveit_unplugged:
      1:
        text: "Этот урок называется «вперед, вперед». Вместе мы собираемся написать программу, чтобы переместить наших друзей из стартовой точки с изображением компаса в место назначения, где нарисован смайлик."
      2:
        text: "Но смайлик перевернут лицом вниз, и только один человек знает, как туда добраться. Давай начнем писать эту программу."
      3:
        text: "Программа — это алгоритм, закодированный таким образом, что он может быть выполнен машиной. Многие из нас думают, что программа — это что-то, что мы пишем для компьютера. Программы и правда отлично подходят для использования на компьютере, но они также полезны и в других случаях. Ты можешь написать собственную игру или даже запрограммировать робота, чтобы он делал что-то для тебя."
    C1_going_places_safely:
      1:
        text: "Меня зовут Джеремая. Привет! Мне семь лет. Мне нравится играть на компьютере моей мамы, но сначала я всегда спрашиваю разрешения. «Мам, можно мне поиграть на компьютере? Конечно, милый!»"
      2:
        text: "Мне нравится компьютер моей мамы, потому что я могу выходить в интернет. Интернет — это что-то вроде твоего района. Ты можешь ходить в классные места, общаться со своей семьей и друзьями и узнавать много нового."
      3:
        text: "Вчера я был в зоопарке около своего дома. Я видел детеныша зебры. Я сфотографировал его и поменял цвет его полосок, затем надел на него шляпу и добавил фото в свою коллекцию причудливых животных. Потрясающе! Потом я поехал далеко-далеко. Я побывал в Кении. Это страна находится в Африке. Там живет много зебр."
      4:
        text: "Иногда в интернете я общаюсь с людьми, которых я знаю, например, со своей бабушкой, которая живет в другом регионе. Привет, бабушка! Она печет печенье, которое пришлет мне на день рождения. «Вкуснятина, вот бы интернет передавал запах!» Я могу разговаривать с разными людьми в интернете, например, со своим двоюродным братом, но я разговариваю только с людьми, которых знаю."
      5:
        text: "Больше всего мне нравится в интернете то, что здесь можно играть в забавные игры. Счет! Еще мне нравится рисовать и создавать новые штуки и делится ими со своими друзьями. Круто! Иногда я захожу на сайты, где узнаю что-то новое, но я остаюсь только на подходящих для меня сайтах. Ух ты, динозавры!"
      6:
        text: "Интернет — это превеселое место. Но когда ты выходишь в интернет, ты должен быть так же осторожен, как когда ты переходишь улицу в своем районе. Запомни три правила. Правило номер 1: Сначала всегда спрашивай своих родителей. Правило номер 2: Разговаривай только со знакомыми людьми. Правило номер 3: Пользуйся только теми сайтами, которые тебе подходят."
      7:
        text: "Да, это было весело! Пора ужинать. Я выхожу из сети. Жду не дождусь, когда снова подключусь и узнаю, куда еще я смогу заглянуть."
    C1_pair_programming:
      1:
        text: "Сегодня мы собираемся научиться программированию в парах. Программируя в парах, вы работаете как одна команда. Зачем два человека должны делить один компьютер? Потому что одна голова хорошо, а две лучше. Во время программирования в парах ты и твой партнер будете сидеть вместе за одним компьютером и работать над одним проектом."
      2:
        text: "Во время программирования в парах один участник будет водителем, а второй штурманом так же, как при вождении автомобиля. Водитель сидит за компьютером и работает с клавиатурой и мышкой или сенсорным экраном, управляя основными действиями компьютера. Второй участник — штурман. Штурман помогает водителю, отвечая на его вопросы и указывая на возможные трудности или ошибки."
      3:
        text: "Ключом к успеху при программировании в парах является общение. Не допускай оскорблений, будь вежливым и не будь высокомерным штурманом, потому что никто не любит непрошеных советчиков. Ты и твой партнер должны постоянно общаться. Водитель может объяснять, что он делает. А штурман может предложить, что делать дальше."
      4:
        text: "Штурману следует думать об общей картине, а водителю — сосредоточиться на деталях. Обе роли важны. Суть программирования в парах в том, чтобы работать вместе, как одна команда."
    C1_planting_seed:
      1:
        text: "Этот урок называется «Посадка семян», и он поможет нам понять действие алгоритмов. Алгоритмы — это особые инструкции, которые указывают, в каком порядке что-то делается. Даже для таких повседневных действий, как завтрак или чистка зубов, существуют алгоритмы, требующие совершить ряд маленьких шагов, чтобы выполнить задачу."
      2:
        text: "Компьютеры могут быть очень умными, но они понимают тебя, только если ты точно говоришь им, чего ты хочешь, шаг за шагом. Замечательным свойством алгоритмов является то, что если выполнять инструкции по порядку, ты можешь сделать что-то, что ты до этого не умел делать. Это как соблюдать рецепт."
      3:
        text: "Сегодня мы будем сеять семена с помощью алгоритма. Создай собственный алгоритм, разрезав картинки на части. Выбери картинки, которые изображают этапы посадки семян, и расположи их в правильном порядке."
      4:
        text: "А теперь пришло время проверить работу алгоритма. Очень тщательно выполняй пункты алгоритма. Они расположены в правильном порядке? Тебе удалось посадить семечко, следуя этому алгоритму? Это как программирование с картинками!"
      5:
        text: "Когда мы хотим приготовить шоколад, то для этого мы должны выполнить много сложных действий, и каждое из этих сложных действий включает ряд более простых действий. Кроме того существуют различные рецепты или алгоритмы в зависимости от того, каким мы хотим сделать вкус шоколада. Каждое действие важно, даже самое незначительное, так как без одного действия невозможно выполнить все остальные. Крайне важно создавать такие алгоритмы, которые могут быть понятны для других. Поэтому каждое действие должно быть прописано таким образом, чтобы результат всегда оставался одинаковым, независимо от того, кто выполняет действие."
    C1_playlab_storytelling:
      1:
        text: "Настало время проявить свои творческие способности и воспользоваться навыками программирования, чтобы рассказать историю. В твоей истории будут персонажи, и ты сможешь сделать так, чтобы они говорили и взаимодействовали друг с другом. Подумай, какую историю ты хочешь рассказать."
      2:
        text: "Кот всегда боялся собаку, но что будет, если кот выяснит, что собака пытается понравиться? Все начинается с блока «при запуске». Блок «двигаться» будет перемещать твой персонаж, а блок «говорить» заставит его говорить любой текст, который ты введешь."
      3:
        text: "Это блок «когда персонажи сталкиваются», который ты можешь связать с другими блоками."
      4:
        text: "Я делал так, что собака приходила и говорила «Привет», но тогда кот пугался и убегал. Ага, если бы было больше времени, все бы заканчивалось хорошо. Конец!"
    C1_spelling_bee_intro:
      1:
        text: "Это уровень «Пишущая пчела». Используй фрагменты головоломки, чтобы перемещать пчелу. Перемещаясь, она будет собирать буквы и составлять слова."
      2:
        text: "Проверь, сможешь ли ты составить слово, которое приведено в рамке под игровым полем. Но будь осторожен! Перемещение в неправильном направлении добавит ненужные буквы."
    C1_zuck_repeat_loop:
      1:
        text: "Повторение команд — это одна из тех вещей, для которых компьютеры отлично подходят. Тебе будет очень скучно, если тебе придется делать одно и то же много-много раз подряд, потому что ты человек. Но компьютер может повторять одно и то же миллионы или даже миллиарды раз, при этом он не заскучает и сможет сделать это по-настоящему хорошо."
      2:
        text: "Например, если бы я хотел поздравить каждого пользователя Facebook с днем рождения, отправив ему электронное письмо, я мог бы потрать больше ста лет, чтобы все-таки написать все эти письма пользователям. Но с помощью всего нескольких строк кода я могу получить инструмент, который будет отправлять всем пользователям Facebook электронные письма, поздравляя их с днем рождения."
      3:
        text: "В этом примере твоя задача двигать птичку, чтобы она добралась до свиньи. Теперь мы используем блок «повторить» и с легкостью выполним задачу. Ты можешь сделать это, пять раз дав компьютеру команду «двигаться вперед», чтобы каждый раз птичка приближалась к свинье на один шаг, или ты можешь просто один раз дать компьютеру команду «двигаться вперед», а затем указать, что ему нужно повторить эту команду пять раз, и компьютер выполнит те же самые действия."
      4:
        text: "Для этого перетащи команду «двигаться вперед», а затем помести ее внутрь блока «повторить». Также ты можешь нажать на него и указать, сколько раз нужно повторить соответствующий блок, т.е. указать, сколько шагов вперед ты хочешь сделать."
      5:
        text: "И еще кое-что — ты можешь поместить в блок «повторить» столько команд, сколько захочешь. Так, в этом примере ты даешь команду «двигаться вперед», которая будет выполнена пять раз. Развлекайся!"
    C2_artist_intro:
      1:
        text: "Ты даже не сможешь претендовать на участие в гонках, если у тебя нет специалистов в области информатики, потому что автомобили собирают много данных, которые надо анализировать, и необходимы люди, которые могут писать программы, чтобы анализировать данные для повышения производительности."
      2:
        text: "В этих головоломках ты будешь художником, который рисует карандашом разные фигуры. Куда бы художник ни пошел, он рисует линию позади себя."
      3:
        text: "Для перемещения по холсту используй блок «двигаться вперед». Здесь блок «двигаться вперед» означает «двигаться вперед на 100 пикселей». Что произойдет, когда мы нажмем «Выполнить»? Художник перемещается вперед на определенное расстояние, а именно, на 100 пикселей. В сущности пиксели — это крошечные квадратики на мониторе твоего компьютера."
      4:
        text: "Другой блок, который мы используем в этой головоломке, означает «повернуть направо на 90 градусов». И когда мы перетаскиваем его в программу, наш художник поворачивает на определенное количество градусов. Ты можешь поэкспериментировать с тем, как сильно художник должен повернуть. Это поворот на 90 градусов."
      5:
        text: "А вот это — на 120 градусов. Помни, что можно менять эти значения, нажимая на стрелки рядом с количеством пикселей и градусов. Наслаждайся рисованием вместе со своим художником!"
    C2_bee_conditionals:
      1:
        text: "Это блок условного оператора. Он говорит, ЕСЛИ число порций нектара или меда меньше, столько же или больше определенного числа, ТО делай что-нибудь."
      2:
        text: "Это полезно, когда мы не знаем, сколько нектара или меда можем получить, поскольку здесь мы видим вопросительный знак."
      3:
        text: "В этом примере мы собираемся сказать, что ЕСЛИ число порций нектара в фиолетовом цветке больше 0, нужно собрать нектар. Наша пчела поймет это как указание собирать нектар до тех пор, пока он здесь есть. Та-дам!"
    C2_binary_bracelets:
      1:
        text: "Это урок с двоичными браслетами. Мы запрограммируем свои инициалы на браслете, который мы можем носить и показывать всем друзьям!"
      2:
        text: "Двоичное представление — это способ представления информации посредством использования только двух сигналов. Иногда люди воспринимают это, только как 1 и 0. Но ты можешь осуществлять двоичное представление как комбинацию фактически любого набора противоположных понятий, таких как включить и выключить, вверх и вниз, внутри и снаружи."
      3:
        text: "Привет, я Орион, и я программирую роботов в Play.im. Устройства искусственного интеллекта всех компьютеров и роботов на самом базовом уровне представляют собой маленькие электронные ворота. Когда ворота открыты, электричество может проникать сквозь них, а когда закрыты — не может."
      4:
        text: "Пример использования двоичного представления в механизме робота — это глаза робота. Глаза робота — это светодиодные лампы, которые либо включены, либо выключены. Это двоичная система, один вариант или другой. Мы можешь использовать эти лампы для представления двоичных чисел. Если у нас есть множество роботов, мы можем сказать, что первый робот на 1 месте, второй робот на 2 месте, третий робот на 4 месте и т.д. Вот так ты представляешь двоичное число. Роботы будут делать это с помощью своих двоичных глаз и отсчитают его для тебя."
    C2_conditionals_with_cards:
      1:
        text: "Этот урок называется «условные операторы с картами». Каждый день ты принимаешь решения на основании того, что ты видишь и слышишь."
      2:
        text: "Я хочу пойти погулять в парк, но сначала я должен решить, брать с собой зонтик или нет. И я выглядываю в окно. Если на улице облачно, я возьму зонтик. Иначе я возьму солнечные очки. Я думаю, что мне стоит взять зонтик. От того, что я вижу и слышу, зависит, что я беру в парк."
      3:
        text: "Условные операторы используются также и в играх. Сегодня мы потренируемся использовать условные операторы с помощью игры в карты. В этой игре карта, которую я вытягиваю, указывает, что должны делать мои друзья. Если я вытягиваю семерку, все хлопают в ладоши. Иначе все говорят «оооо». Давай попробуем! «Оооо» «здорово получилось»"
      4:
        text: "Бьюсь об заклад, что ты можешь придумывать еще более веселые игры с условными операторами. Попробуй! Условные операторы — это то, что заставляет думать, что у компьютеров есть интеллект. Компьютерная программа, содержащая условные операторы, может реагировать на поступки пользователя и менять ход его действий."
      5:
        text: "Подумай о своей любимой видеоигре. За одни действия ты зарабатываешь больше очков, чем за другие? Это происходит потому, что компьютер использует условные операторы. Так компьютер принимает решения. Как насчет того, что ты заработаешь десять очков, если коснешься цели? Иначе ты потеряешь три очка. Когда ты знаешь, как работают условные операторы, ты можешь создавать захватывающие игры любого типа."
    C2_artist_debugging:
      1:
        text: "Здесь у нас уже есть несколько блоков в рабочей среде. Но там что-то неправильно."
      2:
        text: "Давай отладим этот код: замедлим скорость и посмотрим, как выполняется программа, шаг за шагом проверяя каждый блок."
      3:
        text: "О, тут ошибка! Длина усов кота 75 пикселей, а не 25."
    C2_bee_debugging:
      1:
        text: "Ты что-нибудь слышал о процедуре отладки программы? Таким способом ты выясняешь, что не работает. Отлаживая код, ты выявляешь и устраняешь ошибки."
      2:
        text: "Здесь нам дано несколько блоков в рабочей среде. Мы будем использовать кнопку «Шаг», чтобы двигаться по блокам шаг за шагом и увидеть, является ли это решение правильным и где нам может потребоваться его исправить."
      3:
        text: "Похоже, наша ошибка здесь! Нам нужен еще один блок «двигаться вперед». Кнопка «Шаг» помогает нам выполнять отладку сложных мест, определяя, где ошибка, чтобы мы могли ее исправить."
    C2_digital_footprint:
      1:
        text: "Ты носишь шапку на голове, а твой мозг говорит тебе, где ты находишься, и заставляет тебя думать о зоопарке и здороваться с людьми! Когда ты онлайн, хорошо подумай, прежде чем сообщать кому-либо информацию о себе, и помни о безопасности и сохранении частного пространства для своей жизни! Не двигайся от головы до пальцев ног, подумай об этом. Не двигайся от ступней до носа, думай в интернете!"
      2:
        text: "Используй сердце, чтобы расти и расти, чтобы на твоих щеках был здоровый румянец и чтобы делать валентинки и признаться кому-то в любви! Используй свое сердце, когда ты онлайн, почувствуй, что правильно, и всегда будь доброжелателен, покажи своим друзьям, что ты их уважаешь, чтобы быть открытым и милым, когда ты в интернете. Не двигайся от головы до пальцев ног, подумай об этом. Не двигайся от ступней до носа, думай в интернете!"
      3:
        text: "Используй свои руки, чтобы обнять домашнего питомца, защитить одежду от дождя, носить свои любимые свитеры, летать и фантазировать. Используй свои руки, когда ты онлайн, чтобы сделать перерыв и найти временной баланс, чтобы отложить свой гаджет и найти дерево, чтобы залезть на него. Не двигайся от головы до пальцев ног, подумай об этом. Не двигайся от ступней до носа, думай в интернете!"
      4:
        text: "Используй свой живот, чтобы хранить в нем еду, слушать его урчание, прыгать животом в воду и чувствовать пузырьки газа в лимонаде. Используй свой живот, когда ты онлайн, чтобы уметь узнавать определенные знаки и позволять им руководить тобой и говорить тебе, когда что-то не в порядке. Не двигайся от головы до пальцев ног, подумай об этом. Не двигайся от ступней до носа, думай в интернете!"
      5:
        text: "Так что думай головой, чувствуй сердцем, находи баланс руками, прислушивайся к себе, когда ты онлайн. Используй свои ноги, чтобы бегать и пинать мяч, прыгать и скакать на кузнечике, танцевать за углом и вприпрыжку бегать в своих «ароматных» носках. Используй свои ноги, когда ты онлайн, чтобы давать отпор обидчикам, заходящим слишком далеко, и помнить о том, чтобы не терять достоинства, быть милым с большими и маленькими."
      6:
        text: "Не двигайся от головы до пальцев ног, подумай об этом. Не двигайся от ступней до носа, думай в интернете! Так что думай головой, чувствуй сердцем, находи баланс руками, прислушивайся к себе, давай отпор на ногах. Не двигайся от головы до пальцев ног, подумай об этом. Не двигайся от ступней до носа, думай в интернете!"
    C2_digital_footprint_v2:
      1:
        text: "Каждый раз, когда ты выходишь онлайн, ты оставляешь след, который можно найти, скопировать, передать, распространить и нельзя стереть. Какие цифровые следы ты оставляешь? Какие цифровые следы ты хочешь оставлять?"
    C2_graph_paper:
      1:
        text: "Этот урок называется «Программирование на бумаге в клеточку», и он посвящен алгоритмам. Сегодня мы научимся писать программы, чтобы показать друг другу, как воссоздавать простые черно-белые изображения, используя только нарисованные от руки стрелки."
      2:
        text: "Алгоритм — это перечень инструкций для выполнения задания. Мы выполним этот набор алгоритмов, чтобы сделать чашу. Алгоритмы очень полезны, когда тебе нужно, чтобы кто-то еще понял, как выполнить какое-то действие."
      3:
        text: "Если ты пишешь алгоритм для компьютера, то тебе нужно разделить его на очень маленькие шаги. Итак, заканчивай этот ряд и переходи к следующему, а затем к следующему, и ты выполнишь задачу."
      4:
        text: "Я пользуюсь алгоритмами в своей работе. Если я запишу все шаги, я могу снова сделать такой же предмет или могу научить кого-то тому, как его сделать. Положи стеклянную заготовку в печь для обжига, сплавь стеклянные элементы вместе, следуй остальным инструкциям, чтобы сделать чашу. Алгоритмы дают тебе план действий для решения определенной задачи."
    C2_artist_loops:
      1:
        text: "Сейчас мы воспользуемся блоком «повторить», который поможет нам сэкономить шаги при программировании действий художника. У нас уже есть несколько блоков в рабочей среде, но они лишь помогут нам начать."
      2:
        text: "Чтобы зациклить эти блоки четыре раза (чтобы нарисовать целый квадрат), мы всего лишь перетащим в рабочую среду блок «повторить» и поместим внутрь него блоки «двигаться вперед» и «повернуть направо». Когда мы нажмем «Выполнить», художник повторит эти шаги четыре раза и нарисует квадрат."
    C2_bee_loops:
      1:
        text: "Цикл — это повторение ряда действий. Заходя в улей для проверки, я смотрю на рамку и затем возвращаю ее на место. Я повторяю одну и ту же последовательность действий много раз. Процесс зацикливается, повторяя один и тот же ряд действий много раз."
      2:
        text: "Это блок «повторить». Все, что ты поместишь внутрь блока «повторить», будет повторяться такое количество раз, какое ты укажешь. Например, на этом уровне вместо того, чтобы перетаскивать блоки «двигаться вперед» и «собрать нектар» три раза, мы перетащим их только один раз и трижды повторим эти действия. Это намного проще!"
    C2_maze_intro:
      1:
        text: "Традиционное программирование использует текстовое представление, но мы воспользуемся языком программирования Блокли, использующим визуальные блоки, которые ты перетаскиваешь и соединяешь для написания программ. Но по сути, ты все равно создаешь код. Для начала мы напишем код программы, которая поможет этой сердитой птичке (Angry Bird) пройти через лабиринт, чтобы добраться до злых свиней, укравших ее яйца."
      2:
        text: "При работе с Блокли экран делится на три основные части. Слева — лабиринт с птичкой, где будет выполняться твоя программа. Инструкции для каждого уровня написаны прямо под лабиринтом. Средняя часть экрана — это панель инструментов, и каждый из этих блоков представляет собой понятную для птички команду. Белое поле справа — это рабочая среда, в которой мы пишем программу."
      3:
        text: "Что произойдет, если я перетащу блок «двигаться» в рабочую среду и нажму «Выполнить»? Птичка переместится вперед на одну ячейку сетки. А если я хочу, чтобы птичка выполнила какое-то действие после перемещения на одну клетку? Я могу добавить в нашу программу другой блок."
      4:
        text: "Я собираюсь выбрать блок «повернуть направо» и перетаскивать его под блок «двигаться», пока не появится желтая стрелка. Тогда я отпущу свой блок и два блока будут соединены вместе. Когда я снова нажму «Выполнить», птичка будет выполнять команды, соединенные вместе в нашей рабочей среде, от верхнего блока к нижнему."
      5:
        text: "Если ты захочешь удалить блок, просто вытащи его из набора блоков и перетащи в корзину. После начала выполнения программы ты всегда можешь нажать на кнопку «Сброс», чтобы вернуть птичку в начальную позицию. Давай зададим этим свиньям!"
    C2_paper_airplanes:
      1:
        text: "Этот урок называется «Алгоритмы из повседневной жизни». Алгоритмы описывают вещи, которые люди делают каждый день. И рецепты печенья, и инструкции для строительства скворечника — это алгоритмы повседневных действий."
      2:
        text: "Сегодня мы будем разрабатывать, создавать и тестировать алгоритм создания бумажного самолетика. Но сначала нам нужно разбить этот большой проект на легковыполнимые маленькие шаги. Чтобы сделать бумажный самолетик, нам нужно решить, какие действия выполнить и в каком порядке."
      3:
        text: "Создавая свой алгоритм, ты прежде всего порежешь картинки на части. Затем ты выберешь 6 картинок, на которых изображены шаги, необходимые для того, чтобы сделать бумажный самолетик, и разместишь эти картинки в правильном порядке. После того как ты разместишь все картинки в нужном порядке, ты обменяешься алгоритмами с другой командой учеников, чтобы протестировать алгоритмы и проверить, работают ли они. Хорошо продуманный алгоритм крайне важен для создания самого лучшего бумажного самолетика."
      4:
        text: "Если мы хотим приготовить шоколад, нам нужно выполнить много сложных действий. И каждое из этих сложных действий включает ряд более простых действий. Кроме того, существуют различные рецепты или алгоритмы в зависимости от того, каким мы хотим сделать вкус шоколада. Каждое действие важно, даже самое незначительное. Потому что без одного действия невозможно выполнить все остальные. Крайне важно создавать такие алгоритмы, которые могут быть понятны для других. Поэтому каждое действие должно быть прописано таким образом, чтобы результат всегда оставался одинаковым, независимо от того, кто выполняет действие."
    C2_playlab_createstory:
      1:
        text: "До сих пор ты создавал анимацию или историю, в которой происходит одно и то же каждый раз, когда ты ее запускаешь. Теперь ты можешь создать интерактивную игру, в которую действительно можно поиграть."
      2:
        text: "Вот несколько новых блоков, которыми можно пользоваться. Это блок «при нажатии стрелки» и блок «переместить персонаж». Ты можешь соединить эти блоки вместе, чтобы перемещать персонаж при помощи клавиш со стрелками. Также здесь приведены блоки, которые выполняются, когда персонажи сталкиваются или когда на них нажимают мышкой. Освой их и развлекайся!"
    C2_relay_programming:
      1:
        text: "Сегодня мы займемся эстафетным программированием. Это умение программировать в стрессовых ситуациях и отлаживать ошибки, которые иногда случаются, когда ты работаешь очень быстро или в команде. С помощью программирования на бумаге в клеточку мы имитируем процесс написания кода, а с помощью эстафетных гонок — стремление успеть к сроку сдачи работы."
      2:
        text: "В процессе эстафетного программирования команды будут бегать на скорость, чтобы завершить программу на бумаге в клеточку. Ты должен будешь проверить работу своего товарища по команде или отладить ее, исправить ошибки, если они есть, добавить свою стрелку, пробежать обратно и коснуться своего товарища по команде."
      3:
        text: "Программисты постоянно используют процедуру отладки для обнаружения и исправления ошибок в своих алгоритмах и коде. Существует множество способов отладки. Один из самых простых заключается в пошаговом движении до тех пор, пока ты не найдешь ошибку и не исправишь ее."
      4:
        text: "Здесь я пытаюсь сделать сальто назад, но постоянно падаю. Я шаг за шагом прохожу по всем элементам движения и понимаю, в чем была моя ошибка. Мой тренер показал мне, что моя ошибка заключалась в неправильной постановке рук на бревне. Так что я попробовала сделать сальто назад на бревне еще раз, держа руки по-новому, и у меня все получилось! Я была очень довольна, что выявила и устранила ошибки в своем сальто назад. Мы разобрались! Отладка — это обнаружение и исправление ошибок. Отлично, хорошая работа!"
    C2_zuck_repeat_loop:
      1:
        text: "Повторение команд — это одна из тех вещей, для которых компьютеры отлично подходят. Тебе будет очень скучно, если тебе придется делать одно и то же много раз подряд, потому что ты человек. Но компьютер может повторять одно и то же миллионы или даже миллиарды раз, при этом он не заскучает и сможет сделать это по-настоящему хорошо."
      2:
        text: "Например, если бы я хотел поздравить каждого пользователя Facebook с днем рождения, отправив ему электронное письмо, я мог бы потрать больше ста лет, чтобы все-таки написать все эти письма пользователям. Но с помощью всего нескольких строк кода я могу получить инструмент, который будет отправлять всем пользователям Facebook электронные письма, поздравляя их с днем рождения. Вот что такое циклы и почему они так значимы и являются тем, что компьютеры могут делать очень хорошо."
      3:
        text: "В этом примере твоя задача заключается в перемещении птички, чтобы она добралась до свиньи.  Теперь мы используем блок «повторить» и с легкостью выполним задачу. Ты можешь сделать это, пять раз дав компьютеру команду «двигаться вперед», чтобы каждый раз птичка приближалась к свинье на один шаг."
      4:
        text: "Или ты можешь просто один раз дать компьютеру команду «двигаться вперед», а затем указать ему повторить эту команду 5 раз, и компьютер выполнит те же самые действия. Для этого перетащи команду «двигаться вперед», а затем помести ее внутрь блока «повторить». Также ты можешь нажать на него и указать, сколько раз нужно повторить соответствующий блок, т.е. указать, сколько шагов вперед ты хочешь сделать."
      5:
        text: "Теперь еще кое-что — ты можешь поместить в блок «повторить» столько команд, сколько захочешь. Так, в этом примере ты даешь команду «двигаться вперед», которая будет выполнена пять раз. Отлично, ты хорошо поработал, развлекайся!"
    C3_artist_functions:
      1:
        text: "Одна из лучших вещей в компьютерном программировании — это то, что один раз научив компьютер выполнять действие, ты можешь вызывать эту функцию снова. Ты присваиваешь ей имя и потом можешь вызывать ее. Это и в самом деле может расширить возможности языка."
      2:
        text: "Работая над программой, которую мы написали, мы научились рисовать квадрат, перемещаясь и поворачивая четыре раза. Мы можем взять эту функцию и присвоить ей имя «нарисовать квадрат», так что в любой момент, когда мы захотим сделать это, мы просто говорим «нарисовать квадрат», и программа возвращается в начало и обращается к этой функции, этому коду. Она все сделает за нас. Мы добавили это понятие в наш язык программирования."
    C3_artist_intro:
      1:
        text: "Ты даже не сможешь претендовать на участие в гонках, если у тебя нет специалистов в области информатики, потому что автомобили собирают много данных, которые надо анализировать, и необходимы люди, которые могут писать программы, чтобы анализировать данные для повышения производительности."
      2:
        text: "В этих головоломках ты будешь художником, который рисует карандашом разные фигуры. Куда бы художник ни пошел, он рисует линию позади себя."
      3:
        text: "Для перемещения по холсту используй блок «двигаться вперед». Здесь блок «двигаться вперед» означает «двигаться вперед на 100 пикселей». Что произойдет, когда мы нажмем «Выполнить»? Художник перемещается вперед на определенное расстояние, а именно, на 100 пикселей. В сущности пиксели — это крошечные квадратики на мониторе твоего компьютера."
      4:
        text: "Другой блок, который мы используем в этой головоломке, означает «повернуть направо на 90 градусов». И когда мы перетаскиваем его в программу, наш художник поворачивает на определенное количество градусов. Ты можешь поэкспериментировать с тем, как сильно художник должен повернуть. Это поворот на 90 градусов."
      5:
        text: "А вот это — на 120 градусов. Помни, что можно менять эти значения, нажимая на стрелки рядом с количеством пикселей и градусов. Наслаждайся рисованием вместе со своим художником!"
    C3_artist_nested_loops:
      1:
        text: "Когда ты размещаешь цикл внутри другого цикла — это называется вложенный цикл. Например, здесь нам дан код, который рисует один треугольник со сторонами длиной 100 пикселей, используя блок «повторить несколько раз», которому присвоено значение «три», по числу сторон треугольника."
      2:
        text: "Но мы хотим нарисовать шесть треугольников. Чтобы сделать это, мы возьмем этот цикл и поместим его внутрь другого блока «повторить несколько раз». Очень здорово!"
    C3_bee_conditionals:
      1:
        text: "Это блок условного оператора. Он говорит, ЕСЛИ число порций нектара или меда меньше, столько же или больше определенного числа, ТО делай что-нибудь."
      2:
        text: "Это полезно, когда мы не знаем, сколько нектара или меда можем получить, поскольку здесь мы видим вопросительный знак."
      3:
        text: "В этом примере мы собираемся сказать, что ЕСЛИ число порций нектара в фиолетовом цветке больше 0, нужно собрать нектар. Наша пчела поймет это как указание собирать нектар до тех пор, пока он здесь есть. Та-дам!"
    C3_bee_debugging:
      1:
        text: "Ты что-нибудь слышал о процедуре отладки программы? Таким способом ты выясняешь, что не работает. Отлаживая код, ты выявляешь и устраняешь ошибки."
      2:
        text: "Здесь нам дано несколько блоков в рабочей среде. Мы будем использовать кнопку «Шаг», чтобы двигаться по блокам шаг за шагом и увидеть, является ли это решение правильным и где нам может потребоваться его исправить."
      3:
        text: "Похоже, наша ошибка здесь! Нам нужен еще один блок «двигаться вперед». Кнопка «Шаг» помогает нам выполнять отладку сложных мест, определяя, где ошибка, чтобы мы могли ее исправить."
    C3_bee_functions:
      1:
        text: "В информатике очень важно понимать, как формулировать новые команды, добавлять свои собственные слова в язык программирования. Большинство компьютерных языков содержит лишь около ста слов или команд. Это искусство и волшебство — собрать свои собственные новые слова из этих структурных элементов."
      2:
        text: "Мы делаем все это, когда занимаемся спортом. Например, занимаясь баскетболом, ты начинаешь с изучения того, как вести мяч, делать бросок из-под корзины, выполнять подбор. После того как ты изучил эти базовые движения, ты изучаешь новые движения и соединяешь вместе эти структурные элементы, как это делается в комбинациях «двойка» или «игра в стенку». Затем ты можешь делать более сложные игровые комбинации, отталкиваясь от этих элементов. Когда ты изучишь эту игру и присвоишь ей имя, все игроки в команде будут знать, как в нее играть."
      3:
        text: "Точно так же, как только ты научишь компьютер, как совершать действие, используя данные последовательности команд, ты можешь придумать для этого действия свое имя, так будет проще повторять его в дальнейшем. Когда ты определяешь свою команду и даешь ей название, это называется «функция». А сейчас мы воспользуемся функциями, чтобы помочь пчеле."
      4:
        text: "В этом примере наша функция называется «собрать 2 порции нектара», это вот этот зеленый блок. Мы узнаем, какое действие выполняет функция «собрать 2 порции нектара», заглянув в этот серый блок, который является определением функции. Если мы заглянем внутрь него, то увидим, что функция «собрать 2 порции нектара» берет порцию нектара и затем снова берет порцию нектара. Всегда обращай внимание на то, что находится внутри серого блока, так ты узнаешь, что могут делать эти зеленые блоки функций."
    C3_bee_nested_loops:
      1:
        text: "Теперь мы используем для помощи пчеле вложенные циклы. Нам уже предоставлен начальный фрагмент кода, который командует пчеле двигаться вперед и собрать нектар три раза, а затем повернуть направо. Давай возьмем этот фрагмент кода целиком, вложим его внутрь другого блока «повторить» и зададим повтор этого блока три раза. Готово!"
    C3_bounce:
      1:
        text: "Ты будешь работать над своей собственной игрой в шары, которой ты сможешь поделиться с друзьями! Как круто!"
      2:
        text: "Для начала мы должны установить связь между элементами управления платформой и клавишами стрелок на нашей клавиатуре."
      3:
        text: "Мы можем сделать это, присоединив блок «при нажатии левой стрелки» к блоку «двигаться налево», а блок «при нажатии правой стрелки» к блоку «двигаться направо». Попробуй это сделать, и ты в два счета напишешь программу для своей игры в шары!"
    C3_computational_thinking:
      1:
        text: "Этот урок посвящен вычислительному мышлению. Иногда изучение новой игры может даваться сложно, правда? Поначалу она может показаться очень запутанной, а иногда нет никого, кто научил бы тебя правилам, так что тебе приходится выяснять их самостоятельно."
      2:
        text: "Хорошие новости заключаются в том, что ты можешь улучшить свои способности к самостоятельному постижению определенных вещей, если тебе известны некоторые хитрости, связанные с мышлением. Эти хитрости представляют собой уникальные способы рассмотрения и решения задач. В ходе этого урока ты изучишь четыре таких хитрости и потренируешься использовать их со своими друзьями для выяснения правил игры."
      3:
        text: "Когда ты разбиваешь большую задачу на более мелкие части, ты используешь свой мозг, чтобы разложить большую задачу на составляющие. После того как ты разложил большую задачу на несколько более мелких задач, мы можешь переходить к нашей следующей хитрости, которая называется сопоставление с образцом."
      4:
        text: "Это когда мы ищем сходство между вещами. Когда я нахожу одинаковые элементы, я могу определить, какие элементы отличаются. Когда я удаляю эти различия, это называется «абстрактное представление»."
      5:
        text: "После того как я определил шаги для решения задачи, я могу расположить эти шаги в особом порядке, именуемом алгоритмом, так что любой человек может использовать мои инструкции для решения такой задачи. Мы собираемся использовать эти четыре шага, чтобы выяснить, как играть в игру без правил. К концу игры ты сможешь играть в любую игру, которая похожа на эту!"
    C3_crowdsourcing:
      1:
        text: "Этот урок называется «краудсорсинг». На этом уроке мы с помощью колоды карт поймем, насколько проще делать некоторые вещи в группе вместо того, чтобы пытаться сделать их все в одиночку. Так что захвати несколько друзей, чтобы вместе сделать что-нибудь потрясающее. Использование коллективных ресурсов (краудсорсинг) — это получение помощи от большой группы людей, чтобы быстрее сделать какое-нибудь дело."
      2:
        text: "В информатике мы все время используем коллективные ресурсы. Тысячи любителей и профессионалов объединяют свои компьютеры для поиска среди миллиардов и миллиардов фрагментов информации. Ищешь следующее простое число Мерсенна или свидетельства возможных контактов с инопланетянами?"
      3:
        text: "Когда ты смотришь фильм, каждая его секунда состоит из 24 отдельных изображений, которые мы называем кадрами. И каждое из этих изображений необходимо создать и визуализировать, а потом скомпоновать их все вместе. Мы все (я и моя команда) — разработчики программного обеспечения. Мы все вместе работаем над созданием компонента программного обеспечения, который фактически создает изображение, создает конечное изображение, которое ты видишь на экране. Это инструмент, которым художники и прочие разработчики пользуются в рамках своей командной работы и своих технологических процессов, чтобы иметь возможность создавать такие изображения, которые они хотят видеть на экране."
      4:
        text: "Например, в мультфильме «В поисках Немо», когда Краш, Прыск и все их друзья плывут в потоке Восточно-Австралийского течения. Ты видишь изображения потока воды, видишь краски на спине черепашки, видишь бока рыб. Все эти вещи созданы с помощью математических вычислений и компьютерных программ, которые мы пишем, и которые мы затем предоставляем художникам, а они используют их, чтобы создать то самое конечное изображение, внести в него корректировки и сделать так, чтобы оно выглядело красивым и увлекательным."
    C3_dice_race:
      1:
        text: "Этот урок называется «гонки кубиков». Практически каждому нравится играть в компьютерные игры. Задумывался ли ты когда-нибудь над тем, как компьютерные программисты превращают этапы игры в программу? Первый этап создания компьютерных игр и решения любых задач требует обдумывания и планирования."
      2:
        text: "Результатом этапа обдумывания решения задачи становится алгоритм, представляющий собой пошаговый план решения задачи или выполнения задания. На этом уроке ты создашь алгоритм для игры «гонки кубиков». Затем ты попросишь своих друзей испытать свой план, чтобы посмотреть, могут ли они следовать ему и играть в игру. Когда программист убеждается в правильности этапов плана, наступает время преобразовать алгоритм в программу с помощью языка, понятного компьютеру."
      3:
        text: "Почти все наши повседневные действия требуют алгоритма, перечня действий, которому ты можешь следовать при выполнении задания. Вспомни о подготовке к школе, планировании веселого дня со своими друзьями или приготовлении перекуса. Для выполнения любой из этих задач тебе понадобится разделить ее на более мелкие этапы, и в ряде случаев они должны выполняться в определенном порядке."
      4:
        text: "Вспомни о приготовлении бутерброда. Неважно, какой ингредиент ты достанешь из шкафчика первым. Но намазать арахисовое масло ты сможешь только после того, как откроешь банку. Компьютерам требуются алгоритмы и программы, чтобы показывать, как делать даже самые простые вещи, которые мы можем делать, даже не задумываясь об этом."
      5:
        text: "Алгоритм — это попытка представить, что должно произойти, тогда как программа — это настоящие инструкции, которые даются компьютеру, чтобы это произошло. Алгоритм должен быть преобразован в программу перед тем, как компьютер сможет выполнить его. Иногда сложно осуществить разбитие задания на этапы, называемое алгоритмом. Но как с любым новым навыком, с практикой приходит легкость."
    C3_farmer_while:
      1:
        text: "Циклы с проверкой условия очень похожи на то, что ты делаешь в повседневной жизни. Представь, что ты моешь свою машину; ты будешь продолжать тереть ее щеткой до тех пор, пока она не станет чистой. Пока она не стала чистой, продолжай оттирать ее. Ты все время оцениваешь эти вещи."
      2:
        text: "У нас есть новый блок для того, чтобы помочь твоему фермеру выйти из сложной ситуации. Он называется «блок с проверкой условия». На самом деле это довольно просто. До тех пор, пока верхнее утверждение истинно, выполняй определенное действие. Например, до тех пор пока здесь есть куча, перемещай по одной полной лопате. Давай, попробуй проделать это со своим фермером."
    C3_functional_suncatchers:
      1:
        text: "Этот урок посвящен функциональным витражам. Ты будешь создавать эти симпатичные витражи с помощью функций. Создание одного такого витража состоит из нескольких действий. Некоторые действия тебе придется повторять много раз."
      2:
        text: "Первый этап упрощения процесса создания витража заключается в том, чтобы выяснить, какие действия нам придется повторять снова и снова. Мы можешь сгруппировать эти действия в то, что мы называем функцией."
      3:
        text: "Но процесс создания красивого витража состоит не только в том, чтобы следовать точно выверенным действиям. Иногда мы хотим проявить творческую активность и изменить цвет используемых бусин. Мы можем сделать каждый витраж неповторимым, если будем использовать бусины разных цветов."
      4:
        text: "Твой витраж будет отражать твою индивидуальность, если ты научишься думать о бусинах как о переменных (это слово означает место, заполняемое информацией, которая может меняться). Развлекайся, создавая красивые витражи с помощью функций и переменных!"
    C3_internet:
      1:
        text: "Весь этот урок посвящен интернету. Интернет — это очень оживленное место, он похож на дорогу с интенсивным движением. Сообщения похожи на машины, которые проносятся мимо, стремясь в места своего назначения. Сообщения перемещаются по интернету очень быстро."
      2:
        text: "Получение представления о том, как работает интернет, поможет тебе понять, что происходит, когда ты им пользуешься. Ты узнаешь, как сообщения с твоего компьютера достигают любимого веб-сайта, а сообщения от друга попадают в ящик электронной почты. Точно так же, как проще ориентироваться на оживленных трассах, когда ты знаешь эти трассы и можешь читать дорожные знаки, путешествие по интернету становится не таким сложным, если тебе известно, что происходит за кулисами."
      3:
        text: "Отправка сообщений в интернете немного похожа на отправку сообщений обычной почтой, но есть некоторые отличия. Я на сайте Google.com. Это число — IP-адрес этого сайта. Ты можешь представлять себе IP-адрес как свой обратный адрес на конверте. Представим, что я хочу отправить сообщение по почте кому-то в офисе, расположенном снизу. Видишь URL-адрес и IP-адрес на той двери? Я написал свое сообщение и нажал «Отправить»."
      4:
        text: "В отличие от почтовой службы первое, что делает интернет — разбивает сообщение на мелкие фрагменты, чтобы его было проще отправить. Эти мелкие фрагменты называются пакетами. Каждый пакет сообщения поочередно доставляется в место назначения. Эти пакеты объединяются вместе в нужном порядке, так что получатель может прочесть письмо правильно. Конечно, чтобы узнать, как работает интернет, нужно узнать немало других вещей, но это отличное начало. Ты на пути к тому, чтобы стать продвинутым пользователем интернета! Обязательно расскажи о том, что ты изучил, своей семье и друзьям!"
      5:
        text: "Меня зовут Аманда Кэмп, и я работаю разработчиком программного обеспечения в компании Google. Я вхожу в группу, которая работает с сервером баз данных, сохраняющим профили и контакты. В ходе своей работы мы много размышляем над тем, как можно пересылать контакты на другие устройства, такие как твой телефон. У большинства людей очень много контактов (можно сказать,1000 контактов), и мы не хотим пересылать все эти контакты на твой телефон за один раз, поскольку это будет слишком большое сообщение. Подобно тому, как интернет разбивает большие сообщения на пакеты, мы используем понятие, которое называется постраничная организация памяти, пользуясь которой, мы можем отправлять на твой телефон только по 100 контактов за один раз, дать телефону возможность ответить и запросить следующие 100 контактов."
      6:
        text: "Самым захватывающим в программном обеспечении является то, что оно может оказывать воздействие на весь мир. Я начала учиться программированию, когда мне было около девятнадцати. По-моему, я уже была на втором или третьем курсе колледжа. Первая программа, написание которой я помню, переводила градусы по Цельсию в градусы по Фаренгейту. Мне нравится программировать, потому что мне нравится помогать людям. В Google я могу писать программы, которые помогают людям по всему миру, и это действительно ошеломляющий и захватывающий опыт."
    C3_maze_conditionals:
      1:
        text: "Люди принимают решения каждый день. Например, перед тем, как выйти на улицу, ты используешь оператор «если», который говорит «если на улице дождь, то мне нужно взять куртку». Компьютеры очень подходят для решения таких типов выражений, потому что они могут выполнить эти выражения с достоверным результатом и невероятной скоростью. Фактически компьютерная программа содержит в себе немного математических вычислений и несколько операторов «если», которые принимают решение."
      2:
        text: "Блок «если» помогает зомби принять решение. Он что-то проверяет. Например, воспользуемся блоком, который спрашивает «есть ли здесь дорога налево?», и поместим в него команду «повернуть налево». Мы командуем зомби проверить все вокруг, выяснить, есть ли здесь дорога налево, и если она есть, то повернуть."
      3:
        text: "Затем мы используем блок «повернуть вперед» внутри этого блока «повторить», чтобы персонаж продолжал двигаться вперед столько, сколько он хочет идти прямо. Затем, когда здесь появляется поворот, блок «если» скомандует ему сделать поворот налево. Ты увидишь, что если мы сделаем это, если мы повернем налево или в противном случае будем двигаться вперед, мы достигнем своей цели."
      4:
        text: "Это пример использования оператора «если», который фактически является базовым понятием компьютерного программирования. Одной из первых вещей, которым я научилась, было написание программы для игры в крестики-нолики. Я использовала операторы «если», чтобы скомандовать «окей, если противник будет близок к победе, иди вперед и займи эту клетку». С удовольствием изучай операторы «если», это ключевое понятие."
    C3_maze_level_4:
      1:
        text: "В этом примере твоя цель — доставить зомби к подсолнуху. Мы можем использовать пять блоков «двигаться вперед» или можем скомандовать компьютеру «двигаться вперед» и повторить эту команду пять раз с помощью одного блока «повторить»."
      2:
        text: "Это экономит время и упрощает решение задачи. Чтобы использовать этот способ, просто помести блок «двигаться вперед» внутрь блока «повторить». Нажми «Выполнить», и зомби сделает пять шагов вперед к вкусному подсолнуху."
    C3_playlab_create_game:
      1:
        text: "До сих пор ты создавал анимацию или историю, в которой происходит одно и то же каждый раз, когда ты ее запускаешь. Теперь ты можешь создать интерактивную игру, в которую действительно можно поиграть."
      2:
        text: "Вот несколько новых блоков, которыми можно пользоваться. Это блок «при нажатии стрелки» и блок «переместить персонаж». Ты можешь соединить эти блоки вместе, чтобы перемещать персонаж при помощи клавиш со стрелками. Также здесь приведены блоки, которые выполняются, когда персонажи сталкиваются или когда на них нажимают мышкой. Освой их и развлекайся!"
    C3_songwriting_with_parameters:
      1:
        text: "Это урок, посвященный написанию песни. Музыка во многом похожа на компьютерную программу. Записанные ноты и слова точно указывают певцу, что делать. Некоторые части музыкальной композиции используются снова и снова."
      2:
        text: "Мы называем это припев. Те части компьютерной программы, которые используются снова и снова, называются функции. Когда ты читаешь текст песни, и там написано слово «припев», ты поешь слово «припев»? Нет, ты смотришь наверх страницы, чтобы посмотреть, какие слова поются в припеве."
      3:
        text: "На этом уроке ты изучишь простую смешную песенку под названием «Маленький кролик Фу-фу». В этой песне есть припев, который ты споешь несколько раз, повторяя его снова и снова. Функция — это фрагмент кода, который ты можешь вызывать и использовать снова и снова. Функция делает программирование более простым и эффективным и тебе не придется записывать шаги своей функции снова и снова. Ты можешь написать их только один раз!"
    C4_bee_conditional:
      1:
        text: "Это блок условного оператора. Он указывает, что если ты добрался до цветка или соты, то тебе нужно что-то сделать. Это полезно, когда мы не знаем, сколько нектара или меда мы можешь получить, например, как здесь, где мы видим вопросительный знак."
      2:
        text: "В этом примере мы собираемся скомандовать «если это цветок, собери весь нектар» , а затем использовать другой блок, чтобы скомандовать «если это сота, приготовь мед». Та-дам!"
    C4_conditionals:
      1:
        text: "У нас есть новый блок , который называется «если/иначе». Это условный оператор, такой же, как блок «если», который ты использовал в предыдущих головоломках. Но теперь в нижней части появляется новый блок, который говорит «иначе». Блок «если/иначе» позволяет пчеле принять решение, выбрав один из двух вариантов действия. Если пчела на цветке, она выполнит набор действий, который ты поместил в первую часть, которая командует «сделай». Если пчела не на цветке, она выполнит набор действий, который ты поместил в раздел, который командует «иначе»."
      2:
        text: "Операторы «если» относятся к способам принятия решений компьютерами. Люди задают для компьютера условия, которые командуют «если компьютер находится в определенной ситуации, сделай это». Иначе (что всего лишь означает «в противном случае») сделай это. Верхняя часть нашего блока «если/иначе» указывает «если в цветке». Но верхняя часть нашего блока может задавать и другие условия, например, «если количество порций нектара равно 2» или «если впереди есть дорога», и наш блок будет вести себя аналогичным образом. Так, если утверждение в верхней части истинно, будет выполнен первый набор действий. Но если утверждение в верхней части ложно, будет выполнен второй набор действий."
    C4_for_loops:
      1:
        text: "Когда ты используешь блок «повторить», чтобы зациклить свой код, как компьютер узнает, что он повторил блок достаточное количество раз? Фактически блок «повторить» скрывает более сложный фрагмент кода, именуемый «цикл со счетчиком», который считает от начального значения до конечного значения с заданным приращением."
      2:
        text: "Например, блок «повторить три раза» считает от 1 до 3 с шагом 1. При каждом шаге счетчика выполняется код внутри цикла. Цикл со счетчиком «знает, сколько раз он был выполнен, с помощью переменной «счетчик», которой присваивается начальное значение в начале выполнения цикла и которая содержит приращение, добавляемое к ее значению при каждом выполнении цикла. После того как значение переменной «счетчик» становится больше конечного значения, выполнение цикла прекращается."
      3:
        text: "Преимущество использования настоящего цикла со счетчиком вместо блока «повторить» заключается в том, что ты можешь по-настоящему видеть переменную «счетчик» и использовать ее в своем цикле. Например, если у меня есть ряд цветков, и первый цветок содержит одну порцию нектара, второй цветок содержит две порции нектара, а третий цветок содержит три порции нектара, я могу использовать цикл со счетчиком, чтобы скомандовать пчеле каждый раз собирать количество порций нектара, равное значению переменной «счетчик», которое будет равно единице для первого цветка, двум для второго цветка и трем для третьего цветка."
      4:
        text: "Также в цикле со счетчиком ты можешь каждый раз увеличивать значение счетчика на число, отличное от единицы. У тебя есть возможность увеличивать значение счетчика на 2, на 4 или на величину, меняющуюся при каждом выполнении цикла."
    C4_for_loops_bee:
      1:
        text: "Когда ты используешь блок «повторить», чтобы зациклить свой код, как компьютер узнает, что он повторил блок достаточное количество раз? Фактически блок «повторить» скрывает более сложный фрагмент кода, именуемый «цикл со счетчиком», который считает от начального значения до конечного значения с заданным приращением."
      2:
        text: "Например, блок «повторить три раза» считает от 1 до 3 с шагом 1. При каждом шаге счетчика выполняется код внутри цикла. Цикл со счетчиком «знает, сколько раз он был выполнен, с помощью переменной «счетчик», которой присваивается начальное значение в начале выполнения цикла и которая содержит приращение, добавляемое к ее значению при каждом выполнении цикла. После того как значение переменной «счетчик» становится больше конечного значения, выполнение цикла прекращается."
      3:
        text: "Преимущество использования настоящего цикла со счетчиком вместо блока «повторить» заключается в том, что ты можешь по-настоящему видеть переменную «счетчик» и использовать ее в своем цикле. Например, если у меня есть ряд цветков, и первый цветок содержит одну порцию нектара, второй цветок содержит две порции нектара, а третий цветок содержит три порции нектара, я могу использовать цикл со счетчиком, чтобы скомандовать пчеле каждый раз собирать количество порций нектара, равное значению переменной «счетчик», которое будет равно единице для первого цветка, двум для второго цветка и трем для третьего цветка."
      4:
        text: "Также в цикле со счетчиком ты можешь каждый раз увеличивать значение счетчика на число, отличное от единицы. У тебя есть возможность увеличивать значение счетчика на 2, на 4 или на величину, меняющуюся при каждом выполнении цикла."
    C4_for_loops_no_bee:
      1:
        text: "Когда ты используешь блок «повторить», чтобы зациклить свой код, как компьютер узнает, что он повторил блок достаточное количество раз? Фактически блок «повторить» скрывает более сложный фрагмент кода, именуемый «цикл со счетчиком», который считает от начального значения до конечного значения с заданным приращением."
      2:
        text: "Например, блок «повторить три раза» считает от 1 до 3 с шагом 1. При каждом шаге счетчика выполняется код внутри цикла. Цикл со счетчиком «знает, сколько раз он был выполнен, с помощью переменной «счетчик», которой присваивается начальное значение в начале выполнения цикла и которая содержит приращение, добавляемое к ее значению при каждом выполнении цикла. После того как значение переменной «счетчик» становится больше конечного значения, выполнение цикла прекращается. Преимущество использования настоящего цикла со счетчиком вместо блока «повторить» заключается в том, что ты можешь по-настоящему видеть переменную «счетчик» и использовать ее в своем цикле."
    C4_function_create:
      1:
        text: "Теперь, когда ты изменил блоки функции, пришло время создать новый блок функции с нуля. Это очень просто. Ты увидишь на панели инструментов категорию, именуемую «функции». Если ты нажмешь на нее, ты увидишь оранжевую кнопку «создать функцию». Нажатие на нее перенесет тебя в редактор функций, которым ты уже пользовался, чтобы изменить имеющиеся блоки функции."
      2:
        text: "Так же, как и в предыдущих заданиях, ты начал с присвоения имени функции и описания того, что эта функция должна делать. Например, она должна рисовать квадрат или рисовать треугольник; затем перетащи блоки с панели инструментов в рабочую среду белого цвета, расположенную ниже. Не забудь, что блоки нужно перетаскивать внутрь зеленого блока функции, который представляет собой внешнюю оболочку."
      3:
        text: "Когда закончишь, нажми «Сохранить и выйти». Так ты перейдешь обратно в основную рабочую среду головоломки. Новая созданная тобой функция будет отображаться в виде зеленого блока в категории «функция» твоей панели инструментов. Перетащи ее в основную рабочую среду и используй для решения головоломки так же, как любой другой блок."
    C4_function_edit:
      1:
        text: "Одна из лучших вещей в компьютерном программировании — это то, что один раз научив компьютер выполнять действие, ты можешь вызывать эту функцию снова. Ты присваиваешь ей имя и потом можешь вызывать ее. Это и в самом деле может расширить возможности языка."
      2:
        text: "Работая над программой, которую мы написали, мы научились рисовать квадрат, перемещаясь и поворачивая четыре раза. Мы можем взять эту функцию и присвоить ей имя «нарисовать квадрат», так что в любой момент, когда мы захотим сделать это, мы просто говорим «нарисовать квадрат», и программа возвращается в начало и обращается к этой функции, этому коду, и он выполняется по нашему желанию. Мы добавили это понятие в наш язык программирования."
      3:
        text: "В этой головоломке мы уже создали для тебя функцию «нарисовать квадрат». Ты увидишь ее на панели инструментов в виде зеленого блока. Все, что тебе нужно сделать — это написать такой же код, как тот, который ты уже писал ранее для рисования квадрата, и поместить его в эту функцию. Чтобы сделать это, нажми на опцию «изменить» в зеленом блоке «нарисовать квадрат». Откроется редактор функций. Редактор функций состоит из трех частей. Место, где ты присваиваешь имя своей функции. Оно появится в зеленом блоке перед данной функцией. Затем напиши краткое описание того, что твоя функция должна делать."
      4:
        text: "В нашем случае она должна рисовать квадрат. Белое пространство под данным полем — это рабочая среда, которая работает так же, как рабочая среда, которую ты уже использовал. Перетащи блоки с панели инструментов в эту рабочую среду. Не забудь, что блоки, которые рисуют квадрат, нужно поместить внутрь зеленого блока функции, который представляет собой внешнюю оболочку. Когда закончишь, нажми «Сохранить и выйти». Так ты перейдешь обратно в основную рабочую среду головоломки. Теперь ты можешь использовать функцию «нарисовать квадрат» для решения головоломки так же, как и любой другой блок."
    C4_function_parameters:
      1:
        text: "Вот функция, которая рисует квадрат со сторонами длиной 50 пикселей. Это здорово, но что, если я хотел нарисовать один квадрат со сторонами длиной 50 пикселей, а другой квадрат со сторонами длиной 100 пикселей? Нам не придется писать две отдельных функции, которые делают практически одно и то же. Вместо этого мы можем использовать одну функцию с параметром."
      2:
        text: "Параметры позволяют нам передавать в функцию значения, которые внутри функции используются в качестве переменных. Попробуй добавить в эту функцию параметр, который можно вызывать так же, как и функцию, чтобы мы могли воспользоваться им для рисования квадратов различных размеров. Так же, как и до этого, ты можешь отредактировать имя и описание в редакторе функций, но теперь ты также можешь добавить параметр. Напиши имя своего параметра в соответствующем поле и нажми «Добавить параметр». Появится красный блок с именем параметра, который ты только что создал. Теперь мы можем заменить блок «двигаться вперед на 100» параметром «длина» так, что перемещение вперед будет осуществляться на расстояние, указанное в параметре «длина»."
      3:
        text: "Нажми «Сохранить и закрыть» и перетащи свой новый блок «создать квадрат» из категории «функции» на панели инструментов. Ты заметишь, что рядом с надписью «длина» есть пустое пространство; функция «хочет» знать, какое значение должен иметь параметр «длина». Перетащи блок «число» из категории «математические величины» и помести его на это место. Посмотрим, как ты можешь многократно использовать функцию с разными значениями длины, чтобы рисовать квадраты разных размеров? Попробуй сам!"
    C4_intro:
      1:
        text: "Традиционное программирование использует текстовое представление, но мы воспользуемся языком программирования Блокли, использующим визуальные блоки, которые ты перетаскиваешь и соединяешь для написания программ. Но по сути, ты все равно создаешь код. Для начала мы напишем код программы, которая поможет этой сердитой птичке (Angry Bird) пройти через лабиринт, чтобы добраться до злых свиней, укравших ее яйца."
      2:
        text: "При работе с Блокли экран делится на три основные части. Слева — лабиринт с птичкой, где будет выполняться твоя программа. Инструкции для каждого уровня написаны прямо под лабиринтом. Средняя часть экрана — это панель инструментов, и каждый из этих блоков представляет собой понятную для птички команду. Белое поле справа — это рабочая среда, в которой мы пишем программу."
      3:
        text: "Что произойдет, если я перетащу блок «двигаться» в рабочую среду и нажму «Выполнить»? Птичка переместится вперед на одну ячейку сетки. А если я хочу, чтобы птичка выполнила какое-то действие после перемещения на одну клетку? Я могу добавить в нашу программу другой блок."
      4:
        text: "Я собираюсь выбрать блок «повернуть направо» и перетаскивать его под блок «двигаться», пока не появится желтая стрелка. Тогда я отпущу свой блок и два блока будут соединены вместе. Когда я снова нажму «Выполнить», птичка будет выполнять команды, соединенные вместе в нашей рабочей среде, от верхнего блока к нижнему."
      5:
        text: "Если ты захочешь удалить блок, просто вытащи его из набора блоков и перетащи в корзину. После начала выполнения программы ты всегда можешь нажать на кнопку «Сброс», чтобы вернуть птичку в начальную позицию. Давай зададим этим свиньям!"
    C4_math_artist:
      1:
        text: "Если я хочу нарисовать прямоугольник высотой 50 пикселей, при этом, чтобы ширина прямоугольника была в два раза больше его высоты, как мне запрограммировать компьютер сделать это? Ну, я мог бы скомандовать художнику пойти вверх на пятьдесят, повернуть направо, затем перейти на 100 и сделать все это дважды. Но тогда я делаю математические вычисления вместо компьютера."
      2:
        text: "Может быть, не слишком сложно умножить пятьдесят на два в уме, но компьютеры отлично справляются с математическими вычислениями, и поэтому мы должны оставлять им выполнение таких задач всегда, когда можно. Если вместо вычислений я просто использую переменную «высота», я могу легко изменить высоту на пятьдесят, а затем изменить свой алгоритм, чтобы скомандовать художнику пойти вверх на пятьдесят, повернуть направо и затем перейти на значение переменной «высота», умноженное на 2, в результате чего мы получим прямоугольник, ширина которого будет в два раза больше его высоты."
    C4_unplugged_algorithms:
      1:
        text: "Этот урок называется «Танграм алгоритмы». Танграм — это головоломка, состоящая из семи частей, складывая которые вместе, можно получить разные фигуры. Ты будешь использовать алгоритм, чтобы объяснить своему партнеру, как складывать головоломку."
      2:
        text: "Алгоритм — это всего лишь перечень шагов, которые ты можешь сделать, чтобы выполнить задачу. Мы каждый день пользуемся ими в таких вещах, как списки покупок и рецепты. Простой алгоритм можно использовать в различных ситуациях, и кто бы ни выполнял данный алгоритм, конечный результат может быть не совсем таким, как ты задумал. Если ты хочешь быть уверен, что каждый получит один и тот же результат, твой алгоритм должен быть подробным и строго определенным."
      3:
        text: "Сегодня я использую алгоритм, чтобы закончить картинку. Я хотел нарисовать нескольких волков, но я не самый лучший художник. К счастью, для людей вроде меня есть раскраски по номерам. Здесь сорок цветов и приведены маленькие буквы и цифры,  указывающие цвет каждого фрагмента. В раскраске по номерам точно указано, какой цвет использовать и где."
      4:
        text: "Это очень точный алгоритм, так что я могу следовать инструкциям, и готовая картинка будет отлично выглядеть. Это замечательный алгоритм. Если бы инструкции не были такими точными, мои волки не выглядели бы так хорошо. Когда ты действительно хочешь, чтобы результат был в точности таким, как ты планировал, лучше всего быть максимально точным."
    C4_unplugged_binary:
      1:
        text: "В каждой команде человек, который выдает инструкции, т.е. человек, который держит листок, должен определить, как будет выглядеть их символ «вкл» и символ «выкл». Двоичное представление — это что-то вроде алфавита из двух букв. Как будто весь твой алфавит состоит из букв А и Б, но только вместо них у тебя 0 и 1."
      2:
        text: "Наиболее распространенный способ использования двоичного представления — это оператор «если». Это классический прием программирования. В процессе выполнения программы оператор командует, что если что-то истинно, то нужно сделать что-то. А если что-то ложно, то нужно сделать что-то другое. А что если ты хочешь сделать что-то немного посложнее. Вместо оператора «если» ты хочешь работать с чем-то вроде изображения или звукового сигнала компьютера."
      3:
        text: "Компьютер воспринимает информацию только в двоичном представлении, но картинка не является двоичным представлением, это не нули и единицы. Так как тебе поступить в этом случае? Пример: у тебя есть эта красивая картинка. В сущности картинка — это способ представления информации. Вся информация может быть преобразована в двоичный код тем или иным способом. Тебе лишь нужно выяснить, как это сделать."
      4:
        text: "Представь, что мы собираемся наложить сетку на это изображение панды, и для каждого квадратика мы решим, является ли он в большей степени белым или в большей степени черным. И затем мы собираемся раскрасить его в соответствии с этим представлением. Теперь каждая ячейка сетки белая или черная. Теперь мы примем черные квадратики за нули (двоичная цифра),а белые — за единицы (другая двоичная цифра). Наконец, перед тобой окажется куча единиц и нулей. Именно так можно представить это изображение в двоичной системе."
    C4_unplugged_forloops:
      1:
        text: "Этот урок называется «игры с циклами со счетчиком». На этом уроке мы будем использовать числовую ось, чтобы поиграть в гонки с кубиками. Каждый игрок трижды бросает кубики, чтобы выбрать начальное значение, значение остановки и интервал. Во время каждого своего хода мы совершаем количество оборотов, равное нашему начальному значению и каждому значению, которое равно тому же количеству шагов вперед, что и наш интервал. Мы прекращаем вращение, когда достигаем своего значения остановки. Игрок, набравший максимальное число очков, выигрывает!"
      2:
        text: "Циклы со счетчиком могут пригодиться в разных ситуациях, и если бы ты был метеорологом, ты бы все время ими пользовался. Привет, я Бекки. Я работаю метеорологом в компании EverPower Renewables и изучаю ветер. Я составляю прогнозы скорости ветра для района ущелья реки Колумбия, где у моей компании есть ветряные электростанции."
      3:
        text: "Мы пытаемся понять, насколько сильный ветер здесь будет, чтобы узнать, сколько энергии будет из него получено. Мы представляем эту информацию компаниям, торгующим энергией в режиме реального времени. Они покупают и продают энергию, основываясь на наших расчетах расхода энергии, чтобы обеспечить равновесие электросетей и бесперебойную подачу электричества в ваши дома, а также добиться максимального объема энергии от наших электростанций."
      4:
        text: "Мы находимся в национальном центре управления компании EverPower Renewables в Портленде, и это именно то место, куда к нам поступает информация с наших электростанций, расположенных по всей стране. Даже самые мощные компьютеры не могут смоделировать состояние атмосферы в любой точке мира. В компьютерных моделях программирования мы используем то, что мы называем сеткой. Каждый узел сетки имеет широту и долготу. Мы должны вычислить физические характеристики и постараться определить скорость ветра, температуру, давление и иные параметры."
      5:
        text: "Поскольку наши сети довольно большие, и мы выполняем расчеты для множества точек, мы зацикливаем свои вычисления миллионы и миллионы раз. Во всем, что я делаю, я использую циклы со счетчиком. Вот, например, как раз здесь есть цикл со счетчиком. Когда ты составляешь прогноз для ветра, нужно учесть так много разных параметров, что человек просто не смог бы выполнить все эти расчеты. Существует так много различных аспектов, которые будут влиять на поведение ветра, что нам необходима компьютерная модель для выполнения прогноза."
    C4_unplugged_madlibs:
      1:
        text: "На этом уроке мы будем работать с историями, в которых нужно заполнить пропуски. У тебя есть шаблон, который ты можешь заполнить, чтобы создать похожие истории с очень забавными различиями."
      2:
        text: "На этом уроке мы также научились создавать абстрактный шаблон из двух уже готовых историй. Абстрактное представление — это умение удалять отличия и подробности таким образом, чтобы иметь возможность видеть, как одно решение может работать для множества разных задач. Это умение очень полезно в информатике, потому что оно позволяет нам создавать функции, которые могут использоваться в самых различных ситуациях."
    C4_unplugged_parameters:
      1:
        text: "Этот урок называется «Написание песен с использованием параметров». Сейчас мы будем писать песни. Иногда припев немного отличается каждый раз, когда ты его поешь. Помнишь песенку «У старика Макдональда ферма была»? Припев немного отличается для каждого животного. И на той ферме у него была корова, и-я-и-я-йо. Небольшое изменение в каждом припеве можно отобразить с помощью так называемых параметров."
      2:
        text: "Иногда функциям необходимы параметры. Параметр — это дополнительный фрагмент информации, который ты можешь передать в функцию, чтобы приспособить ее для определенных целей. Когда ты вместе со своими друзьями готовишь десерт из мороженного с наполнителями, процесс его приготовления аналогичен параметрам в компьютерной программе."
      3:
        text: "Брикет ванильного мороженого может быть одинаковым для каждой порции десерта, но когда ты спрашиваешь друзей, какие два вида наполнителей они бы хотели, ты можешь услышать множество различных комбинаций. Наполнитель — это наименование функции, но каждый вид наполнителя — это параметр. Функции и параметры работают вместе для создания отличных компьютерных программ и отличных десертов тоже."
    C4_unplugged_variables:
      1:
        text: "Этот урок называется «переменные в конвертах». Мы будем изучать способы построения последовательностей, когда нам все-таки не хватает фрагментов информации. Большинство из нас уже знакомы с идеей заполнения пропусков. Мы делаем это, когда указываем свое имя в домашней работе. Иногда нужно вписать несколько слов, и тогда мы размечаем пропуск таким образом, чтобы знать, какую информацию куда вписать."
      2:
        text: "Переменные — это места для заполнения информацией, которая может меняться. Используя переменную для недостающей информации, мы можем продолжать работать над любой задачей и получить возможность заполнить пропуск недостающей информацией позже. При разработке программного обеспечения мы активно используем переменные. Мы используем переменные в качестве мест для хранения ФИО, электронного адреса и даже имени пользователя. Так мы даем программе знать, где эти сведения будут расположены после того, как пользователь их ведет. Мы постоянно используем переменные в своей работе."
      3:
        text: "Каждый раз, когда нужно сохранить фрагмент информации, чтобы воспользоваться им позже, мы используем переменную. Допустим, нам необходимо посчитать количество сообщений, которые пользователь отправляет в Twitter. Каждый раз, когда пользователь пишет в Twitter, мы добавляем единицу к соответствующему числу, и каждый раз, когда пользователь удаляет сообщение из Twitter, мы вычитаем единицу из этого числа. Каждый раз, когда нам нужно узнать, сколько раз пользователь написал в Twitter, мы просто смотрим на эту переменную."
    C4_variables_artist:
      1:
        text: "Переменная — это контейнер, в котором ты сохраняешь значение. Когда ты используешь эту переменную в алгоритме, он открывает контейнер и смотрит на значение внутри. Это позволяет тебе писать более продвинутые алгоритмы, которые ведут себя по-разному в зависимости от значения, хранящегося в переменной."
      2:
        text: "Например, если бы ты хотел написать алгоритм, который говорит моему младшему брату «С днем рождения, тебе исполняется 10!», — это здорово. Но когда я запущу этот алгоритм в следующем году, я бы хотел, чтобы он сказал «С днем рождения, тебе исполняется 11!». Вместо этого я могу создать переменную «возраст», чтобы сохранить возраст моего брата и написать алгоритм, который говорит «С днем рождения, тебе исполняется „возраст“!». Так как переменная может менять значение, каждый год я могу обновлять переменную «возраст», делая ее значение равным «возраст» плюс 1."
      3:
        text: "В этой головоломке мы собираемся использовать переменную, задающую длину линии, которую рисует наш художник. В дальнейшем в нашем коде блок «двигаться вперед» будет обращаться к переменной «длина», чтобы увидеть, какое значение ты ей присвоил."
    C4_variables_playlab:
      1:
        text: "Переменная — это контейнер, в котором ты сохраняешь значение. Когда ты используешь эту переменную в алгоритме, он открывает контейнер и смотрит на значение внутри. Это позволяет тебе писать более продвинутые алгоритмы, которые ведут себя по-разному в зависимости от значения, хранящегося в переменной."
      2:
        text: "А сейчас ты будешь работать с лабораторией игр, где тебе будут даны разные игры, и ты можешь менять значения переменных, такие как скорость, высота, количество очков, чтобы изменить игру. Тебе не придется менять алгоритм игры, чтобы изменить принцип ее работы, нужно поменять только переменную."
      3:
        text: "При работе над электронными книгами Kindle и встроенной в них функцией «Рентген» мы применяем переменные множеством разных способов. Один из способов, которым ты можешь использовать переменную — это сохранение количества страниц книги. Пользователь может увеличивать и уменьшать размер шрифта на странице. В зависимости от размера шрифта может меняться количество страниц в книге. Мы можем настраивать его, сохраняя количество страниц в виде значения переменной."
    infinity_playlab_events:
      1:
        text: "Теперь мы собираемся изучить то, чем все разработчики игр пользуются каждый день. Это называется «события». Событие командует твоей программе ожидать, когда что-то произойдет. И затем, когда это происходит, выполняется действие. Например, событиями могут быть ожидание нажатия кнопки мыши, клавиши со стрелкой или касания сенсорного экрана."
      2:
        text: "Сейчас мы заставим Бэймакса перемещаться вверх, чтобы коснуться Хиро, и перемещаться вниз, чтобы коснуться Рапунцель, когда игрок использует клавиши со стрелками вверх/вниз или кнопки «вверх»/«вниз». Мы используем блок «при нажатии стрелки „вверх“» и присоединим к нему блок «переместить персонаж вверх» так, что, когда игрок нажимает клавишу «вверх», будут выполняться все блоки, присоединенные к блоку «при нажатии клавиши „вверх“». Аналогичную операцию мы проделаем, чтобы заставить Бэймакса двигаться вниз. Шаг за шагом твоя игра становится более интерактивной."
    infinity_playlab_intro:
      1:
        text: "Так в каком ты классе? Во втором. В десятом классе. В первом классе. Я был в восьмом классе, когда учился программировать. Первый компьютер у меня появился в шестом классе. Возможность решать проблемы людей очень меня увлекает. Ты получаешь возможность самовыражения, ты можешь воплощать идеи в жизнь."
      2:
        text: "Информатика является основой множества вещей, которые студенты университетов и специалисты будут делать в следующие двадцать или тридцать лет. Мне нравится программировать, потому что мне нравится помогать людям. У меня есть возможность создать что-то, что облегчит людям жизнь. Я думаю, что это больше всего похоже на суперспособность. Самое важное — это начать. Я сам только начинаю, и я хочу, чтобы ты учился вместе со мной."
      3:
        text: "Я Джон Вичи, один из сооснователей компании PopCap Games. Мы создаем такие игры, как Plants vs. Zombies, Bejeweled и Peggle. В играх большое значение играет не то, насколько безупречен твой код или твое умение, а то, какие чувства они вызывают и насколько они веселые. Ты можешь понять это, только когда попробуешь, сделаешь что-то, изучишь, применишь и многократно используешь собственные навыки создания игр."
      4:
        text: "У тебя есть любимая видеоигра? Хорошо, мы собираемся еще на шаг приблизиться к созданию игр, просто используя лабораторию игр. У хороших игр есть сюжет, и в каждом сюжете есть персонажи. Персонажи выполняют различные действия: говорят, двигаются и взаимодействуют друг с другом. Может быть даже набирают очки в соответствии с правилами игры. Сегодня мы будем изучать, как делать все эти вещи, одну за другой, с помощью персонажей Диснея: Анны, Эльзы, Хиро, Бэймакса и Рапунцель. Мы с нуля создадим игру, которой сможем поделиться и поиграть в нее на телефоне."
      5:
        text: "Твой экран разделен на три основные части. Слева — игровое пространство, где будет выполняться твоя программа. Инструкции для каждого уровня написаны прямо под ним. Средняя часть экрана — это панель инструментов, и каждый из этих блоков представляет собой фрагмент кода. Белое поле справа — это рабочая среда, в которой мы пишем программу."
      6:
        text: "Для начала тебе нужно присоединить свои блоки к оранжевому блоку «при запуске». Ты можешь соединить вместе несколько блоков, перетаскивая их до тех пор, пока не ты не увидишь желтый контур. Тогда они соединятся друг с другом. В этой первой головоломке Хиро — Персонаж 1, а Бэймакс — Персонаж 2. Нам необходимо перемещать Хиро, чтобы доставить его к Бэймаксу, перетащив блок «двигаться направо» и присоединив его к блоку «при запуске». После того как блоки расставлены по местам, нажми кнопку «Выполнить», чтобы увидеть, как работает твоя программа."
      7:
        text: "Начни и в конце концов ты сможешь создать свою собственную игру с удивительными персонажами, которые могут общаться, зарабатывать очки, бросать микророботов, вишню, кастрюли, искры и льдинки... и делать так, чтобы другие игроки исчезали. Все зависит от тебя!"
    infinity_playlab_repeat_forever:
      1:
        text: "Можешь ли ты представить ситуацию, в которой тебе придется повторять что-то до бесконечности? К счастью, тебе никогда не придется делать это, потому что компьютеры отлично подходят для повторения действий. Это блок «повторять бесконечно». Все блоки, находящиеся внутри этого блока, будут выполняться в течение всей игры."
      2:
        text: "Если мы хотим, чтобы персонаж непрерывно повторял какое-то действие без вмешательства игрока, мы помещаем соответствующие блоки внутрь блока «повторять бесконечно». В следующей головоломке наша цель — помочь Анне постоянно ходить вверх и вниз. Изучение работы команд повторения сбережет тебе кучу времени в будущем, когда ты будешь создавать собственную игру."
    tutorial_puzzle_challenge:
      1:
        text: "Оливия, кем ты хочешь быть, когда вырастешь? Космонавтом. Ты случайно не знаешь, кто такой компьютерный программист? Ну, гм, нет. Мммм, подождите, кто? Я не совсем уверена, как это объяснить; компьютерное программирование — это довольно просто. Это набор инструкций, похожий на рецепт, который ты должен выполнять шаг за шагом, чтобы получить такой конечный результат, какой ты хочешь."
      2:
        text: "Я могу изменить количество точек, длину линии с помощью этого выпадающего списка. Еще раз — какой длины она была? Ты можешь увидеть инструкции еще раз, посмотрев под кнопкой «Выполнить». Здесь я использовал блок «двигаться вперед», и я собираюсь установить длину 100 пикселей. Я могу удалить блок, перетащив его на панель инструментов или в корзину. Давай вернем его на место."
      3:
        text: "Запусти код, нажав «Выполнить». Это не сработало! Я нажму «Сброс» и выясню, в чем была ошибка. Ты можешь решать головоломку столько раз, сколько захочешь, пропускать головоломки и снова возвращаться к ним. Просто старайся и не сдавайся. Давай попробуем другой блок «двигаться вперед». По-прежнему не работает. Я могу поместить блок между другими блоками."
      4:
        text: "Возьмем блок «повернуть» и поместим его между блоками «двигаться вперед». Поверни налево на 45 градусов. Давай запустим программу снова. Сброс, выполнить, потрясающе! Вот еще одна головоломка. Иногда тебе дается начальный фрагмент кода, который нужно дописать. Здесь мне нужно добавить подходящие значения длины и градусов."
      5:
        text: "Иногда ты можешь случайно испортить начальный фрагмент кода. Как тебе поступить в этом случае? Ты можешь нажать кнопку «очистить головоломку» и начать все заново. Я собираюсь перетащить этот блок с числовым значением в различные зоны, где указываются пиксели. Выбери значение 100 для пикселей, значение 45 для градусов и снова 100 для пикселей. Потрясающе! Это пчела из студии кода. Мне нужно доставить пчелу к каждому цветку и собрать нектар."
      6:
        text: "Первый цветок находится на расстоянии трех блоков, так что мне нужно три раза использовать блок «двигаться вперед». 1, 2, 3. Затем блок «собрать нектар» и еще один блок «собрать нектар». Это не сработало! Я помещу еще один блок «двигаться вперед» между двумя блоками «двигаться вперед» и снова запущу головоломку. Ура, работает! Ты только что научился использовать головоломки студии кода с художником и пчелой. Желаем удачи при прохождении головоломок студии кода."
    unplug1:
      1:
        text: "Оливия, кем ты хочешь быть, когда вырастешь? Ммм, космонавтом! Ты случайно не знаешь, кто такой компьютерный программист? Ну, хм, нет. Ммм, что-что? Я не совсем уверена, как это объяснить. Компьютерное программирование — это довольно просто. Это набор инструкций, похожий на рецепт. Ты должен выполнять их шаг за шагом, чтобы получить такой конечный результат, какой ты хочешь."
      2:
        text: "Информатика — это способ повлиять на мир. Это могут быть музыкальные клипы, игры или определение того, связано ли какое-то явление с другим явлением. Нахождение друзей. Ты можешь заниматься любыми другими сумасшедшими вещами, которые по-настоящему спасают жизни. Я думаю, что тебе действительно нужна мотивация. Для меня это как кисть для художника. Я думаю, что хорошее программирование не сильно отличается от хорошего искусства."
      3:
        text: "Когда я, наконец, стал немного разбираться в программировании, глухая стена превратилась для меня в стену с кучей дверей. Ты открываешь их и, конечно, за ними ты находишь еще один коридор с кучей дверей. Программирование — это легко и весело. Ты можешь сделать все, что хочешь. В конце концов, ты откроешь достаточно дверей, чтобы стало светло. По-моему, законченная программа похожа на здание, наполненное светом. Он освещает все углы. Ты можешь иметь дело и общаться с таким количеством людей, какого мир никогда не видел раньше."
      4:
        text: "Наш первый урок в этой серии посвящен тому, что такое информатика, чем занимается программист, и как ты можешь более ответственно подойти к использованию технологий. Это очень важный урок, но он немного перегружен текстом. В конце ты получишь возможность выполнить самостоятельное индивидуальное кодирование своих инициалов. Это веселое и очень вдохновляющее занятие, поскольку двоичное представление данных выглядит очень сложным с технической точки зрения, но когда ты освоишь его, ты как будто сможешь говорить на секретном языке."
    unplug2:
      1:
        text: "Задача урока на вычислительное мышление — научить тебя тому, как взять большую сложную задачу и разбить ее на несколько более простых. Цель этого урока заключается в том, чтобы написать ряд инструкций, которые кто-то может выполнить, чтобы нарисовать одного из монстров, приведенных в плане урока."
      2:
        text: "Ученики разделятся на группы, чтобы написать инструкции, а затем они обменяются ими с другой группой, которая должна будет нарисовать этого монстра. Группы будут писать инструкции, используя четыре этапа вычислительного мышления: разбиение на части, построение шаблонов, абстрактное представление и алгоритмы."
      3:
        text: "Сначала группы разобьют задачу на части, что подразумевает составление плана игры. Затем они будут анализировать всех монстров в каталоге для составления шаблонов. Когда они найдут отличия между монстрами, то смогут обобщить или удалить эти детали. Например, у одного монстра в каталоге глаза монстра-вегитаса, а у другого — глаза монстра-спрайтема. Но у обоих есть глаза, так что мы можем написать, что у монстра есть глаза."
      4:
        text: "Таким образом, ученики смогут написать набор инструкций, именуемый алгоритмом, который будет представлять собой перечень частей тел монстров с пропусками на месте описания стилей, в которых они должны быть нарисованы. Этот набор инструкций они передают другим ученикам, чтобы те воссоздали монстра самостоятельно."
    unplug3:
      1:
        text: "Процесс программирования на бумаге в клеточку помогает объяснить, как работает программирование, помогая воссоздать рисунки, используя только стрелки и каракули. Участнику дается небольшой рисунок на бумаге в клеточку. Группе нужно исследовать его только с помощью особых стрелочек и попытаться описать, как восстановить этот рисунок."
      2:
        text: "Во время этого занятия ты можешь использовать только следующие символы: двигаться на одну клетку вперед, двигаться на одну клетку назад, двигаться на одну клетку вверх, двигаться на одну клетку вниз, изменить цвет на следующий и залить клетку цветом. Как только ты закончишь кодирование, ты можешь передать этот код другому человеку, который можешь его прочесть и попытаться восстановить рисунок."
    unplug4:
      1:
        text: "Процесс программирования на бумаге в клеточку помогает объяснить, как работает программирование, помогая воссоздать рисунки, используя только стрелки и каракули. Участнику дается небольшой рисунок на бумаге в клеточку. Группе нужно исследовать его только с помощью особых стрелочек и попытаться описать, как восстановить этот рисунок."
      2:
        text: "Во второй половине урока мы спрашиваем учеников, сколькими различными способами они могут сложить листок бумаги, чтобы получить шестнадцать одинаковых прямоугольников. Затем вы обсудите, как множественные решения могут привести к одному и тому же конечному результату и как некоторые решения могут лучше подходить для определенных ситуаций."
    unplug5:
      1:
        text: "Процесс программирования на бумаге в клеточку помогает объяснить, как работает программирование, помогая воссоздать рисунки, используя только стрелки и каракули. Участнику дается небольшой рисунок на бумаге в клеточку. Группе нужно исследовать его только с помощью особых стрелочек и попытаться описать, как восстановить этот рисунок."
      2:
        text: "Во второй половине урока мы спрашиваем учеников, сколькими различными способами они могут сложить листок бумаги, чтобы получить шестнадцать одинаковых прямоугольников. Затем вы обсудите, как множественные решения могут привести к одному и тому же конечному результату и как некоторые решения могут лучше подходить для определенных ситуаций."
    unplug6:
      1:
        text: "Это занятие называется «программирование на картах», и оно отлично подходит для любого возраста. Как ты уже узнал при изучении операторов «если» на предыдущих уроках с помощью языка Блокли, с операторами «если» связан такой момент, когда тебе нужно выполнить оценку, чтобы определить, истинно ли имеющееся значение или ложно. Это условный оператор, и его можно использовать различными способами."
      2:
        text: "Мы используем его преимущество, создавая на бумаге программы, которые ты выполняешь, вытягивая игральные карты. У тебя может быть такой условный оператор, который говорит, к примеру, что если карта, которую ты вытягиваешь, больше 8, ты получаешь очко. В противном случае очко получает твой соперник. Ты можешь сделать это настолько простым или сложным, насколько тебе удобно."
    unplug7:
      1:
        text: "Ты знаешь, как это бывает, когда ты читаешь текст песни и ее припев приводится в самом начале, а затем в остальном тексте приводится просто ссылка на припев? Это называется функция."
      2:
        text: "На этом уроке мы приведем припев в самом начале нашей песни, а затем, когда мы будем петь нашу песню и возвращаться назад, мы обратим внимание, что класс не поет слово «припев», он автоматически возвращается в начало текста, где мы привели припев, и поет его. Мы используем это как отличное вступление к тому, чтобы понять, что делает программа, когда она определяет и вызывает функцию."
      3:
        text: "Мы возьмем знакомые песни, в том числе «Старика Макдональда», чтобы поговорить о том, как припев вызывается снова и снова и как иногда припев может меняться. Песня вроде «Старика Макдональда», где меняются определенные слова, отлично подходит для получения представления о параметрах. Передача определенных слов, с помощью которых ты можешь передать дополнительную информацию своей функции. Как только мы убедились в том, что все всё поняли, ты можешь взять известные тебе песни и самостоятельно разложить их на отдельные составляющие. Посмотрим, получится ли у тебя разобраться в этом вместе с нами."
    unplug8:
      1:
        text: "Наш урок по абстрактному представлению использует знакомую игру в пропуски, где ты попросту вставляешь в рассказ пропуски, которые могут быть заполнены множеством различных слов. Мы берем эту идею, просим детей предлагать свои слова для своих собственных историй и фактически объясняем понятие абстрактного представления."
      2:
        text: "Все это касается функций и того, как ты можешь использовать функцию, как в песне «Старик Макдональд», где у тебя есть структурная основа для припева, но при этом в припеве происходят небольшие изменения, и ты абстрактно представляешь эти небольшие изменения и можешь каждый раз заполнять его своими собственными словами. Но иногда у тебя есть три меняющихся слова, и ты заполняешь их тремя параметрами, что опять же довольно полезно."
      3:
        text: "У тебя может быть одна функция, подходящая для обработки множества различных задач. Люди будут неоднократно писать отдельные функции для всех этих задач, не понимая, что существует лишь одно небольшое различие. Если бы они могли найти способ разобраться с этим небольшим отличием, они могли бы просто использовать одну и ту же функцию снова и снова вместо того, чтобы использовать 14 различных функций."
    unplug9:
      1:
        text: "Эстафетное программирование — это очень веселый урок, смысл которого в большей степени доносится посредством эстафеты, а не информатики. Иногда все становятся немного непоседливыми, и вы хотите, чтобы они подвигались. Это отличный способ немного оживить информатику."
      2:
        text: "Вы делите всех на две группы, каждая из которых выстраивается в линию и бежит эстафету. Первый человек из каждой группы добегает до другого конца комнаты, где его ожидает рисунок на бумаге в клеточку и чистый лист бумаги. Записывают первое действие для создания этого рисунка, возвращаются на свою линию и касаются следующего игрока, который возвращается к рисунку, чтобы записать следующее действие."
      3:
        text: "Это отличный способ четкого представления идеи отладки, необходимости корректировать свою собственную работу и проверять работу, сделанную до тебя. Ты быстро поймешь, как важно быть внимательным в процессе программирования, когда от тебя зависит вся команда."
    unplug10:
      1:
        text: "Это занятие является доступным способом объяснить, как работает интернет. Мы объясняем все термины, которые тебе понадобятся, с помощью простых понятий, так что ученики могут смоделировать процесс передачи сообщений, как будто это электронная почта."
      2:
        text: "Ученики будут осуществлять передачу сообщений, воспроизводя один из трех методов передачи. Беспроводной интернет, DSL-соединение или оптоволокно. Ученикам, которые представляют wi-fi, придется носить передаваемые сообщения на своих головах, поскольку при передаче по wi-fi наиболее вероятна потеря информации."
      3:
        text: "Ученики, изображающие DSL-соединение, будут переносить сообщения на тыльных сторонах кистей, и для них вероятность потери информации будет немного ниже. А ученики, представляющие оптоволокно, будут переносить сообщения, держа их обеими руками. Это занятие — отличный способ разобраться в том, что мы используем каждый день."
    unplug11:
      1:
        text: "А сейчас настало время сделать шаг назад и с высоты птичьего полета взглянуть на все, что вы проделали за прошедшие девятнадцать уроков. Это отличный момент, чтобы обратить внимание учеников на то, что сделанное ими является огромным достижением. Во время этих уроков они узнали об информатике больше, чем большинство взрослых."
      2:
        text: "Обсудите в классе или в небольших группах их любимые уроки. Когда вы посмотрите назад на все, что изучили, то поймете, что это та область, где может засиять творческий потенциал ваших учеников. Разделите их на группы и дайте им задание создать собственный урок без компьютера. Дайте каждой группе ключевое понятие, такое как функции или алгоритмы, и очень много материалов для изготовления поделок,которые есть у вас в наличии и которыми они смогут пользоваться. Пусть каждая группа представит свой урок без компьютера. Также можно выделить отдельный день, чтобы провести занятия, придуманные некоторыми ученикам."
      3:
        text: "Все мы на портале Code.org надеемся, что ты получил МАССУ веселья при прохождении этого курса. И независимо от того, мечтаешь ли ты создать самое лучшее новое приложение, использовать программирование, чтобы помогать в лечении болезней, или ты просто хочешь решать космические задачи, этот курс стал первым шагом к исполнению твоей мечты."
    starwars_intro:
      1:
        text: "Привет, я Кэтлин Кеннеди, и я продюсер фильма «Звездные войны: Пробуждение силы». Сегодня ты будешь работать с одной из наших звезд, BB-8. BB-8 — сферический дроид. Все его действия и перемещения контролируются программным обеспечением компьютера. Информатика оказывает влияние на любую отрасль: от маркетинга до здравоохранения и киноиндустрии. По правде говоря, сотни инженеров-программистов работали вместе, чтобы создать такой фильм, как «Пробуждение силы»."
      2:
        text: "Привет, я Рейчел Роуз, я работаю старшим инженером по научно-техническим разработкам в компании ILM, и я руковожу командой по созданию анимации и различных существ. В фильме «Пробуждение силы» я помогаю художникам разрабатывать вращающиеся части персонажа, благодаря которым он выглядит очень реалистично в очень далекой галактике."
      3:
        text: "В следующем часе мы создадим свою собственную игру «Звездные войны». Мы научим тебя основным понятиям программирования. Обычно программирование представляет собой текстовый код, но здесь мы будем испытывать блоки, которые мы можем перетаскивать и соединять для написания программы. Но по сути, ты все равно создаешь код. После того, как ты разберешься с основами с помощью блоков, мы с тобой переключимся на JavaScript, один из самых популярных языков программирования в глобальной сети."
      4:
        text: "Для начала мы вместе с Реем поработаем над написанием программы для дроида BB-8, чтобы он мог ходить и собирать металлолом. Твой экран разделен на три части. Слева игровое пространство «Звездных войн», здесь код будет выполняться. Инструкции для каждого уровня написаны под игровым пространством."
      5:
        text: "Средняя часть экрана — это панель инструментов, и каждый из этих блоков представляет собой понятную для BB-8 команду."
      6:
        text: "Белое поле справа — это рабочая среда, в которой мы будем писать нашу программу."
      7:
        text: "Что произойдет, если я перетащу блок moveLeft(); в рабочую среду и нажму «Выполнить»? Дроид BB-8 переместится налево на один блок сетки."
      8:
        text: "А что, если я захочу, чтобы после выполнения блока moveLeft(); ВВ-8 сделал еще что-нибудь? Я могу добавить в нашу программу другой блок. Я собираюсь выбрать блок moveUp();. Я буду перетаскивать его под блок moveLeft(); до тех пор, пока не появится светлый контур. Тогда я отпущу свой блок и два блока будут соединены вместе."
      9:
        text: "Когда я снова нажму «Выполнить», ВВ-8 будет выполнять команды, соединенные вместе в нашей рабочей среде, от верхнего блока к нижнему. Если ты захочешь удалить блок, просто вытащи его из набора блоков и перетащи обратно на панель инструментов."
      10:
        text: "После начала выполнения программы ты всегда можешь нажать на кнопку «Сброс», чтобы вернуть ВВ-8 в начальную позицию. Теперь приступим!"
    starwars_typing:
      1:
        text: "Внутри использованных нами блоков содержатся команды на языке JavaScript. JavaScript сегодня является наиболее популярным языком программирования среди профессиональных разработчиков. Блоки — это отличный способ начать изучение программирования, и на самом деле, ведущие университеты, такие как Гарвард и Беркли, начинают обучение именно таким образом. Но, изучив основы, разработчики пишут код, печатая текст, потому что это позволяет нам работать быстрее."
      2:
        text: "Мы можем напечатать сотни команд, и нам не нужно искать их на панели инструментов или перетаскивать. Так как ты еще учишься, набор печатного текста поначалу может быть более медленным способом, но мы хотели бы, чтобы ты попробовал."
      3:
        text: "В верхнем правом углу рабочей области любой головоломки ты можешь нажать кнопку «показать текст», чтобы переключиться из режима блоков в режим набора текста кода."
      4:
        text: "На следующем уроке мы начнем учиться использовать печатный ввод. Здесь ты по-прежнему можешь перетащить блок с панели инструментов или напечатать имя команды. Когда ты начинаешь печатать, ниже того места, где ты печатаешь, ты увидишь имена возможных команд. Вместо того, чтобы печатать имя команды целиком, ты можешь выбрать одно из этих имен. Тогда дело пойдет быстрее. В своей работе я все время использую эту опцию автозаполнения, когда пишу код."
      5:
        text: "Когда ты печатаешь код, компьютеру необходимо, чтобы ты был очень точным. Необходимо, чтобы ты абсолютно правильно писал все буквы имени команды, указывал прописные буквы, скобки и точку с запятой. Даже из-за небольшой опечатки BB-8 не сможет понять код и не сможет двигаться."
      6:
        text: "Если вы сделаете ошибку, текстовый редактор подчеркнет эту строку, чтобы вы могли ее исправить."
      7:
        text: "Если ты застрял на одном месте, ты всегда можешь начать заново с помощью кнопки «Начать заново». Ты в любое время можешь переключиться обратно в режим использования блоков, нажав в правый верхний угол. Окей, давай попробуем напечатать код! И если ты делаешь ошибки, не расстраивайся. Каждому нужно несколько попыток, чтобы сделать все правильно."
    starwars_events:
      1:
        text: "Привет, меня зовут Чарита Картер. Я старший креативный продюсер в компании Walt Disney Imagineering. Я отвечаю за руководство командами, непосредственно занимающимися аттракционами, которые используют наши гости. Мы всегда ищем способы улучшения и создания более интересных впечатлений для наших гостей, а также способы улучшения технологии, лежащей в основе всего этого."
      2:
        text: "Поздравляем, ты сделал это! Ты запрограммировал дроид BB-8. Теперь я думаю, мы готовы к чему-то посложнее. Пошли. Теперь, когда ты изучил основы программирования, мы вернемся в начало и создадим твою собственную игру с участием дроидов R2-D2 и C-3PO."
      3:
        text: "Для создания игры нам нужно изучить кое-что, чем разработчики игр пользуются каждый день: это называется «события». События командуют твоей программе ожидать, когда что-то произойдет, и когда это происходит, программа выполняет действие."
      4:
        text: "Например, событиями могут быть ожидание нажатия кнопки мыши, клавиши со стрелкой или касания сенсорного экрана."
      5:
        text: "Сейчас мы сделаем так,чтобы R2-D2 перемещался вверх, чтобы передать сообщение пилоту-повстанцу, а затем перемещался вниз к другому пилоту-повстанцу. Мы используем события, чтобы заставить его двигаться. Когда игрок использует клавиши со стрелками вверх/вниз или кнопки «вверх»/«вниз»."
      6:
        text: "Мы используем блок события whenUp() и присоединим его к блоку goUp(). Когда игрок нажимает на стрелку «вверх», выполняется код, присоединенный к блоку whenUp(). Затем мы выполним аналогичные действия, чтобы заставить R2-D2 двигаться вниз."
      7:
        text: "Чтобы сделать это, мы используем команду whenUp(). Когда ты перетаскиваешь команду с панели инструментов, ты видишь, что она начинается и заканчивается фигурными скобками вместо точки с запятой. Это место для размещения других команд в середине. Каждая команда, которую мы помещаем внутрь этих скобок, будет выполняться при нажатии игроком клавиши со стрелкой «вверх»."
      8:
        text: "Мы хотим, чтобы R2-D2 поднимался вверх, так что давай поместим внутрь этой команды блок goUp();. Затем мы выполним аналогичные действия, чтобы заставить R2-D2 двигаться вниз."
      9:
        text: "А теперь вместо того, чтобы заранее писать весь код управления дроидом, можно позволить R2-D2 реагировать на события нажатия кнопок, которые будут двигать его по экрану. Шаг за шагом твоя игра становится более интерактивной."
    starwars_congrats:
      1:
        text: "Привет! Меня зовут Алиса. Я руковожу группой разработчиков и проектно-технической группой в Code.org. Именно я разработала этот обучающий курс, который вы сейчас проходите."
      2:
        text: "Ты только что выполнил последний уровень. Поздравляем! Ты только что изучил все, что тебе нужно знать для написания своей игры «Звездные войны». Больше нет инструкций и головоломок, которые нужно решать. Ты можешь создать свою собственную игру и выбрать, как она будет работать. Еще кое-что. Ты разблокировал новые звуки и новые команды, чтобы сделать еще больше."
      3:
        text: "[говорят ученики] Мы сделали игру, в которой ты получаешь очки, когда поймаешь иглобрюхих свиней. Хитрость заключается в том, что каждый раз, когда ты ловишь иглобрюхую свинью, появляется штурмовик. В конце концов весь экран заполнен иглобрюхими свиньями, и когда ты дотронешься до 10\_000 свиней, ты побеждаешь."
      4:
        text: "[говорят ученики] Мы сделали игру, в которой невозможно проиграть. Все, кого ты убиваешь, приносят тебе очки. Для своей программы я перевернула клавиши, поэтому при нажатии кнопки «вверх» персонаж идет вниз, а при нажатии кнопки «вправо» персонаж идет влево. Это так сложно! Иногда можно получить преимущество (незаслуженное) только потому, что ты разработчик игры. У меня получилось? Ура!"
      5:
        text: "Когда закончишь делать игру, нажми кнопку «Поделиться» и получи ссылку, которой ты можешь поделиться с друзьями или через которую ты можешь поиграть в игру на своем телефоне. Развлекайся!"
    starwars_blocks_intro:
      1:
        text: "Привет, я Кэтлин Кеннеди, и я продюсер фильма «Звездные войны: Пробуждение силы». Сегодня ты будешь работать с одной из наших звезд, BB-8. BB-8 — сферический дроид. Все его действия и перемещения контролируются программным обеспечением компьютера. Информатика оказывает влияние на любую отрасль: от маркетинга до здравоохранения и киноиндустрии. По правде говоря, сотни инженеров-программистов работали вместе, чтобы создать такой фильм, как «Пробуждение силы»."
      2:
        text: "Привет, я Рейчел Роуз. Я работаю старшим инженером по научно-техническим разработкам в компании ILM, и я руковожу командой по созданию анимации и различных существ. В фильме «Пробуждение силы» я помогаю художникам разрабатывать вращающиеся части персонажа, благодаря которым он выглядит очень реалистично в очень далекой галактике."
      3:
        text: "В следующем часе мы создадим свою собственную игру «Звездные войны», в процессе создания которой ты изучишь основные понятия программирования. Обычно программирование представляет собой текстовый код, но здесь мы будем испытывать блоки, которые мы можем перетаскивать и соединять для написания программы. Для начала мы вместе с Реем поработаем над написанием программы для дроида BB-8, чтобы он мог ходить и собирать металлолом."
      4:
        text: "Твой экран разделен на три части. Слева игровое пространство «Звездных войн», здесь код будет выполняться. Инструкции для каждого уровня написаны под игровым пространством."
      5:
        text: "Средняя часть экрана — это панель инструментов, и каждый из этих блоков представляет собой понятную для BB-8 команду."
      6:
        text: "Белое поле справа — это рабочая среда, в которой мы будем писать нашу программу."
      7:
        text: "Что произойдет, если я перетащу блок moveLeft(); в рабочую среду? Дроид BB-8 переместится налево на один блок сетки."
      8:
        text: "А что, если я захочу, чтобы после выполнения блока moveLeft(); ВВ-8 сделал еще что-нибудь? Я могу добавить в нашу программу другой блок. Я собираюсь выбрать блок moveUp();. Я буду перетаскивать его под блок moveLeft(); до тех пор, пока не появится светлый контур. Тогда я отпущу свой блок и два блока будут соединены вместе. Когда я снова нажму «Выполнить», ВВ-8 будет выполнять команды, соединенные вместе в нашей рабочей среде, от верхнего блока к нижнему."
      9:
        text: "Если ты захочешь удалить блок, просто вытащи его из набора блоков и перетащи обратно на панель инструментов."
      10:
        text: "После начала выполнения программы ты всегда можешь нажать на кнопку «Сброс», чтобы вернуть ВВ-8 в начальную позицию. Теперь приступим!"
    starwars_blocks_events:
      1:
        text: "Привет, меня зовут Чарита Картер. Я старший креативный продюсер в компании Walt Disney Imagineering. Я отвечаю за руководство командами, непосредственно занимающимися аттракционами, которые используют наши гости. Мы всегда ищем способы улучшения и создания более интересных впечатлений для наших гостей, а также способы улучшения технологии, лежащей в основе всего этого."
      2:
        text: "Поздравляем, ты сделал это! Ты запрограммировал дроид BB-8. Теперь я думаю, мы готовы к чему-то посложнее. Пошли. Теперь, когда ты изучил основы программирования, мы вернемся в начало и создадим твою собственную игру с участием дроидов R2-D2 и C-3PO."
      3:
        text: "Для создания игры нам нужно изучить кое-что, чем разработчики игр пользуются каждый день: это называется «события». События командуют твоей программе ожидать, когда что-то произойдет, и когда это происходит, программа выполняет действие."
      4:
        text: "Например, событиями могут быть ожидание нажатия кнопки мыши, клавиши со стрелкой или касания сенсорного экрана."
      5:
        text: "Сейчас мы сделаем так,чтобы R2-D2 перемещался вверх, чтобы передать сообщение пилоту-повстанцу, а затем перемещался вниз к другому пилоту-повстанцу. Мы используем события, чтобы заставить его двигаться. Когда игрок использует клавиши со стрелками вверх/вниз или кнопки «вверх»/«вниз»."
      6:
        text: "Мы используем блок события whenUp() и присоединим его к блоку goUp(). Когда игрок нажимает на стрелку «вверх», выполняется код, присоединенный к блоку whenUp(). Затем мы выполним аналогичные действия, чтобы заставить R2-D2 двигаться вниз. А теперь вместо того, чтобы заранее писать весь код управления дроидом, можно позволить R2-D2 реагировать на события нажатия кнопок, которые будут двигать его по экрану."
      7:
        text: "Шаг за шагом твоя игра становится более интерактивной."
    starwars_blocks_congrats:
      1:
        text: "Привет! Меня зовут Алиса. Я руковожу группой разработчиков и проектно-технической группой в Code.org. Именно я разработала этот обучающий курс, который вы сейчас проходите."
      2:
        text: "Ты только что выполнил последний уровень. Поздравляем! Ты только что изучил все, что тебе нужно знать для написания своей игры «Звездные войны». Больше нет инструкций и головоломок, которые нужно решать. Ты можешь создать свою собственную игру и выбрать, как она будет работать. Еще кое-что. Ты разблокировал новые звуки и новые команды, чтобы сделать еще больше."
      3:
        text: "[говорят ученики] Мы сделали игру, в которой ты получаешь очки, когда поймаешь иглобрюхих свиней. Хитрость заключается в том, что каждый раз, когда ты ловишь иглобрюхую свинью, появляется штурмовик. В конце концов весь экран заполнен иглобрюхими свиньями, и когда ты дотронешься до 10\_000 свиней, ты побеждаешь."
      4:
        text: "[говорят ученики] Мы сделали игру, в которой невозможно проиграть. Все, кого ты убиваешь, приносят тебе очки. Для своей программы я перевернула клавиши, поэтому при нажатии кнопки «вверх» персонаж идет вниз, а при нажатии кнопки «вправо» персонаж идет влево. Это так сложно! Иногда можно получить преимущество (незаслуженное) только потому, что ты разработчик игры. У меня получилось? Ура!"
      5:
        text: "Когда закончишь делать игру, нажми кнопку «Поделиться» и получи ссылку, которой ты можешь поделиться с друзьями или через которую ты можешь поиграть в игру на своем телефоне. Развлекайся!"
    mc_intro:
      1:
        text: "Меня зовут Йенс Бергенстен, но я больше известен под именем Джеб. Я ведущий разработчик игры Minecraft в стокгольмской компании Mojang. Кажется, мне было одиннадцать или двенадцать лет, когда я начал заниматься программированием, потому что хотел создавать игры. Приятель моего отца сказал мне, что для этого мне нужно научиться программировать. Так я занялся программированием. Мне нравится разрабатывать и продумывать структуру различных вещей. Именно это так привлекает в Minecraft."
      2:
        text: "В течение следующего часа вы будете изучать основы компьютерного программирования, перемещая Алекса или Стива по воссозданному участку мира Minecraft."
      3:
        text: "Традиционное программирование обычно использует текстовое представление, но сегодня мы воспользуемся языком программирования Блокли, использующим визуальные блоки, которые ты можешь перетаскивать и соединять для написания программ. Но по сути ты создаешь код на языке Javascript."
      4:
        text: "Понятия, которые ты будешь изучать, используются программистами каждый день и лежат в основе такой науки как информатика. Мы в компании Mojang тоже используем эти принципы при разработке игры Minecraft."
      5:
        text: "Прежде чем начать, выбери себе персонаж. Я выбираю Алекс. Давай напишем код для программы, которая может ей перемещаться по экрану."
      6:
        text: "Твой экран разделен на три основные части. Слева — игровое пространство Minecraft, где будет выполняться твоя программа. Инструкции для каждого уровня написаны прямо под ним."
      7:
        text: "Средняя часть экрана — это панель инструментов, и каждый из этих блоков — это определенная команда для Алекс."
      8:
        text: "Белое поле справа — это рабочая среда, в которой мы пишем программу."
      9:
        text: "Что произойдет, если перетащить блок moveForward(); в рабочую среду и нажать «Выполнить»? Алекс передвинется вперед на одну ячейку сетки."
      10:
        text: "А что, если мы хотим, чтобы после перемещения вперед на одну клетку она сделала что-то еще? Мы можем добавить в нашу программу другой блок. Я выберу блок turnRight(); и буду перетаскивать его под блок moveForward(); до тех пор, пока не появится оранжевая линия. Тогда я отпущу свой блок и два блока будут соединены вместе. Когда мы нажмем «Выполнить», Алекс выполнит команды, соединенные вместе в нашей рабочей среде, от верхнего блока к нижнему."
      11:
        text: "Если ты захочешь удалить блок, просто вытащи его из набора блоков и перетащи обратно на панель инструментов."
      12:
        text: "Чтобы отменить изменения и вернуться в начало уровня, воспользуйся кнопкой «Начать заново» в правом верхнем углу рабочей среды. Еще кое-что: ты видишь маленький треугольник на блоках «повернуть»? Если ты видишь эти треугольники, это значит, что ты можешь выбрать из разных вариантов. Давай начнем программировать!"
    mc_repeat:
      1:
        text: "Я Лидия Винтерс, руководитель бренда Mojang. Это мы создали игру под названием Minecraft."
      2:
        text: "В Minecraft мне больше всего нравится исследовать. Обожаю забираться в пещеры и смотреть, что там можно найти. Я вовсе не программист, и меня восхищает возможность пройти этот курс по Minecraft и узнать кое-что о программировании."
      3:
        text: "На последнем уровне требуется много блоков moveForward();. Было бы проще, если бы мы могли просто скомандовать компьютеру выполнить команду moveForward(); четыре или пять раз. К счастью для нас, компьютеры отлично подходят для того, чтобы повторять команды с помощью циклов «повторить»."
      4:
        text: "При разработке Minecraft мы используем циклы «повторить» для размещения всех исходных материалов и создания нового мира. Это не одна тысяча блоков. Также мы используем циклы для незначительных задач, например, чтобы нога Алекс двигалась назад и вперед при ходьбе. Циклы «повторить» — это важная часть программирования."
      5:
        text: "Приближается ночь, поэтому на двух следующих уровнях мы построим дом, чтобы иметь безопасное укрытие. Мы воспользуемся блоком «повторить», чтобы максимально упростить задачу."
      6:
        text: "Чтобы построить стену дома, мы можем четыре раза приказать Алекс выполнить команду moveForward(); и разместить доску, а можем приказать ей выполнить команду moveForward(); и разместить одну доску, а затем взять эту команду и с помощью блока «повторить» сделать так, чтобы она выполняла это действие много раз. Теперь нажмем на блок «повторить» и укажем, сколько раз Алекс должна выполнить нужное действие. Теперь давайте построим дом, пока не стемнело! Развлекайся."
    mc_if_statements:
      1:
        text: "Сейчас мы будем изучать операторы «если». Операторы «если» входят в число основных понятий программирования. Они помогают компьютеру принимать решения."
      2:
        text: "Операторы «если» используют все компьютеры, даже мой телефон. Например, когда я разблокирую телефон, выполняется код, в котором сказано, что если я введу пароль правильно, телефон надо разблокировать. А если неправильно, вывести сообщение об ошибке."
      3:
        text: "Ты можешь использовать операторы «если», чтобы Стив и Алиса реагировали на то, что они видят вокруг. Например, если перед ними камень, они могут повернуть налево. А если дерево – направо."
      4:
        text: "В этом случае мы не хотим упасть в лаву. Лаву совсем несложно обходить. Ее видно на экране. Но что, если лава скрыта под камнем?"
      5:
        text: "После того как мы добыли камень, нам нужно проверить, есть ли на этом месте лава, и лишь потом двигаться вперед. Если лава есть, нам нужно положить камень перед персонажем, а уже потом двигаться вперед. Так мы сможем передвигаться безопасно. Давай добудем еще что-нибудь! И не забывай использовать оператор «если», чтобы соблюдать осторожность."
    mc_congrats_share:
      1:
        text: "Поздравляем! Ты только что изучил базовые структурные элементы информатики."
      2:
        text: "Теперь ты можешь использовать эти блоки, чтобы создать что-то свое. Больше нет инструкций и головоломок, которые нужно решать. Ты можешь создать все, что захочешь. Ты можешь выбирать."
      3:
        text: "[говорят ученики] Вот, уже похоже... Стричь. Я сделал букву «L» из факелов. А я – букву «А» из березовых досок. Получилось! Мы построили дом из шерсти!"
      4:
        text: "Закончив работу, выбери «Поделиться», чтобы получить ссылку и показать свое творчество друзьям. Развлекайся!"
    mc_congrats_no_share:
      1:
        text: "Поздравляем! Ты только что изучил базовые структурные элементы информатики."
      2:
        text: "Теперь ты можешь использовать эти блоки, чтобы создать что-то свое. Больше нет инструкций и головоломок, которые нужно решать. Ты можешь создать все, что захочешь. Ты можешь выбирать."
      3:
        text: "[говорят ученики] Вот, уже похоже... Стричь. Я сделал букву «L» из факелов. А я – букву «А» из березовых досок. Получилось! Мы построили дом из шерсти!"
      4:
        text: "Теперь ты можешь создать все, что угодно Развлекайся!"
    gumball_intro:
      1:
        text: "Если ты хочешь создать свою игру, это действительно просто. Все, что тебе нужно знать — это несколько основных навыков программирования, и ты можешь поиграть в игру, которую создал сам."
      2:
        text: "У тебя есть любимая видеоигра? Мы собираемся еще на шаг приблизиться к созданию игр, просто используя Лабораторию игр. У хороших игр есть сюжет, и в каждом сюжете есть персонажи. Персонажи, которые выполняют различные действия, говорят, двигаются и взаимодействуют друг с другом. Может быть даже набирают очки в соответствии с правилами игры. Сегодня мы будем последовательно изучать, как все это можно сделать, с помощью веселых персонажей, а затем создадим с нуля игру, которой можно будет поделиться с друзьями и в которую можно будет поиграть на телефоне."
      3:
        text: "Сегодня мы будем последовательно изучать, как все это можно сделать, с помощью веселых персонажей, а затем создадим с нуля игру, которой можно будет поделиться с друзьями и в которую можно будет поиграть на телефоне."
      4:
        text: "Твой экран разделен на три основные части. Слева — игровое пространство, где будет выполняться твоя программа. Инструкции для каждого уровня написаны прямо под ним."
      5:
        text: "Средняя часть экрана — это панель инструментов, и каждый из этих блоков представляет собой фрагмент кода."
      6:
        text: "Белое поле справа — это рабочая среда, в которой мы пишем программу."
      7:
        text: "Для начала тебе нужно присоединить свои блоки к оранжевому блоку «при запуске». Ты можешь соединить вместе несколько блоков, перетаскивая их до тех пор, пока не ты не увидишь желтую линию, тогда они соединятся друг с другом."
      8:
        text: "В этой первой головоломке мы заставим персонажи что-нибудь сказать, присоединив блок «сказать» к блоку «при запуске» и введя в него текст твоего сообщения. После того как блоки расставлены по местам, нажми кнопку «Выполнить», чтобы увидеть, как работает твоя программа."
      9:
        text: "Начни, и в конце концов ты сможешь создать свою собственную игру с разными игроками, которые могут общаться, зарабатывать очки, бросать предметы и даже делать так, чтобы другие игроки исчезали. Все зависит от тебя!"
    gumball_events:
      1:
        text: "Теперь мы собираемся изучить то, чем все разработчики игр пользуются каждый день. Это называется «события». Событие говорит твоей программе ожидать определенного обстоятельства, и когда оно наступает, игра выполняет действие."
      2:
        text: "Например, событиями могут быть ожидание нажатия мыши, клавиши «вверх» или «вниз» или касания экрана."
      3:
        text: "Сейчас мы сделаем так, чтобы персонаж говорил что-нибудь, когда игрок нажимает на него. Мы воспользуемся блоком «по щелчку» и прикрепим к нему блок «говорить». Когда игрок нажимает, выполняются все блоки, присоединенные к данному блоку."
      4:
        text: "Существуют также блоки «при нажатии стрелки». Если ты присоединяешь к ним блоки «двигаться», ты можешь начать перемещать своих персонажей вверх, вниз, влево и вправо, нажимая клавиши со стрелками. Шаг за шагом твоя игра становится более интерактивной."
    gumball_repeat:
      1:
        text: "Можешь ли ты представить ситуацию, в которой тебе придется повторять что-то до бесконечности? К счастью, тебе никогда не придется делать это, потому что компьютеры отлично подходят для повторения действий."
      2:
        text: "Это блок «повторять бесконечно». Все блоки, находящиеся внутри этого блока, будут выполняться в течение всей игры. Если мы хотим, чтобы персонаж непрерывно повторял какое-то действие без вмешательства игрока, мы помещаем соответствующие блоки внутрь блока «повторять бесконечно»."
      3:
        text: "В следующей головоломке наша задача — помочь персонажу непрерывно выполнять действие. Изучение работы команд повторения сбережет тебе кучу времени в будущем, когда ты будешь создавать собственную игру."
    iceage_intro:
      1:
        text: "Если ты хочешь создать свою игру, это действительно просто. Все, что тебе нужно знать — это несколько основных навыков программирования, и ты можешь поиграть в игру, которую создал сам."
      2:
        text: "У тебя есть любимая видеоигра? Мы собираемся еще на шаг приблизиться к созданию игр, просто используя Лабораторию игр. У хороших игр есть сюжет, и в каждом сюжете есть персонажи. Персонажи, которые выполняют различные действия, говорят, двигаются и взаимодействуют друг с другом. Может быть даже набирают очки в соответствии с правилами игры. Сегодня мы будем последовательно изучать, как все это можно сделать, с помощью веселых персонажей, а затем создадим с нуля игру, которой можно будет поделиться с друзьями и в которую можно будет поиграть на телефоне."
      3:
        text: "Сегодня мы будем последовательно изучать, как все это можно сделать, с помощью веселых персонажей, а затем создадим с нуля игру, которой можно будет поделиться с друзьями и в которую можно будет поиграть на телефоне."
      4:
        text: "Твой экран разделен на три основные части. Слева — игровое пространство, где будет выполняться твоя программа. Инструкции для каждого уровня написаны прямо под ним."
      5:
        text: "Средняя часть экрана — это панель инструментов, и каждый из этих блоков представляет собой фрагмент кода."
      6:
        text: "Белое поле справа — это рабочая среда, в которой мы пишем программу."
      7:
        text: "Для начала тебе нужно присоединить свои блоки к оранжевому блоку «при запуске». Ты можешь соединить вместе несколько блоков, перетаскивая их до тех пор, пока не ты не увидишь желтую линию, тогда они соединятся друг с другом."
      8:
        text: "В этой первой головоломке мы заставим персонажи что-нибудь сказать, присоединив блок «сказать» к блоку «при запуске» и введя в него текст твоего сообщения. После того как блоки расставлены по местам, нажми кнопку «Выполнить», чтобы увидеть, как работает твоя программа."
      9:
        text: "Начни, и в конце концов ты сможешь создать свою собственную игру с разными игроками, которые могут общаться, зарабатывать очки, бросать предметы и даже делать так, чтобы другие игроки исчезали. Все зависит от тебя!"
    iceage_events:
      1:
        text: "Теперь мы собираемся изучить то, чем все разработчики игр пользуются каждый день. Это называется «события». Событие говорит твоей программе ожидать определенного обстоятельства, и когда оно наступает, игра выполняет действие."
      2:
        text: "Например, событиями могут быть ожидание нажатия мыши, клавиши «вверх» или «вниз» или касания экрана."
      3:
        text: "Сейчас мы сделаем так, чтобы персонаж говорил что-нибудь, когда игрок нажимает на него. Мы воспользуемся блоком «по щелчку» и прикрепим к нему блок «говорить». Когда игрок нажимает, выполняются все блоки, присоединенные к данному блоку."
      4:
        text: "Существуют также блоки «при нажатии стрелки». Если ты присоединяешь к ним блоки «двигаться», ты можешь начать перемещать своих персонажей вверх, вниз, влево и вправо, нажимая клавиши со стрелками. Шаг за шагом твоя игра становится более интерактивной."
    iceage_repeat:
      1:
        text: "Можешь ли ты представить ситуацию, в которой тебе придется повторять что-то до бесконечности? К счастью, тебе никогда не придется делать это, потому что компьютеры отлично подходят для повторения действий."
      2:
        text: "Это блок «повторять бесконечно». Все блоки, находящиеся внутри этого блока, будут выполняться в течение всей игры. Если мы хотим, чтобы персонаж непрерывно повторял какое-то действие без вмешательства игрока, мы помещаем соответствующие блоки внутрь блока «повторять бесконечно»."
      3:
        text: "В следующей головоломке наша задача — помочь персонажу непрерывно выполнять действие. Изучение работы команд повторения сбережет тебе кучу времени в будущем, когда ты будешь создавать собственную игру."
    mc_2016_intro:
      1:
        text: "Привет! Меня зовут Йенс, я ведущий креативный дизайнер Minecraft. В ближайший час вы создадите собственную игру Minecraft. Это выглядит как Minecraft, но мир остановился. Овцы не двигаются, куры не несут яйца, а зомби просто стоят столбом. Чтобы мир Minecraft обрел жизнь, вам нужно добавить в него код."
      2:
        text: "My name is Melissa and I am a user researcher at Minecraft. What I'm really interested in is how people think and interact with technology and so this job is the perfect job for me to put together the computer engineering with the psychology: мысли и поведение людей."
      3:
        text: "Как видите, экран разделен на три основные части. 1) Слева находится игровое окно Minecraft. Сейчас игровой мир заморожен, но мы это исправим при помощи кода."
      4:
        text: "2) В центре расположен набор инструментов. Каждый из этих блоков является командой, понятной курам, овцам и прочим существам в Minecraft."
      5:
        text: "3) Справа расположена рабочая область. Именно здесь мы будем создавать нашу программу."
      6:
        text: "Если забудете, что делать, инструкции для каждого уровня расположены вверху."
      7:
        text: "Для начала мы запрограммируем действия курицы. Давайте перетащим команду \"двигаться вперед\" в рабочую область. Если нажать \"Выполнить\", курица пройдет один шаг вперед. Чтобы она пошла дальше, перетаскиваем еще один блок \"двигаться вперед\" под первый такой же блок до появления подсветки. Затем отпускаем его, и два блока соединяются. Если снова нажать \"Выполнить\", курица пройдет два шага."
      8:
        text: "Если нужно удалить блок, просто уберите его из стека блоков обратно в набор инструментов."
      9:
        text: "После нажатия \"Выполнить\" всегда можно нажать кнопку \"Сброс\", чтобы обнулить игру и начать все заново. Теперь ваша очередь создать собственную версию Minecraft. Веселитесь!"
    mc_2016_loops:
      1:
        text: "Привет, меня зовут Лиза. Я разработчик программного обеспечения Minecraft, работаю над некоторыми животными и врагами в игре. Одним из моих подопечных животных оказался оцелот. Был один момент, когда можно скормить оцелоту рыбу, чтобы приручить его и сделать своим питомцем."
      2:
        text: "Люди таковы, что нам становится страшно скучно снова, снова и снова повторять какие-то действия. Поэтому классно, что есть компьютеры, которые могут повторять одно и то же действие миллионы или даже миллиарды раз, и им это не наскучит. Такое повторение называется циклом, и для каждого существа в Minecraft используются циклы."
      3:
        text: "Ранее мы заставили курицу переместиться по экрану, но затем она остановилась. В Minecraft куры бродят всегда и везде. Давайте используем цикл \"всегда делать\" из нашего набора инструментов, чтобы наши куры тоже двигались без остановки. Прелесть такого цикла в том, что он сохраняет вам кучу времени и открывает различные возможности при создании вашей собственной версии Minecraft."
    mc_2016_events:
      1:
        text: "На этом уровне вы можете выбрать, за кого играть: Стива или Алекс. Используйте кнопки со стрелками на клавиатуре для перемещения вверх, вниз, влево и вправо. Теперь вы можете перемещаться по уровню куда пожелаете. Для использования существа просто подойдите к нему, повернитесь к нему лицом и нажмите пробел."
      2:
        text: "Если вы используете сенсорный экран, то проводите по нему вверх, вниз, влево и вправо для перемещения. Затем нажмите на экран, чтобы использовать предмет перед вами."
      3:
        text: "Но что произойдет, если вы его используете? В Minecraft из овец после стрижки выпадает шерсть, если ударить корову, то она убежит, а если подойти к криперу, он взорвется. Эти реакции происходят в результате так называемых событий. События говорят вашей программе ожидать возникновения определенных условий. Когда они выполняются, происходит действие."
      4:
        text: "Вы успели использовать одно событие. Код, внесенный в ячейку \"при создании\", используется при создании вашего существа или в начале игры. На следующих уровнях вы получите новые ячейки для событий, например \"при касании\" используется при касании существа, а \"при использовании\" — во время использования существа. Если вы захотите, чтобы ваш зомби исчез при восходе солнца, укажите это в ячейке \"днем\"."
    mc_2016_spawn:
      1:
        text: "В играх часто используется термин \"создать\" в значении призыва существа. Давайте сделаем так, чтобы на этом уровне после захода солнца появлялись зомби. Для этого используем блок \"ночью\"."
      2:
        text: "Так как нам нужно, чтобы зомби появлялись ночью, добавим блок \"создать зомби\" под блоком \"ночью\". После появления каждый зомби будет действовать согласно коду, заложенному вами в их ячейку события \"при создании\". Развлекайтесь, создавая зомби!"
    mc_2016_congrats:
      1:
        text: "Поздравляем! Вы научились использовать компьютерные команды, чтобы наполнить мир Minecraft жизнью. Теперь вы разработчик. Вы разблокировали все команды и всех существ. Что будет дальше, решать вам."
      2:
        text: "После создания игры выберите \"опубликовать\", чтобы получить ссылку, которой можно поделиться с друзьями или использовать для игры на вашем телефоне. Веселитесь! Я жду возможности сыграть в вашу версию Minecraft."
    mc_2017_agent_intro:
      1:
      2:
      3:
      4:
      5:
      6:
      7:
      8:
      9:
      10:
      11:
        text: "Если забудете, что делать, инструкции для каждого уровня расположены вверху."
      12:
