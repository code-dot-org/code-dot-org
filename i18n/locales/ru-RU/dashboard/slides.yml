ru:
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Добро пожаловать на Ваш первый час кода! Ощутите вкус программирования!
      2:
        image: notes/hoc1_2.jpg
        text: 'Мы будем использовать Блокли  - визуальный язык программирования, в котором программа создаётся собиранием необходимых блоков.'
      3:
        image: notes/hoc1_3.jpg
        text: 'Большинство программ состоят из строк кода, но Блокли - визуальный язык программирования. Каждый блок - это строка «реального» кода.'
      4:
        image: notes/hoc1_4.jpg
        text: 'Вы получите знания об основах компьютерных технологий, понятий, которые используются и для создания простых программ, и для управления  марсоходом.'
      5:
        image: notes/hoc1_5.jpg
        text: 'Программа - это набор команд, по которым должен работать компьютер.'
      6:
        image: notes/hoc1_6.jpg
        text: 'Цель первой программы: Сердитая Птица идёт по лабиринту, чтобы разобраться с Зелёной Хрюшкой.'
      7:
        image: notes/hoc1_7.jpg
        text: 'Левая часть экрана - это лабиринт, в котором  программа будет работать. Инструкции для каждой головоломки написаны ниже лабиринта.'
      8:
        image: notes/hoc1_8.jpg
        text: 'Средняя часть экрана - это панель с командами для управления Сердитой Птицей. Эти команды вы будете использовать для создания вашего кода.'
      9:
        image: notes/hoc1_9.jpg
        text: Справа на экране — рабочее пространство, куда вы будете переносить блоки из средней панели для создания программы. Чтобы удалить блок, перенесите его в корзину в углу.
      10:
        image: notes/hoc1_10.jpg
        text: 'Каждый блок - это одна инструкция. Если вы перенесёте блок «двигаться вперед» в рабочую область и нажмете кнопку «Запустить программу», птица продвинется в лабиринте на одну клетку  вперед.'
      11:
        image: notes/hoc1_11.jpg
        text: Чтобы совершить несколько действий, можно перетащить много блоков в рабочую область и соединить их. Птица будет выполнять команды, начиная с самой верхней.
      12:
        image: notes/hoc1_12.jpg
        text: Если вы запустили программу, а затем хотите что-то исправить и снова ее запустить, нажмите кнопку «Сброс».
      13:
        image: notes/hoc1_13.jpg
        text: Давай зададим этим хрюшкам!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Привет, меня зовут Джей Ар! Каждой гоночной команде для победы нужны компьютерные специалисты. Они анализируют информацию с машин, чтобы сделать их ещё быстрее.
      2:
        image: notes/stage5_2.jpg
        text: В этой серии задач ты станешь художником, который рисует линию на пути своего движения, куда бы он ни направлялся.
      3:
        image: notes/stage5_3.jpg
        text: 'В этом блоке написано "двигаться вперед на 100 пикселей". Пиксели - это маленькие точки, из которых состоит изображение на твоем мониторе.'
      4:
        image: notes/stage5_4.jpg
        text: 'В этом блоке говорится «повернуть вправо на 90 градусов.» Блок позволит повернуть художника так же, как блок "повернуть" в головоломке "Лабиринт".'
      5:
        image: notes/stage5_5.jpg
        text: Нажмите на стрелку в любом из этих блоков, чтобы изменить расстояние, на которое движется художник, или угол поворота. Поиграйтесь с этими новыми блоками, чтобы лучше с ними познакомиться.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Привет, я Паола! В этой головоломке ты станешь фермером, который должен выровнять свое поле, чтобы начать сажать растения.
      2:
        image: notes/stage9_2.jpg
        text: Ты должен помочь ей раскидать все кучи земли и засыпать все ямы.
      3:
        image: notes/stage9_3.jpg
        text: Новые блоки могут раскидывать одну лопату земли из кучи или засыпать одну лопату земли в яму.
      4:
        image: notes/stage9_4.jpg
        text: Ямы и кучи имеют различные размеры, так что тебе надо будет указать фермеру, сколько раз махать лопатой.
    flappy_intro:
      1:
        image: Примечания/flappy01.jpg
        text: Привет меня зовут Кэти! Одна из самых интересных вещей в изучении компьютера то, что компьютерная программа может быть интерактивна.
      2:
        image: Примечания/flappy02.jpg
        text: Каждый раз, когда кто-то щёлкает мышью, касается экрана или печатает на компьютере или телефоне, это запускает СОБЫТИЕ и определённый код, который решает, что делать, когда происходит СОБЫТИЕ.
      3:
        image: Примечания/flappy03.jpg
        text: 'Например, у вас может быть такой ОБРАБОТЧИК СОБЫТИЙ : «по щелчку мыши исполнить звук» '
      4:
        image: Примечания/flappy04.jpg
        text: 'Вы когда-нибудь слышали о игре "FlappyBird"? С помощью обработчиков событий, мы будем учиться программировать нашу собственную версию игры "FlappyBird"!'
      5:
        image: Примечания/flappy05.jpg
        text: 'Код, который вы будете писать включает перетаскивание блоков, которые представляют команды для компьютера. Под скрытой частью каждого из этих блоков представлен  настоящий код.'
      6:
        image: Примечания/flappy06.jpg
        text: 'Если вы посмотрите на рабочую область, там есть некоторые зеленые блоки, которые заполняются для вас - это «обработчики событий» '
      7:
        image: Примечания/flappy07.jpg
        text: Если вы хотите чтобы птица взлетела при НАЖАТИИ кнопки мыши, вы можете сделать это путем присоединения блока «взлет» в соответствующем обработчике событий, и теперь в игре при нажатии кнопки мыши, птица будет взлетать.
      8:
        image: Примечания/flappy08.jpg
        text: В каждой головоломке этой деятельности мы познакомимся с новыми типами событий, такими как зеленые блоки на рабочей области, и вы можете решить соответствующие блоки для добавления в ответ на эти события.
      9:
        image: Примечания/flappy09.jpg
        text: 'Если вы видите такую стрелку выпадающего меню, это значит, что можно изменить настройки, например, выбрать, какой  звук исполнить, когда Птичка падает на землю.'
      10:
        image: Примечания/flappy10.jpg
        text: В последней головоломке у вас будет возможность создать свою собственную игру и поделиться ей с друзьями. Веселитесь!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Привет, меня зовут Марк! Давайте узнаем, что такое циклы в программировании. С помощью цикла вы можете сказать компьютеру, чтобы он повторил любой набор команд снова и снова, тысячи или даже миллиарды раз.
      2:
        image: notes/hoc2_2.jpg
        text: В этой головоломке мы хотим добиться того, чтобы птичка продвинулась вперед на 5 клеток и добралась до хрюшки.
      3:
        image: notes/hoc2_3.jpg
        text: Мы можем использовать новый блок «повторить», чтобы упростить создание программы.
      4:
        image: notes/hoc2_4.jpg
        text: Вместо перетаскивания 5-ти блоков «двигаться вперед»...
      5:
        image: notes/hoc2_5.jpg
        text: 'Мы можем поместить блок «двигаться вперед» внутрь блока «повторить» и написать число в блоке - сколько раз повторять.'
      6:
        image: notes/hoc2_6.jpg
        text: 'Важно отметить: вы можете вставить более одной команды внутрь блока «повторить».'
      7:
        image: notes/hoc2_7.jpg
        text: Приятного использования нового блока «повторить»!
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: 'Привет, я Крис. Прежде, чем я вошёл в команду Майами Хит, я изучал компьютерные науки. Давайте опробуем наш новый блок под названием "повторять пока".'
      2:
        image: notes/hoc3_2.jpg
        text: А если мы не знаем, какое расстояние должна преодолеть птица, чтобы добраться до хрюшки?
      3:
        image: notes/hoc3_3.jpg
        text: 'Если мы поместим блок "двигаться вперед" внутрь блока "повторять пока", птица будет двигаться вперед ПОКА она не достигнет хрюшки (или пока не врежется в препятствие).'
      4:
        image: notes/hoc3_4.jpg
        text: 'Вот что важно: как и раньше, мы можем помещать различное количество блоков внутрь блока "повторять пока", и они все будут повторены.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'Привет! Меня зовут Билл. Давайте познакомимся с новым фундаментальным понятием: командой «Если». Эта команда принятия решения компьютером.'
      2:
        image: notes/hoc4_2.jpg
        text: 'Мы используем "Если" постоянно. Перед выходом на улицу каждое утро ты действуешь по принципу: "ЕСЛИ на улице дождь, то мне следует надеть куртку".'
      3:
        image: notes/hoc4_3.jpg
        text: Мы можем сделать так, чтобы зомби проверял, есть ли путь налево, и ЕСЛИ он найдет путь налево, мы можем повернуть его туда.
      4:
        image: notes/hoc4_4.jpg
        text: 'Чтобы написать код для этого случая, понадобится перенести блок "повернуть налево" внутрь блока "если".'
      5:
        image: notes/hoc4_5.jpg
        text: 'Если теперь мы поставим  блок «двигаться вперед» над ним и блок «повторить» вокруг всех блоков, зомби на каждом шагу будет проверять , есть ли путь налево и повернёт, когда поворот будет.  Команда «повторить» необходима для проверки поворота на каждом шагу.'
      6:
        image: notes/hoc4_6.jpg
        text: 'Понятие "если" очень важно в программировании. Одной из первых написанных мною программ была игра "крестики-нолики", и она была построена на таком "если":  ЕСЛИ противник близок к победе, займи нужную ему для победы клетку.'
      7:
        image: notes/hoc4_7.jpg
        text: Удачи с использованием блока «Если»!
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: 'Привет, меня зовут Салони. С помощью информатики я пытаюсь решить проблемы здоровья и медицины. Давайте изучим блок "if else" ("если иначе"). Он похож на блок "if" ("если"), но в конце у него есть дополнительная часть - "else" ("иначе").'
      2:
        image: notes/hoc5_2.jpg
        text: Если я поставлю блок «двигаться вперед» в область, где сказано «выполнить», и поставлю блок «повернуть налево» туда, где сказано «иначе», это будет означать, что зомби будет выбирать между двумя вариантами. Если путь впереди свободен, зомби пройдет вперед, а ИНАЧЕ (то есть если вперед никак не пройти) зомби повернется налево.
      3:
        image: notes/hoc5_3.jpg
        text: 'Так же как и блок "если", мы можем добавить блок "если/иначе" внутрь цикла, чтобы зомби продолжал двигаться, а блок "если/иначе" проверял когда надо поворачивать.'
      4:
        image: notes/hoc5_4.jpg
        text: А теперь, отправь зомби туда, откуда он пришел!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: 'Утверждение "если/иначе" (if/else) - выбор между двумя действиями. Давайте посмотрим, как можно использовать "если/иначе" вместе с нашим другом белкой Скратом.'
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: 'Этот блок такой же как блок "если" ("if"), но у него внизу есть дополнительная часть "иначе" ("else"). Если я помещу блок "двигаться вперёд" ("move forward") туда, где написано "выполнить" ("do"), а блок "повернуть вправо" ("turn left") туда, где написано "иначе" ("else"), это значит, что Скрат будет двигаться вперёд, если перед ним есть дорога. Если пути вперёд нет, Скрат повернёт влево.'
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: 'Это и есть принятие решения и совершение одного из двух возможных действии на основании такого решения. И точно так же, как и блоки "если", блоки "если-иначе" можно поместить внутрь блока "повторить" ("repeat").'
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: А теперь давай поможем Скрату добыть этот жёлудь!
    function:
      1:
        image: notes/stage13_1.jpg
        text: Привет, я Брина, инженер в Instagram. Процедура это определённые строки кода, который вы хотите использовать многократно, в результате, вместо написания этого кода каждый раз, вы можете просто использовать один блок.
      2:
        image: notes/stage13_2.jpg
        text: 'Теперь мы научимся создавать процедуры. У процедур есть звездочка в уголке, а имя процедуры  написано сверху.'
      3:
        image: notes/stage13_3.jpg
        text: 'Блоки внутри процедуры описывают, что процедура делает. Эта процедура называется "засыпать 5" и содержит блоки "повторить" и "засыпать".'
      4:
        image: notes/stage13_4.jpg
        text: 'Процедура находится в рабочей области, но наш фермер не может выполнять процедуру, пока мы не достанем блок "засыпать 5" из группы Процедуры.'
      5:
        image: notes/stage13_5.jpg
        text: 'Пусть ваша работа с процедурами будет приятной процедурой! '
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'Привет, меня зовут Макинде. Давайте изучим блок "пока". '
      2:
        image: notes/stage9_6.jpg
        text: 'Блок «пока» будет делать всё, что вы поместите внутрь него, ПОКА условие, написанное  наверху, ВЕРНО.'
      3:
        image: notes/stage9_7.jpg
        text: Например, если фермер стоит на куче, она будет продолжать разбрасывать по одной лопате земли, ПОКА под ней ещё есть куча.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: 'Привет, я Трина, я работаю в Pixar. Я работала над многими фильмами, в том числе "Шрек".'
      2:
        image: notes/stage11_2.jpg
        text: Это наш новый «цикл по». Он будет выполнять действия снова и снова, и вы можете каждый раз немного менять действия.
      3:
        image: notes/stage11_3.jpg
        text: 'В этом примере в нашем «цикле по» сказано: «цикл по счётчику от 50 до 90 с шагом 10», и внутри него есть наш блок «нарисуйте квадрат». Перенесите блок «счётчик» из группы  «Переменные» на место параметра «длина».'
      4:
        image: notes/stage11_4.jpg
        text: Это означает, что наш художник собирается рисовать квадрат со стороной 50. Потом он добавит 10 к длине стороны и нарисует квадрат размером 60. ...Так он будет продолжать добавление 10 к длине стороны квадрата до тех пор, пока не достигнет 90. В результате мы получим квадраты размером 50, 60, 70, 80 и 90.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Привет, меня зовут Жанет, я работаю инженером в Zynga.
      2:
        image: notes/stage15_2.jpg
        text: Что надо делать, если мы хотим нарисовать несколько правильных треугольников разных размеров?
      3:
        image: notes/stage15_3.jpg
        text: 'Мы могли бы написать этот код вручную или вместо этого использовать процедуру "нарисовать треугольник" с параметрами.'
      4:
        image: notes/stage15_4.jpg
        text: Для добавления параметра к процедуре, нажмите на голубую звёздочку на определении процедуры «нарисовать треугольник». Затем перенесите «имя параметра» в блок «параметры».
      5:
        image: notes/stage15_5.jpg
        text: 'Теперь если вы напишете «длина» в том месте, где указано «x» и нажмёте «Ввод» - вы создадите параметр длины для процедуры.'
      6:
        image: notes/stage15_6.jpg
        text: Затем нажмите на звездочку. Теперь откройте группу Переменные и перенесите блок «длина» в блок «двигаться вперед» из вашего определения процедуры на место числа. Прежнее число перенесите в мусорную корзину.
      7:
        image: notes/stage15_7.jpg
        text: 'Чтобы использовать процедуры с параметрами, откройте группу «Процедуры» и перенесите  вашу процедуру «нарисовать треугольник с длиной» .'
      8:
        image: notes/stage15_8.jpg
        text: Теперь вы можете использовать процедуру с параметром, блок параметра нужно брать из группы Математика и задавать в блоке нужное значение длины для рисования треугольников разного размера.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: |
          Поздравляю! 
          По созданному в последнем задании коду ЛЮБОЙ робот может найти дорогу через линейный лабиринт или туннель любого размера. 
          Это может быть зомби, птица, луноход или даже самоуправляемый автомобиль.
      2:
        image: notes/hoc6_2.jpg
        text: |
          Основные понятия, использованные вами, являются центром любой программы, которую вы когда-либо использовали. 
          Мы изучили  циклы "повторить несколько раз" и "повторять пока", а также 
          команды выбора "если" и "если/иначе".
      3:
        image: notes/hoc6_3.jpg
        text: Если вам понравился ваш первый час кода, посетите code.org, чтобы продолжить ваше образование в области компьютерных наук! Завершив наш 20-тичасовой курс, вы освоите основы программирования и можете начать учиться писать приложения для телефонов, инструкции для роботов, игры и много чего ещё.
      4:
        image: notes/hoc6_4.jpg
        text: 'Технологии изменяют всё, чем мы занимаемся, и не важно, молод ты или зрел, программирование - это творческое и занимательное занятие, и ему может обучиться каждый!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: Показать заметки, которые скоро будут!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Привет! Меня зовут Линдси. Я придумываю, моделирую и пишу приложения. Давайте использовать код и присоединимся к Анне и Эльзе в их исследовании магии и красоты льда.
      2:
        image: notes/frozen1_2.jpg
        text: Будем кататься на коньках и рисовать на льду снежинки и узоры, создавать зимнюю страну чудес и делиться этим с друзьями.
      3:
        image: notes/frozen1_3.jpg
        text: 'В течение следующего часа ты узнаешь основное о том, как создавать код. Традиционное программирование - это обычно текст, но мы будем пользоваться языком Блокли, использующим наглядные блоки, которые можно перетаскивать, чтобы писать программы. Таким образом изучают основы даже студенты университетов. Но под прикрытием блоков ты всё равно создаёшь код.'
      4:
        image: notes/frozen1_4.jpg
        text: 'Программа - это набор инструкций, говорящих компьютеру, что делать. Давай построим код, или программу, которая поможет Эльзе провести простую линию. Это позже пригодится нам для создания более сложных узоров.'
      5:
        image: notes/frozen1_5.jpg
        text: 'Экран поделён на три основные части. Слева - лёд, на котором будет запущена твоя программа. Ниже льда находится инструкция к каждому уровню.'
      6:
        image: notes/frozen1_6.jpg
        text: 'Эта часть посередине - панель инструментов, и каждый из этих блоков - действие, которое Эльза и Анна могут совершить.'
      7:
        image: notes/frozen1_7.jpg
        text: 'Белое пространство справа называется рабочим пространством. Это то место, где мы будем строить программу. Чтобы двигаться по льду, ты будешь использовать блок "двигаться вперёд".'
      8:
        image: notes/frozen1_8.jpg
        text: 'Здесь в блоке "двигаться вперёд" указано "двигаться вперёд на 100 точек". Что произойдёт, когда мы нажмём кнопку "Выполнить"? Эльза передвинется вперёд на определённое расстояние, а именно на 100 точек! Точки - это пиксели, крохотные квадратики на экране компьютера.'
      9:
        image: notes/frozen1_9.jpg
        text: 'В другом блоке из этой задачи написано "повернуть вправо на 90 градусов". И когда мы используем такой  блок "повернуть вправо", он заставляет Эльзу повернуть на определённое количество градусов. Можно поиграться, разворачивая Эльзу настолько широко, насколько ты хочешь. Угол откладывается от линии пути впереди Эльзы. Это - поворот на 90 градусов. А это - поворот на 120 градусов.'
      10:
        image: notes/frozen1_10.jpg
        text: Помни, что можно менять количество точек и градусов, нажимая на стрелки рядом с ними.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: 'Привет, я - Паула! Компьютеры хорошо выполняют повторяющиеся действия. Ты можешь сосчитать до 10, 20 или 100. А компьютер может сосчитать до миллиарда и биллиона. И это совершенно не наскучит ему и займёт буквально несколько секунд. Что бы компьютер ни делал - считал, рисовал или делал что-то другие - он может повторять это сотни и даже миллиарды раз.'
      2:
        image: notes/frozen2_2.jpg
        text: 'В программировании мы называем это циклами. Цикл - это когда ты повторяешь свой код снова и снова. В следующей головоломке твоя цель помочь Анне сделать квадрат, используя блок "повторить".'
      3:
        image: notes/frozen2_3.jpg
        text: 'Любой блок кода, который ты поместишь внутрь блока "повторить", будет повторён последовательно столько раз, сколько ты пожелаешь.'
      4:
        image: notes/frozen2_4.jpg
        text: 'Чтобы нарисовать квадрат, можно использовать блоки "двигаться вперёд" и "повернуть вправо" по 4 раза. Но проще сказать компьютеру один раз "двигаться вперёд" и "повернуть вправо на 90 градусов", а потом сказать повторить эти два действия 4 раза. Чтобы это сделать, нужно поместить блоки "двигаться вперёд" и "повернуть вправо" внутрь блока "повторить".'
      5:
        image: notes/frozen2_5.jpg
        text: 'Помни, ты можешь поменять число внутри блока "повторить" на любое другое, и то, что находится внутри этого блока, повторится указанное число раз.'
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: 'Привет, я - Крис Бош. Я - профессиональный баскетболист и я программировал в колледже.'
      2:
        image: notes/frozen3_2.jpg
        text: 'В информатике очень важно понимать, как сформулировать новую команду. Большинство языков программирования содержат около 100 слов или команд. И это настоящее искусство и волшебство - собрать свои собственные новые слова из этих строительных блоков.'
      3:
        image: notes/frozen3_3.jpg
        text: Как только ты научишь компьютер, как совершать действие, используя такую последовательность команд, можно придумать этому действию название, и так потом будет проще повторять его. Когда ты определяешь свою команду и называешь её, это называется функция.
      4:
        image: notes/frozen3_4.jpg
        text: 'Привет, я - Джесс. Если при программировании с помощью блоков появляется необходимость использовать какой-то набор действий несколько раз, следует использовать функции. Например, тобой написан код для создания квадрата.'
      5:
        image: notes/frozen3_5.jpg
        text: 'Можно определить это как функцию и назвать её "создать квадрат" '
      6:
        image: notes/frozen3_6.jpg
        text: Теперь у тебя есть новый блок, который можно использовать множество раз, что бы создать множество квадратов.
      7:
        image: notes/frozen3_7.jpg
        text: Многие из простых фигур можно использовать для создания более сложных узоров. В следующей головоломке написанный тобой код для создания круга можно будет использовать в виде новой функции, которая позволит рисовать круги разных размеров. Поможешь Эльзе создать сложные и красивы узоры из снега?
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: Мы собираемся создавать игры с помощью Лаборатории Игр. У хороших игр есть хорошая история, и в каждой истории есть свои персонажи. Мы научимся создавать таких персонажей как ведьмы, пришельцы, животные; научим их говорить и общаться друг с другом. К концу этого урока вы сможете создавать игры с самого начали и до конца, и делиться ими с друзьями.
      2:
        image: notes/playlab_intro_2.png
        text: 'Ваш экран разделен на 3 основные части. Слева - место для игры, где будет выполняться ваша программа. Инструкции для каждого уровня написаны внизу.'
      3:
        image: notes/playlab_intro_3.png
        text: Посередине экрана находится панель инструментов, где каждый из блоков содержит фрагмент кода. Белое пространство справа называется рабочая область, здесь мы будем собирать нашу программу.
      4:
        image: notes/playlab_intro_4.png
        text: 'Для начала, надо прикрепить ваши блоки к оранжевому блоку "При запуске". Вы можете прикрепить несколько блоков друг к другу. Для этого переместите их друг к другу пока не увидите жёлтую линию. После отпускания, они автоматически соединятся вместе.'
      5:
        image: notes/playlab_intro_5.png
        text: 'В этой первой головоломке, нашим персонажем будет пингвин. Чтобы он сказал "привет", перенесите блок "говорить" к блоку "при запуске", и напишите "привет". Мы можем переместить пингвина используя блоки "двигаться вправо" и "двигаться влево". После того как все блоки расставлены по местам, нажмите на кнопку "Выполнить", чтобы увидеть результат вашей программы.'
      6:
        image: notes/playlab_intro_6.png
        text: Начните работу, и в конце, вы сможете создать свою собственную игру с различными персонажами, которые могут общаться, веселиться, грустить, зарабатывать очки, бросать огненные шары, даже делать так, чтобы другие игроки исчезали. Всё зависит от вас, и того, что вы хотите сделать.
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: А сейчас мы изучим то, что все программисты игр используют каждый день. Это называется событиями. Событие говорит вашей программе ожидать пока что-нибудь не случиться. Когда же это случается, программа выполняет определённое действие.
      2:
        image: notes/playlab_events_2.png
        text: 'Например, событиями могут быть: ожидание нажатия кнопки мыши, клавиши со стрелкой, или касания сенсорного экрана.'
      3:
        image: notes/playlab_events_3.png
        text: 'Теперь мы создадим космического робота, который приветствует землян при нажатии на нём кнопкой мыши. Используйте блок "по щелчку" и прикрепите к нему блок "сказать". Когда игрок щёлкнет кнопкой мыши на космическом роботе, будет выполнено всё, что прикреплено к блоку события "по щелчку". Что скажет ваш пришелец?'
      4:
        image: notes/playlab_events_4.png
        text: 'Существуют также блоки "при нажатии на стрелку". Если вы прикрепите к ним блок "двиаться", вы сможете двигать персонажей вверх, вниз, влево, или вправо. Шаг за шагом, ваша игра станет всё более интерактивной.'
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: 'Это блок "повторять бесконечно". Всё что находится внутри этого блока будет выполняться постоянно во всей игре.'
      2:
        image: notes/playlab_repeat_forever_2.png
        text: 'Если вы хотите, чтобы персонаж постоянно что-нибудь делал без вмешательства игрока, поместите эти блоки внутрь блока "повторять бесконечно".'
      3:
        image: notes/playlab_repeat_forever_3.png
        text: 'Наша цель в этой головоломке - помочь волшебнику охранять границы его королевства, непрерывно передвигаясь влево и вправо. Изучение команды повторения поможет сберечь вам кучу времени в будущем, когда вы будете создавать свои собственные игры.'
    C1_artist_intro:
      1:
        image: notes/C1_artist_intro_1.png
        text: Это ваши блоки рисования. Используйте правильный блок, который переместит художника так, чтобы он закрасил серую линию.
      2:
        image: notes/C1_artist_intro_2.png
        text: Это блоки прыжков. Когда вы используете их, ваш художник перемещается, но не рисует, так что используйте их, чтобы перепрыгнуть на следующую серую линию.
    C1_bee_level_intro:
      1:
        image: notes/C1_bee_level_intro_1.png
        text: Пчёлы! В следующем наборе головоломок твоя цель состоит в том, чтобы помочь пчелам облететь цветы, собрать нектар, и сделать мёд. Тебе нужно будет использовать блоки «собрать нектар» и «сделать мед» для данного упражнения.
      2:
        image: notes/C1_bee_level_intro_2.png
        text: 'Каждый цветок имеет различное количество нектаров: 1, 2, 3 или больше. Мы узнаем, сколько нектара в красных цветах, по маленькой цифре в углу. Так что проверьте, что вы добыли весь нектар из цветка прежде чем идти вперед. Кроме того, каждая Сота может содержать только такое количество меда: 1, 2, 3 или больше. Так что не забудьте сделать столько меда, сколько сота может вместить.'
      3:
        image: notes/C1_bee_level_intro_3.png
        text: 'Если вы сможете собрать весь нектар и сделать мед, вы успешно перейдете на следующих уровень. В противном случае вам придется пройти головоломку ещё раз. Поиграй ещё и посмотри, что чувствует "пчела" программист!'
    C1_bee_loops:
      1:
        image: notes/C1_bee_loops_1.png
        text: 'Цикл - это повторение действия. Например, заходя на проверку в улей, я смотрю на рамку, и затем кладу ее обратно, и повторяю одни и те же действия несколько раз. Это цикл вокруг, повторение действия несколько раз, "по кругу".'
      2:
        image: notes/C1_bee_loops_2.png
        text: 'На этом уровне мы хотим, чтобы пчелы собрали три нектара из цветка. Вместо трех блоков «получить нектар», вы используете блок "повторить", чтобы получить нектар три раза. Нажмите «Запустить» и посмотрите, правильно ли у вас получилось. Замечательно!'
    C1_bigevent_unplugged:
      1:
        image: notes/C1_bigevent_unplugged_1.png
        text: Этот урок называется большое событие. В нём содержится информация о том как мы можем контролировать наши программы и изменить путь, теперь наши программы будут запускаться на лету с помощью таких событий как на нажатие кнопки или щелчок мыши.
      2:
        image: notes/C1_bigevent_unplugged_2.png
        text: В этом уроке вами будут управлять бумажным пультом дистанционного управления. Прям как видео-игра наяву.
      3:
        image: notes/C1_bigevent_unplugged_3.png
        text: Событие — это действие, которое вызывает результат. Это как когда вы нажмете на кнопку мыши и загружается веб-страницу. Это событие. Когда вы касаетесь экрана на полосу для прокрутки, это также событие . События являются отличным способом позволить пользователям обращаться на прямую к вашей программе всякий раз, когда они нуждаются.
      4:
        image: notes/C1_bigevent_unplugged_4.png
        text: 'Все мы реагируем на некоторые вещи. Когда мы голодны - мы идем к холодильнику. Когда мы слышим, что пришел почтальон - мы идем проверять почтовый ящик. Это абсолютно такие же события, как нажатие кнопки или перемещение джойстика. Это то, что заставляет нас что-то делать.'
      5:
        image: notes/C1_bigevent_unplugged_5.png
        text: В видео-играх есть событие под названием «Обновление», и оно происходит 30 или 60 раз в секунду. Для разработчиков видеоигр это почти важнее как событие, нежели чем кнопки или джойстик.
      6:
        image: notes/C1_bigevent_unplugged_6.png
        text: 'Главное событие, которое мы ожидаем, это выполнение "Обновления". В момент этого события мы проверяем джойстик. Другими словами - "Хмм, нажал ли кто-то кнопку в этот момент? Да или нет?" Без событий игрок не мог бы двигаться, прыгать и контролировать, что происходит. Видеоигра потеряла бы способность взаимодействовать с игроком.'
    C1_building_foundation:
      1:
        image: notes/C1_building_foundation_1.jpg
        text: 'Когда ты строишь песчаные замки, ты должен понимать, что неудача - это тоже часть процесса. Но если ты упорный, то это занятие будет становиться для тебя все более и более увлекательным, а ты постепенно будете делать все более и более сложные вещи. Упорство - это часть игры.'
      2:
        image: notes/C1_building_foundation_2.jpg
        text: Этот урок называется закладывание основ. В этом уроке мы будем работать над задачей, которая должна быть очень трудным. Вы должны будете придумать, как сделать постройку высотой не меньше одной из этих чашек; достаточно крепкую, чтобы выдержать вес книги.
      3:
        image: notes/C1_building_foundation_3.jpg
        text: Иногда бывает, что что-то не работает. Иногда бывает, что ты фрустрирован, и хочешь все бросить. В жизни может быть много подобных моментов, но если мы будем продолжать пытаться сделать что-то снова и снова, то мы обязательно это сделаем.
      4:
        image: notes/C1_building_foundation_4.jpg
        text: 'Упорство - это продолжать делать, когда тебе уже хочется всё бросить. Если ты хочешь создать что то новое и особенное, то на пути к этому будет много неудачных попыток.'
      5:
        image: notes/C1_building_foundation_5.jpg
        text: Путь к упорству лежит через извлечение уроков из твоих неудач, вместо того, чтобы все бросить, потому что ты фрустрирован. Фрустрация, по большому счету, означает, что что-то прекрасное ждет тебя совсем недалеко. Не бросай всё, пока ты не добрался до своей цели!
    C1_getting_loopy:
      1:
        image: notes/C1_getting_loopy_1.png
        text: Привет, меня зовут Мирал Котб, и я создатель Iluminate. В моей работе мы используем кое-что как в разработке танцев, так и в разработке лайтсьютов. И это циклы! Циклы повторяют действие снова и снова.
      2:
        image: notes/C1_getting_loopy_2.png
        text: Когда ты повторяешь что-то много раз, например, как мои движения для того, чтобы хулахуп продолжал крутиться, ты выполняешь цикл этого действия. Это цикл. И это цикл.
      3:
        image: notes/C1_getting_loopy_3.png
        text: 'Сегодня мы собираемся устроить танцевальную вечеринку. Мы будем использовать циклы в новом танце - Итерации. Мы изучим циклы, используя танец. Ты выучишь пару простых движений, и будешь повторять их снова и снова для того, чтобы станцевать танец.'
      4:
        image: notes/C1_getting_loopy_4.png
        text: Вот шаги, которые вам нужно выучить. Хлопайте в ладоши. Положите руки за голову. Положите руки на вашу талию. Поднимите левую руку вверх. Поднимите правую руку вверх. Довольно просто, правда? Вы обнаружите, что вы можете сократить описание, разместив несколько танцевальных шагов в циклах.
      5:
        image: notes/C1_getting_loopy_5.png
        text: Мы на самом деле используем циклы в нашем танце. На танцорах закреплены компьютеры, находящиеся в одной сети. Я мог бы зажигать подсветку на костюмах танцоров снова и снова. В цикле у меня должна быть итерация, где я описываю, что хотел бы зажигать подсветку костюмов танцоров снова и снова, увеличивая скорость с каждой итерацией. И все это создается с помощью циклов. Циклы очень важны в компьютерной науке, потому что они делают нашу работу более быстрой и легкой.
    C1_happy_maps_unplugged:
      1:
        image: notes/C1_happy_maps_unplugged_1.png
        text: 'Этот урок называется "Веселые карты". Сегодня мы собираемся помочь нашему пушистому маленькому другу Flurb добраться до фруктов.'
      2:
        image: notes/C1_happy_maps_unplugged_2.png
        text: Помоги Флурб найти путь до фрукта. Для этого тебе нужно понять в каком направлении должна идти Флурб и направлять её с помощью стрелок. В каком направлении должна двигаться Флурб для того, чтобы добраться до яблока? Направьте её вверх.
      3:
        image: notes/C1_happy_maps_unplugged_3.png
        text: Для того, чтобы переместить это туда, ты очерчиваешь путь, по которому нужно двигаться.
      4:
        image: notes/C1_happy_maps_unplugged_4.png
        text: Создайте свой алгоритм путем склеивания стрелок рядом с картой, которую вы пытаетесь решить. Второй алгоритм такой же, но в направлении вниз.
      5:
        image: notes/C1_happy_maps_unplugged_5.png
        text: Это как программирование с бумагой. И вот оно!
    C1_maze_debugging:
      1:
        image: notes/C1_maze_debugging_1.png
        text: Отладка это поиск и устранение проблем. Существует множество способов отладки. Один из простейших способов заключается в пошаговом продвижении до тех пор, пока ты не найдешь что-то, что идет не так. Здесь я пытаюсь выполнить кувырок назад на бревне, но я постоянно падаю.
      2:
        image: notes/C1_maze_debugging_2.png
        text: Я прошел через каждую составляющую и понял, в чем была моя ошибка. Я неправильно ставил руки на бревно. Итак, я попробовал еще раз сделать обратный кувырок на бревне с правильным положением рук и у меня получилось. Я был действительно доволен тем, что я отладил обратный кувырок.
      3:
        image: notes/C1_maze_debugging_3.png
        text: Для того, чтобы изучить отладку, мы начнем с набора блоков, присутствующих на этапе. Ты заметишь, что эти блоки не приведут тебя к цели. Мы должны отладить решение и исправить его. Что пошло не так? Ты заметишь, что нужен еще один блок для того, чтобы продолжать продвигаться на запад.
      4:
        image: notes/C1_maze_debugging_4.png
        text: 'Давайте исправим это путем добавления еще одного блока западного блока и нажмем "Бег" для того, чтобы посмотреть, правильно ли мы это поняли. Да! Вы его получили!'
    C1_maze_intro_sequencing:
      1:
        image: notes/C1_maze_intro_sequencing_1.png
        text: В этой головоломке вам нужно помочь птице добраться до хрюшки. Посмотрите на головоломку и поймите, по какой траектории она должна двигаться.
      2:
        image: notes/C1_maze_intro_sequencing_2.png
        text: Вам нужно перетащить блоки над из панели элементов в рабочую область. Убедитесь, что они находятся под блоком «при запуске» и когда вы будете уверены, что у вас есть правильное решение, то нажмите кнопку «Запуск» и наблюдайте за перемещением птицы к хрюшке.
    C1_maze_loops:
      1:
        image: notes/C1_maze_loops_1.png
        text: Одна из вещей, в которых компьютеры действительно хороши, это повторение команд. Как человеку, тебе становится действительно скучно делать одни и те же вещи много раз подряд. Но компьютер может выполнять одно и то же миллионы или даже миллиарды раз подряд и не только не скучать, но и прекрасно себя чувствовать.
      2:
        image: notes/C1_maze_loops_2.png
        text: Например, если бы я хотел поздравить всех с днем рождения на Фейсбук, это могло бы потребовать более века для написания и отправки всех этих электронных писем. Но с помощью всего нескольких строк кода я могу получить систему, которая отправит всем электронные письма с поздравлениями.
      3:
        image: notes/C1_maze_loops_3.png
        text: |
          Для того, чтобы провести птицу к хрюшке на этом уровне... вместо того, чтобы перетаскивать три блока "Север" на рабочую область, используй блок "Повторение". Перетащи блок "Повторение" на рабочую область и введи цифру 3. После этого перетащи блок "Переместиться на Север" внутрь блока "Повторение" и нажми "Запуск" для того, чтобы понять, правильно ли ты всё сделал. Поздравляем, у тебя это получилось!
          
          
          Получить птица Свиньи в этом уровне..., а не Перетащите три Севера блоков на рабочую область, будет использовать блок «повторить». Перетащите «повторить» блок на рабочую область и введите число 3. Затем перетащите блок «двигаться на север» в блоке «повторить» и нажмите «Запустить», чтобы увидеть, если вы получили это право. Поздравляем вы получили это!
    C1_moveitmoveit_unplugged:
      1:
        image: notes/C1_moveitmoveit_unplugged_1.png
        text: Этот урок называется двигай это, двигай это. Вместе мы собираемся написать программу, чтобы переместить наших друзей со стартового компаса на лицо смайлика.
      2:
        image: notes/C1_moveitmoveit_unplugged_2.png
        text: Но смайлик перевернут лицом вниз и только один человек знает, как туда добраться. Давайте начнем писать эту программу.
      3:
        image: notes/C1_moveitmoveit_unplugged_3.png
        text: 'Программа - это алгоритм, закодированный во что-то, что может быть запущено машиной. Многие из нас думают о программе как о чем-то, что мы пишем для компьютера. Программы и правда хороши для этого, но они также полезны в других местах. Вы можете написать свою собственную игру или даже запрограммировать робота, чтобы он делал что-либо для вас.'
    C1_going_places_safely:
      1:
        image: notes/C1_going_places_safely_1.png
        text: 'Мое имя Иеремия. Привет! Мне семь лет. Я люблю играть на компьютере своей мамы, но я всегда сперва спрашиваю разрешения. "Мам, можно мне поиграть на компьютере? Конечно, милая!"'
      2:
        image: notes/C1_going_places_safely_2.png
        text: 'Я люблю компьютер своей мамы, потому что я могу выходить в Интернет. Интернет - это что-то вроде твоего района. Ты можешь посещать классные места, ты можешь общаться со своей семьей и друзьями и ты можешь узнать много нового.'
      3:
        image: notes/C1_going_places_safely_3.png
        text: Вчера я была в зоопарке, который рядом с моим домом. Я видела детеныша зебры. Я сфотографировала ее и поменяла цвета ее полосок, затем добавила шляпу и добавила это в свою коллекцию забавных животных. Невероятно! Потом я поехала далеко-далеко. Я побывала в Кении. Это страна в Африке. Там живут много зебр.
      4:
        image: notes/C1_going_places_safely_4.png
        text: 'Иногда в Интернете я разговариваю с людьми, которых знаю, как моя бабушка, которая живет в другой области. Привет, бабуля! Она печет печенье, которое отправляет мне на день рождения. "Вкуснятина, вот бы Интернет передавал запах!" Я могу разговаривать с разными людьми в Интернете, например, с двоюродным братом, но я разговариваю только с людьми, которых знаю.'
      5:
        image: notes/C1_going_places_safely_5.png
        text: 'Что я люблю делать в Интернет, так это играть в забавные игры. Выиграл! Также мне нравиться рисовать и создавать новые вещи и делиться ими со своими друзьями. Круто! Иногда я захожу на сайты, на которых узнаю что-то новое, но я всегда "застреваю" на сайтах, которые мне интересны. Ух ты, динозавры!'
      6:
        image: notes/C1_going_places_safely_6.png
        text: 'Интернет супер весёлое место. Но когда вы становитесь он-лайн, вы должны быть так же осторожны как при переходе улицы в своём районе. Запомните три правила. Правило номер 1: сначала спросите ваших родителей. Правило номер 2: разговаривайте только с людьми, которых вы знаете. Правило номер 3: придерживайтесь мест, которые вам подходят.'
      7:
        image: notes/C1_going_places_safely_7.png
        text: Ого, это было весело! Но уже время ужина. Я выхожу. Жду не дождусь, когда вернусь.
    C1_pair_programming:
      1:
        image: notes/C1_pair_programming_1.png
        text: Сегодня мы собираемся учиться парному программированию. В парном программировании вы работает как команда. Почему двум людям следует пользоваться одним компьютером? Потому что две головы лучше, чем одна. В парном программировании вы и ваш партнёр садитесь вместе за один компьютер и вы вдвоём работаете над одним проектом.
      2:
        image: notes/C1_pair_programming_2.png
        text: 'В парном программировании один человек водитель, а другой - штурман, как при вождении автомобиля. Водитель сидит за компьютером и с помощью клавиатуры и мышки или сенсорного экрана управляет основными действиями компьютера. Другой человек штурман. Штурман помогает водителю отвечать на его вопросы и указывает возможные проблемы или ошибки.'
      3:
        image: notes/C1_pair_programming_3.png
        text: Общение это ключ к успеху в парном программировании. Без оскорблений, будьте вежливыми, не будьте высокомерным штурманом, потому что никому не нравятся надоедливые пассажиры. Вам и вашему партнёру следует всегда общаться. Водитель может объяснить, что она или он делают. А штурман может предложить помощь, что делать дальше.
      4:
        image: notes/C1_pair_programming_4.png
        text: Штурману следует думать об общей картине, а водителю фокусироваться на деталях. Обе роли важны. Парное программирование это всё о работе вместе как одна команда.
    C1_planting_seed:
      1:
        image: notes/C1_planting_seed_1.png
        text: 'Урок называется "Посадка семян" и он поможет нам понять алгоритмы. Алгоритмы - это определенные инструкции, которые объясняют в каком порядке что-то делается. Даже для того чтобы выполнить такие повседневные действия, как принятие пищи или чистка зубов, нужно выполнить ряд маленьких шагов.'
      2:
        image: notes/C1_planting_seed_2.png
        text: 'Компьютеры могут быть действительно умными, но они понимают только в том случае, если ты "говоришь" им шаг за шагом, что ты хочешь. В алгоритмах замечательно то, что если по-порядку следовать инструкциям, то можно сделать то, что до этого ты не знал как делать. Это как следовать рецепту.'
      3:
        image: notes/C1_planting_seed_3.png
        text: Сегодня, используя алгоритмы, мы будем сажать собственные семена. Создай алгоритм, разрезав картинки на части. Выбери те картинки, на которых изображена посадка семян, и расположи их в правильном порядке.
      4:
        image: notes/C1_planting_seed_4.png
        text: Пришло время проверить работу алгоритма. Очень внимательно выполняй шаги в алгоритме. Они в правильном порядке? Удалось тебе посадить семя, следуя алгоритму? Это как программирование с картинками!
      5:
        image: notes/C1_planting_seed_5.png
        text: 'Когда мы хотим сделать шоколад, мы должны сделать много больших шагов на пути к этому, и каждый из этих шагов имеет набор небольших шагов, и также существуют различные рецепты или алгоритмы в зависимости от того, каким мы хотим сделать вкус шоколада. Каждый шаг является важным, даже самый маленький, ибо без него остальной процесс невозможен. Создание алгоритмов, которые могут быть понятными для других - это действительно важно. Вот почему каждый шаг должен быть написан так, что независимо от того, кто его делает, результат остается одинаковым.'
    C1_playlab_storytelling:
      1:
        image: notes/C1_playlab_storytelling_1.png
        text: Время проявить творчество и использовать свои навыки кодирования, чтобы рассказать историю. Ваша история будет иметь актеров, и вы заставите этих актеров говорить и взаимодействовать друг с другом. Начните думать, какую именно историю вы хотите рассказать.
      2:
        image: notes/C1_playlab_storytelling_2.png
        text: 'Кот всегда боится собаку, но что будет, если кот выяснит, что собака пытается понравиться? Всё начинается с блока "при запуске". Блок "движения" приведет в движение ваш персонаж, а блок "говорить" заставит ваш персонаж сказать всё, что вы введёте.'
      3:
        image: notes/C1_playlab_storytelling_3.png
        text: 'Это блок "когда персонажи сталкиваются", который ты можешь связать с другими блоками.'
      4:
        image: notes/C1_playlab_storytelling_4.png
        text: 'Я делала так, что пес приходил и говорил "Привет", но тогда кот пугался и убегал прочь. "Ох", если бы было больше времени, был бы счастливый конец. Конец!'
    C1_spelling_bee_intro:
      1:
        image: notes/C1_spelling_bee_intro_1.png
        text: Это уровень правописания. Используй кусочки пазла, чтобы переместить пчелу. Перемещаясь, она будет собирать буквы в слова.
      2:
        image: notes/C1_spelling_bee_intro_2.png
        text: Посмотри, сможешь ли ты составить слово, которое дано под игровым полем в рамке. Но будь осторожен! Перемещение пчелы не в том направлении добавит ненужные буквы.
    C1_zuck_repeat_loop:
      1:
        image: notes/C1_zuck_repeat_loop_1.png
        text: Одна из вещей, в которых компьютеры действительно хороши, это повторение команд. Как человеку, тебе становится действительно скучно делать одни и те же вещи много раз подряд. Но компьютер может выполнять одно и то же миллионы или даже миллиарды раз подряд и не только не скучать, но и прекрасно себя чувствовать.
      2:
        image: notes/C1_zuck_repeat_loop_2.png
        text: Например, если бы я хотел поздравить всех с днем рождения на Фейсбук, это могло бы потребовать более века для написания и отправки всех этих электронных писем. Но с помощью всего нескольких строк кода я могу получить систему, которая отправит всем электронные письма с поздравлениями.
      3:
        image: notes/C1_zuck_repeat_loop_3.png
        text: 'В этом примере вы должны двигать птицу, чтобы добраться до свиньи. Чтобы сделать это легче, мы будем использовать блок повтора. Это можно сделать двумя способами. Первый - это использовать команду двигаться вперед пять раз для продвижения птицы на один шаг за раз. Второй способ - это повторить блок двигаться вперед пять раз, используя блок повтора.'
      4:
        image: notes/C1_zuck_repeat_loop_4.png
        text: Для того, чтобы сделать это, перенесите команду «двигаться вперед» в блок повтора. Вы можете нажать на него и указать сколько раз повторять выполнение блока внутри (на сколько шагов пройти вперёд).
      5:
        image: notes/C1_zuck_repeat_loop_5.png
        text: Еще одна вещь, вы можете поместить несколько команд внутрь блока повторить. В этом примере мы говорим двигаться вперед и повернуть налево пять раз. Удачи!
    C2_artist_intro:
      1:
        image: notes/C2_artist_intro_1.png
        text: Вы даже не будет претендовать на участие в гонках, если у вас нет людей, которые являются специалистами в области компьютерных наук. Автомобили собирают много данных, которые надо анализировать. Люди должны писать программы, чтобы анализировать данные для повышения производительности.
      2:
        image: notes/C2_artist_intro_2.png
        text: В этом задании вы будете художником, который рисует фигуры с помощью карандаша. Когда художник шагает, то позади него рисуется линия.
      3:
        image: notes/C2_artist_intro_3.png
        text: 'Для перемещения по полотну, вам надо будет использовать блок "двигаться вперед". Этот блок "двигаться вперед" говорит двигаться вперед на 100 пикселей. Что произойдёт, когда мы нажмём "выполнить"? Художник движется вперед на определенное расстояние, и это расстояние составляет 100 пикселей. Пиксели - это очень маленькие квадраты на экране вашего компьютера.'
      4:
        image: notes/C2_artist_intro_4.png
        text: Другой блок в этой головоломке поворачивает направо на 90 градусов. Когда мы перенесём его в рабочую область, то наш художник повернется. Вы можете изменять на сколько он должен поворачиваться. Этот поворот на 90 градусов.
      5:
        image: notes/C2_artist_intro_5.png
        text: А это поворот на 120 градусов. Помните, что вы можете изменить эти значения нажав на стрелки рядом с цифрами для пикселей и градусов. Наслаждайтесь рисованием с вашим художником!
    C2_bee_conditionals:
      1:
        image: notes/C2_bee_conditionals_1.png
        text: Это блок условия. Он говорит ЕСЛИ нектара или мёда меньше определённого числа, ТО делай что-нибудь.
      2:
        image: notes/C2_bee_conditionals_2.png
        text: Это полезно, когда мы не знаем, сколько нектара или мёда получить. Например, как мы видим это здесь с вопросительным знаком.
      3:
        image: notes/C2_bee_conditionals_3.png
        text: В этом примере мы собираемся сказать ЕСЛИ фиолетовый цветок имеет нектара больше 0, ТО собрать нектар. Это скажет нашим пчелам собирать нектар до тех пор, как он не закончится!
    C2_binary_bracelets:
      1:
        image: notes/C2_binary_bracelets_1.png
        text: Этот урок с двоичными браслетами. Мы запрограммируем наши инициалы на браслете, который вы можете носить и показывать друзьям!
      2:
        image: notes/C2_binary_bracelets_2.png
        text: 'Двоичная система - это способ представления информации используя только два символа, например, 0 и 1. Также, включено-выключено, вверх-вниз, войти-выйти представляют двоичную информацию.'
      3:
        image: notes/C2_binary_bracelets_3.png
        text: 'Привет, меня зовут Орион и я программную роботов здесь, на Play-im. Все мозги компьютеров и роботов в основном маленькие электронные калитки. Когда калитка открыта, электричество может пройти, а когда закрыта - не может.'
      4:
        image: notes/C2_binary_bracelets_4.png
        text: 'Примером двоичной системы у данного робота являются его глаза. Это светодиоды которые или светят или нет. Это и есть двоичная система "или один или другой". Мы можем использовать лампочки, чтоб отобразить двоичные номера. Если у нас несколько роботов мы можем сказать что первый на первом месте, второй - на втором, четвертый на четвертом и так далее. Вот как отображается двоичный номер. Роботы будут делать это своими двоичными глазами и считать для тебя.'
    C2_conditionals_with_cards:
      1:
        image: notes/C2_conditionals_with_cards_1.png
        text: 'Этот урок называется "условия с карточками". Каждый день ты принимаешь решения, основываясь на том, что видишь и слышишь.'
      2:
        image: notes/C2_conditionals_with_cards_2.png
        text: Я хочу пойти погулять в парк, на сначала мне надо решить, брать ли с собой зонтик или нет. Для это я смотрю в окно. Если за окном облачно, то мне следует взять зонтик, а если нет, то я возьму солнцезащитные очки. Я думаю, что будет лучше взять зонтик. То, что я вижу и слышу, определяет, что я возьму с собой в парк.
      3:
        image: notes/C2_conditionals_with_cards_3.png
        text: |
          Условные выражения также используются и в играх. Сегодня мы попробуем использовать условные выражения в карточной игре. В этой игре, нарисованная карточка будет определять действия моих друзей. Если я нарисую семь, то все должны хлопать. Иначе все скажут "ох". Давай попробуем! 
          "Ох" или "приветствие"
      4:
        image: notes/C2_conditionals_with_cards_4.png
        text: 'Бьюсь об заклад, что Ты можешь создавать еще более забавные игры с помощью условных выражений. Попробуй! Условные выражения - вот что делает компьютер умным. Компьютерная программа, содержащая условные выражения, может реагировать на действия пользователя и менять свой ход действий.'
      5:
        image: notes/C2_conditionals_with_cards_5.png
        text: Вспомните Вашу любимую компьютерную игру. Вы зарабатываете больше очков за одни действия чем за друге? Это происходит, потому что компьютер использует условные выражения. Так компьютер может принимать решения. Например, если Вы достигли цели, то заработаете 10 очков, иначе, если проиграете, то потеряете 3 очка. Когда Вы знаете, как работают условные выражения, Вы можете создавать самые разнообразные захватывающие игры.
    C2_artist_debugging:
      1:
        image: notes/C2_artist_debugging_1.png
        text: Здесь уже есть некоторые блоки кода на рабочем пространстве, но что-то в них неправильно.
      2:
        image: notes/C2_artist_debugging_2.png
        text: Давайте отладим этот код, замедлив скорость, и будем наблюдать за его исполнением шаг за шагом.
      3:
        image: notes/C2_artist_debugging_3.png
        text: Ой, у нас проблема! Длина усов кошки 75 пикселей, а не 25.
    C2_bee_debugging:
      1:
        image: notes/C2_bee_debugging_1.png
        text: Вы когда-нибудь слышали об отладке программы? Это способ, с помощью которого ты выясняешь, что не работает. Когда ты отлаживаешь свой код, ты определяешь и устраняешь ошибки.
      2:
        image: notes/C2_bee_debugging_2.png
        text: 'У нас есть несколько блоков в рабочем пространстве. Мы будем использовать кнопку "Шаг" для прохода через блоки, шаг за шагом, чтобы увидеть, является ли это решение правильным и где нам может потребоваться его исправить.'
      3:
        image: notes/C2_bee_debugging_3.png
        text: 'Кажется у нас проблема! Нам нужен еще один "двигаться вперед" блок. Кнопка "шаг" поможет исправить ошибку, обнаружив в каком месте она находится, и мы сможем исправить нашу проблему.'
    C2_digital_footprint:
      1:
        image: notes/C2_digital_footprint_1.png
        text: 'У тебя на голове шляпа и твой ум подскажет тебе, где ты находишься, и подумай о зоопарке и приветственно кивни - тебе и тебе! Используй свою голову, когда ты онлайн, чтобы сохранить то, что внутри твоего ума, и знай, как обезопасить себя, как дать своей жизни личное пространство! От головы до пальцев ног, сделай паузу, подумай об этом. От твоих ног до носа, остановись и подумай онлайн!'
      2:
        image: notes/C2_digital_footprint_2.png
        text: 'Используйте ваше сердце, чтобы расти и вырастать, и дать себе здоровое сияние, и сделайте валентинку, чтобы сказать кому-то: будь со мной! Используйте ваше сердце, когда вы онлайн, чтобы почувствовать, что правильно и где доброта, и покажите вашим друзьям уважение к ним, чтобы быть справедливым и хорошим в интернете. От головы до пальцев ваших ног, остановитесь, подумайте об этом. От ваших ног до вашего носа, сделайте паузу и подумать онлайн!'
      3:
        image: notes/C2_digital_footprint_3.png
        text: Используйте свои руки, чтобы обнимать своего питомца, чтобы защитить свою одежду от промокания и чтобы носить свои любимые рукава и для того, чтобы летать и заставить тебя поверить. Используйте свои руки, когда вы онлайн, чтобы сделать перерыв и сохранить баланс времени и оставить свою технику позади и найти дерево, чтобы на него вскарабкаться. От макушки до кончиков пальцев, сделайте паузу, подумайте об этом. От ваших ног до кончика носа, сделайте паузу и думайте в режиме онлайн!
      4:
        image: notes/C2_digital_footprint_4.png
        text: Используйте ваш живот для хранения пищи и слушайте его урчание, чтобы погрузиться в него и почувствовать, как лопаются пузырьки газа. Используйте ваш живот, когда вы в сети, чтобы увидеть определенные знаки и пусть они покажут вам путь и скажут, когда что-то не так. От головы до пальцев ног, остановитесь, подумайте об этом. От ваших ног до вашего носа сделайте паузу и подумайте онлайн!
      5:
        image: notes/C2_digital_footprint_5.png
        text: "So think with your head, and feel with your heart, balance with your arms, listen to your gut, online. Use your legs to run and kick, and to jump and bounce on a pogo stick, and to dance around the block, and to skip along in your smelly socks. Use your legs when you're online, to stand up to bullies who cross the line, and remember to stand tall, be nice to creatures great and small."
      6:
        image: notes/C2_digital_footprint_6.png
        text: From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online! So think with your head, and feel with your heart, balance with your arms, listen to your gut, stand up with your legs. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!
    C2_digital_footprint_v2:
      1:
        image: notes/C2_digital_footprint_v2_1.png
        text: Каждый раз, когда вы заходите в сеть, вы оставляете след, который можно отследить, скопировать, поделиться, опубликовать и является постоянным. Какой цифровой след вы оставляете? Какой цифровой след вы хотите оставить?
    C2_graph_paper:
      1:
        image: notes/C2_graph_paper_1.png
        text: |-
          This lesson is called "Graph Paper Programming" and it's all about algorithms. Today we're going to learn how to write programs that show each other how to recreate simple black and white images, using only hand drawn arrows.
      2:
        image: notes/C2_graph_paper_2.png
        text: Алгоритм — список инструкции для завершения задачи. Мы будем следовать этому набору инструкций, чтобы сделать чашу. Алгоритмы действительно полезны, когда нужно, чтобы кто-то еще понял, как что-то сделать.
      3:
        image: notes/C2_graph_paper_3.png
        text: Если вы пишете алгоритм для компьютера, вам необходимо разбить его на маленькие шаги. Сначала закончите этот ряд и переходите к следующему, а затем к следующему за ним и дело будет сделано.
      4:
        image: notes/C2_graph_paper_4.png
        text: Я использую алгоритмы в моей работе. Если я запишу все шаги, то смогу воссоздать тот же кусок снова, или я могу научить кого-то другого сделать это. Положите стекла в печь, соедините их вместе, следуйте инструкциям, чтобы сделать чашу. Алгоритмы дают вам карту для выполнения чего-либо.
    C2_artist_loops:
      1:
        image: notes/C2_artist_loops_1.png
        text: Здесь мы будем использовать блок повтора, это поможет нам сохранить шаги во время программирования нашего художника. У нас уже есть несколько блоков на сцене, но они там простодля того, чтобы было с чего начать.
      2:
        image: notes/C2_artist_loops_2.png
        text: 'Чтобы зациклить эти блоки четыре раза для того, чтобы нарисовать целый квадрат, мы просто перетащим блок "повторить" и поместим блоки "двигаться вперед" и "повернуть направо" внутри блока "повторить". Когда мы нажмем "запуск", художник будет повторять эти шаги четыре раза, чтобы закончить квадрат.'
    C2_bee_loops:
      1:
        image: notes/C2_bee_loops_1.png
        text: 'Цикл - это повторение действия. Заходя в улей на проверку, я смотрю на рамку и затем возвращаю ее на место. Я повторяю одно и то же действие несколько раз. Процесс зацикливается, повторяя одно и то же действие несколько раз.'
      2:
        image: notes/C2_bee_loops_2.png
        text: 'Это блок "повторить". Что бы вы не поместили внутрь блока "повторить", оно будет повторяться количество раз, которое вы ему сообщите. Например, на этом уровне, вместо того, чтобы перетаскивать блоки "двигаться вперед" и "собирать нектар" три раза, мы собираемся просто перетащить их один раз каждый и повторить действие три раза. Это намного проще!'
    C2_maze_intro:
      1:
        image: notes/C2_maze_intro_1.png
        text: Обычно, при программировании требуется писать программу текстом, но мы будем использовать язык Блокли. В нём для написания программы требуется просто перетаскивать блоки, а программа будет создаваться автоматически. Для начала, создадим программу, которая поможет Angry Bird пройти через Лабиринт и наказать злых свиней, укравших птичьи яйца.
      2:
        image: notes/C2_maze_intro_2.png
        text: 'Блокли делится на три основные части. Слева Птичий лабиринт, в котором ваша программа будет выполняться. Инструкции для каждого уровня расположены под Лабиринтом. Средняя часть - это панель инструментов, в которой каждый блок является командой исполняемой птицей. Пространство справа называется рабочей областью. В ней мы будем создавать программу.'
      3:
        image: notes/C2_maze_intro_3.png
        text: 'If I drag the move block to our work space and press "Run", what happens? The bird moves forward one box on the grid. And what if I want the bird to do something after it moves forward one box? I can add another block to our program.'
      4:
        image: notes/C2_maze_intro_4.png
        text: |-
          I'm going to choose the "turn right" block and I'll drag it under my move block until the yellow arrow appears. Then I'll drop it and the two blocks will snap together. When I press "Run" again,  the bird will perform the commands that are stacked from top to bottom on our work space.
      5:
        image: notes/C2_maze_intro_5.png
        text: "If you ever want to delete a block, just remove it from the stack and drag it to the trash can. After you've hit run, you can always hit the reset button to get the bird back to the start. Now let's get those pigs!"
    C2_paper_airplanes:
      1:
        image: notes/C2_paper_airplanes_1.png
        text: 'Этот урок называется Алгоритмы повседневной жизни. Алгоритмы описывают вещи, которые люди делают каждый день. Рецепты печенья и описания для постройки скворечника - это примеры повседневных алгоритмов.'
      2:
        image: notes/C2_paper_airplanes_2.png
        text: Сегодня мы будем придумывать, реализовывать и тестировать алгоритм бумажного самолетика. Но, во-первых, нам нужно разбить этот большой проект на легкие маленькие шаги. Для изготовления бумажного самолетика, нам нужно решить, какие шаги предпринять и в каком порядке.
      3:
        image: notes/C2_paper_airplanes_3.png
        text: Вы создадите свой алгоритм, для начала, нарезкой фотографии. Далее, вы выберете 6 фотографии, которые показывают необходимые шаги для создания бумажного самолетика, расположите эти фотографии в правильном порядке. После того, как у вас все разложено по порядку, обменяйтесь алгоритмами с другой ученической командой, чтобы проверить работоспособность алгоритма. Очень важно, чтобы хорошо спроектированный алгоритм создавал самый лучший бумажный самолетик.
      4:
        image: notes/C2_paper_airplanes_4.png
        text: "When we want to make chocolate, there are many big steps to that process. And each of those big steps has its own set of smaller steps. And there are different recipes, or algorithms, depending on how we want the chocolate to taste. Each step is important, even the small ones. So without one step, the rest of them cannot be completed. Creating algorithms that others can understand is really important. That's why each step has to be written down, so no matter who does it, the result is the same."
    C2_playlab_createastory:
      1:
        image: notes/C2_playlab_createastory_1.png
        text: До этого момента, вы создавали анимацию или игру, которая делает то же самое каждый раз вы её запускаете. Теперь вы можете сделать интерактивную игру, в которую на самом деле можно будет поиграть.
      2:
        image: notes/C2_playlab_createastory_2.png
        text: 'Используйте блоки "когда стрелка" и "переместить персонаж". Вы можете соединить эти блоки вместе, чтобы передвигать персонаж нажатием клавиш со стрелками.'
    C2_relay_programming:
      1:
        image: notes/C2_relay_programming_1.png
        text: "Today we're going to do relay programming. It's all about programming under pressure and debugging the mistakes that sometimes happen when you work really quickly or in teams. We'll use graph paper programming to simulate coding, and use relay races to simulate having a deadline."
      2:
        image: notes/C2_relay_programming_2.png
        text: "In relay programming, teams will be racing to finish a graph paper program. You have to check your teammate's work, or debug it, fix it if there's a mistake, add your arrow, and run back and tag your teammate."
      3:
        image: notes/C2_relay_programming_3.png
        text: 'Для поиска и исправления ошибок в алгоритме и коде программисты используют отладку кода. Есть много способов исправить проблемы. Один из самых простых - двигаться шаг за шагом, пока вы не найдёте место, где что-то не так, затем исправить это.'
      4:
        image: notes/C2_relay_programming_4.png
        text: "Here, I'm trying to do a back handspring, but I keep falling off. I walk through each part, step by step, and realize where my mistake was. My coach showed me I wasn't putting my hands on the beam correctly. So I tried another back handspring on the beam with my new hand position, and I stuck it! I was really glad I debugged my back  handspring. We figured it out! Debugging is finding and fixing problems. Nice, good job!"
    C2_zuck_repeat_loop:
      1:
        image: notes/C2_zuck_repeat_loop_1.png
        text: "One thing that computers are really good at is repeating commands. As a person, you'd get really bored if you had to do the same thing lots of times in a row. But a computer can do the same thing millions or even billions of times, and not get bored and be able to carry that out really well."
      2:
        image: notes/C2_zuck_repeat_loop_2.png
        text: "So for example if I wanted to wish everyone on Facebook a happy birthday by sending them an email, it might take me more than a century to actually write out all of those emails to everyone. But with just a few lines of code, I can have a system send an email to everyone on Facebook wishing them a happy birthday. So that's what loops are, and why they're valuable, and something that computers can do very well."
      3:
        image: notes/C2_zuck_repeat_loop_3.png
        text: |-
          In this example your goal is going to be to move the bird to get the pig.  Now we're gonna be able to use the "repeat" block in order to be able to do this very easily. You can either do this by giving the computer a "move forward" command five times in order to advance the bird one step each time to the pig.
      4:
        image: notes/C2_zuck_repeat_loop_4.png
        text: 'Or you can just tell the computer to "move forward" once, and then tell it to "repeat" that 5 times, and it will do the same thing. So in order to do this you drag your "move forward" command, and then you put it inside the "repeat" block.And you can click on it and tell it how many times you want to repeat the block to tell it how many steps you want it to take forward.'
      5:
        image: notes/C2_zuck_repeat_loop_5.png
        text: |-
          Now one more thing is you can put as many commands as you want inside the "repeat" block. So in this example you're telling it to move forward and turn left, which it will do five times. All right good job and have fun!
    C3_artist_functions:
      1:
        image: notes/C3_artist_functions_1.png
        text: "One of the great things in computer programming is once you've taught a computer how to do an action, you can call that function again. You give it a name and then you can call it. That's really like extending the language."
      2:
        image: notes/C3_artist_functions_2.png
        text: "In the program we built, we learned how to draw a square by moving and turning four times. We can take that function and give it a name, draw a square, so that any time we want to do that, we simply say draw a square and it will go back and invoke that function, that code. It will get done for us. We've added that concept to our programming language."
    C3_artist_intro:
      1:
        image: notes/C3_artist_intro_1.png
        text: Вы даже не будет претендовать на участие в гонках, если у вас нет людей, которые являются специалистами в области компьютерных наук. Автомобили собирают много данных, которые надо анализировать. Люди должны писать программы, чтобы анализировать данные для повышения производительности.
      2:
        image: notes/C3_artist_intro_2.png
        text: В этом задании вы будете художником, который рисует фигуры с помощью карандаша. Когда художник шагает, то позади него рисуется линия.
      3:
        image: notes/C3_artist_intro_3.png
        text: 'Для перемещения по полотну, вам надо будет использовать блок "двигаться вперед". Этот блок "двигаться вперед" говорит двигаться вперед на 100 пикселей. Что произойдёт, когда мы нажмём "выполнить"? Художник движется вперед на определенное расстояние, и это расстояние составляет 100 пикселей. Пиксели - это очень маленькие квадраты на экране вашего компьютера.'
      4:
        image: notes/C3_artist_intro_4.png
        text: Другой блок в этой головоломке поворачивает направо на 90 градусов. Когда мы перенесём его в рабочую область, то наш художник повернется. Вы можете изменять на сколько он должен поворачиваться. Этот поворот на 90 градусов.
      5:
        image: notes/C3_artist_intro_5.png
        text: А это поворот на 120 градусов. Помните, что вы можете изменить эти значения нажав на стрелки рядом с цифрами для пикселей и градусов. Наслаждайтесь рисованием с вашим художником!
    C3_artist_nested_loops:
      1:
        image: notes/C3_artist_nested_loops_1.png
        text: "When you put a loop inside of another loop, we call that a nested loop. For example, here we're given the code already to draw one triangle with sides of length 100 pixels using the repeat times block set to three, once for each side of a triangle."
      2:
        image: notes/C3_artist_nested_loops_2.png
        text: "But we want to draw six triangles. In order to do that, we're going to take that loop and place it inside of another repeat times block. Pretty cool!"
    C3_bee_conditionals:
      1:
        image: notes/C3_bee_conditionals_1.png
        text: Это блок условия. Он говорит ЕСЛИ нектара или мёда меньше определённого числа, ТО делай что-нибудь.
      2:
        image: notes/C3_bee_conditionals_2.png
        text: Это полезно, когда мы не знаем, сколько нектара или мёда получить. Например, как мы видим это здесь с вопросительным знаком.
      3:
        image: notes/C3_bee_conditionals_3.png
        text: В этом примере мы собираемся сказать ЕСЛИ фиолетовый цветок имеет нектара больше 0, ТО собрать нектар. Это скажет нашим пчелам собирать нектар до тех пор, как он не закончится!
    C3_debugging_bee:
      1:
        image: notes/C3_debugging_bee_1.png
        text: Вы когда-нибудь слышали об отладке программы? Это способ, с помощью которого ты выясняешь, что не работает. Когда ты отлаживаешь свой код, ты определяешь и устраняешь ошибки.
      2:
        image: notes/C3_debugging_bee_2.png
        text: 'У нас есть несколько блоков в рабочем пространстве. Мы будем использовать кнопку "Шаг" для прохода через блоки, шаг за шагом, чтобы увидеть, является ли это решение правильным и где нам может потребоваться его исправить.'
      3:
        image: notes/C3_debugging_bee_3.png
        text: 'Кажется у нас проблема! Нам нужен еще один "двигаться вперед" блок. Кнопка "шаг" поможет исправить ошибку, обнаружив в каком месте она находится, и мы сможем исправить нашу проблему.'
    C3_bee_functions:
      1:
        image: notes/C3_bee_functions_1.png
        text: One of the most important concepts in computer science is how to define new commands, how to add your own words to a computer language. Most computer languages have only about one hundred words or commands. The art and magic is in defining your own new words out of these building blocks.
      2:
        image: notes/C3_bee_functions_2.png
        text: "We do this all the time in sports. For example, in basketball, you start by learning how to dribble, how to do a lay-up, how to rebound. Once you've learned these really basic moves, you learn new moves and put together these building blocks, like a pick and roll or give and go. You can then go from there to do more complex plays. Once you learn that play and give it a name, everybody on the team knows how to do it."
      3:
        image: notes/C3_bee_functions_3.png
        text: "Similarly once you've taught a computer how to do an action once using these sequences of commands, you can make up your own name for that action so it's easy to repeat it later. When you define your own command and give it a name, that's called a function. Now we're going to use functions to help the bee."
      4:
        image: notes/C3_bee_functions_4.png
        text: "In this example, our function is called get 2 nectar, this green block right here. We know what get 2 nectar does by looking at this grey box which is the function definition. If we look inside there, the get 2 nectar is going to get nectar and then get nectar again. Always look at what's inside the grey box so that you know what these green function blocks can do."
    C3_bee_nested_loops:
      1:
        image: notes/C3_bee_nested_loops_1.png
        text: "Now we're going to use nested loops with the bee. We're given some starter code which tells the bee to move forward and get nectar three times and then turn right. Let's take that whole piece of code and nest it inside another repeat block and set to repeat three times. Done!"
    C3_bounce:
      1:
        image: notes/C3_bounce_1.png
        text: "You're going to be creating your very own bounce game that you'll be able to share with your friends! How cool!"
      2:
        image: notes/C3_bounce_2.png
        text: To get started, we have to link up the paddle controls to the arrow keys on our keyboard.
      3:
        image: notes/C3_bounce_3.png
        text: "We can do this by linking the when left arrow block to the move left block and the when right arrow block to the move right block. Give it a go and you'll be programming your own bounce game in no time!"
    C3_computational_thinking:
      1:
        image: notes/C3_computational_thinking_1.png
        text: "This lesson is computational thinking. Sometimes learning a new game can be tough, right? At first it might seem really confusing and sometimes, there's no one there to teach you the rules, so you have to figure it out on your own."
      2:
        image: notes/C3_computational_thinking_2.png
        text: "The good news is that you can get better at figuring things out on your own when you know a few thinking tricks. These tricks are unique ways for looking at and solving problems. In this lesson, you'll learn about four tricks and practice them with your friends to figure out the rules to a game."
      3:
        image: notes/C3_computational_thinking_3.png
        text: "When you break down a big problem into smaller pieces, you're using your brain to decompose the big problem. Once we've decomposed the big problem into several smaller problems, we can go on to our next trick, which is called pattern match."
      4:
        image: notes/C3_computational_thinking_4.png
        text: "That's when we look for similarities between things. Once I find the things that are the same, I can figure out what things are different. When I remove those differences, that's called abstraction."
      5:
        image: notes/C3_computational_thinking_5.png
        text: "After I have figured out the steps to solving a problem, I can put those steps in a specific order called an algorithm so that anyone can use my directions to solve that problem. We're going to use these four steps to figure out how to play the game with no rules. By the end of the game, you'll be able to play something that looks like this!"
    C3_crowdsourcing:
      1:
        image: notes/C3_crowdsourcing_1.png
        text: "This lesson is called crowdsourcing. In this lesson we'll use a deck of cards to learn about how much easier some things can be to do in groups instead of trying to do them all alone. So grab some friends and make something awesome. Crowdsourcing is getting help from a large group of people to finish something faster."
      2:
        image: notes/C3_crowdsourcing_2.png
        text: In computer science, we use crowdsourcing all the time. Thousands of amateurs and professionals link their computers together to search through billions and billions of pieces of information. Looking for things like the next Marsenne prime number, or even possible alien communications.
      3:
        image: notes/C3_crowdsourcing_3.png
        text: "When you see a movie, each second of the movie is 24 individual pictures, we call those frames. So every one of those pictures needs to be created and rendered and put all together. My team and I, we're all software developers. We all work together to create a piece of software that actually creates an image, creates the final image that you see on screen. That's a tool that artists and other developers can use as part of their teamwork and their process to be able to create the images that they want on screen."
      4:
        image: notes/C3_crowdsourcing_4.png
        text: "For example, in Finding Nemo, when Crush and Squirt and all their friends are flying through the East Australian Current. You're seeing images of water flowing by, you're seeing the colors on the back of the turtle, you're seeing the sides of the fish. All of those things are generated through math and computer programs that we write, that we then give to the artist and they take that to create that final image and tweak it and make it look beautiful and look fun."
    C3_dice_race:
      1:
        image: notes/C3_dice_race_1.png
        text: This lesson is called dice race. Almost everyone likes to play computer games. Have you ever thought about how computer programmers turn the steps of a game into a program? The first step in creating computer games and in solving any problem requires thinking and planning.
      2:
        image: notes/C3_dice_race_2.png
        text: "The thinking step of problem solving produces an algorithm, which is a step by step plan for solving a problem or finishing a task. In this lesson, you'll create an algorithm for a dice race game. Then you'll ask your friends to try out your plan to see if they can follow the steps to play the game. After the programmer is sure the steps are correct, it's time to translate the algorithm into a program with language that the computer can understand."
      3:
        image: notes/C3_dice_race_3.png
        text: "Almost everything we do every day requires an algorithm, a list of steps you can follow to finish a task. Think about getting ready for school or planning a fun day with your friends or fixing a snack. To complete any of those tasks, you'll need to break it down into smaller steps and sometimes the steps must be in a specific order."
      4:
        image: notes/C3_dice_race_4.png
        text: "Think about making a sandwich. It doesn't matter which ingredient you get out of the cabinet first. But you can't spread the peanut butter until you open the jar. Computers need algorithms and programs to show them how to do even simple things that we can do without thinking about it."
      5:
        image: notes/C3_dice_race_5.png
        text: An algorithm is the thinking behind what needs to happen while the program is the actual instructions given to the computer to make it happen. An algorithm has to be translated into a program before a computer can run it. Breaking a task into steps called an algorithm is sometimes difficult. But like any new skill, it gets easier and easier with practice.
    C3_farmer_while:
      1:
        image: notes/C3_farmer_while_1.png
        text: Циклы очень схожи с тем, что Вы делаете в повседневной жизни. Представьте, что Вы моете машину, и Вам надо тереть её до тех пор, пока она не станет чистой. Пока она грязная, Вы продолжаете тереть.
      2:
        image: notes/C3_farmer_while_2.png
        text: "We've got a new look to help your farmer out. It's called a while-block. It's pretty simple actually. While a statement at the top is true, do something. For example, while there's a pile move one hayful. Go ahead and give it a try with your farmer."
    C3_functional_suncatchers:
      1:
        image: notes/C3_functional_suncatchers_1.png
        text: "This lesson is functional suncatchers. You'll be creating these pretty suncatchers using functions. There are several steps in creating one of these suncatchers. Some of the steps you have to repeat many times."
      2:
        image: notes/C3_functional_suncatchers_2.png
        text: The first step in simplifying the process of making a suncatcher is figure out what we have to repeat over and over again. We can group these steps into what we call a function.
      3:
        image: notes/C3_functional_suncatchers_3.png
        text: "But there is more to creating a beautiful suncatcher than following precise steps. Sometimes we want to be creative and change the color of the beads we're using. We can make every suncatcher unique if we use different colored beads."
      4:
        image: notes/C3_functional_suncatchers_4.png
        text: Your suncatcher will be uniquely yours when you learn to think of the beads as variables which is a word that means a placeholder for information that can change. Have fun creating beautiful suncatchers using functions and variables!
    C3_internet:
      1:
        image: notes/C3_internet_1.png
        text: Этот урок полностью посвящен Интернету. Интернет – это очень оживленное место, похожее на загруженную дорогу. Сообщения, как машины бегущие к своим пунктам назначения. Сообщения передаются через Интернет очень быстро.
      2:
        image: notes/C3_internet_2.png
        text: "Acting out how the internet works will help you understand what's happening when you use the internet. You'll learn how messages get from your computer to a favorite website or from a friend to an email inbox. Just like it's easier to navigate busy roads when you know the roads and can read the signs, traveling the internet is not so complicated when you know what goes on behind the scenes."
      3:
        image: notes/C3_internet_3.png
        text: Отправка сообщений в Интернете это нечто похожее на отправку сообщения по обычной почте, но с некоторыми отличиями. Я здесь на Google.com. IP-адрес для данного веб-сайта — это число. Вы можете представить IP-адрес, как ваш обратный адрес почты. Представим себе, что я хочу отправить сообщение по почте кому-то в офисе. Вы видите URL-адрес и IP-адрес на двери? Я всего лишь написал это сообщение и нажал Отправить.
      4:
        image: notes/C3_internet_4.png
        text: В отличие от почтовой службы первое, что происходит, это то что Интернет разбивает сообщения на более мелкие части, поэтому оно может быть отправлено более легко. Эти небольшие части называются пакетами. Каждый пакет сообщения доставляется к месту назначения, один за один раз. Эти пакеты соединяются вместе в правильном порядке, так что получатель сможет его прочитать без ошибок. Конечно есть много вещей, чтобы узнать о том, как работает Интернет, но это хорошее начало. Вы на пути, чтобы стать подкованным пользователем Интернета! Не забудьте рассказать вашей семье и друзьям, что вы узнали!
      5:
        image: notes/C3_internet_5.png
        text: Меня зовут Аманда Кэмп, и я разработчик программного обеспечения в Google. Я работаю в команде, которая работает на центральном сервере, который сохраняет профили и контакты. В моей работе мы много думаем о том, как контакты могут быть отправлены на другие устройства, например на телефон. Большинство людей имеют много контактов, скажем 1000, и мы не хотим отправлять все эти контакты сразу на ваш телефон, потому что это слишком большое сообщение. Подобно тому, как Интернет разбивает большие сообщения на пакеты, мы используем концепцию под названием подкачка, где мы могли бы отправить только 100 контактов телефона за один раз, получить ответ от телефона и запрос на следующие 100 контактов.
      6:
        image: notes/C3_internet_6.png
        text: "The most exciting thing about software is the fact that it can impact the entire world. I first learned to program when I was about nineteen. I think I was already a sophomore or a junior in college. The first program I remember writing is something that converted Celsius to Fahrenheit. I like programming because I like helping people. I can write programs at Google that help people all over the world and that's really mind-boggling and exciting."
    C3_maze_conditionals:
      1:
        image: notes/C3_maze_conditionals_1.png
        text: "People make decisions everyday. For example, before you go outside, you have an if statement that says if it's raining, then I need to get my jacket. Computers are amazing once you decide those kinds of statements that they can reliably execute those things and unbelievable speed. A computer program really is a little bit of math and some if statements where the decision gets made."
      2:
        image: notes/C3_maze_conditionals_2.png
        text: "The if block helps the zombie make a decision. It checks something. For example, let's use the block that says if there's a path to the left, and put a turn left command inside it. We're telling the zombie to check its surroundings, see if there's a path on the left and if so, make that turn."
      3:
        image: notes/C3_maze_conditionals_3.png
        text: "Then we use the move forward block inside this repeat to get it to keep moving forward as long as it just wants to go straight. Then when there's a turn, the if block will tell it to make that turn to the left. You can see that if we do that, if we take the turn to the left and otherwise moving forward, we'll achieve our goal."
      4:
        image: notes/C3_maze_conditionals_4.png
        text: "It's an example of using an if statement which is really a fundamental concept in computer programming. One of the first things I learned was how to write a program that played tic-tac-toe. I had if statements to say, ok, if the other person is about to win, go ahead and block that spot. Have fun learning how to use if statements, it's a key concept."
    C3_maze_level_4:
      1:
        image: notes/C3_maze_level_4_1.png
        text: In this example, your goal is to get zombie to the sunflower. We could use five move forward blocks or we could tell the computer to move forward and repeat five times using the one repeat block.
      2:
        image: notes/C3_maze_level_4_2.png
        text: This saves time and makes it way easier. To use it, just put the move forward block inside the repeat block. Hit run and the zombie will move forward five times to the yummy sunflower.
    C3_playlab_create_game:
      1:
        image: notes/C3_playlab_create_game_1.png
        text: До этого момента, вы создавали анимацию или игру, которая делает то же самое каждый раз вы её запускаете. Теперь вы можете сделать интерактивную игру, в которую на самом деле можно будет поиграть.
      2:
        image: notes/C3_playlab_create_game_2.png
        text: 'Используйте блоки "когда стрелка" и "переместить персонаж". Вы можете соединить эти блоки вместе, чтобы передвигать персонаж нажатием клавиш со стрелками.'
    C3_songwriting_with_parameters:
      1:
        image: notes/C3_songwriting_with_parameters_1.png
        text: This is the song writing lesson. Music is a lot like a computer program. The written notes and words tell the singer exactly what to do. Some parts of music are used over and over again.
      2:
        image: notes/C3_songwriting_with_parameters_2.png
        text: We call this the chorus. In a computer program, the parts of the program that are used over and over again are called functions. When you read song lyrics and it says the word chorus, do you sing the word chorus? No, you look at the top of the page to see what words make up the chorus.
      3:
        image: notes/C3_songwriting_with_parameters_3.png
        text: "In this lesson, you'll learn a silly little song called little bunny foo foo. The song has a chorus that you will sing several times over and over again. A function is a piece of code that you can call and use over and over again. It makes programming easier and more efficient so you don't have to write out the steps of your function over and over again. You can just write it once!"
    C4_bee_conditional:
      1:
        image: notes/C4_bee_conditional_1.png
        text: "This is the conditional block. It says if you're at the flower or the honeycomb, then do something. This is useful when we don't know how much honey or nectar to get as we see here with this question mark."
      2:
        image: notes/C4_bee_conditional_2.png
        text: "In this example, we're going to say, if it's a flower, get all the nectar and then use another one to say, if it's a honeycomb, make honey. Ta-dah!"
    C4_conditionals:
      1:
        image: notes/C4_conditionals_1.png
        text: "We have a new block that's called the if/else block. It's a conditional statement just like the if block you've used in the puzzles before. But now there's a new part at the bottom that says else. The if/else block lets the bee make a decision between two sets of actions. If the bee is at a flower, the bee will do the set of actions you put in the first part where it says do. If the bee is not at a flower, the bee will do the set of actions you put in the slot where it says else."
      2:
        image: notes/C4_conditionals_2.png
        text: "If statements are how computers are able to make decisions. Humans set up conditions for the computer that say if the computer is presented with a certain situation do this. Else, which just means otherwise, do that. The top of our if/else block says if at flower. But the top of our block could say other things, like if nectar equals 2 or if there's a path ahead, our block will behave in the same way. That if the statement at the top is true it will do the first set of actions. But if the statement at the top is false, it will do the second set of actions."
    C4_for_loops:
      1:
        image: notes/C4_for_loops_1.png
        text: "When you use a repeat block to loop your code, how does the computer know when it's repeated enough times? The repeat block is actually hiding a more sophisticated piece of code called a for loop which counts from a starting value up to an ending value by a specific increment."
      2:
        image: notes/C4_for_loops_2.png
        text: For example, a repeat three block counts from 1 to 3 by 1. Every time it counts, it runs the code inside the loop. The for loop knows how many times it has run by using a counter variable which is set to the starting value at the beginning of the loop and has the increment added to it each time the loop is run. As soon as the counter variable is greater than the ending value, the loop stops running.
      3:
        image: notes/C4_for_loops_3.png
        text: "The benefit of using a real for loop instead of the repeat block is that you can actually see the counter variable and use it in your loop. For example, if I have a series of flowers and the first one has one nectar, the second one has two nectars and the third one has three, I can use the for loop to tell the bee to collect 'counter' nectars each time, which would one at the first flower, two at the second and three at the third."
      4:
        image: notes/C4_for_loops_4.png
        text: Also in a for loop, you can increment the counter by a number other than one each time. You can potentially count by 2s, 4s or even an amount that changes every time through.
    C4_for_loops_bee:
      1:
        image: notes/C4_for_loops_bee_1.png
        text: "When you use a repeat block to loop your code, how does the computer know when it's repeated enough times? The repeat block is actually hiding a more sophisticated piece of code called a for loop which counts from a starting value up to an ending value by a specific increment."
      2:
        image: notes/C4_for_loops_bee_2.png
        text: For example, a repeat three block counts from 1 to 3 by 1. Every time it counts, it runs the code inside the loop. The for loop knows how many times it has run by using a counter variable which is set to the starting value at the beginning of the loop and has the increment added to it each time the loop is run. As soon as the counter variable is greater than the ending value, the loop stops running.
      3:
        image: notes/C4_for_loops_bee_3.png
        text: "The benefit of using a real for loop instead of the repeat block is that you can actually see the counter variable and use it in your loop. For example, if I have a series of flowers and the first one has one nectar, the second one has two nectars and the third one has three, I can use the for loop to tell the bee to collect 'counter' nectars each time, which would one at the first flower, two at the second and three at the third."
      4:
        image: notes/C4_for_loops_bee_4.png
        text: Also in a for loop, you can increment the counter by a number other than one each time. You can potentially count by 2s, 4s or even an amount that changes every time through.
    C4_for_loops_no_bee:
      1:
        image: notes/C4_for_loops_no_bee_1.png
        text: "When you use a repeat block to loop your code, how does the computer know when it's repeated enough times? The repeat block is actually hiding a more sophisticated piece of code called a for loop which counts from a starting value up to an ending value by a specific increment."
      2:
        image: notes/C4_for_loops_no_bee_2.png
        text: For example, a repeat three block counts from 1 to 3 by 1. Every time it counts, it runs the code inside the loop. The for loop knows how many times it has run by using a counter variable which is set to the starting value at the beginning of the loop and has the increment added to it each time the loop is run. As soon as the counter variable is greater than the ending value, the loop stops running. The benefit of using a real for loop instead of the repeat block is that you can actually see the counter variable and use it in your loop.
    C4_function_create:
      1:
        image: notes/C4_function_create_1.png
        text: "Now that you've edited function blocks, it's time to create a new function block from scratch. It's really simple. You'll see the toolbox has a category called functions. If you click on this, you'll see an orange button called create a function. Clicking on this brings up the function editor that you've already used to edit existing function blocks."
      2:
        image: notes/C4_function_create_2.png
        text: "Just like before, you started by naming your function, writing down a description for what the function is supposed to do. For instance, it's supposed to draw a square or draw a triangle and then drag blocks from the toolbox into the white work space below. Remember to drag these blocks inside the green wrapping block for the function."
      3:
        image: notes/C4_function_create_3.png
        text: "Once you're done, click on save and exit. This will take you back to the main puzzle work space. The new function you created will show up as a green block in the function category in your toolbox. Drag and drop this into the main work space and use it like any other block to solve the puzzle."
    C4_function_edit:
      1:
        image: notes/C4_function_edit_1.png
        text: "One of the great things in computer programming is once you've taught a computer how to do an action, you can call that function again. You give it a name and then you can call it. That's really like extending the language."
      2:
        image: notes/C4_function_edit_2.png
        text: "In the program we built, we learned how to draw a square by moving and turning four times. We can take that function and give it a name, draw a square so that any time we want to do that, we simply say draw a square and it will go back and invoke that function, that code and it will get done for us. We've added that concept to our programming language."
      3:
        image: notes/C4_function_edit_3.png
        text: "In this puzzle, we have already created a draw a square function for you. You'll see it in the toolbox as a green block. What you'll need to do is write the same code you wrote before to draw a square and put it in this function. To do that, click on the edit option in the green draw a square block. This will open up the function editor. The function editor has three parts. A place where you name your function. This will appear on the green block before that function. Then write out a short description of what your function is supposed to do."
      4:
        image: notes/C4_function_edit_4.png
        text: "In this case, it's supposed to draw a square. The white space below this is the work space and works just like the work space you've already been using. Drag and drop blocks from the toolbox into this work space. Remember to put the blocks that create a square inside the green wrapping block for the function. Once you're done, click on save and exit. This will take you back to the main puzzle work space. Now you can use the draw the square function block just like any other block to solve the puzzle."
    C4_function_parameters:
      1:
        image: notes/C4_function_parameters_1.png
        text: "Here's a function that draws a square with 50 pixel sides. That's great but what if I wanted to draw a square with sides 50 pixels and another square with sides of 100 pixels? We shouldn't have to make two separate functions that do almost the same thing. Instead, we can use one function with a parameter."
      2:
        image: notes/C4_function_parameters_2.png
        text: "Parameters allow us to pass values into a function that get used as variables inside the function. Let's try adding a parameter called like to this function so we can use it to create squares of different sizes. In the function editor, you can edit the name and description like before but now you can also add a parameter. Write the name of your parameter in the space and click Add Parameter. This will create a red block with the name of the parameter you just created. Now we can replace the move forward by 100 block with the parameter Length so it will move forward by Length."
      3:
        image: notes/C4_function_parameters_3.png
        text: "Click save and close and drag out your new create a square block from the functions category in the toolbox. You'll notice there's an empty space next to length because the function wants to know what value the parameter Length should have. Drag a number block from the Math category and place it in this space. See how you can use the function again and again with different lengths to make squares of different sizes? Try it for yourself!"
    C4_intro:
      1:
        image: notes/C4_intro_1.png
        text: Обычно, при программировании требуется писать программу текстом, но мы будем использовать язык Блокли. В нём для написания программы требуется просто перетаскивать блоки, а программа будет создаваться автоматически. Для начала, создадим программу, которая поможет Angry Bird пройти через Лабиринт и наказать злых свиней, укравших птичьи яйца.
      2:
        image: notes/C4_intro_2.png
        text: 'Блокли делится на три основные части. Слева Птичий лабиринт, в котором ваша программа будет выполняться. Инструкции для каждого уровня расположены под Лабиринтом. Средняя часть - это панель инструментов, в которой каждый блок является командой исполняемой птицей. Пространство справа называется рабочей областью. В ней мы будем создавать программу.'
      3:
        image: notes/C4_intro_3.png
        text: 'If I drag the move block to our work space and press "run", what happens? The bird moves forward one box on the grid. And what if I want the bird to do something after it moves forward one box? I can add another block to our program.'
      4:
        image: notes/C4_intro_4.png
        text: |-
          I'm going to choose the "turn right" block and I'll drag it under my move block until the yellow arrow appears. Then I'll drop it and the two blocks will snap together. When I press "run" again,  the bird will perform the commands that are stacked from top to bottom on our work space.
      5:
        image: notes/C4_intro_5.png
        text: "If you ever want to delete a block, just remove it from the stack and drag it to the trash can. After you've hit run, you can always hit the reset button to get the bird back to the start. Now let's get those pigs!"
    C4_math_artist:
      1:
        image: notes/C4_math_artist_1.png
        text: "If I want to draw a rectangle 50 pixels tall and that is twice as wide as it is tall, how would I program the computer to do that? Well, I could tell the artist to go up fifty, turn right, and then go over 100 and move the whole thing twice. But then I'm doing the math for the computer."
      2:
        image: notes/C4_math_artist_2.png
        text: Multiplying fifty by two in your head may not that hard but computers are really good at doing math so we should leave it to them whenever possible. If I just used a variable called height instead, then I could easily change height to fifty and then change my algorithm to tell the artist to go up by height, turn right and then go over by height times 2, which gives us a rectangle that is twice as wide as it is tall.
    C4_unplugged_algorithms:
      1:
        image: notes/C4_unplugged_algorithms_1.png
        text: "This lesson is called Tangram Algorithms. A tangram is a puzzle with seven pieces that can be put together to make other shapes. You'll be using an algorithm to explain to your partner how to put the puzzle together."
      2:
        image: notes/C4_unplugged_algorithms_2.png
        text: An algorithm is just a of list steps that you can take to complete a task. We use them every day with things like shopping lists and recipes. If you keep an algorithm simple, there are lots of ways to interpret it and whoever performs that algorithm might not get exactly what you wanted. If you want to make sure that everyone ends up with the exact same thing, then your algorithm will need to be detailed and very specific.
      3:
        image: notes/C4_unplugged_algorithms_3.png
        text: "I'm using an algorithm today to complete a painting. I wanted to try doing a painting of some wolves but I'm not the most amazing painter. Luckily for people by me, there is paint by numbers. There are forty colors and it has little letters and numbers that tell you which color to paint each section. Paint by numbers tells me exactly what color to use and where."
      4:
        image: notes/C4_unplugged_algorithms_4.png
        text: "It's very specific so I'm able to follow directions and the painting will come out looking awesome. It's a great algorithm. If the instructions weren't specific enough, my wolves wouldn't look as good. When you really want something to turn out exactly the way that you planned it, it's best to be extremely precise."
    C4_unplugged_binary:
      1:
        image: notes/C4_unplugged_binary_1.png
        text: "Each team, the person who's instructing that's the person who's holding the paper, has to figure out what their off symbol is going to be and what their on symbol is going to be. In binary, it's kind of like an alphabet with two letters. Like having A and B be your entire alphabet but you've got a 0 and a 1."
      2:
        image: notes/C4_unplugged_binary_2.png
        text: "The most common way you use binary is in an if statement. It's a classic thing from programming. The program runs along and it says if something is true, then do this. Or it's not true and you do something else. What if you want to do something maybe a little more complicated. Instead an if statement, you want to work with something like an image or a sound in a computer."
      3:
        image: notes/C4_unplugged_binary_3.png
        text: "A computer only knows binary but an image, it's not binary, it's not ones and zeros so how do you do that? Here's an example: You have this beautiful picture. Now a picture is basically a form of information. All information can be encoded in binary one way or another, you just have to figure out how to do it."
      4:
        image: notes/C4_unplugged_binary_4.png
        text: "You imagine that we're going to put a grid over this panda bear and for each square, we're going to decide whether that square is more black or more white. And then we're going to color it that way. Now each cell on the grid is either black or white and then the black squares we say those are zeros (binary digit) and the white squares are ones, the other binary digit. At the end, you're left with just a bunch of ones and zeros. That's how you represent this image in binary."
    C4_unplugged_forloops:
      1:
        image: notes/C4_unplugged_forloops_1.png
        text: "This lesson is called for loop fun. In this lesson, we'll use a number line to play a dice game. Each player will roll three times to assign a starting value, a stopping value, and our interval. During each turn, we circle our starting value, and every value that is the same number of steps forward as our interval value. We stop circling when we get to our stopping value. The person with the highest score wins!"
      2:
        image: notes/C4_unplugged_forloops_2.png
        text: "For loops can come in handy a lot of places and if you were to become a meteorologist, you would use for loops all the time. Hi, I'm Becky. I work at EverPower Renewables as a wind meteorologist. I forecast wind speeds for the Columbia River Gorge area where the company owns wind farms."
      3:
        image: notes/C4_unplugged_forloops_3.png
        text: "We're trying to understand how much wind is going to be there so that we know how much power is going to be outputted. We give that information to real time energy traders. They buy and sell power based on how much power we tell them is going to be there in order to make sure the power grid is balanced, your lights stay on, and that we maximize the amount of energy we get out of our farms."
      4:
        image: notes/C4_unplugged_forloops_4.png
        text: "We're at the national control center for EverPower Renewables here in Portland and this is where we have information coming in from all our farms across the country. Even the highest power computers today can't simulate the atmosphere everywhere. In computer forecasting models, we have what we call a grid. Each grid point is a latitude, longitude. We have to calculate the physics and try and figure out the wind speed, temperature,  pressure, that sort of thing."
      5:
        image: notes/C4_unplugged_forloops_5.png
        text: "Since these are fairly big grids and we're doing this in a lot of points we're looping over these things millions and millions of times. Everything I do I'll use for loops. Here for example is a for loop right there. When you're forecasting wind, there's so many different parameters that go into it it would be impossible for a human to sit down and do all those calculations. There's so many different aspects to what's going to be affecting what's happening to the wind that we need a computer model in order to forecast it."
    C4_unplugged_madlibs:
      1:
        image: notes/C4_unplugged_madlibs_1.png
        text: "In this lesson, we'll be playing with some fill in the blank stories. You have a template that you can fill in to create similar stories that have very amusing differences."
      2:
        image: notes/C4_unplugged_madlibs_2.png
        text: "In this lesson, we also learned how to make an abstracted template from two stories that have already been created. Abstraction is the art of removing differences and details so that you can see how one solution might work for many different problems. It's very helpful in computer science because it allows us to create functions that may be useful in several different situations."
    C4_unplugged_parameters:
      1:
        image: notes/C4_unplugged_parameters_1.png
        text: "This lesson is called songwriting with parameters. We're going to be writing some songs here. Sometimes the chorus is just a little bit different each time you sing it. Do you remember Old Macdonald Had a Farm? The chorus is slightly different for each animal. And on that farm, he had a cow, e-i-e-i-o. The small change in each chorus can be shown using something we call parameters."
      2:
        image: notes/C4_unplugged_parameters_2.png
        text: Sometimes a function needs a parameter. A parameter is an extra piece of information you can pass to a function to customize it for a special need. When you make ice cream sundaes with your friends, you are using a process similar to parameters in a computer program.
      3:
        image: notes/C4_unplugged_parameters_3.png
        text: "The disk of vanilla ice cream might be the same for every sundae but when you ask your friends which two toppings they'd like, you could get lots of different combinations. Topping is the function name but each type of topping is a parameter. Functions and parameters work together to make great computer programs and great sundaes too."
    C4_unplugged_variables:
      1:
        image: notes/C4_unplugged_variables_1.png
        text: "This lesson is called variables in envelopes. We're going to learn how we can build sentences when we're still missing pieces of information. Most of us are already familiar with the idea of filling in a blank. We do it when we're putting our name on our homework. Sometimes there's more than one word that needs to be filled out and in that case, we give that blank a label so that we know which piece of information goes where."
      2:
        image: notes/C4_unplugged_variables_2.png
        text: Variables are placeholders for pieces of information that can change. By using a variable for the missing information, we can continue working on whatever we were doing and let someone else fill in the missing information later. In software, we use variables a lot. We use variables as placeholders for name, email address, and even username. That way we can let the program know where those details will appear after the user fills them in. We use variables all the time in our work.
      3:
        image: notes/C4_unplugged_variables_3.png
        text: "Any time you need to store a piece of information for later, we use a variable. Let's say we need to count the number of times the user has tweeted. Every time that user tweets, we'll add one to that number and every time the user deletes a tweet, we'll decrease that number by one. Anytime we need to know how many times that user has tweeted, we'll just look at that variable."
    C4_variables_artist:
      1:
        image: notes/C4_variables_artist_1.png
        text: A variable is a container you can store a value in. When you use that variable in an algorithm, it opens up the container and looks at the value inside. This lets you write smarter algorithms that behave differently depending on the value stored in the variable.
      2:
        image: notes/C4_variables_artist_2.png
        text: "For example, if you wanted to write an algorithm to say Happy birthday, you're turning 10! to my little brother, that's great now but when I run it next year I'd want it to say, Happy birthday, you're turning 11! I could create a variable called age to store my brother's age and write my algorithm to say Happy birthday, you're turning 'age' instead. Because variable can change, every year I can update the variable 'age' to equal 'age' plus 1."
      3:
        image: notes/C4_variables_artist_3.png
        text: "In this puzzle, we're going to be using a variable that will set the length of the line our artist draws. Later on in our code, the move forward block will look at that length variable to see what value you've set it to."
    C4_variables_playlab:
      1:
        image: notes/C4_variables_playlab_1.png
        text: A variable is a container that you can store a value in. When you use that variable in an algorithm, it opens up the container and looks at the value inside. This lets you write smarter algorithms that behave differently depending on the value stored in the variable.
      2:
        image: notes/C4_variables_playlab_2.png
        text: "Now you're going to try playlab where you are given different games and you can change the values of variables like speed, height, score, in order to change the game. You won't have to change the algorithm of the game to change how it plays, just the variable."
      3:
        image: notes/C4_variables_playlab_3.png
        text: In my work for Kindle and on X-ray for books, we apply variables in many different ways. One way that you can use a variable is to store page numbers of a book. A user can increase and decrease the size of the font on a page. Based on the font size, the number of pages in the book can change. We can adjust it by storing the number of pages in the variable.
    infinity_playlab_events:
      1:
        image: notes/infinity_playlab_events_1.png
        text: "Now we're going to learn about something that all game programmers use everyday. They're called events. An event tells your program to listen for when something happens. And then when it does, it performs an action. Some examples of events are listening for a mouse click, an arrow button, or a tap on the screen."
      2:
        image: notes/infinity_playlab_events_2.png
        text: |-
          Here, we're going to make Baymax move up to touch Hiro and move down to touch Rapunzel when the player uses the up/down arrow keys or the up/down buttons. We'll use the when up arrow block and attach the move actor up block to it, so when the player presses the up arrow key, everything attached to the "when up arrow" block is run. We'll do the same thing to make Baymax move down. Step by step your game is getting more interactive.
    infinity_playlab_intro:
      1:
        image: notes/infinity_playlab_intro_1.png
        text: "So what grade are you in? Second. Tenth grade. First grade. I was in eighth grade when I learned to program. I got my first computer when I was in sixth grade. What gets me excited is being able to fix people's problems. You can express yourself, you can build things from an idea."
      2:
        image: notes/infinity_playlab_intro_2.png
        text: "Computer science is the basis for a lot of the things that college students and professionals will do for the next twenty or thirty years. I like programming because I like helping people. I get the opportunity to build something that's gonna make people's lives easier. I think it's the closest thing we have to a superpower. Getting started is the most important part. I'm a beginner myself and I want you to learn with me."
      3:
        image: notes/infinity_playlab_intro_3.png
        text: "I'm John Vechey, I'm one of the co-founders of PopCap Games. We make games like Plants vs. Zombies, Bejeweled, and Peggle. A lot about games isn't how perfect your code is, it's not how perfect your art is, it's about how does it feel and how much fun it is. You can only get that sense by trying it, by doing it, by learning and adapting and iterating your own skills of making games."
      4:
        image: notes/infinity_playlab_intro_4.png
        text: "Do you have a favorite video game? Well, we're going to take one step towards creating games just like that using Play Lab. Good games have a story and every story has actors. Actors do things like speak, move, and interact with each other. Maybe even score points based on the rules of the game. Today we'll be learning how to do all these things, one by one, with Disney's characters like Anna, Elsa, Hiro, Baymax, and Rapunzel. We'll build a game from scratch that can be shared and played on a phone."
      5:
        image: notes/infinity_playlab_intro_5.png
        text: "Your screen is split into three main parts. On the left is the gamespace, where your program will run. The instructions for each level are written below. This middle area is the toolbox, and each of these blocks is a piece of code. The white space on the right is called the workspace, and this is where we'll build our program."
      6:
        image: notes/infinity_playlab_intro_6.png
        text: |-
          To start off, you'll need to link your blocks to the orange "when run" block. You can link multiple blocks together by dragging them out until you see the yellow outline, and then they'll snap together. In this first puzzle, Hiro is Actor 1 and Baymax is Actor 2. We need to move Hiro to get to Baymax by dragging the "move right" block out and linking it to the "when run" block. Once you have your blocks in place, hit the "Run" button to see what you've programmed.
      7:
        image: notes/infinity_playlab_intro_7.png
        text: "Get started and by the end you'll be able to create your own game with these amazing actors that can interact, score points, throw microbots, cherries, saucepans, sparkles, and ice.. and vanish each other. It's all up to you!"
    infinity_playlab_repeat_forever:
      1:
        image: notes/infinity_playlab_repeat_forever_1.png
        text: "Can you imagine if you had to repeat something forever and ever? Hopefully you'll never have to because computers are really good at repeating things. This is the repeat forever block. Anything inside this block will happen forever in the game."
      2:
        image: notes/infinity_playlab_repeat_forever_2.png
        text: "So if we wanted an actor to do something repeatedly without the player having to do anything, we'll put those blocks inside the repeat forever block. In this next puzzle, our goal is to help Anna walk up and down continuously. Learning how the repeat commands work will save you a ton of time later when you build your own game."
    tutorial_puzzle_challenge:
      1:
        image: notes/tutorial_puzzle_challenge_1.png
        text: "What do you want to be when you grow up Olivia? An astronaut. Do you happen to know what a computer programmer is? Yeah um no. Ummm wait what? I'm not really sure how to explain it computer programming is pretty simple. It's a set of instructions like a recipe, you have to follow them step-by-step to get the end result you want."
      2:
        image: notes/tutorial_puzzle_challenge_2.png
        text: "I can change the number of pixels, the length of the line, using this dropdown. How long was it again? You can see the instructions again by looking under the run button. Here I used the move forward block and I'm going to select 100 pixels. I can delete a block by dragging it into the toolbox or the trash can. Let's put it back."
      3:
        image: notes/tutorial_puzzle_challenge_3.png
        text: "Run the code by pressing run. Well that didn't work! I'll press reset and figure out what's wrong. You can try a puzzle as many times as you'd like and skip puzzles and come back to them. Just make sure to try your best and don't give up. Let's add another move forward. That still didn't work. I can place a block between other blocks."
      4:
        image: notes/tutorial_puzzle_challenge_4.png
        text: "Let's take a turn block and place it in between the move forwards. Turn left 45 degrees. Let's run it again. Reset, run, awesome! Here's another puzzle. Sometimes you are given starter code to complete. Here I need to add the appropriate lengths and degrees."
      5:
        image: notes/tutorial_puzzle_challenge_5.png
        text: "You may sometimes accidentally trash the starter code. What do you do then? You can press clear puzzle and start all over again. I'm going to drag this number block into the different pixel areas. Select 100 for pixels, 45 for degrees and 100 for pixels again. Awesome! Here is the Code Studio bee. I need to move the bee to each flower and get nectar."
      6:
        image: notes/tutorial_puzzle_challenge_6.png
        text: "The first flower is three blocks away so I need three move forwards. 1, 2, 3. Then a get nectar, then another get nectar. Well that didn't work! I'll place another move forward between the get nectars and run it again. Yay, it works! You just learned how to use the Code Studio artist and bee puzzles. Good luck on the Code Studio puzzle challenge."
    unplug1:
      1:
        image: notes/unplug1_1.png
        text: "What do you want to be when you grow up Olivia? Umm, an astronaut! Do you happen to know what a computer programmer is? Yeahh, umm, no. Umm, what what? I'm not really sure how to explain it. Computer programming is pretty simple. It's a set of instructions, like a recipe. You have to follow them step by step to get the end result you want."
      2:
        image: notes/unplug1_2.png
        text: "Computer science is a way to impact the world. It can be music videos, it can be games, detect whether or not someone is related to someone else. Find you know, people's friends. You can do all sorts of other crazy things that actually save lives. You do have to have a drive I think. It is to me like a paintbrush. I think great programming is not all that dissimilar from great art."
      3:
        image: notes/unplug1_3.png
        text: When I finally learned a little bit of programming, that blank wall resolved into a bunch of doors and you open them and of course then you find behind them is another hallway filled with a bunch of doors. Programming is fun and easy. You can do anything your mind wants to do. Finally you start to open enough doors the light comes in. To me a finished program is like a structure filled with light. All the corners are illuminated. The number of people that you can touch and interact with is something the world has never seen before.
      4:
        image: notes/unplug1_4.png
        text: "Our first lesson in this series is all about what computer science is, what a computer scientist does and how you can be more responsible in your use of technology. It's a very important lesson but it is a little text-heavy. At the end, you get to make your very own customized encoding using your initials. It's a fun activity and it's very empowering because binary is one of those things that feels very technical but once you understand it, it's like you speak a secret language."
    unplug2:
      1:
        image: notes/unplug2_1.png
        text: The lesson on computational thinking is intended to teach you how to take a big difficult problem and break it down into several simpler problems. The goal of this lesson is to write a set of instructions that someone can follow to draw one of the monsters included in the lesson plan.
      2:
        image: notes/unplug2_2.png
        text: "Students will break into groups to write instructions and then they'll switch them with another group that will have to draw the monster. Groups will write instructions using the four steps of computational thinking: decomposition, pattern location, abstraction and algorithms."
      3:
        image: notes/unplug2_3.png
        text: "First groups will decompose the task which means make a game plan. Then they'll look for patterns between all the monsters in the catalog. When they come across differences between the monsters, they'll abstract or remove those details. For instance, one monster in the catalog has vegitas eyes and another has spritem eyes. But they both have eyes so we can write a line that says the monster has blank eyes."
      4:
        image: notes/unplug2_4.png
        text: "So students will be able to write a set of instructions, called an algorithm, that list the monsters' parts with blanks for what the styles should be. This is the set of instructions they'll pass to other students to recreate their very own monster."
    unplug3:
      1:
        image: notes/unplug3_1.png
        text: In graph paper programming, we help explain how coding works by trying to help people recreate drawings using only arrows and scribbles. One person is given a small drawing on graph paper and they need to go through using only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug3_2.png
        text: 'In this activity, the only symbols you can use are these: move one square forward, one square backward, move one square up, move one square down, change to next color, and fill in your square with color. Once we have that coded up, we can hand it off to another person who can read the code and try and recreate the picture.'
    unplug4:
      1:
        image: notes/unplug4_1.png
        text: In graph paper programming, we help explain how coding works by trying to help people recreate drawings using only arrows and scribbles. One person is given a small drawing on graph paper and they need to go through using only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug4_2.png
        text: "In the second half of the activity, we ask students how many different ways they can fold a piece of paper to create sixteen identical rectangles. Then you'll discuss how multiple solutions can lead to the same end result and why some solutions are better in certain situations."
    unplug5:
      1:
        image: notes/unplug5_1.png
        text: In graph paper programming, we help explain how coding works by trying to help people recreate drawings using only arrows and scribbles. One person is given a small drawing on graph paper and they need to go through using only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug5_2.png
        text: "In the second half of the activity, we ask students how many different ways they can fold a piece of paper to create sixteen identical rectangles. Then you'll discuss how multiple solutions can lead to the same end result and why some solutions are better in certain situations."
    unplug6:
      1:
        image: notes/unplug6_1.png
        text: "This activity is called coding with cards and it's great for any age. Like you learned with the if statements in earlier lessons,  during Blockly, if statements have a piece about them you have to evaluate to find out if it's true or false. That's the conditional and it can be used in lots of different ways."
      2:
        image: notes/unplug6_2.png
        text: We take advantage of that by creating programs on paper that you run using a random draw of playing cards. You might have an if statement that says something like if the card you draw is greater than 8, you get a point. Otherwise, your opponent gets a point. You can make it as simple or as complicated as you feel comfortable.
    unplug7:
      1:
        image: notes/unplug7_1.png
        text: "You know how when you look up the lyrics for a song and they define the chorus at the very beginning and then for the rest of the song, they just refer you back to the chorus? That's how you call a function."
      2:
        image: notes/unplug7_2.png
        text: "In this lesson, we define the chorus at the beginning of our song and then we sing through our song and go back and we notice that the class doesn't sing the word chorus, they automatically go up to the top where we define the chorus and sing through that. We use that as a great introduction to how to understand what a program is doing when it defines and calls a function."
      3:
        image: notes/unplug7_3.png
        text: "We use familiar songs including Old Macdonald to talk about how a chorus is called over and over and how sometimes a chorus can change. When you have a song like Old Macdonald, where certain words change, that's a great place to introduce the idea of parameters. Passing certain words through so that you can send extra information to your function. Once we're sure everybody gets it, you can take your own familiar songs and break them up yourself. See if you can figure it out together."
    unplug8:
      1:
        image: notes/unplug8_1.png
        text: Our lesson on abstraction uses the familiar concept of madlibs, where you basically insert a blank in a story that can be filled with lots of different words. We take that idea, challenge kids to come up with their own words for their own stories, and really explain the concept of abstraction.
      2:
        image: notes/unplug8_2.png
        text: "It's all about functions and how you can have a function, like in Old Macdonald, where you have a structure for your chorus but you have something little that changes and you abstract out that little thing that changes and you can fill it in with your own word every time through. But sometimes you have three words that change and so you fill those in with three parameters, that's still pretty helpful."
      3:
        image: notes/unplug8_3.png
        text: "You can have one function that handles lots of different problems. Lots of times people will write separate functions for all those problems, not realizing there's only one little difference. If they could just find a way to handle that one little difference, they could just reuse one function over and over again, instead of having 14 different functions."
    unplug9:
      1:
        image: notes/unplug9_1.png
        text: Relay programming is an extremely fun lesson that gets across way more than computer science. Sometimes everybody is getting a little bit antsy and you want to get them up on their feet. This is a great way to add some excitement to computer science.
      2:
        image: notes/unplug9_2.png
        text: You break everyone up into two groups where they stand in a line and run relay style. The first person in each group runs to the other side of the room where you have a graph paper drawing and a blank piece of paper waiting for them. They write down the first step to creating that image, run back to their line, tag the next player who goes back up to write the next step.
      3:
        image: notes/unplug9_3.png
        text: "This is a great way to get across the idea of debugging, needing to proofread your own work, and needing to check the work of the people done before you. You'll quickly understand how important it is that you be careful in your coding when a whole team is depending on you."
    unplug10:
      1:
        image: notes/unplug10_1.png
        text: "This activity explains in an easy-to-understand way how the internet works. We explain all the terminology you'll need in simple terms so that students can simulate transmitting messages, like an email."
      2:
        image: notes/unplug10_2.png
        text: "Students will transmit messages while pretending to be one of three transmission methods. Wireless internet, DSL or fiber optic. The students who represent wi-fi will have to wear the message they're transmitting on their head because wifi is the most likely to drop some information."
      3:
        image: notes/unplug10_3.png
        text: "The students pretending to be DSL or cable will carry the message on the back of their hand, where they're slightly less likely to drop information. And the students representing fiber optic will get to carry them with both hands. This activity is a great way to understand something that many of us use every day."
    unplug11:
      1:
        image: notes/unplug11_1.png
        text: "So now it's time to step back and take a birds eye view of everything you've done in these past nineteen lessons. This is a great time to call out to students that what they've just done is a huge achievement. They've learned more over these lessons than most adults know about computer science."
      2:
        image: notes/unplug11_2.png
        text: "Discuss as a class or in small groups about their favorite lessons. Once you take a look back at everything you've learned, this is where your students' creativity can shine. Split them into groups and have them create an unplugged lesson of their own. Assign each group a key concept, like functions or algorithms and have lots of craft materials on hand for them to use. Have each group present their new unplugged activity or even set aside another day to do a few of the student created activities."
      3:
        image: notes/unplug11_3.png
        text: "From everyone here at Code.org, we hope you've had a TON of fun during this course. And whether your dream is to create the best new app, use programming to help cure diseases, or you just want to be a stellar problem-solver, this course was the first step in achieving those dreams."
    starwars_intro:
      1:
        image: notes/starwars_intro_1.JPG
        text: 'Привет, я Кэтлин Кеннеди, продюсер фильма «Звёздные войны: Пробуждение силы». Сегодня вы будете работать с нашей звездой, BB-8. BB-8 - это сферический дроид. Каждое его действие и движение контролируется с помощью ПО. Информатика влияет на каждую отрасль, от маркетинга до здравоохранения. На самом деле, сотни компьютерных инженеров работали над «Пробуждением Силы».'
      2:
        image: notes/starwars_intro_2.JPG
        text: Привет, я Рэйчел Роуз, старший инженер НИОКР в ILM и глава по разработке анимации и текстур. В «Пробуждении Силы», я отвечаю за помощь художникам в разработке установок, являющихся частью персонажа. Они позволяют персонажу выглядят правдоподобно в далекой-далекой галактике.
      3:
        image: notes/starwars_intro_3.JPG
        text: В течение следующего часа, мы построим нашу собственную игру о «Звездных Воинах». Мы научим вас основам программирования. Обычно код состоит из текста, но мы будем использовать блоки, которыми можно будет написать программу. За каждым блоком скрывается отдельный код. После того как вы изучите основы с блоками, мы покажем вам JavaScript, один из самых популярных языков программирования в Интернете.
      4:
        image: notes/starwars_intro_4.JPG
        text: Для начала, мы поработаем с Рей и запрограммируем BB-8 собрать весь металлолом. Экран разделен на три части. Слева находится игровая площадка «Звездных Войн», и здесь будет виден результат. Инструкции для каждого уровня находятся ниже.
      5:
        image: notes/starwars_intro_5.JPG
        text: Посередине находится Набор блоков. Каждый блок — команда для BB-8.
      6:
        image: notes/starwars_intro_6.JPG
        text: Белая область справа — Рабочая область. Здесь мы будем писать нашу программу.
      7:
        image: notes/starwars_intro_7.JPG
        text: Что будет, если я перетащу блок «переместить влево» в Рабочую область и нажму «Выполнить»? BB-8 переместится влево, один блок.
      8:
        image: notes/starwars_intro_8.JPG
        text: А что, если я хочу, чтобы BB-8 сделал ещё что-нибудь после перемещения? Я могу добавить еще один блок в нашу программу. Я выбираю блок «переместить вверх», и перенесу его под предыдущий блок, пока не появится оранжевая линия. Затем я соединю вместе эти два блока.
      9:
        image: notes/starwars_intro_9.JPG
        text: Когда я снова нажму Выполнить, BB-8 выполнит все команды по порядку, сверху вниз. Если вы захотите удалить блок, просто перетащите его обратно в Набор.
      10:
        image: notes/starwars_intro_10.JPG
        text: После начала выполнения программы, вы всегда можете нажать на кнопку сброса, чтобы вернуть BB-8 в начальную позицию. Давайте приступим!
    starwars_typing:
      1:
        image: notes/starwars_typing_1.JPG
        text: 'Внутри блоков мы использовали JavaScript. Это самый популярный язык для профессиональных разработчиков сегодня. Блоки - это лучший способ начать изучать программирование. Ведущие университеты, такие как Гарвард и Беркли начинают обучение таким же способом. Но как только вы изучили основы, инженеры пишут код печатая текст, что позволяет им программировать быстрее.'
      2:
        image: notes/starwars_typing_2.JPG
        text: Мы можем печатать тысячи команд без поиска их в панели инструментов или необходимости переносить их оттуда. Когда вы учитесь печатать, сначала это может быть медленно, но всё равно попробуйте.
      3:
        image: notes/starwars_typing_3.JPG
        text: 'В верхнем правом углу рабочей области любой головоломки вы можете нажать кнопку "показать текст", чтобы переключиться от блоков к тексту кода.'
      4:
        image: notes/starwars_typing_4.JPG
        text: В следующем уроке мы начнем печатать. Здесь вы можете перетаскивать блоки из панели инструментов или вы можете вводить имя команды. При вводе, вы увидите имена возможных команд внизу где вы печатаете. Вместо того, чтобы вводить всю команду полностью, вы можете выбрать одну из них, чтобы двигаться быстрее. В моей работе, я использую эту функцию автозаполнения всё время при написании кода.
      5:
        image: notes/starwars_typing_5.JPG
        text: Когда вы печатаете код, вы должны быть очень точными. Вам нужно написать имя команды правильно, использовать правильные заглавные и строчные буквы, а также скобки и точки с запятой. Даже при небольшой опечатке, ВВ-8 не сможет понять код и не сможет двигаться.
      6:
        image: notes/starwars_typing_6.JPG
        text: Если вы сделаете ошибку, текстовый редактор подчеркнёт эту строку, чтобы вы могли её исправить.
      7:
        image: notes/starwars_typing_7.JPG
        text: 'Если вы застряли, нажмите начать сначала и переключитесь назад к блокам, нажав кнопку в правом верхнем углу. Давайте попробуем напечатать! Если сделаете ошибки - не расстраивайтесь. Каждый ученик должен сделать несколько попыток, прежде чем получится правильно.'
    starwars_events:
      1:
        image: notes/starwars_events_1.JPG
        text: Здравствуйте, меня зовут Карита Картер. Я старший креативный продюсер Walt Disney Imagineering. Я несу ответственность за ведущие команды, работающие над развлекательными программами для наших гостей. Мы все время стараемся найти новые способы развлечения для наших гостей, а технологии помогают нам в этом.
      2:
        image: notes/starwars_events_2.JPG
        text: Поздравляю, вы сделали это! Вы запрограммировали BB-8. Думаю, теперь мы готовы к чему-то посложнее. Ну так вперед. Теперь, когда вы изучили основы программирования, мы собираемся вернуться в прошлое, чтобы построить свою собственную игру с R2-D2 и C3PO в главных ролях.
      3:
        image: notes/starwars_events_3.JPG
        text: 'Чтобы создать игру, нам нужно узнать о кое-чем, что используется программистами игр ежедневно: это события. События указывают программе слушать или ожидать пока не случится чего-то, и когда это случится - произвести определенное действие.'
      4:
        image: notes/starwars_events_4.JPG
        text: 'Примеры событий - это ожидание щелчка мышки, нажатия кнопки со стрелкой, или прикосновение к сенсорному экрану.'
      5:
        image: notes/starwars_events_5.JPG
        text: 'Мы же заставим R2-D2 двигаться вверх, чтобы доставить сообщение Пилоту повстанцев, а потом - двигаться вниз к другому пилоту. Мы используем события, чтобы он двигался. Игрок использует клавиши вверх/вниз или кнопки вверх/вниз.'
      6:
        image: notes/starwars_events_6.JPG
        text: 'Мы возьмем блок события "когда вверх" и прикрепим к нему блок движения вверх. Когда игрок нажмет кнопку вверх - выполнится код, прикрепленный к этому блоку. Так же мы заставим R2-D2 двигаться вниз.'
      7:
        image: notes/starwars_events_7.JPG
        text: Чтобы сделать это, мы используем команду когдаВверх(). Когда вы перенесёте команду из панели инструментов, вы увидите, что она начинается и заканчивается фигурной скобкой вместо точки с запятой. Это даёт вам место, чтобы разместить ваши команды посередине. Каждая команда внутри этих скобок будет выполнена когда игрок нажмёт кнопку со стрелкой вверх.
      8:
        image: notes/starwars_events_8.JPG
        text: Мы хотим, чтобы R2-D2 пошёл наверх, поэтому добавьте блок идтиВверх() внутрь команды. Сделайте то же самое, чтобы R2-D2 пошёл вниз.
      9:
        image: notes/starwars_events_9.JPG
        text: А теперь вместо того, чтобы писать весь код управления дроидом заранее, можно позволить R2-D2 реагировать на нажатие кнопок для движения по экрану. Шаг за шагом игра становится все более интерактивной.
    starwars_congrats:
      1:
        image: notes/starwars_congrats_1.JPG
        text: Привет, меня зовут Алиса, я руковожу командой инженеров в Code.org. Я разработала этот обучающий курс, в который вы играете прямо сейчас.
      2:
        image: notes/starwars_congrats_2.JPG
        text: Мы уже на последнем уровне! Поздравляю! Мы выучили все, что нужно знать, чтобы создать собственную игру Звездные войны. Поэтому теперь нет инструкций, или заданий, которые нужно решать. Можете создать собственную игру, и выбрать как она будет работать. И еще, для вас доступные новые звуки и команды, которые позволяют сделать еще больше.
      3:
        image: notes/starwars_congrats_3.JPG
        text: '[говорят ученики]. Мы сделали игру, в которой ты получаешь баллы когда собираешь свиней. Главное препятствие - каждый раз, когда касаешься свиньи, появляется штурмовик. В конце концов весь экран заполнен свиньями и когда ты соберешь их 10000, ты побеждаешь.'
      4:
        image: notes/starwars_congrats_4.JPG
        text: '[говорят ученики]. Мы сделали игру, в которой невозможно проиграть, а все, что ты собираешь дает тебе баллы. Для своей программы я повернула клавиши, поэтому когда нажимаешь вверх, персонаж идет вниз, а когда нажимаешь вправо, персонаж двигается влево. Это так сложно! Иногда можно получить преимущество от того, что ты разрабатываешь игру!'
      5:
        image: notes/starwars_congrats_5.JPG
        text: Когда завершите создавать игру, можете нажать Поделиться и получить ссылку, которую можно распространить среди друзей или поиграть на телефоне. Развлекайся!
    starwars_blocks_intro:
      1:
        image: notes/starwars_blocks_intro_1.JPG
        text: 'Привет, я Кэтлин Кеннеди, продюсер фильма «Звёздные войны: Пробуждение силы». Сегодня вы будете работать с нашей звездой, BB-8. BB-8 - это сферический дроид. Каждое его действие и движение контролируется с помощью ПО. Информатика влияет на каждую отрасль, от маркетинга до здравоохранения. На самом деле, сотни компьютерных инженеров работали над «Пробуждением Силы».'
      2:
        image: notes/starwars_blocks_intro_2.JPG
        text: Привет, я Рэйчел Роуз, старший инженер НИОКР в ILM и глава по разработке анимации и текстур. В «Пробуждении Силы», я отвечаю за помощь художникам в разработке установок, являющихся частью персонажа. Они позволяют персонажу выглядят правдоподобно в далекой-далекой галактике.
      3:
        image: notes/starwars_blocks_intro_3.JPG
        text: В течение следующего часа, мы построим нашу собственную игру о «Звездных Воинах». Мы научим вас основам программирования. Обычно код состоит из текста, но мы будем использовать блоки, которыми можно будет написать программу. Для начала, мы поработаем с Рей и запрограммируем BB-8 собрать весь металлолом.
      4:
        image: notes/starwars_blocks_intro_4.JPG
        text: Экран разделен на три части. Слева находится игровая площадка «Звездных Войн», и здесь будет виден результат. Инструкции для каждого уровня находятся ниже.
      5:
        image: notes/starwars_blocks_intro_5.JPG
        text: Посередине находится Набор блоков. Каждый блок — команда для BB-8.
      6:
        image: notes/starwars_blocks_intro_6.JPG
        text: Белая область справа — Рабочая область. Здесь мы будем писать нашу программу.
      7:
        image: notes/starwars_blocks_intro_7.JPG
        text: Что будет, если я перетащу блок «переместить влево» в Рабочую область? BB-8 переместится влево, один блок.
      8:
        image: notes/starwars_blocks_intro_8.JPG
        text: А что, если я хочу, чтобы BB-8 сделал ещё что-нибудь после перемещения? Я могу добавить еще один блок в нашу программу. Я выбираю блок «переместить вверх», и перенесу его под предыдущий блок, пока не появится оранжевая линия. Затем я соединю вместе эти два блока. Когда я снова нажму Выполнить, BB-8 выполнит все команды по порядку, сверху вниз.
      9:
        image: notes/starwars_blocks_intro_9.JPG
        text: Если вы захотите удалить блок, просто перетащите его обратно в Набор.
      10:
        image: notes/starwars_blocks_intro_10.JPG
        text: После начала выполнения программы, вы всегда можете нажать на кнопку сброса, чтобы вернуть BB-8 в начальную позицию. Давайте приступим!
    starwars_blocks_events:
      1:
        image: notes/starwars_blocks_events_1.JPG
        text: Здравствуйте, меня зовут Карита Картер. Я старший креативный продюсер Walt Disney Imagineering. Я несу ответственность за ведущие команды, работающие над развлекательными программами для наших гостей. Мы все время стараемся найти новые способы развлечения для наших гостей, а технологии помогают нам в этом.
      2:
        image: notes/starwars_blocks_events_2.JPG
        text: Поздравляю, вы сделали это! Вы запрограммировали BB-8. Думаю, теперь мы готовы к чему-то посложнее. Ну так вперед. Теперь, когда вы изучили основы программирования, мы собираемся вернуться в прошлое, чтобы построить свою собственную игру с R2-D2 и C3PO в главных ролях.
      3:
        image: notes/starwars_blocks_events_3.JPG
        text: 'Чтобы создать игру, нам нужно узнать о кое-чем, что используется программистами игр ежедневно: это события. События указывают программе слушать или ожидать пока не случится чего-то, и когда это случится - произвести определенное действие.'
      4:
        image: notes/starwars_blocks_events_4.JPG
        text: 'Примеры событий - это ожидание щелчка мышки, нажатия кнопки со стрелкой, или прикосновение к сенсорному экрану.'
      5:
        image: notes/starwars_blocks_events_5.JPG
        text: 'Мы же заставим R2-D2 двигаться вверх, чтобы доставить сообщение Пилоту повстанцев, а потом - двигаться вниз к другому пилоту. Мы используем события, чтобы он двигался. Игрок использует клавиши вверх/вниз или кнопки вверх/вниз.'
      6:
        image: notes/starwars_blocks_events_6.JPG
        text: Мы используем блок событий когдаВверх() и прикрепим к нему блок идтиВверх(). Когда игрок нажмёт на кнопку вверх, выполнится код прикреплённый к блоку когдаВверх(). И мы сделаем то же самое, чтобы R2-D2 двигался вниз. Теперь, вместо того, чтобы писать заранее весь код для управления дроидом, R2-D2 будет реагировать на события при нажатии кнопок, которые двигают его по экрану.
      7:
        image: notes/starwars_blocks_events_7.JPG
        text: Шаг за шагом, ваша игра становится более интерактивной.
    starwars_blocks_congrats:
      1:
        image: notes/starwars_blocks_congrats_1.JPG
        text: Привет, меня зовут Алиса, я руковожу командой инженеров в Code.org. Я разработала этот обучающий курс, в который вы играете прямо сейчас.
      2:
        image: notes/starwars_blocks_congrats_2.JPG
        text: Мы уже на последнем уровне! Поздравляю! Мы выучили все, что нужно знать, чтобы создать собственную игру Звездные войны. Поэтому теперь нет инструкций, или заданий, которые нужно решать. Можете создать собственную игру, и выбрать как она будет работать. И еще, для вас доступные новые звуки и команды, которые позволяют сделать еще больше.
      3:
        image: notes/starwars_blocks_congrats_3.JPG
        text: '[говорят ученики]. Мы сделали игру, в которой ты получаешь баллы когда собираешь свиней. Главное препятствие - каждый раз, когда касаешься свиньи, появляется штурмовик. В конце концов весь экран заполнен свиньями и когда ты соберешь их 10000, ты побеждаешь.'
      4:
        image: notes/starwars_blocks_congrats_4.JPG
        text: '[говорят ученики]. Мы сделали игру, в которой невозможно проиграть, а все, что ты собираешь дает тебе баллы. Для своей программы я повернула клавиши, поэтому когда нажимаешь вверх, персонаж идет вниз, а когда нажимаешь вправо, персонаж двигается влево. Это так сложно! Иногда можно получить преимущество от того, что ты разрабатываешь игру!'
      5:
        image: notes/starwars_blocks_congrats_5.JPG
        text: Когда завершите создавать игру, можете нажать Поделиться и получить ссылку, которую можно распространить среди друзей или поиграть на телефоне. Развлекайся!
    mc_intro:
      1:
        image: notes/mc_intro_1.JPG
        text: 'Меня зовут Йенс Бергенстен, но я больше известен под именем Джеб. Я ведущий разработчик игры Minecraft в стокгольмской компании Mojang. Кажется, мне было 11 или 12 лет, когда я начал заниматься программированием: я хотел создавать игры. Приятель моего отца сказал мне, что чтобы делать игры, надо научиться программировать. Так я занялся программированием. Мне нравится разрабатывать и продумывать структуру различных вещей. Именно это меня так привлекает в Minecraft.'
      2:
        image: notes/mc_intro_2.JPG
        text: 'Следующий час вы будете изучать основы компьютерного программирования, заставляя Алекса или Стива передвигаться по воссозданному участку мира Minecraft. '
      3:
        image: notes/mc_intro_3.JPG
        text: Обычно программисты имеют дело с текстом, но сегодня мы будем использовать систему, в которой для написания программ нужно перетаскивать блоки. В итоге вы создадите код JavaScript.
      4:
        image: notes/mc_intro_4.JPG
        text: Принципы, которым вы научитесь, используются программистами каждый день и являются основой такой науки, как информатика. Мы в Mojang тоже используем эти принципы при разработке игры Minecraft.
      5:
        image: notes/mc_intro_5.JPG
        text: Сначала вам нужно будет выбрать себе персонажа. Я выбираю Алекс. Давайте создадим код для программы, которая поможет ей перемещаться по экрану.
      6:
        image: notes/mc_intro_6.JPG
        text: 'Экран разделен на три основных зоны. Слева находится игровое пространство Minecraft: здесь выполняется ваша программа. Ниже мы пишем инструкции для каждого уровня.'
      7:
        image: notes/mc_intro_7.JPG
        text: Центральная зона представляет собой набор команд, в котором каждый блок – определенная команда для Алекс.
      8:
        image: notes/mc_intro_8.JPG
        text: 'Белое поле справа – это рабочее пространство, в котором мы пишем программу. '
      9:
        image: notes/mc_intro_9.JPG
        text: 'Если перетащить блок «двигаться вперед»на рабочее пространство и нажать «Выполнить», произойдет вот что: Алекс продвинется в игре вперед на одну клетку.'
      10:
        image: notes/mc_intro_10.JPG
        text: 'А если нам нужно, чтобы после передвижения вперед она что-то сделала? Надо добавить в нашу программу еще один блок. Я выберу блок «повернуть налево» и поставлю его под блоком «двигаться вперед» так, чтобы появилась эта оранжевая линия. Затем я отпущу блок, и два блока соединятся. Когда мы снова нажмем «Выполнить», Алекс выполнит команды, расположенные сверху вниз в нашем рабочем пространстве. '
      11:
        image: notes/mc_intro_11.JPG
        text: 'А если вы хотите удалить блок, просто перетащите его из рабочего пространства обратно в набор команд. '
      12:
        image: notes/mc_intro_12.JPG
        text: 'Чтобы отменить изменения и вернуться к тому, как уровень выглядел в начале, нажмите кнопку «начать сначала» в правом верхнем углу рабочего пространства. И еще одно: вы видите зеленый треугольничек на блоках с командами поворота? Эти треугольники позволяют выбрать другой вариант команды. Начнем программировать!'
    mc_repeat:
      1:
        image: notes/mc_repeat_1.JPG
        text: 'Я Лидия Винтерс, руководитель бренда Mojang, это мы создали игру под названием Minecraft. '
      2:
        image: notes/mc_repeat_2.JPG
        text: В Minecraft мне больше всего нравится исследовать мир. Обожаю забираться в пещеры и смотреть, что там есть. Я вовсе не программист, и меня восхищает возможность пройти этот курс по Minecraft и узнать кое-что о программировании.
      3:
        image: notes/mc_repeat_3.JPG
        text: 'На первом уровне нужно было использовать много блоков «двигаться вперед». Было бы здорово, если бы можно было приказать компьютеру выполнить команду «двигаться вперед» четыре-пять раз. К счастью, компьютеры отлично с этим справляются: просто используйте циклы повтора.'
      4:
        image: notes/mc_repeat_4.JPG
        text: При создании игры Minecraft мы используем циклы повтора для размещения всех материалов для создания нового мира. А это тысячи и тысячи блоков! Мы также используем циклы для более мелких задач, например, чтобы ноги Алекс двигались взад-вперед при ходьбе. Циклы повтора – это важная часть программирования.
      5:
        image: notes/mc_repeat_5.JPG
        text: Приближается ночь, и на двух следующих уровнях нам нужно будет построить укрытие – дом. Упростить постройку дома можно с помощью блока «повтор».
      6:
        image: notes/mc_repeat_6.JPG
        text: Чтобы построить стену дома, мы можем четыре раза приказать Алекс продвинуться вперед и разместить доску, а можем – приказать ей пройти вперед и разместить одну доску, а затем взять эту команду и с помощью блока «повтор» сделать так, чтобы она выполняла это действие много раз. Теперь давайте щелкнем по блоку «повтор» и укажем, сколько раз Алекс должна выполнить нужное действие. Давайте же построим дом, пока не настала ночь! Удачи!
    mc_if_statements:
      1:
        image: notes/mc_if_statements_1.JPG
        text: Сейчас я расскажу вам об операторах «если», или условных операторах. Операторы «если» входят в число основных понятий в программировании. Они помогают компьютеру принять решение.
      2:
        image: notes/mc_if_statements_2.JPG
        text: Операторы «если» используют все компьютеры, даже этот телефон. Например, когда я разблокирую телефон, выполняется код, в котором сказано, что если я введу пароль правильно, телефон надо разблокировать. А если нет – вывести сообщение об ошибке.
      3:
        image: notes/mc_if_statements_3.JPG
        text: Используйте операторы «если» в программе, чтобы Стив и Алекс могли реагировать на то, что они видят в игре. Например, если перед персонажем камень, он может повернуть налево. А если дерево – направо.
      4:
        image: notes/mc_if_statements_4.JPG
        text: 'Чтобы не упасть в лаву, тоже можно использовать условный оператор. Лаву совсем несложно обходить: ее видно на экране. Но что если лава скрыта под камнем? '
      5:
        image: notes/mc_if_statements_5.JPG
        text: 'Добыв камень, нужно проверить, есть ли на этом месте камень, и лишь потом двигаться вперед. Если впереди лава, следует разместить перед персонажем камень, а уже потом идти вперед: так от лавы не будет вреда. Давайте добудем чего-нибудь еще! Но не забывайте для безопасности использовать операторы «если».'
    mc_congrats_share:
      1:
        image: notes/mc_congrats_share_1.JPG
        text: 'Поздравляю! Вы только что освоили самые основы программирования. '
      2:
        image: notes/mc_congrats_share_2.JPG
        text: Теперь вы можете использовать эти знания для создания собственных программ и миров. У меня больше нет для вас инструкций и задачек. Вы можете сами построить то, что хотите. Выбирать вам.
      3:
        image: notes/mc_congrats_share_3.JPG
        text: '[говорят дети] Вот, уже похоже... Стричь... Я сделал букву «L» из факелов!.. А я – букву «А» из березовых досок. Получилось, получилось! Мы построили дом из шерсти!'
      4:
        image: notes/mc_congrats_share_4.JPG
        text: Закончив работу, выберите «поделиться», чтобы получить ссылку и показать свое творчество друзьям. Удачи!
    mc_congrats_no_share:
      1:
        image: notes/mc_congrats_no_share_1.JPG
        text: 'Поздравляю! Вы только что освоили самые основы программирования. '
      2:
        image: notes/mc_congrats_no_share_2.JPG
        text: Теперь вы можете использовать эти знания для создания собственных программ и миров. У меня больше нет для вас инструкций и задачек. Вы можете сами построить то, что хотите. Выбирать вам.
      3:
        image: notes/mc_congrats_no_share_3.JPG
        text: '[говорят дети] Вот, уже похоже... Стричь... Я сделал букву «L» из факелов!.. А я – букву «А» из березовых досок. Получилось, получилось! Мы построили дом из шерсти!'
      4:
        image: notes/mc_congrats_no_share_4.JPG
        text: Теперь вы можете построить все что угодно. Удачи!
    gumball_intro:
      1:
        image: notes/gumball_intro_1.JPG
        text: "If you'd like to make your own game, it's really easy. All you need are just a few basics of programming and you can start playing a game that you created."
      2:
        image: notes/gumball_intro_2.JPG
        text: "Do you have a favorite video game? We're going to take one step toward creating games just like that in PlayLab. Good games have a story and every story has actors. Actors that do things like speak, move and interact with each other. Maybe even score points based on the rules of the game. Today, we'll be learning how to do all these things one by one with fun actors and then build a game from scratch that can be shared and played on a phone."
      3:
        image: notes/gumball_intro_3.JPG
        text: "Today, we'll be learning how to do all these things one by one with fun actors and then build a game from scratch that can be shared and played on a phone."
      4:
        image: notes/gumball_intro_4.JPG
        text: Your screen is split into three main parts. On the left is the gamespace where your program will run. The instructions for each level are written below.
      5:
        image: notes/gumball_intro_5.JPG
        text: This middle area is the tool box and each of these blocks is a piece of code.
      6:
        image: notes/gumball_intro_6.JPG
        text: 'Белое поле справа – это рабочее пространство, в котором мы пишем программу. '
      7:
        image: notes/gumball_intro_7.JPG
        text: "To start off, you'll need to link your blocks to the orange when run block. You can link multiple blocks together by dragging them out until you see the yellow line and then they'll snap together."
      8:
        image: notes/gumball_intro_8.JPG
        text: |-
          In this first puzzle, we'll make the actors say something by linking the "say" block to the when run block and typing in your message. Once you have your blocks in place, hit the run button to see what you programmed.
      9:
        image: notes/gumball_intro_9.JPG
        text: "Get started and by the end you'll be able to create your own game with all kinds of players that can interact, score points, throw things, and vanish each other. It's all up to you!"
    gumball_events:
      1:
        image: notes/gumball_events_1.JPG
        text: "Now we're going to learn about something all game programmers use everyday. They're called events. An event tells your program to listen for when something happens and then when it does, the game performs an action."
      2:
        image: notes/gumball_events_2.JPG
        text: Some examples of events are listening for a mouse click or an up or down arrow key or even a tap on the screen.
      3:
        image: notes/gumball_events_3.JPG
        text: |-
          Here, we're going to make the actor say something when the player clicks on it. We will use the when clicked block and attach the "say" block to it. When the player clicks, all the blocks attached to this block will be performed.
      4:
        image: notes/gumball_events_4.JPG
        text: There are also when arrow blocks. If you link move blocks to those, you can start to move your actors up, down, left, right, with the arrow keys. Little by little your game is getting more interactive.
    gumball_repeat:
      1:
        image: notes/gumball_repeat_1.JPG
        text: Can you imagine if you had to repeat something forever and ever? Hopefully you never have to because computers are really good at repeating things.
      2:
        image: notes/gumball_repeat_2.JPG
        text: "This is the repeat forever block. Anything inside this block will happen forever in the game. If we want an actor to do something repeatedly without the player having to do anything, we'll put those blocks inside the repeat forever block."
      3:
        image: notes/gumball_repeat_3.JPG
        text: In this next puzzle, our goal is to help the actor do a job continuously. Learning how the repeat commands work will save you a ton of time later when you build your own game.
    iceage_intro:
      1:
        image: notes/iceage_intro_1.JPG
        text: "If you'd like to make your own game, it's really easy. All you need are just a few basics of programming and you can start playing a game that you created."
      2:
        image: notes/iceage_intro_2.JPG
        text: "Do you have a favorite video game? We're going to take one step toward creating games just like that in PlayLab. Good games have a story and every story has actors. Actors that do things like speak, move and interact with each other. Maybe even score points based on the rules of the game. Today, we'll be learning how to do all these things one by one with fun actors and then build a game from scratch that can be shared and played on a phone."
      3:
        image: notes/iceage_intro_3.JPG
        text: "Today, we'll be learning how to do all these things one by one with fun actors and then build a game from scratch that can be shared and played on a phone."
      4:
        image: notes/iceage_intro_4.JPG
        text: Your screen is split into three main parts. On the left is the gamespace where your program will run. The instructions for each level are written below.
      5:
        image: notes/iceage_intro_5.JPG
        text: This middle area is the tool box and each of these blocks is a piece of code.
      6:
        image: notes/iceage_intro_6.JPG
        text: 'Белое поле справа – это рабочее пространство, в котором мы пишем программу. '
      7:
        image: notes/iceage_intro_7.JPG
        text: "To start off, you'll need to link your blocks to the orange when run block. You can link multiple blocks together by dragging them out until you see the yellow line and then they'll snap together."
      8:
        image: notes/iceage_intro_8.JPG
        text: |-
          In this first puzzle, we'll make the actors say something by linking the "say" block to the when run block and typing in your message. Once you have your blocks in place, hit the run button to see what you programmed.
      9:
        image: notes/iceage_intro_9.JPG
        text: "Get started and by the end you'll be able to create your own game with all kinds of players that can interact, score points, throw things, and vanish each other. It's all up to you!"
    iceage_events:
      1:
        image: notes/iceage_events_1.JPG
        text: "Now we're going to learn about something all game programmers use everyday. They're called events. An event tells your program to listen for when something happens and then when it does, the game performs an action."
      2:
        image: notes/iceage_events_2.JPG
        text: Some examples of events are listening for a mouse click or an up or down arrow key or even a tap on the screen.
      3:
        image: notes/iceage_events_3.JPG
        text: |-
          Here, we're going to make the actor say something when the player clicks on it. We will use the when clicked block and attach the "say" block to it. When the player clicks, all the blocks attached to this block will be performed.
      4:
        image: notes/iceage_events_4.JPG
        text: There are also when arrow blocks. If you link move blocks to those, you can start to move your actors up, down, left, right, with the arrow keys. Little by little your game is getting more interactive.
    iceage_repeat:
      1:
        image: notes/iceage_repeat_1.JPG
        text: Can you imagine if you had to repeat something forever and ever? Hopefully you never have to because computers are really good at repeating things.
      2:
        image: notes/iceage_repeat_2.JPG
        text: "This is the repeat forever block. Anything inside this block will happen forever in the game. If we want an actor to do something repeatedly without the player having to do anything, we'll put those blocks inside the repeat forever block."
      3:
        image: notes/iceage_repeat_3.JPG
        text: In this next puzzle, our goal is to help the actor do a job continuously. Learning how the repeat commands work will save you a ton of time later when you build your own game.
