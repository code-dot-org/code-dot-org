el:
  slides:
    maze_intro:
      1:
        image: σημειώσεις/hoc1_1.jpg
        text: 'Καλώς ήρθες στην πρώτη σου Ώρα του Κώδικα! Ας ξεκινήσουμε με μια πρώτη γεύση  προγραμματισμού.'
      2:
        image: σημειώσεις/hoc1_2.jpg
        text: Θα χρησιμοποιήσουμε το Blockly, μια οπτική γλώσσα προγραμματισμού στην οποία μπορείς να μετακινείς πλακίδια για να γράψεις κώδικα.
      3:
        image: σημειώσεις/hoc1_3.jpg
        text: Στα περισσότερα προγράμματα πρέπει κάποιος να πληκτρολογήσει τον κώδικα του προγράμματος, αλλά στο Blockly ο προγραμματισμός είναι οπτικός. Κάθε πλακίδιο αντιστοιχεί σε μια γραμμή «πραγματικού» κώδικα.
      4:
        image: σημειώσεις/hoc1_4.jpg
        text: Θα μάθεις τις βασικές αρχές της επιστήμης των υπολογιστών, έννοιες που χρησιμοποιούνται παντού από την κατασκευή εφαρμογών μέχρι τον έλεγχο οχήματος στον Άρη.
      5:
        image: σημειώσεις/hoc1_5.jpg
        text: Το πρόγραμμα είναι ένα σύνολο οδηγιών που πρέπει να εκτελέσει ο υπολογιστής.
      6:
        image: σημειώσεις/hoc1_6.jpg
        text: 'Ο στόχος του πρώτου προγράμματος είναι να καθοδηγήσει το πουλί (Angry Bird)  ώστε να κινηθεί μέσα στο λαβύρινθο και να πιάσει το πράσινο γουρουνάκι.'
      7:
        image: σημειώσεις/hoc1_7.jpg
        text: Στο αριστερό μέρος της οθόνης εμφανίζεται ο λαβύρινθος μέσα στον οποίο εκτελείται το πρόγραμμα. Οι εντολές για κάθε puzzle εμφανίζονται κάτω από το λαβύρινθο.
      8:
        image: σημειώσεις/hoc1_8.jpg
        text: Η μεσαία εργαλειοθήκη έχει εντολές για το Θυμωμένο Πουλί. Θα τις χρησιμοποιήσεις για να φτιάξεις τον κώδικά σου.
      9:
        image: σημειώσεις/hoc1_9.jpg
        text: Στα δεξιά είναι ο χώρος εργασίας σου, όπου θα μεταφέρετε πλακίδια από την εργαλειοθήκη για να φτιάξεις το πρόγραμμά σου. Για να διαγράψεις ένα πλακίδιο σύρε το στα σκουπίδια στη γωνία.
      10:
        image: σημειώσεις/hoc1_10.jpg
        text: Κάθε πλακίδιο είναι μια εντολή. Εάν σύρεις το πλακίδιο «μετακίνηση προς τα εμπρός» στο χώρο εργασίας σου και πατήστε το «Εκτέλεση Προγράμματος», το πουλί κάνει ένα βήμα στο λαβύρινθο.
      11:
        image: σημειώσεις/hoc1_11.jpg
        text: Για να κάνεις πάνω από μία ενέργεια, μπορείς να σύρεις πολλά μπλοκ στην περιοχή εργασίας σου και να τα συνδέσεις. Το πουλί θα εκτελέσει τις εντολές από επάνω προς τα κάτω.
      12:
        image: σημειώσεις/hoc1_12.jpg
        text: Εάν εκτελέσεις ένα πρόγραμμα και θέλεις να το διορθώσεις και προσπαθήσεις ξανά, πάτησε το πλήκτρο «Επαναφορά».
      13:
        image: σημειώσεις/hoc1_13.jpg
        text: Πάμε να πιάσουμε εκείνα τα γουρουνάκια!
    artist_intro:
      1:
        image: σημειώσεις/stage5_1.jpg
        text: Γεια σου, είμαι ο JR! Κάθε ομάδα αγωνιστικών αυτοκινήτων χρειάζεται επιστήμονες υπολογιστών για να κερδίσει. Αυτοί αναλύουν τα δεδομένα από το αυτοκίνητο για να το κάνουν να πάει πιο γρήγορα.
      2:
        image: σημειώσεις/stage5_2.jpg
        text: Σε αυτά τα παζλ, θα γίνεις ένας καλλιτέχνης που σχεδιάζει γραμμή πίσω του όπου πηγαίνει.
      3:
        image: σημειώσεις/stage5_3.jpg
        text: Αυτό το πλακίδιο λέει «προχώρησε προς τα εμπρός για 100 εικονοστοιχεία». Τα εικονοστοιχεία είναι μικροσκοπικές τελείες στην οθόνη σου.
      4:
        image: σημειώσεις/stage5_4.jpg
        text: Αυτό το πλακίδιο λέει «στρίψε δεξιά κατά 90 μοίρες.» Αυτό θα κάνει τον καλλιτέχνη σου να στρίψει όπως έκανε το πλακίδιο «στρίψε» στα παζλ του λαβύρινθου.
      5:
        image: σημειώσεις/stage5_5.jpg
        text: Κάνε κλικ στο βέλος σε ένα από αυτά τα πλακίδια για να αλλάξεις το πόσο προχωρεί ή στρίβει ο καλλιτέχνης. Παίξε λίγο για να εξοικειωθείς με αυτά τα νέα πλακίδια.
    farmer_intro:
      1:
        image: σημειώσεις/stage9_1.jpg
        text: Γεια σου, είμαι η Πάολα! Σε αυτά τα παζλ, είσαι μία γεωργός που πρέπει να κάνει τον αγρό της εντελώς επίπεδο για να αρχίσει να φυτεύει σπαρτά.
      2:
        image: σημειώσεις/stage9_2.jpg
        text: Θα πρέπει να τη βοηθήσεις να αφαιρέσει όλους τους σωρούς βρωμιάς και να καλύψει όλες τις τρύπες.
      3:
        image: σημειώσεις/stage9_3.jpg
        text: Τα νέα πλακίδια αφαιρούν 1 φτυαριά βρωμιάς από έναν σωρό και γεμίζουν μια τρύπα με 1 φτυαριά βρωμιάς.
      4:
        image: σημειώσεις/stage9_4.jpg
        text: Οι σωροί και οι τρύπες έχουν διαφορετικά μεγέθη, οπότε πρέπει να πεις στη γεωργό πόσες φτυαριές να χρησιμοποιήσει.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Γεια σου, είμαι η Κάτια! Ένα από τα πιο συναρπαστικά πράγματα της επιστήμης των υπολογιστών είναι ότι τα προγράμματα υπολογιστών μπορεί να γίνουν διαδραστικά.
      2:
        image: notes/flappy02.jpg
        text: Κάθε φορά που κάποιος κάνει κλικ ή πληκτρολογεί η αγγίζει την οθόνη αφής ενός υπολογιστή ή τηλεφώνου, αυτή η πράξη παράγει ένα ΣΥΜΒΑΝ και υπάρχει συνήθως ένα κομμάτι κώδικα που αποφασίζει τι θα γίνει όταν πραγματοποιείται ένα ΣΥΜΒΑΝ.
      3:
        image: notes/flappy03.jpg
        text: 'Για παράδειγμα, μπορείς να έχετε έναν ΧΕΙΡΙΣΤΗ-ΣΥΜΒΑΝΤΩΝ που να λέει «όταν γίνει κλικ με το ποντίκι, παίξε έναν ήχο» '
      4:
        image: notes/flappy04.jpg
        text: Έχεις ποτέ ακούσει για το παιχνίδι FlappyBird; Χρησιμοποιώντας χειριστές Γεγονότων, θα μάθουμε πως να προγραμματίζουμε τη δική μας έκδοση του FlappyBird!
      5:
        image: notes/flappy05.jpg
        text: Ο κώδικας που θα γράψεις περιλαμβάνει μεταφορά και απόθεση πλακιδίων που αντιπροσωπεύουν εντολές για τον υπολογιστή. Στο παρασκήνιο, καθένα από αυτά τα πλακίδια αντιπροσωπεύεται από πραγματικό κώδικα.
      6:
        image: notes/flappy06.jpg
        text: 'Αν θες να ρίξεις μια ματιά στο χώρο εργασίας, υπάρχουν κάποια πράσινα πλακίδια που τα γεμίσαμε για σένα - αυτά είναι οι «χειριστές γεγονότων» '
      7:
        image: notes/flappy07.jpg
        text: Αν θέλεις να κάνεις το πουλί να ΦΤΕΡΟΥΓΙΣΕΙ όταν κάνεις ΚΛΙΚ με το ποντίκι, μπορείς να το κάνεις προσθέτοντας το πλακίδιο «ΦΤΕΡΟΥΓΙΣΜΑ» στον κατάλληλο χειριστή γεγονότων, και πλέον στο παιχνίδι σου όταν κάνεις κλικ με το ποντίκι, το πουλί θα φτερουγίσει.
      8:
        image: notes/flappy08.jpg
        text: Με κάθε παζλ σε αυτή την δραστηριότητα θα παρουσιάζουμε νέους τύπους γεγονότων με τη μορφή των πράσινων πλακιδίων στο χώρο εργασίας και μπορείς να αποφασίζεις για τα κατάλληλα πλακίδια που θα προσθέτεις ως απάντηση σε αυτά τα γεγονότα.
      9:
        image: notes/flappy09.jpg
        text: 'Όταν δεις ένα αναπτυσσόμενο σαν κι αυτό, αυτό σημαίνει ότι μπορείς να αλλάξεις τις ρυθμίσεις - όπως το ποιος ήχος να παιχτεί όταν ο φλάπι χτυπήσει στο έδαφος.'
      10:
        image: notes/flappy10.jpg
        text: Στο τελικό παζλ θα μπορέσεις να δημιουργήσεις το δικό σου παιχνίδι και να το μοιραστείς με τους φίλους σου. Καλή διασκέδαση!
    loop_times:
      1:
        image: σημειώσεις/hoc2_1.jpg
        text: Γεια σου, είμαι ο Μάρκος! Ας μάθουμε για βρόχους. Χρησιμοποιώντας βρόχους μπορείς να πεις σε έναν υπολογιστή να επαναλάβει κάθε σύνολο ενεργειών ξανά και ξανά, χιλιάδες ή ακόμη και δισεκατομμύρια φορές.
      2:
        image: σημειώσεις/hoc2_2.jpg
        text: Σε αυτό το παζλ, θέλουμε να κάνουμε το πουλί να μετακινηθεί προς τα εμπρός 5 βήματα για να πιάσει το γουρούνι.
      3:
        image: σημειώσεις/hoc2_3.jpg
        text: Μπορούμε να χρησιμοποιήσουμε το νέο πλακίδιο «επανάληψης» για να μας βοηθήσει.
      4:
        image: σημειώσεις/hoc2_4.jpg
        text: 'Αντί να χρησιμοποιήσεις 5 πλακίδια "μετακίνηση προς τα εμπρός"...'
      5:
        image: σημειώσεις/hoc2_5.jpg
        text: 'Μπορούμε να βάλουμε το πλακίδιο "μετακίνηση προς τα εμπρός" στο εσωτερικό του πλακιδίου "επανάληψη" και να γράψουμε έναν αριθμό στο πλακίδιο για να του πούμε πόσες φορές να το επαναλάβει.'
      6:
        image: σημειώσεις/hoc2_6.jpg
        text: 'Και αυτό είναι σημαντικό: μπορείς να βάλεις περισσότερες από μία εντολές μέσα σε ένα πλακίδιο «επανάληψη».'
      7:
        image: σημειώσεις/hoc2_7.jpg
        text: Απόλαυσε το νέο σου πλακίδιο «επανάληψη»!
    loop_until:
      1:
        image: σημειώσεις/hoc3_1.jpg
        text: Γεια σου, είμαι ο Chris. Πριν πάω στους Miami Heat πήγα στο πανεπιστήμιο Georgia Tech να σπουδάσω Επιστήμη των Υπολογιστών. Ας δοκιμάσουμε ένα νέο πλακίδιο, τo «επανάλαβε μέχρι».
      2:
        image: σημειώσεις/hoc3_2.jpg
        text: Κι αν δεν ξέραμε πόσο μακριά πρέπει να πάει το πουλί για να φτάσει το γουρούνι;
      3:
        image: σημειώσεις/hoc3_3.jpg
        text: Αν βάλουμε ένα πλακίδιο «μετακίνηση προς τα εμπρός» στο εσωτερικό του πλακιδίου «επανάληψη μέχρι», το πουλί θα κινηθεί προς τα εμπρός, ΜΕΧΡΙ να φτάσει το γουρούνι (ή να πέσει πάνω σε έναν τοίχο).
      4:
        image: σημειώσεις/hoc3_4.jpg
        text: 'Είναι σημαντικό: όπως και πριν, μπορούμε να βάλουμε πολλά πλακίδια μέσα στο «επανάλαβε μέχρι» και όλα αυτά μαζί θα επαναληφθούν.'
    if:
      1:
        image: σημειώσεις/hoc4_1.jpg
        text: 'Γεια σου, είμαι ο Βασίλης! Ας μάθουμε μια νέα θεμελιώδη έννοια: τις εντολές  «εάν». Αυτός είναι ο τρόπος με τον οποίο οι υπολογιστές παίρνουν αποφάσεις.'
      2:
        image: σημειώσεις/hoc4_2.jpg
        text: 'Χρησιμοποιείς τις εντολές «εάν» καθημερινά στη ζωή σου. Κάθε πρωί, πριν βγεις για να πας στο σχολείο, σκέφτεσαι: αν βρέχει έξω, πρέπει να φορέσω το παλτό μου.'
      3:
        image: σημειώσεις/hoc4_3.jpg
        text: Μπορούμε να πούμε στο ζόμπι να ελέγξει ΕΑΝ υπάρχει μονοπάτι αριστερά, και αν πράγματι βρει μονοπάτι στα αριστερά, να τον κάνουμε να στρίψει προς αυτή την κατεύθυνση.
      4:
        image: σημειώσεις/hoc4_4.jpg
        text: Για να γράψεις τον κώδικα για αυτό, σύρε έξω το πλακίδιο «εάν» και βάλε ένα πλακίδιο «στρίψε αριστερά» μέσα του.
      5:
        image: σημειώσεις/hoc4_5.jpg
        text: Τώρα, εάν βάλουμε ένα πλακίδιο «προχώρησε εμπρός» πάνω από αυτό και ένα πλακίδιο «επανάλαβε» γύρω από όλα, κάθε φορά που κινείται το ζόμπι, θα ελέγχει εάν υπάρχει μονοπάτι στα αριστερά και θα στρίβει. Η εντολή «επανάλαβε» είναι κρίσιμη, για τον έλεγχο της στροφής σε κάθε βήμα.
      6:
        image: σημειώσεις/hoc4_6.jpg
        text: Οι εντολές «εάν» είναι πραγματικά σημαντικές στην επιστήμη των υπολογιστών. Ένα από τα πρώτα προγράμματα που έγραψα ήταν ένα παιχνίδι τρίλιζας και υπήρχε μια εντολή «εάν» που έλεγε ΕΑΝ ο αντίπαλος είναι ένα βήμα πριν κερδίσει, τότε μπλόκαρε το σημείο από το οποίο μπορεί να κερδίσει.
      7:
        image: σημειώσεις/hoc4_7.jpg
        text: Καλή διασκέδαση με το πλακίδιο «εάν»!
    if_else:
      1:
        image: σημειώσεις/hoc5_1.jpg
        text: 'Καλημέρα, λέγομαι Saloni. Χρησιμοποιώ την επιστήμη των υπολογιστών ηια να βοηθήσω να λύσουμε προβλήματα υγείας και ιατρικής. Ας μάθουμε για το μπλοκ "εάν - αλλιώς". Μοιάζει με το μπλοκ "εάν" αλλά έχει ένα επιπλέον κομμάτι που λέγεται "αλλιώς".'
      2:
        image: σημειώσεις/hoc5_2.jpg
        text: 'Αν βάλω ένα μπλοκ "προχώρησε μπροστά" στο σημείο που λέει do (κάνε) και ένα μπλοκ "στρίψε αριστερά" εκεί που λέει "αλλιώς", αυτό σημαίνει ότι το ζόμπι έχει δύο επιλογές. ΑΝ υπάρχει μπροστά μονοπάτι τότε το ζόμπι θα προχωρήσει προς τα εμπρός, ΑΛΛΙΩΣ (αν δεν υπάρχει μονοπάτι) το ζόμπι θα στρίψει προς τα αριστερά.'
      3:
        image: σημειώσεις/hoc5_3.jpg
        text: 'Ακριβώς όπως και με το μπλοκ "εαν", μπορούμε να βάλουμε τα μπλοκ "εάν - αλλιώς" μέσα σε μπλοκ επανάληψης ώστε το ζόμπι να συνεχίσει να κινείται και το μπλοκ "εάν - αλλιώς" να συνεχίσει να ελέγχει αν πρέπει κάπου να στρίψει.'
      4:
        image: σημειώσεις/hoc5_4.jpg
        text: Ας πάμε λοιπόν τα ζόμπι εκεί που πρέπει!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: 'Μια πρόταση "εάν - αλλιώς" είναι μια απόφαση ανάμεσα σε δύο πράγματα. Ας δούμε πώς μπορούμε να χρησιμοποιήσουμε μια πρόταση "εάν - αλλιώς" με το φίλο μας το σκίουρο Σκρατ.'
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: 'Αυτό το μπλοκ μοιάζει με το μπλοκ "εάν" αλλά κάτω έχει ένα επιπλέον κομμάτι που λέει "αλλιώς". Αν βάλω ένα μπλοκ "προχώρησε μπροστά" στο σημείο που λέει do (κάνε) και ένα μπλοκ "στρίψε αριστερά" εκεί που λέει "αλλιώς", αυτό σημαίνει ότι ο σκίουρος Σκρατ έχει δύο επιλογές. ΑΝ υπάρχει μπροστά μονοπάτι τότε ο σκίουρος Σκρατ θα προχωρήσει προς τα εμπρός, ΑΛΛΙΩΣ (αν δεν υπάρχει μονοπάτι) θα στρίψει προς τα αριστερά.'
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: 'Είναι η λήψη μιας απόφασης και η εκτέλεση μίας από δύο ενέργειες βάσει αυτής της απόφασης. Όπως κάνουμε και με τα μπλοκ "εάν", μπορείτε να βάλετε μπλοκ "εάν - αλλιώς" μέσα στα μπλοκ επανάληψης.'
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: Ας βοηθήσουμε λοιπόν τον σκίουρο Σκρατ να πιάσει το βελανίδι!
    function:
      1:
        image: σημειώσεις/stage13_1.jpg
        text: Γεια σου, είμαι η Μπρίνα, μηχανικός στο Instagram. Μια συνάρτηση είναι ορισμένες γραμμές κώδικα που θέλετε να χρησιμοποιήσετε ξανά και ξανά, έτσι αντί να γράφετε αυτόν τον κώδικα κάθε φορά, μπορείτε απλά να χρησιμοποιήσετε ένα μπλοκ.
      2:
        image: σημειώσεις/stage13_2.jpg
        text: Πρόκειται να μάθουμε πώς να ορίζουμε συναρτήσεις. Οι ορισμοί των συναρτήσεων έχουν ένα αστέρι στη γωνία. Το όνομα της συνάρτησης γράφετε ψηλά στην πρώτη γραμμή.
      3:
        image: σημειώσεις/stage13_3.jpg
        text: 'Τα μπλοκ που πάνε μέσα στον ορισμό μας λένε τι κάνει. Έτσι το όνομα αυτής της συνάρτησης που ορίζουμε είναι «γέμισε 5» και αποτελείται από ένα μπλοκ "επανάλαβε" και ένα μπλοκ "γέμισε".'
      4:
        image: σημειώσεις/stage13_4.jpg
        text: Ο ορισμός βρίσκεται στο χώρο εργασίας, αλλά ο γεωργός μας δε θα εκτελέσει τη συνάρτηση μέχρι να σύρουμε το πλακίδιο συνάρτησης «γέμισε 5» από την κατηγορία συναρτήσεων.
      5:
        image: notes/stage13_5.jpg
        text: 'Ας βάλουμε τη "διασκέδαση" πίσω στη "ΣΥΝάρτηση!" '
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'Γεια σου, είμαι ο Μακέντ! Ας μάθουμε για το "όσο μπλοκ." '
      2:
        image: notes/stage9_6.jpg
        text: |-
          Το μπλοκ "εφ' όσον" θα κάνει οτιδήποτε τοποθετήσετε μέσα του ΑΡΚΕΙ η δήλωση στην κορυφή είναι ΑΛΗΘΗΣ.
      3:
        image: notes/stage9_7.jpg
        text: Για παράδειγμα, εάν ο γεωργός στέκεται σε έναν σωρό, θα συνεχίζει να αφαιρεί 1 φτυαριά ΟΣΟ υπάρχει βρωμιά από κάτω του.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: Γεια σου, είμαι η Τριν, και δουλεύω για την Pixar. Έχω εργαστεί για πολλές ταινίες, συμπεριλαμβανομένου του Σρεκ.
      2:
        image: notes/stage11_2.jpg
        text: 'Αυτός είναι ο νέος βρόχος "μετρητής". Θα εκτελεί ενέργειες ξανά και ξανά και μπορείτε να κάνετε τις ενέργειες αυτές να αλλάζουν ελαφρώς κάθε φορά.'
      3:
        image: notes/stage11_3.jpg
        text: 'Σε αυτό το παράδειγμα, ο βρόχος "μετρητής" λέει "μέτρησε με μετρητή από 50 μέχρι 90 με βήμα 10" και μέσα σε αυτόν, έχουμε το μπλοκ "σχεδίασε ένα τετράγωνο". Σύρετε το μπλοκ "μετρητής" από την ενότητα "Μεταβλητές" στη θέση "μήκος".'
      4:
        image: notes/stage11_4.jpg
        text: Αυτό σημαίνει ότι ο καλλιτέχνης πρόκειται να σχεδιάσει ένα τετράγωνο που έχει πλευρές μήκους 50 εικονοστοιχείων, μετά θα αυξήσει κατά 10 το μέγεθος και θα σχεδιάσει ένα τετράγωνο με μήκος πλευρών 60 εικονοστοιχεία. Έπειτα θα συνεχίσει να αυξάνει κατά 10 και να σχεδιάζει τετράγωνα μέχρι να φτάσει το 90. Έτσι θα έχουμε τετράγωνα των 50, 60, 70, 80 και 90.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Γεια σου, είμαι η Τζανέτ, και είμαι ένας μηχανικός στη Zynga.
      2:
        image: notes/stage15_2.jpg
        text: Και αν θέλουμε να σχεδιάσουμε πολλά τρίγωνα που οι πλευρές τους να έχουν διαφορετικά μεγέθη;
      3:
        image: notes/stage15_3.jpg
        text: Θα μπορούσαμε να γράψουμε όλο αυτό τον κώδικα με το χέρι ή μπορούμε να χρησιμοποιήσουμε μια συνάρτηση με παραμέτρους.
      4:
        image: notes/stage15_4.jpg
        text: 'Για να το κάνετε αυτό, κάντε κλικ στο μπλε αστέρι στον ορισμό της συνάρτησης «σχεδίασε ένα τρίγωνο». Στη συνέχεια, σύρετε το "εισάγετε όνομα" μέσα στο μπλοκ "εισαγωγή".'
      5:
        image: σημειώσεις/stage15_5.jpg
        text: 'Στη συνέχεια, αν γράψετε "μήκος" στο σημείο όπου λέει "x" και πατήσετε "Enter" θα δημιουργήσετε ένα μήκος εισόδου για τη συνάρτησή σας.'
      6:
        image: σημειώσεις/stage15_6.jpg
        text: 'Στη συνέχεια, κάντε κλικ πάνω στο αστέρι. Τώρα, θέλετε να κάνετε κλικ στην κατηγορία μεταβλητές και να σύρετε το μπλοκ "μήκος" μέσα στο μπλοκ "προχώρησε μπροστά" στον ορισμό της συνάρτησης. Και απομακρύνετε τον παλιό αριθμό μπλοκ.'
      7:
        image: σημειώσεις/stage15_7.jpg
        text: 'Για να χρησιμοποιήσετε τη συνάρτησή σας με παραμέτρους, κάντε κλικ στην κατηγορία συναρτήσεων και σύρετε τη συνάρτηση με όνομα "σχεδίασε ένα τρίγωνο με μήκος".'
      8:
        image: σημειώσεις/stage15_8.jpg
        text: 'Τώρα μπορείτε να χρησιμοποιήσετε το μπλοκ "μαθηματικά" για να εισάγετε διαφορετικούς αριθμούς ώστε να σχεδιάσετε τρίγωνα διαφόρων μεγεθών.'
    hoc_wrapup:
      1:
        image: σημειώσεις/hoc6_1.jpg
        text: Συγχαρητήρια! Με το τελευταίο παζλ που λύσατε, γράψατε τον κώδικα που μπορεί να πει σε οποιοδήποτε robot πώς να βρει την έξοδο σε έναν λαβύρινθο που δεν έχει πολύπλοκους διαδρόμους ή σε μια σήραγγα οποιουδήποτε μήκους. Το ρομπότ σας μπορεί να είναι ένα ζόμπι, ένα πουλί, ένα όχημα που κινείται στον πλανήτη Άρη, ή ακόμη και ένα αυτο-οδηγούμενο (χωρίς οδηγό) αυτοκίνητο.
      2:
        image: σημειώσεις/hoc6_2.jpg
        text: 'Οι βασικές έννοιες που χρησιμοποίησες είναι η καρδιά κάθε προγράμματος ή εφαρμογής που μπορεί να συναντήσεις.  Μάθαμε για βρόχους επανάληψης, για εντολές "επανάλαβε μέχρι", για εντολές "εάν" και "εάν αλλιώς".'
      3:
        image: σημειώσεις/hoc6_3.jpg
        text: Αν σου άρεσε η πρώτη σου ώρα στον προγραμματισμό, επισκέψου τον ιστότοπο code.org για να συνεχίσεις την εκπαίδευσή σου στην Πληροφορική! Μόλις ολοκληρώσεις την 20ώρη σειρά μαθημάτων μας, θα έχεις κατακτήσει τις βασικές γνώσεις του προγραμματισμού και θα μπορείς να αρχίσεις να μαθαίνεις πώς να γράψεις εφαρμογές για κινητά, οδηγίες για ρομπότ, παιχνίδια και ότι άλλο φανταστείς.
      4:
        image: σημειώσεις/hoc6_4.jpg
        text: |
          Η τεχνολογία αλλάζει όλα όσα κάνουμε και δεν έχει σημασία αν είσαι μικρός ή μεγάλος:
          ο προγραμματισμός είναι διασκεδαστικός, δημιουργικός και όλοι μπορούν να μάθουν!
    20_wrapup:
      1:
        image: notes/bird.png
        text: Προβολή σημειώσεων, προσεχώς!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: 'Γεια, είμαι η  Lyndsey. Είμαι μοντέλο, ηθοποιός και γράφω και δικές μου εφαρμογές. Ας χρησιμοποιήσουμε κώδικα για να συνεργαστούμε με την Άννα και την Έλσα καθώς εξερευνούν την ομορφιά και τη μαγεία του πάγου.'
      2:
        image: notes/frozen1_2.jpg
        text: Θα φτιάξετε νιφάδες χιονιού και μοτίβα καθώς κάνετε πατινάζ και θα δημιουργήσετε μια μαγική Χριστουγεννιάτικη εικόνα την οποία μπορείτε να μοιραστείτε και με τους φίλους σας.
      3:
        image: notes/frozen1_3.jpg
        text: Για την επόμενη ώρα, θα μάθετε τα πρώτα βήματα του προγραμματισμού (κώδικα). Ο παραδοσιακός προγραμματισμός συνήθως γίνεται με κείμενο, αλλά εμείς θα χρησιμοποιήσουμε το Blockly, με οπτικά μπλοκ που μπορείτε να σύρετε και να αποθέσετε για να γράψετε προγράμματα. Ακόμα και οι φοιτητές στο πανεπιστήμιο, με αυτή τη μέθοδο μαθαίνουν τα βασικά. Κάτω από τα μπλοκ, δημιουργείτε κώδικα.
      4:
        image: notes/frozen1_4.jpg
        text: Ένα πρόγραμμα είναι ένα σύνολο εντολών που λέει στον υπολογιστή τι να κάνει. Ας φτιάξουμε έναν κώδικα, ή πρόγραμμα, που θα βοηθήσει την Έλσα να φτιάξει μια ευθεία γραμμή. Μετά θα το χρησιμοποιήσουμε για να φτιάξουμε πιο πολύπλοκα μοτίβα.
      5:
        image: notes/frozen1_5.jpg
        text: Η οθόνη σου είναι χωρισμένη σε τρία μέρη. Αριστερά είναι ο πάγος όπου θα τρέξει το πρόγραμμά σου. Οι οδηγίες για κάθε πίστα είναι γραμμένες ακριβώς από κάτω.
      6:
        image: notes/frozen1_6.jpg
        text: Στη μέση είναι η εργαλειοθήκη σου, όπου κάθε μπλοκ είναι μια ενέργεια που μπορεί να κάνει η Έλσα ή η Άννα.
      7:
        image: notes/frozen1_7.jpg
        text: 'Η άσπρη περιοχή δεξιά λέγεται περιοχή εργασίας και εκεί θα φτιάξουμε το πρόγραμμά μας. Για να μετακινηθείς στον πάγο πρέπει να χρησιμοποιήσεις το μπλοκ "προχώρησε μπροστά".'
      8:
        image: notes/frozen1_8.jpg
        text: 'Εδώ το μπλοκ "Προχώρησε μπροστά" λέει "προχώρησε μπροστά κατά 100 pixel". Όταν πατάμε "Τρέξτε" τι γίνεται; Η Έλσα προχωρά μια απόσταση πάνω στον πάγο, συγκεκριμένα 100 pixel! Τα pixel είναι πολύ μικρά τετραγωνάκια στην οθόνη του υπολογιστή σου.'
      9:
        image: notes/frozen1_9.jpg
        text: 'Το άλλο μπλοκ λέει "στρίψε δεξιά κατά 90 μοίρες". Όταν το χρησιμοποιούμε, η Έλσα στρίβει κατά μια συγκεκριμένη γωνία. Μπορείτε να παίξετε με το πόσο στρίβει η Έλσα. Ξεκινάμε να μετράμε τη γωνία από το μονοπάτι που είναι μπροστά από την Έλσα. Άρα αυτό είναι 90 μοίρες. Και αυτό είναι 120 μοίρες.'
      10:
        image: notes/frozen1_10.jpg
        text: Θυμήσου ότι μπορείς να αλλάξεις τα pixel και τις μοίρες κάνοντας κλικ στα βελάκια δίπλα τους.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: 'Γεια, είμαι η Πάολα! Οι υπολογιστές μπορούν εύκολα να επαναλαμβάνουν ενέργειες. Εσείς μπορείτε να μετρήσετε ως το 10, το 20 ή το 100. Όμως ένας υπολογιστής μπορεί να μετρήσει ως το ένα δισεκατομμύριο - ή και τρισεκατομμύριο! Δεν πρόκειται να βαρεθεί και θα το κάνει μέσα σε λίγα μόνο δευτερόλεπτα. Είτε πρόκειται για μέτρημα, ή για ζωγραφική, ή για οτιδήποτε άλλο, οι υπολογιστές μπορούν να επαναλαμβάνουν ενέργειες εκατοντάδες - ή και δισεκατομμύρια - φορές.'
      2:
        image: notes/frozen2_2.jpg
        text: 'Στον προγραμματισμό, αυτά λέγονται βρόχοι. Βρόχος είναι η συνεχής επανάληψη του κώδικά σου. Στην επόμενη πίστα, ο στόχος σου είναι να βοηθήσεις την Άννα να φτιάξει ένα τετράγωνο με το μπλοκ "Επανάλαβε".'
      3:
        image: notes/frozen2_3.jpg
        text: 'Όσα μπλοκ κώδικα βάλεις μέσα στο μπλοκ "Επανάλαβε" θα επαναληφθούν διαδοχικά όσες φορές θέλεις.'
      4:
        image: notes/frozen2_4.jpg
        text: 'Για να σχεδιάσεις ένα τετράγωνο, μπορείς να χρησιμοποιήσεις το μπλοκ "Προχώρησε μπροστά" και το μπλοκ "Στρίψε δεξιά" 4 φορές. Αλλά είναι ευκολότερο να πεις στον υπολογιστή "Προχώρησε μπροστά" και "Στρίψε δεξιά" μία φορά και μετά να του πεις να επαναλάβει αυτές τις δύο ενέργειες 4 φορές. Για να το κάνεις αυτό, πρέπει να βάλεις τα μπλοκ "Προχώρησε μπροστά" και "Στρίψε δεξιά" μέσα σε μπλοκ "Επανάλαβε".'
      5:
        image: notes/frozen2_5.jpg
        text: 'Θυμήσου ότι μπορείς να αλλάζεις τον αριθμό στο μπλοκ "Επανάλαβε" όσο θέλεις, και οι ενέργειες μέσα στο μπλοκ αυτό θα επαναλαμβάνονται τόσες φορές όσες θέλεις.'
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Γεια, είμαι ο Chris Bosh. Είμαι επαγγελματίας μπασκετμπολίστας και έγραφα κώδικα όταν ήμουν στο Πανεπιστήμιο.
      2:
        image: notes/frozen3_2.jpg
        text: Μία από τις σημαντικότερες έννοιες της επιστήμης των υπολογιστών είναι ο ορισμός νέων εντολών. Οι περισσότερες γλώσσες προγραμματισμού δεν έχουν πάνω από 100 λέξεις (εντολές). Η τέχνη και η μαγεία είναι να ορίζεις τις δικές σου λέξεις μέσα από αυτό το βασικό λεξιλόγιο.
      3:
        image: notes/frozen3_3.jpg
        text: Μόλις διδάξεις σε έναν υπολογιστή πώς να κάνει μια ενέργεια χρησιμοποιώντας αυτή την ακολουθία εντολών, μπορείς να δώσεις ένα δικό σου όνομα σε μια ενέργεια ώστε να μπορείς εύκολα να την επαναλάβεις μετά. Όταν ορίσεις μια δική σου εντολή και της δώσεις όνομα, είναι αυτό που λέμε συνάρτηση.
      4:
        image: notes/frozen3_4.jpg
        text: Γεια, λέγομαι Jess. Όταν προγραμματίζεις με μπλοκ, χρησιμοποιείς συναρτήσεις αν υπάρχει ένα σύνολο εντολών που θες να χρησιμοποιήσεις πολλές φορές. Για παράδειγμα, έχεις γράψει κώδικα που δημιουργεί ένα τετράγωνο.
      5:
        image: notes/frozen3_5.jpg
        text: 'Μπορείς λοιπόν να ορίσεις μια συνάρτηση που λέγεται "φτιάξε ένα τετράγωνο".'
      6:
        image: notes/frozen3_6.jpg
        text: Τώρα έχεις ένα νέο μπλοκ το οποίο μπορείς να χρησιμοποιήσεις πολλές φορές για να φτιάξεις πολλά τετράγωνα.
      7:
        image: notes/frozen3_7.jpg
        text: Πολλά απλά σχήματα μπορούν να χρησιμοποιηθούν για τη δημιουργία πιο πολύπλοκων μοτίβων. Στην επόμενη δραστηριότητα, ο κώδικας που έγραψες για να φτιάξεις έναν κύκλο είναι διαθέσιμος ως νέα συνάρτηση που μπορεί να κάνει κύκλους διαφορετικού μεγέθους. Μπορείτε να τη χρησιμοποιήσετε για να βοηθήσετε την Έλσα να φτιάξει πολύπλοκα και όμορφα σχέδια στο χιόνι;
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: Θα δημιουργήσουμε παιχνίδια χρησιμοποιώντας την εφαρμογή Play Lab. Τα καλά παιχνίδια έχουν μια ιστορία και κάθε ιστορία έχει ηθοποιούς. Θα μάθουμε πώς να κάνουμε τους ηθοποιούς μας να μοιάζουν με μάγισσες, εξωγήινους και ζώα που μιλούν, κινούνται και αλληλεπιδρούν μεταξύ τους. Στο τέλος αυτού του σεμιναρίου, θα μπορείς να δημιουργείς τα δικά σου παιχνίδια και να τα μοιράζεσαι με τους φίλους σου.
      2:
        image: notes/playlab_intro_2.png
        text: Η οθόνη σου είναι χωρισμένη σε τρία κύρια μέρη. Στα αριστερά είναι ο χώρος του παιχνιδιού όπου το πρόγραμμά σου εκτελείται. Οι εντολές για κάθε επίπεδο είναι γραμμένες από κάτω.
      3:
        image: notes/playlab_intro_3.png
        text: Η μεσαία περιοχή είναι η εργαλειοθήκη και καθένα από αυτά τα πλακίδια είναι ένα κομμάτι κώδικα. Η άσπρη περιοχή στα δεξιά καλείται χώρος εργασίας και σε αυτή θα δημιουργήσουμε το πρόγραμμά μας.
      4:
        image: notes/playlab_intro_4.png
        text: 'Για να ξεκινήσεις, θα χρειαστεί να συνδέσεις τα πλακίδιά σου με το πορτοκαλί πλακίδιο "όταν εκτελείται". Μπορείς να συνδέσεις πολλαπλά πλακίδια μαζί σέρνοντάς τα έως ότου δεις την κίτρινη γραμμή και τότε αυτά θα ενωθούν απότομα μαζί.'
      5:
        image: notes/playlab_intro_5.png
        text: 'Σε αυτό το πρώτο πάζλ, ο ηθοποιός μας είναι ένας πιγκουίνος και θα τον κάνουμε να πει "Γεια σας" σέρνοντας το πλακίδιο "πες", ενώνοντάς το με το πλακίδιο "όταν εκτελείται" και πληκτρολογώντας "Γεια σας". Μπορούμε επίσης να κάνουμε τον πιγκουίνο να κινηθεί χρησιμοποιώντας τα πλακίδια "κινήσου δεξιά" και "κινήσου αριστερά". Μόλις βάλεις όλα τα πλακίδια στη θέση τους πάτησε το κουμπί "Εκτέλεση" ώστε να δεις τι προγραμμάτισες.'
      6:
        image: notes/playlab_intro_6.png
        text: Ξεκίνησε και στο τέλος θα μπορείς να δημιουργήσεις τα δικά σου παιχνίδια με όλα τα είδη παικτών που θα μπορούν να αλληλεπιδρούν, να είναι χαρούμενοι ή λυπημένοι, να κερδίζουν βαθμούς, ή να δημιουργούν εκρήξεις ή ακόμα να εξαφανίζουν ο ένας τον άλλον. Όλα εξαρτώνται από σένα και το παιχνίδι που θέλεις να φτιάξεις.
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: Τώρα, θα μάθουμε κάτι το οποίο όλοι οι προγραμματιστές παιχνιδιών χρησιμοποιούν καθημερινά. Θα μιλήσουμε για τα γεγονότα. Ένα γεγονός λέει στο πρόγραμμά σου να ακούει πότε συμβαίνει κάτι. Όταν αυτό το γεγονός συμβεί, τότε εκτελεί μια ενέργεια.
      2:
        image: notes/playlab_events_2.png
        text: Μερικά παραδείγματα γεγονότων είναι άκουσε για ένα κλικ του ποντικιού, για ένα πάτημα βέλους, ή ένα άγγιγμα στην οθόνη.
      3:
        image: notes/playlab_events_3.png
        text: 'Εδώ, θα κάνουμε το διαστημο ρομπότ να χαιρετά τους γήινους όταν ένας παίκτης κάνει κλικ πάνω του. Θα χρησιμοποιήσουμε το μπλοκ " και θα του συνδέσουμε το μπλοκ "πες". Όταν ο παίκτης κάνει κλικ στο διαστημο ρομπότ, ότι είναι συνδεμένο σε αυτό το "όταν πατηθεί" μπλοκ γεγονότων θα εκτελεστεί. Τι λέει ο εξωγήινος σου;'
      4:
        image: notes/playlab_events_4.png
        text: 'There are also "when arrow" blocks. If you link the "move" blocks to these, you can start to move your actors up, down, left, or right. Step by step, your game is getting more interactive.'
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: 'This is the "repeat forever" block. Anything inside this block will happen forever in the game.'
      2:
        image: notes/playlab_repeat_forever_2.png
        text: |-
          If we want an actor to do something repeatedly, without the player having to do anything, we'll put those blocks inside the "repeat forever" block.
      3:
        image: notes/playlab_repeat_forever_3.png
        text: In this next puzzle, our goal is to help the wizard patrol the boundaries of the kingdom, left and right continuously. Learning how the repeat commands works, will save you a ton of time later when you build your own game.
    C1_artist_intro:
      1:
        image: notes/C1_artist_intro_1.png
        text: These are your draw blocks. Use the correct one to move the artist where he needs to go to fill in the grey lines.
      2:
        image: notes/C1_artist_intro_2.png
        text: "These are jump blocks. When you use these, your artist moves but doesn't draw, so use these to jump to the next grey line."
    C1_bee_level_intro:
      1:
        image: notes/C1_bee_level_intro_1.png
        text: |-
          Aren't bees super cool? In this next set of puzzles, your goal is to help the bee get to the flowers and get nectar from the flowers and fly over to the honeycomb to make honey. You'll need to use the "get nectar" and the "make honey" blocks for this exercise.
      2:
        image: notes/C1_bee_level_intro_2.png
        text: 'Every flower has a different number of nectars: 1, 2, 3, or more. We know how much nectar is in the red flowers, by the little number in the corner. So be sure to get all the nectar from the flower before you move forward. Also, every honeycomb can only hold so much honey: 1, 2, 3, or more. So be sure to make as much honey as the honeycomb can hold.'
      3:
        image: notes/C1_bee_level_intro_3.png
        text: |-
          If you're able to get all the nectar and make all the honey, you succeed and go to the next level. Otherwise, you need to try this puzzle again. Play around a while and see what it feels like to "bee" a programmer!
    C1_bee_loops:
      1:
        image: notes/C1_bee_loops_1.png
        text: "A loop is a repetition of activity. So going into a hive to inspect, I look at a frame and then I put it back, so I repeat that same activity multiple times. It's looping around, doing the same activity multiple times."
      2:
        image: notes/C1_bee_loops_2.png
        text: |-
          In this level, we want the bee to collect three nectars from the flower. Instead of using three "get nectar" blocks, you're going to use the repeat block to get nectar three times. Hit "Run" and see if you got it right. Nice!
    C1_bigevent_unplugged:
      1:
        image: notes/C1_bigevent_unplugged_1.png
        text: "This lesson is called the big event. It's all about how we can control our programs and actually change the way a program runs on the fly using events, like the push of a button or the click of a mouse."
      2:
        image: notes/C1_bigevent_unplugged_2.png
        text: "For this lesson, you'll be controlled with a paper remote control. It's just like a real-live video game."
      3:
        image: notes/C1_bigevent_unplugged_3.png
        text: "An event is an action  that causes something to happen. It's like when you click the button on a mouse and a webpage loads. That's an event. When you touch your screen on a tablet to scroll, that's an event also. Events are a great way of letting the user direct your program whenever they need or want to."
      4:
        image: notes/C1_bigevent_unplugged_4.png
        text: 'Things happen that we all respond to. We feel hungry and we go to the fridge. We hear the mailman come and he puts our mail in the mailbox  and then we go get our mail. Those are just like the events of pushing a button or moving a joystick. They are something that happens that triggers us to do something.'
      5:
        image: notes/C1_bigevent_unplugged_5.png
        text: |-
          In video games, there's an event called "Update" and it happens 30 or 60 times a second. For videogame programmers that's almost more important as an event than the buttons or the joystick.
      6:
        image: notes/C1_bigevent_unplugged_6.png
        text: |-
          The main event we're watching for is that "Update" tick happening. And then we check the joystick in the tick. So we say, "Oh, has somebody pushed the button this frame? Yes or no?" Without events, the player couldn't move, you couldn't jump, you wouldn't be able to control what's going on. The videogame wouldn't be able to animate anything.
    C1_building_foundation:
      1:
        image: notes/C1_building_foundation_1.jpg
        text: "In sand sculpture you've got to know that failure is part of the program. But if you persist, it's just going to get nothing but better and more exciting for you. Persistence is the name of the game. Stay with it, you'll love it."
      2:
        image: notes/C1_building_foundation_2.jpg
        text: "This lesson is called building a foundation. In this lesson, we'll work on a task that is meant to be really difficult. You will figure out how to make a structure at least as tall as one of these cups and it's got to be strong enough to hold the weight of a book."
      3:
        image: notes/C1_building_foundation_3.jpg
        text: "There might be times that our creation doesn't work out. There might be times that we get frusrated and want to give up. There might be a lot of those moments. But if we keep on trying, give it our best shot over and over again, then we're sure to get it before long."
      4:
        image: notes/C1_building_foundation_4.jpg
        text: "Persistence is all about hanging in there when you really want to give up. If you want to create something new and different, there's going to be a lot of failures along the way."
      5:
        image: notes/C1_building_foundation_5.jpg
        text: "The trick to persistence is choosing to keep on going and learn from your failures instead of quitting because you're frustrated. Frustration actually just means there's something wonderful around the corner. So don't quit before you get to it. Wooo!"
    C1_getting_loopy:
      1:
        image: notes/C1_getting_loopy_1.png
        text: "Hi, my name is Miral Kotb and I'm the creator of Iluminate. In my work, there is something we use in both dances and in programming lightsuits. And that is loops! Loops are repeating an action over and over."
      2:
        image: notes/C1_getting_loopy_2.png
        text: "When you repeat something multiple times, like my actions to keep the hula hoop spinning, I'm performing a loop of that action. This is a loop. This is a loop. And this is a loop."
      3:
        image: notes/C1_getting_loopy_3.png
        text: "Today we're going to have a dance party. We'll act out loops with a new dance. The Iteration. We're going to learn about loops using a dance. You will learn a couple of easy steps and repeat them over and over to complete the dance."
      4:
        image: notes/C1_getting_loopy_4.png
        text: Here are the steps you need to learn. Clap your hands. Put your hands behind your head. Put your hands on your waist. Lift your left hand up. Lift your right hand up. Pretty simple, right? You will discover that you can shorten the directions by putting some dance steps in loops.
      5:
        image: notes/C1_getting_loopy_5.png
        text: "We actually do use loops in our dancing. The dancers are wearing computers, all in the same network. I might loop the lights through to the same dancers over and over again. In the loop I might have an iteration where I'll say you want to go loop through these six dancers over and over again and then within the loop you want to increase the speed of the light. And that's all created through loops. Loops are important in computer science because they make our work shorter and easier."
    C1_happy_maps_unplugged:
      1:
        image: notes/C1_happy_maps_unplugged_1.png
        text: "This lesson is called Happy Maps. Today we're gonna help our furry little friend Flurb get to her fruit."
      2:
        image: notes/C1_happy_maps_unplugged_2.png
        text: "Make your Flurb go to your fruit. To do this you'll need to figure out which way the Flurb needs to go and direct her with arrows. In order for the Flurb to get to the apple, what direction does the Flurb have to go? Line to make it go up."
      3:
        image: notes/C1_happy_maps_unplugged_3.png
        text: To get it there you circle the direction that it has to go.
      4:
        image: notes/C1_happy_maps_unplugged_4.png
        text: "Create your algorithm by gluing arrows next to the map that you're trying to solve. The second one it's the same but it's going down."
      5:
        image: notes/C1_happy_maps_unplugged_5.png
        text: "It's like programming with paper. And that's it!"
    C1_maze_debugging:
      1:
        image: notes/C1_maze_debugging_1.png
        text: "Debugging is finding and fixing problems. There are lots of ways to debug problems. One of the easiest is to move step by step until where you find where something goes wrong. Here I'm trying to do a back handspring on the beam but I keep falling off."
      2:
        image: notes/C1_maze_debugging_2.png
        text: "I walked through each part step by step and realized where my mistake was. I wasn't putting my hands on the beam correctly. So I tried another back handspring on the beam with my new hand position and I got it. I was really glad I debugged my back handspring."
      3:
        image: notes/C1_maze_debugging_3.png
        text: "To learn about debugging, we start with a set of blocks already on the stage. You'll notice that these blocks won't get you to the goal. We need to debug the solution and fix it. What went wrong? You'll notice that you needed to keep going west one more block."
      4:
        image: notes/C1_maze_debugging_4.png
        text: "Let's fix this by adding another west block and hitting run to see if you got it right. Yay, you got it!"
    C1_maze_intro_sequencing:
      1:
        image: notes/C1_maze_intro_sequencing_1.png
        text: For this puzzle, you need to get the bird to the pig. Look at the puzzle and see what directions it needs to take.
      2:
        image: notes/C1_maze_intro_sequencing_2.png
        text: |-
          You need to drag the blocks over from the toolbox to the workspace. Make sure it's under the "when run" block and when you think you've got the right solution, then you can click "Run" and watch the bird go to the pig.
    C1_maze_loops:
      1:
        image: notes/C1_maze_loops_1.png
        text: "One that computers are really good at is repeating commands. As a person, you'd get really bored if you had to do the same thing lots and lots of times in a row. But a computer can do the same thing millions or even billions of times and not get bored and be able to carry that out really well."
      2:
        image: notes/C1_maze_loops_2.png
        text: For example, if I wanted to wish everyone on Facebook a happy birthday by sending them an email, it might take me more than century to actually write out all those emails to everyone. But with just a few lines of code, I can have a system send an email to everyone on Facebook wishing them a happy birthday.
      3:
        image: notes/C1_maze_loops_3.png
        text: 'To get the bird to the pig in this level... rather than drag three North blocks on to the workspace, you will use the "repeat" block. Drag the "repeat" block on to the workspace and enter the number 3. Then drag the "move North" block into the "repeat" block and hit "Run" to see if you got it right. Congratulations, you got it!'
    C1_moveitmoveit_unplugged:
      1:
        image: notes/C1_moveitmoveit_unplugged_1.png
        text: "This lesson is called move it, move it. Together we're going to write a program to get our friends from the starting with the compass rose to the smiley face goal."
      2:
        image: notes/C1_moveitmoveit_unplugged_2.png
        text: "But the smiley is face down and only one person knows how to get there. Let's get this program started."
      3:
        image: notes/C1_moveitmoveit_unplugged_3.png
        text: "A program is an algorithm that has been coded into something that can be run by a machine. Most of us think of a program as something that we write for a computer. Programs are really good for that but they're also helpful in other places. You can make your own game or even program a robot to do things for you."
    C1_going_places_safely:
      1:
        image: notes/C1_going_places_safely_1.png
        text: |-
          My name is Jeremiah. Hi! I am seven years old. I love playing on my mom's computer but I always get permission first. "Mom, can I go on the computer? Sure honey!"
      2:
        image: notes/C1_going_places_safely_2.png
        text: "I love my mom's computer because I can go on the Internet. The Internet is kind of like your neighborhood. You can visit cool places, you can talk to family and friends and you can learn lots of new things."
      3:
        image: notes/C1_going_places_safely_3.png
        text: "Yesterday, I visited a zoo that's near my house. I saw a baby zebra. I took her picture and changed the color of her stripes, then added a hat and added it to my collection of wacky animals. Awesome! Later, I went to a place far far away. I visited Kenya. That's a country in Africa. Lots of zebras live there."
      4:
        image: notes/C1_going_places_safely_4.png
        text: |-
          Sometimes on the Internet I talk to people I know, like my grandma who lives in another state. Hi grandma! She's making me cookies that she'll send me for my birthday. "Yummy, I wish the Internet had smellorama!" I can talk to different people on the Internet, like my cousin but I only talk to people I know.
      5:
        image: notes/C1_going_places_safely_5.png
        text: What I like most on the interent is that I get to play fun games. Score! I also like to draw and create new things and share it with my friends. Cool! Sometimes I visit websites where I learn new things but I always stick to websites that are just right for me. Wow, dinosaurs!
      6:
        image: notes/C1_going_places_safely_6.png
        text: 'The Internet is a super fun place. But just like when you cross a street in your neighborhood, you also have to be careful when you go online. Here are three rules to remember. Rule number 1: Always ask your parents first. Rule number 2: Only talk to people you know. Rule number 3: Stick to places that are just right for you.'
      7:
        image: notes/C1_going_places_safely_7.png
        text: "Wow, that was fun! Dinnertime. I'm logging off now. I can't wait to log on again to see where I can visit next."
    C1_pair_programming:
      1:
        image: notes/C1_pair_programming_1.png
        text: "Today we're going to learn about Pair Programming. In pair programming you work as a team. Why should two people use one computer? Because two heads are better than one. In pair programming you and your partner are going to sit down together at one computer and you are both going to work on the same project."
      2:
        image: notes/C1_pair_programming_2.png
        text: "In pair programming, one person is the driver and the other person is the navigator, just like driving a car. The driver sits at the computer and is the one using the keyboard and mouse or touchscreen and controlling the main actions of the computer. The other person is the navigator. The navigator helps the driver by answering the driver's questions and pointing out potential problems or mistakes."
      3:
        image: notes/C1_pair_programming_3.png
        text: "Communication is key to successful pair programming. No insults, be respectful, don't be a bossy navigator, because nobody likes a backseat driver. You and your partner should always be talking. The driver can explain what she or he is doing. And the navigator can help suggest what to do next."
      4:
        image: notes/C1_pair_programming_4.png
        text: The navigator should be thinking about the big picture and the driver focuses on the details. Both roles are important. Pair programming is all about working together as a team.
    C1_planting_seed:
      1:
        image: notes/C1_planting_seed_1.png
        text: "This lesson is called planting a seed and it's going to help us understand algorithms. Algorithms are specific instructions that explain the order in which to do something. Even everyday things like eating breakfast or brushing your teeth are algorithms that require small steps to get a job done."
      2:
        image: notes/C1_planting_seed_2.png
        text: "Computers can be really smart but they can only understand you if you tell them exactly what you want step by step. The great thing about algorithms is that if you follow the instructions in order, you can do something that you didn't know how to do ahead of time. It's like following a recipe."
      3:
        image: notes/C1_planting_seed_3.png
        text: "Today we're going to plant our own seeds using an algorithm. Create your own algorithm by cutting apart the pictures. Select the pictures that show steps in planting a seed and arrange those pictures in the correct order."
      4:
        image: notes/C1_planting_seed_4.png
        text: "Now, it's time for you to see if your algorithm works. Follow the steps in the algorithm very carefully. Are they in the correct order? Did you succeed in planting a seed by following the algorithm? It's like programming with pictures!"
      5:
        image: notes/C1_planting_seed_5.png
        text: "When we want to make chocolate, there are many big steps to that process and each of those big steps has a set of smaller steps and there are different recipes or algorithms depending on how we want the chocolate to taste. Each step is important, even the small ones, so that without one step, the rest of them cannot be completed. Creating algorithms that others can understand is really important. That's why each step has to be written down so that no matter who does it, the result is the same."
    C1_playlab_storytelling:
      1:
        image: notes/C1_playlab_storytelling_1.png
        text: Time to get creative and use your coding skills to tell a story. Your story will have actors and you will be able to make these actors talk and interact with each other. Start thinking of what kind of story you want to tell.
      2:
        image: notes/C1_playlab_storytelling_2.png
        text: |-
          The cat's always been afraid of the dog and what if the cat figures out that the dog is trying to be nice? The "when run" block starts everything. The "move" block will move your character and the "say" block will make your character say whatever you type.
      3:
        image: notes/C1_playlab_storytelling_3.png
        text: 'This is the "when actors collide" block which you can link up to the other blocks.'
      4:
        image: notes/C1_playlab_storytelling_4.png
        text: 'I was making the dog come over and say "Hi" but then the cat got scared so it ran away. "Ahh" If there was more time, it would have been a happy ending. The end!'
    C1_spelling_bee_intro:
      1:
        image: notes/C1_spelling_bee_intro_1.png
        text: This is the spelling bee level. Use the puzzle pieces to move the bee. As it moves, it will collect letters to spell words.
      2:
        image: notes/C1_spelling_bee_intro_2.png
        text: "See if you can spell the word they give you in the box below the stage. But bee careful! Moving the wrong direction will add letters you don't want."
    C1_zuck_repeat_loop:
      1:
        image: notes/C1_zuck_repeat_loop_1.png
        text: "One that computers are really good at is repeating commands. As a person, you'd get really bored if you had to do the same thing lots and lots of times in a row. But a computer can do the same thing millions or even billions of times and not get bored and be able to carry that out really well."
      2:
        image: notes/C1_zuck_repeat_loop_2.png
        text: For example, if I wanted to wish everyone on Facebook a happy birthday by sending them an email, it might take me more than century to actually write out all those emails to everyone. But with just a few lines of code, I can have a system send an email to everyone on Facebook wishing them a happy birthday.
      3:
        image: notes/C1_zuck_repeat_loop_3.png
        text: "In this example, your goal is going to be to move the bird to get the pig. Now, we're going to be able to use the repeat block in order to be able to do this very easily. You can either do this by giving the computer a move forward command five times in order to advance the bird one step each time to the pig or you can just tell the computer to move forward once, and then tell it to repeat that five times and it'll do the same thing."
      4:
        image: notes/C1_zuck_repeat_loop_4.png
        text: 'In order to do this, you drag your move forward command and then you put it inside the repeat block. And you can click on it and tell it how many times you  to repeat the block to tell it how many steps you want it to take forward.'
      5:
        image: notes/C1_zuck_repeat_loop_5.png
        text: "One more thing is you can put as many commands as you want inside the repeat block. So in this example, you're telling it to move forward and turn left, which it'll do five times. Have fun!"
    C2_artist_intro:
      1:
        image: notes/C2_artist_intro_1.png
        text: "You wouldn't even qualify for the race if you don't have people who are proficient in computer science because of how much data the cars collect and the necessity to be able to have people that can write programs to figure out how you continue to figure out how to build performance."
      2:
        image: notes/C2_artist_intro_2.png
        text: "In these puzzles, you'll be an artist that uses a pencil to draw different shapes. Wherever your artist goes, it will draw a line behind you."
      3:
        image: notes/C2_artist_intro_3.png
        text: "To move around the canvas, you'll use the move forward block. Here the move forward block says move forward by 100 pixels. When we hit run, what happens? The artist moves forward a certain amount and that amount is 100 pixels. Pixels are basically very tiny squares on your computer screen."
      4:
        image: notes/C2_artist_intro_4.png
        text: The other block we have in this puzzle says turn right by 90 degrees. And when we drag that out that makes our artist turn a certain amount. So you can play around with how far you want the artist to turn. This is a 90 degree turn.
      5:
        image: notes/C2_artist_intro_5.png
        text: And this is a 120 degree turn. And remember, you can change these values by clicking the arrows next to the numbers for pixels and degrees. Enjoy drawing with your artist!
    C2_bee_conditionals:
      1:
        image: notes/C2_bee_conditionals_1.png
        text: This is the conditional block. It says IF there is nectar or honey that is less than, equal to or greater than a number, THEN do something.
      2:
        image: notes/C2_bee_conditionals_2.png
        text: "This is useful when we don't know how much nectar or honey to get, as we see here with this question mark."
      3:
        image: notes/C2_bee_conditionals_3.png
        text: "In this example, we're going to say IF the purple flower has nectar greater than 0, get nectar. That will tell our bee to keep getting nectar as long as it's there. Ta-dah!"
    C2_binary_bracelets:
      1:
        image: notes/C2_binary_bracelets_1.png
        text: This is the binary bracelets lesson. We are going to code our initials on a bracelet we can wear and show all our friends!
      2:
        image: notes/C2_binary_bracelets_2.png
        text: Binary is a way of representing information using only two options. Sometimes people think of this as only 1s and 0s. But you can represent binary with combinations of on or off, up and down, in and out or really any set of opposites.
      3:
        image: notes/C2_binary_bracelets_3.png
        text: "Hi, I'm Orion and I program robots here at Play-im. All computer and robot brains at their most fundamental level are little electronic gates. When the gate is open, electricity can flow through and when it's closed, electricity can't."
      4:
        image: notes/C2_binary_bracelets_4.png
        text: "An example of binary on the robot is the robot's eyes. The robot's eyes are LEDs and those are lights that are either on or off. It's a binary system, one or the other. We can use the lights to represent binary numbers. If we have a set of robots, we can say that the first robot is the 1s place and the second robot is the 2s place, the third robot is the 4s place and so on. That's how you represent a binary number. The robots will do it with their binary eyes and count it out for you."
    C2_conditionals_with_cards:
      1:
        image: notes/C2_conditionals_with_cards_1.png
        text: This lesson is called conditionals with cards. Every day you make decisions based on what you see and hear.
      2:
        image: notes/C2_conditionals_with_cards_2.png
        text: "I want to walk to the park but first I have to decide whether I should bring an umbrella or not. So I look out the window. If it's cloudy, I'm going to take my umbrella. Else, I'll take some sunglasses. I think I'd better take the umbrella. What I see and hear determines what I take to the park."
      3:
        image: notes/C2_conditionals_with_cards_3.png
        text: |-
          Conditionals are used in games too. Today we're going to practice using conditionals with a card game. In this game, the card that I draw determines what my friends are going to do. If I draw a seven, everyone claps. Else, everyone says "awww." Let's try it! "Awww" "cheers"
      4:
        image: notes/C2_conditionals_with_cards_4.png
        text: I bet you can make up games that are even more fun with conditionals. Give it a try! Conditionals are what make computers seem smart. A computer program that includes conditionals can react to the user and change its course of action.
      5:
        image: notes/C2_conditionals_with_cards_5.png
        text: "Think about your favorite video game. Do you earn more points for some actions than you do for others? This occurs because the computer is using conditionals. It's the way a computer makes a decision. How about, if you hit the target, you earn ten points. Else, you lose three. When you know how conditionals work, you can create all kinds of exciting games."
    C2_artist_debugging:
      1:
        image: notes/C2_artist_debugging_1.png
        text: Here we already have some blocks out in our work space. But there is something wrong.
      2:
        image: notes/C2_artist_debugging_2.png
        text: "Let's debug this code by slowing down the speed and watching it as it goes through each block step by step."
      3:
        image: notes/C2_artist_debugging_3.png
        text: "Oh, there's the problem! The cat's whiskers are 75 pixels long, not 25."
    C2_bee_debugging:
      1:
        image: notes/C2_bee_debugging_1.png
        text: "Have you ever heard of debugging a program? This is the way you figure out what's not working. When you debug code, you identify and remove errors."
      2:
        image: notes/C2_bee_debugging_2.png
        text: "Here we're given a few blocks already in our workplace. We're going to use the step button to walk through the blocks, step by step, to see if this is the right solution and where we may need to fix it."
      3:
        image: notes/C2_bee_debugging_3.png
        text: "Looks like there's our problem! We need one more move forward block. The step button helps us debug our problem by identifying where the error is so we can fix it."
    C2_digital_footprint:
      1:
        image: notes/C2_digital_footprint_1.png
        text: "On your head you hold your hat and your smarts will tell you where you're at and to think about the zoo, and to nod hello to you and you! Use your head when you're online to keep what's yours inside your mind and to know how to be safe, how to give your life some private space! From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      2:
        image: notes/C2_digital_footprint_2.png
        text: "Use your heart to grow and grow, and to give yourself a healthy glow, and to make a valentine, tell someone that you'll be mine! Use your heart when you're online, feel what's right and always kind, and show your friends respect, to be fair and nice on the Internet. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      3:
        image: notes/C2_digital_footprint_3.png
        text: "Use your arms to hug your pet, to keep your clothes from getting wet, and to wear your favorite sleeves and to help you fly and make believe. Use your arms when you're online, to take break and balance time and leave your tech behind and to find yourself a tree to climb. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      4:
        image: notes/C2_digital_footprint_4.png
        text: "Use your gut to store your food, and to listen to its growling mood, to make a belly flop, and to feel the gas in soda pop. Use your gut when you're online, to know to watch for certain signs, and to let it guide the way and tell you when it's not ok. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      5:
        image: notes/C2_digital_footprint_5.png
        text: "So think with your head, and feel with your heart, balance with your arms, listen to your gut, online. Use your legs to run and kick, and to jump and bounce on a pogo stick, and to dance around the block, and to skip along in your smelly socks. Use your legs when you're online, to stand up to bullies who cross the line, and remember to stand tall, be nice to creatures great and small."
      6:
        image: notes/C2_digital_footprint_6.png
        text: From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online! So think with your head, and feel with your heart, balance with your arms, listen to your gut, stand up with your legs. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!
    C2_digital_footprint_v2:
      1:
        image: notes/C2_digital_footprint_v2_1.png
        text: Everytime you go online, you leave a footprint that can be searched, copied, shared, broadcast and is permanent. What kind of digital footprint are you leaving? What kind of digital footprint do you want to leave?
    C2_graph_paper:
      1:
        image: notes/C2_graph_paper_1.png
        text: |-
          This lesson is called "Graph Paper Programming" and it's all about algorithms. Today we're going to learn how to write programs that show each other how to recreate simple black and white images, using only hand drawn arrows.
      2:
        image: notes/C2_graph_paper_2.png
        text: "An algorithm is a list of instructions for completing a task. We'll follow this set of instructions to make the bowl. Algorithms are really helpful when you need someone else to understand how to do something."
      3:
        image: notes/C2_graph_paper_3.png
        text: "If you're writing an algorithm for a computer, you have to break it down to little tiny steps. So finish this row and go to the next, then the next one, and you'll be done."
      4:
        image: notes/C2_graph_paper_4.png
        text: I use algorithms in my work. If I write down all of the steps I can recreate that same piece again, or I can teach someone else to do it. Put the glass in the kiln, fuse it together, follow the rest of the instructions to make the bowl. Algorithms give you a road map for getting something done.
    C2_artist_loops:
      1:
        image: notes/C2_artist_loops_1.png
        text: Here we are going to use the repeat block to help us save steps when we are programming our artist. We already have some blocks out on our stage but they are just there to get us started.
      2:
        image: notes/C2_artist_loops_2.png
        text: To loop those blocks four times to draw the whole square, we just drag out the repeat block and put the moveforward and turn right blocks inside the repeat block. When we hit run, the artist will repeat those steps four times to complete the square.
    C2_bee_loops:
      1:
        image: notes/C2_bee_loops_1.png
        text: "A loop is a repetition of activity. Going into a hive to inspect, I look at a frame, and then I put it back. I repeat that same activity multiple times. It's looping around, doing the same activity multiple times."
      2:
        image: notes/C2_bee_loops_2.png
        text: "This is the repeat block. Whatever you put inside the repeat block will repeat those actions the number of times that you tell it to. For example, in this level, rather than drag out move forward and get nectar three times, we're going to just drag them out once each and repeat the action three times. That made it easy!"
    C2_maze_intro:
      1:
        image: notes/C2_maze_intro_1.png
        text: "Usually programming is all in text but we'll use Blockly which uses visual blocks that you drag and drop to write programs. Under the hood, you're still creating code. To start off, we're going to build code for a program that will help this Angry Bird move through a maze to get to the evil pigs that stole its eggs."
      2:
        image: notes/C2_maze_intro_2.png
        text: "Blockly is split into three main parts. On the left is the bird's maze, where your program will run. The instructions for each level are written below the maze. This middle area is the toolbox and each of these blocks is a command that the bird can understand. The white space on the right is called the workspace and this is where we'll build our program."
      3:
        image: notes/C2_maze_intro_3.png
        text: 'If I drag the move block to our work space and press "Run", what happens? The bird moves forward one box on the grid. And what if I want the bird to do something after it moves forward one box? I can add another block to our program.'
      4:
        image: notes/C2_maze_intro_4.png
        text: |-
          I'm going to choose the "turn right" block and I'll drag it under my move block until the yellow arrow appears. Then I'll drop it and the two blocks will snap together. When I press "Run" again,  the bird will perform the commands that are stacked from top to bottom on our work space.
      5:
        image: notes/C2_maze_intro_5.png
        text: "If you ever want to delete a block, just remove it from the stack and drag it to the trash can. After you've hit run, you can always hit the reset button to get the bird back to the start. Now let's get those pigs!"
    C2_paper_airplanes:
      1:
        image: notes/C2_paper_airplanes_1.png
        text: This lesson is called Real Life Algorithms. Algorithms describe things that people do everyday. Cookie recipes and directions for building a birdhouse are both everyday algorithms.
      2:
        image: notes/C2_paper_airplanes_2.png
        text: "Today we're gonna make, create, and test an algorithm for a paper airplane. But first, we need to break this big project into easy to follow small steps. For making a paper airplane, we need to decide what steps to take and in what order to take them."
      3:
        image: notes/C2_paper_airplanes_3.png
        text: "You'll create your algorithm by first cutting apart the pictures. Next, you'll select the 6 pictures that show the steps needed to make a paper airplane and arrange those pictures in the correct order. After you have everything in order, you will trade algorithms with another student team to test out the algorithm to see if the algorithm works. A well designed algorithm is super important to making the best paper airplane."
      4:
        image: notes/C2_paper_airplanes_4.png
        text: "When we want to make chocolate, there are many big steps to that process. And each of those big steps has its own set of smaller steps. And there are different recipes, or algorithms, depending on how we want the chocolate to taste. Each step is important, even the small ones. So without one step, the rest of them cannot be completed. Creating algorithms that others can understand is really important. That's why each step has to be written down, so no matter who does it, the result is the same."
    C2_playlab_createastory:
      1:
        image: notes/C2_playlab_createastory_1.png
        text: Μέχρι τώρα έφτιαχνες μια κινούμενη εικόνα ή μια ιστορία που έκανε το ίδιο πράγμα κάθε φορά. Τώρα μπορείς να φτιάξεις ένα διαδραστικό παιχνίδι που μπορείς κι εσύ να παίξεις!
      2:
        image: notes/C2_playlab_createastory_2.png
        text: 'Υπάρχει το μπλοκ "όταν το βέλος" και το μπλοκ "μετακίνησε τον ηθοποιό". Μπορείς να συνδυάσεις αυτά τα μπλοκ για να μετακινείς τους ηθοποιούς με τα βελάκια.'
    C2_relay_programming:
      1:
        image: notes/C2_relay_programming_1.png
        text: "Today we're going to do relay programming. It's all about programming under pressure and debugging the mistakes that sometimes happen when you work really quickly or in teams. We'll use graph paper programming to simulate coding, and use relay races to simulate having a deadline."
      2:
        image: notes/C2_relay_programming_2.png
        text: "In relay programming, teams will be racing to finish a graph paper program. You have to check your teammate's work, or debug it, fix it if there's a mistake, add your arrow, and run back and tag your teammate."
      3:
        image: notes/C2_relay_programming_3.png
        text: Programmers use debugging a lot to find and fix problems in their algorithms or code. There are lots of ways to debug problems. One of the easiest is to move step by step until you find where something goes wrong, then fix it.
      4:
        image: notes/C2_relay_programming_4.png
        text: "Here, I'm trying to do a back handspring, but I keep falling off. I walk through each part, step by step, and realize where my mistake was. My coach showed me I wasn't putting my hands on the beam correctly. So I tried another back handspring on the beam with my new hand position, and I stuck it! I was really glad I debugged my back  handspring. We figured it out! Debugging is finding and fixing problems. Nice, good job!"
    C2_zuck_repeat_loop:
      1:
        image: notes/C2_zuck_repeat_loop_1.png
        text: "One thing that computers are really good at is repeating commands. As a person, you'd get really bored if you had to do the same thing lots of times in a row. But a computer can do the same thing millions or even billions of times, and not get bored and be able to carry that out really well."
      2:
        image: notes/C2_zuck_repeat_loop_2.png
        text: "So for example if I wanted to wish everyone on Facebook a happy birthday by sending them an email, it might take me more than a century to actually write out all of those emails to everyone. But with just a few lines of code, I can have a system send an email to everyone on Facebook wishing them a happy birthday. So that's what loops are, and why they're valuable, and something that computers can do very well."
      3:
        image: notes/C2_zuck_repeat_loop_3.png
        text: |-
          In this example your goal is going to be to move the bird to get the pig.  Now we're gonna be able to use the "repeat" block in order to be able to do this very easily. You can either do this by giving the computer a "move forward" command five times in order to advance the bird one step each time to the pig.
      4:
        image: notes/C2_zuck_repeat_loop_4.png
        text: 'Or you can just tell the computer to "move forward" once, and then tell it to "repeat" that 5 times, and it will do the same thing. So in order to do this you drag your "move forward" command, and then you put it inside the "repeat" block.And you can click on it and tell it how many times you want to repeat the block to tell it how many steps you want it to take forward.'
      5:
        image: notes/C2_zuck_repeat_loop_5.png
        text: |-
          Now one more thing is you can put as many commands as you want inside the "repeat" block. So in this example you're telling it to move forward and turn left, which it will do five times. All right good job and have fun!
    C3_artist_functions:
      1:
        image: notes/C3_artist_functions_1.png
        text: "One of the great things in computer programming is once you've taught a computer how to do an action, you can call that function again. You give it a name and then you can call it. That's really like extending the language."
      2:
        image: notes/C3_artist_functions_2.png
        text: "In the program we built, we learned how to draw a square by moving and turning four times. We can take that function and give it a name, draw a square, so that any time we want to do that, we simply say draw a square and it will go back and invoke that function, that code. It will get done for us. We've added that concept to our programming language."
    C3_artist_intro:
      1:
        image: notes/C3_artist_intro_1.png
        text: "You wouldn't even qualify for the race if you don't have people who are proficient in computer science because of how much data the cars collect and the necessity to be able to have people that can write programs to figure out how you continue to figure out how to build performance."
      2:
        image: notes/C3_artist_intro_2.png
        text: "In these puzzles, you'll be an artist that uses a pencil to draw different shapes. Wherever your artist goes, it will draw a line behind you."
      3:
        image: notes/C3_artist_intro_3.png
        text: "To move around the canvas, you'll use the move forward block. Here the move forward block says move forward by 100 pixels. When we hit run, what happens? The artist moves forward a certain amount and that amount is 100 pixels. Pixels are basically very tiny squares on your computer screen."
      4:
        image: notes/C3_artist_intro_4.png
        text: The other block we have in this puzzle says turn right by 90 degrees. And when we drag that out that makes our artist turn a certain amount. So you can play around with how far you want the artist to turn. This is a 90 degree turn.
      5:
        image: notes/C3_artist_intro_5.png
        text: And this is a 120 degree turn. And remember, you can change these values by clicking the arrows next to the numbers for pixels and degrees. Enjoy drawing with your artist!
    C3_artist_nested_loops:
      1:
        image: notes/C3_artist_nested_loops_1.png
        text: "When you put a loop inside of another loop, we call that a nested loop. For example, here we're given the code already to draw one triangle with sides of length 100 pixels using the repeat times block set to three, once for each side of a triangle."
      2:
        image: notes/C3_artist_nested_loops_2.png
        text: "But we want to draw six triangles. In order to do that, we're going to take that loop and place it inside of another repeat times block. Pretty cool!"
    C3_bee_conditionals:
      1:
        image: notes/C3_bee_conditionals_1.png
        text: This is the conditional block. It says IF there is nectar or honey that is less than, equal to or greater than a number, THEN do something.
      2:
        image: notes/C3_bee_conditionals_2.png
        text: "This is useful when we don't know how much nectar or honey to get, as we see here with this question mark."
      3:
        image: notes/C3_bee_conditionals_3.png
        text: "In this example, we're going to say IF the purple flower has nectar greater than 0, get nectar. That will tell our bee to keep getting nectar as long as it's there. Ta-dah!"
    C3_debugging_bee:
      1:
        image: notes/C3_debugging_bee_1.png
        text: "Have you ever heard of debugging a program? This is the way you figure out what's not working. When you debug code, you identify and remove errors."
      2:
        image: notes/C3_debugging_bee_2.png
        text: "Here we're given a few blocks already in our workplace. We're going to use the step button to walk through the blocks, step by step, to see if this is the right solution and where we may need to fix it."
      3:
        image: notes/C3_debugging_bee_3.png
        text: "Looks like there's our problem! We need one more move forward block. The step button helps us debug our problem by identifying where the error is so we can fix it."
    C3_bee_functions:
      1:
        image: notes/C3_bee_functions_1.png
        text: One of the most important concepts in computer science is how to define new commands, how to add your own words to a computer language. Most computer languages have only about one hundred words or commands. The art and magic is in defining your own new words out of these building blocks.
      2:
        image: notes/C3_bee_functions_2.png
        text: "We do this all the time in sports. For example, in basketball, you start by learning how to dribble, how to do a lay-up, how to rebound. Once you've learned these really basic moves, you learn new moves and put together these building blocks, like a pick and roll or give and go. You can then go from there to do more complex plays. Once you learn that play and give it a name, everybody on the team knows how to do it."
      3:
        image: notes/C3_bee_functions_3.png
        text: "Similarly once you've taught a computer how to do an action once using these sequences of commands, you can make up your own name for that action so it's easy to repeat it later. When you define your own command and give it a name, that's called a function. Now we're going to use functions to help the bee."
      4:
        image: notes/C3_bee_functions_4.png
        text: "In this example, our function is called get 2 nectar, this green block right here. We know what get 2 nectar does by looking at this grey box which is the function definition. If we look inside there, the get 2 nectar is going to get nectar and then get nectar again. Always look at what's inside the grey box so that you know what these green function blocks can do."
    C3_bee_nested_loops:
      1:
        image: notes/C3_bee_nested_loops_1.png
        text: "Now we're going to use nested loops with the bee. We're given some starter code which tells the bee to move forward and get nectar three times and then turn right. Let's take that whole piece of code and nest it inside another repeat block and set to repeat three times. Done!"
    C3_bounce:
      1:
        image: notes/C3_bounce_1.png
        text: "You're going to be creating your very own bounce game that you'll be able to share with your friends! How cool!"
      2:
        image: notes/C3_bounce_2.png
        text: To get started, we have to link up the paddle controls to the arrow keys on our keyboard.
      3:
        image: notes/C3_bounce_3.png
        text: "We can do this by linking the when left arrow block to the move left block and the when right arrow block to the move right block. Give it a go and you'll be programming your own bounce game in no time!"
    C3_computational_thinking:
      1:
        image: notes/C3_computational_thinking_1.png
        text: "This lesson is computational thinking. Sometimes learning a new game can be tough, right? At first it might seem really confusing and sometimes, there's no one there to teach you the rules, so you have to figure it out on your own."
      2:
        image: notes/C3_computational_thinking_2.png
        text: "The good news is that you can get better at figuring things out on your own when you know a few thinking tricks. These tricks are unique ways for looking at and solving problems. In this lesson, you'll learn about four tricks and practice them with your friends to figure out the rules to a game."
      3:
        image: notes/C3_computational_thinking_3.png
        text: "When you break down a big problem into smaller pieces, you're using your brain to decompose the big problem. Once we've decomposed the big problem into several smaller problems, we can go on to our next trick, which is called pattern match."
      4:
        image: notes/C3_computational_thinking_4.png
        text: "That's when we look for similarities between things. Once I find the things that are the same, I can figure out what things are different. When I remove those differences, that's called abstraction."
      5:
        image: notes/C3_computational_thinking_5.png
        text: "After I have figured out the steps to solving a problem, I can put those steps in a specific order called an algorithm so that anyone can use my directions to solve that problem. We're going to use these four steps to figure out how to play the game with no rules. By the end of the game, you'll be able to play something that looks like this!"
    C3_crowdsourcing:
      1:
        image: notes/C3_crowdsourcing_1.png
        text: "This lesson is called crowdsourcing. In this lesson we'll use a deck of cards to learn about how much easier some things can be to do in groups instead of trying to do them all alone. So grab some friends and make something awesome. Crowdsourcing is getting help from a large group of people to finish something faster."
      2:
        image: notes/C3_crowdsourcing_2.png
        text: In computer science, we use crowdsourcing all the time. Thousands of amateurs and professionals link their computers together to search through billions and billions of pieces of information. Looking for things like the next Marsenne prime number, or even possible alien communications.
      3:
        image: notes/C3_crowdsourcing_3.png
        text: "When you see a movie, each second of the movie is 24 individual pictures, we call those frames. So every one of those pictures needs to be created and rendered and put all together. My team and I, we're all software developers. We all work together to create a piece of software that actually creates an image, creates the final image that you see on screen. That's a tool that artists and other developers can use as part of their teamwork and their process to be able to create the images that they want on screen."
      4:
        image: notes/C3_crowdsourcing_4.png
        text: "For example, in Finding Nemo, when Crush and Squirt and all their friends are flying through the East Australian Current. You're seeing images of water flowing by, you're seeing the colors on the back of the turtle, you're seeing the sides of the fish. All of those things are generated through math and computer programs that we write, that we then give to the artist and they take that to create that final image and tweak it and make it look beautiful and look fun."
    C3_dice_race:
      1:
        image: notes/C3_dice_race_1.png
        text: This lesson is called dice race. Almost everyone likes to play computer games. Have you ever thought about how computer programmers turn the steps of a game into a program? The first step in creating computer games and in solving any problem requires thinking and planning.
      2:
        image: notes/C3_dice_race_2.png
        text: "The thinking step of problem solving produces an algorithm, which is a step by step plan for solving a problem or finishing a task. In this lesson, you'll create an algorithm for a dice race game. Then you'll ask your friends to try out your plan to see if they can follow the steps to play the game. After the programmer is sure the steps are correct, it's time to translate the algorithm into a program with language that the computer can understand."
      3:
        image: notes/C3_dice_race_3.png
        text: "Almost everything we do every day requires an algorithm, a list of steps you can follow to finish a task. Think about getting ready for school or planning a fun day with your friends or fixing a snack. To complete any of those tasks, you'll need to break it down into smaller steps and sometimes the steps must be in a specific order."
      4:
        image: notes/C3_dice_race_4.png
        text: "Think about making a sandwich. It doesn't matter which ingredient you get out of the cabinet first. But you can't spread the peanut butter until you open the jar. Computers need algorithms and programs to show them how to do even simple things that we can do without thinking about it."
      5:
        image: notes/C3_dice_race_5.png
        text: An algorithm is the thinking behind what needs to happen while the program is the actual instructions given to the computer to make it happen. An algorithm has to be translated into a program before a computer can run it. Breaking a task into steps called an algorithm is sometimes difficult. But like any new skill, it gets easier and easier with practice.
    C3_farmer_while:
      1:
        image: notes/C3_farmer_while_1.png
        text: "While loops are pretty similar to what you do in everyday life. Imagine you are washing your car, you'll keep scrubbing until it's clean. While it's not clean, continue to scrub. You're evaluating these things all the time."
      2:
        image: notes/C3_farmer_while_2.png
        text: "We've got a new look to help your farmer out. It's called a while-block. It's pretty simple actually. While a statement at the top is true, do something. For example, while there's a pile move one hayful. Go ahead and give it a try with your farmer."
    C3_functional_suncatchers:
      1:
        image: notes/C3_functional_suncatchers_1.png
        text: "This lesson is functional suncatchers. You'll be creating these pretty suncatchers using functions. There are several steps in creating one of these suncatchers. Some of the steps you have to repeat many times."
      2:
        image: notes/C3_functional_suncatchers_2.png
        text: The first step in simplifying the process of making a suncatcher is figure out what we have to repeat over and over again. We can group these steps into what we call a function.
      3:
        image: notes/C3_functional_suncatchers_3.png
        text: "But there is more to creating a beautiful suncatcher than following precise steps. Sometimes we want to be creative and change the color of the beads we're using. We can make every suncatcher unique if we use different colored beads."
      4:
        image: notes/C3_functional_suncatchers_4.png
        text: Your suncatcher will be uniquely yours when you learn to think of the beads as variables which is a word that means a placeholder for information that can change. Have fun creating beautiful suncatchers using functions and variables!
    C3_internet:
      1:
        image: notes/C3_internet_1.png
        text: This lesson is all about the internet. The internet is a very busy place and similar to this busy road. Messages like cars are zooming along to get to their destinations. Messages move through the internet very quickly.
      2:
        image: notes/C3_internet_2.png
        text: "Acting out how the internet works will help you understand what's happening when you use the internet. You'll learn how messages get from your computer to a favorite website or from a friend to an email inbox. Just like it's easier to navigate busy roads when you know the roads and can read the signs, traveling the internet is not so complicated when you know what goes on behind the scenes."
      3:
        image: notes/C3_internet_3.png
        text: "Sending messages on the internet is a little bit like sending messages in the mail but with a few differences. I'm here at Google.com. The IP address for this website is this number. You can think of an IP address as your return address in the mail. Let's imagine that I want to send a message in the mail to someone in the office down the there. Do you see URL and the IP address on that door? I've written this message and hit send."
      4:
        image: notes/C3_internet_4.png
        text: "Unlike the Postal Service, the first thing that happens is that the internet breaks the message into smaller parts so it can be sent more easily. These small parts are called packets. Each packet of the message is delivered to the destination one at a time. These packets are all put together in the right order so that the receiver can read the message correctly. Of course, there are many more things to learn about how the internet works but this is a great start. You're on your way to becoming a savvy internet user! Be sure to tell your family and friends what you've learned!"
      5:
        image: notes/C3_internet_5.png
        text: "My name is Amanda Camp and I'm a software engineer at Google. I work on a team that works on a backend server that stores profiles and contacts. In my job, we think a lot about how contacts can be sent to other devices, such as your phone. Most people have a lot of contacts, you might have say, 1000 contacts and we don't want to send all of those contacts at once to your phone because it's too large of a message. Similar to the way the internet breaks large messages down into packets, we use a concept called paging where we might only send your phone 100 contacts at a time and let your phone respond to us and ask for the next 100."
      6:
        image: notes/C3_internet_6.png
        text: "The most exciting thing about software is the fact that it can impact the entire world. I first learned to program when I was about nineteen. I think I was already a sophomore or a junior in college. The first program I remember writing is something that converted Celsius to Fahrenheit. I like programming because I like helping people. I can write programs at Google that help people all over the world and that's really mind-boggling and exciting."
    C3_maze_conditionals:
      1:
        image: notes/C3_maze_conditionals_1.png
        text: "People make decisions everyday. For example, before you go outside, you have an if statement that says if it's raining, then I need to get my jacket. Computers are amazing once you decide those kinds of statements that they can reliably execute those things and unbelievable speed. A computer program really is a little bit of math and some if statements where the decision gets made."
      2:
        image: notes/C3_maze_conditionals_2.png
        text: "The if block helps the zombie make a decision. It checks something. For example, let's use the block that says if there's a path to the left, and put a turn left command inside it. We're telling the zombie to check its surroundings, see if there's a path on the left and if so, make that turn."
      3:
        image: notes/C3_maze_conditionals_3.png
        text: "Then we use the move forward block inside this repeat to get it to keep moving forward as long as it just wants to go straight. Then when there's a turn, the if block will tell it to make that turn to the left. You can see that if we do that, if we take the turn to the left and otherwise moving forward, we'll achieve our goal."
      4:
        image: notes/C3_maze_conditionals_4.png
        text: "It's an example of using an if statement which is really a fundamental concept in computer programming. One of the first things I learned was how to write a program that played tic-tac-toe. I had if statements to say, ok, if the other person is about to win, go ahead and block that spot. Have fun learning how to use if statements, it's a key concept."
    C3_maze_level_4:
      1:
        image: notes/C3_maze_level_4_1.png
        text: In this example, your goal is to get zombie to the sunflower. We could use five move forward blocks or we could tell the computer to move forward and repeat five times using the one repeat block.
      2:
        image: notes/C3_maze_level_4_2.png
        text: This saves time and makes it way easier. To use it, just put the move forward block inside the repeat block. Hit run and the zombie will move forward five times to the yummy sunflower.
    C3_playlab_create_game:
      1:
        image: notes/C3_playlab_create_game_1.png
        text: Μέχρι τώρα έφτιαχνες μια κινούμενη εικόνα ή μια ιστορία που έκανε το ίδιο πράγμα κάθε φορά. Τώρα μπορείς να φτιάξεις ένα διαδραστικό παιχνίδι που μπορείς κι εσύ να παίξεις!
      2:
        image: notes/C3_playlab_create_game_2.png
        text: 'Υπάρχει το μπλοκ "όταν το βέλος" και το μπλοκ "μετακίνησε τον ηθοποιό". Μπορείς να συνδυάσεις αυτά τα μπλοκ για να μετακινείς τους ηθοποιούς με τα βελάκια.'
    C3_songwriting_with_parameters:
      1:
        image: notes/C3_songwriting_with_parameters_1.png
        text: This is the song writing lesson. Music is a lot like a computer program. The written notes and words tell the singer exactly what to do. Some parts of music are used over and over again.
      2:
        image: notes/C3_songwriting_with_parameters_2.png
        text: We call this the chorus. In a computer program, the parts of the program that are used over and over again are called functions. When you read song lyrics and it says the word chorus, do you sing the word chorus? No, you look at the top of the page to see what words make up the chorus.
      3:
        image: notes/C3_songwriting_with_parameters_3.png
        text: "In this lesson, you'll learn a silly little song called little bunny foo foo. The song has a chorus that you will sing several times over and over again. A function is a piece of code that you can call and use over and over again. It makes programming easier and more efficient so you don't have to write out the steps of your function over and over again. You can just write it once!"
