et:
  data:
    instructions:
      2-3 Artist 1 new_instruction: Tere, olen kunstnik. Sa saad kirjutada koodi, et panna mind peaaegu kõike joonistama. Kasuta mõndasid plokke et panna mind joonistama hallidele joontele mis on pildil. (Iga joon on 100 pikslit pikk)
      2-3 Artist 11_instruction: 'Anna stopp-märgile ääred, tehes kaheksanurga, mille iga külg on 100 piksli pikkune. Mitu kraadi sa peaks pöörama? (Vihje: mis on 360 jagatud 8-ga?) '
      2-3 Artist 12_instruction: 'Sea "korda x korda" plokk nii, et see teeb silmamunale ringi ja lõpeta silmamuna. Kui iga liigutus pöörab paremale ühe kraadi võrra, siis mitu korda sa pead seda tegevust kordama et tekiks täisring? 180? 360? 500?'
      2-3 Artist 2 new_instruction: 'Sellel majal on üks pooleliolev sein. Iga külg on 100 aga pooleliolev on 50. Lõpeta sein. '
      2-3 Artist 2_instruction: 'Sellel majal on üks pooleliolev sein. Iga külg on 100 aga pooleliolev on 50. Lõpeta sein. '
      2-3 Artist 3.4_instruction: Hüppa plokk liigutab kunstnikku ilma et ta joonistaks. Joonista katkendlik joon kasutades hüppa ja joonista plokki.
      2-3 Artist 3_instruction: See müts on 100 pikslit kõrge. Joonista müts mis on 70 pikslit väiksem.
      2-3 Artist 3new_instruction: Punane müts on 100 pikslit kõrge. Lõpeta musta mütsi joonistus, mis on 70 pikslit lühem. Musta mütsi laius on 50 pikslit.
      2-3 Artist 4_instruction: Aita mul selle kassi jaoks maja teha.
      2-3 Artist 5_instruction: 'Asendada see kood "repeat times" blokiga, et joonistada sama maja, kasutades ainult kolme blokki.'
      2-3 Artist 6_instruction: 'Sellele majale on katust vaja! Joonista kolmnurk. Vihje: kõik kolm külge on sama pikad.'
      2-3 Artist 7_instruction: 'Lõpeta viimase akna parema poole joonis. Iga nelinurkse akna paan on 25 pikslit lai. '
      2-3 Artist 8_instruction: Tehke lõpuni ruumid kummagi looma jaoks, poolitades ristküliku kaheks võrdse suurusega ruuduks. Ristkülik on 200 pikslit lai ja 100 pikslit kõrge.
      2-3 Artist 9_instruction: Lõpeta see tuulelohe
      2-3 Artist Assessment 1_instruction: 'Hindamine: Lõpeta viimase hamba joonistus, mis on 25 pikslit lai ja 25 pikslit kõrge.'
      2-3 Artist Debugging 1_instruction: Kas sa saad teha mütsi mille tipu pikkus on 100?
      2-3 Artist Debugging 10_instruction: 'Minu mängukontrolleri suunaklahvid on liiga kitsad. Vihje: tee nad 10 pikslit laiemaks'
      2-3 Artist Debugging 11_instruction: 'Aita mul lõpetada imeilus lumehelves. Kui palju kordi ma pean  "kordama," et seda valmis saada?'
      2-3 Artist Debugging 12_instruction: Ma peaksin sellele stseenile merelaine lisama. Kas sa saaksid mind aidata?
      2-3 Artist Debugging 2_instruction: 'Kood kolme vurru jaoks mida sa näed on vale. Vihje: iga vurr on 75 piksli pikkune. Paranda seda koodi, et joonistada vurrud.'
      2-3 Artist Debugging 3_instruction: 'Minu paadis on auk! Kas sa saad selle ära parandada muutes joone nurka? Vihje: viimane nurk on 15 kraadi paigast ära.'
      2-3 Artist Debugging 4_instruction: Millist pilti me proovime joonistada? Lõpeta joonis ühendades punktid õigete joonte ja nurkadega.
      2-3 Artist Debugging 5_instruction: 'Kood mida sa sääre ja jalalaba jaoks näed on vale. Vihje: jalg on liiga pikk me võib olla peaksime ühe sammu ära võtma (vihje sisaldab tõlkimatut nalja)'
      2-3 Artist Debugging 6_instruction: Tundub et ma istun toolis millel on üks jalg puudu. Muuda plokke et toolile üks jalg juurde joonistada.
      2-3 Artist Debugging 7_instruction: Tundub et C on tagurpidi joonistatud. Kas sa saad C õigetpidi joonistada?
      2-3 Artist Debugging 8_instruction: Minu tuulelipp ei ole valmis. Mitu korda pean ma kordama, et seda lõpetada?
      2-3 Artist Debugging 9_instruction: 'Kood selle lille varre jaoks on vale. Vihje: varre nurk on 60 kraadi paigast ära'
      2-3 Artist Debugging Assessment 1_instruction: 'See kujund on liiga väike. Kas sa saad selle suuremaks teha? Vihje: see peaks mõlemast küljest 75 pikslit pikem olema.'
      2-3 Artist Free Play_instruction: Mängu aeg! Joonista mida ise tahad.
      2-3 Artist Functions 1_instruction: 'Tere! Mina zombi kunstnik. Mulle meeldib joonistamine! Aita mul joonistada ruudukujuline klaas. Vihje: klaaside vahe on 25 pikslit lühem kui ruudu pikkus.'
      2-3 Artist Functions 10_instruction: Siin on kaks funktsiooni, üks suure hammasratta joonistamiseks ja teine väikse hammasratta joonistamiseks. Kasuta neid, et joonistada masina sisemust!
      2-3 Artist Functions 11.5_instruction: 'Siin on seesama "joonista kuusnurk" funktsioon. Mis juhtub, kui pöörate vaid 60 kraadi iga kord, kui seate?'
      2-3 Artist Functions 11_instruction: 'Oleme "joonista ruut" funktsiooni nimetanud ümber "joonista kuusnurk" funktsiooniks, kuid see teeb ikka ainult ruute! Kas te saaksite muuta "joonista kuusnurk" funktsiooni nõnda, et see teeks kuusnurga, mille ühe külje pikkus on 50 pikslit, ning seejärel joonistada kujutis funktsiooni abil?'
      2-3 Artist Functions 12_instruction: 'Funktsioonid hõlbustavad oluliselt keeruliste kujutiste mitmekordset joonistamist. Kas te saate kasutada "joonista lill" funktsiooni, et täita kogu ülejäänud istutuskast? (Vihje: taimed on kõik üksteisest 100 piksli kaugusel)  '
      2-3 Artist Functions 13_instruction: 'Oleme andnud teile neli funktsiooni. Kasutage neid, nagu teile meeldib, ühe või mitme tsükli sees, et teha pilte, mida sõpradega jagada. Vajutage "käivita" ja vaadake näidist.'
      2-3 Artist Functions 2_instruction: 'Funktsioonide abil saate määratleda uued blokid! Me liigutasime blokke, et joonistada ruut funktsiooni nimega "joonista ruut". Kas te saate kasutada "joonista ruut" funktsiooni ja teha prillid? Väljakud on üksteisest 75 piksli kaugusel.'
      2-3 Artist Functions 3_instruction: Muuda funktsiooni et joonistada ruutu küljepikkusega 115 ja joonista suuremad prillid. Ruutude vahe on nüüd 45 pikslit.
      2-3 Artist Functions 4_instruction: 'Kasuta "korda" plokke et joonistada need 3 ruutu.'
      2-3 Artist Functions 7_instruction: 'Kasuta "joonista maja" funktsiooni et joonistada kaks erineva suurusega maja. (vihje: esimene maja on 100 pikslit).'
      2-3 Artist Functions 9_instruction: See siin on lumehelbe funktsioon. Eksperimenteeri sellega et luua talve stseen! See on vaba mängimise tase, seega siin ei ole vaja mingit puslet lahendada. Lõbutse!
      2-3 Artist Loops 1_instruction: Kas te saate teha kuusnurga 100 piksli pikkuste külgedega, et lõpetada raku kujund? Pidage meeles, et teil on vaja pöörata vaid 60 kraadi!
      2-3 Artist Loops 10_instruction: Mis juhtub meie projektiga kui teeme oma viimase käigu edasi poole lühemaks?
      2-3 Artist Loops 11_instruction: 'Paneme nüüd *veel ühe* tsükli kogu meie koodi ümber! Ära unusta välimisele tsüklile nurka lõppu panna.'
      2-3 Artist Loops 2_instruction: Nüüd kasutage korduse blokki, et teha rakust kest.
      2-3 Artist Loops 4_instruction: Tahad näha, mis juhtub kui me kordame seda kujundit tsüklit kasutades uuesti ja uuesti?
      2-3 Artist Loops 5_instruction: Teeme tsüklile väikesed muudatused ja vaatame kui erinev meie pilt tuleb.
      2-3 Artist Loops 6_instruction: Lisa tsüklisse veel üks liikumine ja veel üks pööramine ning vaata kuidas sinu töö muutub.
      2-3 Artist Loops 7_instruction: Me saame kasutada tsükleid et teha igasuguseid hulknurki. Kas suudad luua rombi selle kuusnurga sisse?
      2-3 Artist Loops 8_instruction: Paneme mõlemad elemendid tsüklisse.
      2-3 Artist Loops 9_instruction: "Me hakkame samu elemente kordama aga nüüd lisame nende vahele natuke distantsi.\\r  Kasuta sama koodi mida ennegi aga lisa tsükli lõppu samm edasi."
      2-3 Artist Loops New 1_instruction: Joonistame sellele roboti pea! Kas sa suudad teha ruudu mille küljed on 100 pikslit?
      2-3 Artist Loops New 10_instruction: Nüüd ühendame omavahel hulga V-e, joonistades neid korduvtsüklis.
      2-3 Artist Loops New 11_instruction: Seekord joonistame seda 24 korda. Lisa pööra vasakule 30 kraadi ja pane see kõik korda plokki.
      2-3 Artist Loops New 12_instruction: |
        Joonista teemant, mille küljed on 100 pikslit.
        
      2-3 Artist Loops New 13_instruction: Nüüd joonistage teemant 3 korda korduvtsüklis.
      2-3 Artist Loops New 14_instruction: Nüüd joonistage teemant 10 korda, kuid pöörake iga järgnevat 90 kraadi eelmise suhtes.
      2-3 Artist Loops New 15_instruction: Joonista midagi lahedat.
      2-3 Artist Loops New 2_instruction: 'Siin on kood mille abil sa joonistasid seda ruutu. Mis juhtub kui sa kasutad "korda" plokki, et seda koodi neli korda järjest käivitada?'
      2-3 Artist Loops New 9_instruction: Et noolt lõpetada, tuleb sul joonistada V, mille mõlemad küljed on 50 pikslit.
      2-3 Artist Match Hex Pic_instruction: 'Sobivus: aidake lõpetada kuusnurk.'
      2-3 Artist Match Rho Pic_instruction: 'Sobivus: Lõpeta puuduv kood.'
      2-3 Artist Match Sq Pic_instruction: 'Sobivus: kirjuta puuduv kood'
      2-3 Artist Match Tri pic_instruction: 'Sobivus: täitke puuduva koodiga.'
      2-3 Artist Nested Loops 1_instruction: Olete juba kasutanud korduvtsükleid kujundite joonistamisel, kuid kas te teadsite, et korduvtsükleid saab üksteise sisse panna? Tehke seda selle koodibloki puhul kolm korda, et muster joonistada.
      2-3 Artist Nested Loops 10_instruction: Korrake seda koodi 12 korda, et muster lõpetada.
      2-3 Artist Nested Loops 11_instruction: Korrake seda koodi 4 korda, et muster lõpetada, ning pöörake 90 kraadi pärast igat ringi.
      2-3 Artist Nested Loops 12_instruction: Korrake seda koodi 12 korda, et lõpetada lokid.
      2-3 Artist Nested Loops 2_instruction: Nüüd korrake kolmnurka 6 korda. Pärast igat kolmnurka tuleb teil 60 kraadi pöörata, enne kui saate järgmist alustada.
      2-3 Artist Nested Loops 3_instruction: Teil tuleb seda kolmnurka 12 korda korrata, et seda mustrit joonistada. Jaga ringi kraadide arv (360) joonistatavate kujundite arvuga (12), et saada teada, mitu kraadi on vaja pärast igat kujundit pöörata.
      2-3 Artist Nested Loops 4_instruction: 'Korrake teemanti-kujutist 12 korda lille joonistamiseks. Vihje: 12 teemantit on täpselt nagu 12 kolmnurka, mida te just tegite - kui palju on vaja iga kujundi järgselt pöörata?'
      2-3 Artist Nested Loops 5_instruction: Täitke selle hoone aknad kihilise kordusena. Aknad on 20 pikslit kõrged ja üksteisest 20-ne piksli kaugusel.
      2-3 Artist Nested Loops 6_instruction: Sel dinosaurusel on seljal sabast alates 8 teravikku; iga teravik on 30 pikslit kõrge. Korrake kolmnurki 8 korda, kuid veenduge, et liigute pärast iga kordust ka edasi.
      2-3 Artist Nested Loops 7_instruction: Korrake kolmnurki 10 korda päikse joonistamiseks. Pärast iga kolmnurka tuleb edasi liikuda ja pöörata. Saate teada, kui palju pöörata, kui jagate täisringi kraadide arvu kujunditega, millest see koosneb.
      2-3 Artist Nested Loops 8_instruction: Nüüd paigutame pildile muru. Iga rohututt on teisest 50 pikslit eemal.
      2-3 Artist Nested Loops 9_instruction: Me lõpetame teie pildi lisades sellele lille. Korrake teemanti-kujundit 12 korda lille joonistamiseks.
      2-3 Artist Nested Loops Free Play_instruction: Mängi nagu soovid! Joonista midagi lahedat kihiliste kordustsüklite abil.
      2-3 Bee Conditionals 1_instruction: Tervist! Olen mesimumm. Aidake mul lillelt õietolmu koguda.
      2-3 Bee Conditionals 10_instruction: Lilladel õitel on kas 1 või 0 väärtuses õietolmu. Olge hoolsad, et mitte koguda õietolmu lillalt õielt, kui seal seda ei ole
      2-3 Bee Conditionals 11_instruction: Korjake õietolmu neilt õitelt, kus seda on.
      2-3 Bee Conditionals 12_instruction: Kasutage korduvtsüklit, et kontrollida ja koguda õietolmu kõikidelt lilledelt.
      2-3 Bee Conditionals 13_instruction: 'Koguge õietolmu ja tehke mett. Vihje: mis juhtub siis, kui kasutate "kui on õietolmu" tingimust punasel lillel? Kas te saate selle lõpuni viia korduvtsüklit kasutades?'
      2-3 Bee Conditionals 14_instruction: Koguge õietolmu ja tehke mett. Olge ettevaatlik, et te ei koguks õietolmu lillalt lillelt, kui seal seda ei ole.
      2-3 Bee Conditionals 15_instruction: Korja kõigilt neljalt lillelt nektarit.
      2-3 Bee Conditionals 2_instruction: Tere, olen mesilane! Aita mul lilledelt kogu nektar ära korjata. Kasuta kordust.
      2-3 Bee Conditionals 3_instruction: Aita mul koguda lilledelt kogu nektar ja mett teha. Kasuta kordust.
      2-3 Bee Conditionals 4_instruction: Aidake mul lilledelt kokku korjata kogu õietolm ja teha kogu mesi.
      2-3 Bee Conditionals 5_instruction: Lilladel õitel on kas 1 või 0 väärtuses õietolmu, kuid te ei tea, kumb väärtus on! Olge hoolsad, et mitte koguda õietolmu lillalt õielt, kui seal seda ei ole. Kontrollige, kas õietolmu väärtus on võrdne ühega kasutades blokke.
      2-3 Bee Conditionals 6_instruction: 'Kontrollige seda lille "kui"-blokiga, et saada teada, kas seal on õietolmu.'
      2-3 Bee Conditionals 7_instruction: Koguge õietolmu igalt lillelt, kui seal on seda.
      2-3 Bee Conditionals 8_instruction: Sellel põllul on punased ja lillad lilled. Punastel lilledel on teada hulk õietolmu, kuid lillade lillede õietolm ei ole teada. Koguge kogu õietolm.
      2-3 Bee Conditionals 9_instruction: Kogu kogu nektar igalt lillelt.
      2-3 Bee Conditionals Assessment 1_instruction: 'Hindamine: Koguge kogu õietolm. Olge ettevaatlikud, et mitte koguda õietolmu lillalt õielt, kui seal seda ei ole.'
      2-3 Bee Debugging 1_instruction: Need blokid on veaga(vigadega). Parandage viga(vead) ja koguge kokku kogu õietolm ning tehke kogu mesi.
      2-3 Bee Debugging 10_instruction: Need blokid on veaga(vigadega). Parandage viga(vead) ja koguge kokku kogu õietolm ning tehke kogu mesi.
      2-3 Bee Debugging 2_instruction: Need blokid on veaga(vigadega). Parandage viga(vead) ja koguge kokku kogu õietolm ning tehke kogu mesi.
      2-3 Bee Debugging 3_instruction: Need blokid on veaga(vigadega). Parandage viga(vead) ja koguge kokku kogu õietolm ning tehke kogu mesi.
      2-3 Bee Debugging 4_instruction: Need blokid on veaga(vigadega). Parandage viga(vead) ja koguge kokku kogu õietolm ning tehke kogu mesi.
      2-3 Bee Debugging 5_instruction: Need blokid on veaga(vigadega). Parandage viga(vead) ja koguge kokku kogu õietolm ning tehke kogu mesi. Võite nüüd kasutada jooksu ja sammu.
      2-3 Bee Debugging 6_instruction: Need blokid on veaga(vigadega). Parandage viga(vead) ja koguge kokku kogu õietolm ning tehke kogu mesi.
      2-3 Bee Debugging 7_instruction: Need blokid on veaga(vigadega). Parandage viga(vead) ja koguge kokku kogu õietolm ning tehke kogu mesi.
      2-3 Bee Debugging 8_instruction: Need blokid on veaga(vigadega). Parandage viga(vead) ja koguge kokku kogu õietolm ning tehke kogu mesi.
      2-3 Bee Debugging 9_instruction: Need blokid on veaga(vigadega). Parandage viga(vead) ja koguge kokku kogu õietolm ning tehke kogu mesi.
      2-3 Bee Debugging Assessment 1_instruction: 'Hindamine: Need blokid on veaga(vigadega). Parandage viga(vead) ja koguge kokku kogu õietolm ning tehke kogu mesi.'
      2-3 Bee Functions 1_instruction: 'Funktsioonid on koodide blokid, mis ülesande täidavad. Kasuta "kogu 2 nektarit" ("get 2 nectar") funktsiooni et koguda õietolm igalt lillelt.'
      2-3 Bee Functions 10_instruction: Lilladel lilledel võib olla kas 1 või 0 nektarit. Koosta funktsioon, mis kogub nektarit ainult nendelt lilladelt lilledelt, millel on nektarit.
      2-3 Bee Functions 2_instruction: 'Funktsioonid on programmi plokid, mis täidavad mingit ülesannet. Kasuta "võta 5" funktsiooni, et koguda 5 nektarit korraga. Palun kasuta kordamist, et koostada ideaalne plokk.'
      2-3 Bee Functions 3_instruction: Kogu kogu nektar igalt lillelt.
      2-3 Bee Functions 4_instruction: 'Funktsioon "liiguta ja kogu nektarit" pöörab mesilast, kogub nektarit ja viib mesilase algpunkti tagasi. Kasuta seda funktsiooni kogu nektari kogumiseks.'
      2-3 Bee Functions 5_instruction: Nüüd on lilledes veelgi enam nektarit. Muuda funktsiooni nii, et see koguks 4 nektarit ning kasuta seda kogu nektari kogumiseks.
      2-3 Bee Functions 6_instruction: Nüüd kasuta sama funktsiooni, et koguda nektarit kolmelt lillelt.
      2-3 Bee Functions 7_instruction: Lilled on nüüd kaugemalt. Muuda funktsiooni ja kasuta seda kõigilt lilledelt nektari kogumiseks.
      2-3 Bee Functions 8_instruction: Koosta oma funktsioon, mis kogub 7 nektarit, liigub edasi ja teeb 7 mett. Kasuta funktsiooni igalt lillelt nektari kogumiseks ning tee mett igas kärjes.
      2-3 Bee Functions 9_instruction: Koosta oma funktsioon, mis liigub mööda rada, kogub nektarit, teeb mett ning seejärel viib mesilase raja algusesse tagasi.
      2-3 Bee Functions Assessment 1_instruction: 'Ülesanne: kasuta funktsiooni, et koguda nektarit igalt lillelt.'
      2-3 Bee Functions Assessment 2_instruction: 'Ülesanne: koosta funktsioon, mis teeb iga kord 3 mett.'
      2-3 Bee Loops 1_instruction: 'Igas lilles on 1 ühik nektarit. Kogu nektarit kõigilt lilledelt. '
      2-3 Bee Loops 10_instruction: Kas saad kasutada kordust teise kahe korduse sees, et koguda kokku kogu nektar?
      2-3 Bee Loops 11_instruction: Kasuta kordusi, et koguda kokku nektar kogu väljalt.
      2-3 Bee Loops 12_instruction: Kasuta kordusi, et koguda kokku nektar kogu väljalt.
      2-3 Bee Loops 13_instruction: 'Ülesanne: kasuta korduste plokki, et koguda kokku kogu nektar.'
      2-3 Bee Loops 1A_instruction: 'Tere, mina olen mesilane. Kas sa aitad mul koguda nektarit nendelt lilledelt? '
      2-3 Bee Loops 2_instruction: Kasuta kordust, et koguda nektarit ning teha mett.
      2-3 Bee Loops 2A_instruction: Kas saad seda sama ülesannet teha lihtsamaks kordusega?
      2-3 Bee Loops 3_instruction: Kogu nektarit igalt lillelt ning tee mett igal kärjel.
      2-3 Bee Loops 3A_instruction: Kas sa saad kasutada kordust, et koguda kogu nektar?
      2-3 Bee Loops 3B_instruction: Nüüd kasuta uut korduse plokki, et koguda kogu nektar ning valmistada kogu mesi.
      2-3 Bee Loops 4_instruction: Kasuta sarnast kordust nagu eelmises pusles, kuid lisa pööre.
      2-3 Bee Loops 4A_instruction: Mis juhtub, kui kordate seda 3 korda? Ära unusta, et lõpus pead mett tegema!
      2-3 Bee Loops 5_instruction: Kasuta kordust, et allapoole liikuda ja nektarit koguda.
      2-3 Bee Loops 6_instruction: Kasuta tsüklit et korjata igalt lillelt nektarit ja teha iga meekärje juures mett.
      2-3 Bee Loops 7_instruction: Pane need plokid kordusesse, et koguda nektarit igalt lillelt.
      2-3 Bee Loops 8_instruction: 'Nendel lilladel lilledel on teadmata arv nektarit. Kasuta "kui nektar" kordust, et koguda kokku kogu nektar. See kordus töötab siis, kui tingimus on õige, praegusel juhul >0.'
      2-3 Bee Loops 9_instruction: Tsükkel „kuni“ saab sooritada sama toimingut nagu üks tsükli avaldis „kui“. Lisa sama toimingu sooritamiseks sellele koodile tsükkel „kuni“.
      2-3 Bee Loops Assessment 1_instruction: 'Ülesanne: kasuta kordust, et koguda nektarit sellelt lillelt.'
      2-3 Maze 1_instruction: 'Kas aitad mul ulaka põrsa kinni püüda? Liiguta mõned "liigu edasi" plokid kokku ja vajuta "Käivita". '
      2-3 Maze 10_instruction: Juhi mind rohelise õeluse juurde! (Ettevaatust dünamiidiga)
      2-3 Maze 11_instruction: 'Juhata mind lilleni, ma olen näljane! Mitu korda sa pead "korda" plokki kasutama?'
      2-3 Maze 12 (copy 1)_instruction: 'Kas saad asendada eelmise vastuse ainult kahe plokiga? (Vihje: Loo kordus kasutades "korda x korda" plokki.)'
      2-3 Maze 12 (copy 2)_instruction: 'Kas saad asendada eelmise vastuse ainult kahe plokiga? (Vihje: Loo kordus kasutades "korda x korda" plokki.)'
      2-3 Maze 12 (old)_instruction: Juhata mind põrsa juurde, nüüd kasuta korda x korda plokki!
      2-3 Maze 12_instruction: 'Kas saad need 5 plokki asendada ainult 2 plokiga? (Vihje: Kasuta kordust "korda x korda" loki abil.)'
      2-3 Maze 13 (old)_instruction: 'Vii mind põrsa juurde kasutades "Korda kuni" plokki!'
      2-3 Maze 13_instruction: Vii mind põrsa juurde ainult kahte plokki kasutades.
      2-3 Maze 14 (old)_instruction: 'Vii mind põrsa juurde "Korda kuni" plokki kasutades!'
      2-3 Maze 14_instruction: 'Vii mind päevalilleni! (Kus see "korda mitu korda" plokk on, kui mul seda vaja läheb?)'
      2-3 Maze 15 (old)_instruction: 'Vii mind põrsa juurde "Korda kuni" plokki kasutades!'
      2-3 Maze 15_instruction: Kasuta kahte tsüklit et saada siga vähemaid plokke kasutama.
      2-3 Maze 16 (old)_instruction: 'Vii mind põrsa juurde "Korda kuni" plokki kasutades!'
      2-3 Maze 16 before_instruction: Aita mind seani.
      2-3 Maze 16_instruction: Aita mind päevalilleni. Pane see jada tsüklisse!
      2-3 Maze 2_instruction: See siga ajab mul suled turri. Aita mul ta kätte saada!
      2-3 Maze 3_instruction: Jälgi rada ja juhata mind rumala seani. Väldi TNT-d või muidu suled lendavad!
      2-3 Maze 4_instruction: Juhi mind rohelise õeluse juurde! (Ettevaatust dünamiidiga)
      2-3 Maze 5_instruction: Juhi mind rohelise õeluse juurde! (Ettevaatust dünamiidiga)
      2-3 Maze 6_instruction: Ole rahulik ja aita mul paha siga üles leida. Muidu ma saan vihaseks!
      2-3 Maze 7_instruction: Juhi mind rohelise õeluse juurde! (Ettevaatust dünamiidiga)
      2-3 Maze 8_instruction: Aita mind seani!
      2-3 Maze 9_instruction: Juhi mind rohelise õeluse juurde! (Ettevaatust dünamiidiga)
      2-3 Maze Loops 1_instruction: Kas oskad mind viit plokki kasutades põrsa juurde viia?
      2-3 Maze Loops 17_instruction: Aita mind päevalilleni!
      2-3 Maze Loops 18_instruction: Aita mind päevalilleni!
      2-3 Maze Loops 19_instruction: Aita mind päevalilleni!
      2-3 Maze Loops 20_instruction: Aita mind päevalilleni!
      2-3 Maze Loops 21_instruction: Aita mind päevalilleni!
      2-3 Maze Loops Assessment 1_instruction: 'Ülesanne: Vii mind päevalilleni, kuid kasuta ainult 5 plokki! '
      2-3 Maze sq1_instruction: |
        This pig is ruffling my feathers.  Help me find
        him!
      2-3 Maze sq10_instruction: Aita mind seani! Milliseid plokke korrati?
      2-3 Maze sq10v2_instruction: Aita mind seani! Milliseid plokke korrati?
      2-3 maze sq11_instruction: Aita mind seani! Milliseid plokke korrati?
      2-3 maze sq12_instruction: 'Kas saad asendada eelmise vastuse kordusega, kasuta "korda X korda" plokki?'
      2-3 maze sq13_instruction: 'Kallis inimene. Mina zombi. Pean... saama... päevalilleni. Loo tsükkel koos "korda kuni" plokkidega.'
      2-3 maze sq14_instruction: Kas sa saad mind päevalilleni aidata, ainult nelja plokki kasutades?
      2-3 maze sq15_instruction: Kas sa saad mind päevalilleni aidata ainult viite plokki kasutades?
      2-3 maze sq16_instruction: Okei, see on üsna sarnane aga natuke erinev. Kas sa suudad seda ainult viie plokiga teha?
      2-3 Maze sq2_instruction: Jälgi rada ja juhata mind rumala seani. Väldi TNT-d või muidu suled lendavad!
      2-3 Maze sq3_instruction: Juhi mind rohelise õeluse juurde! (Ettevaatust dünamiidiga)
      2-3 Maze sq4_instruction: Ole rahulik ja aita mul paha siga üles leida. Muidu ma saan vihaseks!
      2-3 Maze sq5_instruction: Aita mind seani! Mitu korda sa pead plokki kordama?
      2-3 Maze sq6_instruction: 'Kas saad asendada eelmise vastuse ainult kahe plokiga? (Vihje: loo kordus kasutades "korda x korda" plokki)'
      2-3 Maze sq7_instruction: Aita mind rohelise sissetungijani, kasutades ainult kolme plokki.
      2-3 Maze sq8_instruction: 'Vii mind põrsa juurde" (Kus see "korda x korda" plokk on, kui mul seda vaja läheb?)'
      2-3 Maze sq9_instruction: Kasuta kordusi ning vähem plokke, et viia mind põrsa juurde.
      2-3_instruction: |
        Purple flowers may have either 1 or 0 nectar. Be careful
        not to collect nectar from a purple flower if it doesn't have any.
      2-3level1_instruction: 'Aita linnul kinni püüda ulakas põrsas - selleks liigu edasi'
      4-5 Artist 1_instruction: 'Aita mul kasti joonistamine lõpetada. (Iga joon on 300 piksli pikkune) '
      4-5 Artist 10_instruction: 'Vajuta "Käivita" nuppu, et koodi proovida. Seejärel korda piisavalt mitu korda, et joonistus ära lõpetada. Värvid on iga kord erinevad.'
      4-5 Artist 11_instruction: Lõpeta rohelised jooned. Jooned on 300 piksli pikkused ja teineteisest 15 piksli kaugusel.
      4-5 Artist 2_instruction: Kas saad seda koodi korrata, et ruut ära lõpetada?
      4-5 Artist 3.5_instruction: 'Proovi, mis juhtub, kui seda koodi kasutad (või vajuta "käivita" selle testimiseks). Seejärel korda nii mitu korda, kui on joonistuse lõpetamiseks vaja. Värvid on (tõenäoliselt) iga kord erinevad.'
      4-5 Artist 3_instruction: Selle ristküliku kujulise lillepeenra välisäär on 600. Pikem külg on 200. Joonista ristkülik.
      4-5 Artist 4_instruction: Mitu kraadi on ringis? Korda plokke ja loo värvilisi ringe.
      4-5 Artist 5_instruction: Millist nurka kasutad?
      4-5 Artist 6_instruction: Võrdkülgse kolmnurga nurgad on 60, 60 ja 60 kraadi. Iga külg on 200 pikslit. Lõpeta joonistus.
      4-5 Artist 7_instruction: Selle täisnurkse kolmnurga nurgad on 30, 60 ja 90 kraadi. Kaldus külje pikkus on 100-piksline kõrgus korrutatuna kahega. Lõpeta joonistus.
      4-5 Artist 8_instruction: Jalgpalliväljaku keskjoon on ristsirge äärejoontele. Selle väljaku ümbermõõt on 800 pikslit ja see on 240 piksli pikkune. Joonista piirid ja keskjoon.
      4-5 Artist 9_instruction: 'Joonista kujundi teine pool, joonis peab olema sümeetriline.  Kolmnurgad on võrdkülgsed ja 50 piksli pikkused.'
      4-5 Artist Assessment 1_instruction: 'Ülesanne: kasuta kordust, et joonistada võrdkülgne kolmnurk. Iga külg on 300 pikslit.'
      4-5 Artist For Loops 1_instruction: Lisa numbrid 1 kuni 10 laiuse plokkidesse ning käivita kood.
      4-5 Artist For Loops 11_instruction: Täida korduste arvu plokk, nii et see loendaks 0, 20, 40, 60, 80... 200.
      4-5 Artist For Loops 12_instruction: 'Mis juhtub, kui keerad ümber „alates“ ja „kuni“ numbrid? Täida korduste arvu plokk 200, 180, 160, 140, 120...0. '
      4-5 Artist For Loops 13_instruction: 'See projekt algas ilma korduste arvu tsüklita ja võtab liiga palju plokke! Kasuta spiraali lõpetamiseks korduste arvu plokki. Vihje: viimase joone pikkus on 250 pikslit.'
      4-5 Artist For Loops 14_instruction: 'Keegi alustas koodi tegemist, kuid siis avastas, et seda peaks saama teha kiiremini! Kasuta korduste arvu plokki, et asendada plokid ja lõpetada kolmnurkne spiraal. (Vihje: viimase joone pikkus on 300 pikslit.)'
      4-5 Artist For Loops 15_instruction: 'Keegi alustas koodi tegemist, kuid siis avastas, et seda peaks saama teha kiiremini! Kasuta korduste arvu plokki, et asendada plokid ja lõpetada kuusnurkne spiraal. (Vihje: viimase joone pikkus on 200 pikslit.)'
      4-5 Artist For Loops 2_instruction: |
        This is a "for" block. Instead of typing
        1,2,3... 10, the "for" block can repeat the blocks inside it and count the
        numbers for you. Place the number 10 into the "to" section of the "for"
        block.
      4-5 Artist For Loops 3_instruction: Kuidas saame loendada 1...50? Muuda korduste arvu plokki.
      4-5 Artist For Loops 4_instruction: Täida korduste arvu plokk nii, et see loendaks ühe kaupa 1... 10.
      4-5 Artist For Loops 6_instruction: 'Joonista ruudud, mille küljed on 50, 60, 70, 80 ja 90 pikslit. Pead kasutama "joonista ruut" funktsiooni viis korda.'
      4-5 Artist For Loops 7_instruction: 'Joonista samad ruudud, kuid kasuta plokki „loenda koos“, et muuta suurusi. Pane plokk „loendur“ ruudu joonistamise funktsiooni. Vihje: see on kategoorias Muutujad.'
      4-5 Artist For Loops 8_instruction: Kas oskad programmi lõpetada, pannes plokid korduste arvu plokki, mis loendab kümne kaupa 10...200? Korduste arvu plokk on kategoorias Tsüklid.
      4-5 Artist For Loops 9_instruction: 'Nende ringide suurused on 5, 10, 15, 20, 25, 30 ja 35. Joonista ringid kasutades "jaoks" ("for") plokki.'
      4-5 Artist Free Draw 1_instruction: Vaba aeg! Joonista mida tahad.
      4-5 Artist Functions 1_instruction: Kasuta kordust, et joonistada see kolmnurk.
      4-5 Artist Functions 10a_instruction: Pane see kood funktsiooni „joonista lumehelves“ ja asenda 50 parameetriga „suurus“. Seda funktsiooni kutsutakse juba 100-pikslise lumehelbe tegemiseks.
      4-5 Artist Functions 10b_instruction: 'Kasuta "joonista lumehelves" funktsiooni, et luua eri suurustes lumehelbeid. Vihje: esimene lumehelves on 25 ühikut pikk ning iga järgmine lumehelves on kahekordse suurusega.'
      4-5 Artist Functions 11_instruction: 'See "joonista kuusnurk" funktsioon kasutab "joonista kolmnurk" funktsiooni. Lõpeta kuusnurga funktsioon. (Vihje: kuusnurgal on 6 nurka, mis kõik on 100 piksli pikkused)'
      4-5 Artist Functions 12_instruction: 'Lõpeta "joonista lained" funktsioon. Iga laine koosneb üles ülemisest lainest ja ühest alumisest lainest. Vihje: Joonista 5 sinist lainet.'
      4-5 Artist Functions 13 Free play_instruction: Siin on mõned funktsioonid, mille abil saad joonistada planeete, tähti, rakette ja roboteid. Kasuta neid oma äranägemise järgi ning jaga tulemusi oma sõpradega.
      4-5 Artist Functions 14 Free play_instruction: 'Siin on sulle valik erinevaid funktsioone. Kasuta neid korduste sees oma äranägemise järgi ning jaga tulemust sõpradega. Kliki "Käivita" ja vaata näidet.'
      4-5 Artist Functions 15 Assessment_instruction: 'Ülesanne: Kasuta "joonista ruut" funktsiooni ruutude joonistamiseks. Ruudud on 50, 100 ja 150 piksli suurused.'
      4-5 Artist Functions 2a_instruction: 'Nüüd lisa need plokid uude funktsiooni, mille nimi on "joonista väike kolmnurk".'
      4-5 Artist Functions 2b_instruction: 'Nüüd loo funktsioon "joonista väike kolmnurk" etteantud plokke kasutades.'
      4-5 Artist Functions 3_instruction: 'Nüüd loo funktsioonid „joonista keskmine kolmnurk“ ja „joonista suur kolmnurk“. Funktsioon „joonista väike kolmnurk“ on juba sinu eest valmis tehtud. Kolmnurkade küljepikkused on 50 (väike), 100 (keskmine) ja 150 (suur). '
      4-5 Artist Functions 4_instruction: See uus funktsioon „joonista kolmnurk“ sisaldab parameetrit ja saab teha kõigi eelmise kolme funktsiooni töö. Joonista samad kolmnurgad selle uue funktsiooniga.
      4-5 Artist Functions 5_instruction: Kas oskad funktsiooni „joonista kolmnurk“ muuta funktsiooniks „joonista ruut“, et joonistust muuta?
      4-5 Artist Functions 6_instruction: 'Kasuta funktsioone „joonista ruut“ ja „joonista kolmnurk“ maja joonistamiseks. (Vihje: ruudu küljed on 200 pikslit.)'
      4-5 Artist Functions 6b_instruction: Kasuta ruudu ja kolmnurga joonistamise funktsioone koos teiste plokkidega, et joonistada maja, lisades need funktsiooni „joonista maja“ ja kutsudes selle funktsiooni.
      4-5 Artist Functions 7_instruction: Kasuta funktsiooni „joonista maja“ 100 pikslist ja 50 pikslist koosnevate majade joonistamiseks. Kahe maja vahel on 50 pikslit.
      4-5 Artist Functions 8_instruction: Funktsioonil „joonista lill“ on parameeter, millega saab määrata varre kõrguse. Määra selleks 200 ja vaata, mis juhtub.
      4-5 Artist Functions 9_instruction: Joonista need 3 lille. Esimese kõrgus on 100 ja järgmine lill on alati eelmisest 50 pikslist kõrgem. Lillede vahel on 100 pikslit.
      4-5 Artist Patterns 1_instruction: Kas oskad joonistada selle ruudu kordusi kasutades? Iga külg on 20 piksli pikkune.
      4-5 Artist Patterns 10_instruction: 'See kood joonistab kaks kuusnurkade rida. Korrake kogu koodi 4 korda, et joonistada terve meekärg. Vihje: äärmises tsüklis pead 120 pikslit tagasi hüppama, et kunstnik ei joonistaks väljaspool ekraani.'
      4-5 Artist Patterns 11_instruction: 'Mitu korda pead sa seda kordama, et joonistada poolring? Vihje: kui ring koosneb 360 kraadist ja iga tsükkel liigub 3 kraadi, mitu korda tuleb siis täisringi joonistamiseks tsüklit korrata?'
      4-5 Artist Patterns 12_instruction: Mis juhtub, kui kopeerid selle tsükli ja pöörad vasakule, mitte paremale? Kas oskad seda korrata selle laine joonistamiseks?
      4-5 Artist Patterns 13_instruction: Nüüd kordame kõike neli korda, et luua see pildiraam. Ole nurkade juures tähelepanelik – sa ei saa pöörata lihtsalt 90 kraadi! Kui 3-kraadist pööret 60 korda korrates saame poolringi, siis millised neist koodiplokkidest teevad nurkades veerandringi?
      4-5 Artist Patterns 2_instruction: Kui paned oma ruudu tsükli teise tsükli sisse, nimetatakse seda pesastatud tsükliks. Mis sa pead välimisele tsüklile lisama, et kõik 15 ruutu seataks üksteise kõrvale ritta?
      4-5 Artist Patterns 3_instruction: Lähme nüüd rohkem süvitsi. Pesastasime terve koodiploki teises tsüklis, kuid sul on vaja kunstnik saada tagasi järgmise joone joonistamise kohta. Millised neist koodiplokkidest saad panna kõige välimise tsükli lõppu, et joonistada terve ruudustik?
      4-5 Artist Patterns 4_instruction: Selle teemandi küljed on 50 piksli pikkused ja selle nurgad on 120 ja 60 kraadi. Kasuta tsüklit selle joonistamiseks.
      4-5 Artist Patterns 5.5_instruction: Mitu korda pead sa seda plokki kordama, et joonistada terve teemandiruudustik?
      4-5 Artist Patterns 5_instruction: Kordame seda, et teha 6 teemandist rida. Pane tähele, et muutsime oma teemandi koodi, et korrata 2 korra asemel 3 korda. Mis sa arvad, miks me seda tegime?
      4-5 Artist Patterns 6_instruction: Mitu korda pead sa seda plokki kordama, et joonistada terve teemandiruudustik?
      4-5 Artist Patterns 7_instruction: Muudame koos viimase mõistatuse koodi, et teha see keerukam muster. Pane tähele, kuidas teemandid nüüd kattuvad. Proovi muuta esimese funktsiooni „hüppa tagasi“ väärtust 100 pealt 50 peale (poole lähemale). Kui kaugele peab kunstnik nüüd teises funktsioonis „hüppa tagasi“ minema?
      4-5 Artist Patterns 8_instruction: Kasuta tsüklit, et joonista see kuusnurk 40-piksliste külgede ja 60-kraadiste nurkadega.
      4-5 Artist Patterns 9.5_instruction: Kordame seda koodi, et joonistada kaks kuusnurkade rida. Pane tähele, kuidas meie teine rida nihkub paremale.
      4-5 Artist Patterns 9_instruction: 'Nüüd korda seda koodi kolm korda, et joonistada terve rida. Vihje: iga kuusnurga laius on kõige laiemas kohas vasakult paremale 80 pikslit.'
      4-5 Artist Patterns Free Play_instruction: 'Vaba mäng - proovi luua oma muster!'
      4-5 Bee Conditionals - FC Test_instruction: See mesilane tahab praegu ainult nektarit. Mitte kõik objektid ei ole lilled, seega testi IGAT PILVE, et näha, kas selle taga peidab end lill. Kui leiad lille, kogu sellelt nektar.
      4-5 Bee Conditionals 1 (copy 1)_instruction: |
        The bee can't tell if this is
        a flower or a honeycomb. Gather nectar only from flowers, but first check
        if it is a flower or a honeycomb.
      4-5 Bee Conditionals 1_instruction: See mesilane ei oska teha vahet, kas tegemist on lille või meekärjega. Kogu nektarit ainult lilledelt, kuid enne vaata, kas tegu on lille või meekärjega.
      4-5 Bee Conditionals 2 (copy 1)_instruction: |
        The bee only wants nectar right
        now. Remember, not all objects are flowers, so check to gather nectar only
        at flowers.
      4-5 Bee Conditionals 2_instruction: See mesilane tahab praegu ainult nektarit. Mitte kõik objektid ei ole lilled, seega testi IGAT PILVE, et näha, kas selle taga peidab end lill. Kui leiad lille, kogu sellelt nektar.
      4-5 Bee Conditionals 3_instruction: Nüüd tahab mesilane mett teha. Kontrolli mee olemasolu ainult meekärgedest.
      4-5 Bee Conditionals 4 (copy 1)_instruction: |
        The unknown object is either
        a flower or a honeycomb. Use the if/else block to collect nectar if it is
        a flower, else to make honey (because it is a honeycomb).
      4-5 Bee Conditionals 4_instruction: 'Tundmatu objekt on kas lill või meekärg. Kasuta "kui/teine" plokki, et koguda nektarit, kui tegemist on lillega või teha mett (kui tegu on meekärjega).'
      4-5 Bee Conditionals 5_instruction: 'Nende pilvede taga võib olla kas lill või meekärg. Kasuta "kui/teine" plokki, et koguda nektarit, kui tegu on lillega või teha mett (kui tegu on meekärjega).'
      4-5 Bee Conditionals 6 (copy 1)_instruction: |
        This purple flower may have either
        3, 2, or 1 nectar. Here an if-else block is combined with another if-else
        block to create an if, else-if, else block. Complete the solution to collect
        the unknown amount of nectar.
      4-5 Bee Conditionals 6_instruction: 'Sellel lillal lillel on kas 3, 2 või 1 nektarit. Siin on "kui teine" plokid omavahel kombineeritud. Lõpeta ülesanne, et koguda tundmatu hulk nektarit.'
      4-5 Bee Conditionals 7_instruction: 'Pea meeles, et lillal lillel võib olla 3, 2 või 1 nektarit. Lõpeta "kontrolli lillat lille" funktsioon ning kasuta seda, et koguga kokku kogu nektar lilledelt.'
      4-5 Bee Conditionals 8_instruction: 'Kirjuta funktsioon "kontrolli lille mett". Sinu funktsioon peaks kontrollima, kas lillal lillel on 3, 2 või 1 nektarit ning kogu kogu nektar kokku. Seejärel liigu edasi ning valmista mett.'
      4-5 Bee Conditionals Assessment 1_instruction: 'Ülesanne: See kood on vale.  Täida "kogu nektarit või valmista mett" funktsioon ja siis kogu kokku kogu nektar ja kogu mesi. Pea meeles, et lillal lillel võib olla 3, 2 või 1 nektarit.'
      4-5 Bee Debugging 1_instruction: Need plokid teevad mulle muret. Kas saaksid need korda teha=?
      4-5 Bee Debugging 10_instruction: Leia vead ja paranda need.
      4-5 Bee Debugging 11_instruction: Kas see arvutab õigesti?
      4-5 Bee Debugging 2_instruction: Aita mesilasel koguda nektarit ning valmistada mett.
      4-5 Bee Debugging 3_instruction: Leia vead ja paranda need.
      4-5 Bee Debugging 4_instruction: Need plokid ei tööta. Milline on muster?
      4-5 Bee Debugging 5_instruction: Miski siin ei ole päris õige...
      4-5 Bee Debugging 6_instruction: Lillal lillel on teadmata arv nektarit. Paranda plokid nii, et koguksid kokku kogu nektari.
      4-5 Bee Debugging 7_instruction: Selles funktsioonis on midagi puudu...
      4-5 Bee Debugging 8_instruction: See funktsioon on korras, kuid seda ei kasutata õigesti.
      4-5 Bee Debugging 9_instruction: Miks ei valmista mesilane piisavalt mett?
      4-5 Bee Debugging Assessment 1_instruction: 'Ülesanne: Paranda programmeerimiskood.'
      4-5 Bee Nested Loops 1_instruction: Kasuta kordust, et koguda kogu nektar.
      4-5 Bee Nested Loops 2_instruction: 'Kogu nektarit igalt lillelt. Kasuta korduse pesa. '
      4-5 Bee Nested Loops 3_instruction: Kogu kokku kogu nektar, selleks pane stardikood koduse pesa sisse.
      4-5 Bee Nested Loops 4_instruction: 'Kogu kõigilt lilledelt nektar ning valmista mett igas meekärjes. Kasuta korduste pesa. '
      4-5 Bee Nested Loops 5_instruction: Kogu kokku kogu nektar, loo selleks korduste pesa.
      4-5 Bee Nested Loops 6_instruction: Kogu kogu nektar.
      4-5 Bee Nested Loops 7_instruction: Pane see kordus teise korduse sisse ning loo korduste pesa, millega saad koguda kogu nektari lilledelt.
      4-5 Bee Nested Loops 8_instruction: 'Kogu kokku kogu nektar nendelt lilledelt. Selleks loo korduste pesa. Aseta sisemine korduste plokk tingimusel plokiga. '
      4-5 Bee Nested Loops 9_instruction: Kogu kokku kogu nektar nendelt lilledelt. Selleks loo korduste pesa korduse sees.
      4-5 Bee Nested Loops Assessment 1_instruction: 'Ülesanne - kogu kogu nektar ning tee mett kasutades kordusi.'
      4-5 Bee Nested Loops Rows_instruction: 'Kogu nektarit nendelt lillede ridadelt!  Kasuta korduste pesa.'
      4-5 Maze 1 (copy 1)_instruction: Kallis inimene. Mina zombie. Pean.. jõudma... päevalilleni.
      4-5 Maze 1_instruction: Kallis inimene. Mina zombie. Pean.. jõudma... päevalilleni.
      4-5 Maze 10_instruction: Kas sa saad mind päevalilleni aidata, ainult nelja plokki kasutades?
      4-5 Maze 11_instruction: Kas saad mind päevalilleni aidata vaid kuut plokki kasutades?
      4-5 Maze 12_instruction: See on veidi erinev. Kas saad seda teha ainult kuue plokiga?
      4-5 Maze 13_instruction: Aita mind seani!
      4-5 Maze 14_instruction: 'Pean jõudma põrsani. Kasuta "korda kuni" plokki.'
      4-5 Maze 2 (copy 1)_instruction: Juhata zombie päevalille juurde, kuid hoidu taimede eest!
      4-5 Maze 2_instruction: Juhata zombie päevalille juurde, kuid hoidu taimede eest!
      4-5 Maze 3 (copy 1)_instruction: Pean... jõudma... päevalilleni.
      4-5 Maze 3_instruction: Pean... jõudma... päevalilleni.
      4-5 Maze 4 (copy 1)_instruction: 'Proovi kasutada "kordus" plokki, et kasutada vähem plokke...'
      4-5 Maze 4_instruction: 'Proovi kasutada "kordus" plokki, et kasutada vähem plokke...'
      4-5 Maze 5 (copy 1)_instruction: Kas oskad lahendada selle mõistatuse kasutades võimalikult vähe plokke?
      4-5 Maze 5_instruction: Kas oskad lahendada selle mõistatuse kasutades võimalikult vähe plokke?
      4-5 Maze 6 (copy 1)_instruction: Kas oskad lahendada selle mõistatuse kasutades võimalikult vähe plokke?
      4-5 Maze 6_instruction: Kas oskad lahendada selle mõistatuse kasutades võimalikult vähe plokke?
      4-5 Maze 7_instruction: Kallis inimene. Mina zombie. Pean.. jõudma... päevalilleni.
      4-5 Maze 8_instruction: Kasuta plokki „korda“, et aidata zombi päevalille juurde. (Hoidu taimedest!)
      4-5 Maze 9_instruction: Loo tsükkel plokiga „korda kuni“.
      4-5 Maze Assessment 1_instruction: 'Ülesanne: Mine päevalilleni.'
      4-5 Maze Conditionals 1_instruction: Kasuta plokki „korda kuni“, et aidata zombi päevalille juurde.
      4-5 Maze Conditionals 10_instruction: Kas oskad lisada 3 plokki, et aidata mul lahendada veel keerulisem labürint? Kui sa teed seda õigesti, saan ma läbida erinevaid kurvilisi radu, ükskõik kui pikad need on.
      4-5 Maze Conditionals 2_instruction: Kasuta plokki „korda kuni“, et aidata zombi päevalille juurde.
      4-5 Maze Conditionals 3_instruction: 'Kasuta uut „kui“ plokki, et lasta mul otsustada, millal keerama peab. Vihje: sa vajad ainult ühte lisaplokki, aga õpi, kuidas me selle sätime, nii et oskaksid seda järgmine kord ise teha.'
      4-5 Maze Conditionals 4_instruction: Hea küll, see on nagu viimane mõistatus, aga sa pead meelde tuletama, kuidas sa kasutasid „kui“ plokki ja „korda“ plokki koos.
      4-5 Maze Conditionals 5_instruction: 'Ma tahan päevalille! Kasuta "kui" plokki, et jõuaksin lilleni võimalikult nii, et kasutaksid võimalikult vähe plokke.'
      4-5 Maze Conditionals 6_instruction: 'Ma tahan päevalille! Kasuta "kui" plokki, et jõuaksin lilleni võimalikult nii, et kasutaksid võimalikult vähe plokke.'
      4-5 Maze Conditionals 7_instruction: 'Harjutame veidi veel - see ei ole väga erinev, kuid hoidu taimede eest!'
      4-5 Maze Conditionals 8_instruction: „Kui/teine“ plokk kontrollib tingimust ja teeb vastavalt ühte VÕI teist asja. Et aidata mind päevalilleni, proovi kasutada seda uut plokki.
      4-5 Maze Conditionals 9_instruction: Üks harjutus veel „kui-muidu“ plokiga; kas sul õnnestub kohe esimese korraga õigesti?
      4-5 Maze Conditionals Assessment 1_instruction: Kasuta plokki „korda kuni“ ja „kui-muidu“, et aidata mind päevalilleni võimalikult väheste plokkidega.
      4-5 Nested Loops 1_instruction: 'Lõpeta kood nende kolmnurkade joonistamiseks. Esimene on juba valmis. Vihje: kolm kolmnurka 360-kraadises pöördes.'
      4-5 Nested Loops 10_instruction: Joonista selle lipu viimane tähtede rida, korrates antud plokke. Tähtede vahekaugus on 50 pikslit, kuid pea meeles, et tähtede laius on 30 pikslit.
      4-5 Nested Loops 11_instruction: Kas oskad joonistada need kõnnitee 10 ruutu, kasutades pesastatud tsüklit? Iga ruudu pikkus on 30 pikslit.
      4-5 Nested Loops 12_instruction: Kas oskad joonistada need 36 kolmnurka, kasutades pesastatud tsüklit?
      4-5 Nested Loops 2_instruction: 'Nüüd pesasta see kordus teise korduse sisse, et joonistada 10 kolmnurka. Seda nimetatakse korduvaks tsükliks. Vihje: kõik 10 kolmnurka annavad 360-kraadise pöörde. '
      4-5 Nested Loops 3_instruction: "Tee päike, pesastades alguskoodi teises tsüklis. Seda nimetatakse pesastatud tsükliks.\\r"
      4-5 Nested Loops 5_instruction: Korda antud koodi, et teha tuuleveski.
      4-5 Nested Loops 6_instruction: Kas oskad joonistada kuusnurga, korrates kolmnurga koodi?
      4-5 Nested Loops 7_instruction: 'Korda seda disaini 10 korda. Kui palju pead sa iga korduse ajal pöörama? (Vihje: kui palju on 360 jagatud 10-ga?)'
      4-5 Nested Loops 8_instruction: 'Korda seda disaini 6 korda. Kui palju pead sa iga korduse ajal pöörama? (Vihje: kui palju on 360 jagatud 6-ga?)'
      4-5 Nested Loops 9_instruction: Joonista alligaatori suhu hambad!
      4-5 Nested Loops Assessment 1_instruction: Kasuta projekti lõpetamiseks pesastatud tsüklit.
      4-5 While Loops 1_instruction: Liiguta mind augu juurde ja täida see kahe labidatäie mullaga, kasutades plokki „täida“.
      4-5 While Loops 2_instruction: Liiguta mind mullahunniku juurde ja eemalda see viie labidatäiega, kasutades plokki „eemalda“.
      4-5 While Loops 3_instruction: 'Liiguta mind hunniku juurde ja eemalda see täielikult, seejärel liigu augu juurde ja täida auk. Vihje: kasuta võimalikult väikest arvu plokke.'
      4-5 While Loops 4_instruction: 'Uskumatu, ma leidsin tõeliselt sügava augu! Ma ei tea, kui mitu labidatäit mulda selle täitmiseks vaja on. Kas sa saaksid kirjutada programmi, millega täidetakse auk, kuni maapind on tasane? Vihje: proovi see kord kasutada tsüklit „kuni“.'
      4-5 While Loops 5_instruction: Ohoh, nüüd on meil kaks sügavat auku! Kas oskad kirjutada programmi, mis täidab need mõlemad, kuni maapind on tasane?
      4-5 While Loops 6_instruction: Ohoh, nüüd on meil suur mullahunnik! Kas oskad kirjutada programmi, mis selle täielikult eemaldab, kuni maapind on tasane?
      4-5 While Loops 7_instruction: Ohoh, nüüd on meil kolm mullahunnikut! Kas oskad kirjutada programmi, mis need täielikult eemaldab, kuni maapind on tasane?
      4-5 While Loops 8_instruction: ' Siin on väga sügav auk ja väga suur mullahunnik. Mitu labidatäit mulda tuleb liigutada, et maapind tasaseks saada? Vihje: kasuta mõlema jaoks tsüklit „kuni“.'
      4-5 While Loops Assessment 1_instruction: Siin on palju auke ja hunnikuid. Aita mul neid täita ja eemaldada, et saada maapind tasaseks.
      AlgPD DR Free Play_instruction: Create a function based on your own word problem.
      AllTheThings Applab - Turtle move with button_instruction: |
        Add a button that
        moves the turtle when clicked.  (Click to see full instructions)
      allthethings data blocks test_instruction: |
        Please sign in to test applab levels
        (By design, applab levels only work if signed in. Normally, we make people
        sign in, but this is only enforceable for a whole script and would be annoying
        to do for the allthethings script).
      allthethings design mode elements_instruction: |
        Please sign in to test applab
        levels (By design, applab levels only work if signed in. Normally, we make
        people sign in, but this is only enforceable for a whole script and would
        be annoying to do for the allthethings script).
      allthethings_moviebot_instruction: |
        This level cloned from "U3 Digital Assistant
        Target"
      allthethings_template_backed1_instruction: |
        Backed by a template #1. Please
        sign in to test applab levels (By design, applab levels only work if signed
        in. Normally, we make people sign in, but this is only enforceable for a whole
        script and would be annoying to do for the allthethings script). 
      allthethings_template_backed2_instruction: |
        Backed by a template #2. Please
        sign in to test applab levels (By design, applab levels only work if signed
        in. Normally, we make people sign in, but this is only enforceable for a whole
        script and would be annoying to do for the allthethings script).
      App Lab test_instruction: test
      Applab allthethings onRecordEvent_instruction: |
        Please sign in to test applab
        levels (By design, applab levels only work if signed in. Normally, we make
        people sign in, but this is only enforceable for a whole script and would
        be annoying to do for the allthethings script).
      Applab test_instruction: This level is submittable. For testing only!
      AppLab_test02_instruction: |
        One sentence summary of the activity. Click to
        view full instructions.
      Artist - Nested Loops 1_instruction: |
        Complete the code to draw these triangles.  The
        first one is done for you.  Hint:  3 triangles in a 360 degree rotation.
      Artist - Nested Loops 10_instruction: |
        Draw the last row of stars on this flag
        by looping the provided blocks. The stars are 50 pixels apart, but remember
        that the stars themselves are 30 pixels wide.
      Artist - Nested Loops 11_instruction: |
        Can you draw these 10 squares of this
        sidewalk using a nested loop? Each square is 30 pixels.
      Artist - Nested Loops 12_instruction: |
        Can you draw these 36 triangles using
        a nested loop?
      Artist - Nested Loops 2_instruction: |
        Now nest this loop inside another loop
        to draw 10 triangles.  This is called a nested loop.  Hint: All 10 triangles
        complete a 360 degree rotation.  
      Artist - Nested Loops 3_instruction: "Create a sun by nesting the starter code\nin another loop. This is called a nested loop.\\r\n"
      Artist - Nested Loops 5_instruction: Loop the given code to create a windmill.
      Artist - Nested Loops 6_instruction: |
        Can you draw a hexagon by looping the
        triangle code?
      Artist - Nested Loops 7_instruction: |
        Loop this design 10 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 10?)
      Artist - Nested Loops 8_instruction: |
        Loop this design 6 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 6?)
      Artist - Nested Loops 9_instruction: "Draw the teeth in the alligator's mouth!"
      Artist - Nested Loops Assessment 1_instruction: Kasuta projekti lõpetamiseks pesastatud tsüklit.
      Auto Open Function Editor_instruction: 'Saad kutsuda funktsioone teiste funktsioonide seest! Võta aluseks oma funktsioon „kujund“ ja loo 3 majakujundit, millest esimene on 50 piksli suurune ja igaüks on eelmisest 20 pikslit suurem. Abiks võib olla loenduri tsükli kasutamine. '
      Bee Recommended Blocks test_instruction: Lilladel õitel on kas 1 või 0 väärtuses nektarit, kuid sa ei tea, kumb väärtus parasjagu kehtib! Ole tähelepanelik, et mitte koguda nektarit lillalt õielt, kui seal seda ei ole. Kontrolli, kas nektari arv võrdub 1, kasutades plokki „kui“.
      Big Game Animation 1 (copy 1)_instruction: |
        Now that you've learned to write
        simple linear functions, let's work on using them to add some movement to
        our game. Click play to see what your game can currently do (not much!), update
        any variables you like, and then click finish to move on.
      Big Game Animation 1_instruction: |
        Now that you've learned to write simple
        linear functions, let's work on using them to add some movement to our game.
        Click "Run" to see what your game can currently do (not much!), update any
        variables you like, and then click finish to move on.
      Big Game Animation 2 (copy 1)_instruction: |
        The function 'update-target'
        function takes the target's current x value, and returns an updated value.
        Complete the 'update-target' function so that it adds to the x value each
        time it is called. The more you add to x, the faster the target will go.
      Big Game Animation 2_instruction: |
        The update-target function takes the target's
        current x value, and returns an updated value. Complete the update-target
        function so that it adds to the x value each time it is called. The more you
        add to x, the faster the target will go.
      Big Game Animation 3_instruction: |
        The update-danger function should work just
        like update-target, except that the danger should move from the right side
        over towards the left. Complete update-danger to make the danger fly across
        the screen.
      Big Game Animation 4_instruction: |
        At this point in your game, your danger
        should run across the screen from right to left, and your target should run
        across from left to right. They don't ever come back on screen once they've
        left, but we'll take care of that later. Take a minute to make sure your
        game is working like you want it to, and then click "Finish" to move on.
      Big Game Booleans 1_instruction: |
        When you last worked on your game we got
        our target and danger sprites to fly across the screen, but they never come
        back. Click "Run" to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Booleans 2_instruction: |
        Go to the Functions section of the toolbox
        and complete the safe-left? function so that it returns true if the sprite's
        x coordinate is greater than -50. If you're successful you should see the
        Danger go off the left side and then return on the right side.
      Big Game Booleans 3_instruction: |
        Now that you've got safe-left?, let's fill
        in safe-right? - it should take in a sprite's x coordinate and return true
        if that coordinate is less than 450. Once your safe-right? is complete you
        should see the Target go off the right side of the screen and return on the
        left.
      Big Game Booleans 4_instruction: |
        Complete the onscreen? function so that it
        checks whether both safe-left? and safe-right? are true.
      Big Game Booleans 5_instruction: |
        At this point your Danger should run across
        the screen from right to left, your Target should run across from left to
        right, and they should both return to the opposite side, repeatedly. Take
        a minute to make sure your game is working like you want it to, and then click
        "Finish" to move on.
      Big Game Collision 1 (copy 1)_instruction: |
        When you last worked on your game
        we got our target and danger sprites to fly across the screen, but they never
        come back. Click run to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Collision 1_instruction: |
        At this point you've programmed a video
        game with a moving Target and Danger, both of which return to the screen once
        they've left, and a Player that responds to keyboard input. Click "Run"
        to see how your game is currently working, and then we'll dig into the final
        missing piece - collision detection!
      Big Game Collision 2_instruction: |
        To move the player up and down, we'll need
        to use a conditional block to figure out which key is pressed and respond
        accordingly. Computers read keypresses as numeric key codes - the up arrow
        is 38 and the down arrow is 40. You can lookup other key codes in your student
        workbook. Edit the 'update-player' function so that if moves the player
        up when the up arrow is pressed, or down when the down arrow is pressed.
      Big Game Collision 3_instruction: |
        Use the Distance Formula, so the distance
        function returns the distance between the player's center coordinates (px,
        py) and another sprite's center coordinates (cx, cy).
      Big Game Collision 4_instruction: |
        Complete the collide? function so that it
        returns true if the distance between two points is less than 100 pixels apart.
      Big Game Complete_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Final_instruction: |
        You made it! At this point your game should be
        fully functioning, take some time to enjoy your new game and make any final
        tweaks to it. When you're happy with the final product, click Finish and
        you'll have an opportunity to share a link to your game. Good work!
      Big Game Player 1_instruction: |
        We're getting really close to a finished game!
        Last time you worked on your game, you used booleans to make your Target and
        Danger return to the screen once they've left. Click Run to see how your
        game looks right now, and then we'll get to making your Player move up and
        down.
      Big Game Player 2_instruction: |
        Edit the update-player function so the player
        moves up when the up arrow (keycode 38) is pressed, and moves down (keycode
        40) when the down arrow is pressed.
      Big Game Testing_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Vars 1 (copy 1)_instruction: |
        Let's get started on your Big Game!
        Here you'll see a whole bunch of placeholder code that you'll eventually
        replace with your own, but for now we're only going to worry about defining
        variables. Click "Run" to see what the game looks like with the default
        values.
      Big Game Vars 1_instruction: |
        Let's get started on your Big Game! Here you'll
        see a whole bunch of placeholder code that you'll eventually replace with
        your own, but for now we're only going to worry about defining variables.
        Click "Run" to see what the game looks like with the default values.
      Big Game Vars 2 (copy 1)_instruction: |
        The first step to making this game your
        own is to give it a good Title. Click edit on the 'title' and 'subtitle'
        variables and change them to something new.
      Big Game Vars 2_instruction: |
        The first step to making this game your own is
        to give it a good Title. Click edit on the title and subtitle variables and
        change them to something new.
      Big Game Vars 3 (copy 1)_instruction: |
        Now let's set the background for your
        new game. Edit the 'bg' variable and select a new background Image from
        the dropdown.
      Big Game Vars 3_instruction: |
        Now let's set the background for your new game.
        Edit the bg variable and select a new background Image from the dropdown.
      Big Game Vars 4 (copy 1)_instruction: |
        Awesome, now you can update the variables
        for your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click 'finish'
        when you're done.
      Big Game Vars 4_instruction: |
        Awesome! Now you can update the variables for
        your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click "Finish"
        when you're done.
      Brad Spooky House Copy_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      Brad Spooky House_instruction: |
        Freeplay: Here are the functions you've written,
        and some more for you to play with. Draw something awesome! Play with the
        pen width to see how different your drawings look!
      Building a Foundation Assessment_instruction: |
        Build a three level pyramid,
        there are no other directions, so just play with the pieces until you get
        it!
      Busy Bee 2_instruction: Sel mesilasel on vaja palju tööd teha! Kas märkad mingeid mustreid, mida saaksid kasutada oma koodi lihtsustamiseks?
      Busy Bee_instruction: Sel mesilasel on vaja palju tööd teha! Kas märkad mingeid mustreid, mida saaksid kasutada oma koodi lihtsustamiseks?
      C3-Farmer While Loops 1_instruction: |
        Move me to the hole and fill it with
        two shovelfuls of dirt, using the "fill" block.
      C3-Farmer While Loops 2_instruction: |
        Move me to the pile of dirt and remove
        it with 5 shovel scoops, using the 'remove' block.
      C3-Farmer While Loops 3_instruction: |
        Move me to the pile and remove all of
        it, then move to the hole and fill it completely.  Hint:  Use as few blocks
        as possible.
      C3-Farmer While Loops 4_instruction: |
        Wow, I found a really deep hole! I don't
        know how many shovelfuls of dirt it needs.  Can you write a program that fills
        it until the ground is even?  Hint:  Try using the while loop this time.
      C3-Farmer While Loops 5_instruction: |
        Wow, now there are two deep holes! Can
        you write a program that fills them both until the ground is even?
      C3-Farmer While Loops 6_instruction: |
        Wow, now there is a large pile of dirt!
        Can you write a program that removes all of it so the ground is even?
      C3-Farmer While Loops 7_instruction: |
        Wow, now there are three piles of dirt!
        Can you write a program that removes each of them until the ground is even?
      C3-Farmer While Loops 8_instruction: |2
         There is a really deep hole and a really
        large pile of dirt.  How many shovelfuls of dirt need to be moved around to
        make the ground flat?  Hint: Use the while loop for both.
      C3-Farmer While Loops Assessment 1_instruction: |
        There are a lot of holes and
        piles.  Help me to fill and remove them to make the ground flat.
      Calc Circles of Eval .1_instruction: |
        You’ll be writing a kind of code called
        Evaluation Blocks, because each block of code evaluates to a single value.
        Change the ??? in this code so that the block evaluates to 5.
      Calc Circles of Eval .2_instruction: |
        This Evaluation Block is a multiplication
        function which takes two numbers and returns the product of those numbers.
        Edit this block so that it multiplies 2 * 5
      Calc Circles of Eval .3_instruction: |
        Here's a function for addition which
        takes two numbers and returns their sum. Use this Addition Block to add 3
        + 6.
      Calc Circles of Eval .4_instruction: |
        Here we've nested an Addition Block
        inside a Multiplication Block. Complete this code so it multiplies 3 by (4
        + 1)
      Calc Circles of Eval 1 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 1_instruction: |
        Every mathematical operator (+, -, *,
        /, and so on) can be represented by an Evaluation Block in code. Change the
        Evaluation Block to match the expression.
      Calc Circles of Eval 2 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 2_instruction: |
        Use a Multiplication Block to complete
        this code.
      Calc Circles of Eval 3_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 4_instruction: |
        This code is missing a couple of Evaluation
        Blocks - make sure you put everything in the right order.
      Calc Circles of Eval 5_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 6_instruction: |
        Complete the Evaluation Blocks to match
        this expression.
      Calc Circles of Eval 7_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 8_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 9_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval Free Play_instruction: |
        Free Play: Try using the Evaluation
        Blocks to write some equations of your own. How does nesting the blocks in
        different ways impact their evaluation?
      Calc Define Funcs 1 (copy 1)_instruction: |
        Let's look at some more algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 1_instruction: |
        Let's look at some more traditional algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 2_instruction: |
        Write a function f that takes a parameter
        x and returns x - 10. Test your function using f(15).
      Calc Define Funcs 3_instruction: |
        We don't have to call our function f every
        time; create a function called times-ten that should take a parameter x and
        return x * 10. Once you've created the function, run times-ten(50).
      Calc Define Funcs 4_instruction: |
        Write a function called half that takes a
        number x and returns half that number. Once you've written the function,
        use it to calculate half(21)
      Calc Define Funcs 5 - multiply 1_instruction: |
        Oh no! We lost our multiply
        block! We'll have to create a function to multiply for us. To start off,
        write a function "f" that takes a parameter "x" and returns x*5. Test
        your function using f(3).
      Calc Design Recipe 1_instruction: |
        Let's use the Design Recipe to create a
        function called cube - this function should take in a Number and return that
        number to the power of 3. Make sure to write two example cases! When you're
        done, use your new function to calculate cube(7).
      Calc Design Recipe 2_instruction: "Your school is holding a bake sale, and\nyou need to track the cost of making each cookie, the money paid, and the\ntotal profit. Cookies cost $0.25 each to make, and sell for $1.50/cookie.\\r\nWrite\nthe function cost, which takes in the number of cookies you intend to sell,\nand returns the cost of making those cookies."
      Calc Design Recipe 3_instruction: |
        Write the function sales which takes in
        the number of cookies sold, and produces the amount of money customers spent
        to buy those cookies (each cookie is sold at $1.50).
      Calc Design Recipe 4_instruction: |
        Using the two functions we just wrote, write
        the function profit, which takes in the number of cookies you sold, and gives
        you back the total profit you make from selling your cookies, accounting for
        the cost of baking them.
      Calc Free Play_instruction: |
        Free Play: Write functions and algorithms of your
        own design!
      Calc Rocket 1 (copy 1)_instruction: "In the last puzzle you wrote a contract\nfor the function \"rocket-height\" that states it has a range of Number, domain\nof Number, and should return the height of the rocket traveling at 15 m/s\nafter a given number of seconds. Let's write an example case now for the\nheight of the rocket at 3 seconds.\\r\n\\r\n\\r\n\\r\n  \\r\n\\r\n"
      Calc Rocket 1_instruction: |
        In the last puzzle you wrote a contract for the
        function rocket-height that states it has a range of Number, domain of Number,
        and should return the height of the rocket traveling at 15 m/s after a given
        number of seconds. Let's write an example case now for the height of the
        rocket at 3 seconds.
      Calc Rocket 2_instruction: |
        Great, let's do one more example before writing
        the function - what should the rocket height be after 30 seconds?
      Calc Vars 1.1_instruction: |
        Here we've set the age variable to 17 years. Can
        you write an expression that calculates age in days?
      Calc Vars 1_instruction: |
        Variables allow us to name values so that we can
        easily refer to them repeatedly throughout our programs. Here's a variable
        called age. Set its value to your age and click run.
      Calc Vars 2 (copy 1)_instruction: |
        Here we've set the "age" variable to
        17 - can you write an expression that calculates "age" in months?
      Calc Vars 2.1_instruction: |
        Here's a new variable called age-in-months. Use
        the variable age to set age-in-months.
      Calc Vars 2_instruction: |
        Can you write an expression that calculates age in
        months?
      Calc Vars 3 (copy 1)_instruction: |
        Can you add to this code so that it calculates
        how many hours there are in "age" years?
      Calc Vars 3_instruction: |
        Can you add to this code so that it uses the "age"
        variable to calculate age in hours?
      Calc Vars 4_instruction: |
        We can also set variables by using other variables.
        Let's say you have a brother who is two years younger than you - can you
        set a new variable "brother-age" using your "age" variable?
      Code Studio Puzzle Challenge 1 - Artist_instruction: |
        Draw the line. It is
        200 pixels long. 
      Code Studio Puzzle Challenge 1 Artist1_instruction: |
        Draw the line. It is 200
        pixels long. 
      Code Studio Puzzle Challenge 10 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get all of the nectar.
      Code Studio Puzzle Challenge 10 - Bee_instruction: |
        Move the Bee to the flower
        and get all of the nectar.
      Code Studio Puzzle Challenge 10b - Bee_instruction: |
        Move the Bee to the flowers
        and get all of the nectar at each.
      Code Studio Puzzle Challenge 11 - Artist_instruction: |
        Draw this line by using
        the variable "length". Each line segment is 75 pixels long.
      Code Studio Puzzle Challenge 11b - Artist_instruction: |
        Draw a square by using
        the variable length provided.
      Code Studio Puzzle Challenge 12 - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 12a - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 13 - Artist_instruction: |
        This is just like a
        "for" loop. Complete the code to draw six lines that grow from 50, 60, 70,
        80, 90, to 100 pixels long. 
      Code Studio Puzzle Challenge 14 - Artist_instruction: |
        This is just like a
        "for" loop. Complete the loop to draw 4 squares that grow from 80, 100,
        120, to 140 pixels. 
      Code Studio Puzzle Challenge 2 - Artist_instruction: |
        Now add a turn and another
        line. The lines are 200 pixels long.
      Code Studio Puzzle Challenge 3 - Artist_instruction: |
        Draw the square. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 4 - Artist_instruction: |
        Draw the octagon. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 5 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get the nectar.
      Code Studio Puzzle Challenge 5 - Bee_instruction: |
        Flowers contain a specific
        amount of nectar. Move the Bee to the flower and collect nectar with the get
        nectar block.
      Code Studio Puzzle Challenge 6 - Bee_instruction: |
        Honeycombs can hold a specific
        amount of honey. Get the nectar from the flower and make some honey.
      Code Studio Puzzle Challenge 7 - Bee_instruction: |
        Move the Bee to the flower
        and get the nectar.
      Code Studio Puzzle Challenge 8 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge 9 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge Artist Screencast (copy 1)_instruction: |
        Draw
        the line. Each segment is 100 pixels long. 
      Code Studio Puzzle Challenge Artist Screencast 2_instruction: |
        Complete the
        code to draw the line. Each segment is 100 pixels long. 
      Code Studio Puzzle Challenge Artist Screencast_instruction: |
        Draw the line.
        Each segment is 100 pixels long. 
      Code Studio Puzzle Challenge Bee Screencast_instruction: |
        Move the Bee to the
        flowers and get all of the nectar.
      Code Studio Puzzle Challenge Square - Artist_instruction: |
        Draw a square by
        using the variable length provided.
      Code Studio Puzzle Challenge Var - Artist_instruction: |
        Draw a line by using
        a variable "length" set to 180.
      Course 2 Bee Loops 1_instruction: |
        Hi, I'm a bee. Can you help me collect
        the nectar from these flowers? 
      Course 2 Bee Loops 13_instruction: |
        Assessment: Use the repeat block to collect
        all of the nectar.
      Course 2 Bee Loops 2_instruction: |
        Can you do the same task more easily with
        a loop?
      Course 2 Bee Loops 3_instruction: |
        Now use the new repeat block to collect
        all of the nectar and make all of the honey.
      Course 2 Bee Loops 3__instruction: |
        Can you use a loop to collect all that
        nectar?
      Course 2 Bee Loops 4_instruction: |
        What happens if you loop this sequence 3
        times? Don't forget to make the honey at the end!
      Course 2 Maze Loops 1_instruction: Kas oskad mind viit plokki kasutades põrsa juurde viia?
      Course 4 2_instruction: Mesilane tahab praegu ainult nektarit. Pea meeles, et kõik objektid pole lilled, seega jälgi, et nektarit kogutaks vaid lilledest.
      Course 4 Artist 1_instruction: 'Aita mul joonistada kast. (Iga joon on 200 piksli pikkune) '
      Course 4 Artist 10_instruction: "Klõpsa siia, et uuesti vihjeid vaadata!\\r \\r Siin on kood huvitava kuju tegemiseks.  Mis juhtub, kui kordad seda mitu korda, pöörates iga korduse järel?   Arvesta sellega, et selle kujundi pöörded annavad kokku 420 kraadi, nii et kunstnik on joonistamist lõpetades näoga teise suunda kui alguses.  See uus suund on täpselt 60 kraadi algsuunast paremale."
      Course 4 Artist 11_instruction: Nüüd aga väljakutse! Siin on disain, milles kasutatakse ainult neid plokke, mida sa oled juba näinud. Kas oskad välja mõelda, kuidas seda korrata? Katseta julgelt katse-eksituse meetodil. Sa ei pea kohe esimese korraga ideaalset tulemust saama. Kas tahad veel vihjeid näha? Klõpsa siia!
      Course 4 Artist 12_instruction: "Kas soovid veel korra vaadata näidisdisaini või vihjeid?  Klõpsa siia!\\r \\r Võid aga ka teha täiesti omaenda disaini!"
      Course 4 Artist 13_instruction: Kas mängid ikka veel? Siin on tühi lõuend, kus saad disainida ükskõik mida!
      Course 4 Artist 2_instruction: Kas oskad seda koodi korrata, et joonistada tumendatud ruut?
      Course 4 Artist 20_instruction: Kas mängid ikka veel? Siin on tühi lõuend, kus saad luua ükskõik mida!
      Course 4 Artist 3_instruction: 'Proovi aru saada, mis juhtub selle koodi käivitamisel (või klõpsa nuppu "Käivita", et proovida). Seejärel käivita nii mitu korda, et lõpetada joonistus.'
      Course 4 Artist 4_instruction: Mitu kraadi on ringis? Lisa see number kordamise plokki, et luua värvide ring.
      Course 4 Artist 5_instruction: 'Joonista selle disaini teine pool, nii et see oleks sümmeetriline. Kolmnurgad on võrdkülgsed ja nende pikkus on 50 pikslit. Vihje: vajadusel käivita koodi mitu korda, et mõelda välja kõik plokid, mis tuleb lisada.'
      Course 4 Artist 6_instruction: 'Lõpeta kood nende kolmnurkade joonistamiseks. Vihje: seal on 3 kolmnurka 360-kraadises pöördes... mitu korda mahub 3 360-sse?'
      Course 4 Artist 7_instruction: 'Nüüd pesasta see kordus teise korduse sisse, et joonistada 10 kolmnurka. Seda nimetatakse korduvaks tsükliks. Vihje: kõik 10 kolmnurka annavad 360-kraadise pöörde.'
      Course 4 Artist 8_instruction: Joonista see päike, korrates seda koodiplokki mitu korda.
      Course 4 Artist 8a_instruction: "Kas mäletad seda kujundit? Nüüd laseme sul selle luua nii, et me ei anna sulle alguses ette ühtegi plokki!\\r Vihje: 360-kraadises pöördes on 3 kolmnurka... mitu korda mahub 3 360-sse?"
      Course 4 Artist 9_instruction: 'Korda seda disaini 10 korda ja pööra kindlasti iga joonistatud kujundi järel. Siin on vihje vajaliku pöörde leidmiseks: kui palju on 360 jagatud 10-ga?'
      Course 4 Artist Binary 1_instruction: "Siin on funktsioon, mis võtab ühtedest ja nullidest koosneva kahendstringi ja juhendab kunstnikku neid järgima vasakult paremale, ülevalt alla.  Kui kunstnik näeb ühte, täidab ta ruudud, ja kui ta näeb nulli, jätab ta need vahele. \\r \\r Käivita see kood, et näha, kuidas kunstnik kasutab kahendkoodi selle mustri joonistamiseks."
      Course 4 Artist Binary 1a_instruction: "Siin on funktsioon, mis võtab ühtedest ja nullidest koosneva kahendstringi ja juhendab kunstnikku neid järgima vasakult paremale, ülevalt alla.  Kui kunstnik näeb ühte, täidab ta ruudud, ja kui ta näeb nulli, jätab ta need vahele. \\r \\r Käivita see kood, et näha, kuidas kunstnik kasutab kahendkoodi selle mustri joonistamiseks."
      Course 4 Artist Binary 2_instruction: Millist neist kahendstringidest saad sa 8 korda korrata, et joonistada see pilt?
      Course 4 Artist Binary 3_instruction: Kas oskad selle mustri joonistada, korrates kolmekohalist kahendstringi?
      Course 4 Artist Binary 4_instruction: Iga kahendstring tähistab üht selle pildi rida. Kas oskad need ümber korraldada nii, et see joonistaks kurva näo asemel naeratava näo?
      Course 4 Artist Binary 5_instruction: Milline kuuekohaline kahendstring joonistab 11 korda korratuna selle pildi?
      Course 4 Artist Binary 6_instruction: Milline on lühim kahendstring, mida sa saad selle pildi joonistamiseks korrata?
      Course 4 Artist Binary 7_instruction: Lõpeta see joonistus.
      Course 4 Artist Binary Free Play 2_instruction: 'Vaba mäng: Siin on valge leht, millele saad joonistada. Hea joonistamist!'
      Course 4 Artist Binary Free Play 2a_instruction: "Siin on joonistamiseks suurema eraldusvõimega lõuend – 16 korda 16 pikslit!\\r \\r Kas näed, mis juhtub, kui hakkame bittidesse loominguliselt suhtuma?"
      Course 4 Artist Binary Free Play 2b_instruction: Kliki siia, et näha vihjeid.
      Course 4 Artist Binary Free Play_instruction: 'Vaba mäng: Joonista ükskõik mida soovid, kuid kasuta selleks binaarseid võimalusi!'
      Course 4 Artist Binary pre1_instruction: "Kahendkood ehk binaar võimaldab andmeid tähistada, kasutades selleks ainult kaht olekut või tähist. Siin kasutame olekuid „väljas“ (tähistatuna numbriga 0) ja „sees“ (tähistatuna numbriga 1).  \\r \\r Tegime sulle „pikslitest“ koosneva ruudustiku, millel sa saad liikuda ja disaine luua, pöörates ainult teatud ruutudel.  Kas oskad teha nii, et kunstnik joonistaks esimesel real kahendkoodis „01010101“?"
      Course 4 Artist Binary ryan_instruction: "Kahendkood ehk binaar võimaldab andmeid tähistada, kasutades selleks ainult kaht olekut või tähist. Siin kasutame olekuid „väljas“ (tähistatuna numbriga 0) ja „sees“ (tähistatuna numbriga 1).  \\r \\r Tegime sulle „pikslitest“ koosneva ruudustiku, millel sa saad liikuda ja disaine luua, pöörates ainult teatud ruutudel.  Kas oskad teha nii, et kunstnik joonistaks esimesel real kahendkoodis „01010101“?"
      Course 4 Artist For  Functions 10_instruction: Proovime nüüd midagi pisut raskemat. Kas oskad joonistada tähe, kasutades funktsiooni „joonista sirgjoon“? Jõudu tööle!
      Course 4 Artist For  Functions 11_instruction: Proovime nüüd midagi pisut raskemat. Kas oskad joonistada tähe, kasutades funktsiooni „joonista sirgjoon“? Jõudu tööle!
      Course 4 Artist For Loops 1_instruction: 'Joonista kolmnurk, mis on 50 pikslik lai. Vihje: Kasuta korduse plokki.'
      Course 4 Artist For Loops 10_instruction: Vaba mäng! Joonista mida iganes soovid plokkidega, mille kasutamise oled selgeks saanud
      Course 4 Artist For Loops 11_instruction: 'Kas mäletad, kui kasutasime ühes eelmises etapis muutujat kujundi külgede arvu juhtimiseks? Nüüd teeme sama muutujaga „loendur“. See muster alustab kolmnurgaga ja lisab korraga ühe külje, kuni valmib kümmenurk (10 külge). Iga külg peab olema 100 piksli pikkune. Vihje: 360 jagatud kujundi külgede arvuga annab kraadide arvu, mille võrra tuleb pöörata.'
      Course 4 Artist For Loops 11a_instruction: "Paneme nüüd kõik selle kokku! Kasuta oma teadmisi korduste arvu tsüklite ja loenduri kohta, et luua see joonistus, kus igal kujundil on eelmisega võrreldes kaks külge rohkem. Iga külg peab olema 10 korda pikem kui hulknurga külgede arv.\\r \\r Pisut koodi on sulle juba ette antud."
      Course 4 Artist For Loops 12_instruction: 'See oli päris äge, aga nüüd tahaksin joonistada kõik kujundid eelmise kujundi kõrvale. Iga külje pikkus on nüüd 20 pikslit. Kasuta plokki „hüppa“, et hüpata iga kujundi järel 40 pikslit edasi. '
      Course 4 Artist For Loops 13_instruction: Need kujundid lähevad iga korraga aina suuremaks! Kas me juba ei lahendanud seda probleemi muutujatega? Kuidas saame kasutada loenduri muutujat, et muuta küljed väiksemaks, kuna neid on rohkem? Määratud hulga võrra edasi liikumise asemel proovi liikuda edasi (100/loendur) piksli võrra.
      Course 4 Artist For Loops 14_instruction: Kui pöörate kujundit tehes natuke rohkem või vähem, saad kena efekti. Proovi kasutada osa eelmise taseme koodi, kuid pööra 89 kraadi, et luua see väänatud ruuduspiraal.
      Course 4 Artist For Loops 15_instruction: 'Vaba mäng: proovi korduste arvu tsüklite abil teha omaenda joonistusi. Lisasime sinu jaoks ka paar kasulikku muutujat.'
      Course 4 Artist For Loops 2_instruction: Panin tsükli sisse kolmnurga joonistamise koodi, mis loendab kümne kaupa 50...100. MÄRKUS. Vaata kood kindlasti üle, enne kui klõpsad käsku „Käivita“.
      Course 4 Artist For Loops 3_instruction: Kasuta selle mõistatuse lahendamiseks abimaterjalina eelmist mõistatust. Kõige väiksema kolmnurga külgede pikkus on 20 pikslit, kõige suurema külgede pikkus on 200 pikslit ja iga kolmnurk on eelmisest 20 piksli võrra pikem.
      Course 4 Artist For Loops 4_instruction: Kuidas muudaksid õpitut nende ruutude joonistamiseks? Need algavad 15 piksli pikkuse küljega, kõige suurem küljepikkus on 300 pikslit ja iga ruudu küljepikkus on eelmisest 15 pikslit suurem.
      Course 4 Artist For Loops 5_instruction: 'Olid viimase mõistatuse lahendamisel väga tubli! Kasutame nüüd uuesti seda loenduri muutuja plokki, et joonistada see äge pilt. '
      Course 4 Artist For Loops 6_instruction: Vaba mäng! Kasuta kordust, et joonistada kasvav muster.
      Course 4 Artist For Loops 6a_instruction: Selleks tee kolm väikest muudatust eelmise taseme koodis!
      Course 4 Artist For Loops 7_instruction: Mis juhtub, kui eemaldad sellest algoritmist osa „Korda 3 korda“, säilitades korduste arvu tsüklis plokid „liiguta“ ja „pööra“? Selles kolmnurgaspiraalis on iga külg eelmisest 20 pikslit pikem.
      Course 4 Artist For Loops 8_instruction: "Selle joonistuse saab luua, muutes eelmise pildi koodis ainult üht väikest asja. Kas saad aru, mida peaks muutma?\\r \\r Vihje: sa pead midagi eemaldama!"
      Course 4 Artist For Loops 8a_instruction: Selle pildi saab luua, muutes eelmise pildi koodis ainult üht väikest asja. Kas saad aru, mida peaks muutma?
      Course 4 Artist For Loops 9_instruction: Kas oskad spiraali teha? Liigu edasi 1-st 75 pikslini, lisades iga kord ühe piksli.
      Course 4 Artist For Loops Challenge_instruction: "Kas saad aru, kuidas kasutada kõiki õpitud asju selle pildi loomiseks?\\r \\r Vajad vihjet? Klõpsa siia."
      Course 4 Artist For Loops inspire_instruction: "Vaba mängu inspiratsioon: oled nüüd õppinud kõike, mida on vaja sellise mustri tegemiseks! Kui see pilt sulle meeldib, proovi luua midagi sarnast. Muidugi võid ka luua täiesti omaenda disaini.\\r \\r Vajad vihjet? Klõpsa siia."
      Course 4 Artist Functions 1_instruction: Kas oskad joonistada 100 piksli pikkuse ruudu, kasutades tsüklit?
      Course 4 Artist Functions 10_instruction: Milline plokk tuleb lisada, et saada kolmnurk ruudu peale?
      Course 4 Artist Functions 11_instruction: 'Vaata koodi, mis joonistab kuubi - saad selle liigutada funktsiooni "Joonista kuub"'
      Course 4 Artist Functions 12.1_instruction: Loome funktsiooni nimega „joonista kaheksanurk 20“, mis joonistab kaheksanurga, kus iga külje pikkus on 20 pikslit.
      Course 4 Artist Functions 12_instruction: Kasuta ruudu funktsiooniga tsüklit joone joonistamiseks
      Course 4 Artist Functions 13.1_instruction: "Teeme nüüd funktsiooni nimega „hüppa üles paremale“, mis liigutab kunstniku just joonistatud kaheksanurga ülemisse parempoolsesse nurka, nii et saame selle mustri lõpetada.\\r \\r Vihje: ülemisse parempoolsesse nurka jõudmiseks proovi hüpata mustris, mis moodustab ainult 3/8 kaheksanurgast."
      Course 4 Artist Functions 13_instruction: Vaata, meil on uus funktsioon nimega „joonista ruutude rida“! Vaata funktsiooniplokist, kuidas me seda tegime. Kui oled järgmiseks mõistatuseks valmis, klõpsa käsku „Käivita“.
      Course 4 Artist Functions 14.1_instruction: Teeme nüüd funktsiooni nimega „hüppa üles paremale“, mis liigutab kunstniku just joonistatud kaheksanurga ülemisse parempoolsesse nurka, nii et saame selle mustri lõpetada.
      Course 4 Artist Functions 14_instruction: Sa oled tubli! Kasuta nüüd oma uut funktsiooni „joonista ruutude rida“, et joonistada ruudu kujund. Pea meeles, et iga ruudu pikkus on 40 pikslit.
      Course 4 Artist Functions 15_instruction: 'Proovime nüüd midagi pisut raskemat. Kas oskad joonistada tähe, kasutades funktsiooni „joonista ruutude rida“? Jõudu tööle! Vihje: vajadusel pead pöörama 144 kraadi.'
      Course 4 Artist Functions 2_instruction: 'Kas oskad joonistada 3 ruutu, mis asuvad üksteisest 20 piksli kaugusel? Vihje: iga ruudu suurus on 100 pikslit'
      Course 4 Artist Functions 3_instruction: "Kas oskad joonistada selle pildi, kasutades funktsiooniplokki „joonista ruut“? Vihje: ruutude vahe on 120 pikslit.\\r"
      Course 4 Artist Functions 4_instruction: 'Kas oled valmis looma omaenda funktsiooniplokki? Klõpsa tööriistakastis plokki „Funktsioonid“, pane sellele nimeks „joonista kolmnurk“ ja loo siis kolmnurk, nagu sa tegid varem tegevuse ja tsüklite plokkidega. Seejärel klõpsake parempoolses ülemises nurgas käsku Salvesta ja sule. Vihje: loo 100-pikslise küljepikkusega kolmnurk. Jõudu!'
      Course 4 Artist Functions 5 OLD_instruction: Proovime kasutada meie kaht funktsiooni maja joonistamiseks. Mida peab selles koodis parandama, et joonistada korralik maja?
      Course 4 Artist Functions 5_instruction: "Kas oskad joonistada selle pildi, kasutades funktsiooniplokki „joonista ruut“? Vihje: ruutude vahe on 120 pikslit.\\r"
      Course 4 Artist Functions 6_instruction: Milline plokk tuleb lisada, et saada kolmnurk ruudu peale?
      Course 4 Artist Functions 7_instruction: Kas oskad joonistada ruutudest joone, kasutades ruudu funktsiooni? Iga ruudu pikkus on 40 pikslit.
      Course 4 Artist Functions 8_instruction: 'Kas saad aru, kuidas kasutada funktsiooniplokke? Muudame seda ruutu nii, et selle suurus oleks 200 pikslit. Vihje: klõpsa nuppu „redigeeri“, et muuta funktsiooniredaktori „joonista ruut“ suurust. Funktsiooniredaktorist väljumiseks klõpsa käsku „salvesta ja sule“.'
      Course 4 Artist Functions 9_instruction: Andsime sulle ette suurema osa koodist funktsiooni loomiseks. Paistab, et midagi on siiski puudu. Kas oskad selle funktsiooniploki lõpetada?
      Course 4 Artist Functions challenge_instruction: Kliki siia ja vaata vihjeid uuesti.
      Course 4 Artist Functions Inspiration_instruction: Kliki siia ja vaata vihjeid uuesti.
      Course 4 Artist Functions inspire_instruction: Klõpsa siia, et näidispilti uuesti vaadata.
      Course 4 Artist Inspire_instruction: "Kas soovid veel korra vaadata näidisdisaini või vihjeid?  Klõpsa siia!\\r \\r Võid aga ka teha täiesti omaenda disaini!"
      Course 4 Artist Params 1_instruction: Muudame funktsiooni, mis joonistab ruudu, mille külg on 50 pikslit
      Course 4 Artist Params 10_instruction: 'Saad kutsuda funktsioone teiste funktsioonide seest! Võta aluseks oma funktsioon „kujund“ ja loo 3 majakujundit, millest esimene on 50 piksli suurune ja igaüks on eelmisest 20 pikslit suurem. Abiks võib olla loenduri tsükli kasutamine. '
      Course 4 Artist Params 11_instruction: |
        How about a function called "pinwheel"
        that takes three parameters - "sides," "length" and "repeat." You can
        calculate how much to turn after each shape using the same math you used to
        figure out the turns for a shape of "sides". Can you recreate this picture?
        Here's a tip each shape is 100 pixel's in length.
      Course 4 Artist Params 12_instruction: Kasuta nende kujundite joonistamiseks oma funktsiooni „tuuleratas“. Iga pildi küljepikkus on 50.
      Course 4 Artist Params 13_instruction: 'Vaba mäng: Siin on funktsioonid, mille oled kirjutanud ning veel mõned, millega saad mängida. Joonista midagi ägedat!'
      Course 4 Artist Params 2_instruction: |
        That triangle function would be a whole
        lot more useful if it could draw triangles of different sizes. I've added
        a parameter for line length, but it doesn't do anything yet. Can you update
        the function so it uses the "length" parameter when it draws each side?
        The triangle sizes are 150 pixels, 75 pixels and 25 pixels.
      Course 4 Artist Params 3_instruction: 'Tore! Kas oskad selle uue funktsiooniga joonistada neid kolmnurki? Esimese pikkus on 25, teise pikkus 50 ja kolmanda pikkus 75 pikslit. '
      Course 4 Artist Params 4_instruction: Kas oskad lisada uue funktsiooni nimega „ruut“? Sarnaselt kolmnurgaga peaks selles kasutama ka pikkuse parameetrit. See kord joonista 3 ruutu küljepikkustega 25, 50 ja 75, ruutude vahekaugus 100 pikslit.
      Course 4 Artist Params 5_instruction: Kasuta selle pildi joonistamiseks oma mõlemat uut funktsiooni. Saad seda lihtsamalt teha, kasutades tsüklit parameetriga „loendur“.
      Course 4 Artist Params 6_instruction: 'Muudame seda kujundi joonistamise funktsiooni. Selles on juba parameeter „pikkus“. Lisame nüüd funktsioonile ka parameetri „küljed“. Pea meeles, et pöördenurk on antud kujundi puhul 360 jagatuna kujundi külgede arvuga. Vihje: kujundite pikkused: kolmnurk 100 pikslit, kuusnurk 25 pikslit ja ruut 50 pikslit. '
      Course 4 Artist Params 7_instruction: 'Kas oskad need kujundid joonistada koha „???“ täitmise teel? Ruudu ja kolmnurga suurus on 100 pikslit, kuusnurga suurus on 75 pikslit. '
      Course 4 Artist Params 8_instruction: 'Kas oskad välja mõelda, kuidas seda kujundit joonistada? Väike vihje: loo uus 6 küljega funktsioon, mille nimi on kuusnurk.'
      Course 4 Artist Params 9_instruction: Kas mäletad, kui me kasutasime loenduri tsüklit, kuid eemaldasime sisemise tsükli? Teeme asja huvitavamaks ja kasutame kujundi joonistamise funktsiooni parameetritega „küljed“ ja „pikkus“. Kas oskad need kujundid uuesti luua? Ruudu loendur peab olema 5/100/5, kolmnurga loendur 10/100/10 ja kuusnurga loendur 2/100/2.
      Course 4 Artist Var 9_instruction: 'Siin on algoritm kolmnurga joonistamiseks. Muuda seda nii, et see kasutaks hoopis muutujat „küljed“. Asenda number 3 muutujaga „küljed“. Vihje: kasuta plokki „määra küljed“.'
      Course 4 Artist Vars 1_instruction: Kas oskad mind aidata võrdkülgse kolmnurga joonistamisel? Selle kõigi külgede pikkus peab olema 100 pikslit.
      Course 4 Artist Vars 10_instruction: Siin on algoritm, mis joonistab väiksematest kolmnurkadest kolmnurga. Kas oskad seda nii muuta, et see kasutaks iga kolmnurga joonistamiseks muutujat „küljed“? Vaata kood läbi ja iga kord, kui näed numbrit 3, asenda see oma muutujaga „küljed“. Kasuta kindlasti plokki „määra küljed“.
      Course 4 Artist Vars 11_instruction: Siin on keerulisem kood, mis kasutab eelmise mõistatuse põhimõtteid. Mis sa peaksid määrama muutujaks „küljed“, et joonistada see pilt ruutudest?
      Course 4 Artist Vars 12_instruction: Määrame muutuja „küljed“ väärtuseks 5. Mida rohkem külgi me sellele algoritmile lisame, seda suuremaks kogu muster muutub! Pane tähele, et seal on ka teine muutuja nimega „pikkus“. Saame seda nüüd kasutada igal pool, kus meil on funktsioon „liigu edasi“. Määra selle kujundi muutuja „pikkus“ väärtuseks 75.
      Course 4 Artist Vars 13_instruction: "Kui kujundil on palju külgi, siis kogu mustri ekraanile mahutamiseks peab iga külg olema lühem. \\r Loome uuesti selle võrratu mustri algoritmi, kuid käsitsi määratava muutuja „pikkus“ asemel kasutame matemaatikaplokki muutujaga „küljed“, et kõik kujundid mahuksid ekraanile ära. Iga hulknurga ümbermõõt on 300 pikslit.\\r Kas vajad vihjeid? Klõpsa siia."
      Course 4 Artist Vars 14_instruction: "Vaba mäng: katseta! Nüüd on sinu algoritm pesastatud veel ühes tsüklis. Proovi muuta oma kahe muutuja väärtusi, et joonistada ägedaid mustreid.\\r \\r Veel uhkema efekti saamiseks proovi lisada ka värve!  Kasuta tsüklites juhuslikke värve, et näha, kuidas see su disaini muudab."
      Course 4 Artist Vars 2_instruction: Funktsiooni „liigu edasi 150 võrra“ viitab plokk „liigu“ nüüd muutujale „pikkus“. Kas oskad määrata muutuja „pikkus“ väärtuseks 150, et joonistada see uus kolmnurk?
      Course 4 Artist Vars 3_instruction: 'Siin on tsükkel, mis joonistab ruudu, kuid midagi on puudu. Kas oskad selle korda teha, nii et see kasutaks muutujat „pikkust“ külgede pikkuse määramiseks? '
      Course 4 Artist Vars 4_instruction: Nüüd soovin teha nelinurga, mille kõrgus oleks laiusest kaks korda suurem. Meil on muutuja nimega „laius“, mille väärtuseks peab määrama 100. Kas oskad selle koodi lõpetamiseks kasutada matemaatikaplokke?
      Course 4 Artist Vars 5_instruction: Kasuta muutujat „küljed“, et juhtida selle tsükli käivitamiste arvu.
      Course 4 Artist Vars 6_instruction: "Siin on kood, millega saab joonistada korrapäraseid hulknurki. Siin on uus muutuja nimega „küljed“, mille väärtuseks on määratud 4. Kas oskad kasutada külgede muutujat (koos matemaatikaplokiga), et pöörata õige nurga võrra olenemata sellest, kui palju külgesid hulknurgal on?\\r \\r Klõpsa siia, et minna tagasi vihje juurde!"
      Course 4 Artist Vars 7_instruction: "Kasuta seda, mis sa eelmises mõistatuses õppisid, et luua see kuusnurk muutuja „küljed“ abil.\\r \\r Kas näed, kuidas saad ainult üht väärtust muutes joonistada kolmnurga, nelinurga, viisnurga või kaheksanurga?"
      Course 4 Artist Vars 8_instruction: 'Vaba mäng: katseta selle kujundi külgede arvuga. Kas oskad algoritmi nii muuta, et kujundi üldine suurus jääks samaks olenemata sellest, kui palju külgi sellel on? Vihje: kui jagad oma lähtepikkuse külgede arvuga, muutub iga külje pikkus külgede arvu suurenedes lühemaks.'
      Course 4 Artist Vars 9_instruction: Muuda seda algoritmi nii, et see kasutaks kolmnurga joonistamiseks kindla arvu asemel muutujat „küljed“. Ära unusta kasutada plokki „määra küljed“.
      Course 4 Bee 1_instruction: 'Mesilane ei tea, mis on pilve all! Kasuta plokki „kui“, et kontrollida, kas pilve all on lill. Kogu nektarit ainult siis, kui seal on lill. '
      Course 4 Bee 2_instruction: Kasuta „kui/teine“ plokki, et kontrollida iga objekti puhul, kas see on lill või meekärg. Kui see on lill, kogu nektarit; kui ei ole, tee mett!
      Course 4 Bee 3_instruction: 'Tundmatu objekt on kas lill või meekärg. See kord kasuta "kui/teine" plokki, et koguda nektarit, kui tegemist on lillega; muidu tee mett (kuna siis on tegu meekärjega).'
      Course 4 Bee 4_instruction: Sellel lillal lillel on kas 3, 2 või 1 nektarit. Siin on „kui/teine“ plokk kombineeritud teise „kui/teine“ plokiga, et luua avaldis „kui/teine-kui/teine“. Lõpeta ülesanne, et koguda tundmatu hulk nektarit.
      Course 4 Bee 5_instruction: Sellel lillal lillel on kas 3, 2 või 1 nektarit. Lisa „kui-teine“ plokk, et luua plokid „kui“, „teine-kui“, „teine“. Lõpeta ülesanne, et koguda tundmatu hulk nektarit.
      Course 4 Bee 6_instruction: Sellel lillal lillel on kas 3, 2 või 1 nektarit. Loo plokid „kui“, „teine-kui“, „teine“, et koguda tundmatu hulk nektarit.
      Course 4 Bee 7_instruction: Kasuta kõike seniõpitut, et koguda kokku kogu nektar. Lillal lillel võib olla nektareid 3, 2 või 1.
      Course 4 Bee For Loops 1_instruction: Kasuta tsüklit, et koguda nektarit igalt lillelt.
      Course 4 Bee For Loops 10_instruction: Kui tsüklis loendatakse kahanevalt, lahutatakse juurdekasv igas tsüklis sinu loenduri muutujast. Milline peab juurdekasv olema, et koguda 8, siis 6 ja 3 nektarit?
      Course 4 Bee For Loops 11_instruction: Mis on selles tsüklis valesti? Vaata, kas oskad selle korda teha ja aidata mesilasel kogu nektari kokku koguda.
      Course 4 Bee For Loops 2_instruction: Siin on uus tsükkel nimega „korduste arv“. See on tsükli jaoks, mis loendab ühe kaupa ühest viieni ja käivitab igal loendamise korral tsükli sisu. Aita mesilasel nektarit koguda.
      Course 4 Bee For Loops 3_instruction: Saad selle mõistatuse lahendada, kasutades korduste arvu tsüklit, mis loendab ühe kaupa 1...3. Lähme nüüd nektarit koguma!
      Course 4 Bee For Loops 4_instruction: Kogu neist lilledest kokku kogu nektar. Huvitav, kas seda saaks teha lihtsamalt...
      Course 4 Bee For Loops 5_instruction: 'Muidugi, korduste arvu tsükkel teeb selle palju lihtsamaks! Korduste arvu tsükli muutujat „loendur“ saab kasutada nektari kogumise ploki kordamiseks sama palju kui korratakse tsüklit. Huh, küll on alles palju kordusi! Kõik vajalik kood on seal olemas. Vaata, kuidas see on koostatud, ja klõpsa siis käsku „Käivita“, et näha, kuidas see töötab. '
      Course 4 Bee For Loops 6_instruction: Saad korduste arvu tsüklit kasutada ka kahanevaks loenduseks. Proovi nektarit koguda, loendades ühe kaupa 5...1.
      Course 4 Bee For Loops 7_instruction: Kasuta oma korduste arvu tsükli muutujat „loendur“, et määrata, kui kaugele liigutakse horisontaalsuunas.
      Course 4 Bee For Loops 8_instruction: Kas oskad kasutada tsükli muutujat, et juhtida liikumist ja nektari kogumist?
      Course 4 Bee For Loops 9_instruction: Sinu korduste arvu tsükli viimane number on nimega „juurdekasv“. Iga kord, kui tsüklit käitatakse, muutub loenduri muutuja selle numbri võrra. Proovi neist lilledest nektarit koguda, kasutades juurdekasvu 2.
      Course 4 Bee Loops 5 NEW_instruction: Siin on kolm lille. Kas leiad juhiste mustri, mida pead kordama kolm korda, et koguda nektar vähima võimaliku arvu plokkidega?
      Course 4 Bee Loops 5a NEW_instruction: Kasuta nüüd tsükleid, et aidata mesilasel võimalikult väikese arvu plokkidega koguda kogu nektar teel meekärje juurde. Kui sa sinna jõuad, ära unusta mett teha!
      Course 4 Bee Params 1_instruction: Kasuta funktsiooni „too 3 nektarit“, mis pöörab, liigub nektarit koguma ja tuleb siis tagasi algpunkti. Kirjuta jada kogu nektari kogumiseks funktsiooniga „too 3 nektarit“.
      Course 4 Bee Params 2_instruction: Muuda funktsiooni „too 3 nektarit“ nii, et see pööraks mind lilledest mitte vasakule, vaid paremale.
      Course 4 Bee Params 3 (copy 1)_instruction: Nüüd on lilled mõlemal pool! Äkki saad kasutada mõnda parameetrit, et sama funktsioon töötaks ükskõik kumma poole lilledega. Lisasin funktsioonile parameetri nimega „suund“. Kui parameetri „suund“ väärtus on 0, pööran ma vasakule; kui see on 1, pööran ma paremale.
      Course 4 Bee Params 3_instruction: 'Nüüd on lilled mõlemal pool! Lisasime sinu jaoks muutujad „vasakule“ ja „paremale“ ning funktsioonile „too 3 nektarit“ parameetri „suund“. Muuda funktsiooni „too 3 nektarit“ nii, et mesilane pööraks õiges suunas, kui funktsioonile edastatakse muutujad „vasakule“ või „paremale“. '
      Course 4 Bee Params 4 (copy 1)_instruction: Proovi kasutada oma uut funktsiooni nektari kogumiseks kõigist lilledest. Pea meeles, et 0 = vasakule ja 1 = paremale.
      Course 4 Bee Params 4 - Two WhenRun_instruction: Proovi kasutada oma uut funktsiooni kõigist lilledest nektari kogumiseks. Kasuta kindlasti muutujaid „vasakule“ ja „paremale“.
      Course 4 Bee Params 4 backup_instruction: Oleks ju tore, kui saaksime koguda kogu nektari ühe funktsiooniga? Proovi lisada oma funktsioonile uus parameeter nimega „nektarid“, et määrata kogutava nektari hulk. Funktsioonile tasub anda ka uus nimi.
      Course 4 Bee Params 4_instruction: Proovi kasutada oma uut funktsiooni nektari kogumiseks kõigist lilledest. Kasuta kindlasti muutujaid „vasakule“ ja „paremale“.
      Course 4 Bee Params 5_instruction: 'Alustame algusest - kas sa saad luua uue funktsiooni nimega " saa 5 nektarit" millele annad suuna parameetri?'
      Course 4 Bee Params 6 (copy 1)_instruction: Proovi kasutada oma funktsiooni kogu nektari kogumiseks.
      Course 4 Bee Params 6_instruction: Oleks ju tore, kui saaksime koguda kogu nektari ühe funktsiooniga? Proovi lisada oma funktsioonile uus parameeter nimega „nektariühikud“, et määrata kogutava nektari hulk. Funktsioonile tasub anda ka uus nimi.
      Course 4 Bee Params 7 (copy 1)_instruction: Proovi kasutada oma funktsiooni kogu nektari kogumiseks.
      Course 4 Bee Params 7_instruction: Proovi kasutada oma funktsiooni kogu nektari kogumiseks.
      Course 4 Bee Params 8 Clone 2_instruction: Ohoo, nüüd on meil lisandunud mesi! Kuidas saaksid oma funktsiooni nii muuta, et sellega kas kogutaks nektarit või tehtaks mett?
      Course 4 Bee Params 8 clone 3_instruction: Ohoo, nüüd on meil lisandunud mesi! Kuidas saaksid oma funktsiooni nii muuta, et sellega kas kogutaks nektarit või tehtaks mett?
      Course 4 Bee Params 8 Clone_instruction: Ohoo, nüüd on meil lisandunud mesi! Kuidas saaksid oma funktsiooni nii muuta, et sellega kas kogutaks nektarit või tehtaks mett?
      Course 4 Bee Params 8 new_instruction: Ohoo, nüüd on meil lisandunud mesi! Kuidas saaksid oma funktsiooni nii muuta, et sellega kas kogutaks nektarit või tehtaks mett?
      Course 4 Bee Params 8_instruction: 'Väljakutse: nüüd on lisandunud ka mesi! Kirjuta oma funktsioon ümber, et kasutada korraga meeühikute arvu ja nektariühikute arvu. Kuidas saad neid numbreid kasutada, et otsustada, mida teha?'
      Course 4 Bee Params Ex_instruction: Proovi kasutada oma funktsiooni kogu nektari kogumiseks.
      Course 4 Binary 1_instruction: Siin on funktsioon, mis võtab ühtedest ja nullidest koosneva kahendstringi ja juhendab talunikku pöörama käigu pealt vasakult paremale, ülevalt alla ja pöörama ruutudel, kus numbris on null. Käivita kood, et näha, kuidas talunik kasutab kahendkoodi pildi joonistamiseks.
      Course 4 Binary 2_instruction: 'Millist kahendstringi saaksid sa 8 korda korrata selle pildi joonistamiseks? Vihje: number 1 täidab augu.'
      Course 4 Binary 3_instruction: Kas oskad selle mustri joonistada, korrates üht kahendstringi?
      Course 4 Binary 5 (copy 1)_instruction: Milline kahendstring joonistab 10 korda korratuna selle pildi?
      Course 4 Binary 5_instruction: Milline kahendstring joonistab 10 korda korratuna selle pildi?
      Course 4 Binary 6 (copy 1)_instruction: Milline kahendstring joonistab 10 korda korratuna selle pildi?
      Course 4 Binary 6_instruction: Milline kahendstring joonistab 10 korda korratuna selle pildi?
      Course 4 Binary 7_instruction: Milline kahendstring joonistab 10 korda korratuna selle pildi?
      Course 4 Binary 8_instruction: Saad enamiku pildist valmis teha, korrates viiebitist kahendarvu. Siis on sul vaja ainult üht neljabitist arvu, et saada alumisse parempoolsesse nurka.
      Course 4 EC 1a_instruction: Reegleid pole, vihjeid pole – ainult väljakutse!
      Course 4 EC 1b_instruction: Reegleid pole, vihjeid pole – ainult väljakutse!
      Course 4 EC 2a_instruction: '**Eriti raske väljakutse:** reegleid pole, vihjeid pole – ainult väljakutse!'
      Course 4 EC 2b_instruction: '**Eriti raske väljakutse:** reegleid pole, vihjeid pole – ainult väljakutse!'
      Course 4 EC 2c_instruction: '**Eriti raske väljakutse:** reegleid pole, vihjeid pole – ainult väljakutse!'
      Course 4 EC 3_instruction: 'Kasuta eelmisel tasemel õpitut, et joonistada sellele sarnanev pilt. NB! Kood muutub lihtsamaks, kui kasutad parameetreid. '
      Course 4 EC 3a_instruction: 'Eriti raske väljakutse: reegleid pole, vihjeid pole – ainult väljakutse!'
      Course 4 Maze 1_instruction: Aita vihane lind põrsa juurde!
      Course 4 Maze 2_instruction: Väldi TNT dünamiiti!
      Course 4 Maze 3_instruction: 'Koosta programm, mis viiks vihase linnu põrsa juurde. '
      Course 4 Maze 4_instruction: 'Proovi "korduse" plokki, et kasutada vähem plokke mõistatuse lahendamisel...'
      Course 4 Maze 5_instruction: Kas oskad lahendada selle mõistatuse kasutades võimalikult vähe plokke?
      Course 4 Maze 6_instruction: Kas oskad lahendada selle mõistatuse kasutades võimalikult vähe plokke?
      Course 4 Play Lab For Loops 2_instruction: See kord proovime loendada paarisarve 1...100.
      Course 4 Play Lab Params 1_instruction: Siin on funktsioon nimega „hüppa“, millega su peategelane hüppab 100 piksli võrra üles. Kasuta hüppamise funktsiooni kõigi lippude kättesaamiseks.
      Course 4 Play Lab Params 10_instruction: "Lisasime sinu jaoks ühe viimase funktsiooni. \\r \\r Kasuta avaldist „kui“, et sinu mäng kutsuks funktsiooni „tase_üles“ ainult siis, kui „mängija_skoor“ ületab teatud arvu.\\r \\r Näide: „mängija_skoor“ > 6\\r \\r Mängi mängu ja jõua 4. tasemelt edasi, et liikuda järgmisele mõistatusele. "
      Course 4 Play Lab Params 2_instruction: "Nüüd on meil lipud, mis on praeguse hüppe jaoks liiga kõrgel! Kasutame nooli „üles“ ja „alla“, et saada mitu hüppekõrgust.  \\r \\r Peame lisama oma hüppefunktsioonile parameetri nimega „kõrgus“.  Ülesnoolega peab koer hüppama 200 pikslit ja allanoolega ainult 100 pikslit. \\r \\r Vihje: pead klõpsama hüppefunktsioonil käsku „redigeeri“ ja funktsiooni uuendama nii, et see kasutaks parameetrit „kõrgus“."
      Course 4 Play Lab Params 3_instruction: 'Lisasime hüppefunktsioonile veel ühe parameetri, et saaksime seda kasutada teiste tegelastega. Iga tegelane on tähistatud numbriga (alates ühest). Muuda funktsiooni „hüppa“ nii, et see kasutaks parameetrit „tegelane“, pannes hüppama õige tegelase. '
      Course 4 Play Lab Params 4_instruction: Siin on funktsioon nimega „patrull“. Muuda seda, et liigutada kassi 400 pikslit üles ja siis 400 pikslit alla.
      Course 4 Play Lab Params 5_instruction: Muuda funktsiooni „patrull“, lisades parameetri „tegelane“, nii et me saame selle kutsuda iga ekraanil oleva tegelase jaoks. Pea meeles, et tegelastele vastavad numbrid 1, 2 ja 3.
      Course 4 Play Lab Params 6_instruction: Lisa funktsioonile „patrull“ teine parameeter nimega „kiirus“. Proovi kasutada kiiruse määramise plokki uue parameetriga „kiirus“, et aidata pingviinil kätte saada mõlemad lipud enne, kui teised tegelased jõuavad esimese lipuni.
      Course 4 Play Lab Params 7_instruction: "Hakkame nüüd lõbutsema! Vaata seda koodi ja proovi ära arvata, mida iga plokk teeb.  \\r \\r Kui oled lõpetanud, kasuta nooleklahve koera juhtimiseks ja kõigi lippude korjamiseks."
      Course 4 Play Lab Params 8_instruction: Kasuta plokki „kui tegelane puudutab“, et saata koer tagasi üles vasakule AINULT siis, kui koer puudutab mõnda muud tegelast.
      Course 4 Play Lab Params 9_instruction: "Siin on meie mäng varasemast etapist, kuid enamik koodi on peidetud. Seal on uus funktsioon nimega „skoori_punktid“.\\r \\r Muuda funktsiooni nii, et parameeter „punktid“ lisatakse muutujale „mängija_skoor“. \\r \\r Muutuja „mängija_skoor“ väärtus peab suurenema iga kord, kui koer saab kassile südametega pihta, ja vähenema iga kord, kui kass saab koerale südametega pihta.\\r \\r Märkus: kui oled lõpetanud, klõpsa mängimiseks käsku „Käivita“. Kui koer saab 6 punkti, viiakse sind edasi järgmise mõistatuse juurde. "
      Course 4 Play Lab Vars 1_instruction: See kord sa ei pea koodi kirjutama, klõpsa mängu mängimiseks lihtsalt nuppu „Käivita“! Selles mängus oled sa koer, kes püüab saada rohkem lippe kui kass. Kasuta koera juhtimiseks allanoolt. Kui oled mängimise lõpetanud, klõpsa nuppu „Lõpeta“.
      Course 4 Play Lab Vars 2_instruction: Selle viimase mõistatuse võidujooks ei olnud kuigi aus“ Muuda muutujat „koera_kiirus“, et saaksid koguda kassist rohkem lippe. Võidab see, kes kogub esimesena 10 lippu!
      Course 4 Play Lab Vars 3_instruction: 'Siin on uutmoodi mäng! Kasuta liikumiseks vasak- ja paremnoolt ning hüppamiseks ülesnoolt. Vaata, kas sul õnnestub kõik lipud kätte saada.'
      Course 4 Play Lab Vars 4_instruction: Nüüd kasutame muutujat nimega „kõrgus“, et juhtida, kui kõrgele saab koer hüpata. Muuda muutujat „kõrgus“ nii, et koer saaks hüpata piisavalt kõrgele kõigi lippude kättesaamiseks.
      Course 4 Play Lab Vars 5_instruction: 'Teeme ühe mängu! Kõigepealt on meil vaja koodi. Koosta uuesti kood, mida sa nägid eelmisel tasemel, et määrata skooriks 10. '
      Course 4 Play Lab Vars 6 (copy 1)_instruction: Hästi, nüüd on meil skoori muutuja, aga kuidas seda kasutada? Kui suurendaksime skoori muutujat iga kord, kui sa saad vaenlasele tulekeraga pihta? Kasuta sündmust „kui tegelane 2 puudutab midagi“, et suurendada skoori, kui kass saab sinu tulekeraga pihta. Saad skoori suurendada, määrates väärtuse skoor = skoor + 1. Taseme läbimiseks suurenda skoori kümneni (ühekaupa!).
      Course 4 Play Lab Vars 6_instruction: "Kasuta paremnoolt südamete tulistamiseks.\\r \\r Kuidas peaksime oma mängus punkte lugema? Lisa oma muutujale „punktid“ 1 iga kord, kui koer saab kassile südamega pihta. Kasuta skoori suurendamiseks sündmust „kui tegelane 2 puudutab midagi“. Saad muutujat suurendada, määrates „punktid = punktid + 1“. Taseme läbimiseks suurenda skoori kümneni (ühekaupa!)."
      Course 4 Play Lab Vars 7_instruction: Tore! Teeme nüüd mängu natuke raskemaks. Iga kord, kui koer (tegelane 1) saab kassi (tegelane 2) kollaste südametega pihta, kaotad sina punkti. Alusta 10 punktiga, et mäng ei läheks liiga raskeks. Taseme läbimiseks lase oma skoor langeda kümnelt nullile.
      Course 4 Play Lab Vars 8 (copy 1)_instruction: 'Nüüd veel üks asi: teeme nii, et mängija saab võita (või kaotada). Kasuta igavest tsüklit, et kontrollida skoori väärtust. Kui skoor on suurem kui 20, kaota vaenlane pildilt. Kui skoor on väiksem kui 0, kaota mängija pildilt. Kui mäng töötab nii, nagu sa tahad, klõpsa käsku „Lõpeta“.'
      Course 4 Play Lab Vars 8_instruction: Teeme nii, et koer saab võita (või kaotada). Kasuta igavest tsüklit, et kontrollida skoori väärtust. Kui skoor on suurem kui 20, kaota vaenlane (kass) pildilt. Kui skoor on väiksem kui 0, kaota mängija (koer) pildilt. Kui mäng töötab nii, nagu sa tahad, klõpsa käsku „Lõpeta“.
      Course 4 Play Lab Vars 9_instruction: "Vaba mängu aeg! Siin on kõik muutujad, millega me oleme selles etapis seni mänginud, ja veel mõni juhuks, kui sa neid soovid. \\r \\r Pane tähele, et meie tööriistakastis on nüüd nii palju plokke, et neid on vaja korrastada! Siin panime iga tüki sobivasse kategooriasse.  Vaata kõik pakutav läbi. Kui oled sirvimise lõpetanud, loo mäng või lugu, kasutades kordusi, muutujaid ja sündmusi.  \\r \\r Vihje: kõigi tööruumi käskude nägemiseks keri alla."
      Course 4 Play Lab Vars_instruction: 'Nüüd veel üks asi: teeme nii, et mängija saab võita (või kaotada). Kasuta igavest tsüklit, et kontrollida skoori väärtust. Kui skoor on suurem kui 20, kaota vaenlane pildilt. Kui skoor on väiksem kui 0, kaota mängija pildilt.'
      Course 4 Play Labs For Loops 1_instruction: Teeme nii, et koer ütleks kõik numbrid 1...100. Kasuta korduste arvu tsüklit ja loenduri plokki, et öelda loenduri muutuja väärtus iga kord, kui tsüklit käitatakse.
      Course 4 Play Labs For Loops 2_instruction: See kord proovime loendada paarisarve 1...100.
      Course 4 Play Labs For Loops 3_instruction: Kui loendame suuremate arvude kaupa, saame sama ajaga loendada suurema numbrini. Proovi panna koer loendama kümne kaupa 10...1000.
      Course 4 Play Labs For Loops 4_instruction: Juurdekasvu muutmine võib olla kasulik, kuid me loendame endiselt lineaarselt (iga number erineb eelmisest ühepalju). Aga kui tahame loendada eksponentsiaalselt? Kas saad korduste arvu tsükli väärtusi muutmata loendada 1, 4, 5, 16, 25... (loendur ruudus)?
      Course 4 Play Labs For Loops 4a_instruction: "Kombineerime nüüd 7. etapi muutujad sinu muutujaga „loendur“, et teha midagi ägedat.   \\r \\r Selles mõistatuses loendab koer 0...1000 „juurdekasvu“ võrra. Määra oma koodi alguses muutuja „juurdekasv“ väärtuseks 10, et näha, mis juhtub."
      Course 4 Play Labs For Loops 5_instruction: Eelmises etapis loendasime iga arvu ruutudega. Proovi muuta „loendur ^ 2“ väärtusele „loendur ^ 3“, et loendada iga arvu kuupi (1, 8, 27, 64, 125, 216, 343…)
      Course 4 Play Labs For Loops 5a_instruction: "In this puzzle, Dog will be your\ntime keeper.\\r\n\\r\nDog will count from 0 to 30 by \"increment\".  The \"increment\"\nvariable will begin with a value of 1.\\r\n\\r\nCan you make it so that each\ntime you click Dog, the increment increases by 2?  Click the forward arrow\nto run the for loop.\\r\n\\r\nRun the loop a couple of times, clicking Dog before\neach one."
      Course 4 Play Labs For Loops 6_instruction: Võib-olla mäletad, et algarv on mis tahes arv, mis jagub ainult iseenda ja ühega. Kasuta funktsiooni „on_algarv“, et öelda ainult algarvud 1 kuni 100.
      Course 4 Play Labs For Loops 6a_instruction: "Koer jätkab aja arvestamist, loendades meie korduste arvu tsükliga juurdekasvu võrra, kuid see kord lisame võluri. Kas oskad koodi nii muuta, et iga kord, kui võlurit klõpsatakse, suureneks muutuja „juurdekasv“ väärtus kahe võrra?\\r \\r Vaata ette! Võlur liigub kiiresti!"
      Course 4 Play Labs For Loops 7_instruction: Kas oskad kasutada korduste arvu tsüklit, et aidata mul ette lugeda jada 1, 4, 7, 10, 13, 16, 19, 22, 25?
      Course 4 Play Labs For Loops 7a_instruction: "Asi hakkab ilmet võtma!  Mis oleks, kui hakkaksime loendama, mitu korda saab võlurit klõpsata, enne kui koer jõuab 30-ni?  \\r \\r Lõpetuseks lisa võlurile sellised plokid, et iga kord, kui teda klõpsatakse, suureneb muutuja „klõpsatud“ väärtus ühe võrra. Praegu võid muutujat „juurdekasv“ eirata.\\r \\r Koer alustab loendamist, kui klõpsad käsku „Käivita“."
      Course 4 Play Labs For Loops 8_instruction: "Aita nüüd tegelastel loendamise ajal liikuda.  \\r \\r Koer peab liikuma ja loendama, liites iga kord 2 (loendur + 2).  Kass liigub ja loendab, korrutades iga kord kahega (loendur * 2). Pingviin liigub ja loendab iga kord astmes kaks (loendur ^ 2). Kes jõuab esimesena oma lipuni?"
      Course 4 Play Labs For Loops 8a_instruction: "Mängu lõpetamiseks peame tooma tagasi muutuja „juurdekasv“!    Seome selle mängu tasemega.\\r \\r 1) Pea arvestust selle üle, mitu korda on võlurit klõpsatud.\\r 2) Kui võlurit klõpsatakse vähemalt 10 korda, enne kui koer jõuab loendamisega 30-ni, suurenda väärtust „juurdekasv“ ühe võrra ja alusta uuesti.\\r 3) Kui võlurit ei klõpsata vähemalt 10 korda, on mäng läbi."
      Course 4 SCF 1_instruction: Kasuta soovitatud funktsioone nelja kuusnurkade rea joonistamiseks. Pane tähele, kuidas meie paariarvulised read nihkuvad paremale?
      Course 4 SCF 1a_instruction: Kas saad aru, kuidas kogu nektar kokku koguda võimalikult väheste plokkidega?
      Course 4 SCF 1b_instruction: Kas saad aru, kuidas kogu nektar kokku koguda võimalikult väheste plokkidega?
      Course 4 SCF 2_instruction: 'Kasuta eelmisel tasemel õpitut, et joonistada sellele sarnanev pilt. NB! Kood muutub lihtsamaks, kui kasutad parameetreid. '
      Course 4 SCF 3 Fail 1_instruction: Kas saad aru, kuidas...
      Course 4 SCF 3 Fail 2_instruction: Kas saad aru, kuidas...
      Course 4 SCF 3_instruction: 'Kasuta eelmisel tasemel õpitut, et joonistada sellele sarnanev pilt. NB! Kood muutub lihtsamaks, kui kasutad parameetreid. '
      Course 4 SCFL 1_instruction: Lahenda see mõistatus, kasutades võimalikult vähe plokke.
      Course 4 SCFL 1a_instruction: Kas oskad aidata Skrati tõruni, kasutades võimalikult vähe plokke?
      Course 4 SCFL 1b_instruction: Kas oskad aidata Skrati tõruni, kasutades võimalikult vähe plokke?
      Course 4 SCFL 2_instruction: Lahenda see mõistatus, kasutades võimalikult vähe plokke.
      Course 4 SCFL 3_instruction: Kas saad aru, kuidas saaks selle joonistuse uuesti luua?
      Course 4 SCFL 4_instruction: Kas saad aru, kuidas saaks selle joonistuse uuesti luua?
      Course 4 SCFL 5_instruction: Kas saad aru, kuidas saaks selle joonistuse uuesti luua?
      Course 4 SCFL 6_instruction: Kas saad aru, kuidas saaks selle joonistuse uuesti luua ühe tsükliga?
      Course 4 SCFL 7_instruction: Kunstnik tahab laineid püüda! Kas oskad selle joonistuse uuesti luua?
      Course 4 SCFP 1_instruction: Loo funktsioon parameetritega, mis võimaldavad kunstnikul hüpata edasi ja tagasi x piksli võrra ning üles ja alla y piksli võrra (kasutades positiivseid ja negatiivseid arve).
      Course 4 SCV 1_instruction: Klõpsa siia, et uuesti juhiseid vaadata.
      Course 4 SCV 2_instruction: Klõpsa siia, et uuesti juhiseid vaadata.
      Course 4 SCV 3_instruction: "Hakkame nüüd kulli mängima!  Puuduta kassi, et saada 2 punkti. Puuduta pingviini, et saada 3 punkti.  Võitmiseks pead koguma 10 punkti!\\r Ole ettevaatlik: kui kass ja pingviin puudutavad teineteist, võtab see punkte vähemaks.\\r \\r Lisa vajalikud plokid, et panna see mäng niimoodi tööle. Kuidas panna koer kõigis suundades liikuma, kasutades selleks nooleklahve?  Kuidas lisada punkte, kui koer puudutab kassi või pingviini?  Kuidas lahutada punkte, kui kass ja pingviin puutuvad omavahel kokku?"
      Course 4 SCV 4_instruction: Lahenda see mõistatus võimalikult väheste plokkidega.
      Course 4 SCV 5_instruction: Lahenda see mõistatus võimalikult väheste plokkidega.
      Course 4 SCV 6_instruction: Klõpsa siia, et uuesti juhiseid vaadata.
      Course 4 SCVP 1_instruction: Loo funktsioon parameetritega, mis võimaldavad kunstnikul hüpata edasi ja tagasi x piksli võrra ning üles ja alla y piksli võrra (kasutades positiivseid ja negatiivseid arve).
      Course 4 Variables Assessment_instruction: Kas oskad luua selle pildi, kasutades külgede jaoks muutujat? Iga joon peab olema 50 piksli pikkune.
      Course1BeePuzzle12_instruction: Get three nectars and then make two honey
      Course1MazeAssessment1_instruction: "This is a test!\\r\nMove one way, then\nanother to get me to the pig"
      Course1MazeAssessment2_instruction: "This is a test!\\r\nMove one way, then\nanother to get me to the pig."
      CSP Data Unit - Counting Multiple Things_instruction: "If you can count one\nthing you can count multiple things\\r\n\\r\nFind out how many people like something\nother than dogs and cats\\r\n\\r\nCount dogs\\r\nCount cats\\r\nCount total\\r\nDo\nthe math\\r\n\\r\nblank/ blank toal\\r\n\\r\nCan also use this to find percents\nfrom this\\r\n\\r\nx% are dog lovers"
      CSP Data Unit -Counting Records - Easy Way_instruction: "ReadRecords with specific\ncriteria \\r\nfind the length of an array\\r\n"
      CSP Data Unit -Counting Records - Hard Way_instruction: "\\r\n1. ReadRecords\nfor all records\\r\n2. Way to loop through and count\\r\n"
      CSP U4 - JSON Object Intro - Bad Way_instruction: |
        Trigger both the keyboard
        and mouse event and examine the event objects displayed in the console. Why
        might an object be the best way to store this information? (Click to see full
        instructions)
      CSP U4 - JSON Object Intro - Good Way_instruction: |
        Create an object with at
        least 5 values including at least one string and one number. (Click to see
        full instructions) 
      CSP U4 - Objects - createObject_instruction: |
        Create an object with at least
        5 values including at least one string and one number. (Click to see full
        instructions) 
      drawings!_instruction: |
        Draw the equilateral triangle - all the sides are the
        same!
      ECSPD Binary Odometer_instruction: |
        This is another resource you could use
        with your students.
      Eval Booleans 1_instruction: |
        Boolean operators (like >, <, =) allow us to
        compare different values, returning either true or false. Click "Run" to
        see how this expression evaluates.
      Eval Booleans 2_instruction: |
        Can you set the values so that this expression
        evaluates as true?
      Eval Booleans 3_instruction: |
        The string-length function returns the number
        of characters in a string (including spaces!) - make this code evaluate to
        true.
      Eval Booleans 4_instruction: |
        Here's an Evaluation Block called AND - it returns
        true if both of its parameters are true, otherwise it returns false. Edit
        the x variable so that this expression returns true.
      Eval Booleans 5_instruction: |
        This OR block returns true if either of its parameters
        is true. Otherwise, if both parameters are false it will return false. Set
        the y variable to a value that will cause this expression to return false.
      Eval Booleans 6_instruction: |
        Here's one more boolean block called NOT. This
        block flips true to false, or false to true. If you wrap this block of code
        in a NOT block, it should return true (because we are asking if the two expressions
        do NOT produce equal values).
      Eval Booleans Free Play_instruction: |
        Free Play: Try out some creations of
        your own using Booleans.
      Eval Booleans_instruction: |
        Booleans allow us to compare different values,
        returning "true" if the are equal, or "false" if they are not. What do
        you think this code will evaluate to?
      Eval Cond 1_instruction: |
        The cond block checks the boolean expressions in
        the left column, and as soon as it finds one that returns "true" it runs
        the corresponding code on the right. If none of the expressions evaluate to
        "true," it runs the bottom block. Update the "temperature" variable so
        that this block returns "It's just right."
      Eval Cond 2 (copy 1)_instruction: |
        This condition returns a different shape
        based on the value of the "sides" variable - change the value of "sides"
        so that the conditional returns a triangle.
      Eval Cond 2_instruction: |
        This condition returns a different shape based on
        the value of the "sides" variable - change the value of "sides" so that
        the conditional returns a triangle.
      Eval Cond 3 (copy 1)_instruction: |
        Can you write a conditional that checks
        the variable "age" and returns "Old enough to vote and drive" if age >
        17, "Old enough to drive" if age is > 15, and "Can't drive or vote" if
        neither conditions is true. Hint: The first condition to return "true" wins
        - make sure you put your conditions in the right order.
      Eval Cond 3_instruction: |
        Can you write a conditional that checks the variable
        "age" and returns "Old enough to vote and drive" if age > 17, "Old enough
        to drive" if age is > 15, and "Can't drive or vote" if neither conditions
        is true. Hint: The first condition to return "true" wins - make sure you
        put your conditions in the right order.
      Eval Cond 4_instruction: |
        We can use the string=? function to make conditionals
        that respond to text input. Here's a function called green shape that takes
        a string for the type of shape. Complete the conditions so that the correct
        solid green shape is returned when the function is run with "circle", "triangle",
        "square", or "rectangle".
      Eval Cond 5_instruction: |
        Here's a similar function red shape with an additional
        variable for size. Complete the conditionals so the correct solid red image
        of a given size is drawn for "circle", "triangle", and "star".
      Eval Cond 6_instruction: "Write a function called food-critic, which takes\nin the name of a food and produces a String that says how you feel about that\nfood. For example, (food-critic “pizza”) might evaluate to “delicious”, but\n(food-critic “rotten eggs”) might evaluate to “gross!”. Choose at least two\nfoods to review, but you can you write more if you like!  Don’t forget to\nadd an “else” clause!\\r\nOne example - and part of the definition -  has already\nbeen done for you!"
      Eval Cond 7_instruction: "Free Play: Write a function called green-shape, which\ntakes in the name of a shape and produces a solid green shape. Your function\nshould work with at least “circle”, “star” and “rectangle”, but you can add\nother shapes if you like. You can choose the size of each shape. Don’t forget\nto add an “else” clause!\\r\nOne example - and part of the definition -  has\nalready been done for you!\\r\n"
      Eval Cond 8_instruction: "Free Play: Suppose you want to own a car at 21, or\nhave your own business by 30. Write a function called life-goals, which takes\nin an age and produces a string that describes your life goals by then. Don’t\nforget to add an “else” clause!\\r\n"
      Eval Contracts 1_instruction: |
        Use the "star" function to produce a red star
        with a 60 pixel radius
      Eval Contracts 10A_instruction: |
        Alright let's complete this puzzle with a
        Green Square that is 175 pixels in size.
      Eval Contracts 11A_instruction: |
        Can you complete this puzzle to read "Hello
        World" in the banner?
      Eval Contracts 2_instruction: |
        Check out the "rotate" function - can you
        use it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts 3_instruction: |
        Try using the "text" function to write this
        teal text at size 40.
      Eval Contracts 4 A_instruction: |
        The "scale" function returns an image that
        is scaled either larger or smaller than the input image. Try scaling this
        circle by a factor of 10 - how is the resulting image different than if you'd
        just made a circle of that size in the first place?
      Eval Contracts 4_instruction: |
        The scale function returns an image that is
        either larger or smaller than the input image. Try scaling this circle by
        a factor of 10. How is the returned image different than if you'd just made
        a circle of that size in the first place?
      Eval Contracts 8A_instruction: |
        Can you complete this puzzle? The big-triangle
        is 200 pixels in size and purple?
      Eval Contracts A_instruction: |
        Use the star function to produce a solid red
        star with a 60 pixel radius
      Eval Contracts C_instruction: |
        Check out the rotate function - can you use
        it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts E_instruction: |
        Try using the text function to write "Hello,
        world!" in teal at size 40.
      Eval Contracts shrink_instruction: |
        Can you complete this image using the "shrink"
        function block? The radius is 20. 
      Eval Define Funcs 1_instruction: |
        Here's a new function called green-triangle
        that takes a single Number for size and produces a green triangle. Use the
        new function to create a 125 pixel green triangle.
      Eval Define Funcs 2_instruction: |
        Let's look inside that green-triangle function
        to see how it works. Can you modify it so that the green-triangle function
        always draws outlined green triangles?
      Eval Define Funcs 3_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Define Funcs 4_instruction: |
        Create a new function called aqua-star that
        has a Domain of a single Number for radius and returns an aqua star of the
        given radius. Run your new function with a radius of 75.
      Eval Define Funcs 5_instruction: |
        Let's use that aqua-star function to make
        a row of different sized stars. From left to right, the stars should have
        radii of 25, 50, and 75.
      Eval Define Funcs Test_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Defining Vars Free Play 1_instruction: |
        Free Play: We've provided a function
        that fills your screen with my-image. Change my-image to see what patterns
        you can make.
      Eval Design Recipe .1_instruction: |
        Here's a Design Recipe for a function
        called square-circle with domain Number String and range Image. Click Edit
        to write the function definition (you will see two examples provided).
      Eval Design Recipe 1 (copy 1)_instruction: |
        We're going to write a function
        that draws a solid rectangle of any color that is twice wide as it is high.
        Start with an example - draw a solid green rectangle that has a height on
        100 pixels.
      Eval Design Recipe 1_instruction: |
        Alright, now given the Contract wide-rect:
        Number String -> Image, write an example - draw a solid green rectangle that
        has a height of 100 pixels.
      Eval Design Recipe 2 (copy 1)_instruction: |
        Let's do one more example before
        writing the function definition - this time draw a solid red rectangle with
        a height of 75 pixels.
      Eval Design Recipe 2_instruction: |
        Let's do one more example before writing
        the function definition - this time draw a solid red rectangle with a height
        of 75 pixels.
      Eval Design Recipe 3_instruction: |
        The Design Recipe for wide-rect already
        has a contract and one example. Can you write a second example and then complete
        the definition? The wide-rect function should produce a rectangle of given
        color that is twice as wide as it is high.
      Eval Design Recipe 4_instruction: |
        Use the Design Recipe to create a function
        starburst. When given a number of points and an outer radius, starburst returns
        a yellow radial star with given points, and an inner radius that is half the
        outer radius.
      Eval Design Recipe 5_instruction: |
        Using the Design Recipe, write a function
        striped-flag that takes two colors and produces a flag that is 250 pixels
        wide, 150 pixels tall, with three even horizontal stripes of given colors,
        in the order color2, color1, color2.
      Eval Design Recipe 6_instruction: |
        Write a function large-polygon that should
        output a solid polygon of given sides and color that takes up most of the
        window, regardless of the number of sides. To make sure that the polygon doesn't
        get too large as you increase the number of sides, side length should be inversely
        proportional to side number, with a length of (800/sides).
      Eval Design Recipe Free Play_instruction: |
        Free Play: Use the Design Recipe
        to create some functions of your own design
      Eval Free Play_instruction: 'Free Play: Make art with code!'
      Eval Strings Images .1_instruction: |
        So far we've only dealt with a single
        type of data, Numbers. Another type of data is a String, which is any combination
        of letters, numbers, or other characters wrapped in quotation marks. Run the
        String "Hello, world!" and see what happens.
      Eval Strings Images .2_instruction: |
        The string-append function takes two Strings
        and returns a single combined String. Add a String "Universe" to the second
        argument of string-append.
      Eval Strings Images 1_instruction: |
        The third type of data we're going to
        use is an Image. This star function takes in a Number and two Strings, and
        it evaluates to an Image. Use this function to make a solid red star with
        radius of 100.
      Eval Strings Images 2_instruction: |
        Free Play: Every Evaluation Block is color-coded
        to let you know which data type it returns and which types it needs for its
        parameters. The last parameter of the triangle function takes a String that
        controls its color - try some different colors to see what works.
      Eval Strings Images 3_instruction: |
        Some functions can only take a specific
        set of Strings, such as the second argument of this circle function, which
        controls its style. Draw this orange outline circle using the special String
        block with a dropdown to make sure you only use valid styles.
      Eval Strings Images 4_instruction: |
        Try using the rectangle block to draw this
        solid, red rectangle - it is 175 pixels wide and 100 pixels tall.
      Eval Strings Images 5_instruction: |
        Try using this new Evaluation Block called
        overlay to place a 100 pixel white triangle on top of a 200 pixel red circle.
      Eval Strings Images 6_instruction: |
        Use the overlay block to place a 75 pixel
        radius yellow star on top of a 150 pixel long blue square.
      Eval Strings Images 7_instruction: |
        The offset block lets you move an image
        relative to where it would normally be placed. Use this block to offset the
        square by 100 pixels on the y-axis.
      Eval Strings Images 8_instruction: |
        Here's a different kind of star block
        - it's called radial-star and it allows you to draw stars with any number
        of points! Use it to create a 7 point solid orange star with an inner radius
        of 75 pixels and an outer radius of 175 pixels.
      Eval Strings Images Free Play_instruction: |
        Free Play: Explore the blocks available
        to create something interesting. Make sure to share your favorite creations.
      Farmer for Authored Hint testing_instruction: |
        Wow, I found a really deep hole!
        I don't know how many shovelfuls of dirt it needs.  Can you write a program
        that fills it until the ground is even?  Hint:  Try using the while loop this
        time.
      Frequency Analysis_instruction: Test
      frozen circle function in circle_instruction: Nüüd loome 20 osaliselt kattuvat ringi, pöörates iga ringi vahel 18 kraadi.
      frozen circle function with parameter_instruction: 'Siin on "Create circle" blokk mis võimaldab luua erineva suurusega ringe. Kas sa oskad seda kasutades luua väikese ringi suurusega 5 ja suure ringi suurusega 10?'
      frozen circle function_instruction: 'Kasuta uut "Loo ring" blokk, et luua 10 kattuvat ringi. Ära unusta ringide vahel hüpata edasi.'
      frozen circle_instruction: Ring on erilise kujuga. Kas sa oskad arvata mis number tuleks küsimärgi asemele panna, et joonistada ring?
      frozen cross rotate dense_instruction: 'Kordame seda 90 korda! Mitu korda mahub 90 360-ne sisse? Vihje: See on üsna väike number.'
      frozen cross rotate_instruction: Nüüd proovige seda 10 korda korrata. Kui palju kraade pead sa iga rea vahel keerama?
      frozen cross_instruction: Mähi nende käskude ümber plokk „Korda“, et luua plussmärk. Kas panid tähele, et Elsa saab liikuda edasi ja tagasi?
      frozen diamond mini snowflake_instruction: Kas teadsid, et igal lumehelves on eri kujuga? Loome uue lumehelbe, kasutades teist plokki „Korda“ rööpküliku kordamiseks 4 korda, pöörates iga rööpküliku järel 90 kraadi paremale.
      frozen diamond snowflake_instruction: Nüüd, loome uue lumehelbe kasutades kordamise blokki, joonistame rööpkülikut 10 korda, keerates peale igat rööpkülikut 36 kraadi.
      frozen diamond_instruction: 'Kasuta nende plokkide ümber kordamist, et luua rööpkülik. See on nagu nelinurk, kuid erinevate nurkadega. Sellel siin on 90-kraadiste nurkade asemel 60- ja 120-kraadised nurgad.'
      frozen freeplay_instruction: Sa oled ametlikult meister kunstnik! Loo talve võlumaa.
      frozen line_instruction: Tere! Olen Elsa. Aita mul joonistada üks joon.
      frozen perpendicular_instruction: 'Nüüd vaatame, kas me saame luua kaks joont, mis on teineteise suhtes 90 kraadise nurga all. Sa pead kasutama "Keera", kui ka "Liigu" blokki.'
      frozen snowflake branch_instruction: 'Proovi kasutades "Loo lumehelbe võrestik" blokki joonistada 3 võrestikku, mis hakkavad välja nägema nagu lumehelbed.'
      frozen snowflake full_instruction: Nüüd kordame seda 8 korda, et luua imeilus lumehelves!
      frozen snowflower_instruction: Keerulisi lumemustreid saab luua väga lihtsate kujunditega. Kas sa oskad teha mustri joonistades 5 ringi suurusega 5 ja 5 ringi suurusega 10?
      frozen square iterative_instruction: Näib et me oleme poolel teel joonistamaks ruutu. Ühendame 4 joont omavahel, et valmiks ruut.
      frozen square loop 3x_instruction: Loome kolm ruutu, peale igat ruutu peaks aga keerama. Keera peale igat ruutu 120 kraadi.
      frozen square loop_instruction: 'Tere, olen Anna! Teeme ruudu kasutades "Korda" blokki, sellega kasutame teisi blokke vähem. Kui palju kordi (???) peaks "Korda" blokki kasutama, et teha valmis ruut?'
      frozen square snowflake_instruction: 'Kas sa saad luua lumehelbe kasutades "Korda" blokki, et joonistada ruutu 10 korda ja "Keera" blokki", et keerata iga ruudu vahel 36 kraadi?'
      Infinity_catch_instruction: Kas oskad aidata Elsal („tegelane 2“) Annale järele jõuda, kasutades nooleklahve?
      Infinity_finale_instruction: Loo midagi vabal valikul ning jaga seda!
      Infinity_move_collide_instruction: 'Hiro on "näitleja 1". Liiguta ta Baymaxi juurde ning käivita heli, kui nad kokku puutuvad.'
      Infinity_move_directions_instruction: 'Baymax on "näitleja 2". Lisa "liiguta" plokke ning kasuta Baymaxi liigutamiseks nooli. Tee nii, et ta puutuks kokku ülejäänud 2 tegelasega.'
      Infinity_move_right_instruction: 'Hiro on "näitleja 1". Kasuta "liiguta" plokki, et liigutada Hiro paremale nii, et ta puutuks kokku Baymaxiga.'
      Infinity_repeat_instruction: 'Kasuta "korda igavesti" plokki, et liigutada Annat üles ja alla 400 piksli võrra.'
      Infinity_say_instruction: 'Pane Anna ütlema "Tere!". Kasuta selleks "Ütle" plokki.'
      Infinity_shoot_instruction: 'Baymax on "näitleja 2". Tee nii, et Baymax heidaks Hiro suunas raketi.'
      Infinity_shoot_directions_instruction: Hiro on „tegelane 3“. Tee nii, et Hiro viskaks viskekeha kõigi nelja tegelase suunas. Oota visete vahel üks sekund.
      Infinity_test_instruction: This is a test Infinity level.
      Infinity_touch_faster_instruction: Puuduta veel rohkemaid lumehelbeid!
      Infinity_touch_four_instruction: Liiguta Annat üles, alla vasakule ja paremale, et puudutada kõiki nelja lumehelvest.
      Infinity_touch_score_instruction: Tee nii, et Anna saaks punkti iga kord, kui ta puudutab lumehelvest. Siis klõpsa käsku „Käivita“ ja juhi teda, et ta puudutaks ühe korra iga lumehelvest.
      jessie-test_instruction: Lots of instructions
      Just for Testing_instruction: Test instructions
      K-1 Artist 1 Assessment 1_instruction: Joonista lühike joon üles ja lühike paremale!
      K-1 artist 1 level 10_instruction: Joonista katkendjoon kasutades nii hüppa kui ka joonista plokke
      K-1 artist 1 level 9_instruction: Joonista see kolme joonega
      K-1 Artist Loops 1_instruction: Joonista see joon, liikudes itta 4 korda.
      K-1 Artist Loops 2_instruction: Kas sa saad joonistada sama joone, kasutades loopi?
      K-1 Artist Loops 3_instruction: Kas oskad tsükleid kasutades nende plokkidega kuus joont joonistada?
      K-1 Artist Loops 4_instruction: Kas tsükkel aitaks meil selle kindluse ülaosa joonistada?
      K-1 Artist Loops 5_instruction: Mida saad sa neli korda korrata, et joonistada need astmed?
      K-1 Artist Loops 6_instruction: 'Selleks on vaja kaht tsüklit: üks trepist üles minemiseks ja teine alla tulemiseks.'
      K-1 Artist Loops 7_instruction: Kas oskad selle mustri lõpetada kahe tsükliga?
      K-1 Artist Loops 8_instruction: Sellel trepil on pikemad astmed.
      K-1 Artist Loops 9_instruction: 'Ülesanne: kasuta tsüklit astmete joonistamiseks'
      K-1 Artist Loops Free Play_instruction: Mängu aeg, joonista midagi naljakat!
      K-1 Artist1 1_instruction: Joonista ühe joonega mehe jalg
      K-1 Artist1 10_instruction: Joonista ja hüppa, et teha kriipsjoontest rada aardeni X
      K-1 Artist1 2_instruction: Joonista kassile vurrud kahe joonega!
      K-1 Artist1 3_instruction: Joonista maja lõpetamiseks kaks joont itta ja kaks joont põhja!
      K-1 Artist1 4_instruction: Joonista kindluse lõpetamiseks jooned üles, küljele ja alla!
      K-1 Artist1 5.5_instruction: Lõpeta kindluse kolmas torn, kasutades lühikesi jooni
      K-1 Artist1 5_instruction: Joonista selle lille vars kahe joonega!
      K-1 Artist1 6_instruction: Lõpeta pilt, kasutades plokki „hüppa“!
      K-1 Artist1 7_instruction: Kasuta hüppamise plokki, et liikuda ilma joonistamata. Hüppa üles ja joonista üks joon.
      K-1 Artist1 8_instruction: Joonista katkendjoon, kasutades nii hüppamise kui ka joonistamise plokke
      K-1 Artist1 9_instruction: Joonista ja hüppa, et teha punktiirjoon
      K-1 Artist1 Assessment 1_instruction: Joonista lühikesed ja pikad jooned!
      K-1 Artist1 Assessment 2_instruction: Joonista lühikesed kriipsjooned!
      K-1 Artist2 1_instruction: Joonista kolmnurga alla ruut.
      K-1 Artist2 2_instruction: Hüppa ja joonista maja kõrvale ruut.
      K-1 Artist2 3_instruction: Joonista ruut teise ruudu kohale
      K-1 Artist2 4_instruction: Joonista ristkülik, et sild valmis saaks.
      K-1 Artist2 5_instruction: Joonista ristkülik, mis toetab silda
      K-1 Artist2 6_instruction: Joonista kaks ristkülikut, mis moodustavad ruudu!
      K-1 Artist2 Assessment1_instruction: 'Ülesanne: joonista ruut teise ruudu kõrvale.'
      K-1 Artist2 Free Draw_instruction: Joonista midagi!
      K-1 Artist2_7_instruction: Joonista ristkülik, et lisada sellele kummutile ülemine sahtel!
      K-1 Bee 1_instruction: Vii mind lille juurde, kogu nektarid ning seejärel liiguta mind meekärje juurde ja valmista mett
      K-1 Bee 10_instruction: Kogu neli nektarit ja valmista kaks mett!
      K-1 Bee 11.5_instruction: Kogu neli nektarit, et teha neli ühikut mett!
      K-1 Bee 11_instruction: Kogu kolm nektarit ning valmista üks mesi
      K-1 Bee 12_instruction: Kogu kolm nektarit ja valmista kaks ühikut mett!
      K-1 Bee 13_instruction: Kogu kolm nektarit ja valmista üks mesi!
      K-1 Bee 14_instruction: Vii mind nektari juurde, kogu see, seejärel mine mee juurde ja valmista mett
      K-1 Bee 15_instruction: Kogu kaks nektarit ja valmista kaks ühikut mett!
      K-1 Bee 2_instruction: Vii mind lille juurde, kogu nektarid ning seejärel liiguta mind meekärje juurde ja valmista mett
      K-1 Bee 3_instruction: Vii mind lille juurde, kogu nektarid ning seejärel liiguta mind meekärje juurde ja valmista mett
      K-1 Bee 4_instruction: Kogu kaks nektarit ning valmista kaks ühikut mett!
      K-1 Bee 5_instruction: Kogu kolm nektarit ja valmista kolm ühikut mett!
      K-1 Bee 6_instruction: Kogu kaks nektarit ning valmista kaks ühikut mett!
      K-1 Bee 7_instruction: Kogu kolm nektarit ja valmista kaks ühikut mett!
      K-1 Bee 8_instruction: Kogu kaks nektarit ning valmista kaks ühikut mett!
      K-1 Bee 9_instruction: Kogu kaks nektarit ning valmista kaks ühikut mett!
      K-1 Bee Assessment 1_instruction: Hangi nektarit, et mett teha!
      K-1 Bee Assessment 2_instruction: Hangi nektarit, et mett teha!
      K-1 Bee Loops 1_instruction: Saa nektarit mee tegemiseks!
      K-1 Bee Loops 10_instruction: Kasuta kordusi nektari kogumisel, mee tegemisel ning liikumisel!
      K-1 Bee Loops 11_instruction: 'Ülesanne: kasuta kordusi ning kogu nektarit ja valmista mett!'
      K-1 Bee Loops 12_instruction: 'Ülesanne: kasuta kordusi, et koguda nektarit, valmistada mett ja liikuda ringi!'
      K-1 Bee Loops 2_instruction: Kasuta liikumisel kordusi ning seejärel kogu nektarit ja valmista mett!
      K-1 Bee Loops 3_instruction: Kasuta nektari kogumisel ja mee valmistamisel kordusi!
      K-1 Bee Loops 4_instruction: Kasuta kordusi nektari kogumisel, mee valmistamisel ja liikumisel!
      K-1 Bee Loops 5_instruction: Kasuta kordusi nektari kogumisel ja mee valmistamisel!
      K-1 Bee Loops 6_instruction: Kasuta kordusi nektari kogumisel, mee tegemisel ning liikumisel!
      K-1 Bee Loops 7_instruction: Kasuta nektari kogumisel ja mee valmistamisel kordusi!
      K-1 Bee Loops 8_instruction: Kasuta nektari kogumisel ja mee valmistamisel kordusi!
      K-1 Bee Loops 9_instruction: Kasuta kordusi nektari kogumisel, mee tegemisel ning liikumisel!
      K-1 Bee Loops Assessment 1_instruction: Kogu nektarit, valmista mett ning liigu ringi kordusi kasutades!
      K-1 Bee Loops Assessment 2_instruction: Kogu nektarit ning valmista mett kordusi kasutades!
      K-1 Bee Puzzle 12_instruction: Get three nectars and then make two honey
      K-1 Building a Foundation Assessment_instruction: Ehita kolmeastmeline püramiid. Muid juhiseid pole, nii et katseta lihtsalt tükkidega, kuni saad selle valmis!
      k-1 maze 1_instruction: Kas oskad mind läände liigutada, et jõuaksin põrsani?
      K-1 Maze 10_instruction: 'Liigu ümber TNT dünamiidi ja vii mind põrsa juurde! '
      K-1 Maze 11_instruction: 'Jälgi rada ja juhi mind tobeda põrsa juurde. Väldi dünamiiti või suled lendavad! Vihje: ta on minust lõunas.'
      K-1 Maze 2_instruction: Liiguta mind ida suunas, et jõuaksin põrsani!
      K-1 Maze 3_instruction: Liiguta mind lõuna suunas, et jõuaksin põrsani!
      K-1 Maze 4_instruction: Liiguta mind põhja, et jõuaksin põrsani!
      K-1 Maze 5_instruction: Liiguta mind ida suunas, et jõuaksin põrsani!
      K-1 Maze 6_instruction: Liigu ühte suunda ja siis teise suunda, et jõuaksin põrsani!
      K-1 Maze 7_instruction: Liigu ühte suunda ja siis teise suunda, et jõuaksin põrsani!
      K-1 Maze 8_instruction: Liigu ühte suunda ja siis teise suunda, et jõuaksin põrsani!
      K-1 Maze 9_instruction: Liigu ühte suunda ja siis teise suunda, et jõuaksin põrsani!
      K-1 Maze Assessment 1_instruction: 'Ülesanne -- Liiguta mind põrsa juurde!'
      K-1 Maze Assessment 12_instruction: Hindamise tase
      K-1 Maze Assessment 13_instruction: Hindamise tase
      K-1 Maze Assessment 2_instruction: 'Ülesanne -- Liiguta mind põrsa juurde!'
      K-1 maze debug 1_instruction: Muud koodi, et jõuaksin põrsani!
      K-1 maze debug 10_instruction: Paranda selle taseme vead, seades ja lisades plokke nii, et jõuaksin põrsani!
      K-1 maze debug 11_instruction: "See on test!\\r Paranda selle taseme vead, seades ja lisades plokke nii, et jõuaksin põrsani"
      K-1 maze debug 2_instruction: Uuri välja, mis on puudu, ja lisa siis plokke, et aidata mind põrsani!
      K-1 maze debug 3_instruction: Uuri välja, mis on puudu, ja EEMALDA siis plokke, et aidata mind põrsani!
      K-1 maze debug 4_instruction: Vaata need plokid läbi ja tee korda! Ma liigun vist vales suunas.
      K-1 maze debug 5_instruction: Paranda selle taseme vead, seades ja lisades plokke nii, et jõuaksin põrsani!
      K-1 maze debug 6_instruction: Paranda selle taseme vead, seades ja lisades plokke nii, et jõuaksin põrsani!
      K-1 maze debug 7_instruction: Paranda selle taseme vead, seades ja lisades plokke nii, et jõuaksin põrsani!
      K-1 maze debug 8_instruction: Paranda selle taseme vead, seades ja lisades plokke nii, et jõuaksin põrsani!
      K-1 maze debug 9_instruction: Paranda selle taseme vead, seades ja lisades plokke nii, et jõuaksin põrsani!
      K-1 Maze debug Assessment 1_instruction: 'Ülesanne: paranda selle taseme vead, seades ja lisades plokke nii, et jõuaksin põrsani!'
      K-1 Maze Loops 1_instruction: Aita mind seani!
      K-1 Maze Loops 10_instruction: Vii mind põrsa juurde! Kasuta korduste pesa.
      K-1 Maze Loops 11_instruction: Vii mind põrsa juurde! Kasuta korduste pesa.
      K-1 Maze Loops 12_instruction: Vii mind põrsa juurde! Kasuta korduste pesa.
      K-1 Maze Loops 2_instruction: Kasuta korduse plokki, et viia mind põrsa juurde!
      K-1 Maze Loops 3_instruction: Vii mind põrsa juurde! Kasuta korduste pesa.
      K-1 Maze Loops 4_instruction: Aita mind seani!
      K-1 Maze Loops 5_instruction: Vii mind põrsa juurde! Kasuta korduste pesa.
      K-1 Maze Loops 6_instruction: Vii mind põrsa juurde! Kasuta korduste pesa.
      K-1 Maze Loops 7_instruction: Vii mind põrsa juurde! Kasuta korduste pesa.
      K-1 Maze Loops 8_instruction: Vii mind põrsa juurde! Kasuta korduste pesa.
      K-1 Maze Loops 9_instruction: Aita mind seani!
      K-1 Maze Loops Assessment 1_instruction: 'Ülesanne -- Kasuta kordusi, et viia mind põrsa juurde!'
      K-1 Maze Loops Assessment 2_instruction: 'Ülesanne -- Kasuta kordusi, et viia mind põrsa juurde!'
      K-1 Maze Multi 14_instruction: Hindamise tase
      K-1 Maze Multi 15_instruction: Hindamise tase
      K-1 Maze Sequence Assessment 1_instruction: "See on test!\\r Liigu ühte suunda ja siis teise suunda, et jõuaksin põrsani!"
      K-1 Maze Sequence Assessment 2_instruction: "See on test!\\r Liigu ühte suunda ja siis teise suunda, et jõuaksin põrsani."
      kikiTesting_instruction: ".\\r\n .\\r\n.\\r\n.\\r\n.\\r\n.\\r\n\\r\n.\\r\n\\r\n"
      love_spring_1_instruction: |
        Let's celebrate Spring!  We have put some seeds
        in the ground to prepare for the season's flowers.  Can you cover them up
        so that the birds don't eat them?
      love_spring_2_instruction: |
        Our flowers are in full bloom!  Now we need the
        bee to grab nectar from each one so he can make plenty of honey back at his
        hive!
      love_spring_3_instruction: "Figure out how to change this code so that Robin\nchooses a number between 1 and 20.  \\r\n\\r\nWhen you're ready, press \"Run\"\nand play until you guess Robin's number!"
      Luigi's Pizza 1_instruction: |
        Welcome to Luigi's Pizza! To order a pizza,
        type the name of a topping into the cost function, and we'll return the price
        of that pizza. Try ordering a pepperoni pizza to start.
      Luigi's Pizza 2 (copy 1)_instruction: |
        Right now there are only four choices
        available at Luigi's pizza - let's fix that! Add a couple of new toppings
        to the conditional block in the "cost" function. Once you've added your
        toppings, test out the function to make sure it works.
      Luigi's Pizza 2_instruction: |
        Right now there are only four choices available
        at Luigi's pizza - let's fix that! Add a couple of new toppings to the conditional
        block in the cost function. Once you've added your toppings, test out the
        function to make sure it works.
      Luigi's Pizza 3 (copy 1)_instruction: |
        That's better, everyone loves more
        variety in their pizza toppings! But you still can't please everyone, and
        folks are coming in to order toppings that Luigi doesn't have. Instead of
        saying no to those people, could you update the "else" clause so that we
        charge them a premium for toppings that we don't normally offer?
      Luigi's Pizza 3_instruction: |
        That's better, everyone loves more variety in
        their pizza toppings! But you still can't please everyone, and folks are
        coming in to order toppings that Luigi doesn't have. Instead of saying no
        to those people, could you update the else clause so that we charge them a
        premium for toppings that we don't normally offer? Let's charge $10,000
        for a topping we don't carry.
      Luigi's Pizza 4_instruction: |
        Free Play: What can you do to make Luigi's cost
        function even more useful?
      MSM Big Game Empty_instruction: |
        All variables and functions are currently
        empty stubs. Each puzzle progression will be focused on defining and handful
        of them, and therefore adding functionality.
      MSM Big Game Vars 1 (copy 1)_instruction: |
        In the Variables toolbox you'll
        see several variables that define how your game characters look, move, and
        interact
      MSM Big Game Vars 1_instruction: |
        In the Variables toolbox you'll see several
        variables that define how your game characters look, move, and interact
      MSM Big Game Vars Backup_instruction: |
        In the Variables toolbox you'll see
        several variables that define how your game characters look, move, and interact
      MSM Defining Vars 1 (copy 1)_instruction: |
        Write a program that produces a
        50 pixel solid green triangle.
      MSM Defining Vars 1_instruction: |
        Write a program that produces a 50 pixel
        solid green triangle.
      MSM Defining Vars 2 (copy 1)_instruction: |
        If we wanted to make fifty green
        triangles, it would be a pain to repeat that block of code 50 times. Let's
        create a variable called "my-shape" and put the code for a 50 pixel solid
        green triangle inside.
      MSM Defining Vars 2_instruction: |
        If we wanted to make fifty green triangles,
        it would be a pain to repeat that block of code 50 times. Let's create a
        variable called my-shape and put the code for a 50 pixel solid green triangle
        inside.
      MSM Defining Vars 3 (copy 1)_instruction: |
        Take your "my-shape" variable
        and use it with this provided code to draw two identical green triangles.
      MSM Defining Vars 3_instruction: |
        Take your my-shape variable and use it with
        this provided code to draw two identical green triangles that are 50 pixels
        in size.
      MSM Defining Vars 4_instruction: |
        Edit your my-shape variable so that it draws
        75 pixel solid red stars.
      MSM Play Lab Butterfly 1_instruction: |
        Help Sam stay on the screen so that
        you can always see at least a little piece of him. Using the arrow keys, see
        how far Sam can go to the left while still staying onscreen. You’ll find that
        Sam is onscreen as long as his x-coordinate is greater than -50. Then, fill
        in the code to make Sam stay on the screen.
      MSM Play Lab Butterfly 2_instruction: |
        Now make Sam stay on the right side
        of the screen. You'll have to experiment to see how far he can go and still
        be partially visible on the screen.
      MSM Play Lab Butterfly 3_instruction: |
        Now, combine your work to make Sam stay
        on both sides of the screen.
      MSM Play Lab Game 2_instruction: |
        Variables can also be used to control the
        speed of players in a game. Set the player speed and the enemy speed and see
        how the movement changes. Speed can be between 2 and 12.
      NetSim Standalone Automatic DNS_instruction: |
        In this version of the Internet
        Simulator, a Domain Name System (DNS) is provided for you and knows the IP
        addresses of all connected computers. Send a message in the form GET [hostname]
        to the DNS service at address <yourRouterNumber>.15 to get a student's address.
      NetSim Standalone Broadcast_instruction: "In this version of the Internet Simulator,\nyou can connect to up to 5 other people in a room. When you send messages\nin the room, everyone receives them. What are some of the challenges of this\nsystem, and how might you solve them?\\r\n"
      NetSim Standalone Classroom Routers_instruction: |
        In this version of the Internet
        Simulator, everyone connects to a router and has a specific address. To send
        messages, you have to address your message to the specific address of the
        recipient, and the router will take care of delivering it to the right computer.
        If there are other routers created in your class, ask for the address of one
        of your classmates and send them a message! View the Log Router to see the
        path the messages have taken through the network.
      NetSim Standalone Freeplay_instruction: |
        In this configuration, most of the
        options are turned on, and you can play with them. Have fun!
      NetSim Standalone Manual DNS_instruction: |
        In this version of the simulator
        you can't see the other students' addresses.  Instead, one of you must act
        as a name service, to help share addresses with each other.
      NetSim Standalone Packets TCP_instruction: |
        Messages on the Internet can take
        many paths to get to their destination, and sometimes along the way the message
        gets dropped. In this version of the Internet Simulator, there is a 10% chance
        of a packet being dropped, multiple packets may take different paths to the
        destination, and the default max packet size is set to 6 additional characters.
        
      NetSim Standalone Routers Addresses_instruction: "For this activity, connect\nto a router with the others in your group. Important note: The router will\nonly properly route messages where the first 4 bits are the To: address and\nthe second 4 bits are the From: address.\\r\n\\r\n[TODO: NetSim needs to support\nhierarchical addresses. For now, level is set up for 4 bit to and from addresses]"
      NetSim Standalone SendAB_instruction: |
        You and your partner share a single
        wire that can only be in state A or state B. You can set the wire to either
        state at any time, and you can read the state of the wire at any time. Can
        you figure out a way to effectively communicate with just this system?
      NetSim Standalone Sending Numbers Ascii_instruction: |
        Now that you've transmitted
        information represented as decimal numbers, you can map those numbers to text
        characters to send text-based information back and forth. With a text-based
        protocol, you can easily represent and communicate all kinds of information.
        
      NetSim Standalone Sending Numbers_instruction: |
        You and your partner can now
        reliably send messages back and forth without extra coordination! While you're
        always sending bits back and forth, you can also represent those bits as decimal
        numbers. What kinds of information can you represent with this system? 
      NetSim_AddressingMessages_instruction: |
        In this version of the simulator, you
        will connect to a Router instead of directly to another student. Enter an
        address in the "To" box to send a message to another student.
      NetSim_AutomaticDNS_instruction: |
        In this version of the simulator a DNS service
        is provided for you. Send a message in the form GET [hostname] to the DNS
        service at address 15 to get a student's address.
      NetSim_ManualDNS_instruction: |
        In this version of the simulator you can't
        see the other students' addresses.  Instead, one of you must act as a name
        service, to help share addresses with each other.
      NetSim_SendAB_instruction: |
        Connect to another student.  Each of you can set
        the value of the wire between you to "A" or "B".  See if you can send
        a complete message!
      NetSim_SendAscii_instruction: |
        In this version of the simulator, you can send
        numbers or ASCII characters to one another, one bit at a time.
      NetSim_SendBits_instruction: |
        Connect to another student.  You can now set
        your wire to "0" or "1".  Send a message to your partner!
      NetSim_SendingABTest_instruction: |
        This is Sarah's test of making a netsim
        level
      NetSim_SendNumbers_instruction: |
        In this version of the simulator, you can
        view the decimal representations of the binary you are sending.
      NetSim_Superuser_instruction: You have loaded NetSim in superuser mode.
      NetSim_Variant1_instruction: |
        NetSim: Variant 1 allows students to manually
        work out the timing of sending bits back and forth.
      NetSim_Variant2_instruction: |
        NetSim: Variant 2: Students connect directly
        to one another and send entire packets back and forth, exploring systems of
        encoding data.
      NetSim_Variant3_instruction: |
        NetSim: Variant 3: Connects groups of 2-6 students
        with a router, and explores issues in routing and DNS
      New Artist Project_instruction: Joonista midagi lahedat! Sinu projekt salvestatakse ning saad selle juurde alati tagasi tulla.
      NEW Course 4 Artist Functions 1_instruction: Kas saad joonistada 100 piksli pikkuse ruudu kasutades kordusi?
      NEW Course 4 Artist Functions 10.1_instruction: Kasuta eelmise pusle funktsioone selle mustri joonistamiseks.
      NEW Course 4 Artist Functions 10_instruction: Klõpsa nuppu „redigeeri“, et täita funktsiooni määratluses kõik plokid 40-pikslise ruudu tegemiseks.
      NEW Course 4 Artist Functions 11_instruction: "Nüüd soovime luua uue funktsiooni nimega „joonista ruutude rida“, mis joonistab kuus ruutu ühes reas. Kas oskad selle funktsiooni koostada, kasutades funktsiooni „joonista ruut 20“, mille me oleme juba valmis teinud? Märkus. Pane tähele, et muutsime pliiatsijoone palju peenemaks. Klõpsa funktsioonil „joonista ruut 20“ käsku „redigeeri“, et näha, kuidas me seda tegime!\\r"
      NEW Course 4 Artist Functions 12_instruction: Kasuta selle mustri joonistamiseks viimase mõistatuse funktsiooni „joonista ruutude rida“.
      NEW Course 4 Artist Functions 13_instruction: 'Kas oskad joonistada funktsiooni „joonista ruutude rida“ abil tähe kujundi? Vihje: muuda funktsiooni „joonista ruutude rida“ nii, et sa ei peaks seda kaks korda kutsuma. Pane tähele, et sa pead liikuma edasi teatud arvu pikslite võrra ja pöörama 144 kraadi.'
      NEW Course 4 Artist Functions 14_instruction: 'Vaba mängu aeg! '
      NEW Course 4 Artist Functions 2_instruction: 'Kas oskad joonistada 3 ruutu, mis asuvad üksteisest 20 piksli kaugusel? Vihje: iga ruudu suurus on 100 pikslit'
      NEW Course 4 Artist Functions 3_instruction: Siin on uut tüüpi plokk nimega „Funktsioon“. Klõpsa käsku „redigeeri“ ja täida see siis koodiga 100-piksliste külgedega ruudu joonistamiseks. Kui oled funktsiooni muutmise lõpetanud, klõpsa käsku „Sule“ oma programmi naasmiseks.
      NEW Course 4 Artist Functions 4_instruction: 'Kasuta funktsiooni „joonista ruut“ selle mustri joonistamiseks. Vihje: sa pead iga ruudu järel kasutama plokki „pööra 120 kraadi paremale“.'
      NEW Course 4 Artist Functions 5_instruction: Kuidas teadis plokk „joonista ruut“, milliseid käske käivitada? Klõpsa funktsiooniplokis „joonista ruut“ käsku „redigeeri“. Funktsiooniredaktoris olevad plokid on määratlus, millest koosneb funktsioon „joonista ruut“. Kui oled selle uurimise lõpetanud, klõpsa käsku „Salvesta ja sule“ ning seejärel „Käivita“.
      NEW Course 4 Artist Functions 6_instruction: "Kas oskad joonistada selle pildi, kasutades funktsiooniplokki „joonista ruut“? Vihje: ruutude vahe on 20 pikslit.\\r"
      NEW Course 4 Artist Functions 7_instruction: 'Kas saad aru, kuidas kasutada funktsiooniplokke? Muudame seda ruutu nii, et selle suurus oleks 200 pikslit. Vihje: klõpsa nuppu „redigeeri“, et avada funktsiooni „joonista ruut“ redaktor. Funktsiooniredaktorist väljumiseks klõpsa käsku „Sule“. '
      NEW Course 4 Artist Functions 8_instruction: Lõime sinu jaoks uue funktsiooni nimega „joonista kolmnurk“. Kas oskad muuta funktsiooni määratlust nii, et see joonistaks 100-piksliste külgedega kolmnurga?
      NEW Course 4 Artist Functions 9_instruction: Kas oskad selle lahendada, lisades ainult ühe ploki?
      NEW Course 4 Artist Functions inspire_instruction: Klõpsa siia, et näidispilti uuesti vaadata.
      New Course 4 Artist Functions Level 4_instruction: Kasuta selle mustri joonistamiseks funktsiooni „joonista ruut“.
      NEW Course 4 Artist Params 1_instruction: Määratleme selle funktsiooni, et joonistada 50-piksliste külgedega ruut. Alustamiseks klõpsa käsku „redigeeri“.
      NEW Course 4 Artist Params 10_instruction: 'Loo funktsiooniplokk „joonista kuusnurk“ parameetriga „pikkus“. Vihje: selle kuusnurga küljepikkus on 100 pikslit. '
      NEW Course 4 Artist Params 11_instruction: Mõtle välja, kuidas seda kujundit joonistada. Lisa funktsioonile parameeter „küljed“.
      NEW Course 4 Artist Params 12_instruction: Kas oskad selle joonistuse lõpetada? Kõigi kujundite küljepikkus on 100 pikslit.
      NEW Course 4 Artist Params 12a_instruction: See pilt on eelmise sarnane. Kas oskad selle pildi tegemiseks kasutada koos oma funktsiooniga korduste arvu tsüklit?
      NEW Course 4 Artist Params 13_instruction: "Muudame seda hulknurga joonistamise funktsiooni. Selles on juba parameeter „küljed“. Lisame nüüd parameetri „pikkus“. \\r Vihje: iga kujundi ümbermõõt on 200 pikslit. Kas mäletad võrrandit, millega teha ühesuuruseid kujundeid, kui neil on erinev külgede arv?"
      NEW Course 4 Artist Params 14_instruction: Redigeeri funktsiooni „joonista spiraali serv“ nii, et see kasutaks parameetreid „pikkus“ ja „küljed“, ning loo siis need kujundid uuesti.
      NEW Course 4 Artist Params 15_instruction: 'Vaba mäng: Siin on funktsioonid, mille oled kirjutanud ning veel mõned, millega saad mängida. Joonista midagi ägedat! Katseta pliiatsijoone laiusega, et näha, kuidas see sinu joonistusi muudab!'
      NEW Course 4 Artist Params 2_instruction: 'Loo "joonista kolmnurk mille külg on 50 pikslit" funktsioon'
      NEW Course 4 Artist Params 3_instruction: "Kasutame nüüd seda funktsiooni viie kolmnurga joonistamiseks ühes reas. Vihje: kolmnurkade vahekaugus on 30 pikslit.\\r"
      NEW Course 4 Artist Params 4_instruction: Kas märkad nende funktsiooniplokkide juures mingit erinevust? Klõpsa käsku „Käivita“ ja vaata, mis juhtub.
      NEW Course 4 Artist Params 5_instruction: 'Täida ploki pikkuseparameetri sisend "???" Vihje: viisnurga külg on 100 pikslit. '
      NEW Course 4 Artist Params 6_instruction: Täida nende kujundite joonistamiseks parameeter „pikkus“, asendades koha „???“ õigete arvudega. Ruudu ja kolmnurga küljepikkus on 100 pikslit, kuusnurga küljepikkus on 75 pikslit.
      NEW Course 4 Artist Params 7_instruction: 'Kas oskad selle joonistuse lõpetada? Vihje: iga kolmnurga küljed on eelmisest 25 pikslit pikemad. Esimese kolmnurga küljepikkus on 25 pikslit.'
      NEW Course 4 Artist Params 8_instruction: Selle kolmnurgafunktsiooni kood on katki. Kas oskad funktsiooni parandada ja teha kolmnurgad küljepikkusega 25, 50 ja 75?
      NEW Course 4 Artist Params 9_instruction: Klõpsa käsku „redigeeri“, et täita funktsiooni „joonista ruut“ määratlus ja lisada üks parameeter. Selleks on vaja pikkuse parameetrit, just nagu kolmnurga puhul. See kord joonista kolm ruutu küljepikkusega 25, 50 ja 75, vahekaugus 100 pikslit.
      NEW Course 4 Artist Params inspire_instruction: "Vaba mängu inspiratsioon: oled nüüd õppinud kõike, mida on vaja sellise mustri tegemiseks! Kui see pilt sulle meeldib, proovi luua midagi sarnast. Muidugi võid ka luua täiesti omaenda disaini.\\r \\r Kas tahad teada, kuidas on tehtud meie näidismuster? "
      NEW Course 4 Artist Vars 1.5_instruction: 'Vaata koodi. Kas näed, kuidas plokk „määra pikkus“ ja „pikkus“ koos toimivad? Klõpsa käsku „Käivita“, et näha, kuidas see töötab. '
      NEW Course 4 Artist Vars 12_instruction: Nüüd koosta uuesti eelmise taseme algoritm ja loo viisnurk küljepikkusega 150.
      NEW Course 4 Artist Vars 2.5_instruction: 'Vaata koodi. Kas näed, kuidas plokk „määra pikkus“ ja „pikkus“ koos toimivad? Klõpsa käsku „Käivita“, et näha, kuidas see töötab. '
      NEW Course 4 Artist Vars 2_instruction: 'Lohista numbriplokk plokki „määra pikkus“, et joonistada 50-piksliste kolmnurkade komplekt. '
      NEW Course 4 Artist Vars 4 5_instruction: Tubli töö eelmises mõistatuses! Proovime seda uuesti, aga teeme nüüd selle ägeda 60-piksliste kuusnurkadega disaini.
      NEW Course 4 Artist Vars 4_instruction: 'Proovime uuesti. Kas oskad määrata pikkuse muutuja nii, et teha see äge disain kuusnurkadega? Vihje: see on arvu 10 kordne.'
      NEW Course 4 Artist Vars 6_instruction: "Joonista see muster, langetades pikkuse muutujat õigetes kohtades ja määrates siis õige pikkuse. (Vihje: see on arvu 10 kordne).  \\r \\r Kas märkad, kuidas saad määrata pikkuse väärtuse vaid ühe korra ja kood kasutab igal pool õiget väärtust?\\r \\r \\r"
      NEW Course 4 Bee For Loops 1_instruction: Kasuta tsüklit, et koguda nektarit igalt lillelt.
      NEW Course 4 Bee For Loops 10_instruction: Kasuta oma korduste arvu tsükli muutujat „loendur“, et määrata, kui kaugele liigutakse horisontaalsuunas.
      NEW Course 4 Bee For Loops 10a_instruction: Kas oled valmis väljakutseks? Kasuta tsüklite kohta õpitut, et proovida lahendada seda probleemi. Pea meeles, et võib-olla pead oma lahendust käivitama mitu korda, enne kui saad kõik vajalikud sammud valmis.
      NEW Course 4 Bee For Loops 11_instruction: Kas oskad kasutada tsükli muutujat, et juhtida liikumist ja nektari kogumist?
      NEW Course 4 Bee For Loops 2_instruction: Lisa vajalik kood, et mesilane koguks kindlasti kokku kogu nektari. Vaata, kui palju koodi on sul selle mõistatuse jaoks vaja! (Järgmises mõistatuses õpime lihtsama meetodi.)
      NEW Course 4 Bee For Loops 3_instruction: 'Oh, kordus teeb selle palju lihtsamaks! Kogu kood, mida sul vaja on, on seal, vaata kuidas see kokku panna ja siis vajuta "Käivita" et näha kuidas see töötab. '
      NEW Course 4 Bee For Loops 4 4_instruction: 'Nüüd peame liikuma edasi muutuja "loendur" arv kordi, siis võtma nektarit muutuja "loendur" arv kordi. Kas saad kasutada kahte tsüklit "kordus" selle ülesande lahendamiseks?'
      NEW Course 4 Bee For Loops 4_instruction: 'Asenda korduste arvu tsüklis ??? suurima nektarikogusega, mida mesilane peab koguma. '
      NEW Course 4 Bee For Loops 5 5_instruction: Kas sul on korduste arvu tsükli kasutamine juba selge? Aitame mesilasel kokku koguda ülejäänud nektari.
      NEW Course 4 Bee For Loops 5_instruction: Saad korduste arvu tsüklit kasutada ka kahanevaks loenduseks. Proovi nektarit koguda, loendades ühe kaupa 5...1.
      NEW Course 4 Bee For Loops 6_instruction: Sinu korduste arvu tsükli viimane number on nimega „juurdekasv“. Iga kord, kui tsüklit käitatakse, muutub loenduri muutuja selle väärtuse võrra. Proovi neist lilledest nektarit koguda, kasutades juurdekasvu 2.
      NEW Course 4 Bee For Loops 7_instruction: "Kombineerime nüüd loenduri muutuja matemaatikaplokiga! Kuidas saaksid kasutada loenduri muutujat, et liikuda selles aias võimalikult väikese arvu plokkidega? Mida sa pead tegema, et koguda see kord 3, 6, 9, 12, 15 nektarit? Saladus peitub muutujas „loendur“!\\r \\r Pea meeles, et kui su loendur loendab kasvavalt, lisatakse juurdekasv loenduri muutujale iga korra lõpus."
      NEW Course 4 Bee For Loops 8_instruction: "Sul on see selge! Mis juurdekasvu on vaja, et koguda 3, 6, 9, 12, 15 nektarit?\\r Vihje: mis sa pead igale arvule lisama, et saada sellele järgnev arv?"
      NEW Course 4 Bee For Loops 9_instruction: Kui tsüklis loendatakse kahanevalt, lahutatakse juurdekasv igas tsüklis sinu loenduri muutujast. Milline peab juurdekasv olema, et koguda 15, siis 12, 9, 6 ja 3 nektarit?
      NEW Course 4 Bee For Loops 95_instruction: Vaata kõiki korduste arvu osi, mille sa just lõid. Kas saad aru, milliseid arve tuleb selle mõistatuse lahendamiseks kahega korrutada? Miks see töötab?
      NEW Course 4 Play Lab Params 11_instruction: 'Vaba mängu aeg! Nüüd saad katsetada kõigi oma tööriistakastis olevate plokkidega. '
      NEW Course 4 Play Lab Params 5 5_instruction: Proovime seda uuesti, kuid nüüd vähema abiga. Mida on sul see kord vaja muuta, et panna tegelased patrullima?
      NEW Course 4 Play Lab Vars 4 5_instruction: „Mida see kood sinu arvates teeb? Klõpsa käsku „Käivita“, et näha, mis juhtub.“
      NEW Course 4 Play Labs For Loops 7a_instruction: Kas oskad seniõpitut rakendades teha nii, et iga kord, kui pingviin loendab numbreid, astuks dinosaurus sammu edasi?
      NEW Course 4 Play Labs For Loops 8 Free Play_instruction: 'Vaba mängu aeg! Nüüd saad katsetada kõigi oma tööriistakastis olevate plokkidega. '
      NEW Course 4 Play Labs For Loops 8a_instruction: 'Väljakutse: kuidas sa kasutaksid korduste arvu tsüklit, et iga tegelane käiks ringi, ütleks oma tegelase numbri ja kaoks siis ekraanilt? '
      New Play Lab Project_instruction: Loo oma lugu või mäng! Sinu projekt salvestatakse ning võid igal ajal selle juurde tagasi pöörduda.
      Ninjacat Demo B (copy 1)_instruction: "\\r\nLet’s begin by exploring a simple\nvideogame, and then figuring out how it works. You can use the arrow keys\nto move the ninja left, right and jump - try to catch the unicorn and avoid\nthe dragon!\\r\n\\r\n\\r\n\\r\n  \\r\n\\r\n"
      Ninjacat Demo B_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      Ninjacat Demo No Animate_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      October15 bat_instruction: "Freeplay: Here are some functions to play with.  Can\nyou draw a bat?\\r\n"
      October15 ghost 1_instruction: |
        Give the ghost eyes, using the "draw a circle"
        function.
      October15 JoL 1_instruction: |
        Program the artist to design a face for your
        jack-o-lantern!
      October15 pumpkin 1_instruction: |
        Finish this jack-o-lantern by drawing the
        eyes and nose in any style you would like.
      October15 stars 1_instruction: |
        Use loops and the "random integer" block
        to fill the night sky with stars of different shapes and sizes.
      Overworld Avoid Monsters_instruction: Kolliga ei tasu kokku põrgata. Liigu kollidest ettevaatlikult mööda, et jõuda oma turvalisse koju.
      Overworld Chop Tree_instruction: Puit on väga oluline ressurss. Paljud asjad on sellest tehtud. Kõnni puu juurde ja kasuta plokki „hävita“, et see maha raiuda.
      Overworld Chop Trees_instruction: Meil on vaja enne päikese loojumist maja ehitada. Maja tegemiseks on vaja palju puitu. Raiu maha kõik kolm puud.
      Overworld Free Play 20x20_instruction: Palju õnne! Oled lahendanud kõik meie mõistatused. Nüüd kasuta kõike õpitut, et kaevandada, ehitada ja luua midagi ainulaadset.
      Overworld Free Play_instruction: See maastik on sulle mängimiseks. Sina otsustad, mida ehitada.
      Overworld House Frame - A_instruction: Teeme oma maja! See koht paistab sobivat. Ehita mullaplokkidele raam.
      Overworld House Frame - C_instruction: Teeme oma maja! See koht paistab sobivat. Ehita mullaplokkidele raam.
      Overworld House Frame B_instruction: Üks sein on valmis, ehitame nüüd sinu projekti järgi ülejäänud maja! Sa pead siin küllalt palju tegevusi kordama.
      Overworld House Frame B2_instruction: Üks sein on valmis, ehitame nüüd sinu projekti järgi ülejäänud maja! Sa pead siin küllalt palju tegevusi kordama.
      Overworld House Frame C_instruction: Üks sein on valmis, ehitame nüüd sinu projekti järgi ülejäänud maja! Sa pead siin küllalt palju tegevusi kordama.
      Overworld House Frame Chosen_instruction: Ehita ülejäänud maja ükskõik millisest materjalist. Siin on abiks käsk „korda“.
      Overworld House Frame_instruction: Teeme oma maja! See koht paistab sobivat. Ehita mullaplokkidele raam.
      Overworld Minecart Track_instruction: Asud uuesti pinnal, mis sisaldab ohtralt maa-aluseid ressursse. Nüüd rajame sinu majast piki pinnaseteed raja. Esiteks tuleb rada puhastada. Liigu piki rada ja kõrvalda puud-
      Overworld Move to Sheep_instruction: Lisa teine käsk „liigu edasi“, et jõuda lambani.
      Overworld Place Wall_instruction: Iga maja algab seinast. Ehita oma maja esimene osa, pannes korduste tsüklisse käsud „aseta“ ja „liigu edasi“.
      Overworld Plant Crops_instruction: Alati tasub ette mõelda. Külva taimed mõlemale poole vett, et sa hiljem nälga ei jääks.
      Overworld Powered Minecart_instruction: Tubli töö! Kogusid hulga ressursse ja ehitasid tagasihoidliku maja. Nüüd pane kaardi servast oma maja ukseni maha rööpad.
      Overworld Shear Sheep_instruction: Aeg lambaid pügada! Kasuta käsku „püga“, et koguda mõlemalt lambalt villa.
      PDAlg 13-16 Sam Extension Puzzle_instruction: |
        Add a second parameter to "onscreen?"
        for Sam's y coordinate and update the function so it keeps him safe on all
        four sides.
      PDAlg 17-20 Luigi Extension Puzzle_instruction: |
        Without modifying your existing
        "cost" function, create a new "coupon" function that takes a pizza topping
        and coupon code and returns the cost of a pizza with that topping. If the
        coupon code is correct (you get to decide what it is), apply a 30% discount
        to the pizza.
      PDAlg 8-12 ex dr 1_instruction: |
        The definition in this Design Recipe doesn't
        match both examples. Test each example to see which is failing, and then fix
        the definition to match.
      PDAlg 8-12 ex dr 2_instruction: |
        This student has created two examples for
        the function "apples" but something's not quite right. How would you direct
        this student to correct their mistake?
      PDAlg 8-12 Rocket Height Puzzle_instruction: |
        Let's write a "rocket-height"
        function with simple acceleration. Write a function that ensures the rocket
        is at 15 meters at 1 second, 45 meters at 2 seconds, 95 at 3 seconds, and
        165 at 4 seconds.
      PDAlg Big Game History_instruction: |
        Now that you've played through a Big
        Game level you should see a new entry in your history. Click the Version History
        button and you should see at least one version. Each time you go back to a
        Big Game level you'll get a new record in your version history that you can
        revert back to.
      PDAlg Big Game Remix_instruction: "Here's your Big Game as you last left it.\nTry clicking the Remix button to spin off a new remix of your project.\\r\n\\r\nAny\nchanges you make after you click Remix will be saved on your new remix and\nnot on your main Big Game."
      PDAlg Design Recipe Delete_instruction: |
        Click the delete button to get rid
        of this function, then try creating and deleting a few of your own.
      PDAlg Design Recipe Examples_instruction: |
        The definition in this Design Recipe
        doesn't match both examples. Test each example to see which is failing, and
        then fix the definition to match.
      PDAlg Design Recipe Required_instruction: |
        Complete the Design Recipe for the
        "eggs" function, making sure to create and test your examples.
      PDAlg Updates Cond_instruction: |
        When you went to PD in the summer, the Conditional
        block that you were introduced to was black and allowed any data type to be
        used. This proved to be confusing, given that every other function we've
        seen always produces the same type of data. To help make conditionals clearer
        and more consistent we've replaced the single black block with a separate
        block for each data type.
      PDAlg Updates Errors_instruction: |
        Run the provided program and use the error
        messages to try and track down the bugs.
      PDAlg Updates Space_instruction: |
        Making use of limited programming space (especially
        on small screens) is challenging with a block based language. To help with
        this we've added a few features. Experiment with this provided code to see
        how the space can be manipulated to deal with larger programs.
      PDK5 Conditionals 1_instruction: |
        Purple flowers may have either 1 or 0 nectar,
        but you don't know which one! Be careful not to collect nectar from a purple
        flower if it doesn't have any. Check if the nectar is equal to 1 by using
        the if block.
      PDK5 Conditionals 2_instruction: |
        Try this puzzle that uses conditionals and
        loops together. Use the "if" block to decide when to turn. Hint: you only
        need one more block to complete this puzzle. 
      PDK5 Events 1_instruction: |
        So far all of the programs we've written are executed
        in order from top to bottom. In this puzzle, we'll use "Events" to respond
        to an action on demand. Make the octopus say "Hello" only when you click
        on the Octopus. 
      PDK5 Functions 1_instruction: |
        Hello. Me zombie artist. Me love drawing! Help
        me draw the square glasses.  Hint:  the bridge between the glasses is 25 pixels
        shorter than the square length.
      PDK5 Functions 2_instruction: 'Funktsioonide abil saate määratleda uued blokid! Me liigutasime blokke, et joonistada ruut funktsiooni nimega "joonista ruut". Kas te saate kasutada "joonista ruut" funktsiooni ja teha prillid? Väljakud on üksteisest 75 piksli kaugusel.'
      PDK5 Loops 1_instruction: |
        Instead of using 5 "move forward" blocks, use
        the "repeat" block with a "move forward" block inside of it. In computer
        science, this is called a "loop." 
      PDK5 Loops 3_instruction: |
        Here's another puzzle to practice loops. What happens
        if you use the repeat block to run the code already provided on the workspace
        4 times?
      Pixelation - Lesson 14 - Fix bit offset v.2_instruction: |
        Something happened
        to the bits in this image! Find the error and fix it! Hint: a few extra bits
        were added. You should only need to remove some bits.
      Pixelation - Lesson 14 - Fix bit offset_instruction: |
        A single extra bit was
        inserted into the stream of bits that make up the C of the Code.org logo.
        That extra bit bumps all of the other bits down the line which makes the logo
        look messed up. Hunt down the extra bit and remove it to fix the Code.org
        logo.
      Pixelation - Lesson 14 - Fix the error_instruction: |
        Something happened to
        the bits in this image!  Find error and fix it!  Hint: a few extra bits were
        added.  You should only need to remove some bits.
      Pixelation - Lesson 14 - Make the Letter A_instruction: |
        Make a 3x5 letter
        'A'. The widget is setup with the incorrect dimensions. Your first task
        is to set the second byte to the 8-bit binary code for 5: 0000 0101. Then
        start entering pixel data.
      Pixelation - Lesson 14 - Make your own B and W Image_instruction: |
        Now make
        your own image! We've started you off with a 10x10 canvas but you can make
        it whatever size you want. Happy pixeling!
      Pixelation - Lesson 14 - Make your own B&W Image_instruction: |
        Now make your
        own image! We've started you off with a 10x10 canvas but you can make it
        whatever size you want.  Happy pixeling!
      Pixelation - Lesson 15 - Color Free Play_instruction: |
        Requirements: The icon
        must be 16x16 pixels. You must use the Pixelation Widget to encode the bits
        of color information. The image must be encoded with at least 12 bits per
        pixel.
      Pixelation - Lesson 15 - Color Shades 4x4_instruction: |
        We start you out with
        the 4x4 image Maddie created in the video. Your task is to fill a 4x4 grid
        with colors using 12-bits per pixel. Here are the requirements: Row 1 - fill
        with shades of red. Row 2 - shades of green. Row 3 - shades of blue. Row 4
        - shades of gray.
      Pixelation - Lesson 15 - Color Shades_instruction: |
        We start you out with the
        row of shades of red that Maddie created in the video. Experiment with 6-bit
        color by filling in the bottom row of the image with shades of a different
        color. Here is an example with some shades of blue. Try your own color!
      Pixelation - Lesson 15 - Complete 3-bit color_instruction: |
        We start you with
        the 4x2 image Maddie was creating, but we've left out the last two squares.
        Finish off the image by figuring out which two colors are missing and encode
        them.
      Pixelation 2_instruction: |
        Something happened to the bits in this image!  Find
        error and fix it!
      Pixelation 4x4 Empty_instruction: |
        The width and height are now encoded in
        the pixel data. Can you figure out how to adjust the dimensions?
      Pixelation Bee_instruction: |
        This larger image of a bee encodes color with
        12 bits per pixel, but viewing in hex makes it easier to see the color of
        each pixel. If you switch to binary mode - hold on to your hat - it's a lot
        of bits. Here's another mind-blowing thing to try: slide the bits per pixel
        up to 24 bits per pixel. What happens? Can you explain this behavior?
      Pixelation Flappy_instruction: |
        Here is a bigger image at 9 bits per pixel.
        With 9 bits per pixel you can express 512 different colors. Click through
        to see the next image which is even more sophisticated, but easier to understand.
      Play Lab Rocket 1_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second... press "Run" to see how this word problem looks as an animation.
      Play Lab Rocket 2_instruction: |
        We've started the Design Recipe for rocket-height
        using the contract and examples you just wrote. Complete the function definition
        for rocket-height and run your animation.
      Play Lab Rocket 2B_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second. Using the Design Recipe, write a function called rocket-height
        that takes in a number of  seconds that have passed since the rocket took
        off, and produces the height of the rocket at that time.
      Play Lab Rocket 3_instruction: |
        Awesome, now can you update that function so
        that our rocket moves more quickly? Make sure to update the purpose statement,
        examples, and function definition to launch a rocket at 40 meters per second.
      Play Lab Rocket 4 (copy 1)_instruction: 'Päris rakettide starikiirus on üsna aeglane, alles hiljem hakkavad nad kiirust koguma- paneme enda oma ka! Kirjuta astmeline funktsioon mis kirjeldab seda raketti mis liigub "sekundeid" ruudus meetrit sekundis.'
      Play Lab Rocket 4_instruction: |
        Real rockets start off slowly and gain speed
        over time - so let's add some simple acceleration to ours! Can you write
        a function that describes a rocket that is at 10 meters at 1 second, 40 meters
        at 2 seconds, 90 meters at 3 seconds, 160 at 4 seconds and so on?
      Play Lab Rocket 5_instruction: |
        Much better, but let's write one more function
        with simple acceleration. This time the rocket should be 15 meters at 1 second,
        45 meters at 2 seconds, 95 at 3 seconds, and 165 at 4 seconds.
      Play Lab Rocket Free Play_instruction: |
        Free Play: Experiment with your rocket-height
        function to make the rocket fly in different ways. Click "Finish" when you
        are done.
      Poorva-test_instruction: |
        Here are regular instructions for a level. There
        is nothing fancy going on here.
      Quantum Bee - Ryan_instruction: |
        These clouds are bugging me! Some of the clouds
        have flowers inside, and some don't. I should check each cloud, and only
        get nectar from the flowers.
      Quantum Bee_instruction: |
        Purple flowers may have either 1 or 0 nectar, but
        you don't know which one! Be careful not to collect nectar from a purple
        flower if it doesn't have any. Check if the nectar is equal to 1 by using
        the if block.
      Ryan - 4-5 Bee Conditionals 2_instruction: See mesilane tahab praegu ainult nektarit. Mitte kõik objektid ei ole lilled, seega testi IGAT PILVE, et näha, kas selle taga peidab end lill. Kui leiad lille, kogu sellelt nektar.
      Ryan - Bee Conditionals_instruction: Mesilane tahab ainult nektarit praegu. Kõik asjad ei ole lilled, nii et vaata IGA PILVE alla, et näha kas see peidab lille. Kui peidab, siis saad sa nektarit koguda.
      Ryan Test Locked Blocks_instruction: Siin on funktsioon nimega „patrull“. Muuda seda, et liigutada kassi 400 pikslit üles ja siis 400 pikslit alla.
      Ryan's clone of C4S15P10_instruction: "We've added one last function for you.\n\\r\n\\r\nUse an \"if\" statement to program your game to call the \"level_up\"\nfunction only when \"player_score\" becomes greater than a certain number.\\r\n\\r\nFor\nexample: \"player_score\" > 6\\r\n\\r\nPlay the game, and make it past level\n4 to move to the next puzzle. "
      Sam the Butterfly 1 (copy 1)_instruction: |
        This butterfly is named Sam, and
        the game area is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels
        tall! As you can see, Sam is free to walk around the yard, and the coordinates
        at the top of the screen update to tell you his location. Use the arrow keys
        to move sam around his yard. Help Sam collect all of the flags to move on.
      Sam the Butterfly 1_instruction: |
        This bat is named Sam, and the game area
        is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels tall! As you can
        see, Sam is free to walk around the yard, and the coordinates at the top of
        the screen update to tell you his location. Click "Run" and then use the
        arrow keys to move Sam around his yard, making note of Sam's coordinates
        at different locations. Click "Finish" when you're ready to move on.
      Sam the Butterfly 2_instruction: |
        Sam's mom wants to make sure that she can
        always see at least a bit of him, so lets write some functions that help make
        sure he doesn't go too far out of the yard. Here's a function called safe-left?
        - it should take a Number for its domain that represents Sam's x-coordinates
        and return true if he's completely visible on screen. If your function works,
        Sam shouldn't be able to leave the yard from the left side.
      Sam the Butterfly 3_instruction: |
        In the last puzzle we kept Sam from leaving
        on the left, now let's do the same thing on the right. Complete the safe-right?
        function to make sure Sam can't go off the right side of the screen.
      Sam the Butterfly 4_instruction: |
        Huh, we can keep Sam from leaving on the
        left, or we can keep him from leaving on the right, but how can we keep him
        safe from leaving both directions? Try using the and block to program the
        function on-screen? to check if Sam is safe-left? and safe-right?
      Sam the Butterfly 5_instruction: |
        Free Play: Awesome, we've kept Sam safe
        on the left and right! Use this free play stage to experiment with your functions
        and further improve onscreen?
      Sam the Butterfly 6_instruction: |
        We've added a new parameter "y" to the
        "on-screen?" function. Update the function so that it checks that "safe-left?"
        AND "safe-right?" AND "safe-up?" are all true. When you've fixed the
        function, try going out of the yard from the left, right, and top sides.
      Sam the Butterfly 7_instruction: |
        Only one last direction to worry about! Create
        a "safe-down?" function and update the "on-screen?" function so that it
        checks up, down, left, and right.
      Sam the Butterfly Complete_instruction: |
        Only one last direction to worry about!
        Create a "safe-down?" function and update the "on-screen?" function so
        that it checks up, down, left, and right.
      scrat 16 (copy 1)_instruction: |
        Acorn! Acorn! Acorn! Use an "if" block to
        get me there with the fewest number of blocks.
      scrat 16_instruction: 'Tammetõru! Tammetõru! Tammetõru! Kasuta "kui" plokki et saada mind sinna vähimate liigutustega.'
      scrat 17 (copy 1)_instruction: |
        Ok, let's do that again for practice - this
        isn't very different, but watch out for the <insert obstacle name for Scrat>!
      scrat 17_instruction: 'Okei, teeme seda praktika mõttes uuesti- see ei ole väga erinev aga hoidu seinast!'
      scrat 18 (copy 1)_instruction: |
        The "If-else" blocks checks a condition,
        and then does one thing OR another. To get me to the acorn try to use this
        new block.
      scrat 18_instruction: '"If-else" plokid kontrollivad tingimusi ja siis teevad vastavalt asju. Et saada mind tõruni, kasuta seda uut plokki.'
      scrat 19 (copy 1)_instruction: |
        One more practice of the "if-else" block,
        can you get it right on your first try?
      scrat 19_instruction: Üks harjutus veel, kas sa saad esimese korraga õigesti?
      scrat 20_instruction: Kas saad lisada ainult 3 plokki et aidata mul lahendada veel raskem pusle? Kui sa seda õigesti teed, saan ma kõndida ükskõik millisel käänulisel rajal, vahet pole kui pikk see on. Kiirusta! Jää sulab!
      SpecialFrozenLevel_instruction: Sa oled ametlikult meister kunstnik! Loo talve võlumaa.
      Standalone_Artist_1_instruction: Tere tulemast rakendusse Kunstnik! Proovime kõigepealt teha lihtsa ruudu, kasutades paremale pööramise plokki ja edasiliikumise plokki. Iga külg peab olema 100 piksli pikkune.
      Standalone_Artist_2_instruction: 'Joonista see teemant 120- ja 60-kraadiste nurkade ning 150 piksli pikkuste külgedega.'
      Standalone_Artist_3_instruction: Kas oskad joonistada selle kuusnurga 100-piksliste külgede ja 60-kraadiste pööretega?
      Standalone_Artist_4_instruction: 'Nüüd on sul üks uus plokk: tsükkel. See kordab mingit käskluste komplekti. Mis juhtub, kui kordad neid käske 6 korda?'
      Standalone_Artist_5.5_instruction: 'Vaata, kuidas me lihtsustasime teemanti koodi, tehes sellest tsükli. Saad korrata kogu jada 12 korda, et joonistada lille. Vihje: pärast teemanditsüklit tuleb keerata 30 kraadi, et sa ei joonistaks uuesti üle sedasama teemanti.'
      Standalone_Artist_5_instruction: Mitu korda pead sa seda teemanti kordama lille joonistamiseks?
      Standalone_Artist_6_instruction: 'Korda seda kuusnurga koodi 6 korda disaini loomiseks. Mitu korda pead sa iga kord pöörama? Vihje: jaga täisringi kraadide arv tsükli korduste arvuga.'
      Standalone_Artist_7_instruction: 'Funktsioon on teine programmeerimisvahend, mis aitab sul vältida kordamist. See funktsioon joonistab lille, nii et saad seda kasutada alati, kui soovid joonistada lille. Kasuta seda ja uut plokki „hüppa“ nende lillede joonistamiseks. Vihje: lillede vahekaugus on 150 pikslit.'
      Standalone_Artist_8_instruction: 'Siin on funktsioon "joonista kujund" mille me programmeerisime kuusnurki joonistama.  Käivita kood et näha mida see teeb, seejärel eksperimenteeri funktsiooniga ja vaata mis juhtub.  Kas sa suudad selle panna nelinurki, kolmnurki või kaheksanurki joonistama panna?'
      Standalone_Artist_9_instruction: Lase nüüd käia ja joonista, mida aga tahad! Sul on isegi üks tühi funktsioon, mida võid panna tegema ükskõik mida!
      Standalone_Artist_v2_instruction: Tere tulemast rakendusse Kunstnik! Proovime kõigepealt teha lihtsa ruudu, kasutades paremale pööramise plokki ja edasiliikumise plokki. Iga külg peab olema 100 piksli pikkune.
      template test_instruction: "what's up"
      Test Play Lab_instruction: This is a test play lab level.
      test_sarah_instruction: hi hi
      Text Compression 1_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      Total Artist Clone Me_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      U1L10 NetSim numbers with decimal_instruction: |
        Invent and test a protocol
        for encoding and sending text messages. Your protocol must include the letters
        a-z, spaces, and common punctuation marks. You may add additional characters
        if you wish. See the worksheet handed out by your teacher for more detailed
        instructions!
      U1L11 NetSim numbers with Ascii_instruction: |
        Work with a partner or in a small
        team to develop a protocol that allows you to send formatted text. See the
        worksheet handed out by your teacher for more detailed instructions!
      U1L13 Text Compression_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      U1L4 NetSim SendAB_instruction: |
        Develop, document, and test a protocol that
        allows you to use Internet Simulator to relay a message. See the worksheet
        for more detailed instructions.  
      U1L8 NetSim numbers no decimal_instruction: Default instructions
      U1L8 NetSim numbers with decimal_instruction: |
        With your partner, develop a
        protocol or set of rules for communicating a drawing using only bits. See
        the worksheet handed out by your teacher for more detailed instructions!
      U2 frequency caesar_instruction: Juhised
      U2 frequency random sub_instruction: Juhised
      U2 vigenere cipher_instruction: Juhised
      U2 Vigenere_instruction: Test
      U2L04 - NetSim Routers with Addresses_instruction: |
        Send messages with your
        classmates (Click to see full instructions)
      U2L05 - NetSim - Packets and Building TCP_instruction: "Develop a Protocol\nfor Reliably Sending a Message.\\r\n\\r\nConstraints:\\r\n- Packets may contain\nonly 6 characters\\r\n- Packets may drop with small probability\\r\n- Packets\nmay not arrive in order"
      U2L10 NetSim Automatic DNS_instruction: |
        In this version of the Internet Simulator,
        a Domain Name System (DNS) is provided for you and knows the IP addresses
        of all connected computers. Send a message in the form GET [hostname] to the
        DNS service at address <yourRouterNumber>.15 to get a student's address.
      U2L10 NetSim Manual DNS_instruction: |
        In this version of the simulator you
        can't see the other students' addresses.  Instead, one of you must act as
        a name service, to help share addresses with each other.
      U2L14 frequency random_instruction: Test
      U2L2 NetSim Hub Mode_instruction: "Now use the Internet Simulator to send the\nbattleship moves. For setup, join a Room with your group, and add ships to\nyour paper board for each opponent. When playing, all communication must be\ndone through the tool, so no talking, but have fun!\\r\n"
      U2L3 NetSim Hub Mode_instruction: |
        Use the Internet Simulator to test out your
        group's binary communication protocol for battleship. How short can you make
        the message and response?
      U2L4 NetSim Routers Addresses_instruction: "For this activity, connect to a\nrouter with the others in your group. Important note: The router will only\nproperly route messages where the first 4 bits are the To: address and the\nsecond 4 bits are the From: address.\\r\n\\r\n[TODO: NetSim needs to support\nhierarchical addresses. For now, level is set up for 4 bit to and from addresses]"
      U2L5 NetSim Classroom Internet_instruction: "For this activity, connect to\na router with the others in your group. The Internet Simulator now provides\na place for you to put the To and From addresses, so you don't have to type\nout the bits manually.\\r\n\\r\n"
      U2L7 NetSim Need for Packets_instruction: |
        Transfer your favicon to a partner
        across a network in which the larger a packet grows, the more likely it is
        to be dropped.
      U3 - Arrays - appendItem_instruction: |
        Create an array of odd numbers 1-11
        by using appendItem. (Click to see full instructions)
      U3 - Arrays - assignment_instruction: |
        Use indexes to change the values in
        this array from 1 to 0. (Click to see full instructions)
      U3 - Arrays - assignment2_instruction: |
        Calculate the sum of three values stored
        in an array. (Click to see full instructions)
      U3 - Arrays - assignment3_instruction: |
        Increase the value of each value in
        the randomly generated array by 1. (Click to see full instructions)
      U3 - Arrays - createFirstArray_instruction: |
        Create an array of the even numbers
        from 0 to 10 and display its contents with console.log. (Click to see full
        instructions)
      U3 - Arrays - Demo App_instruction: |
        Use the "My Favorite Things" app. How
        might this app be making use of an array? (Click to see full instructions)
      U3 - Arrays - expressionsAsIndexes_instruction: |
        Write a program that displays
        a randomly chosen color from the array. (Click to see full instructions)
      U3 - Arrays - favThings addItem_instruction: |
        Write code that allows a user
        to add their own favorite things to the list. (Click to see full instructions)
      U3 - Arrays - favThings bounds_instruction: |
        Add if statements to your event
        handlers that prevent the global index from going out of bounds. (Click to
        see full instructions)
      U3 - Arrays - favThings Counting Variable_instruction: |
        Create a global variable
        for the current index and use it to display the first item in the array. (Click
        to see full instructions)
      U3 - Arrays - favThings createArray_instruction: |
        Create an array of words
        describing your favorite things. (Click to see full instructions)
      U3 - Arrays - favThings firstOutput_instruction: |
        Use setText to display the
        first item in the array. (Click to see full instructions)
      U3 - Arrays - favThings giveIDs_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - favThings keepPlaying_instruction: |
        Make any other improvements
        you want! (Click to see full instructions)
      U3 - Arrays - favThings Next_instruction: |
        Write code that allows the user
        to move forward through your list by clicking the "Next" button. (Click
        to see full instructions)
      U3 - Arrays - favThings Prev_instruction: |
        Write code that allows the user
        to move backward through your list by clicking the "Last" button. (Click
        to see full instructions)
      U3 - Arrays - favThings template_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - globalVariableIndex_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - indexPractice_instruction: |
        Write the contents of the array to
        the screen in numerical order. (Click to see full instructions)
      U3 - Arrays - insertingItems_instruction: |
        Insert items into an array to form
        a complete sentence. (Click to see full instructions)
      U3 - Arrays - insertionErrors_instruction: |
        Run each command that references
        indexes that are out of bounds and observe the results. (Click to see full
        instructions)
      U3 - Arrays - introIndex_instruction: |
        Display the first and last element in
        the array. Display the number 5 from the array. (Click to see full instructions)
      U3 - Arrays - length_instruction: |
        Use list.length to determine the length
        of each array. (Click to see full instructions)
      U3 - Arrays - lengthMinus1_instruction: |
        Use list.length - 1 to log the last
        item in the array to the console. (Click to see full instructions)
      U3 - Arrays - remove_instruction: |
        Remove items from an array to form a complete
        sentence. (Click to see full instructions)
      U3 - Arrays - stringsInArrays_instruction: |
        Write a sentence word by word by
        adding strings to an array. (Click to see full instructions)
      U3 - Canvas - 200dots_instruction: |
        Add a loop to your program that draws 200
        dots on your canvas. (Click to see full instructions)
      U3 - Canvas - appendToArray_instruction: |
        Create an array to store each event
        parameter. Append each event parameter to this array within your event handler.
        (Click to see full instructions)
      U3 - Canvas - changeToMouseMove_instruction: |
        Change your program so that dots
        are drawn at the location of the mouse as the user moves the mouse on the
        canvas. (Click to see full instructions)
      U3 - Canvas - clickToAdd_instruction: |
        Change your program so that dots are
        added to the canvas when the user clicks on it. (Click to see full instructions)
      U3 - Canvas - delete_instruction: |
        Create a button that deletes the drawing
        by clearing the canvas and removing all stored values. (Click to see full
        instructions)
      U3 - Canvas - draw at click point_instruction: |
        Change your program so that
        dots are drawn at the location of the mouse click. (Click to see full instructions)
      U3 - Canvas - freePlay_instruction: |
        Extend the functionality of one of the
        effects, or create an entirely new one of your own. (Click to see full instructions)
      U3 - Canvas - introCanvas_instruction: |
        Add a canvas to your app and set it
        to be the active canvas. Then add a large dot to your canvas. (Click to see
        full instructions)
      U3 - Canvas - movementFunction fix Orig_instruction: |
        Modify the "Original"
        button event handler so that it takes the movement of the mouse into account.
        (Click to see full instructions)
      U3 - Canvas - movementFunction_instruction: |
        Write a function that takes the
        movement of the mouse as input and generates a line width as output. (Click
        to see full instructions)
      U3 - Canvas - One Dot sprayPaint_instruction: |
        Write code that redraws your
        image using a dot whose x and y locations use offsetX and offsetY with a small
        random value added. (Click to see full instructions)
      U3 - Canvas - redrawOriginal_instruction: |
        Write a function that processes
        your array, redrawing the dots as they originally appeared. (Click to see
        full instructions)
      U3 - Canvas - redrawRandom_instruction: |
        Set up a button and event handler
        for the random function. (Click to see full instructions)
      U3 - Canvas - redrawRandom2_instruction: |
        Write a function that processes your
        array, redrawing every dot with a random size. (Click to see full instructions)
      U3 - Canvas - shiftKey_instruction: |
        Add an if statement to your event handler
        so dots are only drawn when the shift key is pressed. (Click to see full instructions)
      U3 - Canvas - sketch_instruction: |
        Write code that redraws your image using
        a sketch effect. (Click to see full instructions)
      U3 - Canvas - sprayPaint_instruction: |
        Update the spray paint code so that
        it redraws your image using multiple random dots instead of using a nested
        for loop. (Click to see full instructions)
      U3 - Canvas - transparentDots_instruction: |
        Change the colors of your dots
        so they have a fully transparent stroke and partially transparent fill. (Click
        to see full instructions)
      U3 - Canvas - usingOffsetXY_instruction: |
        Add a console.log command inside
        the function of your event handler. Use it to display the event parameter.
        Click on the screen to see the contents of the event parameter (Click to see
        full instructions)
      U3 - Conditional Basics - 6_instruction: |
        Add a setText after the if statement
        to "Nope. Guess again." (Click to see full instructions)
      U3 - Conditionals - Combine AND and OR_instruction: |
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instrucitons.
      U3 - Conditionals - Combine AND OR and NOT_instruction: |
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instructions.)
      U3 - Conditionals - Combine AND OR Simple_instruction: |
        Write an if statement
        that uses AND and OR to display "Sleep in!" if it's the weekend and the
        user is a teenager. (Click to see full instructions.
      U3 - Conditionals - intoOr_instruction: |
        Add 2 if statements that use the OR
        operator. (Click to see full instructions)
      U3 - Conditionals - introAND_instruction: |
        Add 2 if statements that use the
        OR operator. (Click to see full instructions)
      U3 - Conditionals - Simple AND_instruction: |
        Write an if statement that uses
        AND to display "You are a teenager." if the user enters an age between 13
        and 19. (Click to see full instructions)
      U3 - Conditionals - Simple OR_instruction: |
        Write an if statement that uses
        OR to display "It's the weekend!" if the user enters a weekend day at the
        prompt. (Click to see full instructions)
      U3 - Design Mode - Console Log_instruction: |
        Update the ID names and `console.log`
        messages to match the correct button. (Click to see full instructions.)
      U3 - Design Mode - Layers and Delete_instruction: |
        Fix the layout of the bullseye
        game. (Click to see full instructions)
      U3 - Design Mode - Multi Screens 2_instruction: |
        Make a 2 screen app which
        can switch back and forth between a black screen and a white screen using
        buttons. (Click to see detailed instructions.)
      U3 - Design Mode - Multi Screens_instruction: |
        Make a 2 screen app with a black
        screen and a white screen. (Click to see detailed instructions)
      U3 - Design Mode - Other Events_instruction: |
        Delete the button and make the
        image move to a random location when you click on it. (click to see detailed
        instructions)
      U3 - Design Mode - WTF Console Log_instruction: |
        Add a 3 console.log messages
        and test them out. (Click to see full instructions.)
      U3 - Design Mode -Recreate Beyond Buttons_instruction: |
        Recreate the game from
        the "Chaser Game" with a Welcome Screen and Game Over Screen. (Click to
        see full instructions.)
      U3 - Design Mode 1_instruction: |
        Add a large red button to your screen using
        Design Mode. (Click for full instructions.)
      U3 - Dice - Dropdown and Score_instruction: |
        Add guess and score to the Dice
        Game (Click to see full instructions)
      U3 - Dice - Dropdown with Strings_instruction: |
        Add a dropdown for difficulty
        level that prints the difficulty level in the console. (Click to see full
        instructions)
      U3 - Dice - If_instruction: |
        Show different die images for the random number
        generated. (Click to see full instructions)
      U3 - Dice - Nested_instruction: |
        Use nested if statements to make the scoring
        different for the different game levels. (Click to see full instructions)
      U3 - High Low - Debug_instruction: |
        Debug the order of the conditionals so
        that it will actually tell the user when their guess is close. (Click to see
        full instructions)
      U3 - High Low - Dropdown_instruction: |
        Add a dropdown for their guess instead
        of promptNum (Click to see full instructions)
      U3 - High Low - Else if_instruction: |
        Add an else-if statement in order to
        tell the user if their guess is high or low instead of just wrong. (Click
        to see full instructions)
      U3 - High Low - Else_instruction: "Add an else statement so that the program\nwill tell the user when they are right and when they are wrong. (Click to\nsee full instructions)\\r\n"
      U3 - High Low - If_instruction: |
        Add code to the if statement that indicates
        the user guessed the secret number. (Click to see full instructions)
      U3 - Keys - Add Image URLs_instruction: |
        Add image URLs to your array. Replace
        the text area with an image and setText with setImageURL. Then test your app!
        (Click to see full instructions)
      U3 - Keys - Buttons and Keys_instruction: |
        Have the program respond the same
        way for both clicking images on the screen and hitting the up and down keys
        on the keyboard. (Click to see full instructions)
      U3 - Keys - Demo App_instruction: |
        Play with the image scroller. Press the
        left and right arrows to progress through the images.
      U3 - Keys - Final Image Scroller_instruction: |
        Update the image scroller to
        respond to buttons and key presses. (Click to see full instructions)
      U3 - Keys - Functions_instruction: |
        Write doUpArrow and doDownArrow functions
        and call the functions instead of duplicating the code. (Click to see full
        instructions)
      U3 - Keys - Key Up and Down_instruction: |
        Try out the keyup and keydown events
        to see how they are different from keypress. (Click to see full instructions)
      U3 - Keys - Multiple Keys_instruction: |
        Play a different sound when the down
        arrow is pressed. (Click to see full instructions)
      U3 - Keys - Practice Adding Images with URL_instruction: |
        Add image URLs to
        your image array. Test out the add button. Style your image scroller. (Click
        to see full instructions)
      U3 - Keys - Words to Images_instruction: |
        Add image URLs to your image array.
        Test out the add button. Style your image scroller. (Click to see full instructions)
      U3 - Loops -  9 Part 2_instruction: |
        Change the boolean expression for the
        while loop so that it will roll until both dice are greater than 3. (Click
        to see full instructions)
      U3 - Loops -  Complex Condition_instruction: |
        Change the boolean expression
        for the while loop so that it will stop when both dice are greater than or
        equal to 5. (Click to see full instructions)
      U3 - Loops - 1_instruction: |
        Change the condition for the while loop to check
        if the variable num is less than 90. (Click to see full instructions)
      U3 - Loops - 10_instruction: |
        Write a program that simulates the rolling of
        two dice. Roll the dice repeatedly until the sum of the dice is either 7 or
        11.
      U3 - Loops - 11_instruction: |
        Fix the condition so that it keeps rolling the
        die as long as the value is not a 2 or a 3 instead of rolling infinitely.
        (Click to see full instructions)
      U3 - Loops - 12_instruction: |
        Change the code so that it prints the string
        "Hi" 5 times. (Click to see full instructions)
      U3 - Loops - 13_instruction: |
        Update the code to count up by 3 instead of 1.
        (Click to see full instructions)
      U3 - Loops - 14_instruction: |
        Change the loop condition to prevent the infinite
        loop and stop counting once the count is past 30. (Click to see full instructions)
      U3 - Loops - 15_instruction: |
        Count the number of times the sum of the dice
        is 12. (Click to see full instructions)
      U3 - Loops - 16_instruction: |
        Find out how many times you have to roll to get
        the sum of 7 100 times (Click to see full instructions)
      U3 - Loops - 2_instruction: |
        Try creating an infinite loop using !=, > and
        <. (Click to see full instructions)
      U3 - Loops - 3_instruction: |
        Change the if statement to a while loop so the
        program will run until it rolls a 6. (Click to see full instructions)
      U3 - Loops - 4_instruction: |2
         Use the Debug Commands to make a list of all
        the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - 5_instruction: |
        Add code inside the while loop which will update
        the variable num so that the condition will eventually become false. (Click
        to see full instructions)
      U3 - Loops - 6_instruction: |
        Fix the problem so the loop will run at least
        once. Change the initial value of num to a dummy value such as -1. (Click
        to see full instructions)
      U3 - Loops - 7_instruction: |
        Without adding any lines of code, reorder the
        code so that it prints all the values of num. (Click to see full instructions)
      U3 - Loops - 8_instruction: |
        Debug which number is not getting printed and
        add a write statement to display that value. (Click to see full instructions)
      U3 - Loops - 9_instruction: |2
         Modify the condition so that it keeps rolling
        as long as both are less than 3. (Click to see full instructions)
      U3 - Loops - Continue_instruction: |2
         Use the Debug Commands to to make a list
        of all the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - minus = operator_instruction: |
        Update the code to use the -= operator
        to count from 30 down to 0 by 3's. (Click to see full instructions)
      U3 - Loops - Minus Minus_instruction: |
        Change the code to count down from 10
        to 1. (Click to see full instructions)
      U3 - Loops - plus and minus = operator_instruction: |
        Update the code to use
        the += operator. (Click to see full instructions)
      U3 - Loops - Plus Plus_instruction: |
        Change the code to use count++ instead
        of count = count + 1.  (Click to see full instructions)
      U3 - Loops - Typing in Console_instruction: |
        Use console to check the ending
        value of num. (Click to see full instructions)
      U3 - Loops And Arrays - Add 5_instruction: |
        Add 5 to all the values in an array
        (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 1_instruction: |
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 2_instruction: |
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Counting Times_instruction: |
        Count the number of times
        5 appears in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Divid by 2_instruction: |
        Divide every value in the
        array by 2. (Click to see full instructions)
      U3 - Loops And Arrays - Find Max_instruction: |
        Design a function that displays
        the smallest number in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Find Min_instruction: |
        Complete the findMinVal function
        to find and display the smallest value in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Functions that Return Value_instruction: |
        Call findMin
        within the console.log statement to calculate the minimum of two values.  (Click
        to see full instructions)
      U3 - Loops And Arrays - General Search Param_instruction: |
        Add a second parameter
        to the search function for the value to search for.  (Click to see full instructions)
      U3 - Loops And Arrays - Intro For Loop_instruction: |
        Add a for loop with a
        console.log inside and test out the 3 pieces of the for loop. (Click to see
        full instructions)
      U3 - Loops And Arrays - Linear Search_instruction: |
        Visit every element in
        the array and display "true" if the value is a 5, and "false" otherwise.
        (Click to see full instructions)
      U3 - Loops And Arrays - Loop Array If_instruction: |
        Use an if statement to
        only display the values in the array that are greater than 5. (Click to see
        full instructions)
      U3 - Loops And Arrays - Make it a Function - add list parameter_instruction: |
        Create
        a function that takes a list parameter and prints if the list contains a 5.
        (Click to see full instructions)
      U3 - Loops And Arrays - Make it a Function_instruction: |
        Move the code that
        searches the list for a 5 into a function called "search". (Click to see
        full instructions)
      U3 - Loops And Arrays - Multiple Returns_instruction: |
        Test out the return
        values of the findMax function.  (Click to see full instructions)
      U3 - Loops And Arrays - Print Array_instruction: |
        Use a for loop to print out
        all the values in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Printing Single True_instruction: |
        Process the array
        and display a single "true" if the array contains a 5 or a single "false"
        if it does not.  (Click to see full instructions)
      U3 - Loops And Arrays - Return Index_instruction: |
        Make the search function
        return the index of the search value in the array. (Click to see full instructions)
      U3 - Loops And Arrays - Return Value_instruction: |
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Loops And Arrays - Search and Remove_instruction: |
        Search for 5 in the
        array and remove it from the array. (Click to see full instructions)
      U3 - Loops And Arrays - Search with Boolean Var_instruction: |
        Make a boolean
        variable to use as a flag to keep track of whether there is a 5 in the array.
        (Click to see full instructions)
      U3 - Loops And Arrays - useFindMin_instruction: |
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Movie Bot - Multiple If Sequences_instruction: |
        Add another set of if,
        else if, and else statements inside the question if statement to check for
        keywords for movie ratings (G, PG, PG-13, and R). (Click to see full instructions)
      U3 - Movie Bot - Nested Motivation_instruction: |
        Add a separate set of if statements
        to check for a "?" in the input. (Click to see full instructions)
      U3 - Movie Bot - toLowerCase_instruction: |
        Use the toLowerCase command to change
        all user input into lowercase letters after they enter it. (Click to see full
        instructions)
      U3 - Movie Bot - When Multiple If Statements_instruction: |
        Add an if and else-if
        statement that checks for please and thank you. (Click to see full instructions)
      U3 - Practice Create Performance Task_instruction: |
        Design and implement your
        practice Create Performance Task. (Click to see full instructions)
      U3 - Read Record - 1.2_instruction: "Console.log the records returned by a\ncall to readRecords. (Click to see full instructions)\\r\n"
      U3 - Read Record - 1.5_instruction: "Console.log the records returned by a\ncall to readRecords. (Click to see full instructions)\\r\n"
      U3 - Read Record - 1.6_instruction: "Console.log the records returned by a\ncall to readRecords. (Click to see full instructions)\\r\n"
      U3 - Read Record - 1_instruction: "Console.log the records returned by a call\nto readRecords. (Click to see full instructions)\\r\n"
      U3 - Read Record - 2_instruction: "Change the table name so that the records\nare read from the new table.(Click to see full instructions)\\r\n"
      U3 - Read Record - 3_instruction: "Change the name of the table in a readRecords\ncommand to read from a table that does not exist. (Click to see full instructions)\\r\n"
      U3 - Read Record - 4.1_instruction: "Print out each record return from the\nreadRecords call individually. (Click to see full instructions)\\r\n"
      U3 - Read Record - 4_instruction: "Print out each record return from the readRecords\ncall individually. (Click to see full instructions)\\r\n"
      U3 - Read Record - 5 and half_instruction: "Print out the name of each movie\nin the records return from the readRecords call. (Click to see full instructions)\\r\n"
      U3 - Read Record - 5_instruction: "Print out the name of each movie in the\nrecords return from the readRecords call. (Click to see full instructions)\\r\n"
      U3 - Return Values - constrainTurtle_instruction: |
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Return Values - debuggingConstrain_instruction: |
        Correct the error in
        constrain so that it returns the appropriate value.  (Click to see full instructions)
      U3 - Return Values - debuggingMaxVal_instruction: |
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - debuggingReturns_instruction: |
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - increase1_instruction: |
        Call the increase function within
        moveForward, write, and console.log.  (Click to see full instructions)
      U3 - Return Values - increase2_instruction: |
        Change the increase function to
        return 3 times the input value. (Click to see full instructions)
      U3 - Return Values - min1_instruction: |
        Test out the return values of the findMax
        function.  (Click to see full instructions)
      U3 - Return Values - useFindMin_instruction: |
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - useMinVal_instruction: |
        Call minVal within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - wrapTurtle_instruction: |
        Write wrap in this simple app
        to let the turtle "wrap" to the other side of the screen when it goes off.  (Click
        to see full instructions)
      U3 - Return Values - writeMaxVal_instruction: |
        Write the function maxVal and
        then use it within the console.log statement to calculate the maximum of two
        values.  (Click to see full instructions)
      U3 - Search Terms - 1_instruction: "Create an array of all the movies made\nin 2008 and print it out. (Click to see full instructions)\\r\n"
      U3 - Search Terms - 2_instruction: "Print out all the movies with year 2008\nusing the readRecords search terms. (Click to see full instructions)\\r\n"
      U3 - Search Terms - 3_instruction: "Print whether or not there are movies matching\nthe search criteria (Click to see full instructions)\\r\n"
      U3 - Search Terms - 4_instruction: "Print whether or not there are movies matching\nthe search criteria (Click to see full instructions)\\r\n"
      U3 - Search Terms - 5_instruction: "Print out the cities that are in California\nor have a population of 2,000,000. (Click to see full instructions)\\r\n"
      U3 - Search Terms - 6_instruction: "Print out the cities that are in California\nor have a population of 2,000,000. (Click to see full instructions)\\r\n"
      U3 - Simulation - 1_instruction: |
        Use a while loop to "flip a coin 10 times"
        and write the values to the screen. (Click to see full instructions)
      U3 - Simulation - 2.1_instruction: |
        Change your looping condition so the simulation
        runs until there are 5 heads flipped. (Click to see full instructions)
      U3 - Simulation - 2.5_instruction: |
        Run your simulation to get the full 10,000
        heads! How long did it take? (Click to see full instructions)
      U3 - Simulation - 2_instruction: |
        Keep track of how many heads (1's) your
        program generates and print the results to the screen. (Click to see full
        instructions)
      U3 - Simulation - 3_instruction: "Add functionality that counts how many heads\nin a row are flipped. (Click to see full instructions)\\r\n"
      U3 - Simulation - 4_instruction: |
        Update your while loop's condition so the
        the coin flips until there are three heads in a row. (Click to see full instructions)
      U3 - Simulation - 5_instruction: |
        Change your while loop to run until you get
        a streak of 12 heads. How many flips did it take? (Click to see full instructions)
      U3 - Simulation - 6_instruction: |
        Keep adding to your simulation. What do you
        want to explore next? (Click to see full instructions)
      U3 - Simulation - App_instruction: |
        Change your code to run the full simulation
        with 10,000 coins. What was your longest streak of heads? (Click to see full
        instructions)
      U3 - Simulation - Template_instruction: |
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3 - User Input - Save getText To Variable_instruction: |
        Save the age and name
        of the user in variables (Click to see full instructions)
      U3 - User Input - Saving After Input_instruction: |
        Save the age of the user
        in a variable using getText() (Click to see full instructions)
      U3 - User Input and String -  Concat_instruction: |
        Output a message about age
        in a Text Area (Click to see full instructions)
      U3 - Variables - Clicker Game_instruction: |
        Create your improved Chaser-Game
        here. (Click to see full instructions)
      U3 - Variables - Debug Scope_instruction: |
        Why isn't the value of foo changing
        correctly? Make a guess. (Click to see full instructions)
      U3 - Variables - Debugging with Turtle_instruction: |
        Use your new debugging
        techniques to get the code to run correctly (Click to see full instructions)
      U3 - Variables - Decrement_instruction: |
        Decrement the value of the variable.
        (Click to see full instructions)
      U3 - Variables - Identify Variables_instruction: |
        Identify the values printing
        in the terminal with console.log statements. (Click to see full instructions)
      U3 - Variables - Increment_instruction: |
        Use the console.log debugging technique
        to see what is happening in this example. Add another variable and increment
        its value. (Click to see full instructions)
      U3 - Variables - Incrementing Variables_instruction: |
        Create a repeat loop
        for the repeated code and use increment to recreate the original program with
        less lines of code! (Click to see full instructions)
      U3 - Variables - Read Using Turtle_instruction: |
        Create a second set of variables
        for x and y position. Move turtle to that new location. (Click to see full
        instructions)
      U3 - Variables - Reassigning Variables with Console.log_instruction: |
        Add another
        reassignment statement at the end of the code to change the value of the variable
        at second time. (Click to see full instructions)
      U3 - Variables - Set to Expression with Other Variables and Turtle_instruction: |
        (click
        to see full instructions)
      U3 - Variables - Set to Expression with Other Variables_instruction: |
        Write
        an expression that calculates the player's total score and stores it in the
        totalScore variable. The calculation is: the player's points times lives
        divided by the total time. (click to see full instructions)
      U3 - Variables - Set to Expression with Turtle_instruction: |
        (click to see
        full)
      U3 - Variables - Set to Expression_instruction: |
        Test out the new expressions.
        (Click to see full instructions)
      U3 Digital Assistant Design_instruction: |
        Pick a topic for your Digital Assistant
        and create the basic layout with a text input and text area. (Click to show
        full instructions)
      U3 Digital Assistant Set Text_instruction: |
        Have your digital assistant repeat
        back what the user types and include a canned response. (Click to see full
        instructions)
      U3 Digital Assistant Target - Mehal_instruction: |
        Try out a demo of the Digital
        Assistant!
      U3 Digital Assistant Target_instruction: Try out a demo of the Digital Assistant!
      U3 Digital Assistant Template_instruction: This is a project template!
      U3 Digital_instruction: |
        Choose a specialization topic for your digital assistant.
        Create a basic digital assistant that takes the user's input and displays
        back a default response.
      U3 full clicker demo_instruction: 'Clicker game - Try it out!'
      U3 mehal's clone_instruction: Try out a demo of the Digital Assistant!
      U3- Variables - Assign Random For Turtle Draw_instruction: |
        Try writing the
        same code in text mode.
      U3- Variables - Changing the Value_instruction: |
        Update the value of 'turnAmount'
        before each moveForward so the turtle turns a different amount each time.
        (Click to see full instructions)
      U3- Variables - Create And Assign_instruction: |
        On one line add a variable
        called "lives" and assign it the value 3. Print it to the console. (Click
        to see full instructions)
      U3- Variables - Text Mode_instruction: |
        1. Switch to text mode and type instructions;
        2. drag blocks out into text mode; 3. experiment with code completion
      U3-Design Mode-ID and Event Handler_instruction: |
        Add an event handler for
        the button using the "Insert and show" link in the Design Mode Events tab.
        (Click to see full instructions).
      U3-Design Mode-ID_instruction: |
        Using the Design Mode Events change the button
        ID and update the code to match. (Click to see detail instructions).
      U3-Design Mode-Image_instruction: |
        Recreate the "Chaser Game" from the last
        lesson using Design Mode. (Click to see full instructions.)
      U313 drag Two Buttons_instruction: |
        Run a program with two buttons that have
        the same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U313 eventsDetails_instruction: |
        Run a program with two buttons that have the
        same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U313 Two Buttons with Ids_instruction: |
        Predict what will happen. Once you've
        made a prediction, run the code to see what happens. (Click to see full instructions)
      U3L03 - draw rect function_instruction: "Write a function called drawRectangle().\\r\n(Click\nto see full instructions)"
      U3L03 - draw step_instruction: |
        Write the drawStep function. (Click to see
        full instructions)
      U3L03 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.  GIF: U3L3-ProceduresChooseOne.png
      U3L03 Creating Procedures 1_instruction: |
        Write the turnAround() function and
        use it to make the turtle move as depicted. see: U3L03-turnAndDown.gif
      U3L03 Define and use turnAround_instruction: |
        Define a function called turnAround.
        Call the function and then move the turtle forward. (Click to see full instructions)
      U3L03 define turnRight and draw a rectangle_instruction: |
        Define a function
        called right() that turns the turtle to the right. Then use this function
        to draw a rectangle, as shown below. (Click to see full instructions)
      U3L03 Draw a T using turnAround_instruction: |
        Draw a plus sign using the provided
        version of turnAround().  (Click to see full instructions)
      U3L03 draw diamond_instruction: |
        Create a function called drawDiamond() that
        makes use of your previous work to draw the complete diamond. (Click to see
        full instructions)
      U3L03 Three Steps_instruction: |
        Define a function called drawSide() which draws
        three steps and moves the turtle to prepare for the next side (Click to see
        full instructions)
      U3L04 - 3 by 3 with functions_instruction: |
        Make the 3x3 square as efficiently
        as you can. (Click to see full instructions)
      U3L04 - snowflake_instruction: |
        Create the design by breaking it down into
        layers of functions. (Click to see full instructions)
      U3L04 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.
      U3L04 diamond solution_instruction: |
        Study this solution to the drawDiamond
        problem.  Notice that the whole program starts by calling drawDiamond() at
        the top.  The program then follows a chain of function calls.  You can trace
        what's happening in the code to see the functions reused.  It's also easy
        to read because the function names describe the expected behavior.
      U3L05_3x3GridEfficiencyChallenge_instruction: |
        Let's revisit the 3x3 grid
        problem you did a few lessons ago.  This time the challenge is to program
        the solution "as efficiently as possible."  Now that you know how to write
        functions, it should be easier to break the problem down, and your code should
        be easier to read and debug.  See the rubric for more details about requirements
        and expectations.
      U3L05_draw3x3GridEfficiently_instruction: |
        Draw a 3x3 grid above and to the
        right of the turtle. Try to do so with the fewest number of commands possible.
        NOTE: This is a very challenging problem.  You may need to play with it for
        a while and tweak it.  You might also consider using pencil and paper to sketch
        your ideas.
      U3L06 - moveForwardwithParams_instruction: |
        Use a single command to move the
        turtle to the edge of the screen. (Click to see full instructions)
      U3L06 Challenge 1 triangle_instruction: |
        Use the parameterized versions of
        the turtle commands to create a triangle with sides 100 pixels long. (Click
        to see full instructions)
      U3L06 Challenge 2 purple square_instruction: |
        Read the documentation for penColor()
        and penWidth() before using them to draw the blue square.
      U3L06 Challenge 3 fill pink_instruction: |
        Fill in the background of the screen
        with your favorite color. (Click to see full instructions)
      U3L06 Challenge 4 bullseye_instruction: |
        Create the bullseye using hexadecimal
        colors and dot(). (Click to see full instructions)
      U3L06 Challenge 5 overlapping circles_instruction: |
        This image is created just
        using dot() and penColor() but, how are we going to get those circles to be
        transparent?  If you haven't gotten the hint yet: check out the documentation!
      U3L06 Challenge 6 squiggles_instruction: |
        Read the documentation for the "arcLeft"
        and "arcRight" commands and then draw the squiggles as shown. 
      U3L06 Challenge 7 smiley face_instruction: |
        Use turnTo() and moveTo() to help
        draw a smiley face. (Click to see full instructions)
      U3L06 Challenge 8 make your own_instruction: |
        Create a drawing of your own.
        (Click to see full instructions)
      U3L07 - allSeaGrass_instruction: |
        Add 50 pieces of seagrass to the image by
        writing drawAllSeagrass with a loop. (Click to see full instructions)
      U3L07 - bubbles_instruction: |
        Add 200 bubbles to the image by writing drawAllBubbles
        with a loop. (Click to see full instructions)
      U3L07 - callingFunctionsInLoops_instruction: |
        Call the function within the
        loop to complete the figure. (Click to see full instructions)
      U3L07 - createTriangleParam_instruction: |
        Define a function that accepts a
        parameter to match the function calls and complete the image. (Click to see
        full instructions)
      U3L07 - fish_instruction: |
        Add 15 fish to the image by writing drawAllFish
        with a loop. (Click to see full instructions)
      U3L07 - Free Play Loops and Random_instruction: |
        Free Play! Use what you learned
        from loops and random to make your own little scene. Have fun.
      U3L07 - introSquare_instruction: |
        Use a loop to draw a square. (Click to see
        full instructions)
      U3L07 - loopsWithRandom_instruction: |
        Increase the number of iterations to
        fill the screen with white. (Click to see full instructions)
      U3L07 - randomDots1_instruction: |
        Increase the number of iterations to fully
        fill the screen with random dots. (Click to see full instructions)
      U3L07 - randomSquare_instruction: |
        Draw the figure using a loop. (Click to
        see full instructions)
      U3L07 - seaGrass_instruction: |
        Add a parameter to drawSeagrass that controls
        the number of waves in the grass. (Click to see full instructions)
      U3L07 - seaStar_instruction: |
        Add 5 sea stars to the image by writing drawAllSeaStars
        with a loop. (Click to see full instructions)
      U3L07 - Starry Night Starter Code_instruction: |
        You are going to use loops
        and random numbers to generate an image of starry night sky similar to one
        shown here.  We have given you some starter code to generate the ground and
        sky (just two giant dots), you will add code to this project to make the stars,
        grass, and moon.  All of the effects are clever applications of turtle dots,
        lines, and colors.  To get started, follow the series of steps suggested in
        the accompanying worksheet. 
      U3L07 - sunBeams_instruction: |
        Add 100 sunbeams to the image by writing drawAllSunbeams
        with a loop. (Click to see full instructions)
      U3L07 - topDownDesign_instruction: |
        Get comfortable with the structure of this
        program, then move on to the next exercise. (Click to see full instructions)
      U3L08 - createTwoParamTriangle_instruction: |
        Define a function called drawTriangle()
        that accepts two parameters to set the size and width of the triangle. (Click
        to see full instructions)
      U3L08 - digitalScene_instruction: |
        Create the functions you were assigned as
        part of your digital scene. (Click to see full instructions)
      U3L08 - drawSquaresWithParams_instruction: |
        Write drawSmallSquare() to draw
        a 25px square. (Click to see full instructions)
      U3L08 - drawSquareWithParam - for video_instruction: |
        Use drawSquare() to recreate
        the image of both squares, this time using parameters. (Click to see full
        instructions)
      U3L08 - drawSquareWithParam_instruction: |
        Use drawSquare() to recreate the
        image of both squares, this time using parameters. (Click to see full instructions)
      U3L08 - Enchantment Under the Sea_instruction: |
        You have been provided with
        starter code for an “Under the Sea” scene which includes three functions,
        one each for the starfish, sea grass, and fish. Create versions of these functions
        which accept parameters to allow you to add more variation to your scene.  The
        student worksheet provides more details and guidance.
      U3L08 - fish_instruction: |
        Add a parameter to drawFish that changes the size
        of the fish drawn. (Click to see full instructions)
      U3L08 - freePlay_instruction: |
        Keep adding to your image by making more calls
        to your new functions with parameters. (Click to see full instructions)
      U3L08 - individualCode_instruction: |
        Create the functions you were assigned
        as part of your digital scene. (Click to see full instructions)
      U3L08 - introUnderTheSea_instruction: |
        Add an extra fish, starfish, and piece
        of sea grass to the image. Look at, but don't change, the functions that
        create them. (Click to see full instructions)
      U3L08 - multiParamFish_instruction: |
        Add three parameters to your drawFish
        function to accept red, green and blue values to make your fish different
        colors. (Click to see full instructions)
      U3L08 - multipleLayersofParams_instruction: |
        Call drawPlusSign() to complete
        the image. (Click to see full instructions)
      U3L08 - paramsToStarfish_instruction: |
        Add a parameter to drawStarfish that
        changes the size of the starfish drawn. (Click to see full instructions)
      U3L08 - randomInput_instruction: |
        Use the randomNumber() blocks to test the
        functions you designed with random input. (Click to see full instructions)
      U3L08 - seaGrass_instruction: |
        Add a parameter to drawSeagrass that changes
        the size of the piece of seagrass drawn. (Click to see full instructions)
      U3L08 - squareTwoParams_instruction: |
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L08 - starFish_instruction: |
        Add an extra fish, starfish, and piece of sea
        grass to the image. Look at, but don't change, the functions that create
        them. (Click to see full instructions)
      U3L08 - triangleTwoParams_instruction: |
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L1 - Simulation - Template_instruction: |
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3L12 Chaser Template_instruction: This is a project template!
      U3L13 - Button with ID_instruction: |
        Drag a button out onto the screen and
        set its text to "Go forth!".  Run the program to make sure you can see the
        button.
      U3L13 - Debug Id plus logic problem_instruction: "The last problem was an example\nof syntax error.  App Lab did not understand which object it should be listening\nto for a \"click\" event so it showed an error message in the console to let\nyou know.  Another kind of error is a logical error - the program is valid,\nbut it's not doing what you want it to do.\\r\n\\r\nThis program has 2 errors.\nA (tricky) syntax error and logical error.  Find them, fix them, and make\nthe program work as expected."
      U3L13 - Debug Id Problem_instruction: |
        Improve the button by choosing a descriptive
        and meaningful ID. (Click to see full instructions)
      U3L13 - Debugging 1_instruction: |
        Debug the program by verifying your IDs are
        being referenced properly. (Click to see full instructions)
      U3L13 - Debugging 2_instruction: |
        Debug the program by properly ordering your
        button commands and event handlers. (Click to see full instructions)
      U3L13 - Debugging 3_instruction: |
        Debug the program by fixing the logical error
        within the program. (Click to see full instructions)
      U3L13 - Project_instruction: |
        Create your multi-screen app. (Click to see full
        instructions.)
      U3L13 - Turtle Driver Project_instruction: |
        Create a "turtle driver" that
        includes buttons to move the turtle forward and turn it left and right. (Click
        to see full instructions)
      U3L13 - Turtle move with button_instruction: |
        Add a button that moves the turtle
        when clicked.  (Click to see full instructions)
      U3L13 eventsDetails_instruction: |
        Add an event handler to the button to move
        the turtle forward. (Click to see full instructions)
      U3L14 - Assigning Random Value_instruction: |
        Write a program that simulates
        the rolling of two dice and reports their individual values as well as the
        sum. (click to see full instructions)
      U3L14 - concatenate simple_instruction: |
        Modify the write statement on line
        3 to combine text and variables together to make the app display a single
        line of text that shows the player's lives and score. (click to see full
        instructions)
      U3L14 - Mini Calculator embed_instruction: |
        You will be prompted for two numbers,
        one right after the other.  See what happens.  Enter different numbers until
        you get the idea.
      U3L14 - moving memory challenge1_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge2_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge3_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge4_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge5_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge6_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - Unfortunate Events Free Play_instruction: |
        Follow the "Unfortunate
        Events" Worksheet and enter your code here to experiment.  We've pre-loaded
        the code you need to start.
      U3L14 - User Input Division calculator_instruction: |
        Write a program that acts
        as a simple calculator. (click to see full instructions)
      U3L14 - Variable ReAssignment pt2_instruction: |
        Trace the code and predict
        what you think will be printed to the console. Then add a console.log statement
        at the end of the program to see the last value of someNum to see if your
        full prediction is correct. (click to see full Instructions)
      U3L15 - add code to make count down work_instruction: |
        Write code to make the
        down arrow work as expected. (Click to see full instructions)
      U3L15 - Add reset button to UpDown app_instruction: |
        Add code so that clicking
        the start over button will reset the game and send you back to the main screen.
        (Click to see full instructions)
      U3L15 - clicker update score_instruction: |
        Add code to update the score when
        the apple is clicked. (Click to see full instructions)
      U3L15 - count upDown bug forget to set text_instruction: |
        Find the bug in the
        program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug logic error wrong update_instruction: |
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug var not created globally_instruction: |
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - Debug forget to update var on reset in UpDown app_instruction: |
        Run
        the app, and click the up or down button until you get to the gameOverScreen.
        Click 'Start Over' and try the app again. Find and fix the issue in the
        code. (Click to see full instructions)
      U3L15 - Debug if never triggers in UpDown app_instruction: |
        Run the app and
        use the up and down arrows to try to hit the gameOverScreen. You can't! Find
        and fix the issue in the code. (Click to see full instructions)
      U3L15 - Debugging Simple If-statements =v==_instruction: |
        Run the app, and
        click the up button. Then restart and run it again, and click the down button.
        Find and fix the issue in the code. (Click to see full instructions)
      U3L15 - DEMO up down count practice app_instruction: |
        Try out the demo app
        (Click to see full instructions)
      U3L15 - global var example count up_instruction: |
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L15 - mini clicker update score_instruction: |
        Add code to update the score
        when the apple is clicked. (Click to see full instructions)
      U3L15 - practice with setText_instruction: |
        Use setText to complete the click
        event handler for the down arrow. (Click to see full instructions)
      U3L15 - Simple If-statements in UpDown App_instruction: |
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L15 - variable scoping problem debugging_instruction: |
        See if you can figure
        out why the code is no longer working. (Click to see full instructions)
      U3L15 click add lives_instruction: |
        Add lives to the clicker game that decrement
        by 1 when the background image is clicked (Click to see full instructions)
      U3L15 full clicker app_instruction: |
        Complete your clicker game! (Click to
        see full instructions)
      U3L16 - challenge say hi app_instruction: |
        Write a greeting to the user when
        they hit 'enter' in the text input, using the 'change' event. (Click to
        see full instructions)
      U3L16 - chaserApp_instruction: |
        Create your own "Chaser Game." (Click to
        see full instructions)
      U3L16 - chooseImages_instruction: |
        Replace the image in your application with
        one of your own. (Click to see full instructions)
      U3L16 - doubleQuotes_instruction: |
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - hideAndShow_instruction: |
        Introducing textInput, getText and write.  First
        run the starter code several times.  Try to change what's written to the
        screen when the button is clicked. Then use getText to write to the screen
        what the user entered in the text box. GIF: U3L16 - useGetText.gif
      U3L16 - hideAndShowPractice_instruction: |
        You are given some starting code
        that puts an image and two buttons on the screen.  The image is initially
        hidden. Add two new event handlers: one for each button, that when clicked
        hide and show the image.
      U3L16 - image and text labels_instruction: |
        Introducing the setPosition command!  Replace
        the moveTo in the button-click event handler to use setPosition to move the
        button itself to a random location when it's clicked.
      U3L16 - images and text labels_instruction: |
        Introducing objects other than
        buttons! - textLabels and images.  First try replacing your button with a
        textLabel.  Will the text respond to events just like the button?  Try connecting
        an event handler to it.  We've started you out with code similar to the result
        of the last level, you can copy your code from that level into here if you
        prefer. 
      U3L16 - images_instruction: |
        Introducing Images.  Try replacing the textLabel
        with an image..  Will the image respond to events just like the button?  Try
        connecting an event handler to it.  We've started you out with code similar
        to the result of the last level, you can copy your code from that level into
        here if you prefer. 
      U3L16 - intro getText_instruction: |
        Add an event handler to the Submit button
        so that when the button is clicked it will display the name entered in the
        text box to the console.  Use getText to get the value out of the text box.
        (Click to see full instructions)
      U3L16 - introSetPosition_instruction: |
        Move the buttons to the bottom of the
        screen. (Click to see full instructions)
      U3L16 - introStrings_instruction: |
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - nameAgeTemplate_instruction: |
        Add an Text Input box for the name and
        age. (Click to see full instructions)
      U3L16 - newEventTypes_instruction: |
        Experiment with different event types and
        select the one that you think is best. (Click to see full instructions)
      U3L16 - outputWithTextArea_instruction: |
        Output a message to the 'textArea'
        (Click to see full instructions)
      U3L16 - projectTemplate_instruction: |
        Create your own "Chaser App". (Click
        to see full instructions)
      U3L16 - quick double click_instruction: |
        Mini-Project.  The Quick Double-Click
        game.  In this simple game an object (an image) moves around, or pops up randomly
        on the screen, as the user clicks it.  The goal of our game will be to try
        to double-click the object before it moves.  Part of the challenge (and fun)
        here is creating this app from scratch.  You can look back at your previous
        work for examples, but it's fun to create something from scratch, too.  Try
        it!  For more details see the Activity guide for this lesson.
      U3L16 - setPosition to move button_instruction: |
        Introducing the setPosition
        command! Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      U3L16 - setPositionMoveButton_instruction: Use setPositon to moveButton
      U3L16 - setupMoveToRandom_instruction: |
        Modify the code so that the turtle
        moves to a random screen location when the button is clicked. (Click to see
        full instructions)
      U3L16 - singleSetPosition_instruction: |
        Move the button to the middle of the
        screen. (Click to see full instructions)
      U3L16 - stringsVsNumbers_instruction: |
        Run the program to see how strings and
        numbers behave with different arithmetic operators. (Click to see full instructions)
      U3L16 - text labels_instruction: |
        Use the textLabel command to replace the
        button in your program with a text label. (Click to see full instructions)
      U3L16 - textInput getText write_instruction: |
        Add an Text Input box for the
        name and age. (Click to see full instructions)
      U3L16 - toUpper_instruction: |
        Make the name of the user appear in uppercase
        (Click to see full instructions)
      U3L16 - use images_instruction: |
        Use the image command to replace the text
        label in your program with an image. (Click to see full instructions)
      U3L16 Mad Lib Clear Input_instruction: |
        Clear the user's previous text when
        the Play Again button is clicked (Click to see full instructions) 
      U3L16 Mad Lib Demo_instruction: 'Mad Libs Demo - Try it out!'
      U3L16 Mad Lib getText_instruction: |
        Before setting the text area with your
        Mad Libs outline, get the user's text and incorporate their responses. (Click
        to see full instructions) 
      U3L16 Mad Lib setText_instruction: |
        When the Next button is clicked, set the
        text area to have the main outline of your How-to Mad Libs (without the user's
        input). (Click to see full instructions) 
      U3L16 Mad Lib Student Setup_instruction: |
        Back to Mad Libs: To get started,
        set up the two screens for your Mad Libs app (Click to show full instructions)
      U3L16 Mad Lib toUpper_instruction: |
        Apply the toUpperCase and toLowerCase string
        functions to the user's text. (Click to see full instructions) 
      U3L17 - getAndSetKeyValue_instruction: |
        Create an image like app. (Click to
        see full instructions)
      U3L17 - getKeyValue_instruction: |
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introCallbacks_instruction: |
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introKeyValue_instruction: |
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - readKeyValue_instruction: |
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - setKeyValue_instruction: |
        Create and update your key value pairs using
        setKeyValue. (Click to see full instructions)
      U3L17 - twoSetKeyValue_instruction: |
        Run the program several times to observe
        how often setKeyValue commands arrive out of order. (Click to see full instructions)
      U3L18 comparison operators_instruction: |
        Use console.log to print out the different
        boolean expressions below to see what information they return. (Click to see
        full instructions)
      U3L18 comparison operators_for_video_instruction: |
        Use `console.log` to print
        out the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      U3L19 - Clicker Game Freeplay Area_instruction: |
        Use this App Lab area to improve
        your clicker game.  You should start by copy/pasting the code from your old
        game here.  We're showing a more full set of blocks in the toolbox - some
        of the things you might not have used yet.  Feel free to explore then and
        experiment if you want to.  Everything else you need should be shown.  Have
        fun!
      U3L19 - Debugging with consoleLog_instruction: |
        Add console.log() statements
        to find out the value of a and b after the first reassignment statement a
        = b; (Click to see full instructions)
      U3L19 - DEMO up down count practice app_instruction: |
        Try out the demo app
        (Click to see full instructions)
      U3L19 - do concatenate string with var_instruction: "We've given you a piece\nof code from the previous screen.  Try changing the value assigned to foo\nto see the string change. \\r\nDo this: \\r\n1. Try changing the value assigned\nto foo to see the string change. \\r\n2. By only modifying the lines of code\nthat were given to you, try to get the output to say: “The value of foo is:\n9.  And isn’t that fine.” \\r\n"
      U3L19 - fix the var name syntax error v2_instruction: |
        Fix the error and get
        it to print the value of both variables (Click to see full instructions)
      U3L19 - fix the var name syntax error_instruction: |
        Fix the error and get it
        to print the value of both variables (Click to see full instructions)
      U3L19 - global var example count up_instruction: |
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L19 - practice with setText_instruction: |
        Add another button that changes
        the text to the value of a new variable. (Click to see full instructions)
      U3L19 - Simple If-statements in UpDown App_instruction: |
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L19 - Target Clicker App_instruction: |
        Investigate the new elements of the
        'chaser-game'
      U3L19 - test reassignment of two vars_instruction: |
        Predict the value of a
        and b. Add console.log statements to find out the actual value of a and b.
        (Click for full instructions)
      U3L19 - three basic ops of variables_instruction: |
        Add another variable called
        "lives" and set the value to 3. Print the value of the variable to the console.
        (Click to see full instructions)
      U3L19 - try out console log_instruction: "Try out console.log.  Do this: replace\nthe statement write(\"foo is: \" + foo) with console.log(\"foo is: \" + foo).  Run\nthe program and you should see the output show up in the console area below\nthe workspace.  Then try adding a few more console.log statements.  Display\nsome text.  Make another variable and display that.  \\r\nThe app screen will\nbe blank -- that's the point.  With console.log you can test output behind\nthe scenes in a way the user cannot see.  \\r\n\\r\n\\r\nGIF: U3L19-useconsolelog.gif"
      U3L19 - up down count practice app_instruction: |
        Set up the down button to
        decrease the value of count by 1 each time it is clicked. (Click to see full
        instructions)
      U3L19 - updating variables pt1_instruction: |
        This app is only SLIGHTLY different
        from the previous one, but much more dynamic.  See if you can figure out how
        and why the count is going up.  Once you've figured it out then you should
        be able to DO THIS: add a button to the app that when clicked makes the count
        go down, and updates the label.  When you're done the app should work as
        shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - variable reassignment challenge pt2_instruction: |
        Make a prediction
        about the ending values of a, b, and c. Then use console.log to check your
        understanding (Click to see full instructions)
      U3L19 - variable reassignment part 1_instruction: |
        Predict the value of a and
        b. Add console.log statements to find out the actual value of a and b. (Click
        for full instructions)
      U3L19 - variable scope problem 2_instruction: |
        What is happening with foo?
        Play with the level to try to figure it out. (Click to see full instructions)
      U3L19 - variable scoping problem debugging_instruction: |
        See if you can figure
        out why the code is no longer work. (Click to see full instructions)
      U3L19 - write var and string with same name v2_instruction: |
        Fix the code so
        that the values of both variables print to the console. (Click to see full
        instructions)
      U3L19 - write var and string with same name_instruction: |
        Fix the code so that
        the value of both variables prints to the console. (Click to see full instructions)
      U3L2 Using Simple Commands (no tooltips)_instruction: |
        Draw a 1x1 square above
        and to the left of the turtle's starting position. Click to see full instructions.
      U3L2 Using Simple Commands_instruction: |
        Draw a 1x1 square above and to the
        left of the turtle's starting position. Click to see full instructions.
      U3L23 Chatbot Conditionals 1_instruction: |
        Add if, else if, and else statements
        to detect the movie genres Comedy, Romance, Action, and Horror. (Click to
        see full instructions)
      U3L23 Chatbot Intro 1a_instruction: |
        Store the user's input inside a variable
        and log it to the console.
      U3L23 Chatbot Intro 2_instruction: |
        Use string concatenation to store the user's
        input and assistant's answer into the conversation variable using the format
        "User: <input><bot name>: <default response>" . Log the conversation to
        the console.
      U3L23 Chatbot Intro 2a_instruction: |
        Display the conversation onto the "text_area"
        element. Optional: clear the user's input after every "change" event.
      U3L23 Chatbot Intro 3_instruction: |
        Add newline characters "\
        " to separate
        the user's input and the computer's response.
      U3L23 Chatbot Intro 4_instruction: |
        Use this level to make your chatbot look
        and work better!
      U3L23 Chatbot Intro_instruction: |
        Choose a specialization topic for your digital
        assistant. Create a basic digital assistant that takes the user's input and
        displays back a default response.
      U3L23 Digital Assistant 1_instruction: |
        Set the text_area element to display
        the user's input from the text_input element.
      U3L23 Digital Assistant 2_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 3_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 4_instruction: |
        Display the user's input and the digital
        assistant's response on different lines.
      U3L23 Digital Assistant 5_instruction: |
        Start the user's command with the
        phrase "User:" and the digital assistant's response with the phrase "Bot:"
      U3L23 Digital Assistant 6_instruction: |
        When the user hits Run, display the
        text "I'm a generic digital assistant. Ask me anything!"
      U3L24 Basic String Parsing 1_instruction: |
        Use the function "userInput.indexOf(<food>)"
        to check if the strings "pizza" or "soup" are anywhere in the user's
        response.
      U3L24 Chatbot Basic Conditionals_instruction: |
        Check out the project description
        for instructions. (Click to see full instructions.)
      U3L24 Chatbot Conditionals 2_instruction: |
        Adjust the "if" block to make
        the bot respond "I don't know that color." if the user types anything besides
        "blue"
      U3L24 Chatbot Conditionals 3_instruction: |
        Adjust the "if/else" block to
        make the bot respond to the colors blue, red, and green, and to two additional
        colors.
      U3L24 Chatbot Keyword Record_instruction: |
        Use the next level to record your
        digital assistant's keywords/phrases.
      U3L24 Chatbot Nested Conditionals_instruction: |
        Add a chained conditional with
        at least 3 "else if" statements to your personal assistant.
      U3L24 introIncludes_instruction: |
        Practice using the includes command. (Click
        to see full instructions)
      U3L24 Nested Conditionals 1_instruction: |
        Change all of the boolean expressions
        to use includes instead of ==. (Click to see full instructions)
      U3L24 Nested Conditionals 2_instruction: |
        Nest your movie genre if statements
        inside the if statements to check for a ? in the input. 
      U3L24 Nested Conditionals Bugs 2_instruction: |
        Fix the problem with the code
        so that all the conditions can be reached. (Click to see full instructions)
      U3L24 Nested Conditionals Bugs 3_instruction: |
        Fix the bugs that still exist
        in this program. Prove that the program works correctly.
      U3L24 Nested Conditionals Bugs_instruction: |
        Expose the bugs in this problem
        by typing inputs into the user-input box. Track which inputs cause unexpected
        outputs.
      U3L25 - drag out key event_instruction: |
        Set up an event handler to respond
        to keypress events, and display event.key in the console. Hit keys on the
        keyboard to see what happens. (Click to see full instructions)
      U3L25 - play sound when up key_instruction: |
        Change the code so the sound will
        only play when the up arrow is pressed. (Click to see full instructions)
      U3L25 Chatbot Strings_instruction: |
        1. Adjust your digital assistant to evaluate
        inputs the same way whether the inputs are capitalized or lowercase. 2. If
        a user asks "What is <phrase>?", where <phrase> is an input your digital
        assistant does not recognize, make your digital assistant respond "I don't
        know what <phrase> is."
      U3L25 String Parsing 1_instruction: |
        Given the string "Wisdom begins with
        wonder." what is the index of the following characters W, t, w, ., d, and
        k? Confirm your expectation using the string.indexOf() function.
      U3L25 String Parsing 2_instruction: |
        Use str.length to find the length of the
        strings “Hello World”, “Computer science rocks!", and “I promise to do my
        homework every day.”
      U3L25 String Parsing 3_instruction: |
        Write a password length checker that writes
        “yes” to the console if a string has a length greater than 10, or “no” if
        it is less than or equal to 10.  Test your function using two strings, one
        that will satisfy each conditional option.
      U3L25 String Parsing 4_instruction: |
        You are given the string "Wisdom begins
        with wonder." Use the string.substring(begin, end) function to print "begin"
        and "nder" to the console.
      U3L25 String Parsing 5_instruction: "Fill in the function, findBeginNder()\nto get the strings \"begin\" and \"nder\" from a sentence no matter where\nin the sentence they exist.\\r\nPrint the strings and their index to the console.\n"
      U3L25 String Parsing 6_instruction: |
        Write a function that takes a name (first
        last) and reorders it (last, first).
      U3L25 String Parsing 7_instruction: |
        You are given the string “The earth has
        music for those who listen.” Manipulate it using the functions str.toUpperCase()
        and str.toLowerCase().
      U3L26 AND operator_instruction: |
        Update the genre and rating if statements
        to give only one movie suggestion at a time. (Click to see full instructions)
      U3L26 Chatbot Compound Conditionals_instruction: |
        Update your digital assistant
        to include at least one each of AND, OR, and NOT
      U3L26 Chatbot Final_instruction: |
        Update your digital assistant to include
        at least one each of AND, OR, and NOT
      U3L26 Compound Logic_instruction: |
        Write a conditional statement that detects
        if a command contains all the phrases "2000" "animated" and "G-rated."
        If all these phrases are detected, make Movie Bot respond "The top grossing
        animated and G-rated film in the 2000 decade was Finding Nemo."
      U3L26 NOT operator_instruction: |
        Write a conditional statement that detects
        if a command does not contain the phrase "bad." If "bad" is not detected,
        make Movie Bot respond normally. Otherwise, make Movie Bot respond "Sorry,
        I don't know about bad movies." 
      U3L26 OR operator_instruction: |
        Update the if statement to use an OR to check
        for a "?" as well as who, what, where, when, why, how in the user input.
        (Click to see full instructions)
      U3L27 Chatbot Final_instruction: |
        Make your digital assistant awesome and when
        you are finished, ask one of your classmates to test it for you using the
        activity guide. As you add features to your digital assistant, track them
        on the next level.
      U3L2_Turtle3by3Grid_instruction: |
        Draw a 3x3 grid to the front and right of
        the turtle as efficiently as possible. The turtle should end at its original
        location, facing its original direction. (Click to see full instructions)
      U3L2_TurtleSquare_right_instruction: |
        Draw a square to the front and to the
        right of the starting location. (Click to show full instructions)
      U4 - add createRecord to contacts App_instruction: |
        Add code to your contacts
        app so that newly-added contacts are saved in a table. (Click to see full
        instructions)
      U4 - Add Row By Hand_instruction: |
        Add a new record to your table in the Data
        Viewer. (Click to see full instructions)
      U4 - Charts - drawChartFromRecords 1_instruction: |
        Use the drawChartFromRecords
        block to create a scatter plot from the table in the database. (Click to see
        full instructions)
      U4 - Charts - drawChartFromRecords Options 1_instruction: |
        Add a title to your
        chart and change the colors of your lines using the options parameter of drawChartFromRecords.
        (Click to see full instructions)
      U4 - Charts - drawChartFromRecords Options 2_instruction: |
        Look through the
        drawChartFromRecords API and choose some more options to customize. (Click
        to see full instructions)
      U4 - Charts - drawChartsFromRecords 1_instruction: |
        Add screen element, pull
        out drawCharts block, run the program!
      U4 - Charts - Export Data_instruction: |
        Export the data from the “ages” table
        as a CSV file, then remix this app and import the CSV file. (Click to see
        full instructions)
      U4 - Charts - Import Data 1_instruction: |
        Download the CSV file we’ve provided,
        and then use the data viewer to import the data from the file into the “mytable”
        table. (Click to see full instructions)
      U4 - Charts - Import Data 2_instruction: |
        Call readRecords on “mytable” and
        print each record to the console. (Click to see full instructions)
      U4 - Charts - Line Chart 1_instruction: |
        Create a line chart showing the change
        in popularity of “#tbt” over time. (Click to see full instructions)
      U4 - Charts - Line Chart 2_instruction: |
        Add a second line to your chart to
        show the change in popularity of both “#tbt” and “#nofilter” at the same time.
        (Click to see full instructions)
      U4 - Charts - Line Chart Template_instruction: This is a template.
      U4 - Charts - Remixing Apps with Data_instruction: |
        Run this app and see what
        it prints to the console. Then remix the app and run the remixed version to
        see what happened to the data. (Click to see full instructions)
      U4 - Charts - Scatter Chart_instruction: |
        Create a scatter plot of the “rottenTomatoes”
        table, using the new table and column names. (Click to see full instructions)
      U4 - CreateRecord - 1_instruction: |
        Add a createRecord command and run the
        program. (Click to see full instructions)
      U4 - CreateRecord - 2.5_instruction: |
        Change the table name in createRecord
        then check the Data Viewer to see the new table. (Click to see  full instructions)
      U4 - CreateRecord - 2_instruction: |
        Change the name from "Alice" to something
        else in the createRecord command.  Run the program and use the Data Viewer
        to see the changes to your table. (Click to see full instructions)
      U4 - CreateRecord - 3_instruction: |
        Use createRecord to add the song object
        as a record to a table. (Click to see full instructions)
      U4 - CreateRecord - 4_instruction: |
        Run the program. Verify the song object
        was added to the database. Note the callback function now displays the copy
        of the record sent back back by the database. (Click to see full instructions)
      U4 - CreateRecord - 5_instruction: |
        Add a property to the JavaScript object,
        then run the program.  View the data table and see how changing the object
        affects the data table. (Click to see full instructions)
      U4 - debug column names are case sensitive_instruction: |
        Change song.title
        to song.Title (capital T).  And run the program.  Check the data table  (Click
        to see full instructions)
      U4 - deleteRecords 0_instruction: |
        Use the deleteRecord command with default
        values. Verify the record was deleted. (Click for full instructions).
      U4 - deleteRecords 1_instruction: |
        Find the id of "Little Bunny Foo Foo"
        in the data table "mySongs".  Use the deleteRecord command to delete it.  See
        what happens when you try to delete an ID a second time. (Click for full Instructions).
      U4 - deleteRecords 2 delete object_instruction: |
        Use the song object to delete
        multiple objects in the database by changing only the "id" property. (Click
        for full Instructions).
      U4 - deleteRecords 2_instruction: |
        Using the data viewer, find the id of a
        a record you want to delete. Use the deleteRecord command to delete it. (Click
        for full instructions).
      U4 - Edit Data Table by Hand_instruction: |
        View the data table and click edit
        next to each row.  Add the artists names for each song by hand. (Click to
        see full instructions)
      U4 - Exploring Data Tools - Template_instruction: |
        Use createRecord to add
        the song object as a record to a table. (Click to see full instructions)
      U4 - fix contacts by hand in data table_instruction: |
        Use the data viewer to
        add rows to the data table.  Add the original hard-coded contacts from your
        app to the database. (Click to see full instructions)
      U4 - last stage test adding contcts_instruction: |
        Confirm that new contacts
        you add are saved to the database.  Verify that after restarting your app,
        the contacts you added no longer show in the app, but still exist in the database.
        (Click to see full instructions)
      U4 - Objects - accessingPropertiesInArray_instruction: |
        Access the properties
        of the objects stored in an array. (Click to see full instructions)
      U4 - Objects - arraysOfObjects_instruction: |
        Create an array called "students"
        and add all 5 student objects to the array. (Click to see full instructions)
      U4 - Objects - createContactObject_instruction: |
        Construct a new object from
        the user inputs, and append it to your array. (Click to see full instructions)
      U4 - Objects - createContactsData_instruction: |
        Add values to the three contact
        objects provided in the starter code. (Click to see full instructions)
      U4 - Objects - createDotNotation_instruction: |
        Create a student Object yourself.
        Add properties to your object one at a time using dot notation. (Click to
        see full instructions)
      U4 - Objects - createObject_instruction: |
        Create an object with at least 3
        properties and display it in the Debug Console. (Click to see full instructions)
        
      U4 - Objects - dotNotation_instruction: |
        Use dot notation to display individual
        properties of the object. (Click to see full instructions)
      U4 - Objects - eventHandlersToSwitchScreen_instruction: |
        Attach event handlers
        to the "Add Contact" and "Go Back" buttons that allow the user to switch
        screens. (Click to see full instructions)
      U4 - Objects - eventParameter_instruction: |
        Trigger both the keyboard and mouse
        event and examine the event objects displayed in the console. Why might an
        object be the best way to store this information? (Click to see full instructions)
      U4 - Objects - exemplarContactsApp_instruction: |
        Use the Contacts app and then
        add a contact of your own. (Click to see full instructions)
      U4 - Objects - loopingArray_instruction: |
        Loop over your array of students
        and print the name of every students. (Click to see full instructions)
      U4 - Objects - loopingArray2_instruction: |
        Loop over your array of students
        and print the name and grade of every student. (Click to see full instructions)
      U4 - Objects - loopingCompoundConditions_instruction: |
        Loop over the array
        of students and display the information of students who are present and in
        the 11th grade. (Click to see full instructions)
      U4 - Objects - loopingConditions_instruction: |
        Loop over your array of student
        objects and display the names of every student who is present in class. (Click
        to see full instructions)
      U4 - Objects - pullValues_instruction: |
        Create an event handler for the "Save
        Contact" button that displays the contents of the 4 text input fields in
        the console. (Click to see full instructions)
      U4 - Objects - readStarterCode_instruction: |
        Familiarize yourself with the
        starter code and UI elements provided. (Click to see full instructions)
      U4 - Objects - resetIndexAndShow_instruction: |
        Add code to your event handler
        for the "Save Contact" button so that when a new contact is added, the inputs
        are cleared, the screen is switched, and the correct contact is shown. (Click
        to see full instructions)
      U4 - Objects - showContact1_instruction: |
        Add code to the showCurrentContact
        function to show the name of the contact stored at the currentIndex of your
        array. (Click to see full instructions)
      U4 - Objects - showContact2_instruction: |
        Add the phone number and birthday
        text to your text area. (Click to see full instructions)
      U4 - Objects - showContact3_instruction: |
        Display the image information for
        each contact. (Click to see full instructions)
      U4 - Objects - showSampleImage_instruction: |
        Attach an event handler to the
        image URL text input so that the user can confirm their image will work as
        expected. (Click to see full instructions)
      U4 - Objects - writeWrap_instruction: |
        Use the wrap function to prevent currentIndex
        from leaving the bounds of your array. (Click to see full instructions)
      U4 - Read Record - 1.2_instruction: "Place a console.log command below the\nreadRecords command. (Click to see full instructions)\\r\n"
      U4 - Read Record - 1.3_instruction: "Add a console.log command inside the callback\nfunction. (Click to see full instructions)\\r\n"
      U4 - Read Record - 1_instruction: "Use console.log to display the records returned\nby a call to readRecords. (Click to see full instructions)\\r\n"
      U4 - Read Record - 2_instruction: "Change the table name so that the records\nare read from the new table. (Click to see full instructions)\\r\n"
      U4 - Read Record - 3_instruction: "Change the name of the table in a readRecords\ncommand to read from a table that does not exist. (Click to see full instructions)\\r\n"
      U4 - Read Record - 4.1_instruction: "Use indexes and dot notation to reference\nvalues in the response from the database. (Click to see full instructions)\\r\n"
      U4 - Read Record - 4_instruction: "Print out each record return from the readRecords\ncall individually. (Click to see full instructions)\\r\n"
      U4 - Read Record - 5_instruction: "Using a for loop, display the title of each\nmovie in your database. (Click to see full instructions)\\r\n"
      U4 - Read Record - part 1 - template_instruction: "Use console.log to display\nthe records returned by a call to readRecords. (Click to see full instructions)\\r\n"
      U4 - ReadRecords - Contacts App 1_instruction: |
        Use readRecords to copy the
        data in your database into your "contacts" global variable and call showCurrentContact.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 2_instruction: |
        Create a function called refreshLocalData.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 3_instruction: |
        Add a call to "refreshLocalData"
        to the callback function of the createRecord you use to add a new contact
        to your database. (Click to see full instructions)
      U4 - ReadRecords - Contacts App 4_instruction: |
        Create a "Delete" button.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 5 make delete work_instruction: |
        Create an
        event handler for the "Delete" button you created. (Click to see full instructions)
      U4L02 - Objects - createObject_instruction: |
        Create an object with at least
        5 values including at least one string and one number. (Click to see full
        instructions) 
      U4L02 - Objects - eventParameter_instruction: |
        Trigger both the keyboard and
        mouse event and examine the event objects displayed in the console. Why might
        an object be the best way to store this information? (Click to see full instructions)
      U4L02 - Objects - Template1_instruction: Šabloon
      U4L06 Data Storage 1_instruction: "Fill in your name instead of \"Enter Your\nName\", run the app and click the button. Run it multiple times with different\nnames! Watch the console and use the ‘View Data” button to see how the table\nis updated. As you play around make sure you can explain the purpose of each\nof the circled parts of the diagram.\\r\n\\r\n"
      U4L06 Data Storage 2_instruction: "The app is a continuation of the previous\none we started. Add a text label to collect the users name and use that as\nthe data input for the record.\\r\n\\r\nRun the app and click the button multiple\ntimes and see what happens. Is there a problem you notice? "
      U4L06 Data Storage 3_instruction: |
        We want to improve the user experience.
        Once they have submitted their data for storage, it would be nice to clear
        the textbox.  Update your app to clear the textbox after the data is stored.
      U4L06 Data Storage 4_instruction: |
        Add a label and drop down box, to your app
        and save the data to your JSON object and add it to your table. Make sure
        to reset the dropdown after the data is stored.
      U4L06 Data Storage 5_instruction: |
        Add a couple radio buttons or checkboxes
        to our app. Then find a way to collect the data from those. 
      U4L06 Data Storage 6_instruction: |2
         Use one of the getTime() and getUserId()
        blocks to collect additional data. 
      U4L06 Data Storage 7_instruction: |
        Add a second screen to the sample app we
        have been building to capture an image from a user. Return to screen 1 after
        the JSON object has been stored in the table.
      U4L15 Read Data 1_instruction: |
        Run the level and see what happens. Then edit
        the code to make it print a different column of information.
      U4L15 Read Data 2_instruction: "Student should create a sentence which puts\ntogether all the pieces from a record.\\r\n\\r\n<<Name>> is <<Age>> years old\nand like <<Food>>"
      U4L15 Read Data 3_instruction: "Print the sentence using the first JSON object\nin the array\\r\n\\r\n"
      U4L15 Read Data 4_instruction: "\\r\nUse a random record from the list of records\nto display your sentence."
      U6 - Final Project - Project Level_instruction: |
        Build your final project here.
        (Click to see full instructions)
      U6 - updateRecord - Callback Success Parameter_instruction: |
        Add an if-else
        block inside the callback function for updateRecord. (Click to see full instructions)
      U6 - updateRecord - Contacts - Edit event handler_instruction: |
        Write event
        handlers for the Edit Contacts UI elements. (Click to see full instructions)
      U6 - updateRecord - Contacts - Edit UI_instruction: |
        Set up the UI elements
        needed to edit contacts. (Click to see full instructions)
      U6 - updateRecord - Contacts - Save edited contact_instruction: |
        Use updateRecord
        to store the user's edits in the database. (Click to see full instructions)
      U6 - updateRecord - Default Block_instruction: |
        Use updateRecord to change
        the record for "Eye of the Tiger." (Click to see full instructions)
      U6 - updateRecord - Update Nonexistent Record_instruction: |
        Force updateRecord
        to fail by changing the ID of songToUpdate. (Click to see full instructions)
      Underground Avoiding Lava_instruction: Mõne ploki all on peidus laava, mis sul tuleb enne edasiliikumist kinni katta. Siin on abi käsust „kui“. Lisa õigesse kohta käsk „liigu edasi“, et need plokid mineerida.
      Underground If Statements_instruction: Nüüd lähevad asjad keeruliseks. Mineeri 3 punast kivi, kuid ära kuku laavasse. Kasuta käsku „kui“, et panna sillutisekivid kõigi laavaaukude peale, mis sa avastad.
      Underground Iron_instruction: Sulalaavasse astumine on halb mõte. Paigalda silla rajamiseks sillutisekivi ja mineeri siis vähemalt kaks raudplokki.
      Underground Mine in a Circle_instruction: "Mõtle välja, kuidas saaksid koguda 5 teemanti ja 7 punast kivi! Proovi kasutada korduse sees kordust, et kõndida ruudus.\\r"
      Underground Mining Coal_instruction: Kõige väärtuslikumad ressursid leiad maa alt, kuid seal võib pimedaks minna. Pane paika vähemalt kaks tõrvikut ja kaevanda vähemalt kaks sütt.
      Underground Test Level_instruction: Kogu kokku kõik mineraalid!
      Vigenere_instruction: Test
      XML Scratchpad_instruction: Using this test level to grab xml for unit tests
