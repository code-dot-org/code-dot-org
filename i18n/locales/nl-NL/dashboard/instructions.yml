nl:
  data:
    instructions:
      2-3 Artist 1 new_instruction: Hoi, ik ben een kunstenaar. Je kan programmeren om mij bijna alles te laten tekenen. Gebruik een paar blokken om mij over de grijze lijnen in de afbeelding te laten tekenen. (Elke lijn is 100 pixels lang)
      2-3 Artist 11_instruction: 'Geef het stopteken een rand door een achthoek te maken, waarvan de zijden elk 100 pixels lang zijn. Hoeveel graden moet je draaien? (Hint: Wat is 360 gedeeld door 8?) '
      2-3 Artist 12_instruction: 'Stel het "herhaal" blok zo in dat het een "cirkel" maakt om het oog af te maken. Als elke stap één graad naar rechts draait, hoe vaak moet je het blok dan "herhalen" om de cirkel compleet te maken? 180? 360? 500?'
      2-3 Artist 2 new_instruction: Dit huis heeft een half-afgemaakte muur. Iedere zijde is 100 maar de half-afgemaakte maar 50. Maak de muur af.
      2-3 Artist 2_instruction: Dit huis heeft een half-afgemaakte muur. Iedere zijde is 100 maar de half-afgemaakte maar 50. Maak de muur af.
      2-3 Artist 3.4_instruction: |
        Het spring blok verplaatst de artiest zonder te tekenen.
        Om een stippellijn te maken gebruik je het spring blok tegelijk met het teken blok.
      2-3 Artist 3_instruction: Deze hoed is 100 pixels hoog. Teken een hoed die 70 pixels minder hoog is.
      2-3 Artist 3new_instruction: De rode hoed is 100 pixels hoog. Maak een zwarte hoed af die 70 pixels korter is. De breedte van de zwarte hoed is 50 pixels.
      2-3 Artist 4_instruction: Help mij het huis voor deze kat af te maken.
      2-3 Artist 5_instruction: 'Vervang deze regels  door een "herhaal" blok om hetzelfde huis te tekenen met maar drie blokken.'
      2-3 Artist 6_instruction: 'Dit huis heeft een nieuw dak nodig! Teken de driehoek. Tip: Alle drie zijdes hebben dezelfde lengte.'
      2-3 Artist 7_instruction: |
        Maak de rechter helft van het laatste venster af.
        Ieder vierkant van het venster is 25 pixels hoog en breed. 
      2-3 Artist 8_instruction: |
        Maak de kooien voor de dieren af door de rechthoek te splitsen in twee gelijke vierkanten.
        De rechthoek is 200 pixels breed en 100 pixels hoog.
      2-3 Artist 9_instruction: Maak de vlieger af
      2-3 Artist Assessment 1_instruction: |
        Test: Maak de tekening van de laatste tand af.
        De tand is 25 pixels breed en 25 pixels hoog.
      2-3 Artist Debugging 1_instruction: Kun je deze hoed maken met een hoogte van 100?
      2-3 Artist Debugging 10_instruction: 'De besturingsknop op mijn gamecontroller is te smal. Tip: Maak het breder met 10 pixels'
      2-3 Artist Debugging 11_instruction: |
        Help me mijn schitterende sneeuwvlok af te maken.
        Hoe vaak moet ik de opdrachten "herhalen" om het af te maken?
      2-3 Artist Debugging 12_instruction: Ik moet een vloedgolf aan de tekening toevoegen. Kun jij me helpen?
      2-3 Artist Debugging 2_instruction: |
        De code voor de drie snorharen die je ziet is fout.
        Repareer de code om de snorharen te tekenen.
        Tip: Elke snorhaar is 75 pixels lang.
      2-3 Artist Debugging 3_instruction: |
        Mijn boot heeft een gat! Kun jij het repareren door de hoek van de lijn aan te passen?
        Tip: De laatste hoek heeft een afwijking van 15 graden.
      2-3 Artist Debugging 4_instruction: Wat voor plaatje proberen we te tekenen? Verbind de stippen met de juiste lijnen en hoeken.
      2-3 Artist Debugging 5_instruction: "De code voor het been en de voet dat je ziet is fout. Tip: De voet is te lang, je moet misschien een stapje terug doen (voet, stapje... snap je 'm?)"
      2-3 Artist Debugging 6_instruction: Het lijkt erop dat mijn stoel een poot mist. Pas de blokken aan om de poot te tekenen.
      2-3 Artist Debugging 7_instruction: Het lijkt erop dat C in code achteruit wordt getekend. Kun je het eruit laten zien als een C?
      2-3 Artist Debugging 8_instruction: Mijn molentje is niet af. Hoe vaak moet ik herhalen om het af te maken?
      2-3 Artist Debugging 9_instruction: 'De code voor de stuurpen is fout. Tip: De hoek wijkt 60 raden af'
      2-3 Artist Debugging Assessment 1_instruction: 'Deze vorm is te klein. Kun je het groter maken? Tip: Het moet alle zijden 75 pixels langer.'
      2-3 Artist Free Play_instruction: Vrij spel! Je mag alles tekenen wat je wilt.
      2-3 Artist Functions 1_instruction: |
        Hallo. Ik zombie kunstenaar. Mij houd van tekenen!
        Help me de bril met vierkante glazen tekenen. Tip: De brug tussen de glazen is 25 pixels korter dan de lengte van een glas.
      2-3 Artist Functions 10_instruction: Hier zijn twee functies, één om een grote tandwiel te tekenen, één voor een kleine. Gebruik ze in een machine!
      2-3 Artist Functions 11.5_instruction: 'Hier is dezelfde "Teken een zeskant" functie. Wat gebeurt er als je slechts 60 graden draait in elke lus?'
      2-3 Artist Functions 11_instruction: 'We hebben de "teken een vierkant" functie hernoemd naar "teken een zeskant", maar het tekent nog steeds vierkanten! Kun je de "teken een zeskant" functie aanpassen zodat deze een zeskant met zijdes van 50 pixels maakt en daarmee de tekening maken?'
      2-3 Artist Functions 12_instruction: 'Functies zijn echt geweldig om complexe dingen meerdere keren te tekenen. Kun je de functie "tekenen een bloem" gebruiken om de rest van de bloembak te vullen? (Tip: Tussen de bloemen zit een afstand van 100 pixels) '
      2-3 Artist Functions 13_instruction: |
        We hebben je voorzien van vier functies.
        Gebruik ze on elke manier die je wilt in één of meer lussen om tekeningen te maken die je met je vrienden kunt delen. Druk op uitvoeren om een voorbeeld te zien.
      2-3 Artist Functions 2_instruction: 'Met functies kan je nieuwe blokken definiëren! We hebben de blokken om een vierkant te tekenen in een functie met de naam "teken een vierkant". Kan je de "teken een vierkant" functie gebruiken om de brillenglazen te tekenen? De vierkanten staan 75 pixels uit elkaar.'
      2-3 Artist Functions 3_instruction: Bewerk de functie om een vierkant te teken met als lengte van een zijde 115 en een grotere bril te tekenen. De vierkantjes staan nu 45 pixels uit elkaar.
      2-3 Artist Functions 4_instruction: 'Gebruik het "herhaal" block om deze 3 vierkanten te tekenen.'
      2-3 Artist Functions 7_instruction: 'Gebruik de "teken een huis" functie om twee huizen met verschillende parameters te tekenen. (Tip: het eerste huis is 100 pixels).'
      2-3 Artist Functions 9_instruction: Hier is een sneeuwvlok-functie. Probeer er een winterlandschap mee te maken. Dit is een speel-niveau, dus er is geen puzzel om op te lossen. Veel plezier!
      2-3 Artist Loops 1_instruction: Kan je een zeshoek maken met kanten die 100 pixels lang zijn om de cel af te maken? Denk er aan dat je maar 60 graden hoeft te draaien!
      2-3 Artist Loops 10_instruction: Wat gebeurt er met het ontwerp wanneer we onze laatste stap vooruit de helft zo lang maken?
      2-3 Artist Loops 11_instruction: 'Laat ons een  * andere * lus rond onze hele creatie plaatsen!  Vergeet niet om een hoek toe te voegen aan het einde van de buitenste lus.'
      2-3 Artist Loops 2_instruction: Gebruik nu een herhaal-blok om een schil van de cel te maken.
      2-3 Artist Loops 4_instruction: Wil je zien wat er gebeurt wanneer we die vorm oneindig herhalen in een lus?
      2-3 Artist Loops 5_instruction: We maken nu een kleine verandering in de lus en bekijken hoe onze afbeelding verandert.
      2-3 Artist Loops 6_instruction: Voeg een extra MOVE en een extra TURN toe binnen de lus en zie hoe je ontwerp verandert.
      2-3 Artist Loops 7_instruction: We kunnen lussen gebruiken om allerlei soorten veelhoeken te maken. Kan je een ruit maken in deze zeshoek?
      2-3 Artist Loops 8_instruction: Laat ons beide elementen in een lus plaatsen.
      2-3 Artist Loops 9_instruction: "We gaan dezelfde elementen in een lus herhalen, maar nu gaan we er afstanden tussen zetten.\r\nGebruik dezelfde code als hiervoor, maar voeg een STEP FORWARD toe aan het eind van de buitenste lus."
      2-3 Artist Loops New 1_instruction: Nu gaan we het hoofd van de robot tekenen! Kun je een vierkant maken met zijden van 100 pixels?
      2-3 Artist Loops New 10_instruction: "Nu gaan we een aantal V's met elkaar verbinden in een lus."
      2-3 Artist Loops New 11_instruction: Nu tekenen we het 24 keer. Voeg een LEFT TURN van 30 graden toe aan je code en zet alles in een REPEAT blok.
      2-3 Artist Loops New 12_instruction: |
        Teken een ruit met zijden van 100 pixels.
        
      2-3 Artist Loops New 13_instruction: Teken nu de ruit 3 keer in een lus.
      2-3 Artist Loops New 14_instruction: Teken nu 10 ruiten maar draai 90 graden na iedere ruit.
      2-3 Artist Loops New 15_instruction: Tekenen iets leuks.
      2-3 Artist Loops New 2_instruction: Hier is de code die je hebt gebruikt om dat vierkant te tekenen. Wat gebeurt er wanneer je een REPEAT blok gebruikt om die code 4 keer uit te voeren?
      2-3 Artist Loops New 9_instruction: Tekene een eenvoudige V waarbij de zijden 50 pixels zijn om de pijl te voltooien.
      2-3 Artist Match Hex Pic_instruction: 'Wedstrijd: Help de zeshoek te maken.'
      2-3 Artist Match Rho Pic_instruction: 'Wedstrijd: Maak de missende regels af.'
      2-3 Artist Match Sq Pic_instruction: 'Wedstrijd: Voltooi de ontbrekende code'
      2-3 Artist Match Tri pic_instruction: Koppel de ontbrekende code.
      2-3 Artist Nested Loops 1_instruction: "Je hebt eerder al lussen gebruikt om vormen te tekenen, maar wist je dat je een lus binnen een andere lus kunt zetten?\r\nMaak een lus voor dit hele blok code die drie keer wordt uitgevoerd om dit patroon te tekenen."
      2-3 Artist Nested Loops 10_instruction: Laat deze code in een lus 12 keer uitvoeren om het patroon af te maken.
      2-3 Artist Nested Loops 11_instruction: Laat deze code in een lus 4 keer uitvoeren om het patroon af te maken en draai 90 graden na iedere cirkel.
      2-3 Artist Nested Loops 12_instruction: Herhaal deze code 12 keer om de krullen te voltooien.
      2-3 Artist Nested Loops 2_instruction: Herhaal de driehoek 6 keer. Na elke driehoek moet je hem 60 graden draaien en dan de volgende tekenen.
      2-3 Artist Nested Loops 3_instruction: Herhaal de driehoek 12 keer om dit patroon te tekenen. Deel het aantal graden in een cirkel (360) door het aantal vormen die je wilt tekenen (12). De uitkomst hiervan bepaalt hoever je elke vorm moet draaien.
      2-3 Artist Nested Loops 4_instruction: 'Herhaal de diamand 12 keer om een bloem te tekenen. Tip: Met de 12 diamanten is het net als met de 12 driehoeken die je al gemaakt hebt - hoe veel moet draaien na elke vorm?'
      2-3 Artist Nested Loops 5_instruction: Vul het raam van het gebouw met een geneste lus. De ramen zijn 20 pixel hoog en 20 pixel naast elkaar.
      2-3 Artist Nested Loops 6_instruction: Deze dinosaurus heeft 8 stekels op zijn staart; elke stekel is 30 pixels hoog. Herhaal de driehoek 8 keer, maar zorg ervoor dat je elke keer vooruit gaat.
      2-3 Artist Nested Loops 7_instruction: Herhaal de driehoek 10 keer om de zon te tekenen. Je moet verplaatsen en draaien na elke driehoek. Om uit rekenen hoever je moet draaien, moet je de graden van een cirkel delen door het aantal vormen die je nodig hebt.
      2-3 Artist Nested Loops 8_instruction: Laten we nu wat gras toevogen. Elk plukje gras is 50 pixel uit elkaar.
      2-3 Artist Nested Loops 9_instruction: Als laatste komt nog een bloem. Herhaal de diamant 12 keer om een bloem te tekenen.
      2-3 Artist Nested Loops Free Play_instruction: Vrije opdracht, tekenen iets moois met een geneste lus.
      2-3 Bee Conditionals 1_instruction: Hallo! Ik ben een bij. Help mij om nektar uit de bloem te krijgen.
      2-3 Bee Conditionals 10_instruction: "Paarse bloemen hebben 1 of 0 nektar. Zorg dat je geen nektar van een paarse bloem haalt, als die geen nektar heeft.\r\n"
      2-3 Bee Conditionals 11_instruction: Verzamel nektar van bloemen met nektar.
      2-3 Bee Conditionals 12_instruction: Gebruik een lus om de nektar te controleren en te verzamelen bij alle bloemen.
      2-3 Bee Conditionals 13_instruction: |
        Verzamel nektar en maak honing. Tip:
        Wat gebeurt er als je de voorwaarde "als nektar" gebruikt bij een rode bloem? Kan je dit met een lus doen?
      2-3 Bee Conditionals 14_instruction: Verzamel nektar en maak honing. . Zorg dat je geen nektar van een paarse bloem haalt, als die geen nektar heeft.
      2-3 Bee Conditionals 15_instruction: Verzamel nektar van de vier bloemen.
      2-3 Bee Conditionals 2_instruction: Hallo! Ik ben een bij. Help mij om nektar uit de bloem te krijgen. Gebruik een lus.
      2-3 Bee Conditionals 3_instruction: Help me om alle nektar van de bloemen te verzamelen en om honing te maken. Gebruik een lus.
      2-3 Bee Conditionals 4_instruction: Help me om alle nektar van de bloemen te verzamelen en om alle honing te maken.
      2-3 Bee Conditionals 5_instruction: 'Paarse bloemen hebben 1 of 0 nektar, maar je weet niet welke. Zorg dat je geen nektar van een paarse bloem haalt, als die geen nektar heeft. Controleer of de nektar gelijk is aan 1 met een "als blok".'
      2-3 Bee Conditionals 6_instruction: 'Controleer deze bloem met een "als blok" om te zien of er nektar is.'
      2-3 Bee Conditionals 7_instruction: Verzamel nektar van elke bloem met nektar.
      2-3 Bee Conditionals 8_instruction: |
        Dit veld heeft rode en paarse bloemen.
        Van de rode bloemen weten we hoeveel nektar ze hebben, maar van de paarse bloemen weten we dat niet.
        Verzamel alle nektar.
      2-3 Bee Conditionals 9_instruction: Verzamel alle nectar van iedere bloem.
      2-3 Bee Conditionals Assessment 1_instruction: 'Test: Verzamel alle nektar. Zorg dat je alleen nektar van de paarse bloem pakt, als die nektar heeft.'
      2-3 Bee Debugging 1_instruction: Deze blokken blijven een probleem. Herstel de fout(en) om alle nektar te verzamelen en alle honing te maken.
      2-3 Bee Debugging 10_instruction: Deze blokken blijven een probleem. Herstel de fout(en) om alle nektar te verzamelen en alle honing te maken.
      2-3 Bee Debugging 2_instruction: Deze blokken blijven een probleem. Herstel de fout(en) om alle nektar te verzamelen en alle honing te maken.
      2-3 Bee Debugging 3_instruction: Deze blokken blijven een probleem. Herstel de fout(en) om alle nektar te verzamelen en alle honing te maken.
      2-3 Bee Debugging 4_instruction: Deze blokken blijven een probleem. Herstel de fout(en) om alle nektar te verzamelen en alle honing te maken.
      2-3 Bee Debugging 5_instruction: Deze blokken blijven een probleem. Herstel de fout(en) om alle nektar te verzamelen en alle honing te maken. Je kan voer uit en ga gebruiken.
      2-3 Bee Debugging 6_instruction: 'Deze blokken blijven een probleem. Herstel de fout(en) om alle nektar te verzamelen en alle honing te maken. '
      2-3 Bee Debugging 7_instruction: Deze blokken blijven een probleem. Herstel de fout(en) om alle nektar te verzamelen en alle honing te maken.
      2-3 Bee Debugging 8_instruction: Deze blokken blijven een probleem. Herstel de fout(en) om alle nektar te verzamelen en alle honing te maken.
      2-3 Bee Debugging 9_instruction: Deze blokken blijven een probleem. Herstel de fout(en) om alle nektar te verzamelen en alle honing te maken.
      2-3 Bee Debugging Assessment 1_instruction: 'Test: Deze blokken blijven een probleem. Herstel de fout(en) om alle nektar te verzamelen en alle honing te maken.'
      2-3 Bee Functions 1_instruction: 'Functies zijn blokken code die een taak uitvoeren. Gebruik de "neem 2 nektar" functies om nektar van elke bloem te verzamelen.'
      2-3 Bee Functions 10_instruction: Paarse bloemen hebben 1 of 0 nektar. Maak een functie die alleen van paarse bloemen met nektar, de nektar verzamelt.
      2-3 Bee Functions 2_instruction: 'Functies zijn blokken code die een taak uitvoeren. Gebruik de "neem 5" functies om 5 nektars te verzamelen. Gebruik een lus om het gewenste totaal te krijgen.'
      2-3 Bee Functions 3_instruction: Verzamel alle nectar van iedere bloem.
      2-3 Bee Functions 4_instruction: 'De functie "beweeg en verzamel nektar" draait de bij, verzamelt nektar en brengt de bij terug waar hij begon. Gebruik de functie om alle nektar te verzamelen.'
      2-3 Bee Functions 5_instruction: Er is nu meer nektar bij de bloemen. Bewerk de functie om 4 nektar te verzamelen. Gebruik deze functie om alle nektar van de bloemen te verzamelen.
      2-3 Bee Functions 6_instruction: Gebruik nu dezelfde functie om nektar van de drie bloemen te verzamelen.
      2-3 Bee Functions 7_instruction: De bloemen zijn nu verder weg. Bewerk de functie en gebruik die om alle nektar van de bloemen te verzamelen.
      2-3 Bee Functions 8_instruction: Maak je eigen functie die 7 nektar verzamelt, beweegt en 7 honing maakt. Gebruik de functie om nektar van elke bloem te verzamelen en honing in elke honingraat te maken.
      2-3 Bee Functions 9_instruction: Maak je eigen functie die het pad volgt, nektar verzamelt, honing maakt en de bij naar het begin van het pad brengt.
      2-3 Bee Functions Assessment 1_instruction: 'Test: Gebruik de functie om nektar van elke bloem te verzamelen.'
      2-3 Bee Functions Assessment 2_instruction: 'Test: Maak een functie om elke keer 3 honing te maken.'
      2-3 Bee Loops 1_instruction: 'Elke bloem heeft één eenheid nektar. Verzamel nektar van elke bloem. '
      2-3 Bee Loops 10_instruction: 'Kan je de "zolang lus" in de andere twee lussen gebruiken om alle nektar te verzamelen?'
      2-3 Bee Loops 11_instruction: 'Gebruik de "zolang lus" om alle nektar te verzamelen van de bloemen in dit veld.'
      2-3 Bee Loops 12_instruction: 'Gebruik de "zolang lus" om alle nektar te verzamelen van de bloemen in dit veld.'
      2-3 Bee Loops 13_instruction: 'Proef: gebruik de herhaalblok om al de nectar te verzamelen.'
      2-3 Bee Loops 1A_instruction: 'Hallo. Ik ben een bij. Kan je me helpen om de nectar van deze bloemen te verzamelen? '
      2-3 Bee Loops 2_instruction: Gebruik de lus om de nektar te verzamelen en de honing te maken.
      2-3 Bee Loops 2A_instruction: Kan je dezelfde opdracht eenvoudiger met een lus maken?
      2-3 Bee Loops 3_instruction: Verzamel nektar van elke bloem en maak honing op elke honingraat.
      2-3 Bee Loops 3A_instruction: Kan je een lus gebruiken om alle nectar te verzamelen?
      2-3 Bee Loops 3B_instruction: Gebruik nu het nieuwe herhaalblok om alle nectar te verzamelen en om alle honing te maken.
      2-3 Bee Loops 4_instruction: Gebruik een soortgelijke lus als in de laatste opdracht, maar verwerk er een draai in.
      2-3 Bee Loops 4A_instruction: Wat gebeurt er als je deze reeks driemaal uitvoert in een lus? Vergeet niet om aan het eind de honing te maken!
      2-3 Bee Loops 5_instruction: Gebruik een lus om de trappen af te dalen en de nektar te verzamelen.
      2-3 Bee Loops 6_instruction: Gebruik een lus om nektar van elke bloem te verzamelen en honing op elke honingraat te maken.
      2-3 Bee Loops 7_instruction: Zet deze blokken in een lus om nektar van elke bloem te verzamelen.
      2-3 Bee Loops 8_instruction: 'Deze paarse bloemen hebben een onbekende hoeveelheid nectar. Gebruik de lus "while nectar" voor het verzamelen van alle nectar. Deze lus zal worden uitgevoerd, zolang aan de voorwaarde wordt voldaan, in dit geval Nectar > 0.'
      2-3 Bee Loops 9_instruction: "De 'while' lus kan dezelfde acties uitvoeren als een als-instructie in een lus. Voeg een een 'while' lus toe aan deze code om de dezelfde taak uit te voeren."
      2-3 Bee Loops Assessment 1_instruction: "Proef - Gebruik een 'while' lus voor het verzamelen van alle nectar van deze bloem."
      2-3 Maze 1_instruction: 'Kun je me helpen het ondeugende biggetje te pakken? Plak een paar "vooruit" blokken op elkaar en klik op "Uitvoeren" om me erbij te laten komen. '
      2-3 Maze 10_instruction: Breng me naar de groene naarling! (Pas op voor dynamiet)
      2-3 Maze 11_instruction: Breng me naar de bloem, ik heb honger! Hoeveel keer heb je het blok herhaald?
      2-3 Maze 12 (copy 1)_instruction: 'Kun je het vorige antwoord vervangen met slechts twee blokken? (Hint: Maak een lus met een blok "herhaal keer".)'
      2-3 Maze 12 (copy 2)_instruction: 'Kun je het vorige antwoord vervangen met slechts twee blokken? (Hint: Maak een lus met een blok "herhaal keer".)'
      2-3 Maze 12 (old)_instruction: "Breng me naar het varken, nu met het 'herhalen keer' blok!"
      2-3 Maze 12_instruction: 'Kun je deze vijf blokken met slechts twee blokken vervangen? (Hint: Maak een lus met een blok "herhaal keer".)'
      2-3 Maze 13 (old)_instruction: "Breng me naar het biggetje, nu met het 'herhaal tot' blok!"
      2-3 Maze 13_instruction: Breng me naar het varken met maar twee blokken.
      2-3 Maze 14 (old)_instruction: "Breng me naar het biggetje met het 'herhaling tot' blok!"
      2-3 Maze 14_instruction: "Breng me naar de zonnebloem! (Waar is dat 'herhaal keer' blok wanneer ik het nodig heb?)"
      2-3 Maze 15 (old)_instruction: "Breng me naar het biggetje met het 'herhaling tot' blok!"
      2-3 Maze 15_instruction: Gebruik twee lussen om naar het biggetje te gaan met minder blokken.
      2-3 Maze 16 (old)_instruction: "Breng me naar het biggetje met het 'herhaling tot' blok!"
      2-3 Maze 16 before_instruction: Breng me naar het biggetje.
      2-3 Maze 16_instruction: Breng me naar de zonnebloem. Gebruik een lus!
      2-3 Maze 2_instruction: Het biggetje werkt me op mijn zenuwen. Help me bij hem te komen!
      2-3 Maze 3_instruction: |
        Volg het pad en breng me naar het malle varken. Vermijd de
        TNT, want anders zullen de veren in het rond vliegen!
      2-3 Maze 4_instruction: Breng me naar de groene naarling! (Pas op voor dynamiet)
      2-3 Maze 5_instruction: Breng me naar de groene naarling! (Pas op voor dynamiet)
      2-3 Maze 6_instruction: Rustig blijven, help me het slechte biggetje te vinden. Anders word ik misschien nog boos!
      2-3 Maze 7_instruction: Breng me naar de groene naarling! (Pas op voor dynamiet)
      2-3 Maze 8_instruction: Breng me naar het varken!
      2-3 Maze 9_instruction: Breng me naar de groene naarling! (Pas op voor dynamiet)
      2-3 Maze Loops 1_instruction: Kun je bij het varken brengen met 5 blokken?
      2-3 Maze Loops 17_instruction: Help me tot bij de zonnebloem!
      2-3 Maze Loops 18_instruction: Help me tot bij de zonnebloem!
      2-3 Maze Loops 19_instruction: Help me tot bij de zonnebloem!
      2-3 Maze Loops 20_instruction: Help me tot bij de zonnebloem!
      2-3 Maze Loops 21_instruction: Help me tot bij de zonnebloem!
      2-3 Maze Loops Assessment 1_instruction: 'Opdracht: Breng me naar de zonnebloem met slechts 5 blokken! '
      2-3 Maze sq1_instruction: |
        This pig is ruffling my feathers.  Help me find
        him!
      2-3 Maze sq10_instruction: Breng me naar het varken! Welke blokken werden herhaald?
      2-3 Maze sq10v2_instruction: Breng me naar het varken! Welke blokken werden herhaald?
      2-3 maze sq11_instruction: Breng me naar het varken! Welke blokken werden herhaald?
      2-3 maze sq12_instruction: 'Kunt u het vorige antwoord vervangen met een lus door een blok "herhaal x keer" te gebruiken?'
      2-3 maze sq13_instruction: |
        Geachte persoon. Ik zombie. Moet...naar...zonnebloem.
        Maak een lus met een "herhaal tot" blok.
      2-3 maze sq14_instruction: Lukt het je om bij de zonnebloem te komen door maar vier blokken te gebruiken?
      2-3 maze sq15_instruction: Lukt het je om bij de zonnebloem te komen door maar vijf blokken te gebruiken?
      2-3 maze sq16_instruction: |
        Ok, dit lijkt erop, maar dan een klein beetje anders. Lukt het
        je met maar vijf blokken?
      2-3 Maze sq2_instruction: |
        Volg het pad en breng me naar het malle varken. Vermijd de
        TNT, want anders zullen de veren in het rond vliegen!
      2-3 Maze sq3_instruction: Breng me naar de groene naarling! (Pas op voor dynamiet)
      2-3 Maze sq4_instruction: Rustig blijven, help me het slechte biggetje te vinden. Anders word ik misschien nog boos!
      2-3 Maze sq5_instruction: |
        Breng me naar het varken? Hoe vaak dien je een blok
        te herhalen?
      2-3 Maze sq6_instruction: |
        Kun je het vorige antwoord vervangen door eentje 
        met maar twee blokken? (Hint: Maak een lus door een "herhaal x keer" 
        blok te gebruiken.)
      2-3 Maze sq7_instruction: breng me naar de groene indringer met behulp van slechts drie blokken.
      2-3 Maze sq8_instruction: 'Breng me naar het varken! (Waar is dat blok "herhaal keer" wanneer ik het nodig heb?)'
      2-3 Maze sq9_instruction: Maak loops om naar het varken te gaan met minder blokken.
      2-3_instruction: |
        Purple flowers may have either 1 or 0 nectar. Be careful
        not to collect nectar from a purple flower if it doesn't have any.
      2-3level1_instruction: Help de vogel het ondeugende varken te vangen door het vooruit te bewegen
      4-5 Artist 1_instruction: |
        Help me om mijn vierkant te tekenen. (Elke lijn is 300 
        pixels lang) 
      4-5 Artist 10_instruction: |
        Druk op "Uitvoeren" om de code uit te proberen. 
        Herhaal het daarna vaak genoeg om de tekening af te maken. De kleuren zullen telkens anders zijn.
      4-5 Artist 11_instruction: |
        Voltooi de groene lijnen. De lijnen zijn 300 pixels
        lang en liggen 15 pixels uiteen.
      4-5 Artist 2_instruction: Kun je een lus van deze code maken om het vierkant te voltooien?
      4-5 Artist 3.5_instruction: 'OK, probeer er achter te komen wat er gebeurt als je deze code uitvoert (of druk op "Uitvoeren" om het te proberen). Herhaal dit daarna vaak genoeg om de tekening af te maken. De kleuren zullen (hoogst waarschijnlijk) elke keer anders zijn.'
      4-5 Artist 3_instruction: Dit rechthoekige bloembed heeft een omtrek van 600. De lange zijde heeft een lengte van 200. Teken de rechthoek.
      4-5 Artist 4_instruction: Hoeveel graden zitten er in een cirkel? Maak een lus van de blokken om een cirkel van kleuren te maken.
      4-5 Artist 5_instruction: Welke hoek gebruik je?
      4-5 Artist 6_instruction: Deze gelijkzijdige driehoek heeft hoeken van 60, 60 en 60 graden. Elke zijde is 200 pixels. Maak de tekening af.
      4-5 Artist 7_instruction: Deze rechthoekige driehoek heeft hoeken van 30, 60 en 90 graden. De lengte van de schuine zijde is tweemaal de hoogte van 100 pixels. Maak de tekening af.
      4-5 Artist 8_instruction: De middellijn op een voetbalveld staat loodrecht op de zijlijn. Dit veld heeft een omtrek van 800 pixels en het is 240 pixels lang. Hoe breed is het? Teken de buitenlijnen en de middellijn.
      4-5 Artist 9_instruction: Teken de andere helft zodat het ontwerp symmetrisch is. De driehoeken zijn gelijkzijdig en zijn 50 pixels lang.
      4-5 Artist Assessment 1_instruction: 'Beoordeling: Gebruik een lus om een gelijkzijdige driehoek te tekenen. Elke zijde is 300 pixels.'
      4-5 Artist For Loops 1_instruction: Zet de getallen 1 tot en met 10 in de breedte blokken en voer de code uit.
      4-5 Artist For Loops 11_instruction: 'Maak het "for" blok af zodat het 0, 20, 40, 60, 80... 200 telt.'
      4-5 Artist For Loops 12_instruction: 'Wat gebeurt er als je de "van" en "naar" getallen omwisselt? Maak het "for" blok af zodat het 200, 180, 160, 140, 120... 0 telt. '
      4-5 Artist For Loops 13_instruction: 'Dit ontwerp is begonnen zonder een "for" lus en gebruikt te veel blokken! Gebruik een "for" blok om de spiraal af te maken. Tip: de lengte van de laatste lijn is 250 pixels.'
      4-5 Artist For Loops 14_instruction: 'Iemand begon de code, maar besefte toen dat er een snellere manier moest zijn! Gebruik een "for" blok om de blokken te vervangen en de driehoekige spiraal af te maken (Tip: de lengte van de laatste lijn is 300 pixels).'
      4-5 Artist For Loops 15_instruction: 'Iemand begon de code, maar besefte toen dat er een snellere manier moest zijn! Gebruik een "for" blok om de blokken te vervangen en de zeshoekige spiraal af te maken (Tip: de lengte van de laatste lijn is 200 pixels).'
      4-5 Artist For Loops 3_instruction: 'Hoe kunnen we van 1 tot 50 tellen? Bewerk het "for" blok.'
      4-5 Artist For Loops 4_instruction: 'Maak het "for" blok af zodat het telt van 1 tot 10 met 1.'
      4-5 Artist For Loops 6_instruction: 'Teken vierkanten met zijden van 50, 60, 70, 80 en 90 pixels. Je zult de "teken een vierkant" functie vijf keer moeten gebruiken.'
      4-5 Artist For Loops 7_instruction: 'Teken de zelfde vierkanten maar gebruik een "tel met" blok om de grootte te veranderen. Plaats het "teller" blok in de "teken een vierkant" functie. Tip: je vindt het in de categorie variabelen.'
      4-5 Artist For Loops 8_instruction: 'Kun je het programma afmaken door de blokken binnen een "for" blok dat van 10 tot en met 200 met 10 telt te plaatsen? Het "for" blok vind je in de categorie lussen.'
      4-5 Artist For Loops 9_instruction: 'Deze cirkels zijn 5, 10, 15, 20, 25, 30 en 35 groot. Teken de cirkels door gebruik te maken van een "for" blok.'
      4-5 Artist Free Draw 1_instruction: Vrij tekenen! Teken wat in je opkomt.
      4-5 Artist Functions 1_instruction: Gebruik een herhaal lus om deze driehoek te tekenen.
      4-5 Artist Functions 10a_instruction: "Plaats deze code in de 'teken een sneeuwvlok' functie en vervang de 50 door de parameter 'grootte'. De functie wordt al aangeroepen om een sneeuwvlok 100 pixels groot te maken."
      4-5 Artist Functions 10b_instruction: 'Gebruik de "teken een sneeuwvlok" functie om verschillende grootte vlokken te maken. Tip: de eerste sneeuwvlok is 25 lang en elke sneeuwvlok is twee maal zo groot als de voorgaande.'
      4-5 Artist Functions 11_instruction: 'Deze "tekenen een zeshoek" functie maakt gebruik van de "teken een driehoek" functie. Maak de zeshoek functie af. (Hint: een zeshoek heeft 6 zijden, elk 100 pixels lang)'
      4-5 Artist Functions 12_instruction: "Maak de functie 'teken golven' af.  Elke golf bestaat uit een boven golf en een onder golf. Hint: teken 5 blauwe golven."
      4-5 Artist Functions 13 Free play_instruction: Hier zijn enkele functies om planeten, sterren, raketten en robots te tekenen. Gebruik zo zoals je wilt om tekeningen te maken die je met vrienden kunt delen.
      4-5 Artist Functions 14 Free play_instruction: "Kijk we hebben je verschillende functies gegeven. Gebruik zo zoals je maar wilt in een of meerdere lussen om tekeningen te maken die je met vrienden kunt delen. Klik op 'Uitvoeren' om een voorbeeld te zien."
      4-5 Artist Functions 15 Assessment_instruction: 'Beoordeling: Gebruik de "teken een vierkant" functie om de vierkanten te maken.  De vierkanten zijn 50, 100 en 150 pixels.'
      4-5 Artist Functions 2a_instruction: 'Plaats deze blokken nu in een nieuwe functie genaamd "teken een kleine driehoek" en roep deze aan.'
      4-5 Artist Functions 2b_instruction: 'Maak nu met behulp van de beschikbare blokken een functie genaamd "teken een kleine driehoekje".'
      4-5 Artist Functions 3_instruction: 'Maak nu de functies "tekenen een middelgrote driehoek" en "teken een grote driehoek". De functie "tekenen een klein driehoekje" wordt voor je gedaan. De driehoeken hebben een zijdelengte van 50 (klein), 100 (middel) en 150 (groot). '
      4-5 Artist Functions 4_instruction: 'Deze nieuwe "teken een driehoek" functie heeft een parameter en kan het werk van alle drie voorgaande functies. Teken dezelfde driehoeken met behulp van deze nieuwe functie.'
      4-5 Artist Functions 5_instruction: 'Kun je de functie "teken een driehoek" in een "teken een vierkant" functie veranderen om de tekening veranderen?'
      4-5 Artist Functions 6_instruction: 'Gebruik de "teken een vierkant" en "teken een driehoek functies" om een huis te tekenen. (Hint: de zijden van het vierkant zijn 200 pixels)'
      4-5 Artist Functions 6b_instruction: "Maak een huis door de teken een vierkant en driehoek functies samen met andere blokken aan de 'teken een huis' functie toe te voegen en deze aan te roepen."
      4-5 Artist Functions 7_instruction: 'Gebruik de "teken een huis" functie huizen te tekenen die 100 pixels en 50 pixels zijn. De twee huizen staan 50 pixels uit elkaar.'
      4-5 Artist Functions 8_instruction: 'De "teken een bloem" functie heeft een parameter waarmee je de steelhoogte in kunt stellen. Zet deze op 200 en kijk wat er gebeurt.'
      4-5 Artist Functions 9_instruction: Teken deze 3 bloemen. De hoogte van de eerste is 100 en de volgende bloem is steeds 50 hoger dan de vorige. De bloemen staan 100 pixels uit elkaar.
      4-5 Artist Patterns 1_instruction: Kun jij dit vierkant tekenen met behulp van een lus? Elk zijde is 20 pixels lang.
      4-5 Artist Patterns 10_instruction: 'Deze code tekent twee rijen van zeshoeken - Doorloop dit geheel 4 keer om de hele honingraat te tekenen. Tip: Je zult in je buitenste lus 120 pixels terug moeten springen ervoor te zorgen dat de kunstenaar niet buiten het scherm tekent.'
      4-5 Artist Patterns 11_instruction: 'Hoeveel keer moet je dit doorlopen om een halve cirkel te tekenen? Tip: als er 360 graden in een cirkel zitten en elke lus draait 3 graden, hoe vaak zou je dan moeten herhalen om een volledige cirkel te tekenen?'
      4-5 Artist Patterns 12_instruction: Als je deze lus kopieert en naar links draait in plaats van naar rechts, wat gebeurt er dan? Kun je dit herhalen om deze golf te tekenen?
      4-5 Artist Patterns 13_instruction: 'Laten we het geheel vier keer herhalen om deze fotolijst te maken. Kijk uit voor de hoeken - je kunt niet enkel 90 graden draaien! Als 60 keer herhalen van een 3 graden draai een halve cirkel maakt, welke van deze blokken van code maakt dan een kwart cirkel voor de hoeken?'
      4-5 Artist Patterns 2_instruction: Als je je vierkant lus in een andere lus plaatst, dan noemen we dat een geneste lus. Wat moet je aan je buitenste lus toevoegen om er voor te zorgen dat alle 15 vierkanten netjes naast elkaar staan?
      4-5 Artist Patterns 3_instruction: Laten we nu één niveau dieper gaan! Wij hebben dat hele codeblok in een andere lus genest, maar jij moet de kunstenaar terug op zijn plaats krijgen om de volgende lijn te tekenen. Welke van deze codeblokken kun je aan het einde van de buitenste lus plaatsen om het gehele raster te tekenen?
      4-5 Artist Patterns 4_instruction: Deze diamant heeft zijden van 50 pixels en hoeken van 120 en 60 graden. Gebruik een lus om hem te tekenen.
      4-5 Artist Patterns 5.5_instruction: Hoe vaak moet je dit blok herhalen om het volledige raster van diamanten te tekenen?
      4-5 Artist Patterns 5_instruction: 'Laten we dit herhalen om een rij van 6 diamanten te maken. Merk op dat we onze diamant code hebben aangepast om 3 keer te herhalen in plaats van 2 - Waarom denk je dat dat is?'
      4-5 Artist Patterns 6_instruction: Hoe vaak moet je dit blok herhalen om het volledige raster van diamanten te tekenen?
      4-5 Artist Patterns 7_instruction: 'Laten we de code van de laatste puzzel aanpassen om dit complexere patroon te maken. Merk op hoe de diamanten elkaar nu overlappen. Probeer de eerste "spring achteruit" van 100 naar 50 (half zo ver) te veranderen - hoe ver moet de kunstenaar nu gaan in de tweede "spring achteruit"?'
      4-5 Artist Patterns 8_instruction: Gebruik een lus om deze zeshoek met 40 pixel zijden en 60 graden hoeken te tekenen.
      4-5 Artist Patterns 9.5_instruction: Laten we deze code in een lus zetten om twee rijen van zeshoeken te tekenen. Merk op hoe onze tweede rij naar rechts verschoven is.
      4-5 Artist Patterns 9_instruction: Herhaal die code nu 3 keer om de hele rij te tekenen. Hint, elke zeshoek is 80 pixels breed van uiterst links naar uiterst rechts.
      4-5 Artist Patterns Free Play_instruction: 'Vrij spelen - probeer een eigen patroon te maken!'
      4-5 Bee Conditionals 1 (copy 1)_instruction: |
        The bee can't tell if this is
        a flower or a honeycomb. Gather nectar only from flowers, but first check
        if it is a flower or a honeycomb.
      4-5 Bee Conditionals 1_instruction: De bij kan niet onderscheiden of dit een bloem of een honingraat is. Verzamel alleen nectar van bloemen, maar test eerst of het een bloem of een honingraat is.
      4-5 Bee Conditionals 2 (copy 1)_instruction: |
        The bee only wants nectar right
        now. Remember, not all objects are flowers, so check to gather nectar only
        at flowers.
      4-5 Bee Conditionals 2_instruction: De bij wil nu alleen nectar. Vergeet niet dat niet alle objecten bloemen zijn, dus test om alleen bij bloemen nectar verzamelen.
      4-5 Bee Conditionals 3_instruction: 'Nu wil de bij alleen honing maken.  Test om alleen honing te maken bij de honingraten.'
      4-5 Bee Conditionals 4 (copy 1)_instruction: |
        The unknown object is either
        a flower or a honeycomb. Use the if/else block to collect nectar if it is
        a flower, else to make honey (because it is a honeycomb).
      4-5 Bee Conditionals 4_instruction: Het onbekende object is een bloem of een honingraat. Gebruik het als/anders blok om bij een bloem nectar te verzamelen en om anders honing te maken (omdat het een honigraat is).
      4-5 Bee Conditionals 5_instruction: Er kan een bloem of een honingraat onder die wolken zijn. Gebruik het als/anders blok om bij een bloem nectar te verzamelen en om anders honing te maken (omdat het een honigraat is).
      4-5 Bee Conditionals 6 (copy 1)_instruction: |
        This purple flower may have either
        3, 2, or 1 nectar. Here an if-else block is combined with another if-else
        block to create an if, else-if, else block. Complete the solution to collect
        the unknown amount of nectar.
      4-5 Bee Conditionals 6_instruction: Deze paarse bloem heeft 3, 2 of 1 nectar. Hier is een als/anders blok gecombineerd met nog een als/anders blok om een als, anders/als, anders blok te maken. Maak de oplossing af om de onbekende hoeveelheid nectar te verzamelen.
      4-5 Bee Conditionals 7_instruction: 'Onthoud dat paarse bloemen 3, 2 of 1 nectar kunnen hebben. Maak de "controleer paarse bloem" functie af en gebruik hem om alle nectar bij de bloemen te verzamelen.'
      4-5 Bee Conditionals 8_instruction: 'Schrijf een functie binnen het blok genaamd "controleer bloem maak honing". Jouw functie moet controleren hoeveel nectar de paarse bloem heeft en dit verzamelen, vooruit bewegen en honing maken.'
      4-5 Bee Conditionals Assessment 1_instruction: 'Evaluatie: Deze code is onjuist. Maak de "haal nectar of maak honing" functie af en roep deze vervolgens aan om alle nectar en honing te verzamelen. Vergeet niet dat paarse bloemen 3, 2 of 1 nectar kunnen hebben.'
      4-5 Bee Debugging 1_instruction: Deze blokken storen me echt. Kun jij ze in orde maken?
      4-5 Bee Debugging 10_instruction: Vind de fouten en los ze op.
      4-5 Bee Debugging 11_instruction: Telt dit correct?
      4-5 Bee Debugging 2_instruction: Help de bij nectar te verzamelen en honing te maken.
      4-5 Bee Debugging 3_instruction: Vind de fouten en los ze op.
      4-5 Bee Debugging 4_instruction: Deze blokken werken niet. Wat is het patroon?
      4-5 Bee Debugging 5_instruction: Iets is hier niet in orde...
      4-5 Bee Debugging 6_instruction: De paarse bloem heeft een onbekende hoeveelheid nectar. Maak de blokken in orde om alle nectar uit de bloem te krijgen.
      4-5 Bee Debugging 7_instruction: Deze functie mist iets...
      4-5 Bee Debugging 8_instruction: Deze functie is in orde, maar hij wordt niet goed gebruikt.
      4-5 Bee Debugging 9_instruction: Waarom maakt de bij niet genoeg honing?
      4-5 Bee Debugging Assessment 1_instruction: 'Evaluatie: Repareer de code.'
      4-5 Bee Nested Loops 1_instruction: Gebruik een lus om alle nectar te verzamelen.
      4-5 Bee Nested Loops 2_instruction: 'Verzamel alle nectar van elke bloem. Gebruik een geneste lus. '
      4-5 Bee Nested Loops 3_instruction: Verzamel alle nectar door de gegeven code in een geneste lus te plaatsen.
      4-5 Bee Nested Loops 4_instruction: 'Verzamel alle nectar van elke bloem en maak honing bij elke honingraat. Gebruik een geneste lus. '
      4-5 Bee Nested Loops 5_instruction: Verzamel alle nectar door een geneste lus te maken.
      4-5 Bee Nested Loops 6_instruction: Verzamel alle nectar.
      4-5 Bee Nested Loops 7_instruction: Zet deze lus in een andere lus om een geneste lus te maken en verzamel alle nectar van de bloemen.
      4-5 Bee Nested Loops 8_instruction: 'Verzamel alle nectar van deze bloemen door een zolang lus te nesten. Vervang het binnenste herhaal keer blok door een zolang lus. '
      4-5 Bee Nested Loops 9_instruction: Verzamel alle nectar van deze bloemen door een zolang lus te nesten in een herhaling.
      4-5 Bee Nested Loops Assessment 1_instruction: 'Test - Verzamel alle nectar en maak alle honing door gebruik te maken van lussen.'
      4-5 Bee Nested Loops Rows_instruction: Verzamel nectar van de rijen bloemen! Gebruik een geneste lus.
      4-5 Maze 1 (copy 1)_instruction: Lieve persoon. Ik zombie. Moet... bij... zonnebloem komen.
      4-5 Maze 1_instruction: Lieve persoon. Ik zombie. Moet... bij... zonnebloem komen.
      4-5 Maze 10_instruction: Lukt het je om bij de zonnebloem te komen door maar vier blokken te gebruiken?
      4-5 Maze 11_instruction: Kun je met slechts zes blokken bij de zonnebloem komen?
      4-5 Maze 12_instruction: OK, is dit iets anders. Kunt jij het in slechts zes blokken doen?
      4-5 Maze 13_instruction: Breng me naar het varken!
      4-5 Maze 14_instruction: Breng me naar het varken! Gebruik het herhaal tot blok.
      4-5 Maze 2 (copy 1)_instruction: Breng de zombie naar de zonnebloem, maar vermijd de happer!
      4-5 Maze 2_instruction: Breng de zombie naar de zonnebloem, maar vermijd de happer!
      4-5 Maze 3 (copy 1)_instruction: Moet... bij... de zonnebloem... komen.
      4-5 Maze 3_instruction: Moet... bij... de zonnebloem... komen.
      4-5 Maze 4 (copy 1)_instruction: 'Probeer het "herhaal" blok om minder blokken te gebruiken...'
      4-5 Maze 4_instruction: 'Probeer het "herhaal" blok om minder blokken te gebruiken...'
      4-5 Maze 5 (copy 1)_instruction: Kun jij deze puzzel met het minste aantal blokken oplossen?
      4-5 Maze 5_instruction: Kun jij deze puzzel met het minste aantal blokken oplossen?
      4-5 Maze 6 (copy 1)_instruction: Kun jij deze puzzel met het minste aantal blokken oplossen?
      4-5 Maze 6_instruction: Kun jij deze puzzel met het minste aantal blokken oplossen?
      4-5 Maze 7_instruction: Lieve persoon. Ik zombie. Moet... bij... zonnebloem komen.
      4-5 Maze 8_instruction: 'Gebruik het "herhaal" blok om de zombie bij de zonnebloem te brengen. (Vermijd de happers!)'
      4-5 Maze 9_instruction: 'Maak een lus met het "herhaal tot" blok.'
      4-5 Maze Assessment 1_instruction: 'Test: Ga naar de zonnebloem.'
      4-5 Maze Conditionals 1_instruction: Gebruik het herhaal tot blok om de zombie bij de zonnebloem te brengen.
      4-5 Maze Conditionals 10_instruction: Kun je slechts 3 blokken toevoegen om me te helpen een ingewikkelder doolhof op te lossen? Als je het goed doet kan ik elk kronkelig pad lopen, ongeacht de lengte.
      4-5 Maze Conditionals 2_instruction: Gebruik het herhaal tot blok om de zombie bij de zonnebloem te brengen.
      4-5 Maze Conditionals 3_instruction: 'Gebruik het "als" blok om me te laten beslissen wanneer te draaien. Tip: je hebt nog slechts een blok nodig, maar leer hoe wij het instelden zodat je het de volgende keer zelf kunt.'
      4-5 Maze Conditionals 4_instruction: 'OK, dit is net als de vorige puzzel, maar je moet onthouden hoe je het "als" blok en het "herhaal" blok samen gebruikte.'
      4-5 Maze Conditionals 5_instruction: 'Ik wil zonnebloem! Gebruik een "als" blok om me daar te krijgen met het minste aantal blokken.'
      4-5 Maze Conditionals 6_instruction: 'Ik wil zonnebloem! Gebruik een "als" blok om me daar te krijgen met het minste aantal blokken.'
      4-5 Maze Conditionals 7_instruction: 'OK, laten we dat om te oefenen nog eens doen - dit is niet heel anders, maar kijk uit voor de happers!'
      4-5 Maze Conditionals 8_instruction: 'Het "als-anders" blok controleert een voorwaarde en doet dan het ene OF het andere. Probeer dit nieuwe blok te gebruiken om me bij de zonnebloem te brengen.'
      4-5 Maze Conditionals 9_instruction: 'Nog een oefening met het "als-anders" blok, kun je het in een keer goed doen?'
      4-5 Maze Conditionals Assessment 1_instruction: 'Gebruik een "herhaal tot" en een "als-anders" blok om me met zo min mogelijk blokken bij de zonnebloem te brengen.'
      4-5 Nested Loops 1_instruction: 'Maak de code af om deze driehoeken te tekenen. De eerst is al gedaan. Hint: de drie driehoeken draaien in totaal 360 graden.'
      4-5 Nested Loops 10_instruction: Teken de laatste rij met sterren op deze vlag door de voorbeeldblokken in een lus te zetten. De sterren zijn 50 pixel uit elkaar, maar denk eraan dat de sterren zelf 30 pixel breed zijn.
      4-5 Nested Loops 11_instruction: Kan je de 10 stenen van deze stoep tekenen met een geneste lus? Elke steen is 30 pixels.
      4-5 Nested Loops 12_instruction: Kan je deze 36 driehoeken tekenen met een geneste lus?
      4-5 Nested Loops 2_instruction: 'Nest deze lus in een andere lus om 10 driehoeken tekenen. Dit noemen we een geneste lus. Hint: Alle 10 driehoeken tezamen vormen een draai van 360 graden.  '
      4-5 Nested Loops 3_instruction: "Maak een zon door de begincode in een andere lus te nesten. Dit noemen we een geneste lus.\r\n"
      4-5 Nested Loops 5_instruction: Maak een windmolen met een lus rond de voorbeeldcode.
      4-5 Nested Loops 6_instruction: Kan je een zeskant tekenen met een lus rond de driehoek-code?
      4-5 Nested Loops 7_instruction: 'Lus 10 keer met deze tekening. Hoevaak moet je draaien in elke lus? (Hint: wat is 360 gedeeld door 10?)'
      4-5 Nested Loops 8_instruction: 'Lus 6 keer met deze tekening. Hoevaak moet je draaien in elke lus? (Hint: wat is 360 gedeeld door 6?)'
      4-5 Nested Loops 9_instruction: Teken de tanden in de mond van de krokodil!
      4-5 Nested Loops Assessment 1_instruction: Gebruik een geneste lus om de tekening af te maken.
      4-5 While Loops 1_instruction: 'Beweeg me naar het gat en vul het met twee scheppen vuil. Gebruik daarbij het "vul" blok.'
      4-5 While Loops 2_instruction: "Beweeg me naar de afvalberg en ruim die op met 5 scheppen. Gebruik daarbij het 'verwijder' blok."
      4-5 While Loops 3_instruction: 'Beweeg me naar de hoop en ruim die helemaal op. Ga dan naar het gat en vul die helemaal. Hint: gebruik zo min mogelijk blokken.'
      4-5 While Loops 4_instruction: 'Wow, ik heb een heel diep gat gevonden! Ik weet niet hoeveel scheppen vuil daarvoor nodig zijn. Kan je een programma schrijven dat het gat vult tot boven vult? Hint: probeer dit keer een zolang-lus.'
      4-5 While Loops 5_instruction: Wow, nu zijn er twee diepe gaten! Kan je programma schrijven dat ze allebei tot boven vult?
      4-5 While Loops 6_instruction: Wow, nu is er een hele hoop vuil! Kan je een programma schrijven dat alles verwijderd, zodat de grond gelijk is?
      4-5 While Loops 7_instruction: Wow, nu is er een drie hopen vuil! Kan je een programma schrijven dat ze alledrie verwijderd, zodat de grond gelijk is?
      4-5 While Loops 8_instruction: ' Er is er een heel diep gat en een hele grote hoop vuil. Hoeveel scheppen vuil heb je nodig om de grond gelijk te krijgen? Hint: gebruik voor allebei de zolang lus.'
      4-5 While Loops Assessment 1_instruction: Er zijn veel gaten en hopen. Help me met vullen en verwijderen om de grond gelijk te krijgen.
      AlgPD DR Free Play_instruction: Create a function based on your own word problem.
      App Lab test_instruction: test
      AppLab_test02_instruction: |
        One sentence summary of the activity. Click to
        view full instructions.
      Artist - Nested Loops 1_instruction: |
        Complete the code to draw these triangles.  The
        first one is done for you.  Hint:  3 triangles in a 360 degree rotation.
      Artist - Nested Loops 10_instruction: |
        Draw the last row of stars on this flag
        by looping the provided blocks. The stars are 50 pixels apart, but remember
        that the stars themselves are 30 pixels wide.
      Artist - Nested Loops 11_instruction: |
        Can you draw these 10 squares of this
        sidewalk using a nested loop? Each square is 30 pixels.
      Artist - Nested Loops 12_instruction: |
        Can you draw these 36 triangles using
        a nested loop?
      Artist - Nested Loops 2_instruction: |
        Now nest this loop inside another loop
        to draw 10 triangles.  This is called a nested loop.  Hint: All 10 triangles
        complete a 360 degree rotation.  
      Artist - Nested Loops 3_instruction: |
        Maak een zon door de gegeven code
        in een tweede lus te plaatsen. Dit heet een geneste lus.
        
      Artist - Nested Loops 5_instruction: Loop the given code to create a windmill.
      Artist - Nested Loops 6_instruction: |
        Can you draw a hexagon by looping the
        triangle code?
      Artist - Nested Loops 7_instruction: |
        Loop this design 10 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 10?)
      Artist - Nested Loops 8_instruction: |
        Loop this design 6 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 6?)
      Artist - Nested Loops 9_instruction: "Draw the teeth in the alligator's mouth!"
      Artist - Nested Loops Assessment 1_instruction: Gebruik een geneste lus om de tekening af te maken.
      Big Game Animation 1 (copy 1)_instruction: |
        Now that you've learned to write
        simple linear functions, let's work on using them to add some movement to
        our game. Click play to see what your game can currently do (not much!), update
        any variables you like, and then click finish to move on.
      Big Game Animation 1_instruction: |
        Now that you've learned to write simple
        linear functions, let's work on using them to add some movement to our game.
        Click run to see what your game can currently do (not much!), update any variables
        you like, and then click finish to move on.
      Big Game Animation 2 (copy 1)_instruction: |
        The function 'update-target'
        function takes the target's current x value, and returns an updated value.
        Complete the 'update-target' function so that it adds to the x value each
        time it is called. The more you add to x, the faster the target will go.
      Big Game Animation 2_instruction: |
        The update-target function takes the target's
        current x value, and returns an updated value. Complete the update-target
        function so that it adds to the x value each time it is called. The more you
        add to x, the faster the target will go.
      Big Game Animation 3_instruction: |
        The update-danger function should work just
        like update-target, except that the danger should move from the right side
        over towards the left. Complete update-danger to make the danger fly across
        the screen.
      Big Game Animation 4_instruction: |
        At this point in your game, your danger
        should run across the screen from right to left, and your target should run
        across from left to right. They don't ever come back on screen once they've
        left, but we'll take care of that later. Take a minute to make sure your
        game is working like you want it to, and then click Finish to move on.
      Big Game Booleans 1_instruction: |
        When you last worked on your game we got
        our target and danger sprites to fly across the screen, but they never come
        back. Click run to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Booleans 2_instruction: |
        Go to the Functions section of the toolbox
        and complete the safe-left? function so that it returns true if the sprite's
        x coordinate is greater than -50. If you're successful you should see the
        Danger go off the left side and then return on right side.
      Big Game Booleans 3_instruction: |
        Now that you've got safe-left?, let's fill
        in safe-right? - it should take in a sprite's x coordinate and return true
        if that coordinate is less than 450. Once your safe-right? is complete you
        should see the Target go off the right side of the screen and return on the
        left.
      Big Game Booleans 4_instruction: |
        Complete the onscreen? function so that it
        checks whether both safe-left? and safe-right? are true.
      Big Game Booleans 5_instruction: |
        At this point your danger should run across
        the screen from right to left, your target should run across from left to
        right, and they should both return to the opposite side, repeatedly. Take
        a minute to make sure your game is working like you want it to, and then click
        Finish to move on.
      Big Game Collision 1 (copy 1)_instruction: |
        When you last worked on your game
        we got our target and danger sprites to fly across the screen, but they never
        come back. Click run to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Collision 1_instruction: |
        At this point you've programmed a video
        game with a moving target and danger, both of which return to the screen once
        they've left, and a player that responds to keyboard input. Click run to
        see how your game is currently working, and then we'll dig into the final
        missing piece - collision detection!
      Big Game Collision 2_instruction: |
        To move the player up and down, we'll need
        to use a conditional block to figure out which key is pressed and respond
        accordingly. Computers read keypresses as numeric key codes - the up arrow
        is 38 and the down arrow is 40. You can lookup other key codes in your student
        workbook. Edit the 'update-player' function so that if moves the player
        up when the up arrow is pressed, or down when the down arrow is pressed.
      Big Game Collision 3_instruction: |
        Use the Distance Formula, so the distance
        function returns the distance between the player's center coordinates (px,
        py) and another sprite's center coordinates (cx, cy).
      Big Game Collision 4_instruction: |
        Complete the collide? function so that it
        returns true if the distance between two points is less than 100 pixels apart.
      Big Game Complete_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Final_instruction: |
        You made it! At this point your game should be
        fully functioning, take some time to enjoy your new game and make any final
        tweaks to it. When you're happy with the final product, click Finish and
        you'll have an opportunity to share a link to your game. Good work!
      Big Game Player 1_instruction: |
        We're getting really close to a finished game!
        Last time you worked on your game, you used booleans to make your Target and
        Danger return to the screen once they've left. Click Run to see how your
        game looks right now, and then we'll get to making your Player move up and
        down.
      Big Game Player 2_instruction: |
        Edit the update-player function so the player
        moves up when the up arrow (keycode 38) is pressed, and moves down (keycode
        40) when the down arrow is pressed.
      Big Game Testing_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Vars 1 (copy 1)_instruction: |
        Let's get started on your Big Game!
        Here you'll see a whole bunch of placeholder code that you'll eventually
        replace with your own, but for now we're only going to worry about defining
        variables. Click "Run" to see what the game looks like with the default
        values.
      Big Game Vars 1_instruction: |
        Let's get started on your Big Game! Here you'll
        see a whole bunch of placeholder code that you'll eventually replace with
        your own, but for now we're only going to worry about defining variables.
        Click "Run" to see what the game looks like with the default values.
      Big Game Vars 2 (copy 1)_instruction: |
        The first step to making this game your
        own is to give it a good Title. Click edit on the 'title' and 'subtitle'
        variables and change them to something new.
      Big Game Vars 2_instruction: |
        The first step to making this game your own is
        to give it a good Title. Click edit on the title and subtitle variables and
        change them to something new.
      Big Game Vars 3 (copy 1)_instruction: |
        Now let's set the background for your
        new game. Edit the 'bg' variable and select a new background Image from
        the dropdown.
      Big Game Vars 3_instruction: |
        Now let's set the background for your new game.
        Edit the bg variable and select a new background Image from the dropdown.
      Big Game Vars 4 (copy 1)_instruction: |
        Awesome, now you can update the variables
        for your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click 'finish'
        when you're done.
      Big Game Vars 4_instruction: |
        Awesome! Now you can update the variables for
        your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click "Finish"
        when you're done.
      Building a Foundation Assessment_instruction: |
        Build a three level pyramid,
        there are no other directions, so just play with the pieces until you get
        it!
      C3-Farmer While Loops 1_instruction: |
        Move me to the hole and fill it with
        two shovelfuls of dirt, using the "fill" block.
      C3-Farmer While Loops 2_instruction: |
        Move me to the pile of dirt and remove
        it with 5 shovel scoops, using the 'remove' block.
      C3-Farmer While Loops 3_instruction: |
        Move me to the pile and remove all of
        it, then move to the hole and fill it completely.  Hint:  Use as few blocks
        as possible.
      C3-Farmer While Loops 4_instruction: |
        Wow, I found a really deep hole! I don't
        know how many shovelfuls of dirt it needs.  Can you write a program that fills
        it until the ground is even?  Hint:  Try using the while loop this time.
      C3-Farmer While Loops 5_instruction: |
        Wow, now there are two deep holes! Can
        you write a program that fills them both until the ground is even?
      C3-Farmer While Loops 6_instruction: |
        Wow, now there is a large pile of dirt!
        Can you write a program that removes all of it so the ground is even?
      C3-Farmer While Loops 7_instruction: |
        Wow, now there are three piles of dirt!
        Can you write a program that removes each of them until the ground is even?
      C3-Farmer While Loops 8_instruction: |2
         There is a really deep hole and a really
        large pile of dirt.  How many shovelfuls of dirt need to be moved around to
        make the ground flat?  Hint: Use the while loop for both.
      C3-Farmer While Loops Assessment 1_instruction: |
        There are a lot of holes and
        piles.  Help me to fill and remove them to make the ground flat.
      Calc Circles of Eval .1_instruction: |
        You’ll be writing a kind of code called
        Evaluation Blocks, because each block of code evaluates to a single value.
        Change the ??? in this code so that the block evaluates to 5.
      Calc Circles of Eval .2_instruction: |
        This Evaluation Block is a multiplication
        function which takes two numbers and returns the product of those numbers.
        Edit this block so that it multiplies 2 * 5
      Calc Circles of Eval .3_instruction: |
        Here's a function for Addition which
        takes two numbers and returns their sum. Use this Addition block to add 3
        + 6.
      Calc Circles of Eval .4_instruction: |
        Here we've nested an Addition Block
        inside a Multiplication Block. Complete this code so it multiplies 3 by (4
        + 1)
      Calc Circles of Eval 1 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 1_instruction: |
        Every mathematical operator (+, -, *,
        /, and so on) can be represented by an Evaluation Block in code. Change the
        Evaluation Block to match the expression.
      Calc Circles of Eval 2 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 2_instruction: |
        Use a multiplication block to complete
        this code.
      Calc Circles of Eval 3_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 4_instruction: |
        This code is missing a couple of Evaluation
        Blocks - make sure you put everything in the right order.
      Calc Circles of Eval 5_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 6_instruction: |
        Complete the Evaluation Blocks to match
        this expression.
      Calc Circles of Eval 7_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 8_instruction: |
        Complete the Evaluation Blocks to match
        this expression.
      Calc Circles of Eval 9_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval Free Play_instruction: |
        Free Play: Try using the Evaluation
        Blocks to write some equations of your own. How does nesting the blocks in
        different ways impact their evaluation?
      Calc Define Funcs 1 (copy 1)_instruction: |
        Let's look at some more algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 1_instruction: |
        Let's look at some more traditional algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 2_instruction: |
        Write a function f that takes a parameter
        x and returns x - 10. Test your function using f(15).
      Calc Define Funcs 3_instruction: |
        We don't have to call our function 'f'
        every time; create a function called 'times-ten' that should take a parameter
        'x' and return x * 10. Once you've created the function, run times-ten(50).
      Calc Define Funcs 4_instruction: |
        Write a function called half that takes a
        number x and returns half that number. Once you've written the function,
        use it to calculate half(21)
      Calc Define Funcs 5 - multiply 1_instruction: |
        Oh no! We lost our multiply
        block! We'll have to create a function to multiply for us. To start off,
        write a function "f" that takes a parameter "x" and returns x*5. Test
        your function using f(3).
      Calc Design Recipe 1_instruction: |
        Let's use the Design Recipe to create a
        function called cube - this function should take in a number return that number
        to the power of 3. Make sure to write two example cases! When you're done,
        use your new function to calculate 7 cubed.
      Calc Design Recipe 2_instruction: "Your school is holding a bake sale, and\nyou need to track the cost of making each cookie, the money paid, and the\ntotal profit. Cookies cost $0.25 each to make, and sell for $1.50/cookie.\r\nWrite\nthe function cost, which takes in the number of cookies you intend to sell,\nand returns the cost of making those cookies."
      Calc Design Recipe 3_instruction: |
        Write the function sales which takes in
        the number of cookies sold, and produces the amount of money customers spent
        to buy those cookies (each cookie is sold at $1.50).
      Calc Design Recipe 4_instruction: |
        Using the two functions we just wrote, write
        the function profit, which takes in the number of cookies you sold, and gives
        you back the total profit you make from selling your cookies, accounting for
        the cost of baking them.
      Calc Free Play_instruction: |
        Free Play: Write functions and algorithms of your
        own design!
      Calc Rocket 1 (copy 1)_instruction: "In the last puzzle you wrote a contract\nfor the function \"rocket-height\" that states it has a range of Number, domain\nof Number, and should return the height of the rocket traveling at 15 m/s\nafter a given number of seconds. Let's write an example case now for the\nheight of the rocket at 3 seconds.\r\n\r\n\r\n\r\n  \r\n\r\n"
      Calc Rocket 1_instruction: "In the last puzzle you wrote a contract for the\nfunction rocket-height that states it has a range of Number, domain of Number,\nand should return the height of the rocket traveling at 15 m/s after a given\nnumber of seconds. Let's write an example case now for the height of the\nrocket at 3 seconds.\r\n\r\n\r\n\r\n\r\n  \r\n\r\n"
      Calc Rocket 2_instruction: |
        Great, let's do one more example before writing
        the function - what should the rocket height be after 30 seconds?
      Calc Vars 1.1_instruction: |
        Here we've set the age variable to 17 years. Can
        you write an expression that calculates age in days?
      Calc Vars 1_instruction: |
        Variables allow us to name values so that we can
        easily refer to them repeatedly throughout our programs. Here's a variable
        called age. Set its value to your age and click run.
      Calc Vars 2 (copy 1)_instruction: |
        Here we've set the "age" variable to
        17 - can you write an expression that calculates "age" in months?
      Calc Vars 2.1_instruction: |
        Here's a new variable called age-in-months - use
        the variable age to set age-in-months.
      Calc Vars 2_instruction: |
        Can you write an expression that calculates age in
        months?
      Calc Vars 3 (copy 1)_instruction: |
        Can you add to this code so that it calculates
        how many hours there are in "age" years?
      Calc Vars 3_instruction: |
        Can you add to this code so that it uses the "age"
        variable to calculate age in hours?
      Calc Vars 4_instruction: |
        We can also set variables by using other variables.
        Let's say you have a brother who is two years younger than you - can you
        set a new variable "brother-age" using your "age" variable?
      Code Studio Puzzle Challenge 1 - Artist_instruction: |
        Draw the line. It is
        200 pixels long. 
      Code Studio Puzzle Challenge 1 Artist1_instruction: |
        Draw the line. It is 200
        pixels long. 
      Code Studio Puzzle Challenge 10 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get all of the nectar.
      Code Studio Puzzle Challenge 10 - Bee_instruction: |
        Move the Bee to the flower
        and get all of the nectar.
      Code Studio Puzzle Challenge 10b - Bee_instruction: |
        Move the Bee to the flowers
        and get all of the nectar at each.
      Code Studio Puzzle Challenge 11 - Artist_instruction: |
        Draw this line by using
        the variable "length". Each line segment is 75 pixels long.
      Code Studio Puzzle Challenge 11b - Artist_instruction: |
        Draw a square by using
        the variable length provided.
      Code Studio Puzzle Challenge 12 - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 12a - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 13 - Artist_instruction: |
        This is just like a
        "for" loop. Complete the code to draw six lines that grow from 50, 60, 70,
        80, 90, to 100 pixels long. 
      Code Studio Puzzle Challenge 14 - Artist_instruction: |
        This is just like a
        "for" loop. Complete the loop to draw 4 squares that grow from 80, 100,
        120, to 140 pixels. 
      Code Studio Puzzle Challenge 2 - Artist_instruction: |
        Now add a turn and another
        line. The lines are 200 pixels long.
      Code Studio Puzzle Challenge 3 - Artist_instruction: |
        Draw the square. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 4 - Artist_instruction: |
        Draw the octagon. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 5 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get the nectar.
      Code Studio Puzzle Challenge 5 - Bee_instruction: |
        Flowers contain a specific
        amount of nectar. Move the Bee to the flower and collect nectar with the get
        nectar block.
      Code Studio Puzzle Challenge 6 - Bee_instruction: |
        Honeycombs can hold a specific
        amount of honey. Get the nectar from the flower and make some honey.
      Code Studio Puzzle Challenge 7 - Bee_instruction: |
        Move the Bee to the flower
        and get the nectar.
      Code Studio Puzzle Challenge 8 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge 9 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge Artist Screencast (copy 1)_instruction: |
        Draw
        the line. Each segment is 100 pixels long. 
      Code Studio Puzzle Challenge Artist Screencast 2_instruction: |
        Complete the
        code to draw the line. Each segment is 100 pixels long. 
      Code Studio Puzzle Challenge Artist Screencast_instruction: |
        Draw the line.
        Each segment is 100 pixels long. 
      Code Studio Puzzle Challenge Bee Screencast_instruction: |
        Move the Bee to the
        flowers and get all of the nectar.
      Code Studio Puzzle Challenge Square - Artist_instruction: |
        Draw a square by
        using the variable length provided.
      Code Studio Puzzle Challenge Var - Artist_instruction: |
        Draw a line by using
        a variable "length" set to 180.
      Course 2 Bee Loops 1_instruction: |
        Hi, I'm a bee. Can you help me collect
        the nectar from these flowers? 
      Course 2 Bee Loops 13_instruction: |
        Assessment: Use the repeat block to collect
        all of the nectar.
      Course 2 Bee Loops 2_instruction: |
        Can you do the same task more easily with
        a loop?
      Course 2 Bee Loops 3_instruction: |
        Now use the new repeat block to collect
        all of the nectar and make all of the honey.
      Course 2 Bee Loops 3__instruction: |
        Can you use a loop to collect all that
        nectar?
      Course 2 Bee Loops 4_instruction: |
        What happens if you loop this sequence 3
        times? Don't forget to make the honey at the end!
      Course 2 Maze Loops 1_instruction: Kun je bij het varken brengen met 5 blokken?
      Course 4 2_instruction: De bij wil nu alleen nectar. Denk eraan, niet alles is een bloem. Je kan de nectar alleen verzamelen bij bloemen.
      Course 4 Artist 1_instruction: 'Help me mijn vierkant te tekenen. (Elke lijn is 200 pixels lang) '
      Course 4 Artist 10_instruction: 'Vrije speelruimte! Veel plezier, je kan tekenen wat je wilt. '
      Course 4 Artist 11_instruction: 'Klaar voor een uitdaging? Hier is een programma die alleen blokken gebruikt die je al hebt gehad. Kun je het programma zonder extra informatie opnieuw opnieuw maken? Tip: voel je vrij om het te doen met testen en problemen oplossen. Het gaat vast niet in een keer goed.'
      Course 4 Artist 12_instruction: "Vrij spel inspiratie: Je hebt nu alles geleerd wat je nodig hebt om een patroon als deze te maken! Als deze afbeelding je inspireert, probeer om net zo iets te maken. Maak anders iets helemaal alleen.\r\n\n\r\nWil je weten hoe ons patroon is gemaakt? Klik dan rechts op de blauwe tab en klik dan op de \"Bekijk de oplossing\"-knop."
      Course 4 Artist 13_instruction: Nog aan het spelen? Hier is een leeg canvas on te ontwerpen wat je maar wilt!
      Course 4 Artist 2_instruction: Kan je met een lus rond deze code het grijze vierkant tekenen?
      Course 4 Artist 20_instruction: Nog aan het spelen? Hier is een leeg canvas waar je kan maken wat je wilt!
      Course 4 Artist 3_instruction: 'Ok. probeer te bedenken wat er gebeurd als je deze code uitvoert (of druk op "Uitvoeren" om het te proberen). Herhaal het daarna voldoende keren om de tekening helemaal af te maken.'
      Course 4 Artist 4_instruction: Hoeveel graden heeft een cirkel? Vul dat getal in bij het herhaal blok om de cirkel van kleuren te maken.
      Course 4 Artist 5_instruction: Teken de andere helft van deze tekening zodat het symmetrisch is. De driehoeken zijn gelijkzijdig en zijn 50 pixels lang.
      Course 4 Artist 6_instruction: 'Maak de code af om deze driehoeken te tekenen. Hint: de drie driehoeken draaien in totaal 360 graden.'
      Course 4 Artist 7_instruction: 'Nest nu deze lus in een andere lus om 10 driehoeken te tekenen. Dit noemen we een geneste loop. Hint: De 10 driehoeken bijelkaar vormen een draai van 360 graden.  '
      Course 4 Artist 8_instruction: Teken deze zon met een door 12 keer door het hele code blok te lussen.
      Course 4 Artist 8a_instruction: "Remember this shape?  Now we're going to\nlet you build it without giving you any blocks to start!\r\nHint: There are\n3 triangles within the 360 degree rotation...how many times does 3 go into\n360?"
      Course 4 Artist 9_instruction: 'Lus deze tekening 10 keer en draai na het tekenen van elke vorm. Als je wilt berekenen hoeveel je moet draaien: Wat is 360 gedeeld door 10?'
      Course 4 Artist Binary 1_instruction: Hier is een functie die een binaire reeks van enen en nullen gebruikt. Deze vertelt de artiest om van links naar recht en van boven naar beneden te gaan, en zo alle vierkanten te vullen als het een 1 ziet en niets te doen als het een 0 ziet. Voer deze code uit om te zien hoe de artiest binair een patroon kan tekenen.
      Course 4 Artist Binary 2_instruction: Welke binaire reeks heb je nodig om het plaatje te tekenen door 8 keer te lussen?
      Course 4 Artist Binary 3_instruction: Kan jij dit patroon tekenen met een lus van een drie-cijferige binaire tekenreeks?
      Course 4 Artist Binary 4_instruction: Elke binaire tekenreeks is een rij van dit plaatje. Kan je ze herschikken het een glimlach tekent in plaats van de frons?
      Course 4 Artist Binary 5_instruction: Welke 6 cijferige binaire reeks, 11 keer herhaald, tekent dit plaatje?
      Course 4 Artist Binary 6_instruction: Wat is de korste binaire reeks die je kan gebruiken om dit plaatje te tekenen?
      Course 4 Artist Binary 7_instruction: Maak de tekening af.
      Course 4 Artist Binary Free Play 2_instruction: 'Vrije speelruimte: Je kan op dit canvas in een hogere resolutie tekenen: 16 bits bij 16 bits!'
      Course 4 Artist Binary Free Play_instruction: 'Vrije speelruimte: Teken wat je wilt met binaire getallen!'
      Course 4 Artist For  Functions 10_instruction: 'En nu een stapje verder, kan je de stervorm maken met de "teken een vierkant" functie? Succes!'
      Course 4 Artist For  Functions 11_instruction: 'En nu een stapje verder, kan je de stervorm maken met de "teken een vierkant" functie? Succes!'
      Course 4 Artist For Loops 1_instruction: 'Teken deze driehoek van 50 pixels groot. Hint: gebruik een herhaal blok.'
      Course 4 Artist For Loops 10_instruction: Vrije speelruimte! Veel plezier, je kan tekenen wat je wilt met de blokken die je hebt geleerd te gebruiken
      Course 4 Artist For Loops 11_instruction: 'Weet je nog dat we een variabele gebruikte om de aantal zijden in een figuur te bepalen? Dit patroon begint met een driehoek en voegt daarbij één zijde per keer totdat het een tienhoek (10 zijden) vormt. Elke zijde moet 100 pixels lang zijn. Tip:  360 gedeeld door het aantal zijden dat een figuur heeft, is het aantal graden dat je zal willen draaien.'
      Course 4 Artist For Loops 11a_instruction: |
        Laten we het samen voegen! Met behulp van je kennis over "for loops" en de "counter" maken we deze tekening waar elke vorm twee zijden meer heeft dan de laatste. Zorg ervoor dat elke zijde 10 keer zo lang is als het aantal zijdes in de veelhoek.  /r/r 
        
        Een klein beetje van de code is voorbereid voor jou.
      Course 4 Artist For Loops 12_instruction: 'Dat zag er vet uit, maar nu wil ik een figuur tekenen naast de laatste. Deze keer is elke zijde 20 pixels. Gebruik een spring blok om 40 pixels vooruit te springen na elke figuur. '
      Course 4 Artist For Loops 13_instruction: Hmmm, de figuren worden iedere keer groter! Hebben we dit probleem niet eerder al opgelost met variabelen? Hoe kunnen we de teller gebruiken van de variabelen om de zijden kleiner te maken omdat daar meer van zijn? In plaats van vooruit te gaan met een vaste hoeveelheid, gaan we (100/teller) pixels vooruit.
      Course 4 Artist For Loops 14_instruction: Als je iets meer of minder draait dan je normaal zou doen voor een figuur, geeft dat een nette effect. Probeer eens 89 graden te draaien om deze gedraaide vierkante spiraal te vormen.
      Course 4 Artist For Loops 15_instruction: 'Vrij Spel: Probeer eens wat tekeningen van jezelf te maken met For Loops. We hebben een paar algemene variabelen toegevoegd om te gebruiken.'
      Course 4 Artist For Loops 2_instruction: |-
        Ik heb de code voor het tekenen van een driehoek in een 'for'-lus (tellergestuurde lus) opgenomen die van 50 tot 100 telt in stappen van 10. Bekijk hoe ik de code heb gebouwd en klik vervolgens op "Uitvoeren" wanneer je klaar bent om het in actie te zien. 
      Course 4 Artist For Loops 3_instruction: De kleinste driehoek heeft zijden van 20 pixels lang, de grootste zijden van 200 pixels, en elke driehoek is 20 pixels groter dan de vorige. Update de for loop om deze driehoeken te tekenen.
      Course 4 Artist For Loops 4_instruction: |
        Gebruik een 'for loop' om deze vierkanten te tekenen. 
        Ze starten met een lengte van 50 pixels, de grootste is 300 pixels lang, en elk vierkant is 25 pixels groter dan de vorige. Ik heb je bijna alle code gegeven die je nodig hebt - er ontbreekt nog maar een blok, welke is dat?
      Course 4 Artist For Loops 5_instruction: "Mooi werk bij die laatste puzzle! Nu gaan we die  variabele blok 'counter' nogmaals gebruiken om deze coole afbeelding te tekenen. "
      Course 4 Artist For Loops 6_instruction: "Vrij spelen! Probeer met behulp van een 'for loop' een zelf bedacht patroon te tekenen dat steeds groter wordt."
      Course 4 Artist For Loops 7_instruction: 'Wat gebeurt er als je "Repeat 3" uit dit algoritme haalt, en de "move" en "turn" blokken in de loop laat staan? In deze spiraalvormende driehoek is elke zijde 20 pixels langer dan de vorige.'
      Course 4 Artist For Loops 8_instruction: De kortste lijn in deze spiraal van vierkanten is 10, de langste is 200, en elke lijn is 10 pixels korter dan de vorige. Kun jij deze te gekke afbeelding afmaken door de ontbrekende blokken plaatsen?
      Course 4 Artist For Loops 9_instruction: Kun je een spiraal maken? Ga vooruit van 1 tot 75 pixels, elke loop komt er 1 pixel bij.
      Course 4 Artist For Loops inspire_instruction: "Vrije opdracht inspiratie: Je hebt nu alles geleerd wat je nodig hebt om zo'n patroon te maken! Als deze afbeelding je inspireert, probeer dan iets soortgelijks te maken. Of maak iets helemaal zelf. \r \r Wil je weten hoe ons inspiratie patroon werd gemaakt? Bezoek https://studio.code.org/c/106387604 voor de oplossing."
      Course 4 Artist Functions 1_instruction: Kun je met behulp van een loop een vierkant tekenen dat 100 pixels lang is?
      Course 4 Artist Functions 10_instruction: Welke blok moet je nog toevoegen om de driehoek bovenop het vierkant te krijgen?
      Course 4 Artist Functions 11_instruction: 'Deze code tekent een kubus - plaats hem in een functie en noem die "Draw a Cube".'
      Course 4 Artist Functions 12_instruction: Herhaal de square functie met behulp van een loop om een lijn te tekenen
      Course 4 Artist Functions 13_instruction: 'Kijk aan, we hebben een nieuwe functie genaamd "draw a line of squares". Bekijk de functie maar eens van binnen om te ontdekken hoe we hem gebouwd hebben. Klik op "Run" als je klaar bent voor de volgende puzzle.'
      Course 4 Artist Functions 14_instruction: 'Je doet het geweldig! Laten we onze nieuwe "Teken een lijn van vierkanten" functie gebruiken om een Rechthoekige vorm te tekenen. Vergeet niet dat elk vierkant 40 pixels lang is.'
      Course 4 Artist Functions 15_instruction: 'Laten we de uitdaging iets groter maken, kun je een ster vorm tekenen door de functie "teken een lijn van vierkanten" te gebruiken? Succes! Tip: je moet wellicht 144 graden draaien'
      Course 4 Artist Functions 2_instruction: 'Kun je 3 vierkanten tekenen die 20 pixels van elkaar vandaan staan? Hint: elk vierkant is 100 pixels groot'
      Course 4 Artist Functions 3_instruction: "Kun je deze afbeelding tekenen door de \"draw a square\" functie te gebruiken? Hint: tussen elk vierkant zit 120 pixels.\r\n"
      Course 4 Artist Functions 4_instruction: |
        Ben je er klaar voor om je eigen "functieblok" te maken?
        Klik op de functiesblok in de gereedschapskist, noem het "teken een driehoek".
        Maak dan een driehoek zoals je al eerder gedaan hebt, met actieblokken en lusblokken.
        Klik dan op OPSLAAN en SLUITEN in de rechterbovenhoek. 
        tip: Maak een driehoek met een lengte van 100 pixels.Veel succes!
      Course 4 Artist Functions 5 OLD_instruction: |
        Laten we proberen om je eigen functies te gebruiken.
        Teken een huis - Wat moet er verbeterd worden in de code om je huis goed te tekenen?
      Course 4 Artist Functions 5_instruction: "Kun je deze afbeelding tekenen door de \"draw a square\" functie te gebruiken? Hint: tussen elk vierkant zit 120 pixels.\r\n"
      Course 4 Artist Functions 6_instruction: Welke blok moet je nog toevoegen om de driehoek bovenop het vierkant te krijgen?
      Course 4 Artist Functions 7_instruction: Kun je een lijn van vierkanten tekenen door gebruik te maken van de Vierkant functie? Elk vierkant is 40 pixels lang.
      Course 4 Artist Functions 8_instruction: |
        Begin je de functieblokken al een beetje te begrijpen?
        Laten we de vierkant wijzigen, zodat hij 200 pixels wordt.
        Tip: Klik op "wijzigen" om de lengte van "teken een driehoek" te wijzigen in de functie-editor.
        Vergeet niet op "OPSLAAN EN SLUITEN" te klikken, om uit de functie-editor te komen. 
      Course 4 Artist Functions 9_instruction: |
        We hebben je de code gegeven voor een functie.
        Helaas mist er iets....
        Kun jij de functieblok afmaken?
      Course 4 Artist Inspire_instruction: "Vrij spel inspiratie: Je hebt nu alles geleerd wat je nodig hebt om een patroon als deze te maken! Als deze afbeelding je inspireert, probeer om net zo iets te maken. Maak anders iets helemaal alleen.\r\n\n\r\nWil je weten hoe ons patroon is gemaakt? Klik dan rechts op de blauwe tab en klik dan op de \"Bekijk de oplossing\"-knop."
      Course 4 Artist Params 1_instruction: |
        Laten we een vierkant tekenen
        die 50 pixels breed is
      Course 4 Artist Params 10_instruction: |
        In een functie kun je andere functies aanroepen!
        Gebruik je "vorm" functie als basis, maak 3 huizen. Ek volgende huis moet 20 pixels groter zijn.
        Het eerste huis moet 50 pixels zijn.
        Tip: een for-lus kan handig zijn. 
      Course 4 Artist Params 11_instruction: |
        How about a function called "pinwheel"
        that takes three parameters - "sides," "length" and "repeat." You can
        calculate how much to turn after each shape using the same math you used to
        figure out the turns for a shape of "sides". Can you recreate this picture?
        Here's a tip each shape is 100 pixel's in length.
      Course 4 Artist Params 12_instruction: 'Gebruik je "pinwheel" functie om elke van deze vormen te tekenen. De lengte van de zijde voor elke afbeelding is 50.'
      Course 4 Artist Params 13_instruction: |
        Freeplay: Hier zijn de functies die je geschreven hebt en nog wat extra functies. 
        Maak iets cools!
      Course 4 Artist Params 2_instruction: |
        That triangle function would be a whole
        lot more useful if it could draw triangles of different sizes. I've added
        a parameter for line length, but it doesn't do anything yet. Can you update
        the function so it uses the "length" parameter when it draws each side?
        The triangle sizes are 150 pixels, 75 pixels and 25 pixels.
      Course 4 Artist Params 3_instruction: |
        Geweldig, kun je al deze driehoeken maken met je functie? 
        De eerste is 25 pixels, de tweede is 50 en de laatste is 75. 
      Course 4 Artist Params 4_instruction: |
        Kun je een nieuwe functie 'vierkant' genoemd toevoegen?
        Het heeft ook een lengteparameter nodig, net zoals de driehoek. Teken deze keer 3 vierkanten 25, 50 en 75 pixels in lengte, 100 pixels uit elkaar.
      Course 4 Artist Params 5_instruction: |
        Gebruik beide nieuwe functies om dit beeld te schetsen. Om dit te vergemakkelijken gebruikt u een lus met een 'teller' parameter.
        
      Course 4 Artist Params 6_instruction: |
        Laat ons deze functie 'een vorm tekenen' bewerken. 
        Het heeft al een 'lengte' parameter. Laat ons nu de functie bewerken door ook een 'zijde' parameter toe te voegen. Vergeet niet dat de te draaien hoek voor een bepaalde vorm 360 gedeeld door de zijde is. Tip: de lengtes voor elke vorm zijn voor de driehoek 100 pixels, de zeshoek 25 pixels en het vierkant 5 pixels. 
      Course 4 Artist Params 7_instruction: 'Kunt u deze vormen tekenen door de "???" in te vullen? Het vierkant en de driehoek zijn 100 pixels in grootte terwijl de zeshoek 75 pixels in grootte is. '
      Course 4 Artist Params 8_instruction: |
        Kunt u erachter komen hoe deze vorm te tekenen? Hier is een tip: maak een nieuwe functie met 6 zijden, een zeshoek genoemd.
        
      Course 4 Artist Params 9_instruction: 'Weet je nog toen we de tellerlus gebruikten maar een lus erin verwijderden? Laten we eens wat leuks doen en de functie "teken een vorm"  gebruiken met "zijden" en "lengte" parameters. Kunt u deze vormen opnieuw maken? De vierkant teller dient 5/100/5 te zijn, de driehoek teller dient 10/100/10 te zijn en de zeshoek is 2/100/2.'
      Course 4 Artist Var 9_instruction: 'Hier is het algoritme om een driehoek te tekenen, wijzig het zo dat het in plaats daarvan de variabele"zijden" gebruikt. Vervangen het nummer 3 door de variabele "zijden". Tip: Vergeet niet om het blok "zijden instellen" te gebruiken.'
      Course 4 Artist Vars 1_instruction: Kunt u me helpen een driehoek te tekenen? Het is 100 pixels lang aan elke kant.
      Course 4 Artist Vars 10_instruction: 'Dit is een algoritme dat een driehoek tekent door kleinere driehoeken te tekenen. Kun jij het zo aanpassen dat het de variabelen "zijden" gebruikt om elke driehoek te tekenen? Neem de code door, en iedere keer dat je het nummer 3 ziet, vervang je het door je variabelen "zijden". Denk eraan om het "instellen zijden" blok gebruikt.'
      Course 4 Artist Vars 11_instruction: 'Hier is hetzelfde algoritme wat we gebruikten voor de laatste puzzel - hoe moet je de variabele "zijden" instellen om dit beeld van vierkanten te tekenen?'
      Course 4 Artist Vars 12_instruction: 'Laten we de variabele "zijden" instellen op 5. Hoe meer zijden we toevoegen aan dit algoritme, hoe groter het totale patroon wordt! Laten we een nieuwe variabele met de naam "lengte" toevoegen en deze gebruiken wanneer je een "beweeg vooruit" hebt. Zet de variabele "lengte" op 75 voor deze vorm.'
      Course 4 Artist Vars 13_instruction: |
        Hoe meer zijden een vorm heeft, hoe korter iedere zijde moet worden om het hele patroon op het scherm te laten passen.
        Laten we in plaats van de variabele "lengte" met de hand in te stellen, de variabele "zijden" gebruiken, en een rekenblok om "lengte" in te stellen. Kies de juiste vergelijking uit de gereedschapskist om de variabele "lengte" in te stellen, en ook om de variabele "zijden" bij te werken.
      Course 4 Artist Vars 14_instruction: 'Vrij Spel: Probeer het eens nu je algoritme met nog een lus genest is. Experimenteer met het veranderen van de waarden van je twee variabelen om coole patronen te tekenen.'
      Course 4 Artist Vars 2_instruction: 'In plaats van "beweeg vooruit met 100", verwijst het "beweeg"-blok nu naar de variabele "lengte". Kun je "lengte" instellen op 150 om deze nieuwe driehoek te tekenen?'
      Course 4 Artist Vars 3_instruction: 'Dit is een lus die een vierkant tekent, maar er ontbreekt iets. Kun jij het oplossen zodat het de variabele "lengte" gebruikt om uit te vinden hoe lang elke zijde moet zijn? '
      Course 4 Artist Vars 4_instruction: 'Nu wil ik een rechthoek maken die twee keer zo hoog is als de breedte. We hebben een variabele met de naam "breedte" die op 100 ingesteld is. Kun je de rekenblokken gebruiken om de code compleet te maken?'
      Course 4 Artist Vars 5_instruction: 'Gebruik de variabele "zijden" om het aantal keren dat deze lus uitgevoerd wordt te regelen.'
      Course 4 Artist Vars 6_instruction: 'Hmmm, ik heb geprobeerd de "zijkanten" variabele aan te passen naar 4 in de code van de laatste puzzel, maar dit tekent nog steeds een driehoek. Kun je de "zijkanten" variabele (samen met een wiskunde blok) gebruiken om ervoor te zorgen dat ik ook de juiste hoeveelheid draai? Tip: 360 gedeeld door het aantal zijkanten geeft je het aantal graden dat je moet draaien.'
      Course 4 Artist Vars 7_instruction: 'Kun je de variable "zijden" aanpassen om mij te helpen deze zeshoek te tekenen?'
      Course 4 Artist Vars 8_instruction: |
        Vrij Spel: Experimenteer met het aantal zijden die deze vorm heeft. Kun je het algoritme aanpassen zodat de totale grootte van de vorm hetzelfde blijft, ongeacht het aantal zijden die hij heeft?
        Hint: Je moet deze keer misschien je rekenblokken (360 gedeeld door "zijden") op twee plaatsen gebruiken. 
      Course 4 Artist Vars 9_instruction: 'Pas je algoritme zo aan dat het de variabele "zijden" gebruikt in plaats van een vaste waarde om een driehoek te tekenen. Vervang de waarde 3 met de variabele "zijden", en gebruik het blok "zet zijden op".'
      Course 4 Bee 1_instruction: De bij kan niet zeggen of dit een bloem is of een honingraat. Controleer eerst of het een bloem of een honingraat is, en verzamel daarna pas nectar als het een bloem is.
      Course 4 Bee 2_instruction: Controleer ieder object om te zien of het een bloem is. Als dat zo is, verzamel dan nectar ... anders kun je het negeren!
      Course 4 Bee 3_instruction: Het onbekende object is een bloem of een honingraat. Gebruik het blok als/anders om nectar te verzamelen als het een bloem is, anders maak je honing (omdat het dan een honingraat moet zijn).
      Course 4 Bee 4_instruction: Deze paarse bloem kan 3, 2 of 1 nectar hebben. Dit is een als-anders-blok dat gecombineerd is met nog een als-anders-blok om een als, anders-als, anders-blok te maken. Vul de oplossing aan om de onbekende hoeveelheid nectar te verzamelen.
      Course 4 Bee 5_instruction: Deze paarse bloem mag 3, 2 of 1 nectar hebben. Voeg een als-anders blok toe om een als, anders-als, anders blok te maken. Vul de oplossing aan om de onbekende hoeveelheid nectar te verzamelen.
      Course 4 Bee 6_instruction: Deze paarse bloem mag 3, 2 of 1 nectar hebben. Maak een als, anders-als, anders blok om de onbekende hoeveelheid nectar te verzamelen.
      Course 4 Bee 7_instruction: Gebruik alles wat je tot nu toe hebt geleerd alle nectar te verzamelen. De paarse bloem mag 3, 2 of 1 nectar hebben.
      Course 4 Bee For Loops 1_instruction: Gebruik een lus om de nectar uit iedere bloem te verzamelen.
      Course 4 Bee For Loops 10_instruction: Wanneer je lus aftelt wordt de stapwaarde in iedere lus afgetrokken van je tellervariabele. Wat zou je staalharde moeten zijn om 9, dan 6 en dan 3 nectar te verzamelen?
      Course 4 Bee For Loops 11_instruction: Wat is er mis met deze lus? Kijk of je het kunt repareren en laat de honingbij de nectar verzamelen.
      Course 4 Bee For Loops 2_instruction: 'Dit is een nieuwe soort lus, die de "voor"-lus heet. Deze specifieke for-lus zal met 1 tegelijk  van 1 naar 5 tellen, en de inhoud van de lus iedere keer dat hij telt uitvoeren. Help de Bij om de nectar te krijgen.'
      Course 4 Bee For Loops 3_instruction: Je kunt deze puzzel oplossen door een lus te maken van 1 tot drie per 1. Laten we nu wat nectar gaan halen!
      Course 4 Bee For Loops 4_instruction: Verzamel allen nectar van deze bloemen. I vraag me af of het gemakkelijker kan...
      Course 4 Bee For Loops 5_instruction: 'Ah, de lus maakt het een stuk simpeler! Gebruik de variabele "teller" van de voor-lus om het blok "haal nectar"  hetzelfde aantal keren uit te voeren als de lus. Wauw! Dat zijn een hoop lussen. Alle code die je nier nodig hebt is er; kijk maar eens hoe het in elkaar gezet is en klik dan op Uitvoeren om te zien hoe het werkt.'
      Course 4 Bee For Loops 6_instruction: Je kunt ook de voor-lus gebruiken om af te tellen. Probeer deze nectar te verzamelen door af te tellen van 5 naar 1 per 1.
      Course 4 Bee For Loops 7_instruction: 'Gebruik je lusvariabele "teller" om te regelen hoever je horizontaal beweegt.'
      Course 4 Bee For Loops 8_instruction: Kun je de lusvariabele gebruiken om beweging en nectar verzamelen te regelen?
      Course 4 Bee For Loops 9_instruction: 'Het laatste nummer in je voor lus wordt de "stapgrootte"  genoemd en iedere keer dat de lus doorlopen wordt, wordt de teller variabele veranderd met de stapgrootte. Probeer deze bloemen te verzamelen door een stapgrootte van 2 te gebruiken.'
      Course 4 Bee Loops 5 NEW_instruction: |
        Put these blocks into a loop to collect
        nectar from each flower.
      Course 4 Bee Params 1_instruction: 'Gebruik de functie "krijg 3 nectar", die draait, nectar ophaalt, en dan teruggaat naar de oorspronkelijke plek. Schrijf een sequentie om alle nectar te verzamelen door "krijg 3 nectar" te gebruiken.'
      Course 4 Bee Params 2_instruction: 'Pas de functie "krijg 3 nectar" aan zodat het mij naar rechts naar de bloemen laat draaien in plaats van links.'
      Course 4 Bee Params 3 (copy 1)_instruction: 'Nu zijn er bloemen aan beide kanten! Misschien kun je een parameter gebruiken zodat dezelfde functie werkt voor bloemen aan beide kanten. Ik heb een parameter met de naam "richting" aan de functie toegevoegd. Als de parameter "richting" gelijk is aan 0 dan zou ik links moeten draaien, als het 1 is zou ik naar rechts moeten draaien.'
      Course 4 Bee Params 3_instruction: 'Nu zijn er bloemen aan beide kanten! Ik heb een parameter met de naam "richting" aan de functie toegevoegd. Gebruik de variabelen "links" en "rechts" om de richting te besturen. Vul de rest van de functiedefinitie in en klik dan op "Opslaan en Sluiten". '
      Course 4 Bee Params 4 (copy 1)_instruction: Probeer je nieuwe functie te gebruiken om alle bloemen te verzamelen. Onthoudt dat 0 = links en 1 = rechts.
      Course 4 Bee Params 4 backup_instruction: 'Zou het niet leuk zijn als we alle nectars met een enkele functie konden verzamelen? Probeer een nieuwe parameter met de naam "nectars" aan je functie toe te voegen om de hoeveelheid nectar te regelen die je moet verzamelen. Je zult waarschijnlijk de functie ook een nieuwe naam willen geven! '
      Course 4 Bee Params 4_instruction: Probeer een nieuwe functie te maken om alle bloemen te verzamelen. Denk eraan om de variabelen links en rechts te gebruiken.
      Course 4 Bee Params 5_instruction: 'Laten we helemaal opnieuw beginnen - kun je een nieuwe functie genaamd "pak 5 nectar" met een richting parameter maken?'
      Course 4 Bee Params 6 (copy 1)_instruction: Probeer je nieuwe functie te gebruiken om al deze nectar te verzamelen.
      Course 4 Bee Params 6_instruction: 'Zou het niet leuk zijn als we alle nectars met een enkele functie konden verzamelen? Probeer een nieuwe parameter met de naam "nectars" aan je functie toe te voegen om de hoeveelheid nectar te regelen die je moet verzamelen. Je zult waarschijnlijk de functie ook een nieuwe naam willen geven!'
      Course 4 Bee Params 7 (copy 1)_instruction: Probeer je nieuwe functie te gebruiken om al deze nectar te verzamelen.
      Course 4 Bee Params 7_instruction: Probeer je nieuwe functie te gebruiken om alle nectar te verzamelen.
      Course 4 Bee Params 8_instruction: |
        Oooh, we moeten nu ook de honing nog doen!
        Hoe kun je je functie update, zodat die of honing maakt of nectar pakt?
      Course 4 Bee Params Ex_instruction: Probeer je nieuwe functie te gebruiken om alle nectar te verzamelen.
      Course 4 Binary 1_instruction: 'Hier is een functie die een binaire tekst van eentjes en nullen vraagt en de boer dan vraagt om van links naar rechts of van boven naar beneden te draaien,  op de hoeken waar de nummer een nul heeft.  Voer de code uit om te zien hoe de boer binaire getallen gebruikt om een afbeelding te maken.'
      Course 4 Binary 2_instruction: 'Welke binaire tekst kun je 8 keer herhalen om de afbeelding te maken? Tip: het getal "1" vult een gat.'
      Course 4 Binary 3_instruction: Kun je dit patroon maken door een binaire tekst te herhalen?
      Course 4 Binary 5 (copy 1)_instruction: Welke binaire tekst moet je 10 keer herhalen om de afbeelding te maken?
      Course 4 Binary 5_instruction: Welke binaire tekst moet je 10 keer herhalen om de afbeelding te maken?
      Course 4 Binary 6 (copy 1)_instruction: Welke binaire tekst moet je 10 keer herhalen om de afbeelding te maken?
      Course 4 Binary 6_instruction: Welke binaire tekst moet je 10 keer herhalen om de afbeelding te maken?
      Course 4 Binary 7_instruction: Welke binaire tekst moet je 10 keer herhalen om de afbeelding te maken?
      Course 4 Binary 8_instruction: 'Je kunt het grootste deel van deze afbeelding afmaken door een lus te maken met een 5 bit binair getal - dan heb je alleen nog een 4 bit getal nodig om in de rechts onder hoek te komen.'
      Course 4 Maze 1_instruction: Stuur de angry bird naar het biggetje!
      Course 4 Maze 2_instruction: vermijd de TNT!
      Course 4 Maze 3_instruction: 'programmeer zodat de angry bird naar het biggetje gaat. '
      Course 4 Maze 4_instruction: 'Probeer het "herhaal" blok om minder blokken te gebruiken...'
      Course 4 Maze 5_instruction: Kun jij deze puzzel met het minste aantal blokken oplossen?
      Course 4 Maze 6_instruction: Kun jij deze puzzel met het minste aantal blokken oplossen?
      Course 4 Play Lab For Loops 2_instruction: Laten we dit keer de oneven nummers van 1 tot 100 tellen.
      Course 4 Play Lab Params 1_instruction: 'Hier is de functie "jump" die ervoor zorgt dat je figuur 100 pixels naar voren springt. Gebruik de functie om alle vlaggen te verzamelen.'
      Course 4 Play Lab Params 10_instruction: |
        We hebben nog een laatste functie toegevoegd die je kunt gebruiken. Programmeer je spel zo dat het de "niveau_omhoog" functie aanroept als "speler_punten" > 10. Speel het spel en ga voorbij niveau 4 om verder te gaan naar de volgende puzzel.
        
      Course 4 Play Lab Params 2_instruction: 'Nu hebben we vlaggen die hoger zijn dan we kunnen springen. Voeg een parameter toe aan de jump-functie en noem die "hoogte". het pijltje naar boven moet 200 pixels springen, maar het pijltje naar beneden moet 100 pixels springen. Klik op "bewerken" op de jump-functie en verander het zodathet de hoogte-parameter gebruikt in plaats van gewoon 100 pixels te springen.'
      Course 4 Play Lab Params 3_instruction: 'Laten we een andere parameter toevoegen aan de jump-functie, zodat we het kunnen gebruiken met andere figuren. Elk figuur stelt een nummer voor, beginnend bij 1. verander de "jump"-functie, zodat het ook om de "actor"-parameter vraagt. '
      Course 4 Play Lab Params 4_instruction: 'Hier is een functie genaamd "surveilleren". Bewerk hem om de kat eerst 400 pixels omhoog en dan 400 pixels omlaag te laten bewegen.'
      Course 4 Play Lab Params 5_instruction: |
        Fill in the "actor" parameter input
        so that we can call the "patrol" function for each of the actors. Remember,
        the actors correspond to numbers 1, 2, and 3.
      Course 4 Play Lab Params 6_instruction: 'Voeg een andere parameter met de naam "snelheid" toe aan de functie "patrouille". Gebruik een blokje "zet snelheid" met de nieuwe parameter voor "snelheid".'
      Course 4 Play Lab Params 7_instruction: Gebruik de pijltjes om naar de hond te gaan en alle vlaggen te pakken.
      Course 4 Play Lab Params 8_instruction: |
        Use a "when touching" block to send
        Dog back to the top-left ONLY if Dog touches any of the other actors.
      Course 4 Play Lab Params 9_instruction: "You may recognize this game from an\nearlier level. \r\n\r\nWe've added a function called \"score_points\" that\ntakes the parameter \"points\". \r\n\r\nEdit the function so that the \"points\"\nparameter is added to the \"player_points\" variable. \r\n\r\nWhen you're\ndone, click \"Run\" to play.  When Dog scores 10 points, you will move on\nto the next puzzle. "
      Course 4 Play Lab Vars 1_instruction: 'Hier hoef je niet te programmeren. druk gewoon op de knop "uitvoeren" om het spel te spelen! In dit spel ben je een hond die meer vlaggen moet verzamelen dan de kat. gebruik de pijltjes om de hond te besturen. klik op "finish" als je klaar bent.'
      Course 4 Play Lab Vars 2_instruction: 'Die wedstrijd was niet eerlijk! Verander de "hond_snelheid" variabele om er zeker te zijn dat je meer vlaggen kunt verzamelen dan de kat. Wie als eerst 10 vlaggen heeft wint.'
      Course 4 Play Lab Vars 3_instruction: Dit is een nieuw soort spel! Gebruik de pijltjes naar links en rechts om te beweeg en het pijltje omhoog om te springen. Kijk of je alle vlaggen kunt verzamelen.
      Course 4 Play Lab Vars 4_instruction: 'Nu gebruiken we de variabele "hoogte" om de hoogte van de sprong te beheren. Verander de "hoogte"-variabele zodat de hond hoog genoeg kan springen om alle vlaggen te pakken. Tip: de nieuwe vlaggen zijn 200 pixels hoog.'
      Course 4 Play Lab Vars 5_instruction: 'Laten we een spel maken! Allereerst heb je een score nodig. Gebruik de "zet punten op"-blok om de score op 10 te zetten. '
      Course 4 Play Lab Vars 6 (copy 1)_instruction: 'Cool, nu hebben we een score-variabele, maar hoe gaan we die gebruiken? Laten we hem elke keer als je de vijand raakt verhogen. Gebruik de "wanneer actor 2 raakt iets"-gebeurtenis om je score te verhogen wanneer je vuurbal de kat raakt. Je kunt de score verhogen door de score=score+1. Als je score 20 is, heb je het level gehaald.'
      Course 4 Play Lab Vars 6_instruction: |
        Hoe moeten we punten scoren in ons spel?
        Voeg elke keer als de hond de kat raakt met een vuurbal 1 punt toe.
        Gebruik de "wanneer actor 2 iets raakt-gebeurtenis om je score te verhogen. Je kunt je score verhogen door "score = score + 1".
        Als je score 10 is, heb je de level gehaald.
      Course 4 Play Lab Vars 7_instruction: |
        Nice, now let's make sure this game
        isn't too easy - any time the Dog (actor 1) gets hit by a fireball, you should
        lose a point. Start with 10 points so it's not too hard. Let your score drop
        down from 10 to 0 to pass the level.
      Course 4 Play Lab Vars 8 (copy 1)_instruction: |
        Alright, one last thing for
        this game - let's set it up so the player can win (or lose). Use a forever
        loop to check the value of score - if score is ever greater that 20, make
        the enemy vanish. If the score is every less than 0, make the player vanish.
        Click "Finish" when the game works like you'd like it to.
      Course 4 Play Lab Vars 8_instruction: |
        Let's set up this game so the Dog can
        win (or lose). Use a forever loop to check the value of score - if score is
        ever greater that 20, make the enemy (the Cat) vanish. If the score is ever
        less than 0, make the player (the Dog) vanish. Click "Finish" when the game
        works like you'd like it to.
      Course 4 Play Lab Vars 9_instruction: |
        Free Play time! Here are all of the
        variables we've played with so far in this stage, as well as a few more in
        case you want them. Make a game or story using any of these variables. Hint:
        scroll down to see all the commands in the work space.
      Course 4 Play Lab Vars_instruction: |
        Alright, one last thing for this game
        - let's set it up so the player can win (or lose). Use a forever loop to
        check the value of score - if score is ever greater that 20, make the emeny
        vanish. If the score is every less than 0, make the player vanish.
      Course 4 Play Labs For Loops 1_instruction: |
        Let's make the dog speak every
        number from 1 to 100. Use a for loop and the counter block to speak the counter
        variable each time the loop is run.
      Course 4 Play Labs For Loops 2_instruction: Laten we dit keer de oneven nummers van 1 tot 100 tellen.
      Course 4 Play Labs For Loops 3_instruction: |
        If we count by larger numbers,
        we count even higher in the same amount of time. Try making the dog count
        from 10 up to 1000, by 10 at a time.
      Course 4 Play Labs For Loops 4_instruction: Het veranderen van de stap kan helpen, maar we tellen dan nog steeds lineair (elk getal ligt op de zelfde afstand van het vorige). Maar als we exponentieel zouden willen tellen? Kun jij, zonder de instellingen van de lus te veranderen, 1, 4, 9, 16, 25... tellen (teller kwadraat)?
      Course 4 Play Labs For Loops 5_instruction: 'In de vorige stap telden we het kwadraat van een getal. Probeer "teller ^ 2" in "teller ^ 3" te veranderen om de derde macht van elk getal te tellen (1, 8, 27, 64, 125, 216, 343...).'
      Course 4 Play Labs For Loops 6_instruction: |
        You may recall that a prime number
        is any whole number that is only divisible by itself and 1. Use the "is_prime"
        function to speak out only the prime numbers from 1 to 100.
      Course 4 Play Labs For Loops 7_instruction: |
        Could you use a for loop to help
        me speak the sequence 1, 4, 7, 10, 13, 16, 19, 22, 25?
      Course 4 Play Labs For Loops 8_instruction: |
        What for loop would make me speak
        19, 27, 35, 43, 51?
      Course 4 Variables Assessment_instruction: |
        Can you create this image using
        a variable for sides? Each line should be 50 pixels long.
      Course1BeePuzzle12_instruction: Get three nectars and then make two honey
      Course1MazeAssessment1_instruction: "Dit is een test!\r Beweeg me eerst één kant op, daarna een andere kant, om me bij het varken te krijgen"
      Course1MazeAssessment2_instruction: "Dit is een test!\r Beweeg me eerst één kant op, daarna een andere kant, om me bij het varken te krijgen."
      Eval Booleans 1_instruction: |
        Boolean operators (like >, <, =) allow us to
        compare different values, returning either true or false. Click "Run" to
        see how this expression evaluates.
      Eval Booleans 2_instruction: |
        Can you set the values so that this expression
        evaluates as true?
      Eval Booleans 3_instruction: |
        The string-length function returns the number
        of characters in a string (including spaces!) - make this code evaluate to
        true.
      Eval Booleans 4_instruction: |
        Here's an Evaluation Block called AND - it returns
        true if both of its parameters are true, otherwise it returns false. Edit
        the x variable so that this expression returns true.
      Eval Booleans 5_instruction: |
        This OR block returns true if either of its parameters
        is true. Otherwise, if both parameters are false it will return false. Set
        the y variable to a value that will cause this expression to return false.
      Eval Booleans 6_instruction: |
        Here's one more boolean block called NOT. This
        block flips true to false, or false to true. If you wrap this block of code
        in a NOT block, it should return true (because we are asking if the two expressions
        do NOT produce equal values).
      Eval Booleans Free Play_instruction: |
        Free Play: Try out some creations of
        your own using Booleans.
      Eval Booleans_instruction: |
        Booleans allow us to compare different values,
        returning "true" if the are equal, or "false" if they are not. What do
        you think this code will evaluate to?
      Eval Cond 1_instruction: |
        The cond block checks the boolean expressions in
        the left column, and as soon as it finds one that returns "true" it runs
        the corresponding code on the right. If none of the expressions evaluate to
        "true," it runs the bottom block. Update the "temperature" variable so
        that this block returns "It's just right."
      Eval Cond 2 (copy 1)_instruction: |
        This condition returns a different shape
        based on the value of the "sides" variable - change the value of "sides"
        so that the conditional returns a triangle.
      Eval Cond 2_instruction: |
        This condition returns a different shape based on
        the value of the "sides" variable - change the value of "sides" so that
        the conditional returns a triangle.
      Eval Cond 3 (copy 1)_instruction: |
        Can you write a conditional that checks
        the variable "age" and returns "Old enough to vote and drive" if age >
        17, "Old enough to drive" if age is > 15, and "Can't drive or vote" if
        neither conditions is true. Hint: The first condition to return "true" wins
        - make sure you put your conditions in the right order.
      Eval Cond 3_instruction: |
        Can you write a conditional that checks the variable
        "age" and returns "Old enough to vote and drive" if age > 17, "Old enough
        to drive" if age is > 15, and "Can't drive or vote" if neither conditions
        is true. Hint: The first condition to return "true" wins - make sure you
        put your conditions in the right order.
      Eval Cond 4_instruction: |
        We can use the string=? function to make conditionals
        that respond to text input. Here's a function called green shape that takes
        a string for the type of shape. Complete the conditions so that the correct
        solid green shape is returned when the function is run with "circle", "triangle",
        "square", or "rectangle".
      Eval Cond 5_instruction: |
        Here's a similar function red shape with an additional
        variable for size. Complete the conditionals so the correct solid red image
        of a given size is drawn for "circle", "triangle", and "star".
      Eval Cond 6_instruction: "Write a function called food-critic, which takes\nin the name of a food and produces a String that says how you feel about that\nfood. For example, (food-critic “pizza”) might evaluate to “delicious”, but\n(food-critic “rotten eggs”) might evaluate to “gross!”. Choose at least two\nfoods to review, but you can you write more if you like!  Don’t forget to\nadd an “else” clause!\r\nOne example - and part of the definition -  has already\nbeen done for you!"
      Eval Cond 7_instruction: "Free Play: Write a function called green-shape, which\ntakes in the name of a shape and produces a solid green shape. Your function\nshould work with at least “circle”, “star” and “rectangle”, but you can add\nother shapes if you like. You can choose the size of each shape. Don’t forget\nto add an “else” clause!\r\nOne example - and part of the definition -  has\nalready been done for you!\r\n"
      Eval Cond 8_instruction: "Free Play: Suppose you want to own a car at 21, or\nhave your own business by 30. Write a function called life-goals, which takes\nin an age and produces a string that describes your life goals by then. Don’t\nforget to add an “else” clause!\r\n"
      Eval Contracts 1_instruction: |
        Use the "star" function to produce a red star
        with a 60 pixel radius
      Eval Contracts 10A_instruction: |
        Alright let's complete this puzzle with a
        Green Square that is 175 pixels in size.
      Eval Contracts 11A_instruction: |
        Can you complete this puzzle to read "Hello
        World" in the banner?
      Eval Contracts 2_instruction: |
        Check out the "rotate" function - can you
        use it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts 3_instruction: |
        Try using the "text" function to write this
        teal text at size 40.
      Eval Contracts 4 A_instruction: |
        The "scale" function returns an image that
        is scaled either larger or smaller than the input image. Try scaling this
        circle by a factor of 10 - how is the resulting image different than if you'd
        just made a circle of that size in the first place?
      Eval Contracts 4_instruction: |
        The scale function returns an image that is
        either larger or smaller than the input image. Try scaling this circle by
        a factor of 10. How is the returned image different than if you'd just made
        a circle of that size in the first place?
      Eval Contracts 8A_instruction: |
        Can you complete this puzzle? The big-triangle
        is 200 pixels in size and purple?
      Eval Contracts A_instruction: |
        Use the star function to produce a solid red
        star with a 60 pixel radius
      Eval Contracts C_instruction: |
        Check out the rotate function - can you use
        it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts E_instruction: |
        Try using the text function to write "Hello,
        world!" in teal at size 40.
      Eval Contracts shrink_instruction: |
        Can you complete this image using the "shrink"
        function block? The radius is 20. 
      Eval Define Funcs 1_instruction: |
        Here's a new function called green-triangle
        that takes a single Number for size and produces a green triangle. Use the
        new function to create a 125 pixel green triangle.
      Eval Define Funcs 2_instruction: |
        Let's look inside that green-triangle function
        to see how it works. Can you modify it so that the green-triangle function
        always draws outlined green triangles?
      Eval Define Funcs 3_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Define Funcs 4_instruction: |
        Create a new function called aqua-star that
        has a Domain of a single Number for radius and returns an aqua star of the
        given radius. Run your new function with a radius of 75.
      Eval Define Funcs 5_instruction: |
        Let's use that aqua-star function to make
        a row of different sized stars. From left to right, the stars should have
        radii of 25, 50, and 75.
      Eval Define Funcs Test_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Defining Vars Free Play 1_instruction: |
        Free Play: We've provided a function
        that fills your screen with my-image. Change my-image to see what patterns
        you can make.
      Eval Design Recipe .1_instruction: |
        Here's a Design Recipe for a function
        called square-circle with domain Number String and range Image. Click Edit
        to write the function definition (you will see two examples provided).
      Eval Design Recipe 1 (copy 1)_instruction: |
        We're going to write a function
        that draws a solid rectangle of any color that is twice wide as it is high.
        Start with an example - draw a solid green rectangle that has a height on
        100 pixels.
      Eval Design Recipe 1_instruction: |
        Alright, now given the Contract wide-rect:
        Number String -> Image, write an example - draw a solid green rectangle that
        has a height of 100 pixels.
      Eval Design Recipe 2 (copy 1)_instruction: |
        Let's do one more example before
        writing the function definition - this time draw a solid red rectangle with
        a height of 75 pixels.
      Eval Design Recipe 2_instruction: |
        Let's do one more example before writing
        the function definition - this time draw a solid red rectangle with a height
        of 75 pixels.
      Eval Design Recipe 3_instruction: |
        The design recipe for wide-rect already
        has a contract and one example. Can you write a second example and then complete
        the definition. The wide-rect function should produce a rectangle of given
        color that is twice as wide as it is high.
      Eval Design Recipe 4_instruction: |
        Use the Design Recipe to create a function
        starburst. When given a number of points and an outer radius, starburst returns
        a yellow radial star with given points, and an inner radius that is half the
        outer radius.
      Eval Design Recipe 5_instruction: |
        Using the Design Recipe, write a function
        striped-flag that takes two colors and produces a flag that is 250 pixels
        wide, 150 pixels tall, with three even horizontal stripes of given colors,
        in the order color2, color1, color2.
      Eval Design Recipe 6_instruction: |
        Write a function large-polygon that should
        output a solid polygon of given sides and color that takes up most of the
        window, regardless of the number of sides. To make sure that the polygon doesn't
        get too large as you increase the number of sides, side length should be inversely
        proportional to side number, with a length of (800/sides).
      Eval Design Recipe Free Play_instruction: |
        Free Play: Use the design recipe
        to create some functions of your own design
      Eval Free Play_instruction: 'Free Play: Make art with code!'
      Eval Strings Images .1_instruction: |
        So far we've only dealt with a single
        type of data, Numbers. Another type of data is a String, which is any combination
        of letters, numbers, or other characters wrapped in quotation marks. Run the
        String "Hello, world!" and see what happens.
      Eval Strings Images .2_instruction: |
        The string-append function takes two Strings
        and returns a single combined String. Add a String "Universe" to the second
        argument of string-append.
      Eval Strings Images 1_instruction: |
        The third type of data we're going to
        use is an Image. This star function takes in a Number and two Strings, and
        it evaluates to an Image. Use this function to make a solid red star with
        radius of 100.
      Eval Strings Images 2_instruction: |
        Free Play: Every Evaluation Block is color-coded
        to let you know which data type it returns and which types it needs for its
        parameters. The last parameter of the triangle function takes a String that
        controls its color - try some different colors to see what works.
      Eval Strings Images 3_instruction: |
        Some functions can only take a specific
        set of Strings, such as the second argument of this circle function, which
        controls its style. Draw this orange outline circle using the special String
        block with a dropdown to make sure you only use valid styles.
      Eval Strings Images 4_instruction: |
        Try using the rectangle block to draw this
        solid red rectangle - it is 175 pixels wide and 100 pixels tall.
      Eval Strings Images 5_instruction: |
        Try using this new Evaluation Block called
        _overlay_ to place a 100 pixel white triangle on top of a 200 pixel red circle.
      Eval Strings Images 6_instruction: |
        Use the overlay function to place a 75
        pixel radius yellow star on top of a 150 pixel long blue square.
      Eval Strings Images 7_instruction: |
        The offset block lets you move an image
        relative to where it would normally be placed. Use this block to offset the
        square by 100 pixels on the y-axis.
      Eval Strings Images 8_instruction: |
        Here's a different kind of star block
        - it's called radial-star and it allows you to draw stars with any number
        of points! Use it to create a 7 point solid orange star with an inner radius
        of 75 pixels and an outer radius of 175 pixels.
      Eval Strings Images Free Play_instruction: |
        Free Play: Explore the blocks available
        to create something interesting. Make sure to share your favorite creations.
      frozen circle function in circle_instruction: Laten we nu 20 overlappende cirkels maken, draai 18 graden tussen de cirkels.
      frozen circle function with parameter_instruction: 'Hier is een "Maak een cirkel" blok dat cirkels van verschillende grootte kan maken. Kun jij dit blok gebruiken om een kleine cirkel van grootte 5 en grotere cirkel van grootte 10 te maken?'
      frozen circle function_instruction: 'Gebruik het nieuwe "Maak een cirkel" blok om 10 overlappende cirkels te maken. Vergeet niet vooruit te springen tussen de cirkels.'
      frozen circle_instruction: Een cirkel is een speciale vorm. Kun jij bedenken welk getal op de plaats van de vraagtekens moet komen om een cirkel te tekenen?
      frozen cross rotate dense_instruction: 'Laten we dit 90 maal herhalen! Hoeveel keer gaat 90 in 360? Tip: Het is een heel klein getal.'
      frozen cross rotate_instruction: Probeer het nu 10 maal te herhalen. Hoeveel graden moet je draaien tussen de lijnen?
      frozen cross_instruction: 'Gebruik het "Herhaal" blok om een plus teken te maken. Heb je al opgemerkt dat Elsa vooruit en achteruit kan bewegen?'
      frozen diamond mini snowflake_instruction: 'Wist je dat elke sneeuwvlok een andere vorm heeft? Laten we nu een nieuwe sneeuwvlok maken door met het "Herhaal" blok een parallellogram 4 keer te herhalen, draai steeds 90 graden tussen de parallellogrammen.'
      frozen diamond snowflake_instruction: 'Laten we nu een nieuwe sneeuwvlok maken door met het "Herhaal" blok een parallellogram 10 keer te herhalen, draai steeds 36 graden tussen de parallellogrammen.'
      frozen diamond_instruction: 'Laten we een parallellogram maken. Dat is net een vierkant maar heeft andere hoeken: 60 en 120 graden in plaats van 90 graden hoeken.'
      frozen freeplay_instruction: Je bent nu officieel een meester kunstenaar geworden! Maak een winter wonderland.
      frozen line_instruction: Hoi! Ik ben Elsa van Arendelle. Help mij met het maken van een lijn.
      frozen perpendicular_instruction: 'Laten we nu eens kijken of we twee lijnen kunnen maken die in een hoek van 90 graden staan. Je zult zowel het "draai" als het "ga vooruit" blok moeten gebruiken.'
      frozen snowflake branch_instruction: 'Probeer het "Maak een sneeuwvloktak" blok te gebruiken om 3 takken te maken, dit begint al op een sneeuwvlok te lijken.'
      frozen snowflake full_instruction: Laten we dit nu 8 keer herhalen om een mooie sneeuwvlok te maken!
      frozen snowflower_instruction: Ingewikkelde sneeuw patronen kunnen gemaakt worden met zeer eenvoudige vormen. Kun je een patroon maken door 5 cirkels van grootte 5 te herhalen en 5 cirkels van grootte 10?
      frozen square iterative_instruction: Het lijkt er op dat we half op weg zijn om een vierkant te maken. Laten we 4 lijnen bij elkaar doen om een vierkant te maken.
      frozen square loop 3x_instruction: Laten we drie vierkanten maken, draai na elk vierkant. Zorg er voor dat je voor elk nieuw vierkant 120 graden draait.
      frozen square loop_instruction: 'Hoi, ben ik Anna van Arendelle! Laten we een vierkant maken met het "Herhaal" blok, dat gebruikt minder blokken. Hoeveel keer (???) moet het "Herhaal" blok de blokken binnenin doorlopen om een vierkant te maken?'
      frozen square snowflake_instruction: 'Kun je een sneeuwvlok maken door met het "Herhaal" blok 10 vierkanten te maken en met het "Draai" blok 36 graden te draaien tussen de vierkanten?'
      hoc2015_free_instruction: |
        Hiro is "actor 1".  Use the Move block to move
        Hiro right to touch Baymax.
      hoc2015_intro_instruction: |
        Hiro is "actor 1".  Use the Move block to move
        Hiro right to touch Baymax.
      hoc2015_maze_instruction: |
        Hiro is "actor 1".  Use the Move block to move
        Hiro right to touch Baymax.
      hoc2015_random_instruction: |
        Hiro is "actor 1".  Use the Move block to move
        Hiro right to touch Baymax.
      hoc2015_sandbox_instruction: |
        Hiro is "actor 1".  Use the Move block to move
        Hiro right to touch Baymax.
      hoc2015_square_instruction: |
        Hiro is "actor 1".  Use the Move block to move
        Hiro right to touch Baymax.
      Infinity_catch_instruction: Kun je Elsa (acteur 2) laten inhalen door Anna met behulp van de pijltjestoetsen?
      Infinity_finale_instruction: Maak wat je maar wilt en deel het!
      Infinity_move_collide_instruction: "Hiro is 'acteur 1'.  Verplaats hem naar Baymax, en laat een geluid afspelen wanneer ze elkaar aanraken."
      Infinity_move_directions_instruction: "Baymax is 'acteur 2'.  Voeg beweeg blokken toe en verplaats vervolgens Baymax met behulp van de pijltjestoetsen. Zorg dat hij de andere 2 karakters raakt."
      Infinity_move_right_instruction: "Hiro is 'acteur 1'. Gebruik het beweeg blok om Hiro te verplaatsen naar rechts en Baymax aan te raken."
      Infinity_repeat_instruction: 'Gebruik een "blijven herhalen" blok om Anna 400 pixels omhoog en naar beneden te laten bewegen.'
      Infinity_say_instruction: "Zorg dat Anna 'Hi there' kan zeggen door gebruik te maken van het zeg blok."
      Infinity_shoot_instruction: "Baymax is 'acteur 2'. Zorg dat Baymax een raket gooit naar Hiro."
      Infinity_shoot_directions_instruction: "Hiro is 'acteur 3'. Zorg dat Hiro een voorwerp naar ieder van de vier karakters gooit. Wacht één seconde tussen iedere worp."
      Infinity_test_instruction: This is a test Infinity level.
      Infinity_touch_faster_instruction: Raak nog meer sneeuwvlokken aan!
      Infinity_touch_four_instruction: Beweeg Anna omhoog, naar beneden, links en rechts om de vier sneeuwvlokken aan te raken.
      Infinity_touch_score_instruction: "Zorg dat Anna een punt scoort wanneer ze een sneeuwvlok aanraakt. Klik vervolgens op 'uitvoeren' en bestuur haar om iedere sneeuwvlok één keer aan te raken."
      jessie-test_instruction: Lots of instructions
      Just for Testing_instruction: Test instructions
      K-1 Artist 1 Assessment 1_instruction: Teken een korte lijn omhoog en een lange naar rechts!
      K-1 artist 1 level 10_instruction: Teken de onderbroken lijn met behulp van zowel de sprong als de teken blokken
      K-1 artist 1 level 9_instruction: Teken dit met drie lijnen
      K-1 Artist Loops 1_instruction: Teken deze lijn door 4 maal oostwaarts te bewegen.
      K-1 Artist Loops 2_instruction: Kun je dezelfde lijn tekenen met behulp van een lus?
      K-1 Artist Loops 3_instruction: Kun je deze blokken in een lus plaatsen om 6 lijnen te tekenen?
      K-1 Artist Loops 4_instruction: Zou een lus ons kunnen helpen het bovenste deel van dit kasteel te tekenen?
      K-1 Artist Loops 5_instruction: Wat kun je 4 maal herhalen om deze trap te tekenen?
      K-1 Artist Loops 6_instruction: 'Hier zijn 2 lussen nodig: een om de trap op te gaan en een om naar beneden te gaan.'
      K-1 Artist Loops 7_instruction: Kun jij dit patroon afmaken met 2 lussen?
      K-1 Artist Loops 8_instruction: Deze trap heeft langere treden.
      K-1 Artist Loops 9_instruction: 'Test: Gebruik een lus om de trap te tekenen'
      K-1 Artist Loops Free Play_instruction: Vrij spelen, tekenen iets leuks!
      K-1 Artist1 1_instruction: Teken de voet van de man met één lijn
      K-1 Artist1 10_instruction: Teken en spring om het onderbroken pad naar schat X te maken
      K-1 Artist1 2_instruction: Teken de snorhaar op de kat met twee lijnen!
      K-1 Artist1 3_instruction: Teken twee lijnen naar het oosten en 2 lijnen naar het noorden om het huis af te maken!
      K-1 Artist1 4_instruction: Teken lijnen naar boven, opzij en beneden om het kasteel af te maken!
      K-1 Artist1 5.5_instruction: Maak de derde toren van het kasteel af met korte lijnen
      K-1 Artist1 5_instruction: Teken de steel van deze bloem met twee lijnen!
      K-1 Artist1 6_instruction: Maak het plaatje af door een spring blok te gebruiken!
      K-1 Artist1 7_instruction: Gebruik het spring blok om te verplaatsen zonder te tekenen. Spring naar boven en teken een lijn.
      K-1 Artist1 8_instruction: Teken de onderbroken lijn met behulp van zowel de sprong als de teken blokken
      K-1 Artist1 9_instruction: Teken en spring om een onderbroken lijn te maken
      K-1 Artist1 Assessment 1_instruction: Teken de lange en de korte lijnen!
      K-1 Artist1 Assessment 2_instruction: Teken de korte onderbroken lijnen!
      K-1 Artist2 1_instruction: Teken een vierkant onder de driehoek.
      K-1 Artist2 2_instruction: Maak een sprong en teken een vierkant naast het huis.
      K-1 Artist2 3_instruction: Teken een vierkant boven het onderste vierkant.
      K-1 Artist2 4_instruction: Teken een rechthoek om de brug af te maken.
      K-1 Artist2 5_instruction: Teken een rechthoek om de pilaar onder de brug af te maken.
      K-1 Artist2 6_instruction: Teken twee vierkanten om een rechthoek te maken!
      K-1 Artist2 Assessment1_instruction: 'Test: Teken een vierkant naast het andere vierkant.'
      K-1 Artist2 Free Draw_instruction: Teken iets leuks!
      K-1 Artist2_7_instruction: Teken een rechthoek om de kast een bovenste lade te geven!
      K-1 Bee 1_instruction: Breng me naar de bloem, pak nectar, breng me dan naar de honingraat en maak honing
      K-1 Bee 10_instruction: Pak vier nectar en maak dan twee honing!
      K-1 Bee 11.5_instruction: Pak vier nectar om vier honing te maken!
      K-1 Bee 11_instruction: Pak drie nectar en maak dan één honing
      K-1 Bee 12_instruction: Pak drie nectar en maak dan twee honing!
      K-1 Bee 13_instruction: Pak drie nectar en maak dan één honing!
      K-1 Bee 14_instruction: Breng me naar de nectar, pak het op, breng me dan naar de honingraat om honing te maken.
      K-1 Bee 15_instruction: Pak twee nectar om twee honing te maken!
      K-1 Bee 2_instruction: Breng me naar de bloem, pak nectar, breng me dan naar de honingraat en maak honing
      K-1 Bee 3_instruction: Breng me naar de bloem, pak nectar, breng me dan naar de honingraat en maak honing
      K-1 Bee 4_instruction: Pak twee nectar en maak dan twee honing!
      K-1 Bee 5_instruction: Pak drie nectar en maak dan drie honing!
      K-1 Bee 6_instruction: Pak twee nectar en maak dan twee honing!
      K-1 Bee 7_instruction: Pak drie nectar en maak dan twee honing!
      K-1 Bee 8_instruction: Pak twee nectar en maak dan twee honing!
      K-1 Bee 9_instruction: Pak twee nectar en maak dan twee honing!
      K-1 Bee Assessment 1_instruction: Pak nectar om honing te maken!
      K-1 Bee Assessment 2_instruction: Pak nectar om honing te maken!
      K-1 Bee Loops 1_instruction: Pak de nectar om honing te maken!
      K-1 Bee Loops 10_instruction: Gebruik herhaal blokken om nectar te pakken en honing te maken!
      K-1 Bee Loops 11_instruction: 'Test: Gebruik lussen en pak de nectar en de honing!'
      K-1 Bee Loops 12_instruction: 'Test: Gebruik herhaal blokken om nectar te pakken en honing te maken!'
      K-1 Bee Loops 2_instruction: Gebruik een lus om te verplaatsen en pak dan te nectar en maak honing!
      K-1 Bee Loops 3_instruction: Gebruik lussen om nectar te pakken en honing te maken!
      K-1 Bee Loops 4_instruction: Gebruik lussen om de nectar te pakken, honing te maken en te verplaatsen!
      K-1 Bee Loops 5_instruction: Gebruik lussen om de nectar en honing te pakken!
      K-1 Bee Loops 6_instruction: Gebruik herhaal blokken om nectar te pakken en honing te maken!
      K-1 Bee Loops 7_instruction: Gebruik lussen om nectar te pakken en honing te maken!
      K-1 Bee Loops 8_instruction: Gebruik lussen om de nectar en honing te pakken!
      K-1 Bee Loops 9_instruction: Gebruik herhaal blokken om nectar te pakken en honing te maken!
      K-1 Bee Loops Assessment 1_instruction: Pak nectar om honing te maken en gebruik lussen om te verplaatsen!
      K-1 Bee Loops Assessment 2_instruction: Pak nectar om honing te maken met behulp van lussen!
      K-1 Bee Puzzle 12_instruction: Get three nectars and then make two honey
      K-1 Building a Foundation Assessment_instruction: Bouw een piramide van drie niveaus, er zijn geen andere aanwijzingen, dus speel gewoon met de stukjes tot het je lukt!
      k-1 maze 1_instruction: Kun je me naar het Westen bewegen om bij het varken te komen?
      K-1 Maze 10_instruction: Breng me om de TNT kisten naar het varken!
      K-1 Maze 11_instruction: 'Vind voor mij een pad naar dat maffe varken. Pas op voor TNT, anders verlies ik mijn veren! Tip: het varken is ten Zuiden van mij.'
      K-1 Maze 2_instruction: Beweeg me naar het Oosten om bij het varken te komen!
      K-1 Maze 3_instruction: Beweeg me naar het Zuiden om bij het varken te komen!
      K-1 Maze 4_instruction: Beweeg me naar het Noorden om bij het varken te komen!
      K-1 Maze 5_instruction: Beweeg me naar het Oosten om bij het varken te komen!
      K-1 Maze 6_instruction: Beweeg de ene kant op, en dan de andere om me bij het varken te krijgen!
      K-1 Maze 7_instruction: Beweeg de ene kant op, en dan de andere om me bij het varken te krijgen!
      K-1 Maze 8_instruction: Beweeg de ene kant op, en dan de andere om me bij het varken te krijgen!
      K-1 Maze 9_instruction: Beweeg de ene kant op, en dan de andere om me bij het varken te krijgen!
      K-1 Maze Assessment 1_instruction: 'Test -- Breng me naar het varken!'
      K-1 Maze Assessment 12_instruction: Test Niveau
      K-1 Maze Assessment 13_instruction: Test Niveau
      K-1 Maze Assessment 2_instruction: 'Test -- Breng me naar het varken!'
      K-1 maze debug 1_instruction: Pas de code aan om me naar het varken te brengen!
      K-1 maze debug 10_instruction: Los de fouten in dit level op door de blokken op de juiste volgorde te zetten en blokken toe te voegen!
      K-1 maze debug 11_instruction: "Dit is een test!\r\nLos de fouten in dit level op door blokken te herschikken en toe te voegen om me naar het varken te brengen"
      K-1 maze debug 2_instruction: Zoek uit wat er mist en voeg dan de missende blokken toe, zodat ik dat varken kan pakken!
      K-1 maze debug 3_instruction: Zoek uit wat er mis is en VERWIJDER blokken om me naar het varken te brengen!
      K-1 maze debug 4_instruction: Controleer de blokken en los de fouten op! Ik denk dat ik de verkeerde kant op ga.
      K-1 maze debug 5_instruction: Los de fouten in dit level op door de blokken op de juiste volgorde te zetten en blokken toe te voegen!
      K-1 maze debug 6_instruction: Los de fouten in dit level op door de blokken op de juiste volgorde te zetten en blokken toe te voegen!
      K-1 maze debug 7_instruction: Los de fouten in dit level op door de blokken op de juiste volgorde te zetten en blokken toe te voegen!
      K-1 maze debug 8_instruction: Los de fouten in dit level op door de blokken op de juiste volgorde te zetten en blokken toe te voegen!
      K-1 maze debug 9_instruction: Los de fouten in dit level op door de blokken op de juiste volgorde te zetten en blokken toe te voegen!
      K-1 Maze debug Assessment 1_instruction: 'Test: Los de fouten in dit level op door de blokken op de juiste volgorde te zetten en blokken toe te voegen!'
      K-1 Maze Loops 1_instruction: Breng me naar het varken!
      K-1 Maze Loops 10_instruction: Breng me naar het varken! Gebruik het herhaal blok.
      K-1 Maze Loops 11_instruction: Breng me naar het varken! Gebruik het herhaal blok.
      K-1 Maze Loops 12_instruction: Breng me naar het varken! Gebruik het herhaal blok.
      K-1 Maze Loops 2_instruction: Gebruik het herhaal blok om me naar het varken te brengen!
      K-1 Maze Loops 3_instruction: Breng me naar het varken! Gebruik het herhaal blok.
      K-1 Maze Loops 4_instruction: Breng me naar het varken!
      K-1 Maze Loops 5_instruction: Breng me naar het varken! Gebruik het herhaal blok.
      K-1 Maze Loops 6_instruction: Breng me naar het varken! Gebruik het herhaal blok.
      K-1 Maze Loops 7_instruction: Breng me naar het varken! Gebruik het herhaal blok.
      K-1 Maze Loops 8_instruction: Breng me naar het varken! Gebruik het herhaal blok.
      K-1 Maze Loops 9_instruction: Breng me naar het varken!
      K-1 Maze Loops Assessment 1_instruction: 'Test: Gebruik lussen om me naar het varken te brengen!'
      K-1 Maze Loops Assessment 2_instruction: 'Test: Gebruik lussen om me naar het varken te brengen!'
      K-1 Maze Multi 14_instruction: Test Niveau
      K-1 Maze Multi 15_instruction: Test Niveau
      K-1 Maze Sequence Assessment 1_instruction: "Dit is een test!\r\nBeweeg een kant op,\nen vervolgens de andere kant op om me naar het varken te brengen"
      K-1 Maze Sequence Assessment 2_instruction: "Dit is een test!\r\nBeweeg een kant op,\nen vervolgens de andere kant op om me naar het varken te brengen."
      Luigi's Pizza 1_instruction: |
        Welcome to Luigi's Pizza! To order a pizza,
        type the name of a topping into the cost function, and we'll return the price
        of that pizza. Try ordering a pepperoni pizza to start.
      Luigi's Pizza 2 (copy 1)_instruction: |
        Right now there are only four choices
        available at Luigi's pizza - let's fix that! Add a couple of new toppings
        to the conditional block in the "cost" function. Once you've added your
        toppings, test out the function to make sure it works.
      Luigi's Pizza 2_instruction: |
        Right now there are only four choices available
        at Luigi's pizza - let's fix that! Add a couple of new toppings to the conditional
        block in the cost function. Once you've added your toppings, test out the
        function to make sure it works.
      Luigi's Pizza 3 (copy 1)_instruction: |
        That's better, everyone loves more
        variety in their pizza toppings! But you still can't please everyone, and
        folks are coming in to order toppings that Luigi doesn't have. Instead of
        saying no to those people, could you update the "else" clause so that we
        charge them a premium for toppings that we don't normally offer?
      Luigi's Pizza 3_instruction: |
        That's better, everyone loves more variety in
        their pizza toppings! But you still can't please everyone, and folks are
        coming in to order toppings that Luigi doesn't have. Instead of saying no
        to those people, could you update the else clause so that we charge them a
        premium for toppings that we don't normally offer? Let's charge $10,000
        for a topping we don't carry.
      Luigi's Pizza 4_instruction: |
        Free Play: What can you do to make Luigi's cost
        function even more useful?
      MSM Big Game Empty_instruction: |
        All variables and functions are currently
        empty stubs. Each puzzle progression will be focused on defining and handful
        of them, and therefore adding functionality.
      MSM Big Game Vars 1 (copy 1)_instruction: |
        In the Variables toolbox you'll
        see several variables that define how your game characters look, move, and
        interact
      MSM Big Game Vars 1_instruction: |
        In the Variables toolbox you'll see several
        variables that define how your game characters look, move, and interact
      MSM Big Game Vars Backup_instruction: |
        In the Variables toolbox you'll see
        several variables that define how your game characters look, move, and interact
      MSM Defining Vars 1 (copy 1)_instruction: |
        Write a program that produces a
        50 pixel solid green triangle.
      MSM Defining Vars 1_instruction: |
        Write a program that produces a 50 pixel
        solid green triangle.
      MSM Defining Vars 2 (copy 1)_instruction: |
        If we wanted to make fifty green
        triangles, it would be a pain to repeat that block of code 50 times. Let's
        create a variable called "my-shape" and put the code for a 50 pixel solid
        green triangle inside.
      MSM Defining Vars 2_instruction: |
        If we wanted to make fifty green triangles,
        it would be a pain to repeat that block of code 50 times. Let's create a
        variable called my-shape and put the code for a 50 pixel solid green triangle
        inside.
      MSM Defining Vars 3 (copy 1)_instruction: |
        Take your "my-shape" variable
        and use it with this provided code to draw two identical green triangles.
      MSM Defining Vars 3_instruction: |
        Take your my-shape variable and use it with
        this provided code to draw two identical green triangles that are 50 pixels
        in size.
      MSM Defining Vars 4_instruction: |
        Edit your my-shape variable so that it draws
        75 pixel solid red stars.
      MSM Play Lab Butterfly 1_instruction: |
        Help Sam stay on the screen so that
        you can always see at least a little piece of him. Using the arrow keys, see
        how far Sam can go to the left while still staying onscreen. You’ll find that
        Sam is onscreen as long as his x-coordinate is greater than -50. Then, fill
        in the code to make Sam stay on the screen.
      MSM Play Lab Butterfly 2_instruction: |
        Now make Sam stay on the right side
        of the screen. You'll have to experiment to see how far he can go and still
        be partially visible on the screen.
      MSM Play Lab Butterfly 3_instruction: |
        Now, combine your work to make Sam stay
        on both sides of the screen.
      MSM Play Lab Game 2_instruction: |
        Variables can also be used to control the
        speed of players in a game. Set the player speed and the enemy speed and see
        how the movement changes. Speed can be between 2 and 12.
      NetSim Standalone Automatic DNS_instruction: |
        In this version of the Internet
        Simulator, a Domain Name System (DNS) is provided for you and knows the IP
        addresses of all connected computers. Send a message in the form GET [hostname]
        to the DNS service at address <yourRouterNumber>.15 to get a student's address.
      NetSim Standalone Broadcast_instruction: "In this version of the Internet Simulator,\nyou can connect to up to 5 other people in a room. When you send messages\nin the room, everyone receives them. What are some of the challenges of this\nsystem, and how might you solve them?\r\n"
      NetSim Standalone Classroom Routers_instruction: |
        In this version of the Internet
        Simulator, everyone connects to a router and has a specific address. To send
        messages, you have to address your message to the specific address of the
        recipient, and the router will take care of delivering it to the right computer.
        If there are other routers created in your class, ask for the address of one
        of your classmates and send them a message! View the Log Router to see the
        path the messages have taken through the network.
      NetSim Standalone Freeplay_instruction: |
        In this configuration, most of the
        options are turned on, and you can play with them. Have fun!
      NetSim Standalone Manual DNS_instruction: |
        In this version of the simulator
        you can't see the other students' addresses.  Instead, one of you must act
        as a name service, to help share addresses with each other.
      NetSim Standalone Packets TCP_instruction: |
        Messages on the Internet can take
        many paths to get to their destination, and sometimes along the way the message
        gets dropped. In this version of the Internet Simulator, there is a 10% chance
        of a packet being dropped, multiple packets may take different paths to the
        destination, and the default max packet size is set to 6 additional characters.
        
      NetSim Standalone Routers Addresses_instruction: "For this activity, connect\nto a router with the others in your group. Important note: The router will\nonly properly route messages where the first 4 bits are the To: address and\nthe second 4 bits are the From: address.\r\n\r\n[TODO: NetSim needs to support\nhierarchical addresses. For now, level is set up for 4 bit to and from addresses]"
      NetSim Standalone SendAB_instruction: |
        You and your partner share a single
        wire that can only be in state A or state B. You can set the wire to either
        state at any time, and you can read the state of the wire at any time. Can
        you figure out a way to effectively communicate with just this system?
      NetSim Standalone Sending Numbers Ascii_instruction: |
        Now that you've transmitted
        information represented as decimal numbers, you can map those numbers to text
        characters to send text-based information back and forth. With a text-based
        protocol, you can easily represent and communicate all kinds of information.
        
      NetSim Standalone Sending Numbers_instruction: |
        You and your partner can now
        reliably send messages back and forth without extra coordination! While you're
        always sending bits back and forth, you can also represent those bits as decimal
        numbers. What kinds of information can you represent with this system? 
      NetSim_AddressingMessages_instruction: |
        In this version of the simulator, you
        will connect to a Router instead of directly to another student. Enter an
        address in the "To" box to send a message to another student.
      NetSim_AutomaticDNS_instruction: |
        In this version of the simulator a DNS service
        is provided for you. Send a message in the form GET [hostname] to the DNS
        service at address 15 to get a student's address.
      NetSim_ManualDNS_instruction: |
        In this version of the simulator you can't
        see the other students' addresses.  Instead, one of you must act as a name
        service, to help share addresses with each other.
      NetSim_SendAB_instruction: |
        Connect to another student.  Each of you can set
        the value of the wire between you to "A" or "B".  See if you can send
        a complete message!
      NetSim_SendAscii_instruction: |
        In this version of the simulator, you can send
        numbers or ASCII characters to one another, one bit at a time.
      NetSim_SendBits_instruction: |
        Connect to another student.  You can now set
        your wire to "0" or "1".  Send a message to your partner!
      NetSim_SendingABTest_instruction: |
        This is Sarah's test of making a netsim
        level
      NetSim_SendNumbers_instruction: |
        In this version of the simulator, you can
        view the decimal representations of the binary you are sending.
      NetSim_Superuser_instruction: You have loaded NetSim in superuser mode.
      NetSim_Variant1_instruction: |
        NetSim: Variant 1 allows students to manually
        work out the timing of sending bits back and forth.
      NetSim_Variant2_instruction: |
        NetSim: Variant 2: Students connect directly
        to one another and send entire packets back and forth, exploring systems of
        encoding data.
      NetSim_Variant3_instruction: |
        NetSim: Variant 3: Connects groups of 2-6 students
        with a router, and explores issues in routing and DNS
      New Artist Project_instruction: Tekenen iets geweldig! De code wordt opgeslagen als een project dat u op elk gewenst moment naar terug kunt keren.
      NEW Course 4 Artist Functions 1_instruction: Kun je met behulp van een lus een vierkant tekenen dat 100 pixels lang is?
      NEW Course 4 Artist Functions 10_instruction: "Klik op 'bewerken' om  de blokken in de functie in te vullen om een 40 pixel vierkant te maken."
      NEW Course 4 Artist Functions 11_instruction: 'We hebben een nieuwe functie genaamd "teken een lijn van vierkanten." Voel je vrij om een kijkje te nemen in de functieblok om te zien hoe we het gebouwd hebben. Klik op "Ga" wanneer u bent klaar voor de volgende puzzel.'
      NEW Course 4 Artist Functions 12_instruction: 'Gebruik de functie "teken een lijn van vierkanten" van de laatste puzzel om dit patroon te tekenen."'
      NEW Course 4 Artist Functions 13_instruction: 'Kunt u een ster tekenen met behulp van de functie "teken een lijn van vierkanten"? Tip: u dient zich  wellicht 60 pixels naar voor te verplaatsen en 144 graden te draaien.'
      NEW Course 4 Artist Functions 14_instruction: 'Vrije speeltijd! '
      NEW Course 4 Artist Functions 2_instruction: 'Kun je 3 vierkanten tekenen die 20 pixels van elkaar vandaan staan? Hint: elk vierkant is 100 pixels groot'
      NEW Course 4 Artist Functions 3_instruction: |-
        Hier is een nieuw type blok. Het heet een "functie blok." Klik op 'Uitvoeren' om te zien wat het kan doen. 
      NEW Course 4 Artist Functions 4_instruction: |
        Use the "draw a square" function
        to draw this pattern. Hint: You will have to use a "turn right by 120 degrees"
        block after each square.
      NEW Course 4 Artist Functions 5_instruction: |
        How did the "draw a square"
        block know what commands to run? Click on "edit" in the "draw a square"
        function block. The blocks in the function editor are the definition that
        make up "draw a square." When you're done looking around, click "Save
        and Close" and then "Run."
      NEW Course 4 Artist Functions 6_instruction: "Using the \"draw a square\" function\nblock, can you draw this picture? Hint: each square is 20 pixels apart.\r\n"
      NEW Course 4 Artist Functions 7_instruction: |
        Are you getting the hang of how
        to use function blocks? Let's modify this square so that it is 200 pixels
        in size. Hint: click on "edit" to change the size of the "draw a square"
        function editor. Remember to click on "save and close" to get out of the
        function editor. 
      NEW Course 4 Artist Functions 8_instruction: |
        We have given you most of the
        code to create a function, but there seems to be something missing. Can you
        edit the function definition to draw the triangle?
      NEW Course 4 Artist Functions 9_instruction: |
        Which block do you need to add
        to get the triangle to sit on top of the square?
      NEW Course 4 Artist Functions inspire_instruction: "Free Play Inspiration:\nYou've now learned everything you need to know to make a pattern like this!\nIf this picture inspires you, try to make something similar. Otherwise, create\nsomething all your own.\r\n \r\nWant to know how our inspiration pattern was\nmade? Visit for the solution."
      New Course 4 Artist Functions Level 4_instruction: |
        Use the "draw a square"
        function to draw this pattern.
      NEW Course 4 Artist Params 1_instruction: |
        Let's define this function to draw
        a square with 50 pixel sides. Click "edit" to get started.
      NEW Course 4 Artist Params 10_instruction: |
        Create a "draw a hexagon" function
        block with a length parameter. Hint: this hexagon is 100 pixels in size. 
      NEW Course 4 Artist Params 11_instruction: |
        Can you figure out how to draw
        this shape? Edit the function to use the "sides" parameter.
      NEW Course 4 Artist Params 12_instruction: |
        Can you complete this drawing?
        The sides of all the shapes are 100 pixels long.
      NEW Course 4 Artist Params 12a_instruction: |
        This image is similar to the last.
        Can you use a "for loop" with your function to make this design?
      NEW Course 4 Artist Params 13_instruction: |
        Let's edit this "draw a shape"
        function. It already has a "length" parameter. Now, let's edit the function
        to add a "sides" parameter. Remember the angle to turn for a given shape
        is 360 divided by the number of sides it has. Hint: These are the lengths
        for each shape: the triangle is 100 pixels, the hexagon is 25 pixels, and
        the square is 50 pixels.
      NEW Course 4 Artist Params 14_instruction: |
        Can you recreate these shapes?
        Drag the "length" parameter into the function definition. 
      NEW Course 4 Artist Params 15_instruction: |
        Freeplay: Here are the functions
        you've written, and some more for you to play with. Draw something awesome!
      NEW Course 4 Artist Params 2_instruction: 'Maak vanaf nul een "teken een driehoek met zijden van 50 pixels" functie'
      NEW Course 4 Artist Params 3_instruction: "Now let's use the function to draw\n3 triangles from the last puzzle in a row. Hint: each triangle is 50 pixel\napart.\r\n"
      NEW Course 4 Artist Params 4_instruction: |
        Do you notice anything different
        about these function blocks? Click “Run” to see what happens.
      NEW Course 4 Artist Params 5_instruction: |
        Fill in the ??? in the length parameter
        input block. Hint: The pentagon is 100 pixels in size. 
      NEW Course 4 Artist Params 6_instruction: |
        Fill in the "length" parameter
        to draw these shapes by replacing the "???" with the right numbers. The
        square and triangle are 100 pixels in size while the hexagon is 75 pixels
        in size.
      NEW Course 4 Artist Params 7_instruction: |
        Can you complete this drawing? Hint:
        each triangle is 25 pixels larger than the last.  The first triangle is 25
        pixels in size.
      NEW Course 4 Artist Params 8_instruction: |
        The code for this triangle function
        is broken. Can you edit the function to fix it, and then make triangles of
        length 25, 50, and 75?
      NEW Course 4 Artist Params 9_instruction: |
        Click "edit" to fill in the function
        definition of "draw a square" and add a parameter. It should take a length
        parameter, just like the triangle. This time, draw 3 squares: 25, 50 and 75
        pixels in length, each 100 pixels apart.
      NEW Course 4 Artist Params inspire_instruction: "Free Play Inspiration: You've\nnow learned everything you need to know to make a pattern like this! If this\npicture inspires you, try to make something similar. Otherwise, create something\nall your own.\r\n \r\nWant to know how our inspiration pattern was made? Visit\nhttps://studio.code.org/c/106387530 for the solution."
      NEW Course 4 Artist Vars 1.5_instruction: |
        Take a look at the code, can you
        see how the "set length" block and "length" block works together? Click
        on "Run" to see it in action. 
      NEW Course 4 Artist Vars 12_instruction: |
        Now, modify the code from the last
        level to create a pentagon with sides of 100.
      NEW Course 4 Artist Vars 2.5_instruction: |
        Take a look at the code, can you
        see how the "set length" block and "length" block works together? Click
        on "Run" to see it in action. 
      NEW Course 4 Artist Vars 2_instruction: |
        Drag a number block to the "set length"
        block to draw a set of 50 pixel triangles. 
      NEW Course 4 Artist Vars 4 5_instruction: |
        Awesome job on the last puzzle,
        let's try it again this time let's make this cool design with with 60 pixel
        hexagon's.
      NEW Course 4 Artist Vars 4_instruction: |
        Let's try it again. Can you set the
        length variable to make this cool design with hexagons? Hint: It's a multiple
        of 10.
      NEW Course 4 Artist Vars 6_instruction: "Draw this pattern by dropping the\nlength variable in the correct places, and then setting the right value for\nlength. (Hint: it's a multiple of 10).  \r\n\r\nSee how you only set the\nvalue for length once, and the code uses the right value everywhere?\r\n\r\n\r\n"
      NEW Course 4 Bee For Loops 1_instruction: Gebruik een lus om de nectar uit iedere bloem te verzamelen.
      NEW Course 4 Bee For Loops 10_instruction: 'Gebruik je lusvariabele "teller" om te regelen hoever je horizontaal beweegt.'
      NEW Course 4 Bee For Loops 11_instruction: Kan je de lusvariabele gebruiken om te bewegen en de nectar te verzamelen?
      NEW Course 4 Bee For Loops 2_instruction: |
        Add the code necessary to make sure
        the bee collects all the nectar. Look at how much code you need for this puzzle!
        (We'll learn a simpler way in the next puzzle.)
      NEW Course 4 Bee For Loops 3_instruction: |
        Ah, the "for loop" makes this
        much easier! All the code you need is here, take a look at how it is put together
        then click "Run" to see how it works. 
      NEW Course 4 Bee For Loops 4 4_instruction: |
        Can you help the Bee collect the
        rest of the honey using this for loop? 
      NEW Course 4 Bee For Loops 4_instruction: |
        Replace the ??? in the "for loop"
        with the largest amount of nectar the bee has to collect. 
      NEW Course 4 Bee For Loops 5 5_instruction: |
        Are you getting the hang of using
        the "for loop"? Let's help the bee get the rest of the nectar.
      NEW Course 4 Bee For Loops 5_instruction: Je kunt ook de voor-lus gebruiken om af te tellen. Probeer deze nectar te verzamelen door af te tellen van 5 naar 1 per 1.
      NEW Course 4 Bee For Loops 6_instruction: |
        The last number in your for loop
        is called the "increment". Each time the loop is run, the counter variable
        changes by the value of the increment. Try collecting these flowers using
        an increment of 2.
      NEW Course 4 Bee For Loops 7_instruction: Krijg je lussen onder de knie? Deze opdracht lijkt op de vorige, maar je moet 2, 4, 6, 8, 10 nectar pakken. Je krijgt vast wat code, behalve voor de getallen in de lussen. Laten we nectar verzamelen!
      NEW Course 4 Bee For Loops 8_instruction: "What will you do if we take away\nsome blocks? Can you add them back to help the bee collect the nectar?\r\nRemember:\nIf your loop is counting up, the increment is added to your counter variable\neach time through. What should your increment be to collect 3, 6, 9 nectar?\r\n"
      NEW Course 4 Bee For Loops 9_instruction: Wanneer je lus aftelt wordt de stapwaarde in iedere lus afgetrokken van je tellervariabele. Wat zou je staalharde moeten zijn om 9, dan 6 en dan 3 nectar te verzamelen?
      NEW Course 4 Bee For Loops 95_instruction: |
        Take a look at each piece of the
        "for loop" that you have just created.  Can you figure out which numbers
        you need to double to solve this puzzle? Why does it work?
      NEW Course 4 Play Lab Params 11_instruction: |
        It's Free Play time! Have fun
        with all the blocks in your tool box. 
      NEW Course 4 Play Lab Params 5 5_instruction: |
        Let's try that again, but with
        less help. What do you need to edit this time to make the actors patrol?
      NEW Course 4 Play Lab Vars 4 5_instruction: |
        “What do you think this code will
        do? Press “Run” to see what happens.”
      NEW Course 4 Play Labs For Loops 7a_instruction: |
        Using what you learned so
        far, can you have Dinosaur take a step forward every time Penguin counts?
      NEW Course 4 Play Labs For Loops 8 Free Play_instruction: |
        It's Free Play
        time, have fun with all the blocks in your tool box. 
      NEW Course 4 Play Labs For Loops 8a_instruction: |
        Challenge: How would you
        use the "for loop" to get every actor to go around and say their actor number,
        then vanish from the screen? 
      New Play Lab Project_instruction: |
        Create your own story or game! Your code
        is saved as a project you can return to at any time.
      Ninjacat Demo B (copy 1)_instruction: "\r\nLet’s begin by exploring a simple\nvideogame, and then figuring out how it works. You can use the arrow keys\nto move the ninja left, right and jump - try to catch the unicorn and avoid\nthe dragon!\r\n\r\n\r\n\r\n  \r\n\r\n"
      Ninjacat Demo B_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      Ninjacat Demo No Animate_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      PDK5 Conditionals 1_instruction: |
        Purple flowers may have either 1 or 0 nectar,
        but you don't know which one! Be careful not to collect nectar from a purple
        flower if it doesn't have any. Check if the nectar is equal to 1 by using
        the if block.
      PDK5 Conditionals 2_instruction: |
        Try this puzzle that uses conditionals and
        loops together. Use the "if" block to decide when to turn. Hint: you only
        need one more block to complete this puzzle. 
      PDK5 Events 1_instruction: |
        So far all of the programs we've written are executed
        in order from top to bottom. In this puzzle, we'll use "Events" to respond
        to an action on demand. Make the octopus say "Hello" only when you click
        on the Octopus. 
      PDK5 Functions 1_instruction: |
        Hello. Me zombie artist. Me love drawing! Help
        me draw the square glasses.  Hint:  the bridge between the glasses is 25 pixels
        shorter than the square length.
      PDK5 Functions 2_instruction: 'Met functies kan je nieuwe blokken definiëren! We hebben de blokken om een vierkant te tekenen in een functie met de naam "teken een vierkant". Kan je de "teken een vierkant" functie gebruiken om de brillenglazen te tekenen? De vierkanten staan 75 pixels uit elkaar.'
      PDK5 Loops 1_instruction: |
        Instead of using 5 "move forward" blocks, use
        the "repeat" block with a "move forward" block inside of it. In computer
        science, this is called a "loop." 
      PDK5 Loops 3_instruction: |
        Here's another puzzle to practice loops. What happens
        if you use the repeat block to run the code already provided on the workspace
        4 times?
      Play Lab Rocket 1_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second... press "Run" to see how this word problem looks as an animation.
      Play Lab Rocket 2_instruction: |
        We've started the Design Recipe for rocket-height
        using the contract and examples you just wrote. Complete the function definition
        for rocket-height and run your animation.
      Play Lab Rocket 2B_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second. Using the Design Recipe, write a function called rocket-height
        that takes in a number of  seconds that have passed since the rocket took
        off, and produces the height of the rocket at that time.
      Play Lab Rocket 3_instruction: |
        Awesome, now can you update that function so
        that our rocket moves more quickly? Make sure to update the purpose statement,
        examples, and function definition to launch a rocket at 40 meters per second.
      Play Lab Rocket 4 (copy 1)_instruction: |
        Real rockets start off slowly and
        gain speed over time - let's make ours do the same! Write an exponential
        function that describes a rocket that travels at "seconds" squared meters
        per second.
      Play Lab Rocket 4_instruction: |
        Real rockets start off slowly and gain speed
        over time - so let's add some simple acceleration to ours! Can you write
        a function that describes a rocket that is at 10 meters at 1 second, 40 meters
        at 2 seconds, 90 meters at 3 seconds, 160 at 4 seconds and so on?
      Play Lab Rocket 5_instruction: |
        Much better, but let's write one more function
        with simple acceleration. This time the rocket should be 15 meters at 1 second,
        45 meters at 2 seconds, 95 at 3 seconds, and 165 at 4 seconds.
      Play Lab Rocket Free Play_instruction: |
        Free Play: Experiment with your rocket-height
        function to make the rocket fly in different ways. Click "Finish" when you
        are done.
      Sam the Butterfly 1 (copy 1)_instruction: |
        This butterfly is named Sam, and
        the game area is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels
        tall! As you can see, Sam is free to walk around the yard, and the coordinates
        at the top of the screen update to tell you his location. Use the arrow keys
        to move sam around his yard. Help Sam collect all of the flags to move on.
      Sam the Butterfly 1_instruction: |
        This bat is named Sam, and the game area
        is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels tall! As you can
        see, Sam is free to walk around the yard, and the coordinates at the top of
        the screen update to tell you his location. Click "Run" and then use the
        arrow keys to move Sam around his yard, making note of Sam's coordinates
        at different locations. Click "Finish" when you're ready to move on.
      Sam the Butterfly 2_instruction: |
        Sam's mom wants to make sure that she can
        always see at least a bit of him, so lets write some functions that help make
        sure he doesn't go too far out of the yard. Here's a function called safe-left?
        - it should take a Number for its domain that represents Sam's x-coordinates
        and return true if he's completely visible on screen. If your function works,
        Sam shouldn't be able to leave the yard from the left side.
      Sam the Butterfly 3_instruction: |
        In the last puzzle we kept Sam from leaving
        on the left, now let's do the same thing on the right. Complete the safe-right?
        function to make sure Sam can't go off the right side of the screen.
      Sam the Butterfly 4_instruction: |
        Huh, we can keep Sam from leaving on the
        left, or we can keep him from leaving on the right, but how can we keep him
        from going either direction? Try using the AND block to program the function
        on-screen? to check if Sam is safe-left? AND safe-right?
      Sam the Butterfly 5_instruction: |
        Free Play: Awesome, we've kept Sam safe
        on the left and right! Use this free play stage to experiment with your functions
        and further improve onscreen?
      Sam the Butterfly 6_instruction: |
        We've added a new parameter "y" to the
        "on-screen?" function. Update the function so that it checks that "safe-left?"
        AND "safe-right?" AND "safe-up?" are all true. When you've fixed the
        function, try going out of the yard from the left, right, and top sides.
      Sam the Butterfly 7_instruction: |
        Only one last direction to worry about! Create
        a "safe-down?" function and update the "on-screen?" function so that it
        checks up, down, left, and right.
      Sam the Butterfly Complete_instruction: |
        Only one last direction to worry about!
        Create a "safe-down?" function and update the "on-screen?" function so
        that it checks up, down, left, and right.
      scrat 16 (copy 1)_instruction: |
        Acorn! Acorn! Acorn! Use an "if" block to
        get me there with the fewest number of blocks.
      scrat 16_instruction: 'Eikel! Eikel! Eikel! Gebruik een "als" blok om me daar met het minste aantal blokken te brengen.'
      scrat 17 (copy 1)_instruction: |
        Ok, let's do that again for practice - this
        isn't very different, but watch out for the <insert obstacle name for Scrat>!
      scrat 17_instruction: 'OK, laten we dat om te oefenen nog eens doen - dit is niet heel anders, maar let op de muur!'
      scrat 18 (copy 1)_instruction: |
        The "If-else" blocks checks a condition,
        and then does one thing OR another. To get me to the acorn try to use this
        new block.
      scrat 18_instruction: 'Het "als-anders" blok test een voorwaarde en doet dan het ene OF het andere. Probeer dit nieuwe blok te gebruiken om me bij de eikel te brengen.'
      scrat 19 (copy 1)_instruction: |
        One more practice of the "if-else" block,
        can you get it right on your first try?
      scrat 19_instruction: 'Nog een oefening met het "als-anders" blok, kun je het in een keer goed doen?'
      scrat 20_instruction: Kun je slechts 3 blokken toevoegen om me te helpen een ingewikkelder doolhof op te lossen? Als je het goed doet kan ik elk kronkelig pad lopen, ongeacht de lengte. Schiet op! Het ijs smelt!
      SpecialFrozenLevel_instruction: Je bent nu officieel een meesterkunstenaar geworden! Maak een winterwonderland.
      Standalone_Artist_1_instruction: |
        Welcome to Artist! First off, let's try
        to make a simple square using the turn right block and move forward block.
        Each side should be 100 pixels long.
      Standalone_Artist_2_instruction: |
        Draw this diamond with 120 and 60 degree
        angles and 150 pixel long sides.
      Standalone_Artist_3_instruction: |
        Can you draw this hexagon with 100 pixel
        sides and 60 degree turns?
      Standalone_Artist_4_instruction: |
        Now you've got a new block to play with,
        the loop. This will repeat a set of commands. What happens if you loop these
        commands 6 times?
      Standalone_Artist_5.5_instruction: |
        Notice how we simplified the diamond code
        by turning it into a loop. You can loop that whole sequence 12 times to draw
        the flower. Hint: You'll need to turn 30 degrees after your diamond loop
        so you don't keep drawing over the same diamond.
      Standalone_Artist_5_instruction: |
        How many times do you need to loop this diamond
        to draw the flower?
      Standalone_Artist_6_instruction: |
        Loop this hexagon code 6 times to create
        the design. How many degrees will you need to turn each time? Hint: divide
        the number of degrees in a circle by the number of times you are looping.
      Standalone_Artist_7_instruction: |
        A function is another programming tool to
        help you avoid repeating yourself. This function draws a flower, so you can
        use it any time you want to draw a flower. Use this and the new jump block
        to draw these flowers. Hint: The flowers are 150 pixels apart
      Standalone_Artist_8_instruction: |
        Here's a function called "Draw a shape"
        that we've programmed to draw hexagons. Run the code to see what it does
        and then experiment with the function to see what happens. Can you make it
        draw a pattern of squares, triangles, or octagons?
      Standalone_Artist_9_instruction: |
        Now go ahead and make whatever picture you'd
        like! You've even got an empty function that you can make do whatever you
        want!
      Standalone_Artist_v2_instruction: |
        Welcome to Artist! First off, let's try
        to make a simple square using the turn right block and move forward block.
        Each side should be 100 pixels long.
      Test Play Lab_instruction: This is a test play lab level.
      U1L10 NetSim numbers with decimal_instruction: |
        Invent and test a protocol
        for encoding and sending text messages. Your protocol must include the letters
        a-z, spaces, and common punctuation marks. You may add additional characters
        if you wish. See the worksheet handed out by your teacher for more detailed
        instructions!
      U1L11 NetSim numbers with Ascii_instruction: |
        Work with a partner or in a small
        team to develop a protocol that allows you to send formatted text. See the
        worksheet handed out by your teacher for more detailed instructions!
      U1L4 NetSim SendAB_instruction: |
        Develop, document, and test a protocol that
        allows you to use Internet Simulator to relay a message. See the worksheet
        for more detailed instructions.  
      U1L8 NetSim numbers no decimal_instruction: Default instructions
      U1L8 NetSim numbers with decimal_instruction: |
        With your partner, develop a
        protocol or set of rules for communicating a drawing using only bits. See
        the worksheet handed out by your teacher for more detailed instructions!
      U2L05 - NetSim - Packets and Building TCP_instruction: "Develop a Protocol\nfor Reliably Sending a Message.\r\n\r\nConstraints:\r\n- Packets may contain\nonly 6 characters\r\n- Packets may drop with small probability\r\n- Packets\nmay not arrive in order"
      U2L10 NetSim Automatic DNS_instruction: |
        In this version of the Internet Simulator,
        a Domain Name System (DNS) is provided for you and knows the IP addresses
        of all connected computers. Send a message in the form GET [hostname] to the
        DNS service at address <yourRouterNumber>.15 to get a student's address.
      U2L10 NetSim Manual DNS_instruction: |
        In this version of the simulator you
        can't see the other students' addresses.  Instead, one of you must act as
        a name service, to help share addresses with each other.
      U2L2 NetSim Hub Mode_instruction: "Now use the Internet Simulator to send the\nbattleship moves. For setup, join a Room with your group, and add ships to\nyour paper board for each opponent. When playing, all communication must be\ndone through the tool, so no talking, but have fun!\r\n"
      U2L3 NetSim Hub Mode_instruction: |
        Use the Internet Simulator to test out your
        group's binary communication protocol for battleship. How short can you make
        the message and response?
      U2L4 NetSim Routers Addresses_instruction: "For this activity, connect to a\nrouter with the others in your group. Important note: The router will only\nproperly route messages where the first 4 bits are the To: address and the\nsecond 4 bits are the From: address.\r\n\r\n[TODO: NetSim needs to support\nhierarchical addresses. For now, level is set up for 4 bit to and from addresses]"
      U2L5 NetSim Classroom Internet_instruction: "For this activity, connect to\na router with the others in your group. The Internet Simulator now provides\na place for you to put the To and From addresses, so you don't have to type\nout the bits manually.\r\n\r\n"
      U2L7 NetSim Need for Packets_instruction: |
        Transfer your favicon to a partner
        across a network in which the larger a packet grows, the more likely it is
        to be dropped.
      U313 Two Buttons with Ids_instruction: |
        Now you try it! We've given you some
        starting code with two buttons and two event handlers on the screen, but we've
        just left the default Ids of "id".  You need to change the ids to connect
        the right event handler to the right button. (Interestingly, the incorrect
        program does work, but exhibits some bizarre behavior.  We'll discuss this
        more in the next lesson.  Make the buttons work correctly for now).
      U3L03 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.  GIF: U3L3-ProceduresChooseOne.png
      U3L03 Creating Procedures 1_instruction: |
        Write the turnAround() function and
        use it to make the turtle move as depicted. see: U3L03-turnAndDown.gif
      U3L03 Define and use turnAround_instruction: |
        Write the turnAround() function
        and use it to make the turtle move as depicted.
      U3L03 define turnRight and draw a rectangle_instruction: |
        Create a turnRight()
        function and draw a rectangle twice as tall as it is wide by having the turtle
        navigate clockwise to draw the rectangle. 
      U3L03 Draw a T using turnAround_instruction: |
        The turnAround function is now
        provided for you in the code.  Use the turnAround() function to draw a T as
        depicted.
      U3L03 draw diamond_instruction: "Use any and all of the functions you wrote\npreviously to make a 'diamond' shape as shown in the image.\r\n\r\nNOTE:\nthis is another tricky one.  The 4 sides of the diamond are made by drawing\nthree steps with other movement made between calls.  HINT: you might want\nto make another function that handles drawing one side of the diamond. "
      U3L03 Three Steps_instruction: |
        Draw 3 "steps" moving up and to the right.  Notice
        the pattern in the movement. You should define a function called drawStep()
        which draws one of the steps, and then call it 3 times to achieve the effect.
      U3L04 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.
      U3L04 diamond solution_instruction: |
        Study this solution to the drawDiamond
        problem.  Notice that the whole program starts by calling drawDiamond() at
        the top.  The program then follows a chain of function calls.  You can trace
        what's happening in the code to see the functions reused.  It's also easy
        to read because the function names describe the expected behavior.
      U3L05_3x3GridEfficiencyChallenge_instruction: |
        Let's revisit the 3x3 grid
        problem you did a few lessons ago.  This time the challenge is to program
        the solution "as efficiently as possible."  Now that you know how to write
        functions, it should be easier to break the problem down, and your code should
        be easier to read and debug.  See the rubric for more details about requirements
        and expectations.
      U3L05_draw3x3GridEfficiently_instruction: |
        Draw a 3x3 grid above and to the
        right of the turtle. Try to do so with the fewest number of commands possible.
        NOTE: This is a very challenging problem.  You may need to play with it for
        a while and tweak it.  You might also consider using pencil and paper to sketch
        your ideas.
      U3L06 Challenge 1 triangle_instruction: |
        Check out the extended Turtle palette
        now made available to you. These new commands accept parameters, allowing
        you to specify precisely how the function operates rather than only being
        able to move or turn a predetermined amount. Make use of these functions to
        draw the triangle as shown.
      U3L06 Challenge 2 purple square_instruction: |
        This time we're going to learn
        a little bit about changing the turtle's pen. Read through the documentation
        for penWidth() and penColor(), and then draw the purple square as shown.
      U3L06 Challenge 3 fill pink_instruction: |
        Now let's try to fill in the entire
        background of the screen. To make it a little easier for you, we can tell
        you the color we chose is one of the 140 named colors.  If you don't know
        what the named colors are, take a closer look at the documentation for penColor()
        again. Hint: you need to use dot().
      U3L06 Challenge 4 bullseye_instruction: |
        Let's try this out one more time.
        This time the colors are NOT named colors - you need to use the hex-color
        number to set the color.  So that you're not randomly guessing, we'll give
        you a hint -- each of the colors shown in the target image is one of these
        one of the five in the following list:  #00ABDC, #CC4400, #1188CC, #006699,
        #11CC00  You might be able to guess correctly if you apply what you know about
        RGB colors.
      U3L06 Challenge 5 overlapping circles_instruction: |
        This image is created just
        using dot() and penColor() but, how are we going to get those circles to be
        transparent?  If you haven't gotten the hint yet: check out the documentation!
      U3L06 Challenge 6 squiggles_instruction: |
        Next we're going to be adding some
        curves to our drawing. Read the documentation for the "arc" commands and
        then draw the squiggles as shown. To make things easier here's a hint: all
        the parameters are multiples of 10, and the colors are from the following
        list of named colors: PowderBlue, lightBlue, Indigo, Purple, Magenta.
      U3L06 Challenge 7 smiley face_instruction: |
        To make this smiley face you'll
        need to look at the documentation for the move() command and then use it with
        the others you've learned.  You can make reasonable guesses about the colors.
      U3L06 Challenge 8 make your own_instruction: |
        Use the tools you've learned
        today to create a drawing of your own creation. If you have time, challenge
        your friends to see if they can duplicate your image.  We'll show you the
        drawing we made for ourselves.  You can try to duplicate that if you want
        to, otherwise, have fun making your own!
      U3L07 - Free Play Loops and Random_instruction: |
        Free Play!  Use what you learned
        from loops and random to make your own little scene.  Have fun.
      U3L07 - Starry Night Starter Code_instruction: 'Je gaat lussen en willekeurige getallen gebruiken om een afbeelding te maken van een sterrenhemel, vergelijkbaar met het voorbeeld. We hebben je alvast wat code gegeven om de grond en de hemel te maken (twee grote stippen). Je moet in deze opdracht code toevoegen om de sterren, het gras en de maan te maken. Alle effecten krijg je door slim gebruik te maken van punten, lijnen en kleuren. Om te beginnen, voer de stappen uit die worden voorgesteld in het bijbehorende werkblad. '
      U3L08 - Enchantment Under the Sea_instruction: |
        You have been provided with
        starter code for an “Under the Sea” scene which includes three functions,
        one each for the starfish, sea grass, and fish. Create versions of these functions
        which accept parameters to allow you to add more variation to your scene.  The
        student worksheet provides more details and guidance.
      U3L13 - Button with ID_instruction: |
        Drag a button out onto the screen and
        set its text to "Go forth!".  Run the program to make sure you can see the
        button.
      U3L13 - Debug Id plus logic problem_instruction: "The last problem was an example\nof syntax error.  App Lab did not understand which object it should be listening\nto for a \"click\" event so it showed an error message in the console to let\nyou know.  Another kind of error is a logical error - the program is valid,\nbut it's not doing what you want it to do.\r\n\r\nThis program has 2 errors.\nA (tricky) syntax error and logical error.  Find them, fix them, and make\nthe program work as expected."
      U3L13 - Debug Id Problem_instruction: |
        This program has problem!  Can you figure
        it out?  Run the program and see if you can figure out from the error messages
        in the console what the issue is.  There is not much code, so you might be
        able to figure it out just by reading carefully.  Make a change that will
        make the program work as expected.
      U3L13 - Turtle Driver Project_instruction: |
        Challenge: Create a “turtle driver”
        with at least three buttons on the screen to move the turtle forward, and
        turn the turtle right and left. You can copy/paste code from a previous level
        if you like but it will help build your coding muscles if you create this
        small program from scratch.  If you have time, try adding additional buttons!  You
        can also have fun changing the parameters on the turtle functions, using colors,
        etc.
      U3L13 - Turtle move with button_instruction: |
        Drag a button out onto the screen
        and set its text to "Go forth!".  Add an event handler for the button, that
        makes the turtle move forward.  Run the program to make sure it works. 
      U3L14 - Unfortunate Events Free Play_instruction: |
        Follow the "Unfortunate
        Events" Worksheet and enter your code here to experiment.  We've pre-loaded
        the code you need to start.
      U3L16 - challenge say hi app_instruction: "In this challenge we give you starter\ncode that lays all the elements out on the screen.  Here’s what you need to\ndo:\r\nAdd event handler to textInput with the event type ‘input’ that shows\nthe “Say hi” button when that event occurs.\r\nAdd event handler to button\nso that on click, it writes a hello message to the screen and hides the textInput\nand button."
      U3L16 - hideAndShow_instruction: |
        Introducing textInput, getText and write.  First
        run the starter code several times.  Try to change what's written to the
        screen when the button is clicked. Then use getText to write to the screen
        what the user entered in the text box. GIF: U3L16 - useGetText.gif
      U3L16 - hideAndShowPractice_instruction: |
        You are given some starting code
        that puts an image and two buttons on the screen.  The image is initially
        hidden. Add two new event handlers: one for each button, that when clicked
        hide and show the image.
      U3L16 - image and text labels_instruction: |
        Introducing the setPosition command!  Replace
        the moveTo in the button-click event handler to use setPosition to move the
        button itself to a random location when it's clicked.
      U3L16 - images and text labels_instruction: |
        Introducing objects other than
        buttons! - textLabels and images.  First try replacing your button with a
        textLabel.  Will the text respond to events just like the button?  Try connecting
        an event handler to it.  We've started you out with code similar to the result
        of the last level, you can copy your code from that level into here if you
        prefer. 
      U3L16 - images_instruction: |
        Introducing Images.  Try replacing the textLabel
        with an image..  Will the image respond to events just like the button?  Try
        connecting an event handler to it.  We've started you out with code similar
        to the result of the last level, you can copy your code from that level into
        here if you prefer. 
      U3L16 - quick double click_instruction: |
        Mini-Project.  The Quick Double-Click
        game.  In this simple game an object (an image) moves around, or pops up randomly
        on the screen, as the user clicks it.  The goal of our game will be to try
        to double-click the object before it moves.  Part of the challenge (and fun)
        here is creating this app from scratch.  You can look back at your previous
        work for examples, but it's fun to create something from scratch, too.  Try
        it!  For more details see the Activity guide for this lesson.
      U3L16 - setPosition to move button_instruction: |
        Introducing the setPosition
        command!  Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      U3L16 - setPositionMoveButton_instruction: Use setPositon to moveButton
      U3L16 - setupMoveToRandom_instruction: |
        We'll be building upon some simple
        starting code throughout this lesson.  Your first task: use moveTo and randomNumber
        to get the turtle to move to a random location with each button click.  We've
        given you starting code for our common setup: a button that moves the turtle
        when clicked.  You should modify this code.  
      U3L16 - text labels_instruction: |
        Introducing textLabels.  First try replacing
        your button with a textLabel.  Will the text respond to events just like the
        button?  Try connecting an event handler to it.  We've started you out with
        code similar to the result of the last level, you can copy your code from
        that level into here if you prefer. 
      U3L16 - textInput getText write_instruction: |
        Introducing textInput, getText
        and write.  First run the starter code several times.  Try to change what's
        written to the screen when the button is clicked. Then use getText to write
        to the screen what the user entered in the text box.
      U3L16 - use images_instruction: |
        Introducing Images.  Try replacing the textLabel
        with an image..  Will the image respond to events just like the button?  Try
        connecting an event handler to it.  We've started you out with code similar
        to the result of the last level, you can copy your code from that level into
        here if you prefer.
      U3L19 - Clicker Game Freeplay Area_instruction: |
        Use this App Lab area to improve
        your clicker game.  You should start by copy/pasting the code from your old
        game here.  We're showing a more full set of blocks in the toolbox - some
        of the things you might not have used yet.  Feel free to explore then and
        experiment if you want to.  Everything else you need should be shown.  Have
        fun!
      U3L19 - Debugging with consoleLog_instruction: |
        This example shows how you
        might insert console.log statements in your code to verify for yourself how
        the values in the variables change during the running of the code.  This is
        an important debugging technique to use when each line in your program doesn't
        have a visual effect on the app that you can see to verify things are working
        right.  Run the code to see the output in the console.
      U3L19 - DEMO up down count practice app_instruction: |
        This is a demonstration
        of a simple App that uses variables, arithmetic and setText.  Play with it
        a little bit here to see what it does.  You can also come back to experiment
        if you want.  You are going to try to create this app yourself on the next
        screen.  Don't worry, we'll start you out with some of the code and leave
        the rest for you to complete.
      U3L19 - do concatenate string with var_instruction: "We've given you a piece\nof code from the previous screen.  Try changing the value assigned to foo\nto see the string change. \r\nDo this: \r\n1. Try changing the value assigned\nto foo to see the string change. \r\n2. By only modifying the lines of code\nthat were given to you, try to get the output to say: “The value of foo is:\n9.  And isn’t that fine.” \r\n"
      U3L19 - fix the var name syntax error_instruction: "We've given you some code\nwith an error.  It doesn’t recognize the variable.  Can you figure out why?  Fix\nthe error and get the program to run.  Also note the error message since it\nmight come up at some point later in your life.\r\n\r\n"
      U3L19 - practice with setText_instruction: |
        We've started you out with the
        code shown on the previous screen.  First experiment with the app.  Identify
        where setText is being used.  CHALLENGE: modify the code to also use setText
        to change the text on the button itself when it's clicked.  GIF: U3L19 -
        setTextOfButton.gif
      U3L19 - Target Clicker App_instruction: "# A motivating example\r\n\r\nHere\nis an example of the kind of app we want to make.  Study this for the elements\ncontained in the app rather than what it is or does.  Things to investigate:\n\r\n\r\n1. what happens when you click on the Code.org logo? \r\n2. What happens\nwhen you click somewhere else? \r\n3. Try the reset button.   \r\n\r\nThe\nelements contained in this app appear to be simple, and they are in some ways.\nHowever, the computing principles involved - controlling and keeping track\nof things in memory while the program is running - get into some deeper issues\nof programming and computer science in general.  There are some devilish details\nand paths that can lead to misunderstanding if you're not careful.\r\n\r\nSo,\nkeep this app in mind as you go through the different levels in this lesson.  It\nmight seem like you need to learn a lot in order to get this simple thing\nworking.  But it's worth taking the time to understand at a deeper level\nwhat is going on.  Because this one topic: controlling memory leads to many\npossible misunderstandings about coding, and how computers work.  We want\nto make sure you get it right from the outset.  \r\n\r\nSo take your time.  Work\nthrough the issues.  Read the explanations.  You'll come out on the other\nside a better programmer with much deeper knowledge and understanding of how\nthings work.  \r\n\r\nAre you ready?  Click 'finish' to move to the next\npage and start the lesson."
      U3L19 - test reassignment of two vars_instruction: |
        Why is this happening?
        The code given here is the same as the example from the previous page where
        we asked you to make a prediction about what will happen.  Run this code to
        find out if you were right.  If you weren't, that's okay.  You might experiment  a
        little if you want to, but bon't spend too much time here. We'll explain
        more on the next page.
      U3L19 - three basic ops of variables_instruction: "Do this:\r\nWe've given\nyou the three lines of code shown in the previous page.  Add three lines of\ncode just below the ones shown here to make your own variable, assign it a\nvalue and write it to the screen.  NOTE: change the variable name from the\ndefault x to something else.\r\n"
      U3L19 - try out console log_instruction: "Try out console.log.  Do this: replace\nthe statement write(\"foo is: \" + foo) with console.log(\"foo is: \" + foo).  Run\nthe program and you should see the output show up in the console area below\nthe workspace.  Then try adding a few more console.log statements.  Display\nsome text.  Make another variable and display that.  \r\nThe app screen will\nbe blank -- that's the point.  With console.log you can test output behind\nthe scenes in a way the user cannot see.  \r\n\r\n\r\nGIF: U3L19-useconsolelog.gif"
      U3L19 - up down count practice app_instruction: |
        This app is only SLIGHTLY
        different from the previous one, but much more dynamic.  See if you can figure
        out how and why the count is going up.  Once you've figured it out then you
        should be able to DO THIS: add a button to the app that when clicked makes
        the count go down, and updates the label.  When you're done the app should
        work as shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - updating variables pt1_instruction: |
        This app is only SLIGHTLY different
        from the previous one, but much more dynamic.  See if you can figure out how
        and why the count is going up.  Once you've figured it out then you should
        be able to DO THIS: add a button to the app that when clicked makes the count
        go down, and updates the label.  When you're done the app should work as
        shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - variable reassignment challenge pt2_instruction: |
        We've given you
        the code from the previous page.  Right now, because the code only sets the
        values of variables, the app doesn't display anything. DO THIS: insert write
        or console.log statements into the code to figure out what the values of a,
        b, and c are after the code has executed.  You should have first made a prediction
        to see if your mental model of how the computer works is correct.  We'll
        ask for the answer on the next page.
      U3L19 - variable scope problem 2_instruction: |
        First run the program to see
        the problem.  You don't need to write code to solve any problem here.  But
        you do need to investigate the code and come up with an explanation for WHY
        what's happening is happening.  Why aren't 3 things being written to the
        screen?  Why does the variable foo seem to exist once but not the other times?  If
        you switch to code mode you'll see some warning messages next to two lines
        of code -- why do you get those messages?  Once you think you have a good
        answer, continue to the next page.
      U3L19 - variable scoping problem debugging_instruction: |
        Here is the code from
        previous page that has a subtle problem with it.  FIRST: run the app and try
        it to see the problem. NOTE: NaN stands for "Not a Number".   DO THIS: figure
        out what's happening, where, and fix the problem.  We'll explain the issue
        on the next page. 
      U3L19 - write var and string with same name_instruction: |
        Now look at this
        example. We’ve added another write statement.  Before you run the code, see
        if you can predict what the output will be.  Seriously, write it down. THEN
        run the code, mess with it if you like, and continue to the next page for
        an explanation.
      U3L2 Using Simple Commands_instruction: |
        Draw a square above and to the left
        of the turtle's starting position. Click to see full instructions.
      U3L23 Chatbot Conditionals 1_instruction: |
        Adjust the "if" block to make
        the bot respond "That's the color of the sky!" if the user inputs the color
        "blue".
      U3L23 Chatbot Intro 1a_instruction: |
        Store the user's input inside a variable
        and log it to the console.
      U3L23 Chatbot Intro 2_instruction: |
        Use string concatenation to store the user's
        input and assistant's answer into the conversation variable using the format
        "User: <input><bot name>: <default response>" . Log the conversation to
        the console.
      U3L23 Chatbot Intro 2a_instruction: |
        Display the conversation onto the "text_area"
        element. Optional: clear the user's input after every "change" event.
      U3L23 Chatbot Intro 3_instruction: |
        Add newline characters "\
        " to separate
        the user's input and the computer's response.
      U3L23 Chatbot Intro 4_instruction: |
        Use this level to make your chatbot look
        and work better!
      U3L23 Chatbot Intro_instruction: |
        Choose a specialization topic for your digital
        assistant. Create a basic digital assistant that takes the user's input and
        displays back a default response.
      U3L23 Digital Assistant 1_instruction: |
        Set the text_area element to display
        the user's input from the text_input element.
      U3L23 Digital Assistant 2_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 3_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 4_instruction: |
        Display the user's input and the digital
        assistant's response on different lines.
      U3L23 Digital Assistant 5_instruction: |
        Start the user's command with the
        phrase "User:" and the digital assistant's response with the phrase "Bot:"
      U3L23 Digital Assistant 6_instruction: |
        When the user hits Run, display the
        text "I'm a generic digital assistant. Ask me anything!"
      U3L24 Basic String Parsing 1_instruction: |
        Use the function "userInput.indexOf(<food>)"
        to check if the strings "pizza" or "soup" are anywhere in the user's
        response.
      U3L24 Chatbot Basic Conditionals_instruction: |
        Add a chained conditional with
        at least 3 "else if" statements to your personal assistant.
      U3L24 Chatbot Conditionals 2_instruction: |
        Adjust the "if" block to make
        the bot respond "I don't know that color." if the user types anything besides
        "blue"
      U3L24 Chatbot Conditionals 3_instruction: |
        Adjust the "if/else" block to
        make the bot respond to the colors blue, red, and green, and to two additional
        colors.
      U3L24 Chatbot Keyword Record_instruction: |
        Use the next level to record your
        digital assistant's keywords/phrases.
      U3L24 Chatbot Nested Conditionals_instruction: |
        Add a chained conditional with
        at least 3 "else if" statements to your personal assistant.
      U3L24 Nested Conditionals 1_instruction: |
        Replace all instances of `str.indexOf("word")`
        with a function `contains(sentence, word)` that returns true if the word is
        in the sentence and returns false otherwise.
      U3L24 Nested Conditionals 2_instruction: |
        Use a nested conditional to respond
        to the category "pizza" and the details "Hawaiian," "vegan," and "meat."
      U3L24 Nested Conditionals Bugs 2_instruction: |
        Fix the bugs that still exist
        in this program. Prove that the program works correctly.
      U3L24 Nested Conditionals Bugs 3_instruction: |
        Fix the bugs that still exist
        in this program. Prove that the program works correctly.
      U3L24 Nested Conditionals Bugs_instruction: |
        Expose the bugs in this problem
        by typing inputs into the user-input box. Track which inputs cause unexpected
        outputs.
      U3L25 Chatbot Strings_instruction: |
        1. Adjust your digital assistant to evaluate
        inputs the same way whether the inputs are capitalized or lowercase. 2. If
        a user asks "What is <phrase>?", where <phrase> is an input your digital
        assistant does not recognize, make your digital assistant respond "I don't
        know what <phrase> is."
      U3L25 String Parsing 1_instruction: |
        Given the string "Wisdom begins with
        wonder." what is the index of the following characters W, t, w, ., d, and
        k? Confirm your expectation using the string.indexOf() function.
      U3L25 String Parsing 2_instruction: |
        Use str.length to find the length of the
        strings “Hello World”, “Computer science rocks!", and “I promise to do my
        homework every day.”
      U3L25 String Parsing 3_instruction: |
        Write a password length checker that writes
        “yes” to the console if a string has a length greater than 10, or “no” if
        it is less than or equal to 10.  Test your function using two strings, one
        that will satisfy each conditional option.
      U3L25 String Parsing 4_instruction: |
        You are given the string "Wisdom begins
        with wonder." Use the string.substring(begin, end) function to print "begin"
        and "nder" to the console.
      U3L25 String Parsing 5_instruction: "Fill in the function, findBeginNder()\nto get the strings \"begin\" and \"nder\" from a sentence no matter where\nin the sentence they exist.\r\nPrint the strings and their index to the console.\n"
      U3L25 String Parsing 6_instruction: |
        Write a function that takes a name (first
        last) and reorders it (last, first).
      U3L25 String Parsing 7_instruction: |
        You are given the string “The earth has
        music for those who listen.” Manipulate it using the functions str.toUpperCase()
        and str.toLowerCase().
      U3L26 AND operator_instruction: |
        Inside the findingNemo function, write a conditional
        statement that detects if a command contains all the phrases "2000" "animated"
        and "G-rated." The function should return true if the above conditions are
        met and return false otherwise
      U3L26 Chatbot Compound Conditionals_instruction: |
        Update your digital assistant
        to include at least one each of AND, OR, and NOT
      U3L26 Chatbot Final_instruction: |
        Update your digital assistant to include
        at least one each of AND, OR, and NOT
      U3L26 Compound Logic_instruction: |
        Write a conditional statement that detects
        if a command contains all the phrases "2000" "animated" and "G-rated."
        If all these phrases are detected, make Movie Bot respond "The top grossing
        animated and G-rated film in the 2000 decade was Finding Nemo."
      U3L26 NOT operator_instruction: |
        Write a conditional statement that detects
        if a command does not contain the phrase "bad." If "bad" is not detected,
        make Movie Bot respond normally. Otherwise, make Movie Bot respond "Sorry,
        I don't know about bad movies." 
      U3L26 OR operator_instruction: |
        Inside the isBest function, write a conditional
        statement that detects if a command contains at least one of the phrases "all
        time" "all-time" "overall" or "millennium." The function should return
        true if the above conditions are met and return false otherwise
      U3L27 Chatbot Final_instruction: |
        Make your digital assistant awesome and when
        you are finished, ask one of your classmates to test it for you using the
        activity guide. As you add features to your digital assistant, track them
        on the next level.
      U3L2_Turtle3by3Grid_instruction: |
        Draw a 3x3 grid to the front and right of
        the turtle as efficiently as possible. The turtle should end at its original
        location, facing its original direction. (Click to see full instructions)
      U3L2_TurtleSquare_right_instruction: |
        Draw a square ABOVE and to the RIGHT
        of the starting location. (Click to show full instructions)
      XML Scratchpad_instruction: Using this test level to grab xml for unit tests
