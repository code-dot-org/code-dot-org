tr:
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Kod saatinin ilk dakikalarına hoş geldin! Hadi, beraber programlamanın ilk zevkli adımlarını atalım.
      2:
        image: notes/hoc1_2.jpg
        text: "Kod yazmak için blokları sürükleyip bırakacağınız bir görsel programlama dili olan Blockly'i kullanacağız."
      3:
        image: notes/hoc1_3.jpg
        text: 'Çoğu kod yazılır, fakat Blockly görseldir. Her blok "gerçek" bir kod satırına karşılık gelir.'
      4:
        image: notes/hoc1_4.jpg
        text: Bilgisayar biliminin temellerini, Mars aracını kontrol etmekten uygulamalar yapmaya kadar her yerde kullanılan kavramları öğreneceksiniz.
      5:
        image: notes/hoc1_5.jpg
        text: Bir program, bilgisayarınızın takip etmesi için yaratılmış bir talimatlar kümesidir.
      6:
        image: notes/hoc1_6.jpg
        text: İlk programınızın amacı, Yeşil Domuzu vurmak için labirent aracılığıyla bir Angry Bird elde etmektir.
      7:
        image: notes/hoc1_7.jpg
        text: Sol taraf programın çalıştığı labirenttir. Her bulmaca için talimatlar labirent altındadır.
      8:
        image: notes/hoc1_8.jpg
        text: Ortadaki araç kutusu Angry Bird için komutlara sahiptir. Kodunuzu oluşturmak için bunları kullanacaksınız.
      9:
        image: notes/hoc1_9.jpg
        text: Sağ taraf, programınızı inşa etmek için araç kutusundan blok sürükleyeceğiniz çalışma alanıdır. Blok silmek için, bloğu köşedeki çöp kutusuna sürükleyin.
      10:
        image: notes/hoc1_10.jpg
        text: 'Her blok bir talimattır. Eğer "ileri taşı" bloğunu çalışma alanına sürükleyip "Programı Çalıştır"a basarsanız, kuş labirent üzerinde bir boşluk hareket eder.'
      11:
        image: notes/hoc1_11.jpg
        text: To do more than one action, you can drag many blocks to your workspace and attach them together. The bird will do the commands from top to bottom.
      12:
        image: notes/hoc1_12.jpg
        text: 'Eğer bir programı çalıştırmak ve düzeltme yapıp tekrar denemek istiyorsanız "Sıfırla" düğmesine basın.'
      13:
        image: notes/hoc1_13.jpg
        text: Haydi gidip oradaki domuzları alalım!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Merhaba, ben JR! Her yarış araba takımı kazanmak için bilgisayar mühendislerine ihtiyaç duyar. Arabanın daha hızlı gitmesi için verileri analiz eder.
      2:
        image: notes/stage5_2.jpg
        text: Bu bulmacalarda, gidebildikleri yere kadar giden çizgileri çizen sanatçı olacaksınız.
      3:
        image: notes/stage5_3.jpg
        text: 'Bu blok "100 piksel ilerle" diyor. Pikseller, ekranındaki ufacık noktalardır.'
      4:
        image: notes/stage5_4.jpg
        text: 'Bu blok " 90 derece dönün." diyor. Bu senin sanatçı "dönüş" olarak aynı miktarda labirent bulmacalar engeller dönecek.'
      5:
        image: notes/stage5_5.jpg
        text: Click on the arrow in either of these blocks to change the amount the artist moves forward or turns. Play around to get familiar with these new blocks.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Merhaba, ben Paola! Bu bulmacalarda sen, arazisini dümdüz yapıp ekinler dikmek isteyen bir çiftçisin.
      2:
        image: notes/stage9_2.jpg
        text: Ona çamur yığınlarını kaldırmak ve tüm delikleri doldurmak için yardım etmelisin.
      3:
        image: notes/stage9_3.jpg
        text: The new blocks remove 1 shovelful of dirt from a pile and fill in 1 shovelful of dirt to a hole.
      4:
        image: notes/stage9_4.jpg
        text: Farklı boyutlarda yığın ve delikler olduğu için çiftçiye kaç kürek dolusu toprak kullanacağını/alacağını söylemelisin.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: "Hi, I'm Katie! One of the most exciting things about computer science is that a computer program can be interactive."
      2:
        image: notes/flappy02.jpg
        text: "Any time somebody clicks or taps or types on a computer or phone, that generates an EVENT, and there's some code that decides what to do when an EVENT occurs."
      3:
        image: notes/flappy03.jpg
        text: 'For example, you could have an EVENT-HANDLER that says "when the mouse is clicked, play a sound" '
      4:
        image: notes/flappy04.jpg
        text: "Have you ever heard of the game FlappyBird? By using Event handlers, we're going to learn to program our own custom version of FlappyBird!"
      5:
        image: notes/flappy05.jpg
        text: "The code you'll write involves dragging and dropping blocks that represent commands for the computer. Under the hood, each of these blocks is represented by real code."
      6:
        image: notes/flappy06.jpg
        text: 'If you take a look at the workspace, there are some green blocks that are filled in for you - these are "event handlers" '
      7:
        image: notes/flappy07.jpg
        text: 'If you want the bird to FLAP when you CLICK the mouse, you can do that by attaching the "FLAP" block to the appropriate event handler, and now in your game whenever you click the mouse, the bird will flap.'
      8:
        image: notes/flappy08.jpg
        text: "In each puzzle of this activity we'll introduce new types of events as green blocks on the workspace, and you can decide the appropriate blocks to add in response to those events."
      9:
        image: notes/flappy09.jpg
        text: 'When you see a drop down arrow like this, that means you can change the settings - like what sound to play when flappy hits the ground.'
      10:
        image: notes/flappy10.jpg
        text: "In the final puzzle you'll be able to create your own game and share it with your friends. Have fun!"
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Merhaba, ben Mark! Haydi döngüleri öğrenelim. Döngüleri kullanarak, bir bilgisayara herhangi bir komut dizisini defalarca tekrar etmesini söyleyebilirsiniz, hatta binlerce ve milyarlarca kez.
      2:
        image: notes/hoc2_2.jpg
        text: Bu bulmacada, domuzu almak için kuşu 5 boşluk ileri hareket ettirmek istiyoruz.
      3:
        image: notes/hoc2_3.jpg
        text: 'Biz bize yardımcı olması için yeni "tekrar" bloğunu kullanabiliriz.'
      4:
        image: notes/hoc2_4.jpg
        text: '5 "ilerle" blogunu dışarı sürüklemek yerine...'
      5:
        image: notes/hoc2_5.jpg
        text: '"İlerle" blogunu "tekrar" blogunun içine koyabilir ve blogun içine kaç kez tekrarlaması gerektiğini gösteren bir sayı yazabiliriz.'
      6:
        image: notes/hoc2_6.jpg
        text: 've bu önemli: "Tekrar" blogunun içine birden fazla komut yerleştirebiliriz.'
      7:
        image: notes/hoc2_7.jpg
        text: 'Yeni "Tekrar" blogunu kullanmanın keyfini çıkar!'
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: |-
          Merhaba, ben Chris . Miami Heat'e katılmadan önce Bilgisayar Bilimleri Eğitim için Georgia Tech 'e gittim. Hadi bizim yeni "tekrar et" bloğumuzu deneyelim.
      2:
        image: notes/hoc3_2.jpg
        text: Eğer kuşun domuzu alması için gitmesi gereken uzaklığı bilmeseydik?
      3:
        image: notes/hoc3_3.jpg
        text: 'Eğer, "ilerle" blogunu "repeat until" blogunun içine koyarsak, kuş domuzu alana kadar (veya bir duvara çarpana kadar) ilerler.'
      4:
        image: notes/hoc3_4.jpg
        text: 'bu önemli: önceki gibi, "repeat until" blogunun içine birden fazla blok yerleştirebiliriz ve bunların tamamı tekrarlanır.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'Selam, ben Bill! Hadi, yeni bir temel kavram öğrenelim: "eğer" komutları. Bilgisayarlar bu komut ile karar alırlar.'
      2:
        image: notes/hoc4_2.jpg
        text: 'Sen de "eğer" ifadesini her gün kullanıyorsun. Her sabah dışarı çıkmadan önce, EĞER dışarıda yağmur yağıyorsa ceketimi giyinmeliyim, dersin.'
      3:
        image: notes/hoc4_3.jpg
        text: Zombiye solda bir yol olup olmadığını kontrol etmesini, ve EĞER solda bir yol bulursa o yöne dönmesi gerektiğini söyleyebiliriz.
      4:
        image: notes/hoc4_4.jpg
        text: 'Bunun için kod yazmak için, "if" blogunu dışarı sürükle ve bir "sola dön" blogunu onun içine yerleştir.'
      5:
        image: notes/hoc4_5.jpg
        text: 'Şimdi, eğer bunun üzerine bir  "ilerle" blogu ve hepsinin çevresine bir "takrar" blogu koyarsak, zombi her hareket edişinde, solda bir patika olup olmadığını kontrol edecek ve dönecek. "Tekrar" komutu her adımda dönüşü kontrol etmek için çok önemli.'
      6:
        image: notes/hoc4_6.jpg
        text: 'Eğer deyimleri Bilgisayar Biliminde çok önemli. Yazdığım ilk programlardan biri Tic Tac Toe oyunu, ve orada şöyle bir Eğer deyimi vardı:  EĞER bir kişi kazanmak üzereyse, kazanmasını engellemek üzere o noktanın önünü kes.'
      7:
        image: notes/hoc4_7.jpg
        text: '"if" blogunu kullanarak eğlenin!'
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: |-
          Hi, my name is Saloni. I use computer science to help solve problems in health and medicine. Let's learn about the "if else" block. It looks like the "if" block, but it has an extra part at the end that says "else".
      2:
        image: notes/hoc5_2.jpg
        text: |-
          If I put a "move forward" block in the spot where it says "do" and a "turn left" block where it says "else" that means that the zombie will choose between 2 options. IF there is a path ahead, the zombie will move forward, and OTHERWISE (there isn't a path ahead), the zombie will turn left.
      3:
        image: notes/hoc5_3.jpg
        text: |-
          Just like the "if" block, we can put "if else" blocks inside a "repeat" blocks so that the zombie keeps moving and the "if else" block will keep checking if there's somewhere to turn.
      4:
        image: notes/hoc5_4.jpg
        text: Now, get those zombies where they belong!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: "An if-else statement is a decision between two things. Let's see how we can use an if-else statement with our buddy Scrat the squirrel."
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: |-
          This block looks the same as the "if" block, but there's an extra part at the bottom that says "else". If I put a "move forward" block where it says "do" and a "turn left" block where it says "else", that means Scrat the squirrel will move forward if there's a path ahead. If there's not a path ahead, Scrat will turn left.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: |-
          It's making a decision and doing one of the two actions based on that decision. And just like "if" blocks, you can put "if-else" blocks inside "repeat" blocks.
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: "Now let's help Scrat the squirrel get that acorn!"
    function:
      1:
        image: notes/stage13_1.jpg
        text: "Merhaba, Ben Brina, Instagram'ın bir mühendisiyim. Kullanmak istediğiniz belirli kodları tekrar tekrar yazmak yerine, bunun için sadece bir blok kullanabilirsiniz."
      2:
        image: notes/stage13_2.jpg
        text: 'Fonksiyonları tanımlamayı öğreneceğiz. Fonksiyon tanımları köşesinde bir yıldız vardır.  Fonksiyon isimleri üst çizgide yazılıdır.'
      3:
        image: notes/stage13_3.jpg
        text: 'İçeri giden blokların tanımlamaları bize ne yaptıklarını söyler. Yani bu işlev tanımında "5 doldurun" denildi ve "tekrar" blok ve "doldurmak" blok oluşdu.'
      4:
        image: notes/stage13_4.jpg
        text: |-
          The definition sits on the workspace, but our farmer won't run the function until we drag out our "fill 5" function block from functions category.
      5:
        image: notes/stage13_5.jpg
        text: |-
          Let's put the "fun" back in "FUNction!"
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'Selam, ben Makinde! Hadi, "süresince bloğu." hakkında bir şeyler öğrenelim. '
      2:
        image: notes/stage9_6.jpg
        text: 'The "while block" will do whatever you put inside it AS LONG AS the statement on the top is TRUE.'
      3:
        image: notes/stage9_7.jpg
        text: For example, if the farmer is standing on a pile, she will continue to remove 1 shovelful WHILE there is still a pile beneath her.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: "Selam, ben Trina. Pixar'da çalışıyorum. Shrek dahil bir takım film projelerinde görev aldım."
      2:
        image: notes/stage11_2.jpg
        text: 'Bu bizim yeni "sayaç" döngümüz. Her eylemi tekrar ve tekrar gerçekleştirir, sen de bu eylemin her seferinde hafifçe değişmesini sağlayabilirsin.'
      3:
        image: notes/stage11_3.jpg
        text: 'In this example, our "counter" loop says "count with counter from 50 to 90 by 10" and inside it, we have our "draw a square" block. Drag the "counter" block from the "Variables" section into the "length" spot.'
      4:
        image: notes/stage11_4.jpg
        text: "This means our artist is going to draw a square that has 50 pixel length sides, then it will add 10 to that and draw a square with 60 pixel length sides. Then it will keep adding 10 and drawing squares until it reaches 90. So we'll have squares of 50, 60, 70, 80, and 90."
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: "Selam, ben Janete. Zynga'da mühendisim."
      2:
        image: notes/stage15_2.jpg
        text: What if we want to draw a bunch of triangles and have their lengths be different sizes?
      3:
        image: notes/stage15_3.jpg
        text: We could write all that code out by hand or we can use a function with parameters.
      4:
        image: notes/stage15_4.jpg
        text: 'Bunu yapmak için; fonksiyon tanımındaki "draw a triangle" butonuna tıklayın. Daha sonra "isim giriniz" bloğunu "girdi" bloğuna sürükleyin.'
      5:
        image: notes/stage15_5.jpg
        text: |-
          Then if you write "length" in the spot where it says "x" and press "Enter" you'll create a length input for your function.
      6:
        image: notes/stage15_6.jpg
        text: 'Then click on the star. Now, you want to click on the variables category and drag the "length" block into the "move forward" block of your function definition. And drag away the old number block.'
      7:
        image: notes/stage15_7.jpg
        text: 'To use your function with parameters, click on the functions category and drag out your "draw a triangle with length" function.'
      8:
        image: notes/stage15_8.jpg
        text: Şimdi farklı boyutlarda üçgenler çizmek için matematik bloğunu kullanarak farklı numaralar girebilirsin.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: 'Tebrikler! Çözdüğün son bulmacayla, HERHANGİ bir robota - bir zombi, bir kuş, bir mars gezgini ve hatta otomatik bir arabaya- dallara ayrılmayan bir labirentte veya herhangi bir uzunluktaki bir tünelde yolunu nasıl bulacağını söyleyen kodu yazmış oldun.'
      2:
        image: notes/hoc6_2.jpg
        text: "Kullanmış olduğun basit temeller deneyimlediğin ve deneyimleyeceğin her türlü program ve uygulamanın kalbinde yer alır. Tekrar döngülerini, 'kadar tekrarla', 'eğer' ve 'eğer değilse' ifadelerini öğrendik."
      3:
        image: notes/hoc6_3.jpg
        text: "Eğer kod saatinin ilk dakikalarından hoşlandıysanız, bilgisayar bilimi eğitiminize devam etmek için code.org 'u ziyaret edin! 20 saat kursu tamamladığınızda, programlamanın temellerine hakim olacaksınız. Telefon uygulamalarını, robot talimatlarını ve oyunları yazmayı öğreneceksiniz. Bunlarla da sınırlı değil, hayal gücünüz ile sınırlı..."
      4:
        image: notes/hoc6_4.jpg
        text: 'Teknoloji yaptığımız her şeyi değiştiriyor ve genç ya da yaşlı olmanız hiç fark etmez: programlama keyifli ve yaratıcıdır, herkes öğrenebilir!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: Notları gösterme yakında geliyor!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: "Hi, my name is Lyndsey. I model, act, and write my own apps. Let's use code to join Anna and Elsa as they explore the magic and beauty of ice."
      2:
        image: notes/frozen1_2.jpg
        text: "You'll create snowflakes and patterns as you ice skate and make a winter wonderland that you can then share with your friends."
      3:
        image: notes/frozen1_3.jpg
        text: "In the next hour, you're going to learn the basics of how to code. Traditional programming is usually in text, but we'll use Blockly, which uses visual blocks that you can drag and drop to write programs. This is how even university students learn the basics. Under the hood, you're still creating code."
      4:
        image: notes/frozen1_4.jpg
        text: "A program is a set of instructions that tells a computer what to do. Let's build a code, or a program, that will help Elsa create a simple line. We will use this later to create more complex patterns."
      5:
        image: notes/frozen1_5.jpg
        text: "Your screen is split into three main parts. On the left, is the ice surface where you'll run your program. The instructions for each level are written right below the surface."
      6:
        image: notes/frozen1_6.jpg
        text: This middle area is the toolbox, and each of these blocks is an action that Elsa and Anna can do.
      7:
        image: notes/frozen1_7.jpg
        text: |-
          The white space on the right is called the workspace, and this is where we'll build our program. To move around the ice surface, you'll use the "Move Forward" block.
      8:
        image: notes/frozen1_8.jpg
        text: 'Here, the "Move Forward" block says, "move forward by 100 pixels." When we press "Run", what happens? Elsa moves forward a certain amount on the screen, 100 pixels in fact! Pixels are basically very tiny squares on your computer screen.'
      9:
        image: notes/frozen1_9.jpg
        text: 'The other block we have in this puzzle says "turn right by 90 degrees." And when we use this "Turn Right" block, that makes Elsa turn a certain amount. You can play around with how far you want Elsa to turn. The angle is measured from the path ahead of Elsa. So, this is a 90 degree turn. And this is a 120 degree turn.'
      10:
        image: notes/frozen1_10.jpg
        text: Remember, you can change the number of pixels and degrees by clicking the arrows next to them.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: "Hi, I’m Paola! Computers are really good at repeating actions. You can count to 10, 20, or 100. But a computer can count to a billion or a trillion. It won't get bored and it will only take a few seconds. Whether it's counting, or drawing, or anything--computers can repeat things hundreds or even billions of times."
      2:
        image: notes/frozen2_2.jpg
        text: 'In programming, we call this a loop. A loop is how you repeat your code over and over again. For the next puzzle, your goal is to help Anna create a square with the "Repeat" block.'
      3:
        image: notes/frozen2_3.jpg
        text: 'Any blocks of code you put inside the "Repeat" block will be repeated in sequence, as many times as you want.'
      4:
        image: notes/frozen2_4.jpg
        text: 'To draw a square, you can use the "Move Forward" and "Turn Right" block 4 times. But the easier way is to tell the computer to "Move Forward" and "Turn Right by 90 degrees" once, and then tell it to repeat this pair of actions 4 times. To do that, you need to put the "Move Forward" and "Turn Right" block inside a "Repeat" block.'
      5:
        image: notes/frozen2_5.jpg
        text: |-
          Remember, you can change the number in the "Repeat" block to anything, and it will repeat what's inside the block that many times.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Hi, I’m Chris Bosh. I’m a professional basketball player, and I coded in college.
      2:
        image: notes/frozen3_2.jpg
        text: One of the most important concepts in computer science is how to define new commands. Most computer languages have only about 100 words or commands. And really, the art and magic is in defining your own new words out of these building blocks.
      3:
        image: notes/frozen3_3.jpg
        text: "Once you've taught a computer how to do an action once using this sequence of commands, you can make up your own name for that action so it's easy to repeat it later. When you define your own command and give it a name, that's called a function."
      4:
        image: notes/frozen3_4.jpg
        text: "Hi, I’m Jess. When programming with blocks, you would use functions if there are a set of actions you would like to use lots of times. For example, you've written code to create a square."
      5:
        image: notes/frozen3_5.jpg
        text: 'You can define this as a function called "create a square." '
      6:
        image: notes/frozen3_6.jpg
        text: Now you have a new block that you can use multiple times to create multiple squares.
      7:
        image: notes/frozen3_7.jpg
        text: A lot of simple shapes can be used to create more complex patterns. In the next puzzle, the code you recently wrote to make a circle is available to you as a new function that can make circles of different sizes. Can you use it to help Elsa create intricate and beautiful patterns in the snow?
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: "So far you've been making an animation or a story that does the exact same thing every time you run it. Now you can make an interactive game that you can actually play."
      2:
        image: notes/playlab_2.png
        text: |-
          There's the "when arrow" block and the "move actor" block. You can put these blocks together to move the actors around with the arrow keys.
      3:
        image: notes/playlab_3.png
        text: And there are some blocks that do stuff when actors collide or are clicked. Check them out and have fun!
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: "We're going to create games using Play Lab. Good games have a story, and every story has actors. We'll learn how to make our actors like witches, alinens, and animals speak, move, and interact with each other. By the end of this tutorial, you can build a game from scratch and share it with your friends."
      2:
        image: notes/playlab_intro_2.png
        text: Your screen is split into 3 main parts. On the left is the game space where your program will run. The instructions for each level are written below.
      3:
        image: notes/playlab_intro_3.png
        text: "The middle area is the toolbox, and each of these blocks is a piece of code. The white space on the right is called the workspace and this is where we'll build our program."
      4:
        image: notes/playlab_intro_4.png
        text: |-
          To start off, you'll need to link your blocks to the orange "when run" block. You can link multiple blocks together by dragging them out until you see the yellow line, and then they'll snap together.
      5:
        image: notes/playlab_intro_5.png
        text: |-
          In this first puzzle, our actor is a penguin and we'll be making it say "Hello!" by dragging the say block out, linking it to the when run block, and typing in "Hello." We can also make the penguin move by using the move right and move left blocks. Once you have your blocks in place, hit the run button to see what you've programmed.
      6:
        image: notes/playlab_intro_6.png
        text: "Get started and by the end, you'll be able to create your own game with all kinds of players that can interact, turn happy or sad, score points, or throw fireballs, or even vanish each other. It's all up to you and the game you want to make."
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: "Now, we're going to learn about something that all game programmers use everyday. They're called events. An event tells your program to listen for when something happens. When that thing happens, it performs an action."
      2:
        image: notes/playlab_events_2.png
        text: Some examples of events are listening for a mouse click, an arrow button, or a tap on the screen.
      3:
        image: notes/playlab_events_3.png
        text: |-
          Here, we're going to make the space bot greet the earthlings when a player clicks on him. We'll use the "when clicked" block and attach the "say" block to it. When the player clicks on the space bot, everything attached to this "when clicked" event block will be performed. What does your alien say?
      4:
        image: notes/playlab_events_4.png
        text: 'There are also "when arrow" blocks. If you link the "move" blocks to these, you can start to move your actors up, down, left, or right. Step by step, your game is getting more interactive.'
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: 'This is the "repeat forever" block. Anything inside this block will happen forever in the game.'
      2:
        image: notes/playlab_repeat_forever_2.png
        text: |-
          If we want an actor to do something repeatedly, without the player having to do anything, we'll put those blocks inside the "repeat forever" block.
      3:
        image: notes/playlab_repeat_forever_3.png
        text: In this next puzzle, our goal is to help the wizard patrol the boundaries of the kingdom, left and right continuously. Learning how the repeat commands works, will save you a ton of time later when you build your own game.
