tr:
  slides:
    maze_intro:
      1:
        image: 'notes/hoc1_1.jpg'
        text: "Kod saatinin ilk dakikalarına hoş geldin! Hadi, beraber programlamanın ilk zevkli adımlarını atalım."
      2:
        image: 'notes/hoc1_2.jpg'
        text: "Kod yazmak için, blokları sürükleyip bırakacağınız bir görsel programlama dili olan Blockly'i kullanacağız."
      3:
        image: 'notes/hoc1_3.jpg'
        text: "Çoğu kod yazılır, fakat Blockly görseldir. Her blok \"gerçek\" bir kod satırına karşılık gelir."
      4:
        image: 'notes/hoc1_4.jpg'
        text: "Bilgisayar biliminin temellerini, Mars aracını kontrol etmekten uygulamalar yapmaya kadar her yerde kullanılan kavramları öğreneceksiniz."
      5:
        image: 'notes/hoc1_5.jpg'
        text: "Bir program, bilgisayarınızın takip etmesi için yaratılmış bir talimatlar kümesidir."
      6:
        image: 'notes/hoc1_6.jpg'
        text: "İlk programınızın amacı, Yeşil Domuzu vurmak için labirentten geçerek bir Kızgın Kuş elde etmektir."
      7:
        image: 'notes/hoc1_7.jpg'
        text: "Sol taraf programın çalıştığı labirenttir. Her bulmacanın talimatları labirentin altında yer almaktadır."
      8:
        image: 'notes/hoc1_8.jpg'
        text: "Ortadaki araç kutusu Kızgın Kuş için komutlara sahiptir. Kodunuzu oluşturmak için bunları kullanacaksınız."
      9:
        image: 'notes/hoc1_9.jpg'
        text: "Sağ taraf, programınızı inşa etmek için araç kutusundan blok sürükleyeceğiniz çalışma alanıdır. Blok silmek için, bloğu köşedeki çöp kutusuna sürükleyin."
      10:
        image: 'notes/hoc1_10.jpg'
        text: "Her blok bir talimattır. Eğer \"ileri taşı\" bloğunu çalışma alanına sürükleyip \"Programı Çalıştır\"a basarsanız, kuş labirent üzerinde bir boşluk kadar hareket eder."
      11:
        image: 'notes/hoc1_11.jpg'
        text: "Birden fazla eylemi gerçekleştirmek için, birden fazla bloğu çalışma alanına sürükleyebilir ve birbirlerine ekleyebilirsiniz. Kuş komutları yukarıdan aşağıya doğru yapacaktır."
      12:
        image: 'notes/hoc1_12.jpg'
        text: "Eğer bir programı çalıştırmak ve düzeltme yapıp tekrar denemek istiyorsanız \"Sıfırla\" düğmesine basın."
      13:
        image: 'notes/hoc1_13.jpg'
        text: "Haydi gidip oradaki domuzları alalım!"
    artist_intro:
      1:
        image: 'notes/stage5_1.jpg'
        text: "Merhaba, ben JR! Her yarış arabası takımı, kazanmak için bilgisayar mühendislerine ihtiyaç duyar. Onlar arabanın daha hızlı gitmesi için verileri analiz eder."
      2:
        image: 'notes/stage5_2.jpg'
        text: "Bu bulmacalarda, gidebildikleri yere kadar giden çizgileri çizen sanatçı olacaksınız."
      3:
        image: 'notes/stage5_3.jpg'
        text: "Bu blok \"100 piksel ilerle\" diyor. Pikseller, ekranındaki ufacık noktalardır."
      4:
        image: 'notes/stage5_4.jpg'
        text: "Bu blok \" 90 derece dönün.\" diyor. Bu senin sanatçını bulmacada \"dönüş\" sayısı kadar döndürecek."
      5:
        image: 'notes/stage5_5.jpg'
        text: "Sanatçının ileri veya dönüşler hareket sayısını değiştirmek için bu blokların birinde yer alan aşağı oka tıklayın. Bu yeni blokları tanımak için onlar ile bol miktarda oynayın."
    farmer_intro:
      1:
        image: 'notes/stage9_1.jpg'
        text: "Merhaba, ben Paola! Bu bulmacalarda sen, arazisini dümdüz yapıp ekinler ekmek isteyen bir çiftçisin."
      2:
        image: 'notes/stage9_2.jpg'
        text: "Ona çamur yığınlarını kaldırmak ve tüm delikleri doldurmak için yardım etmelisin."
      3:
        image: 'notes/stage9_3.jpg'
        text: "Yeni bloklar, bir kürek dolusu toprağı yığından alıp deliğe doldurur."
      4:
        image: 'notes/stage9_4.jpg'
        text: "Farklı boyutlarda yığın ve delikler olduğu için çiftçiye kaç kürek dolusu toprak atması gerektiğini söylemelisin."
    flappy_intro:
      1:
        image: 'notes/flappy01.jpg'
        text: "Merhabai Ben Katie! Bilgisayar bilimi hakkında en heyecan verici şeylerden birisi bilgisayar programının etkileşimli olabilmesidir."
      2:
        image: 'notes/flappy02.jpg'
        text: "Her zaman birileri tıkladığında veya bir bilgisayar veya telefonla musluklar veya türleri, bu bir OLAY oluşturur ve bir olay meydana geldiğinde ne yapacağını karar bazı kod var."
      3:
        image: 'notes/flappy03.jpg'
        text: "Örneğin sizin bir \"farenin tuşuna basıldığında, ses çal\" OLAY-TETİKLEYİCİ'niz olabilir "
      4:
        image: 'notes/flappy04.jpg'
        text: "FlappyBird oyununu hiç duydunuz mu? Olay tetikleyicileri kullanarak kendimize özel FlappyBird programı geliştirmeyi öğreneceğiz!"
      5:
        image: 'notes/flappy05.jpg'
        text: "Sürükle bırak yöntemi ile blokları kullanarak program geliştireceksiniz, bu bloklar bilgisayar komutlarına tekabül edecek. Esasında bu blokların arkasında gerçek kod parçacıkları bulunmaktadır. "
      6:
        image: 'notes/flappy06.jpg'
        text: "Çalışma alanına göz atarsanız, sizin için doldurulmuş olan bazı yeşil bloklar göreceksiniz - bunlar \"olay işleyicileri\"dir. "
      7:
        image: 'notes/flappy07.jpg'
        text: "Fareyi tıkladığınızda kuşun kant ÇIRPMAsını istiyorsanız, olay işleyicisine \"ÇIRP\" bloğunu ekleyerek yapabilirsiniz, bu durumda oyununuzda fare ile kuşa tıklandığında kuş kanat çırpma hareketi yapacaktır."
      8:
        image: 'notes/flappy08.jpg'
        text: "Bu faliyetin her bulmacasında size yeni yeşil bloklar ile ifade edilen yeni tür olayları tanıtacağız ve bu bloklar için siz uygun olan olayları belirleyip çalışma alanına yerleşriyor olacaksınız."
      9:
        image: 'notes/flappy09.jpg'
        text: "Aşağı açılır menüde içinde buna benzer aşağı işret eden ok gördüğünüzde, flappy yere çarptığında çıkarttığı sesi değiştirebileceğiniz anlamına gelmekte."
      10:
        image: 'notes/flappy10.jpg'
        text: "Son bulmacada kendi oyununuzu oluşturup arkadaşlarınız ile paylaşabileceksiniz.\nİyi eğlenceler!"
    loop_times:
      1:
        image: 'notes/hoc2_1.jpg'
        text: "Merhaba, ben Mark! Haydi döngüleri öğrenelim. Döngüleri kullanarak, bir bilgisayara herhangi bir komut dizisini defalarca tekrar etmesini söyleyebilirsiniz, hatta binlerce ve milyarlarca kez."
      2:
        image: 'notes/hoc2_2.jpg'
        text: "Bu bulmacada, domuzu almak için kuşu 5 boşluk ileri hareket ettirmek istiyoruz."
      3:
        image: 'notes/hoc2_3.jpg'
        text: "Bize yardımcı olması için yeni \"tekrar\" bloğunu kullanabiliriz."
      4:
        image: 'notes/hoc2_4.jpg'
        text: "5 \"ilerle\" blogunu dışarı sürüklemek yerine..."
      5:
        image: 'notes/hoc2_5.jpg'
        text: "\"İlerle\" blogunu \"tekrar\" blogunun içine koyabilir ve blogun içine kaç kez tekrarlaması gerektiğini gösteren bir sayı yazabiliriz."
      6:
        image: 'notes/hoc2_6.jpg'
        text: 've bu önemli: "Tekrar" blogunun içine birden fazla komut yerleştirebiliriz.'
      7:
        image: 'notes/hoc2_7.jpg'
        text: "Yeni \"Tekrar\" blogunu kullanmanın keyfini çıkar!"
    loop_until:
      1:
        image: 'notes/hoc3_1.jpg'
        text: "Merhaba, ben Chris . Miami Heat'e katılmadan önce Bilgisayar Bilimleri Eğitim için Georgia Tech 'e gittim. Hadi bizim yeni \"tekrar et\" bloğumuzu deneyelim."
      2:
        image: 'notes/hoc3_2.jpg'
        text: "Eğer kuşun domuzu alması için gitmesi gereken uzaklığı bilmeseydik?"
      3:
        image: 'notes/hoc3_3.jpg'
        text: "Eğer, \"ilerle\" blogunu \"kadar tekrarlayın\" blogunun içine koyarsak, kuş domuzu alana kadar (veya bir duvara çarpana kadar) ilerler."
      4:
        image: 'notes/hoc3_4.jpg'
        text: 'Bu önemli: önceki gibi, "kadar tekrarlayın" blogunun içine birden fazla blok yerleştirebiliriz ve bunların tamamı tekrarlanır.'
    if:
      1:
        image: 'notes/hoc4_1.jpg'
        text: 'Merhaba, ben Bill! Yeni bir temel kavram öğrenelim: "Eğer" deyimleri. Bunlar bilgisayarların nasıl karar aldığını gösterir.'
      2:
        image: 'notes/hoc4_2.jpg'
        text: "Sen de \"eğer\" ifadesini her gün kullanıyorsun. Her sabah dışarı çıkmadan önce, EĞER dışarıda yağmur yağıyorsa ceketimi giyinmeliyim, dersin."
      3:
        image: 'notes/hoc4_3.jpg'
        text: "Zombiye solda bir yol olup olmadığını kontrol etmesini, ve EĞER solda bir yol bulursa o yöne dönmesi gerektiğini söyleyebiliriz."
      4:
        image: 'notes/hoc4_4.jpg'
        text: "Bunun için kod yazmak için, \"if\" blogunu dışarı sürükle ve bir \"sola dön\" blogunu onun içine yerleştir."
      5:
        image: 'notes/hoc4_5.jpg'
        text: "Şimdi, eğer bunun üzerine bir  \"ilerle\" blogu ve hepsinin çevresine bir \"takrar\" blogu koyarsak, zombi her hareket edişinde, solda bir patika olup olmadığını kontrol edecek ve dönecek. \"Tekrar\" komutu her adımda dönüşü kontrol etmek için çok önemli."
      6:
        image: 'notes/hoc4_6.jpg'
        text: "Eğer deyimleri Bilgisayar Biliminde çok önemli. Yazdığım ilk programlardan biri Tic Tac Toe oyunu, ve orada şöyle bir Eğer deyimi vardı:  EĞER bir kişi kazanmak üzereyse, kazanmasını engellemek üzere o noktanın önünü kes."
      7:
        image: 'notes/hoc4_7.jpg'
        text: "\"if\" blogunu kullanarak eğlenin!"
    if_else:
      1:
        image: 'notes/hoc5_1.jpg'
        text: "Selam, benim adım Saloni. Bilgisayar bilimlerini sağlıksal ve tıbbi sorunları çözmeye yardımcı olmak için kullanıyorum. Hadi \"if else\" bloğu hakkında bir şeyler öğrenelim. \"if\" bloğu gibi görünüyor ama sonunda \"else\" diyen fazladan bir parçası var."
      2:
        image: 'notes/hoc5_2.jpg'
        text: "Eğer \"yap\" diyen noktaya \"ilerle\" blogu ve \"ya da\" diyen noktaya da \"sola dön\" blogu yerleştirirsem bu demektir ki zombi iki seçenekten birini seçecektir. EĞER önünde yol varsa, zombi ileri hareket edecek, aksi takdirde (önünde yol yoksa), zombi sola dönecektir."
      3:
        image: 'notes/hoc5_3.jpg'
        text: "\"eğer\" bloğunda olduğu gibi, tekrar bloğuna \"eğer değilse\" bloğu da ekleyebiliriz, bu durumda zombi hareket etmeye devam edecek ve \"eğer değilse\" bloğu farklı bir yöne dönüp dönemeceğini kontrol edecek."
      4:
        image: 'notes/hoc5_4.jpg'
        text: "Şimdi, bu zombileri ait oldukları yere yerleştir!"
    if_else_scrat:
      1:
        image: 'notes/saloni_ifelse_scrat1.jpg'
        text: "\"eğer değilse\" ifadesi iki şeyin arasında bir karardır. Dostumuz sincap Scrat ile \"eğer başka\" ifadesiniz nasıl kullanabileceğimizi görelim."
      2:
        image: 'notes/saloni_ifelse_scrat2.jpg'
        text: "Bu blok \"if\" bloğunun aynısı gibi gözükmektedir fakat \"else\" diye fazladan bir bölüm bulunmaktadır. Eğer \"yap\" diyen noktaya \"ilerle\" blogu ve \"ya da\" diyen noktaya da \"sola dön\" blogu yerleştirirsem bu demektir ki sincap Scrat önünde yol varsa ilerleyecek, önünde yol yoksa Scrat sola dönecektir."
      3:
        image: 'notes/saloni_ifelse_scrat3.jpg'
        text: "Bu bir karar alma eylemidir ve bu karara göre iki eylemden biri uygulanır. Ve \"Eğer\" blokları gibi \"eğer değilse\" blokları \"tekrar\" blokları içine koyabilirsin."
      4:
        image: 'notes/saloni_ifelse_scrat4.jpg'
        text: "Ve şimdi sincap Scrat'a o meşe palamudunu alması için yardım edelim!"
    function:
      1:
        image: 'notes/stage13_1.jpg'
        text: "Merhaba, Ben Brina, Instagram'ın bir mühendisiyim. Kullanmak istediğiniz belirli kodları tekrar tekrar yazmak yerine, bunun için sadece bir blok kullanabilirsiniz."
      2:
        image: 'notes/stage13_2.jpg'
        text: "Fonksiyonları tanımlamayı öğreneceğiz. Fonksiyon tanımları köşesinde bir yıldız vardır.  Fonksiyon isimleri üst çizgide yazılıdır."
      3:
        image: 'notes/stage13_3.jpg'
        text: "İçeri giden blokların tanımlamaları bize ne yaptıklarını söyler. Yani bu işlev tanımında \"5 doldurun\" denildi ve \"tekrar\" blok ve \"doldurmak\" blok oluşdu."
      4:
        image: 'notes/stage13_4.jpg'
        text: "Tanımlama çalışma alanının üzerindedir, ama çiftçimiz, biz ''5 doldur\" fonksiyonu bloğunu işlev kategorisinden sürükleyene kadar fonksiyonu çalıştıramayacaktır."
      5:
        image: 'notes/stage13_5.jpg'
        text: "Let's put the \"fun\" back in \"FUNction!\""
    loop_while:
      1:
        image: 'notes/stage9_5.jpg'
        text: "Selam, ben Makinde! Hadi, \"süresince bloğu.\" hakkında bir şeyler öğrenelim. "
      2:
        image: 'notes/stage9_6.jpg'
        text: "\"süresince bloğu\" bloğunun içerisine konulanlar üstündeki koşul geçerli olduğu sürece tekrarlanmaya devam eder."
      3:
        image: 'notes/stage9_7.jpg'
        text: "Örnek olarak, eğer çiftçi bir yığının üstünde duruyor ise, altındaki yığını SÜRESİNCE birer birer kürekdolusu kaldırmaya devam edecek."
    loop_for:
      1:
        image: 'notes/stage11_1.jpg'
        text: "Selam, ben Trina. Pixar'da çalışıyorum. Shrek dahil bir takım film projelerinde görev aldım."
      2:
        image: 'notes/stage11_2.jpg'
        text: "Bu bizim yeni \"sayaç\" döngümüz. Her eylemi tekrar ve tekrar gerçekleştirir, sen de bu eylemin her seferinde hafifçe değişmesini sağlayabilirsin."
      3:
        image: 'notes/stage11_3.jpg'
        text: "Bu örnekte,\"sayaç\" döngümüz bize döngü içerisinde \"sayacın 50'de 90' a kadar 10'ar 10'ar sayacak\" oluğunu anlatıyor. \"Kare çiz\" bloğumuza sahibiz. \"Değişkenler\" bölümünden \"sayaç\" bloğunu \"uzunluk\" noktasına sürükleyin."
      4:
        image: 'notes/stage11_4.jpg'
        text: "Bu, sanatçımızın 50 pixel kenar uzunluğuna sahip bir kare çizeceği, daha sonra buna 10 ekleyerek 60 pixel kenar uzunluğuna sahip bir kare çizeceği anlamına geliyor. Daha sonra 90'a ulaşıncaya kadar 10 eklemeye devam edip kare çizmeye devam eder. Böylece uzunluğu 50, 60, 70, 80 ve 90 olan karelere sahip oluruz."
    parameters:
      1:
        image: 'notes/stage15_1.jpg'
        text: "Selam, ben Janete. Zynga'da mühendisim."
      2:
        image: 'notes/stage15_2.jpg'
        text: "Eğer kenar uzunlukları farklı bir grup üçgen çizmek istesek ne olur?"
      3:
        image: 'notes/stage15_3.jpg'
        text: "Tüm bu kodu elimizle yazabiliriz ya da parametre ile birlikte fonksiyon kullanabiliriz."
      4:
        image: 'notes/stage15_4.jpg'
        text: "Bunu yapmak için; fonksiyon tanımındaki \"draw a triangle\" butonuna tıklayın. Daha sonra \"isim giriniz\" bloğunu \"girdi\" bloğuna sürükleyin."
      5:
        image: 'notes/stage15_5.jpg'
        text: "Sonrasında eğer \"x\" yazan yere \"uzunluk\" yazar ve \"Enter\" tuşuna basar iseniz uzunluk işlevi için girdi oluşturmuş olursunuz."
      6:
        image: 'notes/stage15_6.jpg'
        text: "Daha sonra yıldızın üzerine tıklayın. Şimdi, istediğiniz değişkenler kategorisine tıklayın ve \"uzunluk\" blokunu fonksiyon tanımınızdaki \"ilerle\" blokunun içine sürükleyin. Ve eski numara blokunu sürükleyerek kaldırın."
      7:
        image: 'notes/stage15_7.jpg'
        text: "Fonksiyonunuzu parametre ile kullanmak için, fonksiyonlar kategorisine tıkla ve \"uzunlıkla üçgen çiz\" fonksiyonunu sürükle."
      8:
        image: 'notes/stage15_8.jpg'
        text: "Şimdi farklı boyutlarda üçgenler çizmek için matematik bloğunu kullanarak farklı numaralar girebilirsin."
    hoc_wrapup:
      1:
        image: 'notes/hoc6_1.jpg'
        text: "Tebrikler! Çözdüğün son bulmacayla, HERHANGİ bir robota - bir zombi, bir kuş, bir mars gezgini ve hatta otomatik bir arabaya- dallara ayrılmayan bir labirentte veya herhangi bir uzunluktaki bir tünelde yolunu nasıl bulacağını söyleyen kodu yazmış oldun."
      2:
        image: 'notes/hoc6_2.jpg'
        text: "Kullanmış olduğun basit temeller deneyimlediğin ve deneyimleyeceğin her türlü program ve uygulamanın kalbinde yer alır. Tekrar döngülerini, 'kadar tekrarla', 'eğer' ve 'eğer değilse' ifadelerini öğrendik."
      3:
        image: 'notes/hoc6_3.jpg'
        text: "Eğer kod saatinin ilk dakikalarından hoşlandıysanız, bilgisayar bilimi eğitiminize devam etmek için code.org 'u ziyaret edin! 20 saat kursu tamamladığınızda, programlamanın temellerine hakim olacaksınız. Telefon uygulamalarını, robot talimatlarını ve oyunları yazmayı öğreneceksiniz. Bunlarla da sınırlı değil, hayal gücünüz ile sınırlı..."
      4:
        image: 'notes/hoc6_4.jpg'
        text: 'Teknoloji yaptığımız her şeyi değiştiriyor ve genç ya da yaşlı olmanız hiç fark etmez: programlama keyifli ve yaratıcıdır, herkes öğrenebilir!'
    20_wrapup:
      1:
        image: 'notes/bird.png'
        text: "Notları gösterme yakında geliyor!"
    frozen_intro:
      1:
        image: 'notes/frozen1_1.jpg'
        text: "Merhaba, Benim adım Lyndsey. Kendi uygulamalarımı modelliyorum, hareket ettiriyorum ve yazıyorum. Onların buzun büyüsünü ve güzelliğini keşfettiği gibi kod kullanarak Anna ve Elsa'ya katılalım."
      2:
        image: 'notes/frozen1_2.jpg'
        text: "Buzda kaydıkça kar taneleri ve değişik desenler oluşturarak bir kış diyarı yaratabilir ve sonra arkadaşlarınla paylaşabilirsin."
      3:
        image: 'notes/frozen1_3.jpg'
        text: "Bir saat içerisinde, nasıl kod yazılacağının temellerini öğreneceksiniz. Geleneksel programlama yönteminde genellikle metin kullanılır, ama biz Blocky kullanacağız. Blocky ile görsel blokları sürükleyip bırakarak programlar yazabilirsiniz. Üniversite öğrencileri de bu yöntemle programlamanın temellerini öğrenir."
      4:
        image: 'notes/frozen1_4.jpg'
        text: "Program, bilgisayara ne yapacağını söyleyen komutlar dizisidir. Elsa'ya basit bir çizgi oluşturmakta yardımcı olacak bir program yazalım. Bu yazdığımız programı sonra daha karmaşık modeller oluşturmak için kullanacağız."
      5:
        image: 'notes/frozen1_5.jpg'
        text: "Ekranın üç ana parçaya bölünmüş haldedir. Soldaki buzlu yüzeyde programını çalıştırırsın. Her seviye için gerekli açıklamalar bu yüzeyin hemen altında yer alır."
      6:
        image: 'notes/frozen1_6.jpg'
        text: "Orta bölümde alet kutusu yer alır ve her bir küp Elsa ve Anna'nın yapabileceği şeylerdir."
      7:
        image: 'notes/frozen1_7.jpg'
        text: "Ekranın sağında yer alan beyaz alana çalışma alanı deniyor ve programlarımızı bu alanda oluşturacağız. Buzdan oluşan nesneyi hareket ettirebilmek için \"İleriye taşı\" bloğunu göreceksiniz."
      8:
        image: 'notes/frozen1_8.jpg'
        text: "\"İlerle\" küpü diyor ki: \"100 piksel ilerle\". Eğer \"Çalıştır\"a basarsak ne olur? Elsa ekranda belli bir miktar ileriye gider; evet tam 100 piksel! Piksel, bilgisayarınızdaki ya da televizyonunuzdaki görüntüyü oluşturan en minik karedir."
      9:
        image: 'notes/frozen1_9.jpg'
        text: "Bulmacadaki diğer küp diyor ki: \"sağa doğru 90 derece dön\". Bu küpü kullandığımız zaman Elsa belli bir miktar sağa döner. Elsa'nın ne kadar döneceğini değiştirmek için değerlerle biraz oynayabilirsiniz. Açı değeri, Elsa'nın önündeki hareket çizgisine göre ölçülür. Yani, bu bir 90 derecedir ve bu da bir 120 derece."
      10:
        image: 'notes/frozen1_10.jpg'
        text: "Hatırla, yanındaki oklara tıklayarak piksellerin sayısını ve dereceyi değiştirebilirsin."
    frozen_loops:
      1:
        image: 'notes/frozen2_1.jpg'
        text: "Merhaba, Ben Paola! Bilgisayarlar tekrarlayan eylemler konusunda gerçekten çok iyiler. 10, 20 yada 100 kadar sayabilirsin. Ama bir bilgisayar milyara yada trilyona kadar sayabilir. Sıkılmazlar ve sayma işlemi birkaç saniye sürer. Sayar, çizer yada tekrarlayan bir şeyi yüzlerce hatta milyarca kez yapabilir."
      2:
        image: 'notes/frozen2_2.jpg'
        text: "Biz buna programlamada döngü diyoruz. Döngü bir kodunuzun nasıl tekrardan tekrar ettiğidir. Bir sonraki puzzle için hedefiniz Anna' nın \"Tekrar\" bloğu ile bir kare oluşturmasına yardımcı olmaktır."
      3:
        image: 'notes/frozen2_3.jpg'
        text: "'Yenile' bloğu, içine koyduğunuz her kod istediğiniz kadar sırasıyla tekrarlanır."
      4:
        image: 'notes/frozen2_4.jpg'
        text: "Bir kare çizmek için \"ilerle\" ve \"Sağa dön\" bloklarını 4 kez kullanabilirsiniz. Ama daha kolay şekilde yapmak için bilgisayara \"İlerle\" ve \"Sağa doğru 90 derece dön ü bir kere söyleyip aynı komutları 4 defa tekrarlamasını söyleyebilirsiniz. Bunu yapmak için \"İlerle\" ve \"Sağa dön\" bloklarını \"Tekrarla?? kez tekrarla\" bir bloğu içinde koymak gerekir."
      5:
        image: 'notes/frozen2_5.jpg'
        text: "Unutmayın, \"Tekrar\" bloğundaki herşey için sayıyı değiştirebilirsiniz ve bloğun içindekiler sayı kadar tekrar edecektir."
    frozen_functions:
      1:
        image: 'notes/frozen3_1.jpg'
        text: "Merhaba, ben Chris Bosh. Ben bir profesyonel basketbol oyuncusuyum ve üniversitemde kodlama ile uğraşıyorum."
      2:
        image: 'notes/frozen3_2.jpg'
        text: "Bilgisayar Biliminde en önemli kavramlarından biri yeni komut tanımlamadır. Çoğu programlama dillerin yalnızca yaklaşık 100 komutu vardır. Ve gerçekten, işin sırrı bu yapı taşları komutların yanı sıra kendi yeni komutlarını tanımlamadır."
      3:
        image: 'notes/frozen3_3.jpg'
        text: "Bilgisayara bir eylemi nasıl yapacağını komutlar kullanarak öğrettin vede bu eyleme kolay hatırlanır bir isim verin. Bu isim daha sonra kolayca aynı eylemi gerçekleştirmek için kullanılabilir. Bu şekilde kendi komutunu tanımlamaya \"fonksiyon\" denir."
      4:
        image: 'notes/frozen3_4.jpg'
        text: "Merhaba ben Jess, bloklarla programlama yaparken fonksiyonları kullanarak aynı eylemi birçok kere yapabilirsiniz. Örneğin kare yapan bir fonksiyon yazdınız."
      5:
        image: 'notes/frozen3_5.jpg'
        text: "Bunu \"bir kare oluşturun.\" adında bir fonksiyona tanımlayabilirsiniz "
      6:
        image: 'notes/frozen3_6.jpg'
        text: "Şimdi kare yapma işlemini birçok kere yapabileceğiniz yeni bir blok oluşturdunuz."
      7:
        image: 'notes/frozen3_7.jpg'
        text: "Basit şekiller çok daha karmaşık desenleri oluşturmak için kullanılabilir. Sonraki Bulmacada, çember yapmak için yazdığınız fonksiyon size farklı boyutlarda çemberler çizmeniz için kullanabilirsiniz. Elsanın karda karmaşık ve güzel desenler oluşturması için bu fonksiyonu için kullanabilirsiniz?"
    playlab_intro:
      1:
        image: 'notes/playlab_intro_1.png'
        text: "Play Lab'ı kullanarak oyunlar yapacağız. İyi oyunların hikayesi vardır ve her hikayenin de aktörleri vardır. Cadı, uzaylı, hayvan gibi aktörler yaratıp onların ilerlemesini ve birbiri ile iletişime geçmelerini sağlayacağız. Bu öğreticinin sonunda sıfırdan bir oyun yaratıp arkadaşlarımızla paylaşacağız."
      2:
        image: 'notes/playlab_intro_2.png'
        text: "Ekran 3 ana bölüme ayrılmıştır. Sol taraf programınızın çalıştırılacağı oyun alanıdır. Her düzey için talimatlar aşağıda yazılmıştır."
      3:
        image: 'notes/playlab_intro_3.png'
        text: "Ortadaki alan araç kutusu alanıdır. Bu alandaki her bir blok bir parça koda karşılık gelir.\nSağdaki boş alan çalışma alanıdır. Bu alanda kod yazacaksınız."
      4:
        image: 'notes/playlab_intro_4.png'
        text: "Kendi ekleyeceğiniz blokları \"Çalıştığı zaman\" bloğuna bağlamak gerekir. Blokları sürükleyip sarı çizgi çıkana kadar birbirine yaklaştırarak bağlayabilirsiniz."
      5:
        image: 'notes/playlab_intro_5.png'
        text: "Bu ilk bulmacada bizim oyuncu bir penguen ve biz ona \"Merhaba!\" dedirtmek istiyoruz. Bunun içim Söyle bloğunu çekerek \"Çalıştığı Zaman\" bloğuna birleştireceğiz. sonra Söyle bloğuna \"Merhaba.\" yazacağız. Ayrıca Sağa hareket, sola hareket bloklarını kullanarak pengueni hareket ettirebilirsiniz. Blokları yerleştirdikten sonra Çalıştır düğmesine basınız."
      6:
        image: 'notes/playlab_intro_6.png'
        text: "Haydi başla ve sonunda kendi oyununu yarat. Oyununda farklı oyuncular iletişim kurabilir, mutlu yada üzgün olabilir, puan kazanabilir, ateş topu atabilir ve hatta birbirini yok edebilir. Bunların hepsi senin elinde istediğin gibi oyununu yapabilirsin."
    playlab_events:
      1:
        image: 'notes/playlab_events_1.png'
        text: "Şimdi oyun programcılarının her zaman kullandığı \"Olay\" kavramını öğreneceğiz. Olay  bir şey olduğunda bunu algılayıp bu eylemle ilgili eylemi gerçekleştir."
      2:
        image: 'notes/playlab_events_2.png'
        text: "Olay;  fare tıklama, yön tuşuna basma yada ekrana tıklama gibi aktivitelerdir."
      3:
        image: 'notes/playlab_events_3.png'
        text: "Burada, oyuncu uzay gemisine tıkladığında \"Dünyalı,Seni Selamlıyorum!\" diyecek. \"Tıklandığında\" butonunu kullanacağız ve \"De\" butonunu ona ekleyeceğiz. Oyuncu uzay robot'una tıkladığında \"Tıklandığında\" butonuna bağlı olan her şey çalışacak. Peki, senin uzaylın ne diyor?"
      4:
        image: 'notes/playlab_events_4.png'
        text: "Ayrıca \"zaman okları\" parçaları var. Eğer \"hareket\" parçalarını bunlara bağlarsanız, karakterinizi yukarı, aşağı, sola ve sağa hareket ettirmeye başlayabilirsiniz!. Git gide oyununuz daha çok interaktif oluyor."
    playlab_repeat_forever:
      1:
        image: 'notes/playlab_repeat_forever_1.png'
        text: "Bu \"sonsuza dek tekrarla\" bloğu. Bu bloktaki komutlar oyun sonuna dek tekrar edecek."
      2:
        image: 'notes/playlab_repeat_forever_2.png'
        text: "Eğer karakterimizin bir şey yapmasına gerek kalmadan tekrar eden işleri yapmasını istiyorsak, bloklarımızı \"Sonsuz Tekrar\" bloğunun içine koyarız."
      3:
        image: 'notes/playlab_repeat_forever_3.png'
        text: "Sonraki bulmacada, hedefimiz büyücünün krallığın sınırlarında sürekli sol ve sağa giderek devriye gezmesidir. Tekrar komutlarının nasıl çalıştığını öğrenmek, senin kendi oyununu yaparken bir ton zaman kazanmanı sağlayacak."
    C1_artist_intro:
      1:
        image: 'notes/C1_artist_intro_1.png'
        text: "Bunlar senin çizim blokların. Doğru olanı kullanarak sanatçıyı ilerlet ve gri çizgiyi çiz."
      2:
        image: 'notes/C1_artist_intro_2.png'
        text: "Bunlar atla blokları. Bunları kullandığın zaman sanatçı ilerler fakat çizmez. Bu bkokları bir sonraki gri çizgiye ulaşmak için kullan."
    C1_bee_level_intro:
      1:
        image: 'notes/C1_bee_level_intro_1.png'
        text: "Arılar süper havalı değil mi? Bir sonraki bulmacada amacın arıyı çiçeklere ilerletip nektarları toplamak ve peteklere ilerleyip bal yapmaktır. \"Değer Al\" ve \"Yap\" bloklarını kullanacaksın."
      2:
        image: 'notes/C1_bee_level_intro_2.png'
        text: 'Her çiçek farklı sayıda nektar içerir: 1, 2 3 yada daha fazla. Kırmızı çiçekte ne kadar nektar olduğunu alt köşesinde yazmaktadır. Bir sonraki adıma ilerlemeden bütün nektarları topla. Benzer şekilde her bir petek 1, 2, 3 yada daha fazla bal alabilir. Peteklere alabileceği kadar bal koyun.'
      3:
        image: 'notes/C1_bee_level_intro_3.png'
        text: "Eğer bütün nektarları toplarsan ve bütün balları peteklere yaparsan başarılı olmuş olursun ve bir sonraki aşamaya geçersin. akis takdirde bulmacayı tekrar deneyin. Biraz takılarak \"arı\" programcı olmanın nasıl bir şey olduğunu görün!"
    C1_bee_loops:
      1:
        image: 'notes/C1_bee_loops_1.png'
        text: "Döngü aktivitelerin tekrarlanmasıdır.  "
      2:
        image: 'notes/C1_bee_loops_2.png'
        text: "Bu seviyede arının üç nektar toplamasını istiyoruz. üç tane \"Nektar Al\" bloğu kullanmak yerine \"tekrarla\" bloğu kullanıp üç nektar alacağız. İpucu: \"Çalıştır\" tuşuna baş ve doğru yapılmış mı gör. Süperr!"
    C1_bigevent_unplugged:
      1:
        image: 'notes/C1_bigevent_unplugged_1.png'
        text: "Bu derse büyük olay denir. Bunda programlarımızı nasıl denetleyeceğimizi ve aslında bir programın çalışma şeklini bir düğmeye basarak veya bir fare tıklaması gibi olayları kullanarak anında değiştirebileceğimizi göreceğiz."
      2:
        image: 'notes/C1_bigevent_unplugged_2.png'
        text: "Bu ders için bir kağıttan uzaktan kumanda ile kontrol edileceksin. Sanki gerçek zamanlı bir video oyunu gibi."
      3:
        image: 'notes/C1_bigevent_unplugged_3.png'
        text: "Bir olay bir şeyin olmasını sağlayan eylemdir. Bir butona tıkladığında bir internet sitesinin yüklenmesi gibi. Bu bir olaydır. Kaydırmak için tabletine dokunman da bir olaydır. Olaylar kullanıcı programa istediği zaman veya ihtiyacı olduğunda müdahale etmesini sağlar."
      4:
        image: 'notes/C1_bigevent_unplugged_4.png'
        text: "Karşılık vermemiz gereken olaylar vardır. Aç hissettiğimiz zaman buzdolabına gideriz. Bir postacının geldiğini duyduğumuzda ve mektupları posta kutusuna koyduğunda gider ve mektuplarımızı alırız. Bu olaylar aynı bir butona basmak veya bir oyun kolunu hareket ettirmek gibidir. Bu gibi olaylar bizim bir şeyler yapmamızı tetikler."
      5:
        image: 'notes/C1_bigevent_unplugged_5.png'
        text: "Video oyunlarında, \"Güncelle\" adlı bir olay bulunur ve bu olay saniye 30 ya da 60 kez gerçekleşir. Video oyun programcıları için bu butonlardan veya oyun kollarından neredeyse daha önemlidir."
      6:
        image: 'notes/C1_bigevent_unplugged_6.png'
        text: "Ana Karşılaşma için izliyoruz o \"Güncelleştirme\" için doğrulama oluyor. Ve biz doğrulama için joystick'i denetliyoruz. Yani biz, \"Oh, var birisi düğmeye bu çerçeve? Evet ya da Hayır?\" Olaylar, olmadan oyuncu hareket ettiremedim, seni atlamak olamaz, ne olup bittiğini kontrol etmek mümkün değil. Video oyunun da bir şey hareketlendirmek mümkün olmaz."
    C1_building_foundation:
      1:
        image: 'notes/C1_building_foundation_1.jpg'
        text: "Kum heykel bu başarısızlık öğrenmem lazım programın bir parçasıdır. Ama sen devam edersen, hiçbir şey alamayacaksın ama daha iyi ve daha heyecanlı olmalısın. Oyunun adı kalıcıdır. Kalıcılığını seveceksin."
      2:
        image: 'notes/C1_building_foundation_2.jpg'
        text: "Bu ders temel inşa etme olarak adlandırılır. Bu derste, biz gerçekten zor olacak görevlerde çalışacağız. Siz bu bardaklardan en azından birinin uzunluğu kadar olan yapının nasıl yapılacağını ve bu yapı bir kitabın ağırlığını kaldıracak kadar yeterince güçlü olması gerektiğini anlayacaksınız."
      3:
        image: 'notes/C1_building_foundation_3.jpg'
        text: "Eserimizin istenilen sonucu vermediği zamanlar olabilir. Hayal kırıklığına uğradığımız ve pes etmek istediğimiz zamanlar olabilir. Böyle zamanlar çok fazla olabilir. Ama biz çalışmaya devam edersek ve elimizden gelenin en iyisini tekrar tekrar yaparsak, o zaman biz çok geçmeden karşılığını alacağımızdan eminiz."
      4:
        image: 'notes/C1_building_foundation_4.jpg'
        text: "Kalıcılık tamamen, gerçekten pes etmek istediğinizde pes etmemenizle ilgilidir. Eğer gerçekten yeni ve farklı birşey oluşturmak istiyorsanız, yolunuzda bir sürü hata da olacaktır."
      5:
        image: 'notes/C1_building_foundation_5.jpg'
        text: "Kalıcı olmanının yolu hayal kırıklığına uğrayïp bırakmaktansa yoluna devam edip hatalarından ders çıkarmaktan geçer. Hayal kırıklığı aslında yapmaya çalıştığınız şeyin mükemmel birşey olduğu anlamına gelir. Bu yüzden başarmadan işi bırakmayın. Vuhuuu!"
    C1_getting_loopy:
      1:
        image: 'notes/C1_getting_loopy_1.png'
        text: "Merhaba, benim ismim Miral Kotb ve ben iluzyonun kurucusuyum. Benim çalıstığım işte, yaptığımız danslarda ve programlarda ışıklı kıyafetler kullanıyoruz. Ve bunlar döngüler! Döngüler üzerinde tekrarlandıkca harekete geçiyor."
      2:
        image: 'notes/C1_getting_loopy_2.png'
        text: "Birşeyi birçok kez yapınca \"döngü\" yapmış oluyoruz. Aynı benim bu çemberi çevirmek için yaptığım gibi. Bu bir döngü bu bir döngü Ve bu bir döngü."
      3:
        image: 'notes/C1_getting_loopy_3.png'
        text: "Bugün biz bir dans partisi yapacağız. Döngü kullanarak dans edelim. Dans ederek döngüyü öğreneceğiz. Birkaç kolay dans adımı öğrenip onu tekrarlayarak dan edeceğiz."
      4:
        image: 'notes/C1_getting_loopy_4.png'
        text: "İşte öğrenmen gereken adımlar. El çırp. Ellerini kafanın arkasına koy. Ellerini beline koy. Sol elini kaldır. Sağ elini kaldır. Çok kolay değil mi? Döngü kullanarak dans adımlarını azaltabileceğinizi göreceksiniz."
      5:
        image: 'notes/C1_getting_loopy_5.png'
        text: "Aslında dans sırasında döngüleri kullanırız. Dansçılar bilgisayar giyiyor. Hepsi aynı ağda. Işığı aynı dansçılar üzerinde defalarca döngüleyebilirim. döngüler bilgisayar mühendisliğinin en önemli kavramları çünkü yaptığımız işi kısaltırlar."
    C1_happy_maps_unplugged:
      1:
        image: 'notes/C1_happy_maps_unplugged_1.png'
        text: "Bu derse mutlu haritalar denir. Bugün küçük tüylü arkadaşımız \"Florb\" un meyveyi almasını sağlayacağız."
      2:
        image: 'notes/C1_happy_maps_unplugged_2.png'
        text: "Flurb'ünüzün meyveye ulaşmasını sağlayın. Bunu yapabilmek için önce Flurb'ün hangi yöne gideceğine karar verip onu okları kullanarak o yöne yönlendirmeniz gerekir. Flurb'ün elmaya ulaşması için hangi yönde ilerlemesi gerekir?"
      3:
        image: 'notes/C1_happy_maps_unplugged_3.png'
        text: "Orada almak için gitmek zorunda olduğu yönü daire içine al."
      4:
        image: 'notes/C1_happy_maps_unplugged_4.png'
        text: "Çözmeye çalıştığınız haritanın yanına okları yapıştırarak algorıtmanızı geliştirin. İkincisi de ilkinin aynısıdır, fakat aşağı doğru gider."
      5:
        image: 'notes/C1_happy_maps_unplugged_5.png'
        text: "Bu kağıt ile programlama gibi. Ve bu kadar!"
    C1_maze_debugging:
      1:
        image: 'notes/C1_maze_debugging_1.png'
        text: "Hata ayıklama işlemi sorunları bulma ve giderme işlemidir. Sorunlarda hata ayıklamak için birçok yol vardır. En kolay adım adım ilerlemek ve hatalı yere kadar gelmektir. Burada ters parende yapmaya yapmaya çalışıyorum ama düşüp duruyorum."
      2:
        image: 'notes/C1_maze_debugging_2.png'
        text: "Ben her bölümü adım adım yürüdüm ve nerede hatam olduğunu anladım. Denge aletinin üstüne doğru ellerimi doğru koymamıştım. Bu yüzden yeni el pozisyonu ile kiriş üzerindeki başka bir ters parende denedim ve anladım. Ters parendemdeki hatamı ayıkladığıma (bulup düzelttiğime) gerçekten sevindim."
      3:
        image: 'notes/C1_maze_debugging_3.png'
        text: "Hata ayıklamayı öğrenmek için sahnede hazır bloklarla başlıyoruz. Ama bu blokların bizi hedefe ulaştırmadığını fark edeceksin. Çözüm üzerinde hata ayıklayarak düzelteceksin. Nerede hata yapılmış. Batıya doğru bir blok daha ilerlemen gerektiğini fark edeceksin."
      4:
        image: 'notes/C1_maze_debugging_4.png'
        text: "Bir B (batı) bloğu daha ekleyerek hatayı düzelt. Evet öyle!"
    C1_maze_intro_sequencing:
      1:
        image: 'notes/C1_maze_intro_sequencing_1.png'
        text: "Bu bulmacada Bu bulmacada kızgın kuşu domuzcuğa götür. Bulmacaya bak ve hangi yöne gideceğine karar ver."
      2:
        image: 'notes/C1_maze_intro_sequencing_2.png'
        text: "Bloklar üzerinde araç kutusundan çalışma alanına sürüklemen gerekir. Çalıştığı zaman bloğunun antında olmasına dikkat et. Doğru olduğunu düşünüyorsan \"çalıştır\" a tıklayın ve kızgın kuşun domuzcuğa gittiğini görün."
    C1_maze_loops:
      1:
        image: 'notes/C1_maze_loops_1.png'
        text: "Bilgisayarın iyi olduğu şeylerden birisi aynı komutları tekrarlamasıdır. İnsan olarak aynı şeyleri yapmaktan sıkılabilirsin. Fakat bilgisayar aynı işlemi milyonlarca defa yapar ve sıkılmaz ve gayet güzel yapar."
      2:
        image: 'notes/C1_maze_loops_2.png'
        text: "Örneğin Eğer Facebooktaki herkese doğum günü mesajı atmak istediğimde herkese ayrı mesaj yazsam yıllarca sürer. Fakat sadece birkaç kod satırıyla Facebooktaki herkese mesaj atıp iyiki doğdun dileklerimi iletebiliyorum."
      3:
        image: 'notes/C1_maze_loops_3.png'
        text: "Kuşu domuzcuğa götürmek için... üç tane kuzeye git bloğunu kullanmak yerine \"Tekrarla\" bloğunu kullanacaksın. Tekrarla bloğu çalışma alanına sürükle ve 3 yaz. Sonra bloğun içine (K) kuzeye git bloğu ekle. Çalıştır ve doğru yapmışmısın gör. Tebrikler!"
    C1_moveitmoveit_unplugged:
      1:
        image: 'notes/C1_moveitmoveit_unplugged_1.png'
        text: "Bu dersin adı 'yürü yürü' dür. Beraberce bir program yazıp, arkadaşlarımızı pusuladan başlayarak gülen yüz hedefine ulaştırmaya çalışacağız."
      2:
        image: 'notes/C1_moveitmoveit_unplugged_2.png'
        text: "Ama gülen yüz aşağı doğru ve oraya nasıl gidileceğini bilen sadece bir kişi. Bu programı başltalım."
      3:
        image: 'notes/C1_moveitmoveit_unplugged_3.png'
        text: "Bir program bir makinanın calıştırabileceği bir kodlamanın uygulandığı algoritmadır. Biz genellikle programların bilgisayarlar için yazdığımız bir şey olduğunu düşünürüz. Programlar bunun haricinde başka şeylerde de yardımcı olabilirler. Mesela siz kendinize bir oyun yazabilir veya bir robota da istediğiniz şeyleri yaptırabilirsiniz."
    C1_going_places_safely:
      1:
        image: 'notes/C1_going_places_safely_1.png'
        text: "Benim adım Jeremiah. Merhaba! Ben yedi yaşındayım. Annemin bilgisayarında oyun oynamayı seviyorum ama her zaman önce izin alırım. \"Anne, Bilgisayarına geçebilir miyim? Tabii ki tatlım!\""
      2:
        image: 'notes/C1_going_places_safely_2.png'
        text: "Annemin bilgisayarını seviyorum çünkü internete girebiliyorum. İnternet senin çevren gibidir. Hoş yerleri ziyaret edebilir, ailen ve arkadaşların ile konuşabilir ve bir çok şey öğrenebilirsin. "
      3:
        image: 'notes/C1_going_places_safely_3.png'
        text: "Dün, hayvanat bahçesini ziyaret ettim. Bebek zebra gördüm. Ben onun resmini çektim. Çizgilerinin rengini değiştirdim ve sonra şapka koydum. Sonrada tuhaf hayvanlar koleksiyonuma ekledim. Harika! Daha sonra çok çok uzak bir yere gittim. Kenyayı ziyaret ettim. Afrika'da bir ülkedir. Orada Zebralar sürü olarak yaşıyor."
      4:
        image: 'notes/C1_going_places_safely_4.png'
        text: "Bazen internette tanıdığım insanlarla konuşurum, başka eyalette yaşayan büyük annem gibi. Mehaba büyükanne! Büyükannem şimdi doğum günüm için göndereceği kurabiyelerden yapıyor. ''Lezzetli, İnternet keşke smelloramaya sahip olsaydı!'' İnternette farklı insanlarla konuşabilirim, kuzenim gibi ama sadece tanıdığım insanlarla konuşurum."
      5:
        image: 'notes/C1_going_places_safely_5.png'
        text: "Internette en çok sevdiğim şey neşeli oyunlar oynayabilmemdir. Ne güzel! Ayrıca arkadaşlarımla kendi çizip yarattığım yeni şeyleri paylaşmaktan da hoşlanırım. Şahane! Arada bir yeni birşeyler öğreneceğim siteleri ziyaret etmeme rağmen, genellikle bana uygun olan siteleri tercih ederim. Wow, dinozorlar!"
      6:
        image: 'notes/C1_going_places_safely_6.png'
        text: 'İnternet süper eğlenceli bir yer. Mahallede karşıdan karşıya geçerken olduğu gibi, ayrıca çevrimiçi olduğun zamanda çok dikkatli olmalısın. Burada hatırlaman için üç kural. Kural 1: Her zaman ilk başta anne babana sor. Kural 2: Sadece tanıdığın kişilerle konuş. Kural 3: Senin sadece doğru olan yerlerde kal.'
      7:
        image: 'notes/C1_going_places_safely_7.png'
        text: "Vay canına! Bu çok eğlenceliydi! Şimdi yemek vakti. Oturumu kapatın. Sonraki ziyaretinizi görmek için sabırsızlanıyorum."
    C1_pair_programming:
      1:
        image: 'notes/C1_pair_programming_1.png'
        text: "Bugün eşli programlamayı öğreneceğiz. Eşli programlamada takım halinde çalışıyorsunuz. Neden bir bilgisayarı iki kişi kullanıyor? Çünkü iki kafa bir kafadan iyidir. Eşli programlamada takım arkadaşınızla oturup aynı proje üzerinde çalışacaksınız."
      2:
        image: 'notes/C1_pair_programming_2.png'
        text: "Eşli programlamada bir kişi sürücü diğer kişi yön bulucudur. Aynı araba kullanır gibi. Sürücü ekranın karşısına geçer ve kodu yazar diğer kişide ne yazılacağına yardım eder. Yön bulucu sürücünün sorularına cevap verir ve yanlışlık gördüğünde uyarır."
      3:
        image: 'notes/C1_pair_programming_3.png'
        text: "İletişim eşli programlamanın temelidir. Aşağılamak yasak, saygılı olunmalı, patronluk taslama. Siz ve takım arkadaşınız devamlı konuşmalı.  Sürücü pozisyonunda olan kişi ne yaptığını açıklamalı. Yön bulucu ise ne yapılacağını önerir."
      4:
        image: 'notes/C1_pair_programming_4.png'
        text: "Yön bulucu büyük resmi düşünürken sürücü detaylara konsantre olmalı. Her iki rolde önemli. Eşli programlama takım olarak iş yapma yöntemidir."
    C1_planting_seed:
      1:
        image: 'notes/C1_planting_seed_1.png'
        text: "Bu dersin adı 'tohum ekmek'tir ve bizim algoritmaları anlamamıza yardımcı olacaktır. Algoritmalar herhangi birşeyi nasıl yapmamız gerektiğini izah eden önergelerdir. Kahvaltı etmek veya diş fırçalamak gibi hergün tekrarladığımız etkinlikler bile ufak tefek adımlar gerektirir."
      2:
        image: 'notes/C1_planting_seed_2.png'
        text: "Bilgisayarlar gerçekten akıllı olabilirler fakat sadece adım adım ne söylemek istediğini tam anlamıyla ona söylersen seni anlayabilirler. Algoritmalar hakkında harika şey eğer sırayla talimatları uyarsan zamanın ötesinde nasıl yapıldığını bilmediğin bir şeyi yapabilirsin. Tıpkı tarife uymak gibi."
      3:
        image: 'notes/C1_planting_seed_3.png'
        text: "Bugün bir algoritma kullanarak tohumlarımızı ekeceğiz. Resimleri parçalara keserek kendi algoritmanızı yaratın. Tohum ekme önlemlerini gösteren resimleri seçin ve bunları doğru bir sıraya koyun."
      4:
        image: 'notes/C1_planting_seed_4.png'
        text: "Şimdi algoritmanızın çalışı çalışmadığını anlamanın zamanı gelmiştir. Algoritmanın önerdiği adımları dikkatli bir şekilde takip edin. Bunlar doğru bir sıradalar mı? Algoritmayı takip ederek tohum ekmeyi başardınız mı? Sanki resimlerle programlama gibi!"
      5:
        image: 'notes/C1_planting_seed_5.png'
        text: "Çikolata yapmak istediğimizde bu süreçte birçok büyük adımlar vardır ve her büyük adımın daha küçük adımlar kümesi vardır ve çikolatayı nasıl tatmak istediğimize bağlı olarak farklı tarifler ya da algoritmalar vardır.Her  adım önemlidir, küçük olanları bile öyle ki bir adım olmadan diğerleri tamamlanamıyor.Başkalarının anlayabileceği algoritmalar oluşturmak çok önemlidir. Bu yüzden her adım yazılmalıdır ki kim yapacak olursa olsun sonuç aynı olmalı."
    C1_playlab_storytelling:
      1:
        image: 'notes/C1_playlab_storytelling_1.png'
        text: "Yaratıcı kod yazma yeteneklerinizle bir hikaye anlatma zamanı geldi. Hikayenizde aktörler olacak ve bunları konuşturup birbirleriyle etkinleştireceksiniz. Nasıl bir hikaye anlatmak istediğinizi düşünmeye başlayın."
      2:
        image: 'notes/C1_playlab_storytelling_2.png'
        text: "Kediler her zaman köpeklerden korkarlar. Kedi köpeğin iyi olmaya çalıştığını fark ettiğinde ne olacak? Çalıştığı zaman bloğu her şeyi başlatır. Hareket et bloğu karakteri ilerletir. \"Söyle\" bloğu karakterin sizin yazdığınız şeyi söylemesini sağlar."
      3:
        image: 'notes/C1_playlab_storytelling_3.png'
        text: "\"Ne zaman çarpışırsa\" bloğu diğer bloklarla birleşebilir."
      4:
        image: 'notes/C1_playlab_storytelling_4.png'
        text: "Köpeğin gelik \"Hi\" (merhaba) demesini sağlıyorum. Fakat sonra kedi korkuyor ve kaçıyor. \"Ahh\". Daha fazla zaman olsaydı mutlu sonla bitebilirdi. Son!"
    C1_spelling_bee_intro:
      1:
        image: 'notes/C1_spelling_bee_intro_1.png'
        text: "Bu arının heceleme çalışmasıdır. Bulmaca parçalarını kullanarak arıyı ilerlet. İlerledikçe kelimenin harflerini toplar."
      2:
        image: 'notes/C1_spelling_bee_intro_2.png'
        text: "Kutuda verilen kelimenin harfleri üzerinden gidebilir misin? Dikkatli ol yanlış yöne ilerlemen yanlış harfleri eklemene sebep olacaktır."
    C1_zuck_repeat_loop:
      1:
        image: 'notes/C1_zuck_repeat_loop_1.png'
        text: "Bilgisayarın iyi olduğu şeylerden birisi aynı komutları tekrarlamasıdır. İnsan olarak aynı şeyleri yapmaktan sıkılabilirsin. Fakat bilgisayar aynı işlemi milyonlarca defa yapar ve sıkılmaz ve gayet güzel yapar."
      2:
        image: 'notes/C1_zuck_repeat_loop_2.png'
        text: "Örneğin Eğer Facebooktaki herkese doğum günü mesajı atmak istediğimde herkese ayrı mesaj yazsam yıllarca sürer. Fakat sadece birkaç kod satırıyla Facebooktaki herkese mesaj atıp iyiki doğdun dileklerimi iletebiliyorum."
      3:
        image: 'notes/C1_zuck_repeat_loop_3.png'
        text: "Bu örnekte amacın kızgın kuşu domuzcuğa götürmektir. Şimdi tekrarla bloğu kullanarak daha kolayca yazacağız. Aynı işi 5 defa ilerle komutuyla da yapabilirsin yada ilerleyip bir defa yazıp 5 defa tekrarlamasını söyleyebilirsin."
      4:
        image: 'notes/C1_zuck_repeat_loop_4.png'
        text: "Bunu yapmak için ilerle bloğunu tekrarla bloğu içine sürükle ve kaç kez yapacağını yani ne kadar ilerleyeceğini yaz."
      5:
        image: 'notes/C1_zuck_repeat_loop_5.png'
        text: "Tekrarla bloğu içine istediğiniz kadar komut ekleyebilirsiniz. Bu örnekte ilerle ve sola dön komutlarını 5 defa yapmasını sağlar. İyi eğlenceler!"
    C2_artist_intro:
      1:
        image: 'notes/C2_artist_intro_1.png'
        text: "Ekibinde arabanın bilgilerini toplayan ve yazdığı programlarla aracın performansını nasıl geliştireceğini söyleyen bir bilgisayar mühendisi yoksa, yarışmada  ön elemeden bile geçemezsin. "
      2:
        image: 'notes/C2_artist_intro_2.png'
        text: "Bu bulmacada kalem kullanarak farklı şekiller çizen bir aktör olacaksın. Aktör ne yaparsa arkasında bir çizgi bırakır."
      3:
        image: 'notes/C2_artist_intro_3.png'
        text: "Tuvalde ilerlemek için \"ileriye\" bloğu kullanacaksın. Buradaki blok 100 piksel ilerlemeni sağlıyor. Çalıştırdığımız zaman ne oluyor? Aktör 100 piksel ilerliyor. Piksel demek ekrandaki minik kare noktalar demektir."
      4:
        image: 'notes/C2_artist_intro_4.png'
        text: "Bulmacadaki öteki blok 90 derece sağa dönmeni söylüyor. Artistin ne kadar döneceğine sen karar verebilirsin."
      5:
        image: 'notes/C2_artist_intro_5.png'
        text: "Bu da 120 derece döner. İlgili kısma tıklayarak piksel uzunluğunu değiştirebilirsin ve ne kadar döneceğini belirleye bilirsin!"
    C2_bee_conditionals:
      1:
        image: 'notes/C2_bee_conditionals_1.png'
        text: "Bu eğer koşul bloğu. Eğer nektar yada bal bir değerden büyükse, eşitse yada küçükse bir şey yap."
      2:
        image: 'notes/C2_bee_conditionals_2.png'
        text: "Bu ne kadar nektar yada bal olduğunu bilmiyorsan faydalı olur. soru işareti bilinmediğini gösteriyor."
      3:
        image: 'notes/C2_bee_conditionals_3.png'
        text: "Bu örnekte mor çiçekte Eğer (IF) sıfırdan çok nektar varsa nektar al diyeceğiz. Bu arıya nektar olduğu sürece nektar almasını söylüyor. Da daaa!"
    C2_binary_bracelets:
      1:
        image: 'notes/C2_binary_bracelets_1.png'
        text: "Bu ikili bilezik dersidir. İsmimizin baş harflerini bir bileziğe kodlayacağız ve arkadaşlarımıza göstereceğiz!"
      2:
        image: 'notes/C2_binary_bracelets_2.png'
        text: "İkili sistem elimizdeki bilgileri yalnız iki seçenekle tanımlamaktır. Genellikle insanlar bunu 0 (sıfır) ve 1 (bir) diye düşünürler. Fakat aç veya kapa, aşağı veya yukarı, içeri veya dışarı gibi birbirlerine ters herhangi bileşimler ikili sistem olarak tanımlanabilir."
      3:
        image: 'notes/C2_binary_bracelets_3.png'
        text: "Merhaba, benim adım Orion ve ben Play-im firmasında robotları programlıyorum. En temel düzeyde bilgisayar ve robot beyinleri elektronik geçitlerden oluşurlar. Geçitler açıksa elektrik akar, yoksa akmaz."
      4:
        image: 'notes/C2_binary_bracelets_4.png'
        text: "Robotların gözleri ikili sistemin bir örneğidir. Robot gözleri LED lerden oluşur ve bunlar ya açık ya da kapalıdırlar. Yani ikili olarak ya biri ya da ötekisidir. Bu ışıkları ikili sistemin rakamlarını tanımlamak için kullanabiliriz. Bizim bir robot kümemiz olduğunu sayarsak, birinci robotun birler hanesini, ikinci robotun ikiler hanesini ve üçüncü robotun dörtler hanesini tanımladığını vs düşünebiliriz. İkili sistemin sayıları böyle temsil edilir. Robotlar, gözlerini ikili sistem olarak kullanıp sayıları sayacaklardır."
    C2_conditionals_with_cards:
      1:
        image: 'notes/C2_conditionals_with_cards_1.png'
        text: "Bu derse kartlarla koşullar denir. Hergün duyfuğunuz veya gördüğünüz şeylere göre karar verirsiniz. "
      2:
        image: 'notes/C2_conditionals_with_cards_2.png'
        text: "Parka gitmek isterim, fakat önce yanıma bir şemsiye alıp almayacağıma karar vermem lazım. Pencereden dışarıya bakarım. Eğer hava bulutluysa şemsiyemi alırım. Yoksa güneş gözlüğümü alırım. Belki de şemsiyeyi almak fena fikir değil. Ne görüp duyduğum parka giderken yanıma ne alacağımı düzenler."
      3:
        image: 'notes/C2_conditionals_with_cards_3.png'
        text: "Koşullar oyunlarda da çok kullanılır. Bugün bir kart oyunu ile koşulları kullanmayı öğreneceğiz. Bu oyunda benim çektiğim kart arkadaşlarımın ne yapacağına karar verir. Eğer yedi alırsam herkes alkışlayacak. Yoksa herkes 'awww' diyecek. Hadi bakalım! 'Awww' 'Hoşça kalın'"
      4:
        image: 'notes/C2_conditionals_with_cards_4.png'
        text: "Bahse girerim koşulları kullanarak daha da eğlenceli oyunlar yapabilirsin. Bir dene! Koşullar bilgisayarların zeki görünmesinin sebebidir. Koşulları kullanan bir bilgisayar programı kullanıcıya tepki verip yapacagı islemi ona göre seçebilir."
      5:
        image: 'notes/C2_conditionals_with_cards_5.png'
        text: "En çok sevdiğiniz video oyununu düşünün. Bazı eylemler ötekilerden daha fazla puan kazandırır. Bunun sebebi bilgisayarın koşullar kullanmasıdır. Bilgisayarlar böyle karar alırlar. Mesela hedefi vurduğunda on puan kazanırsın. Yoksa üç kaybedersin. Koşulların nasıl çalıştığını öğrendiğinde çok heyecanlı oyunlar yaratabilirsin."
    C2_artist_debugging:
      1:
        image: 'notes/C2_artist_debugging_1.png'
        text: "Çalışma alanında hazır bazı bloklar var. Fakat bir şeyler yanlış."
      2:
        image: 'notes/C2_artist_debugging_2.png'
        text: "Yavaşlatıp adım adım ilerleyerek bu kodda hata ayıklayalım."
      3:
        image: 'notes/C2_artist_debugging_3.png'
        text: "Aaa hata var! Kedinin bıyıkları 75 piksel olmalı 25 değil."
    C2_bee_debugging:
      1:
        image: 'notes/C2_bee_debugging_1.png'
        text: "Programlardan hata ayıklamayı hiç duydunuz mu? Neyin çalışmadığını bulmanıza denir. Hata ayıklarken önce hatayı bulursunuz sonra düzeltirsiniz."
      2:
        image: 'notes/C2_bee_debugging_2.png'
        text: "Çalışma alanında zaten bazı bloklar var. Adım adım ilerleyeceğiz ve blokların üzerinden geçeceğiz. Böylece her bir bloğun yapması gerekeni yapıp yapmadığını göreceğiz ve gerekirse düzelteceğiz."
      3:
        image: 'notes/C2_bee_debugging_3.png'
        text: "Görünüşe göre bizim problemimiz burada! İlerle bloğundan bir tane daha lazım. Adım düğmesi hatayı bulmamıza yardım eder böylelikle hatayı düzeltiriz."
    C2_digital_footprint:
      1:
        image: 'notes/C2_digital_footprint_1.png'
        text: "On your head you hold your hat and your smarts will tell you where you're at and to think about the zoo, and to nod hello to you and you! Use your head when you're online to keep what's yours inside your mind and to know how to be safe, how to give your life some private space! From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      2:
        image: 'notes/C2_digital_footprint_2.png'
        text: "Kalbini kullanarak büyü ve büyü, ve kendine sağlıklı bir parlaklık ver, ve bir sevgili edinmek içini, birine benim olacaksın de! İnternette adil ve iyi olabilmek için aktif olduğunda kalbini kullan, doğru ve kibar olanı hisset, ve arkadaşlarına saygı göster. Baştan aşağı durakla, düşün. Ayaktan başa durakla ve aktif düşün!"
      3:
        image: 'notes/C2_digital_footprint_3.png'
        text: "Evcil hayvanını kucaklamak, kıyafetlerinin ıslanmasını önlemek için ve sana uçmaya yardımcı olacak ve buna inandıracak en sevdiğin kolluları giymek için kollarını kullan. Çevrimiçi iken kollarını kullan, bir mola almak ve denge zamanı için ve tekniklerini geride bırak, kendine tırmanmak için bir ağaç bul.Tepeden tırnağa durakla ve düşün. Ayaklarından burnuna kadar durakla ve çevrimiçi düşün!"
      4:
        image: 'notes/C2_digital_footprint_4.png'
        text: "Use your gut to store your food, and to listen to its growling mood, to make a belly flop, and to feel the gas in soda pop. Use your gut when you're online, to know to watch for certain signs, and to let it guide the way and tell you when it's not ok. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
      5:
        image: 'notes/C2_digital_footprint_5.png'
        text: "So think with your head, and feel with your heart, balance with your arms, listen to your gut, online. Use your legs to run and kick, and to jump and bounce on a pogo stick, and to dance around the block, and to skip along in your smelly socks. Use your legs when you're online, to stand up to bullies who cross the line, and remember to stand tall, be nice to creatures great and small."
      6:
        image: 'notes/C2_digital_footprint_6.png'
        text: "From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online! So think with your head, and feel with your heart, balance with your arms, listen to your gut, stand up with your legs. From your head down to your toes, pause, think about it. From your feet up to your nose, pause and think online!"
    C2_digital_footprint_v2:
      1:
        image: 'notes/C2_digital_footprint_v2_1.png'
        text: "Çevrimiçi eylemleriniz aranabilir kopyalanabilir paylaşılabilir yayımlanabilir ve kalıcı izler bırakır. Siz acaba nasıl dijital izler bırakıyorsunuz? Nasıl dijital izler bırakmak istersiniz?"
    C2_graph_paper:
      1:
        image: 'notes/C2_graph_paper_1.png'
        text: "Bu dersin adı 'Grafik Kağıdıyla Programlama'dır ve tüm algoritmalar hakkındadır. Bugün yalnız elle çizilmiş okları kullanarak, basit siyah ve beyaz görüntüleri, birbirimize tekrar oluşturmayı gösteren programlar yazmayı öğreneceğiz."
      2:
        image: 'notes/C2_graph_paper_2.png'
        text: "Bu, algoritma oluşturma görevini tamamlamak için talimat listesi. Verilen işlemleri takip edin. Algoritmaların nasıl oluşturulacağını anlamanız için işlemler yardım edecektir."
      3:
        image: 'notes/C2_graph_paper_3.png'
        text: "Bilgisayar için bir algoritma yazıyorsanız ilk basamaktaki talimati yerine getirin ve aşağıdaki talimata geçin, son talimatıda uyguladığınızda bitmiş olacak."
      4:
        image: 'notes/C2_graph_paper_4.png'
        text: "İşimde algoritmalar kullanırım. Eğer tüm adımları yazarsam aynı seyi tekrar oluşturabilirim veya bunu yapmasını başka birine öğretebilirim. Camı fırına koyun, eritin, ve geriye kalan talimatları takip ederek çanağı yapın. Algoritmalar size bir işin nasıl yapılacağını gösteren bir yol haritasıdır."
    C2_artist_loops:
      1:
        image: 'notes/C2_artist_loops_1.png'
        text: "Burada tekrarla bloğu kullanarak programlayacağız böylece daha az blok kullanacağız. Sahnede başlamamız için bazı bloklar bulunmakta."
      2:
        image: 'notes/C2_artist_loops_2.png'
        text: "Bu blokları dört defa kullanarak kareyi çizmek için önce tekrarla bloğunu sürükleyelim. Sonra Mevcut blokları tekrarla bloğu içine koyalım. Sanatçı 4 defa aynı adımları tekrarlayarak kareyi çizecek."
    C2_bee_loops:
      1:
        image: 'notes/C2_bee_loops_1.png'
        text: "Döngü tekrarlama işlemidir. Petekleri kontrol etmek için her peteği çıkartıyorum, inceliyorum ve sonrada tekrar yerine koyuyorum. Aynı işlemi tekrar tekrar yapıyorum. Döngü demek aynı işlemi tekrarlayarak birçok kere yapmaktır."
      2:
        image: 'notes/C2_bee_loops_2.png'
        text: "Bu \"tekrarla\" bloğu. Bu bloğun içine koyduğunuz işlemleri Tekrarla bloğuna yazdığınız sayı kadar bilgisayar tekrarlar. Örneğin, ilerle ve nektar al bloklarını 3 defa sürükleyip kodu yazacağımıza, sadece birer tanesini sürükleyip aynı işlemi üç kere tekrarlayacağız. İşleri kolaylaştırıyor!"
    C2_maze_intro:
      1:
        image: 'notes/C2_maze_intro_1.png'
        text: "Normalde kodlama yazı yazarak yapılıyor fakat biz burada blokları kullanacağız. Görsel olarak blokları sürükleyip birbirine bağlayarak kod yazacaksınız. Alt tarafta kod yazmış oluyoruz. Başlangıç olarak Kızgın kuşun ilerleyip yumurtasını çalan kötü domuzcuğa ulaşmasını sağlayacağız."
      2:
        image: 'notes/C2_maze_intro_2.png'
        text: "Çalışma alanı üç bölgeye ayrılmıştır. Soldaki kodun çalışacağı labirenttir. Ne istendiğiyle ilgili bilgiler labirentin altındadır. Ortadaki bölge araç kutusudur. Buradaki her komuta kuş anlar ve yapar. Sağdaki boş bölge çalışma alanı olarak söylenir ve buraya programını yazarsın."
      3:
        image: 'notes/C2_maze_intro_3.png'
        text: "İlerle bloğunu çalışma alanına sürükleyip Çalıştır düğmesine basınca ne olur? Kuş bir adım ilerler. Bir adım daha ilerlemesi için ne yapmalıyız? Bir ilerle bloğu daha ekleyebilirim."
      4:
        image: 'notes/C2_maze_intro_4.png'
        text: "Sağa dön bloğunu çalışma alanına sürükleyip ilerle bloğunu antına kadar getireceğim ve sarı okun gözükene kadar ilerleteceğim. bıraktığımda iki blok birleşmiş olur. Çalıştır tuşuna tekrar basacağım. Kuş programdaki adımları üstten alta doğru sırayla yapacak."
      5:
        image: 'notes/C2_maze_intro_5.png'
        text: "Bir bloğu silmek isterseniz sürükleyin ve çöp kutusuna bırakın. Çalıştır tuşu ile çalıştırdıktan sonra yeniden başla tuşu ile tekrar başlayabilirsin. Şimdi domuzcuğu yakalayalım!"
    C2_paper_airplanes:
      1:
        image: 'notes/C2_paper_airplanes_1.png'
        text: "Bu derse gerçek hayat algoritmaları denir. Algoritmalar insanlar her gün yaptığı şeyi açıklar. Kurabiye tarifleri ve kuş yuvası oluşturmak için yapılması gerekenler birer algoritmadır."
      2:
        image: 'notes/C2_paper_airplanes_2.png'
        text: "Bugün kağıttan bir uçağı yapıp, yaratıp, test edeceğimiz bir algoritma üzerinde çalışacağız. Ama başlamadan önce bu büyük projeyi daha kolay takip edilecek basit kademelere bölmemiz gerekir. Bu kağıt uçağı yapmak için hangi önlemleri hangi sırada almamız gerektiğine karar vermemiz lazım."
      3:
        image: 'notes/C2_paper_airplanes_3.png'
        text: "Algoritmanızı resimleri parçalara keserek oluşturacaksınız. İkinci olarak da uçak yapmayı gösteren altı resmi doğru sıraya düzenleyeceksiniz. Herşeyi yoluna koyduktan sonra başka bir takımla algoritmanızı takas edip nasıl çalıştığını deneyeceksiniz. En iyi uçağı yapabilmek en iyi tasarlanmış algoritmayı gerektirir."
      4:
        image: 'notes/C2_paper_airplanes_4.png'
        text: "Çikolata yapmak istediğimiz zaman, bu süreçte birçok büyük adım vardır. Her bir büyük adım kendi küçük adımlarına sahiptir. Nasıl bir çikolata tatmak istediğimize bağlı şekilde, değişik tarifler yada algoritmalar vardır. Her adım önemlidir, küçük olanları dahi. Bu nedenle herhangi bir adım olmadan, geri kalan tamamlanamaz. Başkalarının anlayabildiği algoritmaları oluşturmak gerçekten önemlidir. Her adımın not edilmesinin gereklilik nedeni de budur, böylece kimin yaptığının önemi yoktur, sonuç aynıdır."
    C2_playlab_createstory:
      1:
        image: 'notes/C2_playlab_createastory_1.png'
        text: "Şimdiye kadar animasyon yada hikaye yaptığında her çalıştırdığında aynı şeyi yapıyordu. Şimdi etkileşimli bir oyun yapabilirsiniz."
      2:
        image: 'notes/C2_playlab_createastory_2.png'
        text: "Denemek için bazı yeni bloklar var. \"Oka basıldığında\" ve \"hareket et\" blokları var. Bu blokları kullanarak ok tuşları ile oyuncuyu hareket ettirebilirsiniz. Ayrıca aktörler çarpıştığında yada tıklandığında blokları var. İyi eğlenceler!"
    C2_relay_programming:
      1:
        image: 'notes/C2_relay_programming_1.png'
        text: "Bugün programlama bayrak yarışı yapacağız. Amacımız baskı altında programlama yapmak ve böyle hızlı çalışırken veya takım çalışmalarında yapılan hataları ayıklamak. Grafik kağıdı programlama metodu ile kod yazmayı ve bayrak yarışları ile son tarih kapsamlarını taslayacağız."
      2:
        image: 'notes/C2_relay_programming_2.png'
        text: "Bayrak yarışı programlamasında, takımlar kareli kağıt programını bitirmek için yarışacak. Takım arkadaşlarının çalışmalarını kontrol etmeli yada hatalarını bulmalısın, eğer çalışmalarda bir hata varsa düzeltmelisin, kendi okunu ekle, koşarak geri gel ve takım arkadaşlarını etiketle."
      3:
        image: 'notes/C2_relay_programming_3.png'
        text: "Programcılar algoritmalarındaki ve kodlarındaki hataları düzeltmek için hata ayıklama tekniğini kullanırlar. Bunu uygulamanın birçok yolu vardır. En kolayı programı adım adım çalıstırıp doğru çalışmayan kısmı bulmak ve düzeltmektir."
      4:
        image: 'notes/C2_relay_programming_4.png'
        text: "Şimdi geriye parende atmaya çalışıyorum fakat hep düşüyorum. Verilen tarifleri adım adım takip edip nerede yanlış yaptığımı buluyorum. Antrenörüm ellerimi kalasa doğru koymadığımı söyledi. Bu verilen bilgi ile parendeyi yeniden denedim ve şahane yaptım. Parendemin hatasını ayıkladığıma çok memnunum. Bunun yolunu bulduk. Hata ayıklamak problemleri bulup çözmektir. Aferin!"
    C2_zuck_repeat_loop:
      1:
        image: 'notes/C2_zuck_repeat_loop_1.png'
        text: "Bilgisayarın iyi olduğu şeylerden birisi aynı komutları tekrarlamasıdır. İnsan olarak aynı şeyleri yapmaktan sıkılabilirsin. Fakat bilgisayar aynı işlemi milyonlarca defa yapar ve sıkılmaz ve gayet güzel yapar."
      2:
        image: 'notes/C2_zuck_repeat_loop_2.png'
        text: "Örneğin Eğer Facebooktaki herkese doğum günü mesajı atmak istediğimde herkese ayrı mesaj yazsam yıllarca sürer. Fakat sadece birkaç kod satırıyla Facebook taki herkese mesaj atıp iyi ki doğdun dileklerimi iletebiliyorum. Döngüler budur işte. Bilgisayarın iyi yaptığı çok faydalı şeylerdir."
      3:
        image: 'notes/C2_zuck_repeat_loop_3.png'
        text: "Bu örnekte amacın kızgın kuşu domuzcuğa götürmektir. Şimdi tekrarla bloğu kullanarak daha kolayca yazacağız. Aynı işi 5 defa ilerle komutuyla da yapabilirsin yada bir defa ilerle yazıp 5 defa tekrarlamasını söyleyebilirsin."
      4:
        image: 'notes/C2_zuck_repeat_loop_4.png'
        text: "Yada bilgisayara ilerlemesini bir kere söyleyip bu işi beş defa tekrarlamasını söylersin. Bunun için ilerle bloğunu sürükleyip Tekrarla bloğu içine koy. Sonra soru işaretine tıkla ve kaç kere yapacağını söyle."
      5:
        image: 'notes/C2_zuck_repeat_loop_5.png'
        text: "Tekrarla bloğu içine istediğiniz kadar komut ekleyebilirsiniz. Bu örnekte ilerle ve sola dön komutlarını 5 defa yapmasını sağlar. İyi iş çıkarttın. İyi eğlenceler!"
    C3_artist_functions:
      1:
        image: 'notes/C3_artist_functions_1.png'
        text: "Bilgisayar programlamanın harika yönlerinden birisi bilgisayara bir işi yapmayı bir defa öğretirsen bu öğrettiğin şeyi defalarca tekrar kullanabilirsin. Buna fonksiyon denir. Bir isim verirsin ve tekrar tekrar çağırırsın. Böylece yeni bir blok oluşturmuş olursun."
      2:
        image: 'notes/C3_artist_functions_2.png'
        text: "Yazdığımız programda dört defa çizgi çizip dönerek kare çizmeyi öğrendik. Biz bu kodu alıp ona isim verebiliriz. draw a square, yani kare çiz. daha sonra ne zaman draw a square bloğunu eklersek ilgili kare çizme fonksiyonunu çağırır. Programlama dilimize yeni bir yetenek eklemiş olduk."
    C3_artist_intro:
      1:
        image: 'notes/C3_artist_intro_1.png'
        text: "Ekibinde arabanın bilgilerini toplayan ve yazdığı programlarla aracın performansını nasıl geliştireceğini söyleyen bir bilgisayar mühendisi yoksa, yarışmada  ön elemeden bile geçemezsin. "
      2:
        image: 'notes/C3_artist_intro_2.png'
        text: "Bu bulmacada kalem kullanarak farklı şekiller çizen bir aktör olacaksın. Aktör ne yaparsa arkasında bir çizgi bırakır."
      3:
        image: 'notes/C3_artist_intro_3.png'
        text: "Tuvalde ilerlemek için \"ileriye\" bloğu kullanacaksın. Buradaki blok 100 piksel ilerlemeni sağlıyor. Çalıştırdığımız zaman ne oluyor? Aktör 100 piksel ilerliyor. Piksel demek ekrandaki minik kare noktalar demektir."
      4:
        image: 'notes/C3_artist_intro_4.png'
        text: "Bulmacadaki öteki blok 90 derece sağa dönmeni söylüyor. Artistin ne kadar döneceğine sen karar verebilirsin."
      5:
        image: 'notes/C3_artist_intro_5.png'
        text: "Bu da 120 derece döner. İlgili kısma tıklayarak piksel uzunluğunu değiştirebilirsin ve ne kadar döneceğini belirleye bilirsin!"
    C3_artist_nested_loops:
      1:
        image: 'notes/C3_artist_nested_loops_1.png'
        text: "Bir döngüyü başka bir döngü içine koyduğumuz zaman iç içe döngü oluşturmuş oluruz. Örneğin üçgen çizmek için bir kenarını 100 piksel olarak çizen blokları döngü içine koyarız ve tekrarla içine 3 yazarız. Üçgenin her bir kenarını çizmesi için."
      2:
        image: 'notes/C3_artist_nested_loops_2.png'
        text: "Fakat 6 üçgen çizmek istiyoruz. bunu yapmak için mevcut tekrarla bloğunu yeni bir tekrarla bloğu içine koyacağız. Çok güzel!"
    C3_bee_conditionals:
      1:
        image: 'notes/C3_bee_conditionals_1.png'
        text: "Bu eğer koşul bloğu. Eğer nektar yada bal bir değerden büyükse, eşitse yada küçükse bir şey yap."
      2:
        image: 'notes/C3_bee_conditionals_2.png'
        text: "Bu ne kadar nektar yada bal olduğunu bilmiyorsan faydalı olur. soru işareti bilinmediğini gösteriyor."
      3:
        image: 'notes/C3_bee_conditionals_3.png'
        text: "Bu örnekte mor çiçekte Eğer (IF) sıfırdan çok nektar varsa nektar al diyeceğiz. Bu arıya nektar olduğu sürece nektar almasını söylüyor. Da daaa!"
    C3_bee_debugging:
      1:
        image: 'notes/C3_debugging_bee_1.png'
        text: "Programlardan hata ayıklamayı hiç duydunuz mu? Neyin çalışmadığını bulmanıza denir. Hata ayıklarken önce hatayı bulursunuz sonra düzeltirsiniz."
      2:
        image: 'notes/C3_debugging_bee_2.png'
        text: "Çalışma alanında zaten bazı bloklar var. Adım adım ilerleyeceğiz ve blokların üzerinden geçeceğiz. Böylece her bir bloğun yapması gerekeni yapıp yapmadığını göreceğiz ve gerekirse düzelteceğiz."
      3:
        image: 'notes/C3_debugging_bee_3.png'
        text: "Görünüşe göre bizim problemimiz burada! İlerle bloğundan bir tane daha lazım. Adım düğmesi hatayı bulmamıza yardım eder böylelikle hatayı düzeltiriz."
    C3_bee_functions:
      1:
        image: 'notes/C3_bee_functions_1.png'
        text: "Bilgisayar Biliminde en önemli kavramlarından biri yeni komut tanımlamadır. Kendi komutunuzu bilgisayar diline ekleyebilirsiniz. Çoğu programlama dillerin yalnızca yaklaşık 100 komutu vardır. Ve gerçekten, işin sırrı bu yapı taşları komutların yanı sıra kendi yeni komutlarını tanımlamadır."
      2:
        image: 'notes/C3_bee_functions_2.png'
        text: "Bunu sporda her zaman yapıyoruz. Örneğin basketbolda nasıl ilerleyeceğimi, nasıl basket atacağımı ve nasıl ribound alacağımı öğreniyorum. Bir defa bu temel hareketleri öğrendikten sonra bu hareketleri birlikte kullanarak yeni hareketler yapıyorum. buradan daha kompleks oyunlara geçebiliyorum. Bir defa hareketi öğrenince ona isim ver ve takımdaki herkes onu yapmayı bilsin."
      3:
        image: 'notes/C3_bee_functions_3.png'
        text: "Benzer şekilde, bilgisayara bir eylemi nasıl yapacağını komutlar kullanarak öğrettin vede bu eyleme kolay hatırlanır bir isim verin. Bu isim daha sonra kolayca aynı eylemi gerçekleştirmek için kullanılabilir. Bu şekilde kendi komutunu tanımlamaya \"fonksiyon\" denir. Şimdi fonksiyon kullanarak arıya yardım edeceğiz."
      4:
        image: 'notes/C3_bee_functions_4.png'
        text: "Bu örnekte fonksiyonumuz \"get 2 nectar\" olarak adlandırılıyor ve iki nektar toplamayı sağlıyor. Ekrandaki yeşil blok. Fonksiyonun içine bakınca \"get 2 nectar\" fonksiyonunun ne yaptığını görebiliyoruz. Her zaman gri fonksiyon bloğunun içine bakarak yeşil fonksiyon bloğunun ne yaptığını anla."
    C3_bee_nested_loops:
      1:
        image: 'notes/C3_bee_nested_loops_1.png'
        text: "Şimdi biz arı ile iç içe geçmiş döngüleri kullanacağız. İlerleyip üç nektar alan ve sonra sağa dönen kod hazır olarak verilmiş. Bütün o kodu ve diğer tekrarla bloğu içine koyup üç defa tekrarlayalım. Bitti!"
    C3_bounce:
      1:
        image: 'notes/C3_bounce_1.png'
        text: "Şimdi kendi bounce oyunun yaratıp arkadaşlarınla paylaşa bileceksin. Harika!"
      2:
        image: 'notes/C3_bounce_2.png'
        text: "Başlamak için kontrolleri klavyedeki ok tuşlarını bağlayacağız."
      3:
        image: 'notes/C3_bounce_3.png'
        text: "Sol ok tuşu ile sola ve sağ ok tuşu ile sağa hareket ettirebilirsin. Haydi yap ve kendi sektirme oyununu programla!"
    C3_computational_thinking:
      1:
        image: 'notes/C3_computational_thinking_1.png'
        text: "Bu ders hesaplamalı düşünme üzerine. Bazen yeni bir oyun öğrenmek zor gelir, değil mi? İlk başta hem karmaşık gelebilir hem de kuralları anlatacak ve yardım edecek kimse olmayabilir. Bundan dolayı bunları senin kendin yapman gerekebilir."
      2:
        image: 'notes/C3_computational_thinking_2.png'
        text: "İşin iyi tarafı birkaç düşünce tüyosu ile kendin zamanla problemleri çözmeyi daha iyi becerirsin. Bu tüyolar problemlere benzersiz bir açıdan bakıp çözmekte yardımcı olurlar. Bu derste dört tüyo öğrenip arkadaşlarınla oyunun kurallarını çözeceksiniz."
      3:
        image: 'notes/C3_computational_thinking_3.png'
        text: "Büyük bir problemi ufak parçalara böldüğünde beynini problemi ayrıştırmak için kullanıyorsun. Bir kere büyük problemi ufak parçalara ayrıştırdıktan sonra ikinci tüyomuza geçeriz: örüntü eşleme."
      4:
        image: 'notes/C3_computational_thinking_4.png'
        text: "Bu değişik şeyler arasında benzeşim bulmak demektir. Benzer şeyleri bulur bulmaz, benzemeyenleri de anlarız. Bu benzemeyenleri ayırmaya da soyutlama denir."
      5:
        image: 'notes/C3_computational_thinking_5.png'
        text: "Problemi çözme aşamalarını çözdükten sonra, bu aşamaları algoritma denilen belirli sıraya koyabilirim böylece herhangi biri problemi çözmek için benim talimatlarımı kullanabilir. Biz bu dört aşamayı kuralsız oyunun nasıl oynancağını çözmek için kullanacağız. Oyunun sonunda, buna benzer bir şeyi oynayabileceksin!"
    C3_crowdsourcing:
      1:
        image: 'notes/C3_crowdsourcing_1.png'
        text: "Bu dersin adı kitle kaynak. Şimdi kartlar kullanarak bazı işleri grup halinde yapmanın tek başına uğraşmaktan ne kadar daha kolay olduğunu öğreneceğiz. Hadi bakalım, birkaç arkadaş topla ve şahane birşey yap! Kitle kaynaklama bir şeyi çabucak yapabilmek için bir sürü insandan yardım istemektir."
      2:
        image: 'notes/C3_crowdsourcing_2.png'
        text: "Bilgisayar biliminde kitle kaynak çok kullanılır. Binlerce amatör ve profesyoneller bilgisayarlarını bağlayarak milyarlarca bilgi öğelerini araştırırlar. Araştırdıkları şeyler yeni bir Marsen asal sayısından uzay yaratıklarının iletişimlerine kadar değişebilir."
      3:
        image: 'notes/C3_crowdsourcing_3.png'
        text: "Bir filim izlediğinizde filmin her saniyesi 24 resimden oluşur. Bunlara kareler deriz. Bu karelerin hepsinin teker teker düzenlenip işlenip toplanması gerekir. Ben ve takımım biz yazılım geliştiricileriyiz. Beraber çalışarak bu kareleri ve filimde görülen bitmiş ürünü yaratan bir yazılım geliştirmeye çalışıyoruz. Bu artistlerin ve diğer geliştiricilerin sahnelere çıkarmak istedikleri resimleri sonuçlandırmalarına yardımcı olacaktır."
      4:
        image: 'notes/C3_crowdsourcing_4.png'
        text: "Örneğin Finding Nemo (Nemoyu Bulma) filminde Crush ve Squirt ve arkadaşları doğu Avustralya akıntısında yüzüyorlar. Akıntı suları geçiyor, kaplumbağanın üstündeki renkleri izliyorsun, balıkların yanları gözüküyor. Bütün bunlar yazdığımız bilgisayar programlarında matematik uygulamalarıyla yapılıyor. Sonra bunları artistlere veriyoruz ve onlar da filmin son karelerini güzel ve eğlenceli bir hale getirmek için kullanıyorlar."
    C3_dice_race:
      1:
        image: 'notes/C3_dice_race_1.png'
        text: "Bu ders zar yarışı olarak adlandırılmıştır. Neredeyse herkes bilgisayar oyunları oynamayı sever. Bilgisayar programcılarının oyunların adımlarını bir programa nasıl dönüştürdüğünü hiç düşündün mü? Bilgisayar oyunlarının oluşturulmasında yada herhangi bir problemin çözülmesinde ilk adım düşünmeyi ve planlamayı gerektirir."
      2:
        image: 'notes/C3_dice_race_2.png'
        text: "Problem çözmenin düşünme adımı bir algoritma üretir, bu problemi çözmek yada görevi bitirmek için adım adım bir plandır. Bu derste, zar yarışı için bir algoritma üreteceksin. Ardından, arkadaşlarının oyunu oynamak için adımları takip edebiliyor olduklarını görmek için, arkadaşlarından bu planı denemelerini isteyeceksin. Programcı adımların doğru olduğundan emin olduktan sonra, algoritmayı bilgisayarın anlayabileceği bir dilde programa çevirmenin zamanı gelmiştir."
      3:
        image: 'notes/C3_dice_race_3.png'
        text: "Hemen hemen her gün yaptığımız her şey algoritma gerektirir, algoritma görevi bitirmek adına izlenen adımların listesidir. Okul için hazırlanmayı, arkadaşlarınla keyifli bir gün planlamayı veya onlarla bir şeyler atıştırmayı bir düşün. Tüm bu işlerden herhangi birini tamamlayabilmek için, işleri daha küçük parçalara ayırman gerekecek ve bazen bu adımlar kendine özgü tarzda olmak zorundadır."
      4:
        image: 'notes/C3_dice_race_4.png'
        text: "Bir sandviç yapma hakkında düşün. Hangi dolaptan hangi malzemeyi ilk aldığın önemli değil. Ama siz kavanozu açmadan fıstık ezmesi yayamazsınız. Bilgisayar yapacakları herşey için algoritmalar ve programlara ihtiyaç duyar."
      5:
        image: 'notes/C3_dice_race_5.png'
        text: "Bir algoritma ile bilgisayara gerçekleşmesi için gerekn yönergeler düşünülüyor. Bir algoritmanın önce bir programa çevrilmesi gerekiyor. Bir görevi adımlara bölme olan algoritma bazen zor olabiliyor. Ama herhangi bir yeni beceri gibi zamanla kolaylaşır ve uygulama ile daha kolay hale gelir."
    C3_farmer_while:
      1:
        image: 'notes/C3_farmer_while_1.png'
        text: "Süresince döngüleri günlük hayatta yaptıklarımıza çok benziyor. Arabamızı yıkadığımızı düşünelim tam olarak temiz olana kadar yıkamaya devam ederiz. Ve yıkanan her kısım sonrasında tam olarak yıkanıp yıkanmadığını kontrol ederiz, temizlenmiş ise temizleme işlemini sonlandırırız."
      2:
        image: 'notes/C3_farmer_while_2.png'
        text: "Çiftçiye yardım etmek için yeni bir görünüm var. Ona sürece bloğu denir. Bu aslında oldukça kolaydır. Üstteki koşul doğru olduğu sürece bir şeyler yap. Örneğin, yığında birşeyler var olduğu sürece yığından al. Devam edin çiftçi ile deneyin."
    C3_functional_suncatchers:
      1:
        image: 'notes/C3_functional_suncatchers_1.png'
        text: "Bu derste fonksiyonel vitray var. Bu güzel vitrayı fonksiyon kullanarak oluşturacaksın. Bir vitray oluşturmak için birkaç adım var. Bazı adımları birçok kez tekrarlamak gerekir."
      2:
        image: 'notes/C3_functional_suncatchers_2.png'
        text: "Bir vitray yapma sürecini basitleştirerek rekrar tekrar tekrarlamak zorunda olduğumuz blokları belirleyebiliriz. Bu adımları fonksiyon içinde gruplandırabilirsiniz."
      3:
        image: 'notes/C3_functional_suncatchers_3.png'
        text: "Ama adımları izleyerek daha güzel bir vitray oluşturmak için daha fazla şey yapmak gerekir. Bazen yaratıcı olup boncuk rengini değiştirmek istiyebilirsin. Farklı renkli boncuklar kullanırsanız vitrayınız benzersiz yapabilirsiniz."
      4:
        image: 'notes/C3_functional_suncatchers_4.png'
        text: "Boncukları değişken olarak düşünebilirsiniz. Fonksiyon ve değişkenleri kullanarak vitrayol uşturmanın tadını çıkar!"
    C3_internet:
      1:
        image: 'notes/C3_internet_1.png'
        text: "Bu ders hakkındadır. İnternet çok meşgul bir yol gibidir. Arabalar gibi mesajlar hedeflerine ulaşmak için kullanır. İletiler Internet üzerinden çok hızlı bir şekilde taşınır."
      2:
        image: 'notes/C3_internet_2.png'
        text: "Lnternet nasıl çalışır bunu anlaman internet kullanırken neler olduğunuanlamanıza yardımcı olacaktır. Sevdiğiniz bir Web sitesinden yada bir arkadaşınızdan bir e-postanıza mesaj nasıl iletilir bunu nasıl öğreneceksiniz. Sahne arkasında neler olduğunu anladığınızda göreceksiniz ki internet çok karmaşık değildir."
      3:
        image: 'notes/C3_internet_3.png'
        text: "İnternette iletileri gönderme iletileri posta ile gönderme gibidir. Google.com sitesindeyim. Bu Web sitesinin IP adresini bu sayıdır. IP adresini mektubun dönüş adresi olarak düşünebilirsiniz. Aşağıda ofiste birine postayla bir mesaj göndermek istediğimizi hayal edelim. URL ve IP adresi görüyor musun? Bu mesajı yazdım ve Gönder'e bastım."
      4:
        image: 'notes/C3_internet_4.png'
        text: "Posta Servisi tersine İleti daha kolay gönderilebilir bu yüzden daha küçük parçalar halinde gönderir. Bu küçük parçalara paket denir. Her paket iletinin hedefine teker teker teslim edilir. Böylece alıcı iletiyi doğru okuyabilir Bu paketlerin tümü doğru sırayla bir araya gelir. Tabii ki, internetin nasıl çalıştığı hakkında bilgi edinmek için çok daha fazla şey bilmek lazım ama bu harika bir başlangıç. Bir internet kullanıcısı olma yolundasın! Aileniz ve arkadaşlarınızla ne öğrendiğinizi paylaşın!"
      5:
        image: 'notes/C3_internet_5.png'
        text: "Benim adım Amanda Camp ve Google yazılım mühendisiyim. Profilleri ve kişileri depolayan bir arka sunucuda çalışıyorum. Benim işimde kişiler telefon gibi diğer aygıtlara nasıl gönderilebilir bunu çözüyoruz. Çoğu insanın bir sürü kişisi var, 1000 kişilik rehber olabilir ve biz bir ileti çok büyük olacağından bu kişilerin tümünü aynı anda telefonunuza göndermek istemiyorum. Benzer şekilde Internet büyük iletileri paketlere böler. Biz sayfa kavramıyla 100 kişiyi bir anda göndeririz ve sonraki 100 adresi telefonun istemesini bekleriz."
      6:
        image: 'notes/C3_internet_6.png'
        text: "Yazılım hakkında en heyecan verici şey tüm dünyaya etkisi olmasıdır. Ben ilk on dokuz yaşındayken programlama öğrendim. İkinci sınıf ya da ilk yılımda olduğumu düşünüyorum. İlk program ile sıcaklığı Celsius biriminden Fahrenheit birimine dönüştürdüğümü hatırlıyorum. Programlamayı seviyorum Çünkü insanlara yardım etmeyi seviyorum. Google da tüm dünyadaki insanlara yardım edecek programlarınızı yazabilirsiniz. Bu gerçekten akıllara durgunluk veren ve heyecan verici bir olay."
    C3_maze_conditionals:
      1:
        image: 'notes/C3_maze_conditionals_1.png'
        text: "İnsanlar her gün karar alırlarlar. Dışarı gitmeden önce Örneğin, eğerYağmur yağıyor ise, ceketimi almak gerekir diyorum. Bilgisayarlar güvenilir bir şekilde karar vermede inanılmaz hızlıdır. Bir bilgisayar programı biraz matematik ve biraz Eğer komutudur."
      2:
        image: 'notes/C3_maze_conditionals_2.png'
        text: "Eğer bloğu zombinin karar vermesine yardımcı olur. Bir şeyi kontrol eder. Örneğin, eğer bloğunu kullanalım ve eğer sola yol var ise sola dönmesi için sola dön bloğunu eğer bloğu içine yerleştirelim. Zombiye etrafına bakmasını ve eğer sola yol var ise sola dönmesini söylüyoruz."
      3:
        image: 'notes/C3_maze_conditionals_3.png'
        text: "İlerle bloğunu kadar tekrarla bloğu içine koyduğumuz zaman gitmek istediği sürece ileri gitmesini söylüyoruz. Dönüş olduğunda eğer bloğu kullanarak sola dönüş varsa sola dönmesini sağlıyoruz. Böylece sola yol olduğunda sola dönerek diğer durumlarda ilerleyerek hedefimize ulaşıyoruz."
      4:
        image: 'notes/C3_maze_conditionals_4.png'
        text: "eğer bloğu bilgisayar programlamanın temel konularından biridir. İlk öğrendiğim şeylerden birisi XOX oyununu programlamaktı.  Eğer bloğunu kullanarak eğer bir kişi hamle yaptığında kazanacaksa o hamleyi yapmasını söylemekti. Eğer bloğuyla iyi eğlenceler: çok temel bir kavram."
    C3_maze_level_4:
      1:
        image: 'notes/C3_maze_level_4_1.png'
        text: "Bu örnekte, hedef zombinin ayçiçeği için elde etmesidir. Beş ilerle bloğu kullanabiliriz ya da bilgisayara tekrarla bloğu içine ilerle koyarak aynı komutu 5 defa tekrarlatabilirsiniz."
      2:
        image: 'notes/C3_maze_level_4_2.png'
        text: "Bu zamandan tasarruf sağlar ve daha kolay yapar. Kullanmak için sadece ilerle bloğunu tekrarla bloğu içine koy. Çalıştır tuşuna bas ve 5 defa ilerleyerek ayçiçeğine ulaştır."
    C3_playlab_create_game:
      1:
        image: 'notes/C3_playlab_create_game_1.png'
        text: "Şimdiye kadar animasyon yada hikaye yaptığında her çalıştırdığında aynı şeyi yapıyordu. Şimdi etkileşimli bir oyun yapabilirsiniz."
      2:
        image: 'notes/C3_playlab_create_game_2.png'
        text: "Denemek için bazı yeni bloklar var. \"Oka basıldığında\" ve \"hareket et\" blokları var. Bu blokları kullanarak ok tuşları ile oyuncuyu hareket ettirebilirsiniz. Ayrıca aktörler çarpıştığında yada tıklandığında blokları var. İyi eğlenceler!"
    C3_songwriting_with_parameters:
      1:
        image: 'notes/C3_songwriting_with_parameters_1.png'
        text: "Bu şarkı yazma dersidir. Müzik  bilgisayar programı gibidir. Yazılı notalar ve kelimeler şarkıcıya tam olarak ne yapması gerektiğini söyler. Müzik bazı bölümleri tekrar tekrar kullanılır."
      2:
        image: 'notes/C3_songwriting_with_parameters_2.png'
        text: "Bu koro diyoruz. Bir bilgisayar programı içinde tekrar tekrar kullanılan programın bazı bölümlere fonksiyon denir. Şarkı sözlerini okurken koro (nakarat) yazıyorsa, koro der misiniz? Hayır, hangi sözler koro (nakarat) olarak tanımlanır."
      3:
        image: 'notes/C3_songwriting_with_parameters_3.png'
        text: "Bu derste, küçük tavşan foo foo adlı bir küçük şarkı öğreneceksiniz. Şarkıka birkaç kez tekrareden nakarat vardır. Fonksiyonlar tekrar tekrar kullanabileceğiniz kod parçasıdır. Fonksiyon adımlarını tekrar tekrar yazmak zorunda değilsiniz Bu yüzden daha kolay ve verimli programlama yaparsınız. Sadece bir kez yazabilirsiniz!"
    C4_bee_conditional:
      1:
        image: 'notes/C4_bee_conditional_1.png'
        text: "Burada eğer bloğu var. Eğer çiçekteysen yada petekteysen birşey yapmasını söylüyor. Ne kadar nektar yada bal olduğunu bilmediğinde kullanışlı bir bloktur. sor işareti ile ne kadar olduğunu bilmediğimizi belirtiyoruz."
      2:
        image: 'notes/C4_bee_conditional_2.png'
        text: "Bu örnekte, eğer çiçekse bal al için eğer bloğunu kullan. Benzer şekilde bir tanesini de eğer petekse bal yapması için kullan. Da daa!"
    C4_conditionals:
      1:
        image: 'notes/C4_conditionals_1.png'
        text: "Şimdi eğer/değilse isimli yeni bloğumuz var. Bu yeni koşul ifadesi eğer bloğu gibi. Sadece şimdi altta değilse diye yeni bir yol var. eğer/değilse bloğu karar vererek iki işlemden birisini yapmamızı sağlar. Eğer arı çiçekte ise yapacağı işleri \neğer bloğu içine, çiçekte değilse yapacağı işleri değilse içine koyarız."
      2:
        image: 'notes/C4_conditionals_2.png'
        text: "Eğer blokları bilgisayarın karar vermesini sağlar. İnsanlar bir koşul oluştuğunda ne yapılacağı ile ilgili durumları bilgisayara söyler. Değilse durumu bu koşul oluşmadığında ne yapılacağıdır. Eğer/değilse bloğunun üst kısmı çiçekse diyor. İki nektar varsa yada yol varsa gibi farklı şeylerde diyebilirdi. Eğer bloğundaki ifade doğruysa ilk kısımdaki işleri yap. Eğer yanlışsa değilse kısımındaki işleri yap."
    C4_for_loops:
      1:
        image: 'notes/C4_for_loops_1.png'
        text: "Tekrarla bloğu kullandığımızda ne kadar yapılacağını bilgisayar nasıl biliyor. Aslında tekrarla bloğu arkada daha karmaşık bir kod saklıyor. Bu kod başlangıç değerinden bitiş değerine kadar belirli bir seri ile sayıyor."
      2:
        image: 'notes/C4_for_loops_2.png'
        text: "Örneğin tekrarla üç bloğu birden üçe kadar birer birer sayıyor. Her sayışın da içindeki kodu çalıştırıyor.  For (Şununla tekrarla) döngüleri ne kadar çalışacağını içindeki değişkenle biliyor. Önce değişken ilk değere ayarlanıyor ve her seferinde artırılarak döngü çalıştırılıyor. Değişken bitiş değerinden büyük olunca çalıştırma sonlanıyor."
      3:
        image: 'notes/C4_for_loops_3.png'
        text: "Gerçek bir For (şununla tekrarla) döngüsü sayaç değişkenini gerçekten göre bilmeni ve kodun içinde kullanmayı sağlar. Örneğin, bir sıra çiçeğin varsa ve ilkinde bir tane ikincisinde 2 tane ve üçüncüsünde 3 tane nektar varsa sayaç değerini kullanabilirsiniz. Sayaç kadar nektar toplayabilirsin. İlkinde bir tane ikincisinde iki ve üçüncüde üç.sayaç"
      4:
        image: 'notes/C4_for_loops_4.png'
        text: "Ayrıca şununla say döngüsü içinde birer birer değil farklı da sayabilirsin. İkişer, dörder sayabilirsin. Hatta her seferinde farklı sayıda sayabilirsin."
    C4_for_loops_bee:
      1:
        image: 'notes/C4_for_loops_bee_1.png'
        text: "Tekrarla bloğu kullandığımızda ne kadar yapılacağını bilgisayar nasıl biliyor. Aslında tekrarla bloğu arkada daha karmaşık bir kod saklıyor. Bu kod başlangıç değerinden bitiş değerine kadar belirli bir seri ile sayıyor."
      2:
        image: 'notes/C4_for_loops_bee_2.png'
        text: "Örneğin tekrarla üç bloğu birden üçe kadar birer birer sayıyor. Her sayışın da içindeki kodu çalıştırıyor.  For (Şununla tekrarla) döngüleri ne kadar çalışacağını içindeki değişkenle biliyor. Önce değişken ilk değere ayarlanıyor ve her seferinde artırılarak döngü çalıştırılıyor. Değişken bitiş değerinden büyük olunca çalıştırma sonlanıyor."
      3:
        image: 'notes/C4_for_loops_bee_3.png'
        text: "Gerçek bir For (şununla tekrarla) döngüsü sayaç değişkenini gerçekten göre bilmeni ve kodun içinde kullanmayı sağlar. Örneğin, bir sıra çiçeğin varsa ve ilkinde bir tane ikincisinde 2 tane ve üçüncüsünde 3 tane nektar varsa sayaç değerini kullanabilirsiniz. Sayaç kadar nektar toplayabilirsin. İlkinde bir tane ikincisinde iki ve üçüncüde üç.sayaç"
      4:
        image: 'notes/C4_for_loops_bee_4.png'
        text: "Ayrıca şununla say döngüsü içinde birer birer değil farklı da sayabilirsin. İkişer, dörder sayabilirsin. Hatta her seferinde farklı sayıda sayabilirsin."
    C4_for_loops_no_bee:
      1:
        image: 'notes/C4_for_loops_no_bee_1.png'
        text: "Tekrarla bloğu kullandığımızda ne kadar yapılacağını bilgisayar nasıl biliyor. Aslında tekrarla bloğu arkada daha karmaşık bir kod saklıyor. Bu kod başlangıç değerinden bitiş değerine kadar belirli bir seri ile sayıyor."
      2:
        image: 'notes/C4_for_loops_no_bee_2.png'
        text: "Örneğin tekrarla üç bloğu birden üçe kadar birer birer sayıyor. Her sayışın da içindeki kodu çalıştırıyor. For (Şununla tekrarla) döngüleri ne kadar çalışacağını içindeki değişkenle biliyor. Önce değişken ilk değere ayarlanıyor ve her seferinde artırılarak döngü çalıştırılıyor. Değişken bitiş değerinden büyük olunca çalıştırma sonlanıyor. Tekrarla döngüsü yerine şununla say döngüsü kullanmanın faydası döngü değişkenini görmendir."
    C4_function_create:
      1:
        image: 'notes/C4_function_create_1.png'
        text: "Fonksiyon bloklarının içini yazmayı öğrenmiştiniz. Şimdi baştan yeni fonksiyon yazmayı öğreneceğiz. Araç kutumuzda fonksiyon diye bölüm var. buna tıkladığınızda bir fonksiyon oluştur düğmesi göreceksin. Bu düğmeye basmak yeni bir fonksiyon bloğu getirecektir."
      2:
        image: 'notes/C4_function_create_2.png'
        text: "Daha önce olduğu gibi fonksiyonuna isim vereceksin, ne yaptığını yazacaksın. Örneğin kare çiz, üçgen çiz gibi. sonra blokları alttaki beyaz bölüme sürükleyeceksin. Bu blokları yeşil çerçeve içine sürükle."
      3:
        image: 'notes/C4_function_create_3.png'
        text: "Bir kez bitirdikten sonra kaydet ve çık. Bu sizi ana çalışma alanına götürecektir. Yeni fonksiyon araç kutunda fonksiyon bölümünde olacaktır. Bunu diğer bloklar gibi sürükleyerek kullanabilir ve bulmacayı çözebilirsin."
    C4_function_edit:
      1:
        image: 'notes/C4_function_edit_1.png'
        text: "Bilgisayar programlamanın harika yönlerinden birisi bilgisayara bir işi yapmayı bir defa öğretirsen bu öğrettiğin şeyi defalarca tekrar kullanabilirsin. Buna fonksiyon denir. Bir isim verirsin ve tekrar tekrar çağırırsın. Böylece yeni bir blok oluşturmuş olursun."
      2:
        image: 'notes/C4_function_edit_2.png'
        text: "Yazdığımız programda dört defa çizgi çizip dönerek kare çizmeyi öğrendik. Biz bu kodu alıp ona isim verebiliriz. draw a square, yani kare çiz. daha sonra ne zaman draw a square bloğunu eklersek ilgili kare çizme fonksiyonunu çağırır. Programlama dilimize yeni bir yetenek eklemiş olduk."
      3:
        image: 'notes/C4_function_edit_3.png'
        text: "Bu bulmacada biz kare çiz fonksiyonunu (draw a square) sizin için yazdık. Yeşil blok olarak araç kutunda göreceksin. Şimdi daha önce yazdığın kodu bu fonksiyonu kullanarak yazacaksın. Bunun için draw a square fonksiyonu içindeki düzenle düğmesine bas. Bu fonksiyon düzenleyici açar. Fonksiyon düzenleyici üç parçadan oluşur. İsim verdiğin parça. Sonra açıklama yazdığın bölüm ve en altta fonsiyon kodu yazman gereken bölüm. "
      4:
        image: 'notes/C4_function_edit_4.png'
        text: "Bu durumda, bunun bir kare çizmesi gerekiyor. Bunun altındaki beyaz alan fonksiyon çalışma alanıdır ve zaten kullandığın çalışma alanı gibi kullanabilirsin. Bu çalışma alanı içine ara kutusundan blok sürükle ve bırak. Bir kare fonksiyonu oluşturmak için gerekli blokları yerleştirmeyi unutmayın. Bitirdiğinde sakla düğmesine bas ve çık. Yeni fonksiyon araç kutunda fonksiyon bölümünde olacaktır. Bunu diğer bloklar gibi sürükleyerek kullanabilir ve bulmacayı çözebilirsin."
    C4_function_parameters:
      1:
        image: 'notes/C4_function_parameters_1.png'
        text: "İşte 50 piksel kenarlara sahip bir kare çizen bir fonksiyon. Bu harika ama eğer bir kenarı 50 piksel olan bir kare ve 100 piksel olan başka bir kare çizmek istedin? Hemen hemen aynı şeyi yapmak iki ayrı fonksiyon yazmak zorunda olmamalıyız. Bunun yerine, bir parametre kullanan fonksiyon kullanabilirsiniz."
      2:
        image: 'notes/C4_function_parameters_2.png'
        text: "Parametreler fonksiyonu içinde kullanılan değişkenleri fonksiyon içine geçirmek için kullanılır. Farklı boyutlarda kareler oluşturmak için bu fonksiyona bir parametre eklemeyi deneyelim. Fonksiyon Düzenleyicisi'nde adı düzenleyebilirsiniz ve açıklama girebilirsiniz. Ama şimdi bir de parametre ekleyebilirsiniz. Boşluğa, parametrenin adını yazın ve parametre Ekle'yi tıklatın. Bu yeni oluşturduğunuz parametre adı ile kırmızı bir blok oluşturur. \nŞimdi ileriye 100 ilerle bloğu içinde boyut parametresini kullanabilirsin."
      3:
        image: 'notes/C4_function_parameters_3.png'
        text: "Kaydet ve Kapat'ı tıklatın ve araç kutusunun işlevler kategorisinde gelen bir kare blok oluşturmak yeni dışarı sürükleyin. Fonksiyonda kenar uzunluğunu soran bir boşluk var. Matematik kategorisinden bir sayı bloğunu sürükleyin ve bu alana yerleştirin. Tekrar tekrar farklı uzunluktaki farklı boyutlarda kareler yapmak için kullanabileceğiniz fonksiyonu görüyor musun? Haydi deneyin!"
    C4_intro:
      1:
        image: 'notes/C4_intro_1.png'
        text: "Normalde kodlama yazı yazarak yapılıyor fakat biz burada blokları kullanacağız. Görsel olarak blokları sürükleyip birbirine bağlayarak kod yazacaksınız. Alt tarafta kod yazmış oluyoruz. Başlangıç olarak Kızgın kuşun ilerleyip yumurtasını çalan kötü domuzcuğa ulaşmasını sağlayacağız."
      2:
        image: 'notes/C4_intro_2.png'
        text: "Çalışma alanı üç bölgeye ayrılmıştır. Soldaki kodun çalışacağı labirenttir. Ne istendiğiyle ilgili bilgiler labirentin altındadır. Ortadaki bölge araç kutusudur. Buradaki her komuta kuş anlar ve yapar. Sağdaki boş bölge çalışma alanı olarak söylenir ve buraya programını yazarsın."
      3:
        image: 'notes/C4_intro_3.png'
        text: "İlerle bloğunu çalışma alanına sürükleyip Çalıştır düğmesine basınca ne olur? Kuş bir adım ilerler. Bir adım daha ilerlemesi için ne yapmalıyız? Bir ilerle bloğu daha ekleyebilirim."
      4:
        image: 'notes/C4_intro_4.png'
        text: "Sağa dön bloğunu çalışma alanına sürükleyip ilerle bloğunu antına kadar getireceğim ve sarı okun gözükene kadar ilerleteceğim. bıraktığımda iki blok birleşmiş olur. Çalıştır tuşuna tekrar basacağım. Kuş programdaki adımları üstten alta doğru sırayla yapacak."
      5:
        image: 'notes/C4_intro_5.png'
        text: "Bir bloğu silmek isterseniz sürükleyin ve çöp kutusuna bırakın. Çalıştır tuşu ile çalıştırdıktan sonra yeniden başla tuşu ile tekrar başlayabilirsin. Şimdi domuzcuğu yakalayalım!"
    C4_math_artist:
      1:
        image: 'notes/C4_math_artist_1.png'
        text: "50 piksel yüksekliğinde bir dikdörtken istiyorum. Boyuda yüksekliğin iki katı olsun. Bunu bilgisayara nasıl programlarım? Sanatçı 50 git sağa dön ve, sonra 100 git diyorum. sonra bunu tekrarlıyorum. Ama bilgisayar için matematik yapıyorum."
      2:
        image: 'notes/C4_math_artist_2.png'
        text: "Elli çarpı iki sonucunu kafadan bulmak kolay olabilir fakat mümkün olan her durumda bu tür hesapları bilgisayara bırakmanız gerekir çünkü bilgisayarlar matematiği gerçekten çok iyi yapıyor. Eğer sadece yükseklik diye parametre varsa, yukarı 50 piksel gidip yüksekliğiyaıp genişlikte yüksekliğin iki katı kadar gidebilirim."
    C4_unplugged_algorithms:
      1:
        image: 'notes/C4_unplugged_algorithms_1.png'
        text: "Bu derse Tangram algoritmaları denir. Bir tangram yedi adet şekilden oluşur ve bunlarla şekiller oluşturulur. Sen algoritma kullanarak ortağınıza bulmacayı anlatacaksın."
      2:
        image: 'notes/C4_unplugged_algorithms_2.png'
        text: "Algoritmadır bir görevi tamamlamak için gerekli adımları listeleyen bir adımdır. Onları her gün alışveriş listeleri ve tarifler gibi şeyler için kullanıyoruz. Bir algoritmayı basit tutarsanız, onu yorumlamanın birçok yolu vardır ve her kim bu algoritmayı gerçekleştirirmeye çalıştığına tam olarak ne istediğini anlamama ihtimali vardır. Emin olmak isterseniz algoritmanızın ayrıntılı ve çok özel olması gerekir."
      3:
        image: 'notes/C4_unplugged_algorithms_3.png'
        text: "Bir resimi tamamlamak için bir algoritma kullanıyorum. Kurt resmini yapmayı denemek istedim ama ressam değilim. Neyse ki tam bana göre numaralı resm var. Kırk renk ve küçük harfler her bölümü boyamak için hangi rengkullanacağımı söylüyor. Boyayı numaraları ile kullanmak tam olarak hangi renkleri nerede kullanmam gerekiğini söylüyor."
      4:
        image: 'notes/C4_unplugged_algorithms_4.png'
        text: "Bu yüzden yönergeleri izliyorum ve resim harika oldu. Harika bir algoritma. Yönergeleri yeterince belirli olmasaydı, benim kurtlariyi görünmezdi. Gerçekten istediğin şeyi almak için son derece hassas olmak en iyisidir."
    C4_unplugged_binary:
      1:
        image: 'notes/C4_unplugged_binary_1.png'
        text: "Her takım, bu kağıt tutan kişi talimat verirken kapalı ve açık işaretini bilmeleri gerekir. İkili sistem, iki harfli bir alfabe gibidir. A ve B yerine 0 ve 1 vardır."
      2:
        image: 'notes/C4_unplugged_binary_2.png'
        text: "İkili sistemi en yaygın kullandığınız yer eğer komutudur. Programlama için klasik bir şeydir. Program çalışır ve bir şey doğru olup olmadığını deniyor, ve doğruysa yapıyor. Ya da doğru değilse başka bir iş yapıyor. Peki biraz daha karmaşık bir şey yapmak istiyorsam. Eğer komutu yerine görüntü veya ses kullanacaksın."
      3:
        image: 'notes/C4_unplugged_binary_3.png'
        text: 'Bir bilgisayar sadece ikili sistem bilir, fakat resim ikili değil, sıfırlar ve birler değil bu durumda nasıl anlayacak? İşte bir örnek: Bu güzel resim var. Şimdi bir resim temelde bir bilgi şeklidir. Bu bilgiyi ikili formda tutabilirsin.'
      4:
        image: 'notes/C4_unplugged_binary_4.png'
        text: "Her kare için ve bu panda ayısının üzerine bir ızgara koyduğumuzu hayal edin, o karenin daha siyah ya da daha beyaz olup olmadığına karar vereceğiz. Ve sonra o şekilde boyayacağız. Artık ızgaradaki her hücre siyah ya da beyaz olur ve daha sonra söylediğimiz siyah kareler sıfırlar ( çift basamak), ve beyaz kareler birler, diğeri çift basamaklardır. En sonunda bir deste bir ve sıfırlarla ayrılırsınız. Bu, bu görüntüyü ikili olarak temsil etme şeklinizdir."
    C4_unplugged_forloops:
      1:
        image: 'notes/C4_unplugged_forloops_1.png'
        text: "Bu ders, döngü eğlencesi için çağrılır. Bu derste bir zar oyunu oynamak için bir sayı satırı kullanacağız. Her oyuncu, bir başlangıç değeri, durdurma değeri ve zaman aralığı atamak için üç kez oynar. Her dönüş sırasında başlangıç değerimizi ve aralık değerimizle aynı adımları aşan her değeri daire içine alırız. Durdurma değerimize ulaştığımızda dolaşmayı bırakırız. En yüksek skora sahip olan kişi kazanır!"
      2:
        image: 'notes/C4_unplugged_forloops_2.png'
        text: "Döngüler birçok alanda işe yaramaktadır ve eğer bir meteorolojist olmak istiyorsanız, her zaman döngüleri kullanabilirsin. Merhaba, Ben Becky. EverPower Yenilenebilir Enerji'de rüzgar meteorolojisti olarak çalışıyorum. Şirketin rüzgar çiftliklerinin bulunduğu Columbia Nehri Kanyonunda rüzgar hızlarını tahmin ediyorum."
      3:
        image: 'notes/C4_unplugged_forloops_3.png'
        text: "Burada ne kadar rüzgar olacağını anlamaya çalışıyoruz böylece ne kadar enerji üretilebileceğini biliriz. Bu bilgiyi gerçek enerji tüccarlarına veririz. Onlar, bizim söylediğimiz olabilecek enerji miktarına bağlı olarak enerji nakil hatları şebekesinin, ışıklarınızın bulunduğu, dengelenmiş olduğundan emin olmak için enerjiyi alırlar ve satarlar ve çiftliklerimizden sağladığımız enerji miktarını en üst seviyeye çıkarırız."
      4:
        image: 'notes/C4_unplugged_forloops_4.png'
        text: "Biz EverPower Yenilenebilir Enerji'nin Portland'taki ulusal kontrol merkezindeyiz ve ülke çapında bütün çiftliklerimizden gelen bilgiler burada toplanıyor. Bugün en güçlü bilgisayarlar bile atmosferi taklit edememektedir. Bilgisayar tahmin modellerinde ızgara adını verdiğimiz yapılar vardır. Her ızgara noktası bir enlem ve boylamdır. Biz rüzgar hızı, sıcaklık ve basınç gibi şeyleri hesaplamak zorundayız."
      5:
        image: 'notes/C4_unplugged_forloops_5.png'
        text: "Since these are fairly big grids and we're doing this in a lot of points we're looping over these things millions and millions of times. Everything I do I'll use for loops. Here for example is a for loop right there. When you're forecasting wind, there's so many different parameters that go into it it would be impossible for a human to sit down and do all those calculations. There's so many different aspects to what's going to be affecting what's happening to the wind that we need a computer model in order to forecast it."
    C4_unplugged_madlibs:
      1:
        image: 'notes/C4_unplugged_madlibs_1.png'
        text: "Bu derste bazı boş hikayeleri doldurma ile oynuyor olacağız. Çok eğlenceli farklılıklar içeren benzer hikayeler oluşturmak için doldurabileceğiniz bir şablonunuz var."
      2:
        image: 'notes/C4_unplugged_madlibs_2.png'
        text: "Bu derste, biz ayrıca daha önce oluşturulmuş iki hikayeden soyutlanmış bir şablon nasıl oluşturulacağını öğrendik. Soyutlama, farklılıkların ve ayrıntıların kaldırılması sanatıdır, böylece bir çözümün birçok farklı sorun için nasıl işe yaradığını görebilirsiniz. Bu bilgisayar bilimlerinde çok faydalıdır çünkü farklı durumlarda yararlı olabilecek işlevler oluşturmamızı sağlar."
    C4_unplugged_parameters:
      1:
        image: 'notes/C4_unplugged_parameters_1.png'
        text: "This lesson is called songwriting with parameters. We're going to be writing some songs here. Sometimes the chorus is just a little bit different each time you sing it. Do you remember Old Macdonald Had a Farm? The chorus is slightly different for each animal. And on that farm, he had a cow, e-i-e-i-o. The small change in each chorus can be shown using something we call parameters."
      2:
        image: 'notes/C4_unplugged_parameters_2.png'
        text: "Sometimes a function needs a parameter. A parameter is an extra piece of information you can pass to a function to customize it for a special need. When you make ice cream sundaes with your friends, you are using a process similar to parameters in a computer program."
      3:
        image: 'notes/C4_unplugged_parameters_3.png'
        text: "The disk of vanilla ice cream might be the same for every sundae but when you ask your friends which two toppings they'd like, you could get lots of different combinations. Topping is the function name but each type of topping is a parameter. Functions and parameters work together to make great computer programs and great sundaes too."
    C4_unplugged_variables:
      1:
        image: 'notes/C4_unplugged_variables_1.png'
        text: "This lesson is called variables in envelopes. We're going to learn how we can build sentences when we're still missing pieces of information. Most of us are already familiar with the idea of filling in a blank. We do it when we're putting our name on our homework. Sometimes there's more than one word that needs to be filled out and in that case, we give that blank a label so that we know which piece of information goes where."
      2:
        image: 'notes/C4_unplugged_variables_2.png'
        text: "Değişkenler, değişebilen bilgi parçaları için yer tutucudur. Eksik bilgi için bir değişken kullanarak, yaptığımız her şey üzerinde çalışmaya devam edebilir ve başka birinin eksik bilgileri daha sonra doldurmasına izin verebiliriz. Yazılımda, değişkenleri çok kullanıyoruz. Değişkenleri ad, e-posta adresi ve kullanıcı adı için yer tutucu olarak kullanırız. Bu şekilde, kullanıcıya bunları doldurduktan sonra bu bilgilerin nerelerde görüntüleneceğini programa bildirebiliriz. Değişkenlerİ Çalışmalarımızda her zaman kullanırız."
      3:
        image: 'notes/C4_unplugged_variables_3.png'
        text: "Daha sonra ihtiyacımız olacak bilgileri saklamak için değişkenleri kullanırız. Diyelim ki kullanıcıların mesajlarını (tweet) saymamız gerekiyor. Kullanıcı her mesaj attıdığında değişkeni bir sayı arttırmak ve her mesaj sildiğinde değişkeni bir sayı azaltmak gerekir. Kaç mesaj olduğunu öğrenmek için bu değişkene bakarız."
    C4_variables_artist:
      1:
        image: 'notes/C4_variables_artist_1.png'
        text: "Değişkenler içinde değer sakladığınız bir alandır. Bu değişkeni algoritma içinde kullandığınız zaman değişkenin saklandığı alan açılır ve içindeki değer kullanılır. Bu size değişkenini içindeki değere göre farklı çalışabilen daha akıllı algoritmalar yazma olanağı tanır."
      2:
        image: 'notes/C4_variables_artist_2.png'
        text: "Örneğin eğer doğum günü kutlamak için bir algoritma yazma isteseniz ve \"İyi ki doğdun küçük kardeşim, 10 yaşına girdin\" yazdınız harika oldu fakat gelecek yıl 11 olacak yine yeni mesaj yazacaksınız. Bunun yerine kardeşinizin yaşı için bir değişken kullanabilirsiniz ve \"İyi ki doğdun küçük kardeşim `yaş`yaşına girdin\" diyebilirsiniz Çünkü yaş değişkeni her yıl bir artacak bunu yaş=yaş+1 yapabileceksiniz."
      3:
        image: 'notes/C4_variables_artist_3.png'
        text: "Bu bulmacada sanatçının çizeceği çizginin boyunu belirlemek için length(uzunluk) değişkenini kullanacağız. Kodumuzda ilerle bloğu length değişkenine bakacak içindeki değeri görecek."
    C4_variables_playlab:
      1:
        image: 'notes/C4_variables_playlab_1.png'
        text: "Değişkenler içinde değer sakladığınız bir alandır. Bu değişkeni algoritma içinde kullandığınız zaman değişkenin saklandığı alan açılır ve içindeki değer kullanılır. Bu size değişkenini içindeki değere göre farklı çalışabilen daha akıllı algoritmalar yazma olanağı tanır."
      2:
        image: 'notes/C4_variables_playlab_2.png'
        text: "Now you're going to try playlab where you are given different games and you can change the values of variables like speed, height, score, in order to change the game. You won't have to change the algorithm of the game to change how it plays, just the variable."
      3:
        image: 'notes/C4_variables_playlab_3.png'
        text: "In my work for Kindle and on X-ray for books, we apply variables in many different ways. One way that you can use a variable is to store page numbers of a book. A user can increase and decrease the size of the font on a page. Based on the font size, the number of pages in the book can change. We can adjust it by storing the number of pages in the variable."
    infinity_playlab_events:
      1:
        image: 'notes/infinity_playlab_events_1.png'
        text: "Şimdi oyun programcılarının her zaman kullandığı \"Olay\" kavramını öğreneceğiz. Olay bir şey olduğunda bunu algılayıp bu eylemle ilgili eylemi gerçekleştir."
      2:
        image: 'notes/infinity_playlab_events_2.png'
        text: "Burada, Baymax'ı Hiro'ya dokunacak ve yukarı / aşağı ok tuşlarını veya yukarı / aşağı düğmeleri kullandığında Rapunzel'e dokunacak şekilde hareket ettireceğiz. Yukarı ok bloğunu kullanacağız ve hareket aktörünü yukarı ok bloğuna ekleyeceğiz, böylece oyuncu yukarı ok tuşuna bastığında, \"yukarı ok olduğunda\" bloğuna eklenen her şey çalıştırılır. Baymax'ı geride bırakmak için aynı şeyi yapacağız. Adım adım oyunu daha interaktif hale geliyor."
    infinity_playlab_intro:
      1:
        image: 'notes/infinity_playlab_intro_1.png'
        text: "Yani kaçıncı sınıfa gidiyorsun? İkinci. Onuncu sınıfta. Birinci sınıf. Programı öğrendiğimde sekizinci sınıftaydım. İlk bilgisayarımı altıncı sınıftayken aldım. Beni heyecanlandıran insanların problemlerini çözmenin mümkün olması. Sen kendini ifade edebilir, bir fikirden bir şeyler inşa edebilirsin."
      2:
        image: 'notes/infinity_playlab_intro_2.png'
        text: "Bilgisayar bilimleri, üniversite öğrencileri ve profesyonellerin sonraki yirmi ve otuz yıl için yapacakları bir çok şeyin temelidir. Ben programlamayı seviyorum çünkü insanlara yardımcı olmayı seviyorum. İnsanların hayatını kolaylaştıracak bir şeyler inşa etme fırsatı buluyorum. Bence bu süper güce sahip olmaya en yakın şey. Başlamak en önemli kısmı. Ben yeni başlayanlardanım ve kendimle öğrenmek istiyorum."
      3:
        image: 'notes/infinity_playlab_intro_3.png'
        text: "Ben John Vechey. PopCap Games kurucularından biriyim. Plants vs. Zombies, Bejeweled ve Peggle gibi oyunlar yapıyoruz. Oyunlar hakkında birçok şey kodun ya da sanatınızın ne kadar mükemmel olduğu değil, nasıl hissettirdiği ve ne kadar eğlenceli olduğudur. Bunu sadece oyun yapmada kendi yeteneklerinizi deneyerek, yaparak, öğrenerek, uyarlayarak ve tekrarlayarak öğrenebilirsiniz."
      4:
        image: 'notes/infinity_playlab_intro_4.png'
        text: "Favori bir video oyununuz var mı? Peki Play Lab'ı kullandığımız gibi oyunlar yaratmaya yönelik bir adım atacağız. İyi oyunların bir hikayesi ve her hikayede de oyuncular vardır. Oyuncular konuşmak, hareket etmek ve başkalarıyla etkileşim kurmak gibi şeyler yaparlar. Belki skor puanları bile oyunun kurallarına dayalıdır. Bugün tüm bunları nasıl yapacağımızı Anna, Elsa, Hiro, Baymax ve Rapunzel Disney karakterleri ile teker teker öğreneceğiz. Bir çizikten, telefonda oynanan ve paylaşılan bir oyun inşa edeceğiz."
      5:
        image: 'notes/infinity_playlab_intro_5.png'
        text: "Ekranınız üç ana bölüme ayrılmıştır. Sol taraftaki programımızın çalışacağı oyun boşluğudur. Her seviye için talimatlar aşağıda yazılmıştır.Orta alan ise araç kutusudur ve her bloklar kodun bir parçasıdır. Sağ taraftaki beyaz boşluğa ise çalışma alanı diyoruz ve burası programımızı inşa edeceğimiz yer."
      6:
        image: 'notes/infinity_playlab_intro_6.png'
        text: "Başlamak için bloklarınızı turuncu renkli “çalıştırma zamanı” bloğu ile bağlamanız gerekecek. Sarı çerçeveyi görene kadar sürükleyerek birçok bloğu birbirine bağlayabilirsiniz daha sonra birbirlerine yaslanacaklardır. Bu ilk bulmacada Hiro Oyuncu 1 ve Baymax Oyuncu 2’dir. Baymax’a ulaşmak için Hiro’yu, “saga taşı” bloğunu sürükleyip “çalıştırma zamanı” bloğuna bağlayarak hareket ettirmeliyiz. Bloklarınızı mevcut konuma getirdiğinizde, programladıklarınızı görmek için “Çalıştır” butonuna basın."
      7:
        image: 'notes/infinity_playlab_intro_7.png'
        text: "Haydi başla ve sonunda kendi oyununu yarat. Oyununda farklı oyuncular iletişim kurabilir, mutlu yada üzgün olabilir, puan kazanabilir, micro robot, vişne, buz, tencere atabilir ve hatta birbirini yok edebilirsin. Bunların hepsi senin elinde istediğin gibi oyununu yapabilirsin."
    infinity_playlab_repeat_forever:
      1:
        image: 'notes/infinity_playlab_repeat_forever_1.png'
        text: "Bir şeyi sonsuza dek tekrarlamak zorunda olduğunu hayal edebiliyor musun? Bilgisayarlar şeyler yinelemekte gerçekten çok iyi olduğu için sen yapmak zorunda değilsin. Bu sürece bloğu var. Bu blok içindeki herşey sonsuza kadar oyunda olacak."
      2:
        image: 'notes/infinity_playlab_repeat_forever_2.png'
        text: "So if we wanted an actor to do something repeatedly without the player having to do anything, we'll put those blocks inside the repeat forever block. In this next puzzle, our goal is to help Anna walk up and down continuously. Learning how the repeat commands work will save you a ton of time later when you build your own game."
    tutorial_puzzle_challenge:
      1:
        image: 'notes/tutorial_puzzle_challenge_1.png'
        text: "Oliva büyüdüğünde ne olmak istiyorsun? Bir astronot. Bir bilgisayar programcısı nedir bilirmisin? Hmmm hayır. Bekle ne dedin? Nasıl açıklayacağımı bilmiyorum bilgisayar programlama gayet basit. Bir takım yöntemleri vardır aynı yemek tarifleri gibi, istediğin sonuca ulaşmak bu yöntemleri aşama aşama takip etmen lazım."
      2:
        image: 'notes/tutorial_puzzle_challenge_2.png'
        text: "Pixel sayısını ve hat uzunluğunu bu yıkma işlemi ile değiştirebilirim. Ne kadar uzun demiştin? Talimatları tekrar görmek için başlat butonun altına bakabilirsin. Şimdi bloğu ileri götürmeyi kullandım ve 100 pixeli seçicem. Bir bloğu silmel için onu çöp bidonuna sürükleyebilirim. Hadi onu geri koyalım."
      3:
        image: 'notes/tutorial_puzzle_challenge_3.png'
        text: "Başlata basarak kodu başlat. Hmmm bu çalışmadı! Neyin yanlış olduğunu anlamak için yenileye basıcam. Bir bulmacayı istediğin kadar deneyebilirsin ve bırakıp tekrar gelebilirsin. Sadece elinden gelenin en iyisini yaptığına emin ol ve pes etme. Hadi bir ilerle daha ekliyelim. Hala çalışmıyor. Diğer bloklar arasına bir blok daha koyabilirim."
      4:
        image: 'notes/tutorial_puzzle_challenge_4.png'
        text: "Let's take a turn block and place it in between the move forwards. Turn left 45 degrees. Let's run it again. Reset, run, awesome! Here's another puzzle. Sometimes you are given starter code to complete. Here I need to add the appropriate lengths and degrees."
      5:
        image: 'notes/tutorial_puzzle_challenge_5.png'
        text: "You may sometimes accidentally trash the starter code. What do you do then? You can press clear puzzle and start all over again. I'm going to drag this number block into the different pixel areas. Select 100 for pixels, 45 for degrees and 100 for pixels again. Awesome! Here is the Code Studio bee. I need to move the bee to each flower and get nectar."
      6:
        image: 'notes/tutorial_puzzle_challenge_6.png'
        text: "The first flower is three blocks away so I need three move forwards. 1, 2, 3. Then a get nectar, then another get nectar. Well that didn't work! I'll place another move forward between the get nectars and run it again. Yay, it works! You just learned how to use the Code Studio artist and bee puzzles. Good luck on the Code Studio puzzle challenge."
    unplug1:
      1:
        image: 'notes/unplug1_1.png'
        text: "Oliva büyüdüğünde ne olmak istiyorsun? Umm, astronot. Bir bilgisayar programcısının ne olduğunu biliyor musun?? Evet, umm, hayır. Umm, ne ne? Nasıl açıklayacağımı bilmiyorum bilgisayar programlama gayet basittir. Bir takım yöntemleri vardır, bir yemek tarifi gibi. İstediğin sonucu elde etmek için adım adım takip etmen gerekir."
      2:
        image: 'notes/unplug1_2.png'
        text: "Bilgisayar bilimi dünyayı etkilemek için bir yoldur. Müzik videoları olabilir, oyunlar olabilir, birisinin başkasıyla alakalı ilişkisinin olup olmadığını tespit edebilir. Bilirsiniz, insanların arkadaşları. Hayatları kurtaran her türlü çılgınlığı yapabilirsiniz. Bence bir sürücüye sahip olmak zorundasın. Benim için bir fırça gibi. Bence büyük programlama tümüyle büyük sanattan farklı değildir."
      3:
        image: 'notes/unplug1_3.png'
        text: "When I finally learned a little bit of programming, that blank wall resolved into a bunch of doors and you open them and of course then you find behind them is another hallway filled with a bunch of doors. Programming is fun and easy. You can do anything your mind wants to do. Finally you start to open enough doors the light comes in. To me a finished program is like a structure filled with light. All the corners are illuminated. The number of people that you can touch and interact with is something the world has never seen before."
      4:
        image: 'notes/unplug1_4.png'
        text: "Our first lesson in this series is all about what computer science is, what a computer scientist does and how you can be more responsible in your use of technology. It's a very important lesson but it is a little text-heavy. At the end, you get to make your very own customized encoding using your initials. It's a fun activity and it's very empowering because binary is one of those things that feels very technical but once you understand it, it's like you speak a secret language."
    unplug2:
      1:
        image: 'notes/unplug2_1.png'
        text: "The lesson on computational thinking is intended to teach you how to take a big difficult problem and break it down into several simpler problems. The goal of this lesson is to write a set of instructions that someone can follow to draw one of the monsters included in the lesson plan."
      2:
        image: 'notes/unplug2_2.png'
        text: 'Students will break into groups to write instructions and then they''ll switch them with another group that will have to draw the monster. Groups will write instructions using the four steps of computational thinking: decomposition, pattern location, abstraction and algorithms.'
      3:
        image: 'notes/unplug2_3.png'
        text: "First groups will decompose the task which means make a game plan. Then they'll look for patterns between all the monsters in the catalog. When they come across differences between the monsters, they'll abstract or remove those details. For instance, one monster in the catalog has vegitas eyes and another has spritem eyes. But they both have eyes so we can write a line that says the monster has blank eyes."
      4:
        image: 'notes/unplug2_4.png'
        text: "So students will be able to write a set of instructions, called an algorithm, that list the monsters' parts with blanks for what the styles should be. This is the set of instructions they'll pass to other students to recreate their very own monster."
    unplug3:
      1:
        image: 'notes/unplug3_1.png'
        text: "In graph paper programming, we help explain how coding works by trying to help people recreate drawings using only arrows and scribbles. One person is given a small drawing on graph paper and they need to go through using only specific arrows and try to describe how to recreate that drawing."
      2:
        image: 'notes/unplug3_2.png'
        text: 'In this activity, the only symbols you can use are these: move one square forward, one square backward, move one square up, move one square down, change to next color, and fill in your square with color. Once we have that coded up, we can hand it off to another person who can read the code and try and recreate the picture.'
    unplug4:
      1:
        image: 'notes/unplug4_1.png'
        text: "In graph paper programming, we help explain how coding works by trying to help people recreate drawings using only arrows and scribbles. One person is given a small drawing on graph paper and they need to go through using only specific arrows and try to describe how to recreate that drawing."
      2:
        image: 'notes/unplug4_2.png'
        text: "Etkinliğin ikinci yarısında, kağıda katlayıp biz kaç farklı şekilde altı aynı dikdörtgen oluşturacağız. O zaman nasıl birden çok çözümün aynı sonuça nasıl ulaşabileceğini ele alacağız. Ayrıca bazı durumlarda bazı çözümler daha iyi olabilir."
    unplug5:
      1:
        image: 'notes/unplug5_1.png'
        text: "In graph paper programming, we help explain how coding works by trying to help people recreate drawings using only arrows and scribbles. One person is given a small drawing on graph paper and they need to go through using only specific arrows and try to describe how to recreate that drawing."
      2:
        image: 'notes/unplug5_2.png'
        text: "Etkinliğin ikinci yarısında, kağıda katlayıp biz kaç farklı şekilde altı aynı dikdörtgen oluşturacağız. O zaman nasıl birden çok çözümün aynı sonuça nasıl ulaşabileceğini ele alacağız. Ayrıca bazı durumlarda bazı çözümler daha iyi olabilir."
    unplug6:
      1:
        image: 'notes/unplug6_1.png'
        text: "Bu aktiviteye kartlarla kodlama adı verilir ve her bir yaş için harika.  Eğer bloğunu öğrendiğin gibi, burada doğru veya yanlış olup olmadığını değerlendiriyoruz. Bu koşullar  farklı şekillerde kullanılabilir."
      2:
        image: 'notes/unplug6_2.png'
        text: "We take advantage of that by creating programs on paper that you run using a random draw of playing cards. You might have an if statement that says something like if the card you draw is greater than 8, you get a point. Otherwise, your opponent gets a point. You can make it as simple or as complicated as you feel comfortable."
    unplug7:
      1:
        image: 'notes/unplug7_1.png'
        text: "You know how when you look up the lyrics for a song and they define the chorus at the very beginning and then for the rest of the song, they just refer you back to the chorus? That's how you call a function."
      2:
        image: 'notes/unplug7_2.png'
        text: "In this lesson, we define the chorus at the beginning of our song and then we sing through our song and go back and we notice that the class doesn't sing the word chorus, they automatically go up to the top where we define the chorus and sing through that. We use that as a great introduction to how to understand what a program is doing when it defines and calls a function."
      3:
        image: 'notes/unplug7_3.png'
        text: "We use familiar songs including Old Macdonald to talk about how a chorus is called over and over and how sometimes a chorus can change. When you have a song like Old Macdonald, where certain words change, that's a great place to introduce the idea of parameters. Passing certain words through so that you can send extra information to your function. Once we're sure everybody gets it, you can take your own familiar songs and break them up yourself. See if you can figure it out together."
    unplug8:
      1:
        image: 'notes/unplug8_1.png'
        text: "Soyutlama hakkındaki dersimiz temelde bir sürü farklı kelimeyle doldurulabilen bir hikayeye boşluk eklediğiniz bilindik madlisp kavramını kullanır. Bu fikri ele alır, çocukları kendi hikayeleri için kendi kelimeleriyle gelmeye zorlarız ve soyutlama kavramını gerçekten açıklarız."
      2:
        image: 'notes/unplug8_2.png'
        text: "It's all about functions and how you can have a function, like in Old Macdonald, where you have a structure for your chorus but you have something little that changes and you abstract out that little thing that changes and you can fill it in with your own word every time through. But sometimes you have three words that change and so you fill those in with three parameters, that's still pretty helpful."
      3:
        image: 'notes/unplug8_3.png'
        text: "You can have one function that handles lots of different problems. Lots of times people will write separate functions for all those problems, not realizing there's only one little difference. If they could just find a way to handle that one little difference, they could just reuse one function over and over again, instead of having 14 different functions."
    unplug9:
      1:
        image: 'notes/unplug9_1.png'
        text: "Röle programlama, bilgisayar biliminden çok daha eğlencelidir. Bazen herkes biraz sabırsızlanmaya başlar ve onları yeniden heyecanlandırmak istersin. Bu bilgisayar bilimine biraz heyecan eklemenin bir yoludur."
      2:
        image: 'notes/unplug9_2.png'
        text: "You break everyone up into two groups where they stand in a line and run relay style. The first person in each group runs to the other side of the room where you have a graph paper drawing and a blank piece of paper waiting for them. They write down the first step to creating that image, run back to their line, tag the next player who goes back up to write the next step."
      3:
        image: 'notes/unplug9_3.png'
        text: "This is a great way to get across the idea of debugging, needing to proofread your own work, and needing to check the work of the people done before you. You'll quickly understand how important it is that you be careful in your coding when a whole team is depending on you."
    unplug10:
      1:
        image: 'notes/unplug10_1.png'
        text: "Bu etkinlik İnternetin nasıl çalıştığını anlaşılması kolay bir yolla açıklar. Basit dönemlerde ihtiyaç duyacağın tüm terimler dizgesini biz açıklıyoruz böylece öğrenciler gönderilen mesajların tıpkı elekronik postalar gibi benzerini yapabiliyor."
      2:
        image: 'notes/unplug10_2.png'
        text: "Students will transmit messages while pretending to be one of three transmission methods. Wireless internet, DSL or fiber optic. The students who represent wi-fi will have to wear the message they're transmitting on their head because wifi is the most likely to drop some information."
      3:
        image: 'notes/unplug10_3.png'
        text: "The students pretending to be DSL or cable will carry the message on the back of their hand, where they're slightly less likely to drop information. And the students representing fiber optic will get to carry them with both hands. This activity is a great way to understand something that many of us use every day."
    unplug11:
      1:
        image: 'notes/unplug11_1.png'
        text: "Şimdi, yaptığın on dokuz etkinlikteki her şeye durup kuş bakışı bakarak düşünme zamanı. Bu öğrencilerin yaptıkları şeylerin ne kadar devasa bir başarı olduğunu söylemek için mükemmel bir zamandır. Öğrenciler birçok yetişkinin bilgisayar bilimi hakkında bildiğinden daha çok bu dersleri öğrenmişlerdir."
      2:
        image: 'notes/unplug11_2.png'
        text: "Sınıfça yada gruplar halinde en çok sevilen ders hakkında tartışın. Öğrendiğiniz her şeye dönüp baktığınızda, burası öğrencilerinizin yaratıcılığının parlayabileceği yerdir. Onları gruplara ayırın ve kendi bağlantısız derslerini oluşturmalarını isteyin. Her bir gruba anahtar bir kavram, fonksiyon yada algoritma gibi, atayın ve elinizde onların kullanması için birçok el yapımı materyal bulundurun. Her bir grup kendi yeni ve bağımsız aktivitesini sunsun yada bazı öğrecilerin yapılan aktiviteleri için başka bir gün ayırın."
      3:
        image: 'notes/unplug11_3.png'
        text: "From everyone here at Code.org, we hope you've had a TON of fun during this course. And whether your dream is to create the best new app, use programming to help cure diseases, or you just want to be a stellar problem-solver, this course was the first step in achieving those dreams."
    starwars_intro:
      1:
        image: 'notes/starwars_intro_1.JPG'
        text: 'Merhaba, ben Star Wars: Güç Uyanıyor''un yapımcısı Kathleen Kennedy. Bugün starlarımızdan biri olan BB-8 ile çalışıyor olacaksınız. BB-8 küresel bir droiddir. Yaptığı her şey, her hareketi bir bilgisayar yazılımı ile kontrol edilmektedir. Bilgisayar bilimleri, pazarlamadan sağlık hizmetine ve film yapımcılığına kadar her endüstriyi etkiler. Hatta, Güç Uyanıyor gibi bir filmin yapımında yüzlerce bilgisayar mühendisi beraber çalıştı.'
      2:
        image: 'notes/starwars_intro_2.JPG'
        text: "Merhaba, ben Rachel Rose. ILM'de üst düzey bir Ar-Ge mühendisiyim, animasyon ve yaratık geliştirme takımının başındayım. Güç Uyanıyor'da sanatçıların karakterler için donanım geliştirmelerine yardımcı oluyorum. Karakterlerin hareket eden kısımları olan bu donanımlar, onların çok uzak bir galakside inandırıcı olmalarını sağlıyor."
      3:
        image: 'notes/starwars_intro_3.JPG'
        text: "Önümüzdeki bir saatte kendi Star Wars oyunumuzu inşa edeceğiz. Sana programlamanın temel konseptlerini öğreteceğiz. Normalde programlama hep yazıdır ama biz burada blokları sürükleyip bırakarak program yazacağız. Aslında hala kod yaratıyor olacaksınız. Temel blokları denedikten sonra seni internetteki en popüler programlama dillerinden biri olan JavaScript'e geçireceğiz."
      4:
        image: 'notes/starwars_intro_4.JPG'
        text: "İlk önce, Rey ile beraber BB-8'in yürüyerek hurda parçalarını toplaması için onu programlayacağız. Ekranın üç parçaya ayrılmış durumda. Solda kodun çalışacağı Star Wars oyun alanı yer alıyor. Her bölüm için yönergeler oyun alanının altında yazıyor."
      5:
        image: 'notes/starwars_intro_5.JPG'
        text: "Orta kısım araç kutusu ve burada BB-8'in anlayacağı komutlar olan bloklar yer alıyor."
      6:
        image: 'notes/starwars_intro_6.JPG'
        text: "Sağdaki beyaz kısım programı inşa edeceğimiz çalışma alanı."
      7:
        image: 'notes/starwars_intro_7.JPG'
        text: "Eğer solaİlerle(); blokunu çalışma alanına sürükleyip, oynata basarsam ne olur? BB-8 sola bir kare hareket eder."
      8:
        image: 'notes/starwars_intro_8.JPG'
        text: "Peki BB-8'in sola ilerledikten sonra başka bir şey yapmak istiyorsam ne yapmalıyım? Programımıza bir tane daha blok ekleyebilirim. yukarıİlerle(); blokunu seçip renkli ışık belirene kadar solaİlerle(); blokumun altına sürükleyeceğim. Sonra bırakacağım ve iki blok birbirine kenetlenecek."
      9:
        image: 'notes/starwars_intro_9.JPG'
        text: "Oynata bir daha bastığımda, BB-8, çalışma alanımızdaki dizilmiş komutları yukarıdan aşağıya doğru canlandıracak. Eğer bir bloğu silmek isterseniz, dizilmiş komutlardan çıkarıp alet kutusuna sürüklemeniz yeterli."
      10:
        image: 'notes/starwars_intro_10.JPG'
        text: "Oynata bastıktan sonra, her zaman sıfırla tuşuna basarak BB-8'in başa dönmesini sağlayabilirsin. Haydi şimdi başlayalım!"
    starwars_typing:
      1:
        image: 'notes/starwars_typing_1.JPG'
        text: "Kullandığımız blokların içinde JavaScript komutları var. JavaScript, profesyonel geliştiriciler için günümüzdeki en popüler programlama dilidir. Bloklar, kodlama öğrenmeye başlamak için harika bir yol. Harvard ve Berkeley gibi en iyi üniversiteler bile bu yöntemi kullanıyor. Temel bilgileri öğrendikten sonra mühendisler yazarak kodlama yapıyor, çünkü bu bizim daha hızlı ilerlememizi sağlıyor."
      2:
        image: 'notes/starwars_typing_2.JPG'
        text: "Araç kutusundan bulup sürüklemek zorunda kalmadan yüzlerce komut yazabiliriz. Öğrenme aşamasında olduğun için başta yazmak yavaş gelebilir ama senin de denemeni istedik."
      3:
        image: 'notes/starwars_typing_3.JPG'
        text: "Çalışma alanının sağında bulunan göster düğmesine tıklayarak bloklar ya da yazı ile kod girişi yapmak arasında geçiş yapabilirsin."
      4:
        image: 'notes/starwars_typing_4.JPG'
        text: "Bir sonraki derste, şimdiki yazma modunun dışına çıkarak başlayacağız. Burada hala blokları metin kutusundan sürükleyebilir yada komut adını yazabilirsiniz. Yazmaya başladığınızda, yazdığınız yerin altında muhtemel komutların isimlerini göreceksiniz. Komut adının tamamını yazmak yerine, daha hızlı ilerlemek için bunlardan birini seçebilirsiniz. Bu otomatik tamamlama özelliğini kod yazarken ben her zaman kullanırım."
      5:
        image: 'notes/starwars_typing_5.JPG'
        text: "Kod yazarken, bilgisayar çok kesin olmanıza ihtiyaç duyar. Komut isimlerini, parantezler ve noktalı virgül dahil, tamamen doğru şekilde hecelemeniz ve büyük harfle yazmanız gerekir. En küçük yazım hatasında bile, BB-8 kodu anlayamaz ve hareket edemez."
      6:
        image: 'notes/starwars_typing_6.JPG'
        text: "Herhangi bir satırda hata yaptığında, editör senin için o satırı vurgular böylece o satırı daha kolay düzeltebilirsin."
      7:
        image: 'notes/starwars_typing_7.JPG'
        text: "Eğer mahsur kalırsanız, başa dön butonuyla her zaman baştan başlayabilirsiniz ve herhangi bir zamanda sağ üst köşeye basarak blok moduna geçebilirsiniz. Haydi yazmayı deneyelim. Eğer hata yaparsanız, üzülmeyin. Doğruyu yapmak, herkesin birkaç denemesini alır."
    starwars_events:
      1:
        image: 'notes/starwars_events_1.JPG'
        text: "Merhaba, benim adım Charia Carter. Ben bir kıdemli yaratıcı yapımcı olarak Walt Disney Imagineering firmasında çalışıyorum. Aslında Disney parklarındaki eğlence oyunlarından sorumluyum. Biz her zaman kendimizi geliştirmek ve daha iyi bir deneyim sağlamak için teknolojinin kalbine yolculuk ediyoruz."
      2:
        image: 'notes/starwars_events_2.JPG'
        text: "Tebrikler, başardın! BB-8 programladın. Şimdi daha zor bir şey için hazır olduğumuzu düşünüyorum. Hadi bakalım. Programlama temellerini öğrendin, kendi oyunumuzu tasarlıyacağız ve R2-D2 ve C-3PO oyunun yıldızı olacak."
      3:
        image: 'notes/starwars_events_3.JPG'
        text: Şimdi oyun programcılarının her zaman kullandığı "Olay" kavramını öğreneceğiz. Olay bir şey olduğunda bunu algılayıp bu eylemle ilgili eylemi gerçekleştir.
      4:
        image: 'notes/starwars_events_4.JPG'
        text: "Olayların dinlemesine bazı örnekler; fare tıklaması veya aşağı/yukarı tuşu veya ekrana bir kere dokunma."
      5:
        image: 'notes/starwars_events_5.JPG'
        text: "R2-D2 yukarı hareket edip asi pilota mesaj iletecek ve aşağı ilerleyip diğer asi pilota gidecek. Biz onu taşımak için olayları kullanacağız. Oyuncu yukarı/aşağı ok tuşlarını veya yukarı/aşağı düğmelerini kullabilir."
      6:
        image: 'notes/starwars_events_6.JPG'
        text: "Biz whenUp() olay bloğuna goUp() (Yukari git) bloğü ekleyebilirsin. Oyuncu yukarı ok tuşuna bastığında, whenUp() olayına iliştirilmiş kod çalıştırılır. Ve biz R2-D2 yu aşağı taşımak için aynı şeyi yapacağız."
      7:
        image: 'notes/starwars_events_7.JPG'
        text: "Bunu yapmak için whenUp() denilen bir komutunu kullanacağız. Komut araç dışına sürüklediğinizde, bir noktalı virgül yerine küme parantezi ile başlar ve biter. Bu bizi diğer komutları araya koymak için alan sağlar. Yukarı ok tuşuna her basıldığında bu parantez içindeki komutlar çalışır."
      8:
        image: 'notes/starwars_events_8.JPG'
        text: "We want R2-D2 to go up so let's put a goUp(); block inside the command. And we'll do the same thing to make R2-D2 go down."
      9:
        image: 'notes/starwars_events_9.JPG'
        text: "Now instead of writing all the code to control our droid in advance, we can let R2-D2 react to button press events that move him around the screen. Step by step, your game is getting more interactive."
    starwars_congrats:
      1:
        image: 'notes/starwars_congrats_1.JPG'
        text: "Merhaba, benim adım Alice ve Code.org firmasında ürün ve mühendislik ekiplerini yönetiyorum. Şu anda üzerinde uğraştığınız eğitimde üzerinde çalıştım."
      2:
        image: 'notes/starwars_congrats_2.JPG'
        text: "Son seviyeye geldin. Tebrikler! Kendi yıldız savaşları oyununu yapmak için bilmeniz gereken her şeyi öğrendin. Şimdi daha fazla talimat yok, Çözecek bulmaca yok. Kendi oyununu yap ve nasıl çalıştığını seçin. Bir şey daha, hatta daha fazlasını yapman için yeni komutları ve yeni sesleri açtık."
      3:
        image: 'notes/starwars_congrats_3.JPG'
        text: "[students speaking] So we made a game basically where you get points when you get puffer pigs. The twist is everytime you get a puffer pig a storm trooper appears. Actually the whole screen is full of puffer pigs and then when you touch 10,000 of them, you win."
      4:
        image: 'notes/starwars_congrats_4.JPG'
        text: "Kaybedemeyeceğin bir oyun yaptık ve bu oyunda ortadan kaldırdığın her şey sana puan verir. Programım için tuşların yerlerini değiştirdim böylece sen ne zaman yukarı tıklasan karakterin aşağı iner ve sağa gittiğinde, karakterin sola gider. Bu gerçekten zor! Bazen sadece avantaj elde edersin eğer oyunu geliştiren kişiysen adaletsiz bir avantaj. Anladım mı? Oley!"
      5:
        image: 'notes/starwars_congrats_5.JPG'
        text: "Oyununuzu tamamladığınızda, arkadaşlarınızla paylaşabilir veya telefonunuzda oynayabilirsiniz. İyi eğlenceler!"
    starwars_blocks_intro:
      1:
        image: 'notes/starwars_blocks_intro_1.JPG'
        text: 'Merhaba, ben Star Wars: Güç Uyanıyor''un yapımcısı Kathleen Kennedy. Bugün starlarımızdan biri olan BB-8 ile çalışıyor olacaksınız. BB-8 küresel bir droiddir. Yaptığı her şey, her hareketi bir bilgisayar yazılımı ile kontrol edilmektedir. Bilgisayar bilimleri, pazarlamadan sağlık hizmetine ve film yapımcılığına kadar her endüstriyi etkiler. Hatta, Güç Uyanıyor gibi bir filmin yapımında yüzlerce bilgisayar mühendisi beraber çalıştı.'
      2:
        image: 'notes/starwars_blocks_intro_2.JPG'
        text: "Merhaba, ben Rachel Rose. ILM'de üst düzey bir Ar-Ge mühendisiyim, animasyon ve yaratık geliştirme takımının başındayım. Güç Uyanıyor'da sanatçıların karakterler için donanım geliştirmelerine yardımcı oluyorum. Karakterlerin hareket eden kısımları olan bu donanımlar, onların çok uzak bir galakside inandırıcı olmalarını sağlıyor."
      3:
        image: 'notes/starwars_blocks_intro_3.JPG'
        text: "Bir saat içerisinde sana programlamanın temellerini öğretecek bir Star Wars oyunu oluşturacaksın. Genellikle programlama yazı yazarak yapılır fakat biz kod yazmayı blokları sürükleyerek yapacağız. BB-8 programını başlamak için Rey ile tüm hurdaları toplamaya gidiyoruz."
      4:
        image: 'notes/starwars_blocks_intro_4.JPG'
        text: "Ekranınız üç ana parçaya ayrılmıştır. Sol tarafta Star Wars oyun alanı bulunuyor, programınız işte burada çalışacak. Her bir seviyenin yönergeleri oyun alanının altında yazılıdır."
      5:
        image: 'notes/starwars_blocks_intro_5.JPG'
        text: "Orta kısım araç kutusu ve burada BB-8'in anlayacağı komutlar olan bloklar yer alıyor."
      6:
        image: 'notes/starwars_blocks_intro_6.JPG'
        text: "Sağdaki beyaz kısım programı inşa edeceğimiz çalışma alanı."
      7:
        image: 'notes/starwars_blocks_intro_7.JPG'
        text: "Eğer solaİlerle(); blokunu çalışma alanına sürükleyip, oynata basarsam ne olur? BB-8 sola bir kare hareket eder."
      8:
        image: 'notes/starwars_blocks_intro_8.JPG'
        text: "Peki BB-8'in sola ilerledikten sonra başka bir şey yapmak istiyorsam ne yapmalıyım? Programımıza bir tane daha blok ekleyebilirim. yukarıİlerle(); blokunu seçip renkli ışık belirene kadar solaİlerle(); blokumun altına sürükleyeceğim. Sonra bırakacağım ve iki blok birbirine kenetlenecek."
      9:
        image: 'notes/starwars_blocks_intro_9.JPG'
        text: "Eğer bir bloğu silmek isterseniz, dizilmiş komutlardan çıkarıp alet kutusuna sürüklemeniz yeterli."
      10:
        image: 'notes/starwars_blocks_intro_10.JPG'
        text: "Oynata bastıktan sonra, her zaman sıfırla tuşuna basarak BB-8'in başa dönmesini sağlayabilirsin. Haydi şimdi başlayalım!"
    starwars_blocks_events:
      1:
        image: 'notes/starwars_blocks_events_1.JPG'
        text: "Merhaba, benim adım Charia Carter. Ben bir kıdemli yaratıcı yapımcı olarak Walt Disney Imagineering firmasında çalışıyorum. Aslında Disney parklarındaki eğlence oyunlarından sorumluyum. Biz her zaman kendimizi geliştirmek ve daha iyi bir deneyim sağlamak için teknolojinin kalbine yolculuk ediyoruz."
      2:
        image: 'notes/starwars_blocks_events_2.JPG'
        text: "Tebrikler, başardın! BB-8 programladın. Şimdi daha zor bir şey için hazır olduğumuzu düşünüyorum. Hadi bakalım. Programlama temellerini öğrendin, kendi oyunumuzu tasarlıyacağız ve R2-D2 ve C-3PO oyunun yıldızı olacak."
      3:
        image: 'notes/starwars_blocks_events_3.JPG'
        text: Şimdi oyun programcılarının her zaman kullandığı "Olay" kavramını öğreneceğiz. Olay bir şey olduğunda bunu algılayıp bu eylemle ilgili eylemi gerçekleştir.
      4:
        image: 'notes/starwars_blocks_events_4.JPG'
        text: "Olayların dinlemesine bazı örnekler; fare tıklaması veya aşağı/yukarı tuşu veya ekrana bir kere dokunma."
      5:
        image: 'notes/starwars_blocks_events_5.JPG'
        text: "R2-D2 yukarı hareket edip asi pilota mesaj iletecek ve aşağı ilerleyip diğer asi pilota gidecek. Biz onu taşımak için olayları kullanacağız. Oyuncu yukarı/aşağı ok tuşlarını veya yukarı/aşağı düğmelerini kullabilir."
      6:
        image: 'notes/starwars_blocks_events_6.JPG'
        text: "We use the whenUp() event block and attach the goUp() block to it. When the player presses the up arrow key, the code attached to the whenUp() block is run. And we'll do the same thing to make R2-D2 move down. Now instead of writing all the code to control our droid in advance, we can let R2-D2 react to button press events that move him around the screen."
      7:
        image: 'notes/starwars_blocks_events_7.JPG'
        text: "Adım adım oyunun daha interaktif oluyor."
    starwars_blocks_congrats:
      1:
        image: 'notes/starwars_blocks_congrats_1.JPG'
        text: "Merhaba, benim adım Alice ve Code.org firmasında ürün ve mühendislik ekiplerini yönetiyorum. Şu anda üzerinde uğraştığınız eğitimde üzerinde çalıştım."
      2:
        image: 'notes/starwars_blocks_congrats_2.JPG'
        text: "Son seviyeye geldin. Tebrikler! Kendi yıldız savaşları oyununu yapmak için bilmeniz gereken her şeyi öğrendin. Şimdi daha fazla talimat yok, Çözecek bulmaca yok. Kendi oyununu yap ve nasıl çalıştığını seçin. Bir şey daha, hatta daha fazlasını yapman için yeni komutları ve yeni sesleri açtık."
      3:
        image: 'notes/starwars_blocks_congrats_3.JPG'
        text: "[students speaking] So we made a game basically where you get points when you get puffer pigs. The twist is everytime you get a puffer pig a storm trooper appears. Actually the whole screen is full of puffer pigs and then when you touch 10,000 of them, you win."
      4:
        image: 'notes/starwars_blocks_congrats_4.JPG'
        text: "Kaybedemeyeceğin bir oyun yaptık ve bu oyunda ortadan kaldırdığın her şey sana puan verir. Programım için tuşların yerlerini değiştirdim böylece sen ne zaman yukarı tıklasan karakterin aşağı iner ve sağa gittiğinde, karakterin sola gider. Bu gerçekten zor! Bazen sadece avantaj elde edersin eğer oyunu geliştiren kişiysen adaletsiz bir avantaj. Anladım mı? Oley!"
      5:
        image: 'notes/starwars_blocks_congrats_5.JPG'
        text: "Oyununuzu tamamladığınızda, arkadaşlarınızla paylaşabilir veya telefonunuzda oynayabilirsiniz. İyi eğlenceler!"
    mc_intro:
      1:
        image: 'notes/mc_intro_1.JPG'
        text: "Benim adım Jens Bergensten ama bana daha çok Jeb derler. Minecraft mojang.com'da baş geliştirici olarak çalışıyorum. Sanırım program yazmaya başladığımda 11 ya da 12 yaşındaydım çünkü oyun yapmak istiyordum. Babamın bir arkadaşı bana oyun yapmak için program yazmayı öğrenmem gerektiğini söylemişti. İşte ben de böyle başladım. Mimari şeyleri tasarlamayı ve çözmeyi seviyorum. Minecraft'ın en sevdiğim tarafı işte bu."
      2:
        image: 'notes/mc_intro_2.JPG'
        text: "Önümüzdeki bir saat boyunca Alex ya da Steve ile program yazarak bilgisayar biliminin temellerini ve Minecraft dünyasının simülasyonu çıkarılmış bir parçasında ilerlemeyi öğreneceksiniz."
      3:
        image: 'notes/mc_intro_3.JPG'
        text: "Geleneksel program yazma genelde metinle olur ama bugün blok olarak yazacağız. Bu, program yazmak için sürükleyip bırakabileceğiniz blokları kullanan bir sistem. Aslında burada JavaScript kodu oluşturuyorsunuz."
      4:
        image: 'notes/mc_intro_4.JPG'
        text: "Birazdan öğreneceğiniz konseptler bilgisayar programcılarının her gün kullandığı ve bilgisayar biliminin temelini oluşturan şeylerdir. Mojang'da biz de aynı konseptleri Minecraft'ın çalışması için kullanıyoruz."
      5:
        image: 'notes/mc_intro_5.JPG'
        text: "Başlamadan önce karakterinizi seçeceksiniz. Ben Alex'i seçiyorum. Şimdi onun ekranda hareket etmesine yardımcı olacak bir program kodu yapalım."
      6:
        image: 'notes/mc_intro_6.JPG'
        text: "Ekranınız üç ana parçaya ayrılmıştır. Sol tarafta Minecraft oyun alanı bulunuyor, programınız işte burada çalışacak. Her bir seviyenin talimatları aşağı yazılır."
      7:
        image: 'notes/mc_intro_7.JPG'
        text: "Bu ortadaki alan araç kutusudur ve bu blokların her biri Alex'in hareketlerini yönlendiren bir komuttur."
      8:
        image: 'notes/mc_intro_8.JPG'
        text: "Sağ taraftaki beyaz bölgenin adı iş alanıdır ve programınızı işte burada yaparsınız."
      9:
        image: 'notes/mc_intro_9.JPG'
        text: "\"ileri git\" bloğunu çalışma alanımıza sürükleyip sonra Koş'a tıklarsak ne olur? Alex, panonun üzerinde bir birim ileri gider."
      10:
        image: 'notes/mc_intro_10.JPG'
        text: "Peki Alex bir birim ileri gittikten sonra başka bir şey yapmak istersek ne mi yapacağız? Programımıza başka bir blok ekleyebiliriz. Şimdi \"sağa dön\" bloğunu seçeceğim ve bunu turuncu çizgi görünene kadar \"ileri git\" bloğunun altına sürükleyeceğim. Ardından bunu bırakacağım ve iki blok birbirine bağlanacak.  Tekrar Koş seçeneğine bastığımızda Alex çalışma alanımızda biriken komutları yukarıdan aşağı doğru gerçekleştirir."
      11:
        image: 'notes/mc_intro_11.JPG'
        text: "Ve bir bloğu silmek isterseniz bloğu yığından alıp araç kutusuna sürüklemeniz yeterli."
      12:
        image: 'notes/mc_intro_12.JPG'
        text: Yaptığınız değişiklikleri geri almak ve seviyeyi başladığı hale getirmek için çalışma alanının sağ üst köşesindeki Baştan Başla düğmesini kullanın. Son bir şey daha; dönüş bloklarındaki küçük üçgeni görüyor musunuz? Bu üçgenleri gördüğünüzde farklı bir seçenek seçebilirsiniz. Şimdi kod yazmaya başlayalım!
    mc_repeat:
      1:
        image: 'notes/mc_repeat_1.JPG'
        text: "Ben Lydia Winters, Mojang'ın marka direktörüyüm ve Minecraft adında küçük bir oyun yaptık."
      2:
        image: 'notes/mc_repeat_2.JPG'
        text: "Minecraft'ta yapmayı en sevdiğim şey keşfetmek. Mağaralarda maceraya atılmayı ve neler bulabileceğimi görmeyi çok seviyorum. Programcı olmayan biri olarak, Minecraft dersleri görerek kendi başıma kod yazmayı öğrenmek için gerçekten sabırsızlanıyorum."
      3:
        image: 'notes/mc_repeat_3.JPG'
        text: "Son seviyede çok fazla \"ileri git\" bloğu gerekiyordu. Bilgisayara dört veya beş defa ileri git komutunu verebilseydik çok daha kolay olurdu. Neyse ki bilgisayarlar, tekrar döngüleriyle komutları tekrar etmede çok iyi."
      4:
        image: 'notes/mc_repeat_4.JPG'
        text: "Minecraft'ı yaparken yeni bir dünya yaratmak için gereken başlangıç malzemelerini yerleştirmek için tekrar döngülerini kullanıyoruz. Bu da binlerce blok anlamına gelir. Döngüleri ayrıca küçük şeyler için de, mesela Alex yürürken ayaklarını ileri geri hareket ettirmek için kullanıyoruz. Tekrar döngüleri, program yazmanın çok önemli bir parçasıdır."
      5:
        image: 'notes/mc_repeat_5.JPG'
        text: "Gece çökmek üzere, bu nedenle önümüzdeki birkaç seviyede güvende kalmak için bir ev yapacağız. Bunu çok kolay bir şekilde yapmak için tekrar bloğunu kullanacağız."
      6:
        image: 'notes/mc_repeat_6.JPG'
        text: "Evimizin duvarını yapmak için Alex'e dört defa ilerlemesini ve kalasları yerleştirmesini söyleyebilir ya da ona ileri giderek bir kalası yerleştirmesini söyleyip ardından bu komutu alıp tekrar bloğunu kullanarak bu eylemi birkaç defa gerçekleştirmesini sağlayabiliriz. Şimdi tekrar bloğuna tıklayacağız ve ona bu eylemi kaç defa gerçekleştirmesini istediğimizi söyleyeceğiz. Şimdi gece çökmeden evimizi yapalım! İyi eğlenceler."
    mc_if_statements:
      1:
        image: 'notes/mc_if_statements_1.JPG'
        text: "Şimdi eğer komutlarını öğreneceğiz. Eğer komutları, program yazmayı öğrenmenin temel bir parçasıdır. Bunlar bir bilgisayarın karar vermesine yardımcı olur."
      2:
        image: 'notes/mc_if_statements_2.JPG'
        text: "Tüm bilgisayarlar eğer komutlarını kullanır, buna telefonum da dahil. Örneğin telefonumun kilidini açtığımda eğer şifreyi doğru girersem telefonun kilidi açılır diyen bir kodu çalıştırır. Aksi takdirde bir hata mesajı verir."
      3:
        image: 'notes/mc_if_statements_3.JPG'
        text: "Seteve'in ve Alice'in dünyada gördükleri bir şey için tepki vermeleri için kodunuzda eğer komutlarını kullanabilirsiniz. Örneğin eğer önlerinde bir kaya varsa sola dönebilirler. Ya da eğer bir ağaçla karşılaşırsa sağa dönerler."
      4:
        image: 'notes/mc_if_statements_4.JPG'
        text: "Bu durumda lavın içine düşmek de istemeyiz. Lav için de plan yapmak çok kolay. Lavı ekranda görebiliyoruz. Peki ya taşın altındaki göremediğimiz lav?"
      5:
        image: 'notes/mc_if_statements_5.JPG'
        text: "Taşı çıkardıktan sonra ileri gitmeden önce orada lav olup olmadığını kontrol etmemiz gerekecek. Eğer orada lav varsa ileri gitmeden önce karakterimizin önüne bir taş yerleştirmek isteyebiliriz. Bu şekilde güvenli bir şekilde ilerleyebiliriz. Şimdi maden çıkarma zamanı! Nereye gittiğinize dikkat etmek için eğer komutlarını kullanmayı unutmayın."
    mc_congrats_share:
      1:
        image: 'notes/mc_congrats_share_1.JPG'
        text: "Tebrikler! Bilgisayar biliminin temel blok yapımını öğrendiniz."
      2:
        image: 'notes/mc_congrats_share_2.JPG'
        text: "Şimdi bu blokları kullanarak kendi eserlerinizi yapabilirsiniz. Başka bir talimat ya da çözülecek başka bir yapboz yok. İstediğiniz her şeyi yapabilirsiniz. Seçim size kalmış."
      3:
        image: 'notes/mc_congrats_share_3.JPG'
        text: "[öğrenci konuşması] Gerçek olmak üzere. Kırkıyorum. Meşalelerden bir L yaptım. Huş kalaslardan bir A yaptım. Oldu, başardık. Yünden bir ev yaptık!"
      4:
        image: 'notes/mc_congrats_share_4.JPG'
        text: "Eserinizi tamamladığınızda arkadaşlarınızla paylaşmak için bir link almak üzere paylaş seçeneğini seçin. İyi eğlenceler!"
    mc_congrats_no_share:
      1:
        image: 'notes/mc_congrats_no_share_1.JPG'
        text: "Tebrikler! Bilgisayar biliminin temel blok yapımını öğrendiniz."
      2:
        image: 'notes/mc_congrats_no_share_2.JPG'
        text: "Şimdi bu blokları kullanarak kendi eserlerinizi yapabilirsiniz. Başka bir talimat ya da çözülecek başka bir yapboz yok. İstediğiniz her şeyi yapabilirsiniz. Seçim size kalmış."
      3:
        image: 'notes/mc_congrats_no_share_3.JPG'
        text: "[öğrenci konuşması] Gerçek olmak üzere. Kırkıyorum. Meşalelerden bir L yaptım. Huş kalaslardan bir A yaptım. Oldu, başardık. Yünden bir ev yaptık!"
      4:
        image: 'notes/mc_congrats_no_share_4.JPG'
        text: "Şimdi istediğiniz her şeyi yapabilirsiniz. İyi eğlenceler!"
    gumball_intro:
      1:
        image: 'notes/gumball_intro_1.JPG'
        text: "Kendi oyununuzu yapmak istiyorsanız, gerçekten kolaydır. Tüm ihtiyacınız sadece birkaç programlama temeli ve ardından oluşturduğunuz bir oyunu oynamaya başlayabilirsiniz."
      2:
        image: 'notes/gumball_intro_2.JPG'
        text: "Favori bir video oyununuz var mı? Peki Play Lab'ı kullandığımız gibi oyunlar yaratmaya yönelik bir adım atacağız. İyi oyunların bir hikayesi ve her hikayede de oyuncular vardır. Oyuncular konuşmak, hareket etmek ve başkalarıyla etkileşim kurmak gibi şeyler yaparlar. Belki skor puanları bile oyunun kurallarına dayalıdır. Bugün tüm bunları nasıl yapacağımızı eğlenceli karakterler ile teker teker öğreneceğiz. Baştan başlayarak "
      3:
        image: 'notes/gumball_intro_3.JPG'
        text: "Bugün tüm bunları nasıl yapacağımızı Ağlenceli karakterler ile teker teker öğreneceğiz. Baştan başlayarak telefonda oynanan ve paylaşılan bir oyun inşa edeceğiz."
      4:
        image: 'notes/gumball_intro_4.JPG'
        text: "Ekran 3 ana bölüme ayrılmıştır. Sol taraf programınızın çalıştırılacağı oyun alanıdır. Her düzey için talimatlar aşağıda yazılmıştır."
      5:
        image: 'notes/gumball_intro_5.JPG'
        text: "Bu orta alan araç kutusu ve buradaki her blok bir kod parçasıdır."
      6:
        image: 'notes/gumball_intro_6.JPG'
        text: "Sağ taraftaki beyaz bölgenin adı iş alanıdır ve programınızı işte burada yaparsınız."
      7:
        image: 'notes/gumball_intro_7.JPG'
        text: "Kendi ekleyeceğiniz blokları \"Çalıştığı zaman\" bloğuna bağlamak gerekir. Blokları sürükleyip sarı çizgi çıkana kadar birbirine yaklaştırarak bağlayabilirsiniz."
      8:
        image: 'notes/gumball_intro_8.JPG'
        text: "Bu ilk bulmacada, \"söyle\" bloğunu \"çalıştığı zaman\" bloğuna bağlayarak aktörlere bir şeyler söyleteceğiz. Bloklarınızı yerleştirdikten sonra, ne programladığınızı görmek için \"çalıştır\" butonuna basın."
      9:
        image: 'notes/gumball_intro_9.JPG'
        text: "Haydi başla ve sonunda kendi oyununu yarat. Oyununda farklı oyuncular iletişim kurabilir, mutlu yada üzgün olabilir, puan kazanabilir, birşeyler atabilir ve hatta birbirini yok edebilir. Bunların hepsi senin elinde istediğin gibi oyununu yapabilirsin."
    gumball_events:
      1:
        image: 'notes/gumball_events_1.JPG'
        text: "Şimdi oyun programcılarının her zaman kullandığı \"Olay\" kavramını öğreneceğiz. Olay  bir şey olduğunda bunu algılayıp bu eylemle ilgili eylemi gerçekleştir."
      2:
        image: 'notes/gumball_events_2.JPG'
        text: "Olayların dinlemesine bazı örnekler; fare tıklaması veya aşağı/yukarı tuşu veya ekrana bir kere dokunma."
      3:
        image: 'notes/gumball_events_3.JPG'
        text: "Burada, oyuncu aktöre tıkladığında aktöre bir şeyler söyleteceğiz. Tıklağında bloğunu kullanacağınız ve ona \"söyle\" bloğunu ekleyeceğiz. Oyuncu tıkladığında, bu bloğa bağlı olan tüm bloklar uygulanacak."
      4:
        image: 'notes/gumball_events_4.JPG'
        text: "Ayrıca \"zaman okları\" parçaları var. Eğer \"hareket\" parçalarını bunlara bağlarsanız, karakterinizi yukarı, aşağı, sola ve sağa hareket ettirmeye başlayabilirsiniz!. Git gide oyununuz daha çok interaktif oluyor."
    gumball_repeat:
      1:
        image: 'notes/gumball_repeat_1.JPG'
        text: "Bir şeyi hiç durmadan daima yapman gerekiyor olduğunu hayal edebilir misin? Umarım gerekli olmamıştır çünkü bilgisayarlar nesneleri tekrarlamada gerçekten iyidir."
      2:
        image: 'notes/gumball_repeat_2.JPG'
        text: "Bu sonsuza kadar tekrar et bloğu. Bu blok içerisindeki herhangi bir şey oyunda daima devam ediyor. Eğer oyunu oynayan kişi hiçbir şey yapmadığı halde bir şeyi sürekli yapan bir oyuncu istiyorsak, bu blokları sonsuza kadar tekrar et bloğu içerisine yerleştireceğiz."
      3:
        image: 'notes/gumball_repeat_3.JPG'
        text: "Sıradaki bu bulmacada, hedefimiz aktöre bir işi devamlı yapması için yardım etmek. Tekrarla komutunun nasıl çalıştığını öğrendiğin zaman sana kendi oyununu yaparken tonla zaman kazandıracak."
    iceage_intro:
      1:
        image: 'notes/iceage_intro_1.JPG'
        text: "Kendi oyununuzu yapmak istiyorsanız, gerçekten kolaydır. Tüm ihtiyacınız sadece birkaç programlama temeli ve ardından oluşturduğunuz bir oyunu oynamaya başlayabilirsiniz."
      2:
        image: 'notes/iceage_intro_2.JPG'
        text: "Favori bir video oyununuz var mı? Peki Play Lab'ı kullandığımız gibi oyunlar yaratmaya yönelik bir adım atacağız. İyi oyunların bir hikayesi ve her hikayede de oyuncular vardır. Oyuncular konuşmak, hareket etmek ve başkalarıyla etkileşim kurmak gibi şeyler yaparlar. Belki skor puanları bile oyunun kurallarına dayalıdır. Bugün tüm bunları nasıl yapacağımızı eğlenceli karakterler ile teker teker öğreneceğiz. Baştan başlayarak "
      3:
        image: 'notes/iceage_intro_3.JPG'
        text: "Bugün tüm bunları nasıl yapacağımızı Ağlenceli karakterler ile teker teker öğreneceğiz. Baştan başlayarak telefonda oynanan ve paylaşılan bir oyun inşa edeceğiz."
      4:
        image: 'notes/iceage_intro_4.JPG'
        text: "Ekran 3 ana bölüme ayrılmıştır. Sol taraf programınızın çalıştırılacağı oyun alanıdır. Her düzey için talimatlar aşağıda yazılmıştır."
      5:
        image: 'notes/iceage_intro_5.JPG'
        text: "Bu orta alan araç kutusu ve buradaki her blok bir kod parçasıdır."
      6:
        image: 'notes/iceage_intro_6.JPG'
        text: "Sağ taraftaki beyaz bölgenin adı iş alanıdır ve programınızı işte burada yaparsınız."
      7:
        image: 'notes/iceage_intro_7.JPG'
        text: "Kendi ekleyeceğiniz blokları \"Çalıştığı zaman\" bloğuna bağlamak gerekir. Blokları sürükleyip sarı çizgi çıkana kadar birbirine yaklaştırarak bağlayabilirsiniz."
      8:
        image: 'notes/iceage_intro_8.JPG'
        text: "Bu ilk bulmacada, \"söyle\" bloğunu \"çalıştığı zaman\" bloğuna bağlayarak aktörlere bir şeyler söyleteceğiz. Bloklarınızı yerleştirdikten sonra, ne programladığınızı görmek için \"çalıştır\" butonuna basın."
      9:
        image: 'notes/iceage_intro_9.JPG'
        text: "Haydi başla ve sonunda kendi oyununu yarat. Oyununda farklı oyuncular iletişim kurabilir, mutlu yada üzgün olabilir, puan kazanabilir, birşeyler atabilir ve hatta birbirini yok edebilir. Bunların hepsi senin elinde istediğin gibi oyununu yapabilirsin."
    iceage_events:
      1:
        image: 'notes/iceage_events_1.JPG'
        text: "Şimdi oyun programcılarının her zaman kullandığı \"Olay\" kavramını öğreneceğiz. Olay  bir şey olduğunda bunu algılayıp bu eylemle ilgili eylemi gerçekleştir."
      2:
        image: 'notes/iceage_events_2.JPG'
        text: "Olayların dinlemesine bazı örnekler; fare tıklaması veya aşağı/yukarı tuşu veya ekrana bir kere dokunma."
      3:
        image: 'notes/iceage_events_3.JPG'
        text: "Burada, oyuncu aktöre tıkladığında aktöre bir şeyler söyleteceğiz. Tıklağında bloğunu kullanacağınız ve ona \"söyle\" bloğunu ekleyeceğiz. Oyuncu tıkladığında, bu bloğa bağlı olan tüm bloklar uygulanacak."
      4:
        image: 'notes/iceage_events_4.JPG'
        text: "Ayrıca \"zaman okları\" parçaları var. Eğer \"hareket\" parçalarını bunlara bağlarsanız, karakterinizi yukarı, aşağı, sola ve sağa hareket ettirmeye başlayabilirsiniz!. Git gide oyununuz daha çok interaktif oluyor."
    iceage_repeat:
      1:
        image: 'notes/iceage_repeat_1.JPG'
        text: "Bir şeyi hiç durmadan daima yapman gerekiyor olduğunu hayal edebilir misin? Umarım gerekli olmamıştır çünkü bilgisayarlar nesneleri tekrarlamada gerçekten iyidir."
      2:
        image: 'notes/iceage_repeat_2.JPG'
        text: "Bu sonsuza kadar tekrar et bloğu. Bu blok içerisindeki herhangi bir şey oyunda daima devam ediyor. Eğer oyunu oynayan kişi hiçbir şey yapmadığı halde bir şeyi sürekli yapan bir oyuncu istiyorsak, bu blokları sonsuza kadar tekrar et bloğu içerisine yerleştireceğiz."
      3:
        image: 'notes/iceage_repeat_3.JPG'
        text: "Sıradaki bu bulmacada, hedefimiz aktöre bir işi devamlı yapması için yardım etmek. Tekrarla komutunun nasıl çalıştığını öğrendiğin zaman sana kendi oyununu yaparken tonla zaman kazandıracak."
    mc_2016_intro:
      1:
        image: 'notes/mc_2016_intro_1.jpg'
        text: "Merhaba, benim adım Jens ve Minecraft'ta baş yaratıcı tasarımcıyım. Önümüzdeki bir saatte kendi Minecraft oyununu yapacaksın. Minecraft'a benzeyecek ama dünya durmuş durumda. Koyunlar hareket etmiyor, tavuklar yumurtlamıyor ve zombiler oldukları yerde duruyorlar. Kod ekleyerek Minecraft dünyasının çalışmasını sağlamak sana bağlı."
      2:
        image: 'notes/mc_2016_intro_2.jpg'
        text: Merhaba benim adım Melissa ve Minecraft'ta kullanıcı araştırmacısıyım. Benim asıl ilgimi çeken insanların teknolojiyle nasıl etkileşim kurdukları, bu nedenle bilgisayar mühendisliğini psikolojiyle birleştirmek ve insanların nasıl düşünüp davrandıklarını gözlemlemek için benim için harika bir meslek.
      3:
        image: 'notes/mc_2016_intro_3.jpg'
        text: "Ekranınızın üç ana kısıma ayrıldığını göreceksiniz. 1) Sol tarafta Minecraft oyunu var. Şu anda dünya donmuş durumda ama biz bunu kod yazarak düzelteceğiz."
      4:
        image: 'notes/mc_2016_intro_4.jpg'
        text: "2) Bu orta alan araç kutusudur. Bu bloklardan her biri tavuklar, koyunlar ve diğer Minecraft yaratıklarının anlayabileceği birer komuttur."
      5:
        image: 'notes/mc_2016_intro_5.jpg'
        text: "3) Sağdaki alan çalışma bölgesidir ve programımızı burada oluşturacağız."
      6:
        image: 'notes/mc_2016_intro_6.jpg'
        text: "Ne yapmanız gerektiğini unutursanız her bir seviyenin yönergeleri ekranın üst kısmında bulabilirsiniz."
      7:
        image: 'notes/mc_2016_intro_7.jpg'
        text: "Başlangıç için bir tavuğu kodlayacağız. \"ileri hareket et\" komutunu çalışma alanına taşıyalım. \"Çalıştır\" a tıklayınca tavuk ileri doğru bir adım atar. Daha sonra bir tane daha \"ileri hareket et\" bloğunu birinci \"ileri hareket et\" bloğunun altına getiriyorum ve daha sonra bırakıyorum. İki blok birbirine yapışıyor. Tekrar \"Çalıştır\" ı tıklarsam tavuk iki adım atar."
      8:
        image: 'notes/mc_2016_intro_8.jpg'
        text: "Eğer bir bloğu silmek isterseniz, dizilmiş komutlardan çıkarıp alet kutusuna sürüklemeniz yeterli."
      9:
        image: 'notes/mc_2016_intro_9.jpg'
        text: "\"Çalıştır\"ı tıkladıktan sonra oyunu sıfırlamak ve tekrar başlatmak için \"Sıfırla\" düğmesini tıklayabilirsin. Şimdi Minecraft'ın kendi versiyonunu yapmak için sıra sende. İyi eğlenceler!"
    mc_2016_loops:
      1:
        image: 'notes/mc_2016_loops_1.jpg'
        text: "Merhaba, ben Lisa. Minecraft'ta yazılım geliştiriciyim ve oyun içindeki bazı hayvanlar ve düşmanlar üzerinde çalışıyorum. Üzerinde çalıştığım hayvanlardan birisi oselot. Oselot'a balık vererek onu kendi kedin kısım üzeinde çalıştım."
      2:
        image: 'notes/mc_2016_loops_2.jpg'
        text: "Biz insanlar tekrar tekrar aynı şeyi yapmak zorunda kalırsak gerçekten çok sıkılıyoruz. Ama bilgisayarlar hakkında en müthiş şeylerden biri onların aynı şeyi milyonlarca hatta milyarlarca kez sıkılmadan art arda yapabilmeleridir. Bu tekrara döngü denir ve Minecraft'ta her yaratık döngüleri kullanır."
      3:
        image: 'notes/mc_2016_loops_3.jpg'
        text: "Daha önce ekranda hareket ettirmemiz için bir tavuk vardı, ama sonra durdu. Minecraft'ta tavuklar sonsuza dek dolanırlar. Tavuklarımızın sonsuza dek ortalıkta dolanması için \"sonsuza dek yap\" döngüsünü kullanalım. Döngülerin gücü size çok zaman kazandırıp siz Minecraft'ın kendi versiyonunu oluştururken pek çok faydalı özelliklere kapı aralayacaktır."
    mc_2016_events:
      1:
        image: 'notes/mc_2016_events_1.jpg'
        text: "Bu seviyede kendinizi Alex veya Steve olarak seçebilirsiniz. Klavyenizdeki ok tuşlarına basarak yukarı, aşağı ve sağa sola hareket edebilirsiniz. Artık bir seviyede istediğiniz gibi dolaşabilirsiniz. Herhangi bir yaratığı kullanmak için ona doğru yürüyün, yüzünüzü ona dönün ve boşluk tuşuna basın."
      2:
        image: 'notes/mc_2016_events_2.jpg'
        text: "Dokunmatik bir ekran kullanıyorsanız, parmağınızı sağa, sola, yukarı, aşağı sürükleyip ortalıkta gezinebilirsiniz. Daha sonra da oyun alanına dokunarak önünüzdeki nesneyi kullanabilirsiniz."
      3:
        image: 'notes/mc_2016_events_3.jpg'
        text: "Ama sen onu kullanınca ne olur? Minecraft'ta, koyunlar onları kırpınca yünlerini bırakır, inekler sen onlara vurunca kaçar ve creeperlar da sen onların yanına yaklaşınca patlarlar. Bütün bu reaksiyonlar olaylar dediğimiz şeyler sayesinde gerçekleşir. Olaylar programınıza bir şeyin olmasını beklemeyi ya da dinlemeyi söyler. Ve o olay olduğunda da bir eylem gerçekleştirmelerini söyler."
      4:
        image: 'notes/mc_2016_events_4.jpg'
        text: "Şu ana kadar tek bir olay kullandınız. \"spawn olduğunda\" yuvasına koydunuz kod yaratık oluştuğunda ya da oyun başladığında çalışmaya başlar. Önümüzdeki bir kaç seviyede dokunulduğunda çalışan \"dokunulduğu zaman\" yuvası veya yaratığı kullandığınızda çalışmaya başlatacak \"kullanıldığında\" komutlarını öğreneceksiniz. Ya da güneş doğduğunda zombinin yok olmasını istiyorsanız \"gün olduğunda\" yuvasını kullanın"
    mc_2016_spawn:
      1:
        image: 'notes/mc_2016_spawn_1.jpg'
        text: "Oyunlarda spawn demek yaratmak demekle aynı anlama gelir. Bu seviyede gelin zombilerin güneş battığında spawn olmalarını sağlayalım. Bunu yapmak için \"gece olduğunda\" bloğunu kullanacağız."
      2:
        image: 'notes/mc_2016_spawn_2.jpg'
        text: "Zombilerin gece spawn olmalarını istediğimizden \"spawn zombi\" bloğunu \"gece olduğunda\" bloğunun altına koy. Zombiler oluşur oluşmaz \"spawn olduğunda\" bloğunun altındaki kodu çalıştırır. Zombileri oluştururken iyi eğlenceler!"
    mc_2016_congrats:
      1:
        image: 'notes/mc_2016_congrats_1.jpg'
        text: "Tebrikler! Bilgisayar bilimi komutlarını öğrenerek Minecraft dünyasını hayata getirmeyi öğrendin. Artık bir yazılımcısın. Bütün komutları ve yaratıkları kullandın. Ne olacağına sen karar vereceksin."
      2:
        image: 'notes/mc_2016_congrats_2.jpg'
        text: "Oyunu yapmayı bitirdiğinde, link paylaşmak için ya da telefonunda oynamak için paylaş linkini seç. İyi eğlenceler. Senin oluşturduğun Minecraft sürümünü oynamak için sabırsızlanıyorum."
    applab_intro_welcome:
      1:
        image: 'notes/applab_intro_welcome_1.png'
        text: "Benim adım Mei'lani. Ben code.org'da bir stajyerim ve aynı zamanda bir bilgisayar bilimi öğrencisiyim. Bilgisayar bilimini severim çünkü gerçekten yaratıcıdır. Sorun çözücü olmaya başlıyorum. Herşeyin istediğim gibi çalışmasını sağlayacağım. Ama aynı zamanda tasarımcı da oluyorum. Sanatçı olacağım ve yaratıcı tarafında her şeyi seçeceğim."
      2:
        image: 'notes/applab_intro_welcome_2.png'
        text: "Making your own apps is easy with App Lab! Whether you're new to coding or have some experience. App Lab is a great tool for building new apps and sharing them with your friends."
      3:
        image: 'notes/applab_intro_welcome_3.png'
        text: "This is a App Lab. On the left side is your app. On the right side is the code that will make it run. You build your program by dragging in blocks from the toolbox. To start you'll just have one block called 'setProperty'."
      4:
        image: 'notes/applab_intro_welcome_4.png'
        text: "The set property block changes the look of the elements on your screen. Like the buttons, labels, or even the screen itself. First you need to decide which element you want to change. If you hover over an element in your app you can see the name or ID here. Then go select that ID from the first drop down."
      5:
        image: 'notes/applab_intro_welcome_5.png'
        text: "Elements have lots of properties you can change like their text color, background color or font size. You can see the full list and choose which property you want to change in the second drop down."
      6:
        image: 'notes/applab_intro_welcome_6.png'
        text: "The last drop down is where you'll write the value you want to use value you want to use. The block will make a suggestion for you. But you can always type in different colors or numbers yourself."
      7:
        image: 'notes/applab_intro_welcome_7.png'
        text: "Once you're done, the block reads a bit like a sentence:'Set button1's background color to green.' Hit run to see the changes you're building in code. If you reset you can drag in more blocks to change other things about your app. Like the text!"
      8:
        image: 'notes/applab_intro_welcome_8.png'
        text: "For this tutorial we'll be working in block mode but App Lab also supports working in text."
      9:
        image: 'notes/applab_intro_welcome_9.png'
        text: "Either way you'll be programming in JavaScript, the language of the web. Each level has a goal, instructions and an image of what you're aiming to create."
      10:
        image: 'notes/applab_intro_welcome_10.png'
        text: "If you're ever stuck, click on this picture and it will show you exactly how to complete the level. But see if you can do it on your own first."
      11:
        image: 'notes/applab_intro_welcome_11.png'
        text: "Once you've completed the goal for this level click Finish to move on. That's all there is to it! Hit the orange \"continue\" button to go to the next level and start your adventure with an App Lab!"
    applab_intro_events:
      1:
        image: 'notes/applab_intro_events_1.png'
        text: "Apps are really cool because it's kind of like starting your own business I mean, you get to design everything from the ground up, you get to manage everything, and you're the owner of this piece of work that you just created with code."
      2:
        image: 'notes/applab_intro_events_2.png'
        text: "Now that you can change the look of your app let's make it interactive by responding to events! Events are user actions like clicking a button, scrolling through a menu, or hovering over a picture. Interactive apps need ways to respond to events, like playing a sound when I click this button. To do this in App Lab you need to use a new block called 'onEvent'."
      3:
        image: 'notes/applab_intro_events_3.png'
        text: "This program sets the screen to blue. I want the screen to turn green when I click this button. First I'll need to drag in an onEvent block. By hovering I know the button's ID is \"bigButton\" so I'll select that in the first drop-down."
      4:
        image: 'notes/applab_intro_events_4.png'
        text: "Next I'll choose the type of event. There's lots of options you can pick from but right now I'll leave it as a regular old click."
      5:
        image: 'notes/applab_intro_events_5.png'
        text: 'Finally I''ll add code inside the on event that will change the background color of the screen. You can read this block like a sentence: "On the event that the button is clicked run all this code."'
      6:
        image: 'notes/applab_intro_events_6.png'
        text: "Let's test it. Blocks outside an onEvent still run right away so the screen starts blue."
      7:
        image: 'notes/applab_intro_events_7.png'
        text: "And when I click the big button the code inside my onEvent runs and my screen turns green."
      8:
        image: 'notes/applab_intro_events_8.png'
        text: "If you want to change more things after the event, like the text on the screen just add more code to the onEvent"
      9:
        image: 'notes/applab_intro_events_9.png'
        text: "To make your program respond to more events add more onEvent blocks. Just make sure not to put them inside of each other. Now it's time to try it out for yourself. Have fun!"
    applab_intro_sounds:
      1:
        image: 'notes/applab_intro_sounds_1.png'
        text: "Next you'll learn about adding images and sounds to your app. Let's start by checking out the sound options."
      2:
        image: 'notes/applab_intro_sounds_2.png'
        text: "In the tool box you'll find a new block called \"playSound\". Drag it into the workspace. You can pick a sound to play by clicking the drop-down then clicking \"Choose\"."
      3:
        image: 'notes/applab_intro_sounds_3.png'
        text: "From here you can either upload a sound file from your computer, or search for a sound from the sound library. The sound library has lots of different categories like instruments, background music or animals."
      4:
        image: 'notes/applab_intro_sounds_4.png'
        text: "Once you've got the sound you want, click \"Choose\". When this block runs, it will play the sound you chose."
      5:
        image: 'notes/applab_intro_sounds_5.png'
        text: "To add images to your elements you can just use the setProperty block. Select the image property in the second drop-down"
      6:
        image: 'notes/applab_intro_sounds_6.png'
        text: "Then select \"Choose\" from the third drop down."
      7:
        image: 'notes/applab_intro_sounds_7.png'
        text: "From here you can upload an image from your computer or you can look through a huge library of icons in the icon library."
      8:
        image: 'notes/applab_intro_sounds_8.png'
        text: "Back in code mode you can use the \"setProperty\" block to change the icon color of your icon. Once you've picked what image your icon to use click \"Run\" to see how it looks."
      9:
        image: 'notes/applab_intro_sounds_9.png'
        text: "That's all there is to it! Now you can start adding images and sounds to make your apps even more fun and dynamic."
    applab_intro_designmode:
      1:
        image: 'notes/applab_intro_designmode_1.png'
        text: "To build your own apps you're going to need to start designing screens and elements from scratch. App Lab makes this easy to do with Design Mode."
      2:
        image: 'notes/applab_intro_designmode_2.png'
        text: "Use the switch on top of your app to go into Design Mode."
      3:
        image: 'notes/applab_intro_designmode_3.png'
        text: "You can add new elements by dragging them onto the screen. You can move them around to different locations and change their size by dragging the bottom right corner."
      4:
        image: 'notes/applab_intro_designmode_4.png'
        text: "To change an element's properties use the controls on the right. For example, it's really easy to change this button's text, color, and font size."
      5:
        image: 'notes/applab_intro_designmode_5.png'
        text: "When you add a new element to your screen it'll get a generic ID like button1. It's a good idea to change this button's ID to something more meaningful like \"rightButton\". So that you'll know which one it is when you go to the program."
      6:
        image: 'notes/applab_intro_designmode_6.png'
        text: "If you add an element to your app by mistake, just drag it out or hit the delete."
      7:
        image: 'notes/applab_intro_designmode_7.png'
        text: "You can add entirely new screens to your app by dragging in a screen element"
      8:
        image: 'notes/applab_intro_designmode_8.png'
        text: "From the drop-down at the top you can quickly switch back and forth between the screens you create."
      9:
        image: 'notes/applab_intro_designmode_9.png'
        text: "Inside your app, you'll need a way to switch between all of these screens, so the setScreen block has been added to the toolbox. Use \"setScreen\" inside the \"onEvent\" block to change screens at the click of a button."
      10:
        image: 'notes/applab_intro_designmode_10.png'
        text: "In the next few levels you'll be working on a single project. First you'll add a button then you'll add a new screen and finally you'll write code so that the button switches to the new screen."
    applab_intro_share:
      1:
        image: 'notes/applab_intro_share_1.png'
        text: "Now that you've learned some of the basics of App Lab like adding buttons, sounds, images, text and new screens you can make all sorts of apps."
      2:
        image: 'notes/applab_intro_share_2.png'
        text: "In the next level you'll find the app you just finished building. With a little creativity, you can turn this into a personality quiz for your friends, a greeting card that you can share with your family or a choose-your-own-adventure game. All of these apps are just a combination of the skills you've already learned, and I bet you can come up with even more."
      3:
        image: 'notes/applab_intro_share_3.png'
        text: "Once you're done with your app you can easily send it to your phone to see how it looks. Just click \"Share\" and enter your phone number here."
      4:
        image: 'notes/applab_intro_share_4.png'
        text: "You'll receive a text message that'll let you open up your app instantly."
      5:
        image: 'notes/applab_intro_share_5.png'
        text: "You can also share a link to your app over social media or post it to the code.org public gallery for other people to play and share."
      6:
        image: 'notes/applab_intro_share_6.png'
        text: "You've just scratched the surface of what App Lab can do. Full App Lab features more advanced user interactions, new screen elements and even a built-in database so you can quickly build full featured apps. At \"code.org/applab\" you'll find the full tool and lots of ideas if you want to keep going."
      7:
        image: 'notes/applab_intro_share_7.png'
        text: "Thanks for coming along the ride. Now go build and share your first app, and keep on building apps with App Lab!"
    mc_2017_agent_intro:
      1:
        image: 'notes/mc_2017_agent_intro_1.png'
        text: 'Stacy: Stampy, Lizzy, Preston - thank you for coming with me. What I want to show you is just over this mesa plateau. I think you''re going to love it!'
      2:
        image: 'notes/mc_2017_agent_intro_2.png'
        text: "Wait a minute - there's a hole in the track! (screaming)"
      3:
        image: 'notes/mc_2017_agent_intro_3.png'
        text: 'Herkes iyi mi? Stampy: Ah problemi anlıyorum. Bak! Ray’da bir delik var. Stacy: Gerçekten mi Stampy? Lizzy: Belkide tamir etmek için blokları toplamalıyız. Preston: Hadi bunu bir yarışa çevirelim. İlk geri dönen kazanır. Stacy: Tamam, işaret edince, hazır ol BAŞLA! Tamam, bu toprak parçalarından birazını bir araya toplayacağım. Bekleyin. Millet kazamıyorum! Preston: Aynı. Lizzy: Bende. Stacy: Tamam, bu cidden garip. Stampy sen kazabiliyor musun? Stampy: Kazamıyorum! Stacy: Tamam, herkes sakin olsun. Stampy: Oyun bozuldu mu? Stacy: Eğer öyleyse nasıl düzelteceğiz? Lizzy: Bilmiyorum. Stampy: MineCraft codunun nasıl yazılacağını bilen biri var mı?'
      4:
        image: 'notes/mc_2017_agent_intro_4.png'
        text: '(poof) Preston: What is that? Stampy: I''ve never seen one of these before. Lizzy: It''s so adorable! Stacy: Is it...is it tameable? Preston: Okay, what is going on? Someone needs to go back to the real world and fix this.  All: Not it! Stacy: Not i- (Sigh.) Ok, I''ll go.'
      5:
        image: 'notes/mc_2017_agent_intro_5.png'
        text: "Oh, okay, hey, so I'm in the real world now. I'm going to go try to find the Minecraft offices."
      6:
        image: 'notes/mc_2017_agent_intro_6.png'
        text: "But, I'm going to need your help. Start doing the tutorial, start learning how to code, and I'll catch up with you guys after a few levels, okay? Wish me luck! I think it's this way. Ow! Cactus! I'm okay!"
      7:
        image: 'notes/mc_2017_agent_intro_7.png'
        text: "To complete the Hour of Code challenge, you'll need to write code to program the agent. You'll work together with The Agent to clear any obstacles in your path, so you can pick up the items you'll need for your journey. Only the Agent can place and break blocks, and only you can collect items. Your screen is split into three main parts. On the left is Minecraft."
      8:
        image: 'notes/mc_2017_agent_intro_8.png'
        text: "The middle area is the toolbox with commands that the Agent can understand."
      9:
        image: 'notes/mc_2017_agent_intro_9.png'
        text: "Ve sağ tarafta, çalışma alanı. Agent'ı kullanmak için komutları biriktireceğin yer."
      10:
        image: 'notes/mc_2017_agent_intro_10.png'
        text: "The Agent can walk, turn, and activate pressure plates. It can also destroy blocks and place blocks. When it places the block like these minecart rails, it places it underneath itself."
      11:
        image: 'notes/mc_2017_agent_intro_11.png'
        text: "Ne yapmanız gerektiğini unutursanız her bir seviyenin yönergeleri ekranın üst kısmında bulabilirsiniz."
      12:
        image: 'notes/mc_2017_agent_intro_12.png'
        text: "If you want to try again, you can hit the blue reset button to reset everything to where it started. And if you need to delete a block of code, drag it from your workspace to the toolbox. Remember to hit run to get the Agent moving. Okay, go ahead and try out the first few levels. Good luck!"
    mc_2017_repeat:
      1:
        image: 'notes/mc_2017_repeat_1.png'
        text: 'Stampy: I wonder what Stacy is up to?'
      2:
        image: 'notes/mc_2017_repeat_2.png'
        text: 'Stacy: Woah, I think I''m in the right place. This is amazing!'
      3:
        image: 'notes/mc_2017_repeat_3.png'
        text: "I feel like I'm back in Minecraft! Hello. How are you? Hello?"
      4:
        image: 'notes/mc_2017_repeat_4.png'
        text: 'Oh, there''s a creeper. You don''t do anything, do you? Katie: Stacy? Stacy:Hi, Katie? Katie: Yes, welcome to Minecraft!'
      5:
        image: 'notes/mc_2017_repeat_5.png'
        text: 'Stacy: Bu inanılmaz. Yani sen hergün burada geliştirici olarak çalışıyorsun öyle mi? Katie: Evet, baya harika. Ben Minecraft piyasa ekibinde bir geliştiriciyim. Stacy: Kaç tane kodlama dili biliyorsun? Katie: Kariyerimde muhtemelen bir düzineden fazlasıyla çalıştım. Stacy: Bir düzine mi? Katie: Evet. Stacy: O zaman şimdi, kendisini Ajan olarak adlandıran bu küçük golem adam hakkında hiçbir şey bilmiyorsun? Katie: Ajan''ı, Steve ya da Alex''in yapamayacağı örneğin lavı geçmek gibi şeyleri yapmak için kullanıyoruz. Stacy: O zaman, kodlamayı öğrenmek istiyorum ve onlar kodlamanın nasıl yapıldığını öğrenmek istiyorlar, öyleyse öğrenirken bilmeniz gereken ilk şeylerden biri nedir?'
      6:
        image: 'notes/mc_2017_repeat_6.png'
        text: 'Katie: Well, you need to learn how to use loops. Loops are things that developers write to give commands to a computer that can be run over and over again. Stacy: Got it, so I think there''s actually some of that coming up in the levels ahead, so go ahead and give loops a try.'
      7:
        image: 'notes/mc_2017_repeat_7.png'
        text: "In the next level, you can use a loop to move the Agent along the path. Drag the repeat block into the workspace and place the move forward block inside the repeat block. This tells the computer to do the same thing many times in a row without having to drag a whole bunch of blocks into the workspace. You can choose how many times to repeat by putting a number in the repeat block."
      8:
        image: 'notes/mc_2017_repeat_8.png'
        text: "You can put turns and multiple commands in the repeat block too, but for now try using a repeat to move the Agent forward a few steps. Remember, if you get stuck on a puzzle you can always hit the blue reset button and try again."
      9:
        image: 'notes/mc_2017_repeat_9.png'
        text: 'If you are thinking about having a cool job like Katie''s, go ahead and click the show code button when you finish every level. That''s going to actually show you the Javascript code that someone like Katie uses when she''s actually programming Minecraft. Katie: Yeah, good luck everyone!'
    mc_2017_functions:
      1:
        image: 'notes/mc_2017_functions_1.png'
        text: 'Preston: I''m not trying to brag, but I''m pretty good at parkour. Lizzy: Let''s sleep so it''s day when Stacy comes back.'
      2:
        image: 'notes/mc_2017_functions_2.png'
        text: 'Stacy: Ok guys, I am back from the Minecraft offices, and I think I know how to solve the problem I''m having in my game. I think I can use a function. Let me just open this.'
      3:
        image: 'notes/mc_2017_functions_3.png'
        text: "So a function is a specific set of instructions to accomplish a certain task, kind of like a recipe. In the next few levels, you'll have access to functions that you can use to solve the puzzles."
      4:
        image: 'notes/mc_2017_functions_4.png'
        text: "Look at the code in the function when it's in the workspace to see what it does."
      5:
        image: 'notes/mc_2017_functions_5.png'
        text: "Then, find the block with that name in the toolbox and drag it from the toolbox to the when run block."
      6:
        image: 'notes/mc_2017_functions_6.png'
        text: "Remember, you can use the same function every time you need to run the same set of instructions to do something, like build a bridge. Good luck, I know you can do it!"
    mc_2017_congratulations:
      1:
        image: 'notes/mc_2017_congratulations_1.png'
        text: 'Preston: Congratulations!'
      2:
        image: 'notes/mc_2017_congratulations_2.png'
        text: 'Lizzy: Congratulations!'
      3:
        image: 'notes/mc_2017_congratulations_3.png'
        text: 'Stampy: Congratulations, you did it!'
      4:
        image: 'notes/mc_2017_congratulations_4.png'
        text: 'Stacy: Congratulations guys, you totally rocked that! And now that you''ve completed the Hour of Code, you can start coding in Minecraft. You''ve learned about loops, functions, and what a software Agent does.'
      5:
        image: 'notes/mc_2017_congratulations_5.png'
        text: "Now, it's time for the free play level, where you are the developer. Use any remaining time to write your own functions to explore, mine, and build."
      6:
        image: 'notes/mc_2017_congratulations_6.png'
        text: 'You can take the code that you write in this level into your Minecraft world on Minecraft: Education Edition. Just click ''Finish'' and follow the instructions for getting the link to use in your world. to continue coding with the Agent. Have fun, and good job!'
      7:
        image: 'notes/mc_2017_congratulations_7.png'
        text: 'Stacy: And I''m back! Okay, you guys, this is the Agent! Let me show you what it can do. Look, it''s doing it! I told it to build a staircase out of these terra cotta blocks, now we can just use this to get out of here. And you guys, it''s not just staircases. I can tell the Agent to do anything I want, and it will do it for me.'
      8:
        image: 'notes/mc_2017_congratulations_8.png'
        text: 'Stampy: Bunu nasıl yaptın? Stacy: Çok kolay, aslında sadece kod kullandım!'
    csd_concept_how_computers_work:
      1:
        image: 'notes/csd_concept_how_computers_work_1.png'
        text: 'Everywhere you look, computers are changing the world. Whether they''re on our desktops, in our homes, our pockets, or just about anywhere else. But while most of us use this revolutionary technology daily, we don''t often ask: "How do computers work?" In this series, you''re going to learn how computers really work, starting with what makes a computer a computer. Then, you''ll look at how information is represented inside the computer using tiny electrical signals going on and off at mind-boggling speeds.'
      2:
        image: 'notes/csd_concept_how_computers_work_2.png'
        text: "After that, you'll learn how computers use circuits to do everything from simple math to simulating entire virtual worlds. Next, you'll zoom out and look at the different parts of a computer that actually input, output, and store all that information. Finally, you'll take a look at what code actually is and how software controls hardware. So whether you're just curious about the devices you use every day or you want to design the innovations of the future, the first step is learning how computers work."
    csd_concept_computer:
      1:
        image: 'notes/csd_concept_computer_1.png'
        text: "My name is May-Li Khoe and I'm a designer and an inventor. So some of the things I've designed have been at Apple, and now I design products for kids to use so that they can have an easier time in school. My other jobs include DJ-ing and dancing."
      2:
        image: 'notes/csd_concept_computer_2.png'
        text: "Computers are everywhere! They're in people's pockets, they're in people's cars, people have them on their wrists. They might be in your backpack right now. But what makes a computer a computer? What does make a computer a computer anyway? And how does it even work?"
      3:
        image: 'notes/csd_concept_computer_3.png'
        text: "Hi I'm Nat! I was one of the original designers of the Xbox. I've been working with computers since I was maybe seven years old and now I work on virtual reality. As humans, we've always built tools to help us solve problems. Tools like a wheelbarrow, a hammer, or a printing press, or a tractor-trailer."
      4:
        image: 'notes/csd_concept_computer_4.png'
        text: "All of these inventions helped us with manual work. Over time, people began to wonder if a machine could be designed and built to help us with the thinking work we do, like solving equations or tracking the stars in the sky. Rather than moving or manipulating physical things like dirt and stone, these machines would need to be designed to manipulate information. As the pioneers of computer science explored how to design a thinking machine, they realized that it had to perform four different tasks."
      5:
        image: 'notes/csd_concept_computer_5.png'
        text: "It would need to take input, store information process it and then output the results. Now this might sound simple, but these four things are common to all computers. That's what makes a computer a computer."
      6:
        image: 'notes/csd_concept_computer_6.png'
        text: "Computers started out as basic calculators, which was already really awesome at the time, and they were only manipulating numbers back then. But now we can use them to talk to each other, we can use them to play games, control robots, and do any crazy thing that you could probably imagine. Modern computers look nothing like those clunky old machines but they still do these same four things."
      7:
        image: 'notes/csd_concept_computer_7.png'
        text: "First, we're going to talk about input. You can tell computers what to do with the keyboard, you can tell them what to do with the mouse, the microphone, the camera. All these different inputs give a computer information, which is then stored in memory."
      8:
        image: 'notes/csd_concept_computer_8.png'
        text: "A computer's processor takes information from memory. It manipulates it or changes it using an algorithm, which is just a series of commands. And then it sends the processed information back to be stored in memory again. This continues until the processed information is ready to be output."
      9:
        image: 'notes/csd_concept_computer_9.png'
        text: "How a computer outputs information depends on what the computer is designed to do. A computer display can show text, photos, videos, or interactive games -- even virtual reality! The output of a computer may even include signals to control a robot."
      10:
        image: 'notes/csd_concept_computer_10.png'
        text: "And who knows what the computers of tomorrow will be like? My hope is that you get to help decide what you want the computers of tomorrow to look like. But across all computers, regardless of the different types of technology they use, they're always doing those same four things. They take in information, they store it as data, they process it, and then they output the results."
    csd_concept_binary_data:
      1:
        image: 'notes/csd_concept_binary_data_1.png'
        text: "Hi! My name is Limor Fried, and I'm an engineer here at Adafruit Industries. And this is where I do engineering and design, and I design circuits for fashion and music and technology."
      2:
        image: 'notes/csd_concept_binary_data_2.png'
        text: "My name is Federico Gomez Suarez, and I'm a software developer with Microsoft Hack for Good. And I look into using technology to help us solve some of the big social problems of our times."
      3:
        image: 'notes/csd_concept_binary_data_3.png'
        text: "You may have heard that computers work on ones and zeros. But almost nobody today actually deals directly with these ones and zeros. But ones and zeroes do play a big role in how computers work on the inside."
      4:
        image: 'notes/csd_concept_binary_data_4.png'
        text: "Inside a computer are electric wires and circuits that carry all the information in a computer. How do you store or represent information using electricity?"
      5:
        image: 'notes/csd_concept_binary_data_5.png'
        text: "Well, if you have a single wire with electricity flowing through it, the signal could either be on or off. That's not a lot of choices, but it's a really important start. With one wire, we can represent a yes or no, true or false, a one or zero, or anything else with only two options. This on/off state of a single wire is called a bit, and it's the smallest piece of information a computer can store."
      6:
        image: 'notes/csd_concept_binary_data_6.png'
        text: 'If you use more wires you get more bits: more ones and zeros. With more bits you can represent more complex information. But to understand that, we need to learn about something called the binary number system.'
      7:
        image: 'notes/csd_concept_binary_data_7.png'
        text: 'In the decimal number system, we have ten digits from zero to nine, and that''s how we''ve all learned to count. In the binary number system, we only have two digits: zero and one. With these two digits, we can count up to any number.'
      8:
        image: 'notes/csd_concept_binary_data_8.png'
        text: "Here's how this works. In a decimal number system we're all used to, each position in a number has a different value. There's a 1 position, the 10 position, the 100 position, and so on. For example, a 9 in the 100 position is a 900. In binary, each position also carries a value. But instead of multiplying by 10 each time, we multiply by 2. So there's the 1 position, the 2 position, the 4 position, the 8 position, and so on. For example, the number 9 in binary is 1001. To calculate the value, we add 1 times 8, plus 0 times 4, plus 0 times 2, plus 1 times 1. Almost nobody does this math because computers do it for us. What's important is that any number can be represented with only ones and zeros, or by a bunch of wires that are on or off. The more wires you use, the larger the numbers you can store. With 8 wires, you can store numbers between 0 and 255. That's 8 ones. With just 32 wires, you can store all the way from 0 to over 4 billion. Using the binary number system, you can represent any number you like."
      9:
        image: 'notes/csd_concept_binary_data_9.png'
        text: "But what about other types of information? Like text, images, or sound? It turns out that all these things can also be represented with numbers. Think of all the letters in the alphabet. You could assign a number to each letter. A could be 1, B could be 2, and so on. You can then represent any word or paragraph as a sequence of numbers. And as we saw, these numbers can be stored as on or off electrical signals. Every word you see on every webpage or your phone is represented using a system like this."
      10:
        image: 'notes/csd_concept_binary_data_10.png'
        text: "Now, let's consider photos, videos, and all the graphics you see on a screen."
      11:
        image: 'notes/csd_concept_binary_data_11.png'
        text: "All of these images are made out of teeny dots called pixels, and each pixel has a color. Each of the colors can be represented with numbers. When you consider the typical image has millions of these pixels, and the typical video shows 30 images per second now we're talking about a lot of data here."
      12:
        image: 'notes/csd_concept_binary_data_12.png'
        text: "Every sound is basically a series of vibrations in the air. Vibrations can be represented graphically as a waveform. Any point on this waveform can be represented by a number. And this way, any sound can be broken down into a series of numbers. If you want higher quality sound, you will pick 32-bit audio or an 8-bit audio. More bits means a higher range of numbers."
      13:
        image: 'notes/csd_concept_binary_data_13.png'
        text: "When you use a computer to write code or make your own app, you're not dealing directly with these ones and zeros. But you will be dealing with images or sound or video. So if you want to understand how computers work on the inside, it all comes down these simple ones and zeros and the electrical signals in the circuits behind them."
    csd_concept_circuits_logic:
      1:
        image: 'notes/csd_concept_circuits_logic_1.png'
        text: "One of the coolest things I've discovered about circuits is circuitry can be an art form like if I have a creative idea, I can get that creative idea out using circuits. So if you have ideas, you can use technology to make those ideas come to life."
      2:
        image: 'notes/csd_concept_circuits_logic_2.png'
        text: "Every input or output of a computer is effectively a type of information, which can be represented by on or off electrical signals or ones and zeros."
      3:
        image: 'notes/csd_concept_circuits_logic_3.png'
        text: "In order to process the information that comes in as input, and to make the information that is output, a computer needs to modify and combine the input signals. To do this, a computer uses millions of teeny electronic components, which come together to form circuits."
      4:
        image: 'notes/csd_concept_circuits_logic_4.png'
        text: "Let's take a closer look at how circuits can modify and process information that's represented in ones and zeros. This is an incredibly simple circuit. It takes an electrical signal, on or off, and it flips it. So if the signal you give it is a 1, the circuit gives you a 0, and if you give the circuit a 0, it gives you a 1. The signal that goes in is not the same as the signal that comes out, and so we call this circuit NOT."
      5:
        image: 'notes/csd_concept_circuits_logic_5.png'
        text: "More complicated circuits can take multiple signals and combine them, and give you a different result. In this example, a circuit will take two electrical signals, now each one might be a 1 or a 0. If either of the signals coming in is a 0, then the result is also a 0. This circuit will only give you a 1, if the first signal and the second signal are both a 1, and so we call the circuit AND."
      6:
        image: 'notes/csd_concept_circuits_logic_6.png'
        text: "There are many small circuits like this that perform simple logical calculations. By connecting these circuits together, we can make more complex circuits that perform more complex calculations."
      7:
        image: 'notes/csd_concept_circuits_logic_7.png'
        text: "For example, you can make a circuit that adds 2 bits together called an adder. This circuit takes in 2 individual bits, each one a 1 or a 0, and adds them together to calculate the sum. The sum can be 0 plus 0 equals 0, 0 plus 1 equals 1, or 1 plus 1 equals 2. You need two wires coming out because it can take up to two binary digits to represent the sum. Once you have a single adder for adding two bits of information, you can put together multiples of these adder circuits side-by-side to add together much larger numbers."
      8:
        image: 'notes/csd_concept_circuits_logic_8.png'
        text: "For example, here's how an 8-bit adder adds the numbers 25 and 50. Each number is represented using 8 bits, resulting in 16 different electrical signals that go into the circuit. The circuit for an 8-bit adder has lots of little adders inside of it, which together, calculate the sum."
      9:
        image: 'notes/csd_concept_circuits_logic_9.png'
        text: "Different electrical circuits can perform other simple calculations like subtraction or multiplication. In fact, all the information processing your computer does is just lots and lots of small simple operations put together. Each individual operation done by a computer is so, so simple it could be done by a human, but these circuits inside computers are way way faster."
      10:
        image: 'notes/csd_concept_circuits_logic_10.png'
        text: "Back in the day, these circuits were big and clunky, and an 8-bit adder could be as big as a fridge, and it would take minutes for them to perform a simple calculation. Today, computer circuits are microscopic in size, and way way faster. Why are smaller computers also faster? Well, because the smaller the circuit is, the less distance the electrical signal has to go. Electricity moves at just about the speed of light, which is why modern circuits can perform billions of calculations per second."
      11:
        image: 'notes/csd_concept_circuits_logic_11.png'
        text: "So whether you're playing a game, recording a video, or exploring the cosmos, everything you could possibly do with technology requires lots of information to be processed extremely quickly. Underneath all this complexity is just lots of teeny little circuits that turn binary signals into websites, videos, music, and games. These circuits can even help us decode DNA to diagnose and cure disease. So what would you like to do with all these circuits?"
    csd_concept_memory_cpu_input_output:
      1:
        image: 'notes/csd_concept_memory_cpu_input_output_1.png'
        text: "Hi, my name is Madison Maxey. I have a company called Loomia, and we focus on making smart fabrics for smart clothing and smart soft good products. The sky's the limit when it comes to textiles."
      2:
        image: 'notes/csd_concept_memory_cpu_input_output_2.png'
        text: "My name is Danielle Applestone, and I'm CEO of Othermachine Company. We build a desktop milling machine. A milling machine takes a rotating cutting tool and moves it through material to create a 3D object."
      3:
        image: 'notes/csd_concept_memory_cpu_input_output_3.png'
        text: "Under the hood, all computers do the same four basic things. They input information, store and process the information, and then, output information. Each of these things is done by a different part of the computer."
      4:
        image: 'notes/csd_concept_memory_cpu_input_output_4.png'
        text: "There are input devices that take input from the outside world and convert it into binary information. There is memory to store this information. There's a central processing unit or CPU, where all the calculations are done. And, finally, there are output devices that take information and convert it into a physical output."
      5:
        image: 'notes/csd_concept_memory_cpu_input_output_5.png'
        text: "Let's talk about input first. Computers can take many different types of input, like the keyboard of a computer, the touchpad of a phone, a camera, a microphone, or a GPS. But even the sensors on a car, a thermostat, or a drone are also different input devices."
      6:
        image: 'notes/csd_concept_memory_cpu_input_output_6.png'
        text: "Now, let's look at a simple example of how input travels through a computer and becomes output. When you press a key on your keyboard - let's say the letter \"B\". The keyboard converts the letter to a number. That number is sent as binary, ones and zeros, into the computer."
      7:
        image: 'notes/csd_concept_memory_cpu_input_output_7.png'
        text: "Starting from this number, the CPU calculates how to display the letter \"B\" pixel by pixel. The CPU requests step-by-step instructions from memory, which tell it how to draw the letter \"B\". The CPU runs these instructions and stores the results as pixels in memory."
      8:
        image: 'notes/csd_concept_memory_cpu_input_output_8.png'
        text: "Finally, this pixel information is sent in binary to the screen. The screen is an output device, which converts the binary signals into the tiny lights and colors that make up what you see."
      9:
        image: 'notes/csd_concept_memory_cpu_input_output_9.png'
        text: "This all happens so quickly it feels instantaneous, but to display each letter a computer runs thousands of instructions, starting from the moment your finger presses the key point."
      10:
        image: 'notes/csd_concept_memory_cpu_input_output_10.png'
        text: "In that example, the output device was the screen, but there are many different types of output which take a binary signal from the computer and do something in the physical world. For example, a speaker will play sound, and a 3D printer will print an object. Output devices can also control physical motion like a robotic arm, the motor of a car, or the cutting tool of the milling machine that my company makes. New types of inputs and outputs let computers interact with the world in entirely new ways. This has been helped out by improvements to the speed and size of the memory and CPU."
      11:
        image: 'notes/csd_concept_memory_cpu_input_output_11.png'
        text: "The more complicated a task is and the more information that is input or output, the more processing power and memory a computer needs. Typing letters on a screen may be easy but to do complicated 3d graphics or record a high-definition movie, modern computers often have multiple CPUs to process all that information and many gigabytes of memory to store it."
      12:
        image: 'notes/csd_concept_memory_cpu_input_output_12.png'
        text: 'No matter what it is you want to do with the computer, every single action is about: inputting information from the physical world, storing and processing that information, and getting some output back into the physical world.'
    csd_concept_hardware_software:
      1:
        image: 'notes/csd_concept_hardware_software_1.png'
        text: "Hi, my name is Erica Gomez and I'm an engineering manager at Amazon.com. One of the best things about working in tech, and at Amazon in particular, is that I get to bring my dog with me to work every day. My job is to help make sure software gets out the door and her job is to nap under my desk and snore very loudly."
      2:
        image: 'notes/csd_concept_hardware_software_2.png'
        text: 'My name is Jerome Holman, and I''m a Program Manager on Team Xbox and I have a really fun job: Basically bringing the hardware and the software together to give you all the games that you love on your Xbox.'
      3:
        image: 'notes/csd_concept_hardware_software_3.png'
        text: "When you look inside a computing device you see a bunch of circuits, chips, wires, speakers, plugs, and all sorts of other stuff. This is the hardware."
      4:
        image: 'notes/csd_concept_hardware_software_4.png'
        text: "But what you don't see is the software. Software is all of the computer programs, or code, running on this machine. Software can be anything from apps and games to webpages and the data science software that me and my teams use at Amazon to understand how customers behave."
      5:
        image: 'notes/csd_concept_hardware_software_5.png'
        text: "But how do the hardware and the software interact with one another? Let's start at looking at a computer's central processing unit, or CPU."
      6:
        image: 'notes/csd_concept_hardware_software_6.png'
        text: "The CPU is the master chip that controls all the other parts of the computer. A CPU needs to do different things so inside it has smaller, simpler parts that handle specific tasks. It has circuits to do simple math and logic. It has other circuits to send and receive information to and from different parts of the computer."
      7:
        image: 'notes/csd_concept_hardware_software_7.png'
        text: "The real magic of the CPU is how it knows which circuits to use and when to use them. The CPU receives simple commands that tell it which circuit to use to do a specific job. For example, an \"add\" command tells the CPU to use its outer circuit to calculate a new number. And then the \"store\" command tells the CPU to use a different circuit to save that result into memory."
      8:
        image: 'notes/csd_concept_hardware_software_8.png'
        text: "Just like numbers, all of these simple commands can be represented in binary ones and zeros or on and off electrical signals. The binary commands are stored in memory and the CPU fetches and executes them in sequence one after the other. This sequence of commands is, in fact, a very simple computer program."
      9:
        image: 'notes/csd_concept_hardware_software_9.png'
        text: "Binary code is the most basic form of software and it controls all the hardware of a computer. These days, nobody writes software in binary. It would take forever!"
      10:
        image: 'notes/csd_concept_hardware_software_10.png'
        text: "Today, the software we write looks more like this (Python), or this (Ruby), or even this (Blockly). Programming languages like these let you type in commands in something that looks a lot like English."
      11:
        image: 'notes/csd_concept_hardware_software_11.png'
        text: "To draw a rectangle on the screen, you just need a single command. This high-level command is converted into hundreds, or thousands, of simpler binary commands that the CPU understands. Software tells the CPU what to do, but when you're listening to music, and browsing the web, and chatting with a friend, your computer is running multiple pieces of software all at once."
      12:
        image: 'notes/csd_concept_hardware_software_12.png'
        text: "So, how do all of these programs get on the computer in the first place, and how can the CPU run them all at once? To find out we'll have to take a look at the operating system."
      13:
        image: 'notes/csd_concept_hardware_software_13.png'
        text: "The operating system of the computer is the master program that manages how software gets to use the hardware of the computer. For example, I helped create the Windows operating system that runs on most personal computers."
      14:
        image: 'notes/csd_concept_hardware_software_14.png'
        text: "The operating system is a program with special abilities that let it control the other software on the computer. It lets you install new programs by loading them into your computer's memory. It decides when a program is run by the central processing unit, and whether that program can access the computer's input and output devices. And when you think your computer is running many programs at once, in reality, it's the operating system that's quickly switching between programs sharing that CPU for fractions of a second."
      15:
        image: 'notes/csd_concept_hardware_software_15.png'
        text: "Inside every computer is an operating system managing software that controls the computer's hardware."
      16:
        image: 'notes/csd_concept_hardware_software_16.png'
        text: "The software is a series of commands made of simple binary code, and that binary code is just electrical signals flowing through billions of tiny circuits."
      17:
        image: 'notes/csd_concept_hardware_software_17.png'
        text: "Computers have the potential to do all kinds of amazing things. But the only thing that makes the computer smart, or useful, is you. When you learn to code you get to define the problem you want to solve, and write the software that turns those ideas into reality."
