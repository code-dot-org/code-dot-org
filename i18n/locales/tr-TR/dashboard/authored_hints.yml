tr:
  data:
    authored_hints:
      2-3 Artist 1 new_authored_hint:
        2-3_Artist_1_new_a: Eğer blok bana sahip olduğu için 'ileri 100 piksel taşır' kullanıyorsanız, otomatik olarak bir çizgi çizmek.
        2-3_Artist_1_new_b: Köşeyi çevirirken sorun mu yaşıyorsunuz? `Turn right 90 degrees` blokunu kullanın.
      2-3 Artist 11_authored_hint:
        2-3_Artist_11_a: 'Açılar ile sorununuz mu var? 360 dereceyi 8 turda gitmeniz gerekiyor. 360/8 nedir?'
      2-3 Artist 12_authored_hint:
        2-3_Artist_12_a: Bir daire içerisinde 360 derece vardır, bu nedenle sanatçı her seferinde döngü boyunca 1 derece dönerse, 360 kez geçmesi gerekir.
      2-3 Artist 2 new_authored_hint:
        2-3_Artist_2_new_a: Sanatçı doğru yönde işaret etmiyor gibi görünüyor. Çizi çekmeden önce onları çevirir misin?
      2-3 Artist 3new_authored_hint:
        2-3_Artist_3new_a: 100-70 nedir?  Hikayeye bağlı olarak, o şapkanın olması gereken uzunluk!
        2-3_Artist_3new_b: Sanatçı doğru yönde işaret etmiyor gibi görünüyor. Çizi çekmeden önce onları çevirir misin?
      2-3 Artist 4_authored_hint:
        2-3_Artist_4_a: Evi bitirmek için tek yapmamız gereken bir kare çizmek!
      2-3 Artist 6_authored_hint:
        2-3_Artist_6_a: 'Bu münük melekleri yapmak için karede olduğu gibi her seferinde dön fakat bu sefer daha fazla.   '
        2-3_Artist_6_b: Ben zaten sağa baktığımdan ileri hareket ettirerek başlayın, sonra üçgen oluşturmak için sol dönüş yapın.
        2-3_Artist_6_c: Üçgenin Her tarafı kare ile aynı uzunlukta ise... 100 piksel!
      2-3 Artist 7_authored_hint:
        2-3_Artist_7_a: Bu bulmacayı çözmenin en kolay yolu önce kare çizmek sonra sanatçıyı aşağı bakar durumda bırakmak.
      2-3 Artist 8_authored_hint:
        2-3_Artist_8_a: 200 ikiye bölersem, her bir kare kaç piksel genişliğinde olur?
      2-3 Artist 9 NEW_authored_hint:
        2-3_Artist_9_a: Bu elmas gerçekten kendi etrafında dönen bir kare 
      2-3 Artist 9 REPLACEMENT_authored_hint:
        step_size: Her adım 100 piksel genişliğinde ve 100 piksel yüksekliğinde.
      2-3 Artist 9_authored_hint:
        2-3_Artist_9_a: Bu elmas gerçekten 45 derece dönen bir kare.
        2-3_Artist_9_b: |-
          Kare çizimine başlamadan önce 45 derece öndürmeyi unutma! ! [] (https://images.code.org/47cc2474e533667101a2d73b98da204e-image-1467744539967.gif)
      2-3 Artist Debugging 10_authored_hint:
        2-3_Artist_Debugging_10_a: Unutmayın, kontrol paneli 10 piksel daha geniş istiyorsunuz bu yüzden değiştirdiğiniz bütün sayılara 10 eklemeyi unutmayın.
        2-3_Artist_Debugging_10_b: "** Deneme yanılmserberst! ** bir anda bir sayıyı değiştirerek başla.     Hangi numaralar ne yapıyor?    Çok kaybolursan, \"baştan\"  tuşuile kodunuzu sıfırlayabilirsiniz."
      2-3 Artist Debugging 2_authored_hint:
        2-3_Artist_Debugging_2_a: 'İpucu: Her bıyık 75 piksel uzunluğundadır.'
      2-3 Artist Debugging 3_authored_hint:
        2-3_Artist_Debugging_3_a: Dönülşlerden birisi 15 derece az.
        2-3_Artist_Debugging_3_b: Program hızlı çalışıyorsa, kaydırıcıyı ile yavaşlatabilirsin.
      2-3 Artist Debugging 7_authored_hint:
        2-3_Artist_Debugging_7_a: Sanatçı ilk satırı çizdikten sonra İlerlese yada geriye doğru atlasa ne olur?
      2-3 Artist Debugging 8_authored_hint:
        2-3_Artist_Debugging_8_a: |-
          Şekil kaç kere tekrar ediyor? Şekil kaç kez tekrar etmeli? Programda bunu değiştirebilir miyim?
      2-3 Artist Debugging 9_authored_hint:
        2-3_Artist_Debugging_9_a: Sanatçı çizmeye başlamadan önce 60 derece daha sola dönmesi lazım!
        2-3_Artist_Debugging_9_b: Tam dönüş için blok eklemene gerek yok. Sadece sola dön bloğuna 60 derece ekle!
      2-3 Artist Functions 1_authored_hint:
        2-3_Artist_Functions_1_a: Kareler 100 piksel genişliğinde, buda demek oluyor ki her kareden önce 175 piksel ilerlemelisin.
        2-3_Artist_Functions_1_b: Gözlük yapmak için çakışan çizgiler olabilir.
      2-3 Artist Functions 11_authored_hint:
        2-3_Artist_Functions_11_a: Fonksiyonun içinde sadece kenar sayısını ve kenar uzunluğunu değiştirmen gerekir. Birde şekiller arasında dönmesi gereken açı değişecek.
      2-3 Artist Functions 12_authored_hint:
        2-3_Artist_Functions_12_a: Önce kodu çalıştır ve ne eklemen gerektiğini gör.
      2-3 Artist Functions 2_authored_hint:
        2-3_Artist_Functions_2_a: |-
          Programınız: -Fonksiyon kullanmalıdır. - 
          ileri 100 + 75 piksel ilerlemelidir- 
          Fonksiyon kullanmalıdır
      2-3 Artist Functions 3_authored_hint:
        2-3_Artist_Functions_3_a: "** 115 + 45 = 160 **"
      2-3 Artist Functions 4_authored_hint:
        2-3_Artist_Functions_4_a: Sanatçının bu tasarımı tamamlaması için her kareyi 120 derece çevirmesi gerekiyor.
      2-3 Artist Loops New 11_authored_hint:
        2-3_Artist_Loops_New_11_a: |-
          Son bulmacadan harırladım kod:! [] (https://images.code.org/15288d042780242ec5edeed5204c6ebb-image-1469640792081.png)
        2-3_Artist_Loops_New_11_b: Yeni dönüşün döngünün içindeki kodun sonuna gelmeli.
      2-3 Artist Loops New 12_authored_hint:
        2-3_Artist Loops_New_12_a: Başlamadan önce sanatçının 60 derece sola doğru dönmeye ihtiyacı vardır.
        2-3_Artist Loops_New_12_b: Sanatçı ileri 100 piksel gittikten sonra, keskin köşe yapmak için 120 derece sağa dönüş yapacaktır.
        2-3_Artist Loops_New_12_c: Sanatçı sağa sadece 60 derece dönmelidir.
      2-3 Artist Loops New 13_authored_hint:
        2-3_Artist_Loops_New_13_a: "Her bir elmas şeklinin sonunda sanatçı zaten sağa bakıyor. Buradan yeni elmas şekline başlayabilir.\n\nBu sebeple, Başlamadan önce sola dön komutuna ihtiyacımız olmayacaktır."
        2-3_Artist_Loops_New_13_b: "Her elmas şekli yapmak için : \n- İlerle \n- 120 derece sağa dön \n- ilerle \n- 60 derece sağa dön \nsonra bunu tekrar et!"
      2-3 Artist Loops New 9_authored_hint:
        2-3_Artist_Loops_New_9_a: Sanatçıyı o çizime başlamadan önce 45 derece sağa çevirmek gerekiyor.
        2-3_Artist_Loops_New_9_b: Bu V bir karenin sadece yarısı kadardır.  Bir karenin diğer yarısı çizmek için gereken kod ne olurdu?
      2-3 Artist Nested Loops 1_authored_hint:
        2-3_Artist_Nested_Loops_1_a: Bütün gri blokları döngü içine koymayı unutma.
      2-3 Artist Nested Loops 3_authored_hint:
        2-3_Artist_Nested_Loops_3_a: "Açılar için yardıma ihtiyacınız var mı?   ** 360/12 = 30 **"
        2-3_Artist_Nested_Loops_3_b: Bütün gri blokları ve dönüşü döngü içine koymayı unutma.
      2-3 Artist Nested Loops 4_authored_hint:
        2-3_Artist_Nested_Loops_3_a: "Açılar için yardıma ihtiyacınız var mı?   ** 360/12 = 30 **"
      2-3 Artist Nested Loops 5_authored_hint:
        2-3_Artist_Nested_Loops_5_a: "İleri atla bloğu ile bir karenin üstünden diğerine başlayacağın noktaya gel.\neğer karelerin 20 piksel yüksekliğinde ise ve arada 20 piksel var ise ne kadar atlaman gerekir?"
      2-3 Artist Nested Loops 7_authored_hint:
        2-3_Artist_Nested_Loops_7_a: "Her  döngüde ne kadar dönmem gerekir mi?    360/10 nedir?"
      2-3 Artist Nested Loops 9_authored_hint:
        2-3_Artist_Nested_Loops_9_a: |-
          Doğru açıyı bulmak için yardım lazım mı? ** 360 / 12 = 30 **
      2-3 Bee Conditionals 14_authored_hint:
        2-3_Bee_Conditionals_14_a: Blokları koymakta zorlanıyorsan kırmıı çiçeklerle mor çiçeklere aynı şekilde davranmaya çalış!
        2-3_Bee_Conditionals_14_b: Kırmızı çiçek mor olsaydı ektra tekrarla bloğuyla kodu ne kadar azaltabilirdin?
        2-3_Bee_Conditionals_14_c: "İki ayrı parça halinde çözmeyi deneyin:\n! [] (https://images.code.org/895a52f3febff9edb83979f7861cf67a-image-1469640892331.png) \n1) 3 nectar topla\n - 5 kere ilerle- \n-Nektar varmı diye kontrol et, eğer öyleyse al.\n-sola dön\n 2) Bal Yap\n-İlerle\n-iki bal yap"
      2-3 Bee Conditionals 15_authored_hint:
        2-3_Bee_Conditionals_15_a: 'Unutmayın: Mor çiçekler sadece ya 0 ya da 1 nektar bulunduruyor ve programı her çalıştırdığında bu değer değişebilir.'
      2-3 Bee Conditionals 3_authored_hint:
        2-3_Bee_Conditionals_3_a: Eğer ilerleme için döngü kullanıp sonra diğer bir döngü ile nektar toplarsan ve üçüncü döngü ile bal yaparsan daha az blok kullanırsın.
      2-3 Bee Conditionals 6_authored_hint:
        2-3_Bee_Conditionals_6_a: 'Unutmayın: mor çiçekler 0 ila 1 nektar bulundurur ve programınızı her çalıştırdığınızda değişir!'
      2-3 Bee Debugging 1_authored_hint:
        2-3_Bee_Debugging_1_a: Hatalı bloğu bulup düzelttikten sonra tekrarla bloğu kullanarak kodu basitleştirebileceğini görebildin mi?
      2-3 Bee Debugging 2_authored_hint:
        2-3_Bee_Debugging_2_a: Hatalı bloğu bulup düzelttikten sonra tekrarla bloğu kullanarak kodu basitleştirebileceğini görebildin mi?
      2-3 Bee Debugging 4_authored_hint:
        2-3_Bee_Debugging_4_a: Biryerlerde arının yaptığı anlamsız bir hareket varmı? O bloğu değiştirdiğinde ne oluyor?
      2-3 Bee Functions 4_authored_hint:
        2-3_Bee_Functions_4_a: Fonksiyonla döngü kullanman gerekmiyor. İlerle, fonksiyon kullan ve ilerle şeklinde deneyin.
      2-3 Bee Functions 6_authored_hint:
        2-3_Bee_Functions_6_a: Fonksiyonla döngü kullanman gerekmiyor. İlerle, fonksiyon kullan ve ilerle şeklinde deneyin.
      2-3 Bee Functions 8_authored_hint:
        2-3_Bee_Functions_8_a: "Bulmaca zorlu görünüyorsa, fonksiyonu  biraz tbiraz oluşturarak deneyin.    Bazı bloklar ekleyin, sonra deneyin. Daha fazla blok ekleyin, sonra yeniden deneyin.  Çözüme ulaşacaksınız!  ! [] (https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)"
      2-3 Bee Functions 9_authored_hint:
        2-3_Bee_Functions_8_a: "Bulmaca zorlu görünüyorsa, fonksiyonunuzu biraz biraz oluşturmayıdeneyin.    Bazı bloklar ekleyin, sonra deneyin. Daha fazla bilgi ekleyin, sonra yeniden deneyin.  Çözümü bulacaksınız!"
        2-3_Bee_Functions_8_b: |-
          Yeşil fonksiyon bloğu içinde kod oluşturmayı hatırla. ! [] (https://images.code.org/8fe1fae5caf4ede3a9c9bd9f26940cde-image-1467996837459.gif)
      2-3 Bee Loops 2_authored_hint:
        2-3_Bee_Loops_2_a: Döngü içinde 4 blok olsun.
      2-3 Bee Loops 3_authored_hint:
        2-3_Bee_Loops_3_a: Döngü içinde 6 blok olsun.
      2-3 Bee Loops 3B_authored_hint:
        2-3_Bee_Loops_3B_a: Birbiri ardına İki farklı döngü gerekir.
      2-3 Bee Loops 4_authored_hint:
        2-3_Bee_Loops_4_a: Döngü içinde 5 blok olsun.
      2-3 Bee Loops 4A_authored_hint:
        2-3_Bee_Loops_4A_a: İlk eylem bir hareket yerine bir dönüş olacak.
        2-3_Bee_Loops_4A_b: Programın son parçası döngü sonrasına yazacağınız kod olmalı.
        2-3_Bee_Loops_4A_c: Eğer döngüleri bulmadıysanız kodu önce yazın ve tekrarla bloğunu nasıl kullanırsınız görmeye çalışın.
      2-3 Bee Loops 5_authored_hint:
        2-3_Bee_Loops_5_a: Eğer tekrarla bloğunu koyacak yeri bulamadıysan kodu yaz ve tekrar eden yerlere dikkat et.
      2-3 Bee Loops 6_authored_hint:
        2-3_Bee_Loops_6_a: Eğer tekrarla bloğu içine hangi blokların gireceğini bulamadıysan teker teker eklemeyi dene.
        2-3_Bee_Loops_6_b: İşiniz bittiğinde, döngü içinde 6 blok olmalıdır.
      2-3 Bee Loops 7_authored_hint:
        2-3_Bee_Loops_7_a: İlk eylem bir hareket yerine bir dönüş olacak.
        2-3_Bee_Loops_7_b: 'Eğer döngüyü başlangıçta göremiyorsan, uzun şekilde ya ve tekrarlara dikkat et.  '
      2-3 Maze 1_authored_hint:
        2-3_Maze_1_a: '''İlerle'' bloğunu kullanmak için araç çubuğu alanından dışarı çalışma alanına sürükleyin ve ''çalıştığı'' bloğuna bağlayın.'
      2-3 Maze 16_authored_hint:
        2-3_Maze_16_a: Tekrar eden kısımları görmek zor ise, her şeyi kodlamayı deneyin ve tekrar eden şeyleri döngüye koyun.
        2-3_Maze_16_b: "Birden fazla bloğu tekrarla bloğu içine koymak için döngüyü çalışma alanına sürükle sonra blokları sürükle ve blokları içine sürükle!"
      2-3 Maze 6_authored_hint:
        2-3_Maze_6_a: Bu bulmacayı çözmek için iki yol vardır!
      2-3 Maze Loops 17_authored_hint:
        2-3_Maze_Loops_17_a: Tekrar eden kısımları görmek zor ise, her şeyi kodlamayı deneyin ve tekrar eden şeyleri döngüye koyun.
        2-3_Maze_Loops_17_b: Başlangıç kodu silindi mi? "Yeniden dene" kuşu ile tekrar alabilirsin!
      2-3 Maze Loops 18_authored_hint:
        2-3_Maze_Loops_18_a: Tekrar eden kısımları görmek zor ise, her şeyi kodlamayı deneyin ve tekrar eden şeyleri döngüye koyun.
      2-3 Maze Loops 19_authored_hint:
        2-3_Maze_Loops_19_a: Eğer takıldıysan önce kodu yaz sonra tekrarlı kısımları gör.
        2-3_Maze_Loops_19_b: İçiçe döngüler kullanacağınız blok sayısının azalmasını sağlayacaktır.
      2-3 Maze Loops 20_authored_hint:
        2-3_Maze_Loops_20_a: Bu labirentte bir döngünün kullanıldığı yerleri bulmak için bir merdiven basamağı desenine bak.
      2-3 Maze Loops 21_authored_hint:
        2-3_Maze_Loops_21_a: Merdiven basamağı deseni bulmakta sorun yaşıyorsanız, parmağınızla engellenen yolları bulmayı deneyin.
      4-5 Artist 1_authored_hint:
        4-5_Artist_1_a: "![](https://images.code.org/e5a08f29a9c4e306de5553dafca9fb5d-image-1467913845542.gif)"
      4-5 Artist 11_authored_hint:
        4-5_Artist_11_a: Döngü içinde sanatçının önce geriye ve yukarı atladığını garanti et.
      4-5 Artist 3_authored_hint:
        4-5_Artist_3_a: |2
          Içek tarlası 600 piksel ise ve iki tarafı 200 piksel uzunluğunda ise, kısa kenarlara ne kadar piksel kalıyor: 
          ** 600-200 - 200 = 200 ** 
          Yani iki kısa kenar 200 piksel
           ** Nedir 200 / 2? **
        4-5_Artist_3_b: Tekrarla bloğunun nereye gireceğini bulamıyorsanız önce kodlayın sonra tekrarlayan kısımları görün.
      4-5 Artist 4_authored_hint:
        4-5_Artist_4_a: "Bir daire içinde 360 derece vardır! Bu kodu Kaç kez (1 derece dönerek) tekrarlamak gerekir!"
      4-5 Artist 5_authored_hint:
        4-5_Artist_5_a: |-
          Deneme yanılma büyük bir yöntemdir, ancak 90 derecelik açıyı üçe bölerek de sorun çözebilir. ** 90 / 3 _____ ** =
      4-5 Artist 7_authored_hint:
        4-5_Artist_7_a: 'Hangi açı küçüğüdür? Sanatçı hangi açıda duruyor? '
      4-5 Artist 8_authored_hint:
        4-5_Artist_8_a: "Uzun kenarlar 240 piksel uzunluğundadır.  Yani 2 Kısa taraf toplamı : ** 800-240 - 240 = 320 **  **\nSonra  320/2 **? "
        4-5_Artist_8_b: "Bu görüntü 2 şekilde yapılabilir!   -\n-Bir kenarı çakışan İki dikdörtgen çizmek: ** 120 ** uzunluka ve ** 160 ** yükseklikte,  \n-Bir dikdörtgen çizmek ** 240 ** uzunlukta ve ** 160 ** uzunlukt, sonra  ortaya bir satır ekleyin."
      4-5 Artist 9_authored_hint:
        4-5_Artist_9_a: "Bir eşkenar bir üçgen için, tüm taraflar ve tüm açılar aynıdır.\n"
        4-5_Artist_9_b: Aynı boyutta üç üçgen çizmek gerekir. Her birinin ardından yeni konuma atlamayı unutma.
      4-5 Artist Assessment 1_authored_hint:
        4-5_Artist_Assessment_1_a: Bu bulmacayı tamamlamak için dış üçgen çizmek gerekir.
      4-5 Artist Patterns 11_authored_hint:
        4-5_Artist_Patterns_11_a: Bir çemberde 360 derece varsa ve her döngü 3 derece dönerse, yarım daire için kaç kere döngüyü çalıştırman gerekir?
      4-5 Artist Patterns 2_authored_hint:
        4-5_Artist_Patterns_2_a: Peçeteler 20 piksel uzun olduğundan, sonraki döngüye başlamadan önce 20 piksel atlamak gerekecektir.
      4-5 Artist Patterns 3_authored_hint:
        4-5_Artist_Patterns_3_a: Araç kutusundan her seferinde tüm kod bloğunu çekmeyi unutmayın.
        4-5_Artist_Patterns_3_b: Kodunuzu çok kafa karıştırıcı hale gelirse, "Başla"'yı tıklayın ve yeniden deneyin!
      4-5 Artist Patterns 5_authored_hint:
        4-5_Artist_Patterns_5_a: "Şimdi sanatçı her bir elması bitirdiğinde olması gereken yönün terine bakıyor.\nDoğru yöne bakması için kaç derece dönmesi gerekiyor?"
      4-5 Bee Conditionals 4_authored_hint:
        remember_quantum: "** Dikkat: ** Bu bulmaca her çalıştırdığınızda değişir.   \n Bir koşullu blok kullanmak isteyeceksiniz ('eğer' veya ' Eğer/Değilse')."
      4-5 Bee Conditionals 5_authored_hint:
        remember_quantum: "** Dikkat: ** Bu bulmaca her çalıştırdığınızda değişir.   \n Bir koşullu blok kullanmak isteyeceksiniz ('eğer' veya ' Eğer/Değilse')."
      4-5 Bee Conditionals 6_authored_hint:
        4-5 Bee Conditionals 6_a: Çalışma alanındaki bloklarla bu bulmaca çözebilir.  Hangi sırayla olmalı?
        4-5 Bee Conditionals 6_b: Çiçeğin 0 dan çok nektar içerip içermediğini kontrol etmeyi en az 3 kez tekrarlaman gerekiyor.
      4-5 Bee Debugging 1_authored_hint:
        4-5_Bee_Debugging_1_a: Doğru çözümü bulamadıysan çalıştır neyin hatalı olduğunu gör.
      4-5 Bee Nested Loops Rows_authored_hint:
        4-5_Bee_Nested_Loops_Rows_a: Bu bulmacayı uzun bir kare olarak hayal edin. Arı ileri hareket etmeli defalarca dönmeli ve rotayı tamamlamalı.
      4-5 Maze 10_authored_hint:
        4-5_Maze_10_a: |-
          Eğer döngüyü nasıl kullanacağını bulamadıysan uzun yoldan dene sonra tekrarlı kısımları gör.
          Tekrarla içine neyi koyduğunda kod daha kısa olacaktır?
      4-5 Maze 4_authored_hint:
        4-5_Maze_4_a: Tekrarla bloğunu nereye koyacağına karar veremdiysen önce kodla sonra tekrarlı kısımlara bak.
      4-5 Maze 5_authored_hint:
        4-5_Maze_5_a: Tekrarla bloğunu her birden fazla ilerlemek gerektiğinde kullanın.
        4-5_Maze_5_b: Bulmacayı çözmek için birden fazla tekrarla bloğu kullanabilirsiniz.
      4-5 Maze 6_authored_hint:
        4-5_Maze_6_a: "Rotayı parmağınızla takip etmeyi deneyin. Bulduğunuz yol en kısa yol mu ?"
      4-5 Maze 7_authored_hint:
        4-5_Maze_7_a: "** Kodunuzu olabildiğince küçük istiyorum? ** \nKodunu iyice incele. tekrar eden bloklar görüyor musun?  Tekrar eden kodu döngü içine koymayı dene!"
      4-5 Nested Loops 12_authored_hint:
        4-5_Nested_Loops_12_a: "** 360 / 36 =? **"
      4-5 Nested Loops 2_authored_hint: [ ]
      4-5 Nested Loops 6_authored_hint:
        4-5_Nested_Loops_6_a: |-
          İç döngü sonrası bir dönüş yapmayı unutmayın. 6 üçgen için 360 derecenin üzerinde dönmen gerekir. 
          ** 360 / 6 =? **
      4-5 Nested Loops 7_authored_hint:
        4-5_Nested_Loops_7_a: |-
          Bu tasarım 360 derece için on kez dönmelidir. ** 360 / 10 =? **
      4-5 Nested Loops 8_authored_hint:
        4-5_Nested_Loops_8_a: |-
          Bu tasarım 360 derece için 6 kez dönmelidir. ** 360 / 6 =? **
      4-5 While Loops 8_authored_hint:
        4-5_While_Loops_8_a: Her öğe kendi döngüsüne ihtiyaç duymaktadır.
      Artist Inspiration_authored_hint:
        brush_width: Fırca kalınlığını q yaptık ve rengi mavi yaptık. Başka birşey yapmış mıydık.
        double_loop: Tekrarla bloğu içine şununa say döngüsü koymayı dene.
        specifics: "Şununla say döngüsü 3 ten 17 ye kadar sayıyıor ve sonraki şekle geçiyor. tek sayılı çokgenler çiziliyor.\nset_alpha bloğı counter değeri arttıkça rengin solgunlaşmasını sağlıyor."
        after: Her "petal" ile işiniz bittiğinde, Önce 60 derece dön sonra 20 piksel 'ilerle '.
        solution: |-
          ** Çözüm **! [Image] çözüm blokların (https://images.code.org/d85a18bd31a09f87b41a818fc8d6c1cc-image-1469641375258.png)
      Bergeron Robot Maze1_authored_hint:
        2-3_Maze_1_a: '''İlerle'' bloğunu kullanmak için araç çubuğu alanından dışarı çalışma alanına sürükleyin ve ''çalıştığı'' bloğuna bağlayın.'
      Course 4 Artist 11_authored_hint:
        Course_4_Artist_11_a: 'Yarım altıgenin ** 30 kenar uzunluğunu ** ve ** 60 derece sağa dönüşü**. vardır.  '
        Course_4_Artist_11_b: '2/3 üçgenini ** 80 kenar uzunluğunu ** ve ** 120 derece sağa dönüşü**. vardır.  '
      Course 4 Artist 12_authored_hint:
        Course_4_Artist_12_a: 'Tekrarlanan her şekil ** yarım bir Altıgen ve ardından **, ** bir üçgen in iki kenarıdır**. '
        Course_4_Artist_12_b: 'Yarım altıgenin biraz daha büyük olması şekil neredeyse son Bulmaca ile aynıdır. '
        Course_4_Artist_12_c: "1) ilk üç satır 60 piksel uzunlukta ve 60 derece dönemniz gerekir.   \n 2) sonraki iki satır 80 piksel uzunlukta ve 120 derece dönmeniz gerekir "
        Course_4_Artist_12_d: |-
          ** Çözüm: **! [Image] çözüm blokların (https://images.code.org/03dfe3f862f4bdbee2a1f5865b7d9d50-image-1469641020695.png)
      Course 4 Artist 6_authored_hint:
        Course_4_Artist_6_a: Orada 3 üçgen 360 derece döndürme açısı içindedir. kaç kez 3 derece döndüğümüzde 360 sdönmüş oluruz?
      Course 4 Artist 7_authored_hint: [ ]
      Course 4 Artist 8a_authored_hint:
        Course_4_Artist_8a: |-
          Ne kadar kadar döneceğin konusunda yardım mı gerekiyor? 360 derece döndürme içinde 3 üçgen vardır. Kaç kere 3 derecelik dönüş 360 yapar?
      Course 4 Artist 9_authored_hint:
        Course_4_Artist_9_a: "Ne kadar dönmek gerek? \n360 bölü 10 nedir?"
      Course 4 Artist Binary Free Play 2b_authored_hint:
        Course_4_Artist_Binary_Free_Play_2b_a: Bu kod iki döngü kullanır. İlki 1'den 8'e, diğeri sayıları aşağı 8-1 sayılır.
        Course_4_Artist_Binary_Free_Play_2b_b: Her döngü üç kez tekrarlanır.  İlk olarak soldaki 1'ler  ikinci olarak ortadakı 0 lar, ve üçüncü olarak sağ tarafta 1ler çizer.
        Course_4_Artist_Binary_Free_Play_2b_c: Her tekrar için  'sayaç' 1'ler ve '16-(2 x counter)' 0lar olmalı.
        Course_4_Artist_Binary_Free_Play_2b_d: |-
          ** Çözüm: **![solution] (https://images.code.org/b282dd6324910b7d604e24182cbbccbb-image-1469641477135.png)
      Course 4 Artist For Loops 11_authored_hint:
        Course_4_Artist_For_Loops_11_a: "Dönüş açısı ile her şekil ile değişecek!    Matematik blokları kullanarak  \"360 bölü şeklin kenar sayısı\" ile döneceğin açıyı hesapla. "
      Course 4 Artist For Loops 11a_authored_hint:
        Course_4_Artist_For_Loops_11a_a: '360/kenar sayısı değeri dönmen gereken açıyı verir.'
        Course_4_Artist_For_Loops_11a_b: 'Her seferinde şeklin kenar sayısının 10 karı kadar ilerlemen gerekiyor. '
      Course 4 Artist For Loops 3_authored_hint:
        Course_4_Artist_For_Loops_3_a: Şununla say döngüsünün sizi ilerletmesini istiyorsan counter değişkenini uzaklık olarak kullanabilirsin.
      Course 4 Artist For Loops 4_authored_hint:
        Course_4_Artist_For_Loops_4_a: "** İhtiyacınız olacak en küçük sayı nedir?   \nEn büyük numarası nedir?   \nArtış ne kadar? ** \nŞununla say döngüsü için boşlukları doldururken sorman gereken sorular bunlardır."
      Course 4 Artist For Loops Challenge_authored_hint:
        Course_4_Artist_For_Loops_Challenge_a: En büyük şeklin 19 yüzü vardır. En küçük olanı sadece iki.
        Course_4_Artist_For_Loops_Challenge_b: Şununla say döngüsü ikişer ikişer sayıyor
      Course 4 Artist For Loops Challenge_a_authored_hint:
        Course_4_Artist_For_Loops_Challenge_a: En büyük çokgenin 19 yüzü vardır.
        Course_4_Artist_For_Loops_Challenge_b: Her çokken olması gereken kenar sayısından bir eksik kenar sahiptir.
      Course 4 Artist For Loops inspire_authored_hint:
        Course_4_Artist_For_Loops_inspire_a: Bu dokun temeli bir önceki bulmaca ile aynıdır. Sadece birkaç basit değişiklik gerekir.
        Course_4_Artist_For_Loops_inspire_b: 10 dan 3 e birer birer sayan döngü kullanmayı dene.
        Course_4_Artist_For_Loops_inspire_c: Şununla say döngüsü içinde iki adet tekrarla döngüsü vardır. İkincisi ters yöne döner.
        Course_4_Artist_For_Loops_inspire_d: "** Çözüm: **![Solution] (https://images.code.org/418dfd57794706de541f1c162911a6e2-image-1469641233597.png)"
      Course 4 Artist Functions Inspiration_authored_hint:
        Course_4_Artist_Functions_Inspiration_a: Bir önceki bulmacadan başla ve tekrarla bloğu içine sağa 3 derece dön bloğu ekle.
        Course_4_Artist_Functions_Inspiration_b: Tekrarla bloğunun dışında fakat şununla say bloğunun içinde olacak şekilde 90 derece dönüş yap.
        Course_4_Artist_Functions_Inspiration_c: |-
          ** Çözüm: **![Solution] (https://images.code.org/0c94bcde33a00595aa099fea964ca80e-image-1469641309381.png)
      Course 4 Artist Functions challenge_authored_hint:
        Course_4_Artist_Functions_challenge_a: Fonksiyonları kullanmayı öğrenmenin bir yanıda hangi fonksiyona ihtiyacın olduğunu anlaman olmalıdır.
        Course_4_Artist_Functions_challenge_b: Şununla say döngüsü kullan ve onun counter değişkenini içerideki tekrarla döngüsünde kullan.
        Course_4_Artist_Functions_challenge_c: Her döngüde kare çizip ileri atlaman gerekiyor.
        Course_4_Artist_Functions_challenge_d: Tekrarla döngüsü dışında 90 derece dönmen gerekiyor.
      Course 4 Artist Inspire_authored_hint:
        Course_4_Artist_Inspire_a: Bir kareyi tamamladıktan sonra, uzunluğun yarısı kadar ileri atlayın ve sonra dönün.
        Course_4_Artist_Inspire_b: Her bir kare ve atlama 4 kez tekrarlanıyor. (aralarda dönüş ile birlikte).
        Course_4_Artist_Inspire_c: Her bir fırıldak 4 kez tekrarlanıyor. Dönüş açısı için 360/kenar değerini kullan.
        Course_4_Artist_Inspire_d: |-
          ** Çözüm: **! [Çözüm] blokları (https://images.code.org/35fa852515d73aa8cf6c2bde4f2d46a3-image-1469641128278.png)
      Course 4 Artist Vars 13_authored_hint:
        Course_4_Artist_Vars_13_a: İçiçe İki adet tekrarla döngüsü kullanmalısın ve her biri kenar sayısı kadar tekrarlamalı.
        Course_4_Artist_Vars_13_b: "İç döngü (sola dönerek) bir sekizgen çizer.     Daha sonra dış döngünün içinde ileriye taşıyın ve sağa dönün."
        Course_4_Artist_Vars_13_c: Şeklin boyutunun aynı kalması için uzunluğu kenar sayısına bölün.
      Course 4 Artist Vars 6_authored_hint:
        Course_4_Artist_Vars_6_a: Çokgen çizmek için ** 360 / taraf ** kadar dönün.
      Course 4 Artist Vars 8_authored_hint:
        Course_4_Artist_Vars_8_a: Başlangıç uzunluğu kenar sayısına bölersen, kenar sayısı arttıkça kenar uzunluğu azalacaktır.
      Course 4 Bee Params 7_authored_hint:
        notice_pattern: 'Nektarların ne kadar değiştiği ile ilgili bir düzen görüyormusun? '
        count_with_for: Dikkat ettiysen nektar sayısı artıyor. Böyle sayarak artan işler için ne tür bir blok kullanabilirsin?
      Course 4 Bee Params 8_authored_hint:
        Course_4_Bee_Params_8_a: Her seferinde nektar sayısını ve bal sayısını sorabilirsin. Eğer yok ise değer 0 olacaktır.
      Course 4 Play Lab Params 2_authored_hint:
        Course_4_Play_Lab_Params_2_a: Düzenle tuşuna basıp jump fonksiyonunu güncelleyebilir ve yükseklik parametresi almasını sağlayabilirsin.
      Course 4 Play Lab Vars 2_authored_hint:
        Course_4_Play_Lab_Vars_2_a: Köpeğin hızını 'Dog_speed' değerini kedinin hızından 'cat_speed' değerinden büyük yaptığınızdan emin olun.
      Course 4 Play Labs For Loops 2_authored_hint:
        Course_4_Play_Labs_For_Loops_2_a: Şununla say döngüsünde çift sayıları atlamak için her seferinde kaç arttırmak gerekiyor?
      Course 4 Playlab For Loop Freeplay_authored_hint: [ ]
      Course 4 Playlab For Loops 4b_authored_hint:
        Course_4_Playlab_For_Loops_4b_a: Bayraklar karakterlere 330 piksel uzaktadır.
        Course_4_Playlab_For_Loops_4b_b: Her karakterin 330 piksel uzaklığa aynı sayıda hareketle fakat farklı başlangıç noktaları ve bitiş noktaları ile gitmesini sağla?
        Course_4_Playlab_For_Loops_4b_c: Her bir karekter bayrağı aynı sayıda hareket ile geçtiği sürece, son hareketinde karakterin bayrağı ne kadar geçtiği önemli değil.
      Course 4 Playlab For Loops 5b_authored_hint:
        Course_4_Playlab_For_Loops_5b_a: Karekterler merkeze 175 piksel uzaktadır.
        Course_4_Playlab_For_Loops_5b_b: Kahramanın bir sonraki adımı daha uzun olacak çünkü counter sayacı artmaya devam ediyor.
      Course 4 Playlab For Loops 6b_authored_hint: [ ]
      Course 4 SCF 1_authored_hint:
        Course_4_SCF_1_a: Her altıgenin 40 piksel kenar uzunluğu vardır.
        Course_4_SCF_1_b: Her altıgen arasında 120 piksel atla olmalı.
        Course_4_SCF_1_c: "İkinci sıra Altıgen çizdemden önce, sağa 60 derece dön be 40 piksel ilerle.\nDoğru dikey noktada olduktan sonra sanatçıyı döndür ve 320 piksel atla."
        Course_4_SCF_1_d: "Üçüncü sıra Altıgen çizmeden önce, sağa 60 derece dön be 40 piksel ilerle.\nDoğru dikey noktada olduktan sonra sanatçıyı döndür ve 440 piksel atla. "
        Course_4_SCF_1_e: |-
          ** Çözüm: **! [Çözüm] blokları (https://images.code.org/d64a0e22c1db1d98c35b243bca6460ab-image-1469727090121.png)
      Course 4 SCF 1a_authored_hint:
        Course_4_SCF_1a_a: 16 aşamadaki fonksiyonu hatırla.
        Course_4_SCF_1a_b: 'Bu yol, ana yol olarak bak:! [] (https://images.code.org/1c3feab70af706409b3a05af4dc83c2e-image-1469726967858.png)'
        Course_4_SCF_1a_c: Şununla say döngüsü kullanmayı düşün. Adımlar için değil fonksiyon parametreleri için.
        Course_4_SCF_1a_d: |-
          ** Çözüm: **! [Çözüm] blokları (https://images.code.org/aa5a636a1d072e1449b481973ff27337-image-1469727008929.png)
      Course 4 SCF 1b_authored_hint:
        Course_4_SCF_1b_a: "Dikkat bütün bal noktalarının şekilleri benzer.\nFonksiyon için iyi bir yer!"
        Course_4_SCF_1b_b: 'Arı nasıl ilerlemeli fikri için bak:! [] (https://images.code.org/996ab4a2de6048cbb99b84c56cc4ad61-image-1469726859769.png)'
        Course_4_SCF_1b_c: Arının ilerlemesi gereken mesafe için şununla say döngüsü kullan.
        Course_4_SCF_1b_d: |-
          ** Çözüm: **! [Çözüm] blokları (https://images.code.org/15ef56cd19a1efd510527345f077d6eb-image-1469726894398.png)
      Course 4 SCF 2_authored_hint:
        Course_4_SCF_2_a: Her sekizgenin 40 piksel kenar uzunluğu vardır.
        Course_4_SCF_2_b: Her sekizgen arasında 136 piksel atla olmalı.
        Course_4_SCF_2_c: "İkinci sıra sekizgeni çizdemden önce, sağa 45 derece dön be 96 piksel ilerle.\nDoğru dikey noktada olduktan sonra sanatçıyı geriye döndür ve 408 piksel atla. "
        Course_4_SCF_2_d: "Tek satırlarda daha az sekizgen olduğuna dikkat edin. Tek satırlar için geriye fazla atlaman gerekmiyecek.\nBude demekki aynı fonksiyonu bütün satırlar için kullanabilirsin."
        Course_4_SCF_2_e: |-
          ** Çözüm: **! [Çözüm] blokları (https://images.code.org/de5a99b0fb4c079504ff7cca9a249f02-image-1469727175091.png)
      Course 4 SCF 3_authored_hint:
        Course_4_SCF_3_a: "![](https://images.code.org/9310e6352e85a8265b424c9d57ca28d1-image-1446239776339.gif)"
        Course_4_SCF_3_b: 'Kenar uzunlukları counter uzunluğunda olan sekizgenler var. '
        Course_4_SCF_3_c: '200 den aşağı ikişer ikişer 2 ye kadar giden bir şununla say döngüsü içinden sekizgen fonksiyonu çağrılır. '
        Course_4_SCF_3_d: 'Her döngünün sonunda 22.5 derece dönmeyi unutma. '
        Course_4_SCF_3_e: Sekizgen rengini ve kalem genişliği 'sayaç' değişkeni tarafından kontrol edilir.
        Course_4_SCF_3_f: |-
          ** Çözüm: **! [Çözüm] blokları (https://images.code.org/a82cfea836b95ce6625b08afcc3b7b37-image-1469727289590.png)
      Course 4 SCFL 1_authored_hint:
        Course_4_SCFL_1_a: 'Hareket seçeneği için bir göz atın:! [] (https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png)'
        Course_4_SCFL_1_b: 'İki ''şununla say'' döngüsü kullanmayı deneyin: bir yukarı tırmanma ve nektar alma ve diğeri aşağı inme ve bal yapma.'
        Course_4_SCFL_1_c: "Şununla say döngüsü içinde tekrarla döngüsü gerekiyor. Counter değeri kadar merdiven yapılacak.\nÖteki şununla say döngüsü sadece bir döngüsü gerektiriyor. Counter kadar bal yapacak."
        Course_4_SCFL_1_d: |-
          ** Çözüm: **! [Çözüm] blokları (https://images.code.org/1a61eae7e12742c8d850f2bf7e939f72-image-1469726415313.png)
      Course 4 SCFL 1a_authored_hint:
        Course_4_SCFL_1a_a: En az sayıda blok kullanmak için daha ileri gitmen gerkecek.
        Course_4_SCFL_1a_b: 'Bu seçenek hareketi için bir göz atın:! [] (https://images.code.org/253d710ff7d1b494fe8fd20cfc92baaf-image-1469726263579.png)'
        Course_4_SCFL_1a_c: Bununla say döngüsü aynı düzeni değişen sayılarla yapmanı sağlar. Sayının 7 den 5 e 1 er birer düşmesi gerekecek.
        Course_4_SCFL_1a_d: "** Çözüm: **! [Çözüm Blocks\\t] (https://images.code.org/8742b441717ee3ab7cbc91d84f688dbb-image-1469726297064.png)"
      Course 4 SCFL 1b_authored_hint:
        Course_4_SCFL_1b_a: Şununla say göngüsü kullanmayı dene.
        Course_4_SCFL_1b_b: 'Bu seçenek hareketi için bir göz atın:! [] (https://images.code.org/1957633c453f4025a3fd6ce0e201398b-image-1469642319721.png)'
        Course_4_SCFL_1b_c: |-
          ** Çözüm: **! [] (https://images.code.org/349a0baf93e00a679cf7ed348f8309b4-image-1469642354856.png)
      Course 4 SCFL 2_authored_hint:
        Course_4_SCFL_2_a: 'Bu seçenek hareketi için bir göz atın:! [] (https://images.code.org/a69c63a039031254097f19231dd7bf95-image-1469726483169.png)'
        Course_4_SCFL_2_b: Şununla say döngüsünün 3 parçası var.
        Course_4_SCFL_2_c: Şununla say döngüsünün her yinelemesinde nesne bir şekilde 'sayaç' değişkeni ile ilgilidir.
        Course_4_SCFL_2_d: |-
          ** Çözüm: **! [Çözüm] blokları (https://images.code.org/df47aa475c36d0c1664c2fdb16b5613c-image-1469726516185.png)
      Course 4 SCFL 3_authored_hint:
        Course_4_SCFL_3_a: '''Kalem genişliği'' 1''dir. İlk karenin 50 piksel kenar uzunluğu vardır ve her kare öncekinden 50 piksel daha geniş.'
        Course_4_SCFL_3_b: Opaklık e her zaman 'counter' / 2 değerindedir.
        Course_4_SCFL_3_c: Her bir kareyi yaptıktan sonra ileri atla, dön, atlla ve geriye dön!
        Course_4_SCFL_3_d: |-
          ** Çözüm: **! [Çözüm] blokları (https://images.code.org/7f14ddfa5cdcbfdfacd8b1e45511d583-image-1469726581880.png)
      Course 4 SCFL 4_authored_hint:
        Course_4_SCFL_4_a: Renk değişim 'kırmızı, yeşil, mavi renk ayarla' bloğu kullanarak olur.  Kırmızı 'sayaç ' olarak ayarlanır. Yeşil '255 - sayaç', ve mavi 255 sürekli ayarlanır.
        Course_4_SCFL_4_b: Her bir şekil kenar uzunluğu counter değişkeni kadar olan bir karedir. 5 piksel ile başlayıp 200 piksele kadar 5 er artar.
        Course_4_SCFL_4_c: Sanatçı her bir kare arasında 15 derece döner.
        Course_4_SCFL_4_d: |-
          ** Çözüm: **! [Çözüm] blokları (https://images.code.org/b85604648076fa7adfc7a30be41d13fa-image-1469726651617.png)
      Course 4 SCFL 6_authored_hint:
        Course_4_SCFL_6_a: Renk değişim 'kırmızı, yeşil, mavi renk ayarla' bloğu kullanarak olur.  Kırmızısabit 255 olarak ayarlanır. Yeşil '255 - counter olur.  ve mavi 255 olarak ayarlanır.
        Course_4_SCFL_6_b: Bu kod düşündüğünden daha basit. Şununla say döngüsü içinde rengi değiştir, ilerle ve dön.
        Course_4_SCFL_6_c: 'Şununla say döngüsü 5 ten 250 ye 2 şer ilerler. '
        Course_4_SCFL_6_d: |-
          ** Çözüm: **! [Çözüm] blokları (https://images.code.org/a61c16d76d876d9c26ebcaebef3f97a2-image-1469726730055.png)
      Course 4 SCFL 7_authored_hint:
        Course_4_SCFL_7_a: Renk değişim 'kırmızı, yeşil, mavi renk ayarla' bloğu kullanarak olur.  Kırmızı 'sayaç ' olarak ayarlanır. Yeşil '255 - sayaç', ve mavi 255 sürekli ayarlanır.
        Course_4_SCFL_7_b: 'Çizim iki benzer şununla say döngüsüyle yapılır. Birisi 2 swn 200 e kadar 2 şer artar öteki 200 den 5 e 2 şer azalır. '
        Course_4_SCFL_7_c: Her bir şununla say döngüsü i. imde 5 piksel ilerle 360/counte rkadar dön. Fırça genişliğini counter değişkeni kadar yapmayı unutma!
        Course_4_SCFL_7_d: İki şununla say döngüsü arasında 225 derece sola dönmen gerekecek.
        Course_4_SCFL_7_e: |-
          ** Çözüm: **! [Çözüm] blokları (https://images.code.org/96adbffef5520417927b6129875e6125-image-1469726787490.png)
      Course 4 SCV 1_authored_hint:
        Course_4_SCV_1_a: 'Değişkenle kullanışlıdır. Çünkü döngü içinde bu değişkene ekleme yapabilirsiniz. '
        Course_4_SCV_1_b: Bu blmaca çokgen oluşturan bir döngü içermekte. Diğer döngü çokkenleri tekrarlamakta diğer döngü kenara 5 ekledikten sonra tekrarlamakta.
        Course_4_SCV_1_c: Sides ve length paremetrelerini kullanmak kodu daha temiz yapar çünkü aynı kodu döngü ile tekrarlayabilirsin.
        Course_4_SCV_1_d: |-
          ** Çözüm: **![Solution] (https://images.code.org/311b4a946cb8f3b4144b5075be6460a3-image-1469641878222.png)
      Course 4 SCV 2_authored_hint:
        Course_4_SCV_2_a: 'Tamamlanan görüntü bu "Çiçekler" 10 / yapılır:! [] (https://images.code.org/bac2a606dfa59c00409294499540267d-image-1469641972385.png)..... .ki bu decagons 10 / oluşur:! [] (https://images.code.org/1e15f278c9c1606f90a2490ec3a94eb4-image-1469642051512.png)'
        Course_4_SCV_2_b: 'Bu tasarım iç içe geçmiş döngüleri (üç derinliğinde) kullanır. Tüm döngüler ''sides'' kenar sayısı kez çalışmalı. '
        Course_4_SCV_2_c: Her bir ongeni bitirdikten sonra sanatçı sola döner fakat öbür döngülerde sağa döner.
        Course_4_SCV_2_d: 10 çiçeğinde ayn yere çizilmesini engellemek için arada uzunluk/kenar kadar atlamayı unutma. Sonrada 360/kenar kada dön.
        Course_4_SCV_2_e: |-
          ** Çözüm: **![Solution] (https://images.code.org/889fda43ab85f9972fdabe5bb968ff95-image-1469642093490.png)
      Course 4 SCV 3_authored_hint:
        Course_4_SCV_3_a: 'Points değişkenine ekleme ve çıkarma yapmak için math bloklarını kullanın. '
        Course_4_SCV_3_b: Ok tuşuna her basıldığında ne kadar hareket edeceğini parametreyi değiştirerek yapabilirsin.
        Course_4_SCV_3_c: |-
          ** Çözüm: **![solution] (https://images.code.org/8d4bcfb29308eabff39500ad9db813fd-image-1469641570287.png)
      Course 4 SCV 4_authored_hint:
        Course_4_SCV_4_a: 3 değişken işine yarayacaktır. Nektar miktarı, bal miktarı ve her döngüde arı ne kadar ilerlesin.
        Course_4_SCV_4_b: 'Ana döngünün içinde 3 döngü kullanman faydalı olacaktır. Birtanesi ileri hareket için diğeri nektar toplamak için ve sonuncusu bal yapmak için. '
        Course_4_SCV_4_c: 'Bu seçenek hareketi için bir göz atın:! [] (https://images.code.org/78f8fb83da67c5b80126555a362b8b20-image-1469641782259.png)'
        Course_4_SCV_4_d: |-
          ** Çözüm: **![Solution] (https://images.code.org/c57fc9df2e24b1f8497b7e4ca9e1f568-image-1469641818826.png)
      Course 4 SCV 5_authored_hint:
        Course_4_SCV_5_a: |-
          Bu seçenek hareketi için bir göz atın:! [] (https://images.code.org/7f6f09c55cf9552a91fc1d33f44a7315-image-1469641639330.png)
        Course_4_SCV_5_b: Döngünün her tekrarında çiçekte 2 nectar daha az var ve arının bir fazla bal yapması gerekiyor.
        Course_4_SCV_5_c: Dış döngünün başlangıcında arı çiçekteki nektar kadar hareket ediyor.
        Course_4_SCV_5_d: |-
          ** Çözüm: **! [Image] çözüm (https://images.code.org/831d8675f6551d79b212da594a9a73f0-image-1469641703833.png)
      Course 4 SCV 6_authored_hint:
        Course_4_SCV_6_a: |-
          Tek bir tamamlanmış şekli neye benzediğini bir göz atın! [] (https://images.code.org/9e30d3a87186cefe730984feee195806-image-1469642178866.png)
        Course_4_SCV_6_b: '8 değişkenleri oluşturman işe yaryacaktır: red1, green1, blue1, red2, green2, blue2, uzunluk ve taraf.'
        Course_4_SCV_6_c: Şeklin 5 tarafıda parçalara bölünmüş (length/sites) uzunluk/kenar sayısı 'zig deniz mavisi (rgb 0,175,200 =) ve zag mor (rgb = 50, 100, 150).
        Course_4_SCV_6_d: 'Zig için ''360 / kenar kadar sola dönün.  Zag için ''360 ''/'' kenar kadar sağa dönün. '
        Course_4_SCV_6_e: 'Şekilden 360 derece dönüş yapma kısmı standart. Şekiller yarı yarıya kesişiyor. Bu sebeple 180/kenar kadar dönmelisin. (Bu durumda sides*2 kadar tekrarlaman gerekecek). '
        Course_4_SCV_6_f: |-
          ** Çözüm: **![Solution] (https://images.code.org/72f0ce970999deffe87bd93af0db959f-image-1469642214408.png)
      Farmer for Authored Hint testing_authored_hint:
        first_hint: |-
          İlk ipucu bu. Bu * bazı * ** basic ** 'biçimlendirme'
        second_hint: |-
          İkinci ipucu bu. Bir imajı var.  ! [] (https://images.code.org/cab43107265a683a6216e18faab2353f-image-1452027548372.png)
        last_hint: Üçüncü ve son ipucu bu. Özel bir şey yok.
      Farmer for TTS testing_authored_hint:
        first_hint: |-
          İlk ipucu bu. Bu * bazı * ** basic ** 'biçimlendirme'
        second_hint: |-
          İkinci ipucu bu. Bir imajı var.  ! [] (https://images.code.org/cab43107265a683a6216e18faab2353f-image-1452027548372.png)
        last_hint: Üçüncü ve son ipucu bu. Özel bir şey yok.
      Harvesting_authored_hint:
        pointer_harvester_test: Birşeyi kontrol edip karar vermek için hangi bloğu kullanabilirsin?
      Inspirational Artwork_authored_hint:
        brush_width: Fırca kalınlığını q yaptık ve rengi mavi yaptık. Başka birşey yapmış mıydık.
        double_loop: Tekrarla bloğu içine şununa say döngüsü koymayı dene.
        specifics: "Şununla say döngüsü 3 ten 17 ye kadar sayıyıor ve sonraki şekle geçiyor. tek sayılı çokgenler çiziliyor.\nset_alpha bloğı counter değeri arttıkça rengin solgunlaşmasını sağlıyor."
        after: Her "petal" ile işiniz bittiğinde, Önce 60 derece dön sonra 20 piksel 'ilerle '.
        solution: |-
          ** Çözüm **! [Image] çözüm blokların (https://images.code.org/d85a18bd31a09f87b41a818fc8d6c1cc-image-1469641375258.png)
      InspirationalArtwork_authored_hint: [ ]
      K2.0 sequence 1_authored_hint:
        K2.0_sequence_1_a: This program is missing one block. Can you figure out which one?
      K2.0 sequence 10_authored_hint:
        K2.0_sequence_10_a: If you're having trouble, try writing down the steps on a piece of paper first.
        K2.0_sequence_10_b: You will need three different kinds of arrows to solve this puzzle.
      K2.0 sequence 12_authored_hint:
        K2.0_sequence_12_a: If the pig isn't moving far enough, try adding another block.
      K2.0 sequence 2_authored_hint:
        K2.0_sequence_2_a: One of the blocks is moving the bird in the wrong direction. Can you figure out which one and replace it with the correct block?
      K2.0 sequence 3_authored_hint:
        K2.0_sequence_3_a: If you are having trouble, try to figure out what the correct path is and then remove the block that doesn't fit.
      K2.0 sequence 4_authored_hint:
        K2.0_sequence_4_a: Use 2 different arrow blocks to solve this puzzle!
      K2.0 sequence 5_authored_hint:
        K2.0_sequence_5: Your final code should have three movement blocks.
      K2.0 sequence 6_authored_hint:
        K2.0_sequence_6_a: There is 1 block that you need to add to move the bird to the pig.
        K2.0_sequence_6_b: If you can't figure out what to do, try drawing the puzzle on paper and use your finger to figure out which way to move.
      K2.0 sequence 7_authored_hint:
        K2.0_sequence_7_a: If you're stuck, try drawing the image on paper to see how the bird should move.
      K2.0 sequence 8_authored_hint:
        K2.0_sequence_8_a: Stuck? Try tracing the bird's path with your finger.
      K2.0 sequence 9_authored_hint:
        K2.0_sequence_9_a: If you're having trouble, try writing down the steps on a piece of paper first.
        K2.0_sequence_9_b: You will need to go three different directions to solve this puzzle.
      K2.0 sequence FP_authored_hint:
        K2.0_sequence_FP_a: If the path you need is unclear, use your finger to trace your way from the bird to the pig.
      K2.0 sequence pre_authored_hint:
        K2.0_sequence_pre_a: If you are having trouble getting the bird to move, make sure blocks are connected under `when run`.
      MikeStar_authored_hint:
        hint1: Don't give up!
      MikeStarHard_authored_hint:
        hint1: Don't give up!
      MikeStarNested_authored_hint:
        hint1: Don't give up!
      NEW Course 4 Artist Functions 13_authored_hint:
        NEW_Course_4_Artist_Functions_13_a: Fonksiyonu güncelle ki iki kere çağırmak zorunda kalmayasın.
        NEW_Course_4_Artist_Functions_13_b: İleri 60 piksel gitmen ve 144 derece dönmen gerekiyor.
        NEW_Course_4_Artist_Functions_13_c: Düz çizgilerle yıldız yapmak istersen nasıl bir koda ihtiyacın olur?
      NEW Course 4 Artist Functions 4_authored_hint:
        NEW_Course_4_Artist_Functions_4_a: Her bir kareden sonra sağa 120 derece dön.
      NEW Course 4 Artist Functions 9_authored_hint:
        NEW_Course_4_Artist_Functions_9_a: Blok eklemeden kodu çalıştırın. Ne eksik kaldı?
        NEW_Course_4_Artist_Functions_9_b: Eğer neyin yanlış olduğunu bulmamadı isen slider ile sanatçıyı yavaşlatmayı dene.
      NEW Course 4 Artist Params 11_authored_hint:
        NEW_Course_4_Artist_Params_11_a: Fonksiyonun içinde değişkenler ile değişmesi gereken birden fazla sayı var.
      NEW Course 4 Artist Params 13_authored_hint:
        NEW_Course_4_Artist_Params_13_a: 'Çevre uzunluğunu kenar sayısına bölerek bütün şekillerin aynı boyutta olmasını sağlayabilirsin. '
      NEW Course 4 Artist Params 14_authored_hint:
        NEW_Course_4_Artist_Params_14_a: It's okay to run the program a few times to figure out how the function works with different parameters.
      NEW Course 4 Artist Params inspire_authored_hint:
        brush_width: Fırca kalınlığını q yaptık ve rengi mavi yaptık. Başka birşey yapmış mıydık.
        double_loop: Tekrarla bloğu içine şununa say döngüsü koymayı dene.
        specifics: "Şununla say döngüsü 3 ten 17 ye kadar sayıyıor ve sonraki şekle geçiyor. tek sayılı çokgenler çiziliyor.\nset_alpha bloğı counter değeri arttıkça rengin solgunlaşmasını sağlıyor."
        after: Her "petal" ile işiniz bittiğinde, Önce 60 derece dön sonra 20 piksel 'ilerle '.
        solution: |-
          ** Çözüm **! [Image] çözüm blokların (https://images.code.org/d85a18bd31a09f87b41a818fc8d6c1cc-image-1469641375258.png)
      NEW Course 4 Bee For Loops 10a_authored_hint:
        NEW_Course_4_Bee_For_Loops_10a_a: Can you find a pattern between the number of steps you need to take and the number of nectars to gather?
        NEW_Course_4_Bee_For_Loops_10a_b: You'll need to have 2 repeats, one will use a math block.
      NEW Course 4 Bee For Loops 7_authored_hint:
        NEW_Course_4_Bee_For_Loops_7_a: |-
          Try doing some math with the counter variable.
          
          What do you have to do to the counter at each flower to equal the amount of nectar you need to collect?
      NEW Course 4 Bee For Loops 8_authored_hint:
        NEW_Course_4_Bee_For_Loops_8_a: "Eğer döngü sayıyor ie her seferinde artış miktarı counter değişkenine eklenir. \nSonraki sayıyı elde etmek için ne kadar eklemen gerekiyor?"
      Pattern Bee 1_authored_hint:
        conditional_pointer: |-
          Bu bölüm hakkında düşünme start: ne fark var yolun her adımında? Ne tür blok kullanarak karar verebilirsniz: bir çiçek ya da petek olması hakkında? ! [] (https://images.code.org/a4883ea91c2f879ca1bb281d7944ed87-image-1471477752512.48.07 PM.png)
        turn_at_honeycomb_pointer: Bal yapma dışında her petekte yapman gereken ne var?
      Planning Farmer_authored_hint:
        conditional_pointer: |-
          Bu bölüm hakkında düşünme start: ne fark var yolun her adımında? Ne tür blok kullanarak karar verebilirsniz: bir çiçek ya da petek olması hakkında? ! [] (https://images.code.org/a4883ea91c2f879ca1bb281d7944ed87-image-1471477752512.48.07 PM.png)
        turn_at_honeycomb_pointer: Bal yapma dışında her petekte yapman gereken ne var?
      aE1_authored_hint: [ ]
      aE2_authored_hint:
        aE2_a: Peçeteler 20 piksel uzun olduğundan, sonraki döngüye başlamadan önce 20 piksel atlamak gerekecektir.
      aE3_authored_hint:
        aE3_a: '** iç içe döngü ** çalıştırdıktan sonra satırın başına geçmek için atlamaan gerekecek.'
        aE3_b: "Yeni sıraya başlamadan önce sanatçıyı aşağı taşımayı unutmayın! \nSanatçı aşağı taşımak ve onu doğru şekilde sağa baktırdığınızdanemin olun: \n- 90 derece dön \n- 20 piksel atla- \n 90 derece dön"
        aE3_c: İçice döngülerin bittiğinde 3 kere tekrar yapmış olmalısın.
        aE3_d: Kodunuzu çok kafa karıştırıcı hale gelirse, "Başla"'yı tıklayın ve yeniden deneyin!
      aE3alternate_authored_hint:
        aE3alternate_a: '** iç içe döngü ** çalıştırdıktan sonra satırın başına geçmek için atlamaan gerekecek.'
        aE3alternate_b: "Yeni sıraya başlamadan önce sanatçıyı aşağı taşımayı unutmayın! \nSanatçı aşağı taşımak ve onu doğru şekilde sağa baktırdığınızdanemin olun: \n- 90 derece dön \n- 20 piksel atla- \n 90 derece dön"
        aE3alternate_c: İçice döngülerin bittiğinde 3 kere tekrar yapmış olmalısın.
        aE3alternate_d: Kodunuzu çok kafa karıştırıcı hale gelirse, "Başla"'yı tıklayın ve yeniden deneyin!
      aE3alternateB_authored_hint:
        aE4alternateB_a: '** iç içe döngü ** çalıştırdıktan sonra satırın başına geçmek için atlamaan gerekecek.'
        aE4alternateB_b: "Yeni sıraya başlamadan önce sanatçıyı aşağı taşımayı unutmayın! \nSanatçı aşağı taşımak ve onu doğru şekilde sağa baktırdığınızdanemin olun: \n- 90 derece dön \n- 20 piksel atla- \n 90 derece dön"
        aE4alternateB_c: İçice döngülerin bittiğinde 3 kere tekrar yapmış olmalısın.
        aE4alternateB_d: Kodunuzu çok kafa karıştırıcı hale gelirse, "Başla"'yı tıklayın ve yeniden deneyin!
      aE4_authored_hint:
        aE4_a: '** iç içe döngü ** çalıştırdıktan sonra satırın başına geçmek için atlamaan gerekecek.'
        aE4_b: "Yeni sıraya başlamadan önce sanatçıyı aşağı taşımayı unutmayın! \nSanatçı aşağı taşımak ve onu doğru şekilde sağa baktırdığınızdanemin olun: \n- 90 derece dön \n- 20 piksel atla- \n 90 derece dön"
        aE4_c: İçice döngülerin bittiğinde 3 kere tekrar yapmış olmalısın.
        aE4_d: Kodunuzu çok kafa karıştırıcı hale gelirse, "Başla"'yı tıklayın ve yeniden deneyin!
      aE5_authored_hint: [ ]
      aE6_authored_hint:
        aE6_a: |-
          Bir yarı çemberde 180 derece varsa ve her döngü 3 derece dönerse, yarım daire için kaç kere döngüyü çalıştırman gerekir?
          **180 ÷ 3 = ?**
      aE7_authored_hint:
        aE7_a: Önce alt yarım daireyi çiz sonra üst yarım daireyi çiz.
        aE7_b: Bu bulmacayı tamamlamak için 4 blok gerekir.
      aE8_authored_hint:
        aE8_a: "Bir kare çizmek içiN:\nÇizgi çizmelisin - \nKöşe dömüş yapmalısın.\nBu adımları 4 kez yinelemelisin."
      artistDebugVideo1_authored_hint:
        courseA_artist_loops7_a: Can't figure out where to put the loop? Try writing the code step-by-step and look for a pattern.
      artistFunctionsVideo1_authored_hint: [ ]
      artistLoopsK2_authored_hint:
        artistLoopsK2_a: Eğer döngünün 4 defadan fazla tekrarlamasını istiyorsan bloğun üstündeki sayıyı değiştirebilirsin.
      artistLoopsK2gradek_artist_loops3_authored_hint:
        artistLoopsK2_a: Eğer döngünün 4 defadan fazla tekrarlamasını istiyorsan bloğun üstündeki sayıyı değiştirebilirsin.
      artistLoopsK3_authored_hint:
        artistLoopsK3_a: Tekrarla bloğu hakkında öğrendiklerini kullan!
      artistLoopsK4_authored_hint:
        artistLoopsK4_a: Sıkıştın mı? Hangi bloğun yanlış olduğunu görmek için kod çalıştırmayı deneyin.
      artistLoopsK5_authored_hint:
        artistLoopsK5_a: Başlangıçtaki 4 blokta tekrarla bloğu içine girmeli.
      artistLoopsK6_authored_hint:
        artistLoopsK6_a: Hatayı görmek için kodu çalıştırmayı deneyin.
      artistLoopsK7_authored_hint:
        artistLoopsK7_a: Kullanman gereken tüm bloklar zaten çalışma alanında!
      artistLoopsK8_authored_hint:
        artistLoopsK8_a: Hatayı görmek için kodu çalıştırmayı deneyin.
      artistLoopsK9_authored_hint:
        artistLoopsK9_a: Bu meydan okuma dört döngü içerir, herbiri birbiri ardına kullanılır!
      artistLoopsKA_authored_hint:
        artistLoopsKA_a: İleri atla bloğı çizgi çizmeden ileri hareket etmek için kullanılır.
      artistLoopsKB_authored_hint:
        artistLoopsKB_a: Bu bulmacayı çözmek için döngü içinde 3 blok olmalıdır.
      artistLoopsKFP_authored_hint: [ ]
      courseA_artist_loops10_authored_hint:
        courseA_artist_loops10_a: İleri atla bloğı çizgi çizmeden ileri hareket etmek için kullanılır.
      courseA_artist_loops11_authored_hint:
        courseA_artist_loops11_a: There should be 2 blocks inside of your loop to solve this puzzle.
      courseA_artist_loops11_predict2_authored_hint: [ ]
      courseA_artist_loops12_authored_hint: [ ]
      courseA_artist_loops2_authored_hint:
        courseA_artist_loops2_a: Can't figure out how to draw a line?  Start attaching blocks to the `when run` block to see what happens.
      courseA_artist_loops3_authored_hint:
        courseA_artist_loops3_a: Is something not quite right?  Trace slowly through the program with your finger to see where it goes wrong.
      courseA_artist_loops4_authored_hint:
        courseA_artist_loops4_a: Eğer döngünün 4 defadan fazla tekrarlamasını istiyorsan bloğun üstündeki sayıyı değiştirebilirsin.
      courseA_artist_loops5_authored_hint:
        courseA_artist_loops5_a: Tekrarla bloğu hakkında öğrendiklerini kullan!
      courseA_artist_loops6_authored_hint:
        courseA_artist_loops6_a: Can't figure out how to make the hill?  Try playing with the blocks a bit to see what each one draws.
      courseA_artist_loops7_authored_hint:
        courseA_artist_loops7_a: Can't figure out where to put the loop? Try writing the code step-by-step and look for a pattern.
      courseA_artist_loops8_authored_hint:
        courseA_artist_loops8_a: Try running the code to see what has been written for you.
        courseA_artist_loops8_b: How would you loop the code that has been given to you?
        courseA_artist_loops8_c: "What does the code do?  \nWhat is it supposed to do?  \nWhat does that tell you?"
      courseA_artist_loops9_authored_hint:
        courseA_artist_loops9_a: 'You don''t have to delete everything!  Some of the code is good. Use it to build the rest of the stairs. '
      courseA_artist_loops_challenge1_authored_hint:
        courseA_artist_loops_challenge1_a: |+
          You can use loops like this to create the walls and the roof. Try repeating different blocks.
          
          
          
          ![](https://images.code.org/1581a2f599b501103064fc9864aa964d-image-1491863694560.png)
          
          Design your own or click the ![](https://images.code.org/53090194cea5dbf35ce9e35205156f5d-image-1491864793265.png) for some ideas!
        courseA_artist_loops_challenge1_b: "![](https://images.code.org/34f3bae38f77f07eaf455188c0b008e5-image-1491864823946.png)"
        courseA_artist_loops_challenge1_c: "![](https://images.code.org/24b208839971803f3f6cd6ae41da56df-image-1491864839734.png)"
        courseA_artist_loops_challenge1_d: "![](https://images.code.org/d3ccefffa0cc77bdd4a597cdb49fc85e-image-1491864847347.png)"
      courseA_artist_loops_challenge2_authored_hint:
        courseA_artist_loops_challenge2_a: 'Blocks like this: <xml>  <block type="simple_move_up_left"/></xml> will let your artist move at a slant!'
        courseA_artist_loops_challenge2_b: When you finish one bird house, `jump` to the next!
        courseA_artist_loops_challenge2_c: You will need a LOT of blocks inside the loop for this challenge.
      courseA_artist_loops_challenge3_authored_hint:
        harvey_tictactoe: Atla bloğu ile başka alanlara gidebilirsiniz.
      courseA_collector_loops10_authored_hint:
        courseA_collector_loops10_a: If you can't figure out where to put the loops, try writing the code out step-by-step and look for a pattern.
      courseA_collector_loops11_authored_hint:
        courseA_collector_loops11_a: If you can't figure out where to put the loops, try writing your code step-by-step and look for patterns.
      courseA_collector_loops11_predict2_authored_hint: [ ]
      courseA_collector_loops3_authored_hint:
        courseA_collector_loops3: Try using a `repeat` loop to do the job!
      courseA_collector_loops3_predict1_authored_hint: [ ]
      courseA_collector_loops4_authored_hint:
        courseA_collector_loops4_a: To change how far the adventurer goes, change the number of times that the loop runs.
        courseA_collector_loops4_b: Don't forget that the adventurer needs to walk down and collect the treasure after she finishes the `repeat` loop!
      courseA_collector_loops5_authored_hint:
        courseA_collector_loops5_a: If you can't figure out the answer right away, try using a piece of paper to figure out what arrows you will need and look for a pattern.
      courseA_collector_loops6_authored_hint:
        courseA_collector_loops6_a: Can't figure out what's wrong? Try running the code a couple of times to see what happens.
      courseA_collector_loops7_authored_hint:
        courseA_collector_loops7_a: If you can't figure out what comes next, try running the code to see where Laurel ends up.
      courseA_collector_loops8_authored_hint:
        courseA_collector_loops8_a: If you are having trouble figuring this puzzle out, try writing the moves down on a piece of paper and look for a pattern.
      courseA_collector_loops9_authored_hint:
        courseA_collector_loops9_a: 'If you can''t spot the best places to use loops, try coding it out step-by-step and look for a pattern. '
        courseA_collector_loops9_b: Does the code feel really long?  Try putting two of your `repeat` loops inside of another loop to make it much shorter!
      courseA_collector_loops_challenge1_authored_hint:
        courseA_collector_loops_challenge1_a: Try changing the numbers in each loop if something goes wrong.
        courseA_collector_loops_challenge1_b: You don't need to use a loop if you are only doing something one time.
        courseA_collector_loops_challenge1_c: There are 6 gems on the right side of the cave, but you only need to move and collect 5 times. Do you know why?
      courseA_collector_loops_challenge2_authored_hint:
        courseA_collector_loops_challenge2_b: |+
          Yalnızca bir tane kullanmanız gerekir! Bunu çözmek için [] (https://images.code.org/803e9ee8b5bc9311a26edf955cd3c03f-image-1491001702274.07.34 PM.png) .
        courseA_collector_loops_challenge2_a: |-
          Geri giden yoldaki bir saniye taşıyabilirsiniz zaman güneye geçmeden önce.  ! [] (https://images.code.org/88c28c76dbea70e20253083d22b5f5fd-image-1491001404225.01.21 PM.png)
      courseA_maze_seq1_authored_hint:
        courseA_maze_seq1_a: If you are having trouble getting the bird to move, make sure blocks are clicked in under the `when run` event.
        courseA_maze_seq1_b: The bird will need to move `W <--` three times to get to the pig.
      courseA_maze_seq10_authored_hint:
        courseA_maze_seq10_a: If you're having trouble, try writing down the steps on a piece of paper first.
        courseA_maze_seq10_b: You will need to go three different directions to solve this puzzle.
      courseA_maze_seq11_authored_hint:
        courseA_maze_seq11_a: Use 2 different arrow blocks to solve this puzzle!
      courseA_maze_seq12_authored_hint:
        courseA_maze_seq12_a: If the pig isn't moving far enough, try adding another block.
      courseA_maze_seq12_predict2_authored_hint: [ ]
      courseA_maze_seq13_authored_hint:
        courseA_maze_seq13_a: If the path you need is unclear, use your finger to trace your way from the bird to the pig.
      courseA_maze_seq2_authored_hint:
        courseA_maze_seq2_a: This program is missing one block. Can you figure out which one?
      courseA_maze_seq2_predict1_authored_hint: [ ]
      courseA_maze_seq3_authored_hint:
        courseA_maze_seq3_a: One of the blocks is moving the bird in the wrong direction. Can you figure out which one and replace it with the correct block?
      courseA_maze_seq4_authored_hint:
        courseA_maze_seq4_a: If you are having trouble, try to figure out what the correct path is and then remove the block that doesn't fit.
      courseA_maze_seq5_authored_hint:
        courseA_maze_seq5_a: Try writing down the steps on paper to find a solution!
      courseA_maze_seq6_authored_hint:
        courseA_maze_seq6_a: Your final code should have three movement blocks.
      courseA_maze_seq7_authored_hint:
        courseA_maze_seq7_a: There is 1 block that you need to add to move the bird to the pig.
        courseA_maze_seq7_b: If you can't figure out what to do, try drawing the puzzle on paper and use your finger to figure out which way to move.
      courseA_maze_seq8_authored_hint:
        courseA_maze_seq8_a: If you're stuck, try drawing the image on paper to see how the bird should move.
      courseA_maze_seq9_authored_hint:
        courseA_maze_seq9_a: Stuck? Try tracing the bird's path with your finger.
      courseA_maze_seq_challenge1_authored_hint:
        courseA_maze_seq_challenge1_a: ÇBazı yollar TNT (patlayıcı) ya çıkar. eğer çok ilerlerseniz.
      courseA_maze_seq_challenge2_authored_hint:
        courseA_maze_seq_challenge2_a: Boşlukları saymaya çalışın. Başladığınız yerdeki boşluğu saymayın!
      courseA_playLab_events2_authored_hint:
        courseA_playLab_events2_a: "Here is the block you should connect to the `when run` block: \n\n![](https://images.code.org/ae72d1270ad210cd00fae7e0dfb3549a-image-1478144412134.png)"
      courseA_playLab_events3_authored_hint:
        courseA_playLab_events3_a: 'drag this block out ![](https://images.code.org/b3d6215901969328333d6393f8101c5b-image-1478142333199.png) and connect it to ![](https://images.code.org/4f2130b2a3053695414a02c3d39ef864-image-1478143461271.png)'
      courseA_playLab_events4_authored_hint:
        courseA_playLab_events4_a: |-
          Here is the event block that you will need to get Jorge to move right:
          
          ![](https://images.code.org/cfc4b696b1ad5762ff40c1c8a17a194d-image-1478141370249.png)
        courseA_playLab_events4_b: |-
          Here is the block you should connect to the `when right` event:
          
          ![](https://images.code.org/e5c559cc1deef643c8b997d17ecb78e3-image-1478141726783.png)
      courseA_playLab_events5_authored_hint:
        courseA_playLab_events5_a: "Here are the event blocks that you will need to use to move Jorge up and down:\n\n![](https://images.code.org/cf9a6992f7b4619dfb592fb6905effbb-image-1478140906017.png)\nand \n![](https://images.code.org/bb2a117cef485e79119a63e5d027968e-image-1478140979742.png)"
      courseA_playLab_events6_authored_hint:
        courseA_playLab_events6_a: |-
          Here is the event block that you would use to have Jorge do something when clicked:
          
          ![](https://images.code.org/6e3a654378643fd0590307ec3a0e429c-image-1478140058859.png)
        courseA_playLab_events6_b: |-
          Here is the block you would use to change the background:
          
          ![](https://images.code.org/3f6d7a642b37c3abffe7b0de062ea076-image-1478140261440.png)
        courseA_playLab_events6_c: |-
          Here is the block you would use to play a random sound:
          
          ![](https://images.code.org/81a8ef4f64023039438199fef67bb56b-image-1478140125332.png)
      courseA_playlab_challengeTemplate_authored_hint: [ ]
      courseA_playlab_events_challenge1_authored_hint:
        courseB_playlab_events7_a: "Make the other animals move down when you press `▼`. \n<xml>\n  <block type=\"studio_whenArrow\" movable=\"false\">\n    <title name=\"VALUE\">down</title>\n  </block>\n</xml>"
        courseB_playlab_events7_b: |
          Change the speed of the animals by using this block:
          <xml>
          <block type="studio_setSpriteSpeed">
          <title name="SPRITE">0</title>
          <title name="VALUE">Studio.SpriteSpeed.NORMAL</title>
          </block></xml>
        courseB_playlab_events7_c: |-
          What will the everyone say when the race is over? Make them talk with this event:
          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">2</title>
          <next>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">2</title>
          <title name="VALUE">Woo hoo!</title>
          </block>
          </next>
          </block>
          </xml>
      courseB_artist_loops10_authored_hint: [ ]
      courseB_artist_loops2_authored_hint:
        courseB_artist_loops2_a: Eğer döngünün 4 defadan fazla tekrarlamasını istiyorsan bloğun üstündeki sayıyı değiştirebilirsin.
      courseB_artist_loops3_authored_hint:
        courseB_artist_loops3_a: Remember to use a `repeat` loop for better code!
      courseB_artist_loops4_authored_hint: [ ]
      courseB_artist_loops5_authored_hint:
        courseB_artist_loops5_a: Drag out a `repeat` loop, then put the other blocks inside of it. How many times do you need to repeat?
      courseB_artist_loops6_authored_hint: [ ]
      courseB_artist_loops7_authored_hint:
        courseB_artist_loops7_a: Bu meydan okuma dört döngü içerir, herbiri birbiri ardına kullanılır!
        courseB_artist_loops7_b: |-
          Notice that every loop makes a stair pattern that travels in a different direction.
          
          ![](https://images.code.org/7d08d5514766c5c15074e90731991505-image-1466705649513.gif)
        courseB_artist_loops7_c: "The loops should do this:\n- Loop 1\n  - Right\n  - Down\n  \n- Loop 2\n  - Right\n  - Up\n\n- Loop 3\n  - Left\n  - Up\n\n- Loop 4\n  - Left\n  - Down"
      courseB_artist_loops8_authored_hint:
        courseB_artist_loops8_a: How many times should you repeat the pattern to make the ladder?
      courseB_artist_loops8_predict1_authored_hint: [ ]
      courseB_artist_loops9_authored_hint: [ ]
      courseB_artist_loops_challenge1_authored_hint:
        courseB_artist_loops_challenge1_a: 'Blocks like this: <xml>  <block type="simple_move_up_left"/></xml> will let your artist move at a slant!'
        courseB_artist_loops_challenge1_b: When you finish one of the dice, `jump` to the next!
        courseB_artist_loops_challenge1_c: 'You will need to `move` or `jump` over some of the same lines twice. '
      courseB_artist_loops_challenge2_authored_hint:
        harvey_tictactoe: Atla bloğu ile başka alanlara gidebilirsiniz.
      courseB_collector_loops10_authored_hint:
        courseB_collector_loops10_a: You'll need three `repeat` loops to solve this puzzle.
      courseB_collector_loops3_authored_hint:
        courseB_collector_prog3_a: Try using a `repeat` block to collect your treasure.
      courseB_collector_loops3_predict1_authored_hint:
        courseB_collector_prog3_a: Try using a `repeat` block to collect your gold.
      courseB_collector_loops4_authored_hint:
        courseB_collector_loops4_a: Is something not right? Try using the step button to figure out where things go wrong.
      courseB_collector_loops5_authored_hint:
        courseB_collector_loops5_a: Try using more than one loop to get the job done.
      courseB_collector_loops6_authored_hint:
        courseB_collector_loops6_a: Can't figure out where things start going wrong? Use the "Step" button to run through your program one block at a time.
      courseB_collector_loops7_authored_hint:
        courseB_collector_loops7_a: If you are having a hard time with the puzzle, try drawing it on paper to help you figure it out.
      courseB_collector_loops8_authored_hint:
        courseB_collector_loops8_challenge_a: 'If you can''t figure out where to put the repeat loops, program it out step-by-step and look for a pattern. '
        courseB_collector_loops8_challenge_b: Does the code feel a little long?  You can make it much shorter by moving two of your `repeat` loops inside of another loop.
      courseB_collector_loops9_authored_hint:
        courseB_collector_loops9_a: |
          Does this seem too hard?  Break it up into 4 little problems to make it feel easier.
      courseB_collector_loops_challenge1_authored_hint:
        courseB_collector_loops_challenge1_b: |+
          Yalnızca bir tane kullanmanız gerekir! Bunu çözmek için [] (https://images.code.org/803e9ee8b5bc9311a26edf955cd3c03f-image-1491001702274.07.34 PM.png) .
        courseB_collector_loops_challenge1_a: |
          You can move back over the path a second time before moving east.
      courseB_collector_loops_challenge2_authored_hint:
        courseB_collector_loops_challenge2_a: Try changing the numbers in each loop if something goes wrong.
        courseB_collector_loops_challenge2_b: If you miss any treasure, you might need to move back west one extra space.
        courseB_collector_loops_challenge2_c: Don't forget to use a loop to collect the final pile of treasure!
      courseB_collector_loops_challenge`_authored_hint:
        courseA_collector_loops_challenge2_b: |+
          Yalnızca bir tane kullanmanız gerekir! Bunu çözmek için [] (https://images.code.org/803e9ee8b5bc9311a26edf955cd3c03f-image-1491001702274.07.34 PM.png) .
        courseA_collector_loops_challenge2_a: |-
          Geri giden yoldaki bir saniye taşıyabilirsiniz zaman güneye geçmeden önce.  ! [] (https://images.code.org/88c28c76dbea70e20253083d22b5f5fd-image-1491001404225.01.21 PM.png)
      courseB_collector_prog3_authored_hint:
        courseB_collector_prog3_a: Try using a `repeat` block to collect your gold.
      courseB_maze_seq1_authored_hint:
        courseB_maze_seq1_a: |-
          Bunlardan üç sürükleyin vardır ' ok dışarı ve domuz için senin kuş almak için 'ne zaman koşmak' blok bağlayın.  <xml><block type="when_run" deletable="false" movable="false"> <next><block type="maze_moveSouth"> <next><block type="maze_moveSouth"> <next><block type="maze_moveSouth"></block></next></block></next></block></next></block></xml>
      courseB_maze_seq10_authored_hint:
        courseB_maze_seq10_a: If you're having trouble, try writing down the steps on a piece of paper first.
      courseB_maze_seq10_predict1_authored_hint: [ ]
      courseB_maze_seq11_authored_hint:
        courseB_maze_seq11_a: If you're having trouble, try writing down the steps on a piece of paper first.
      courseB_maze_seq1_predict1_authored_hint: [ ]
      courseB_maze_seq2_authored_hint:
        courseB_maze_seq2_a: This program is missing one block. Can you figure out which one?
      courseB_maze_seq3_authored_hint:
        courseB_maze_seq3_a: One of the blocks is moving the bird in the wrong direction. Can you figure out which one and replace it with the correct block?
      courseB_maze_seq4_authored_hint:
        courseB_maze_seq4_a: Try adding one instruction at a time until you get to the pig.
      courseB_maze_seq6_authored_hint:
        courseB_maze_seq6_a: Your final code should have three movement blocks.
      courseB_maze_seq7_authored_hint:
        courseB_maze_seq7_a: There is 1 block that you need to add to move the bird to the pig.
      courseB_maze_seq8_authored_hint:
        courseB_maze_seq8_a: If you're stuck, try adding one block at a time until you solve the puzzle.
      courseB_maze_seq9_authored_hint:
        courseB_maze_seq9_a: If you're having trouble, try writing down the steps on a piece of paper first.
      courseB_maze_seqCold_authored_hint:
        courseB_maze_seqCold_a: Stuck? Try tracing the bird's path with your finger.
        courseB_maze_seqCold_b: 'The extra blocks need to be added before the last ![](https://images.code.org/145dfc20c086bc8fc265de47f3cfe4b0-image-1467848177684.35.51 PM.png )'
      courseB_maze_seqOld_authored_hint:
        courseB_maze_seqOld_a: If you're having trouble, try writing down the steps on a piece of paper first.
      courseB_playlab_events2_authored_hint:
        courseB_playlab_events2_a: |-
          This is the block to have Daisy say something:
          
          ![](https://images.code.org/6d8944bb38eac46c02a601660e8a3562-image-1475625777800.02.48.png)
      courseB_playlab_events3_authored_hint:
        courseB_playlab_events3_a: |-
          This is the block you should use to add the event:
          
          ![](https://images.code.org/5ccb483d5a5ccc80692716728d7a0e6e-image-1475698549442.03.08.png)
        courseB_playlab_events3_b: |-
          This is the block you need to switch Daisy's mood:
          
          ![](https://images.code.org/209bad7062fa2821a7dcf000072ec7bf-image-1475698952158.22.11.png)
      courseB_playlab_events4_authored_hint:
        courseB_playlab_events4_a: |-
          This is the block that makes the knight move left.
          
          ![](https://images.code.org/f6b9c780dc6ff97bad485553e0aced26-image-1475692773359.38.51.png)
      courseB_playlab_events5_authored_hint:
        courseB_playlab_events5_a: "This is the event block that controls the right arrow: \n\n![](https://images.code.org/d14e2a6cdf78c4ae7d2010113ea8d321-image-1475695765628.29.00.png)"
        courseB_playlab_events5_b: "This is the block that makes the knight run away. \n\n![](https://images.code.org/2e4f0701a371a9932a37853294a170fe-image-1475695777801.29.09.png)"
      courseB_playlab_events6_authored_hint:
        courseB_playlab_events6_a: |-
          You will need these event blocks:
          
          ![](https://images.code.org/02dcc4efc752dfa4187d0b1268427100-image-1475707266348.40.55.png)
      courseB_playlab_events7_authored_hint:
        courseB_playlab_events7_a: |-
          This is the event block that you will need:
          
          ![](https://images.code.org/2ed42b3a3108c6affdfc866de57f2eec-image-1475624565390.42.18.png)
        courseB_playlab_events7_b: |-
          This is the block you need to play a sound.
          
          ![](https://images.code.org/58e9b9a146a4ca3a8eee25845110b805-image-1475624550269.42.00.png)
        courseB_playlab_events7_c: |-
          This is the block you need to make the knight vanish:
          
          ![](https://images.code.org/f468611cbe51e1cb35531334f625395a-image-1475624478204.41.02.png)
      courseB_playlab_eventsTemplate_authored_hint: [ ]
      courseB_playlab_eventsToolbox_authored_hint:
        courseB_playlab_events7_a: |-
          This is the event block that you will need:
          
          ![](https://images.code.org/2ed42b3a3108c6affdfc866de57f2eec-image-1475624565390.42.18.png)
        courseB_playlab_events7_b: |-
          This is the block you need to play a sound.
          
          ![](https://images.code.org/58e9b9a146a4ca3a8eee25845110b805-image-1475624550269.42.00.png)
        courseB_playlab_events7_c: |-
          This is the block you need to make the knight vanish:
          
          ![](https://images.code.org/f468611cbe51e1cb35531334f625395a-image-1475624478204.41.02.png)
      courseB_playlab_events_challenge1_authored_hint:
        courseB_playlab_events7_a: |-
          This is the event block that you will need:
          
          ![](https://images.code.org/2ed42b3a3108c6affdfc866de57f2eec-image-1475624565390.42.18.png)
        courseB_playlab_events7_b: |-
          This is the block you need to play a sound.
          
          ![](https://images.code.org/58e9b9a146a4ca3a8eee25845110b805-image-1475624550269.42.00.png)
        courseB_playlab_events7_c: |-
          This is the block you need to make the knight vanish:
          
          ![](https://images.code.org/f468611cbe51e1cb35531334f625395a-image-1475624478204.41.02.png)
      courseC_PlayLab_events3_authored_hint:
        courseC_PlayLab_events3_a: You only need to move Jorge to the right by about 25 pixels to solve this puzzle.
      courseC_PlayLab_events4_authored_hint:
        courseC_PlayLab_events4_b: Jorge needs to move right 100 pixels to reach the cat.
        courseC_PlayLab_events4_a: You will need to attach a block to the `when actor touches` event to solve this puzzle.
      courseC_PlayLab_events5_authored_hint:
        courseC_PlayLab_events5_a: You will need to click the dropdown menu in the `actor say` block to find the text "What's new?"
      courseC_PlayLab_events7_authored_hint:
        courseC_PlayLab_events7_a: 'Use both the `move actor 2 up 400 pixels` block and the `move actor 2 down 400 pixels` block inside the `repeat forever` loop to solve this puzzle. '
      courseC_PlayLab_events8_authored_hint:
        courseC_PlayLab_events8_a: You will need to connect blocks to the `when actor touches` block to make this happen correctly.
        courseC_PlayLab_events8_b: The `actor say` and `play sound` blocks in the toolbox should help you out!
      courseC_PlayLab_events9_authored_hint:
        courseC_PlayLab_events9_a: The `score point` block will help you to solve this puzzle.
      courseC_PlayLab_eventsA_authored_hint:
        courseC_PlayLab_eventsA_a: Use the `set background` block and the `set actor to a ____ speed` block to solve this puzzle.
      courseC_PlayLab_eventsFP_authored_hint:
        idea1: |-
          *Need an idea?*
          
          **Who's there?** Make characters appear with random images, so no one knows who's showing up next.
          
          ![](https://images.code.org/a56e03479801995d93ad5a4e4384a79e-image-1475340154498.gif)
        idea2: |-
          *Need an idea?*
          
          **Going on an Adventure** - Change the background, then have the characters talk about where they are now.
          
          ![](https://images.code.org/010c4d919f841d6049caf9211ab65ccc-image-1475340583052.gif)
        idea3: |-
          *Need an idea?*
          
          **Pinball** - Make one character move using the arrow keys (use `when up arrow`, `when down arrow` blocks), then play random sounds when it collides with other characters on the screen.
      courseC_artist_prog1_authored_hint: [ ]
      courseC_artist_prog2_authored_hint:
        courseC_artist_prog2_a: Eğer blok bana sahip olduğu için 'ileri 100 piksel taşır' kullanıyorsanız, otomatik olarak bir çizgi çizmek.
        courseC_artist_prog2_b: Köşeyi çevirirken sorun mu yaşıyorsunuz? `Turn right 90 degrees` blokunu kullanın.
      courseC_artist_prog3_authored_hint:
        courseC_artist_prog3_a: |-
          To create this window, just draw a square with 100 pixel sides.
          
          - move forward
          - turn
          - move forward
          - turn
          - move forward
          - turn
          - move forward
      courseC_artist_prog4_authored_hint:
        courseC_artist_prog4_a: To finish the rocket, just draw the triangle on top!
      courseC_artist_prog5_authored_hint:
        courseC_artist_prog5_a: Use the "Step" button to run your code line by line to see where things go wrong.
      courseC_artist_prog6_authored_hint:
        courseC_artist_prog6_a: The artist is already facing the correct way to draw his first line.
        courseC_artist_prog6_b: This diamond is really just a square that's standing on its corner.
        courseC_artist_prog6_c: Since this diamond is also a square, be sure to turn 90 degrees at the corners.
      courseC_artist_prog6_predict1_authored_hint: [ ]
      courseC_artist_prog7_authored_hint:
        courseC_artist_prog7_a: Every angle is either 45 or 90 degrees.
        courseC_artist_prog7_b: "Does it work at the first step?  \nHow about the second?  \nWhere does it go wrong?"
      courseC_artist_prog8_authored_hint:
        courseC_artist_prog7_a: The exterior angles on this triangle are 120 degrees each.
      courseC_collector_prog2_authored_hint:
        courseC_collector_prog2_a: You can use four `move forward` blocks or use the `repeat 4 times` block to make your program shorter.
      courseC_collector_prog3_authored_hint:
        courseC_collector_prog3_a: The program will only run the blocks that are connected to the `when run` block.
        courseC_collector_prog3_b: Try using the "Step" button to run your code one line at a time.  Do you see where the code goes wrong?
      courseC_collector_prog5_authored_hint:
        courseC_collector_prog5_a: "Where does this program go wrong?\n\n- Does it work at the first step?\n- Does it work at the second step? \n- Where do things go wrong?"
        courseC_collector_prog5_b: If you fixed one bug and the program still doesn't work, use the steps above to find more bugs.
      courseC_collector_prog6_authored_hint:
        courseC_collector_prog6_a: "Can you figure out what is going wrong?  \n\nTry using the \"Step\" button to find errors by running your code line by line."
      courseC_collector_prog7_authored_hint:
        courseC_collector_prog7_a: 'There is already a lot of great code in the workspace.  You don''t need to delete any of it to solve this puzzle.  '
        courseC_collector_prog7_b: Don't see the block you need to get the adventurer moving in the right direction?  Pull one from the toolbox.
      courseC_collector_prog9_authored_hint:
        courseC_collector_prog9_a: If you're having a hard time, try saying the steps you need to take outloud first.
      courseC_collector_progA_authored_hint:
        courseC_collector_progA_a: Try using the "Step" button to go through your code line by line.
      courseC_maze_debugging1_authored_hint:
        courseC_maze_debugging1_a: |-
          - Does everything work after the first step?
          - Does it still work after the second?
          - Where does it go wrong?
      courseC_maze_debugging2_authored_hint:
        courseC_maze_debugging2_a: There is a lot of valuable code in the workspace.  Don't just delete it all and start over!
        courseC_maze_debugging2_b: |-
          - Does everything work after the first step?
          - Does it still work after the second?
          - Where does it go wrong?
      courseC_maze_debugging3_authored_hint:
        courseC_maze_debugging3_a: |-
          To remove a block, pull the other blocks aside to get to the one you're trying to delete, then drag that one off to the trash.
          
          Don't forget to put your other blocks back!
          
          ![](https://images.code.org/bbafa5a100505b2b99a3f43ad3195471-image-1479933232821.gif)
      courseC_maze_debugging4_authored_hint:
        courseC_maze_debugging4_a: Use the "Step" button to run through the instructions one at a time.  Does that help you find the line where things go wrong?
      courseC_maze_debugging5_authored_hint:
        courseC_maze_debugging5_a: "There are lots of helpful blocks in the workspace already.  Don't delete them all! \n\nUse the \"Step\" button to go through and figure out where the code goes wrong."
        courseC_maze_debugging5_b: Try saying what Skrat should do out loud.  Is it the same as the code in the workspace?  What goes wrong?
      courseC_maze_debugging6_authored_hint:
        courseC_maze_debugging6_a: |-
          - What is Skrat supposed to do?
          - What does Skrat do?
          - What does that tell you?
        courseC_maze_debugging6_b: |-
          Once you've found and fixed the first bug, go through the debugging process again to find the second one.
          
          Repeat the process until the program works!
      courseC_maze_debugging7_authored_hint:
        courseC_maze_debugging7_a: |-
          - Does everything work at the first step?
          - How about the second step?
          - Where does it go wrong?
        courseC_maze_debugging7_b: Don't forget to use the "Step" button to run the program line by line!
        courseC_maze_debugging7_c: |-
          After you find and fix the first bug, make sure to use the debugging process again to find the next one.
          
          Repeat the debugging process until the program works!
      courseC_maze_debugging8_authored_hint:
        courseC_maze_debugging8_a: |-
          - What is Skrat supposed to do?
          - What does Skrat do?
          - What does that tell you?
      courseC_maze_debugging8_predict1_authored_hint: [ ]
      courseC_maze_debugging9_authored_hint:
        courseC_maze_debugging9_a: |-
          - What is Skrat supposed to do?
          - What does Skrat do?
          - What does that tell you?
      courseC_maze_loops10_authored_hint: [ ]
      courseC_maze_loops10_predict2_authored_hint: [ ]
      courseC_maze_loops11_authored_hint: [ ]
      courseC_maze_loops2_authored_hint:
        courseC_maze_loops2_a: You can solve this puzzle with just three blocks, including `when run`.
        courseC_maze_loops2_b: Try putting the `move forward` block inside of a `repeat` block to create a loop.
        courseC_maze_loops2_c: You need to repeat the `move forward` command 5 times to solve this puzzle.
      courseC_maze_loops2_predict1_authored_hint:
        courseC_maze_loops2_a: You can solve this puzzle with just three blocks, including `when run`.
        courseC_maze_loops2_b: Try putting the `move forward` block inside of a `repeat` block to create a loop.
        courseC_maze_loops2_c: You need to repeat the `move forward` command 5 times to solve this puzzle.
      courseC_maze_loops3_authored_hint:
        courseC_maze_loops3_a: This puzzle is very similar to the last one.
        courseC_maze_loops3_b: Use a `repeat 5 times` block to create the loop.
      courseC_maze_loops4_authored_hint:
        courseC_maze_loops4_a: Not all command blocks should be repeated.
        courseC_maze_loops4_b: Use two `repeat` blocks set to different numbers.
        courseC_maze_loops4_c: "`Turn right` once between the two loops."
      courseC_maze_loops5_authored_hint:
        courseC_maze_loops5_a: The best solution uses two `move forward` commands and one loop.
      courseC_maze_loops6_authored_hint:
        courseC_maze_loops6_a: If the pattern is hard to see, try coding it all out first and see what repeats over and over before you put the loops in.
        courseC_maze_loops6_b: "Birden fazla bloğu tekrarla bloğu içine koymak için döngüyü çalışma alanına sürükle sonra blokları sürükle ve blokları içine sürükle!"
      courseC_maze_loops7_authored_hint:
        courseC_maze_loops7_a: Tekrar eden kısımları görmek zor ise, her şeyi kodlamayı deneyin ve tekrar eden şeyleri döngüye koyun.
      courseC_maze_loops8_authored_hint:
        courseC_puppy_loops8courseC_maze_loops8_a: Try thinking about this problem in small parts. Take your time. You don't need to solve it on the first try!
        courseC_puppy_loops8courseC_maze_loops8_b: The first half of this path is similar to the stairs from the last puzzle, but it goes in a different direction.
        courseC_puppy_loops8courseC_maze_loops8_c: "There are different ways to solve this. \n\nYou will want to use at least two loops, and repeat a set of actions in the first one, then a single `move forward` in the other."
      courseC_maze_loops9_authored_hint:
        courseC_maze_loops9_1: 'If you''re having trouble finding where the code should repeat, try writing it down on a piece of paper and looking for a pattern. '
      courseC_maze_programming1_authored_hint:
        courseC_maze_programming1_0: If the bird isn't getting to the pig, make sure all three of the blocks have been fully clicked together, then click "Run" again.
      courseC_maze_programming2_authored_hint:
        courseC_maze_programming2_a: To use a `move forward` block, drag it from the toolbox out into the workspace and connect it to the `when run` block.
      courseC_maze_programming3_authored_hint:
        courseC_maze_programming3_a: "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\nTo delete a block from the middle of your code, drag all of the blocks underneath it away to the right and let them sit in the workspace for a while.  \n\nClick on the block you want to delete, and drag it back to the toolbox.\n\nFinally, put your other blocks back in place where they belong.\n"
      courseC_maze_programming4_authored_hint:
        courseC_maze_programming4_a: You can turn right or left from the bird's point of view. If you are facing right, turning right will make you point downwards.
        courseC_maze_programming4_b: To follow the path, move forward and turn one way, then move again and turn the opposite way. Move forward one more time to reach the pig.
      courseC_maze_programming5_authored_hint:
        courseC_maze_programming5_a: Try using the "Step" button to run your code line by line. Can you figure out what you need to do next?
      courseC_maze_programming6_authored_hint:
        courseC_maze_programming6_a: Bu bulmacayı çözmek için iki yol vardır!
        courseC_maze_programming6_b: Follow your finger from the bird to the pig, which steps did you take?
      courseC_maze_programming7_authored_hint:
        courseC_maze_programming7_a: Don't forget to use the "Step" button to go through block by block and look for errors.
      courseC_maze_programming8_authored_hint: [ ]
      courseC_maze_programming8_predict1_authored_hint: [ ]
      courseC_maze_programming9_authored_hint: [ ]
      courseC_puppy_loops10_authored_hint:
        courseC_puppy_loops9_1: I need to move two or three time between each turn.
      courseC_puppy_loops11_authored_hint: [ ]
      courseC_puppy_loops8_authored_hint:
        2-3_Maze_Loops_17_a: Try thinking about this problem in small parts. Take your time. You don't need to solve it on the first try!
        2-3_Maze_Loops_17_b: The first half of this path is similar to the stair step from the last puzzle, but it goes a different direction.
        courseC_puppy_loops8_c: There are different ways to solve this. You will want to use at least two loops, and repeat either a set of actions or a single movement.
      courseC_puppy_loops8courseC_maze_loops8_authored_hint:
        courseC_puppy_loops8courseC_maze_loops8_a: Try thinking about this problem in small parts. Take your time. You don't need to solve it on the first try!
        courseC_puppy_loops8courseC_maze_loops8_b: The first half of this path is similar to the stairs from the last puzzle, but it goes in a different direction.
        courseC_puppy_loops8courseC_maze_loops8_c: "There are different ways to solve this. \n\nYou will want to use at least two loops, and repeat a set of actions in the first one, then a single `move forward` in the other."
      courseC_puppy_loops9_authored_hint:
        courseC_puppy_loops9_1: If you repeat the first few actions, you can get me to the pig with just four more blocks!
      courseD_artist_functions10_authored_hint:
        courseD_artist_functions10_b: This drawing is a lot like the last one, except the function draws a different kind of line.
        courseD_artist_functions10_a: To get around using multiple `move forward` blocks, create a `draw hexagon` function and call that multiple times.
      courseD_artist_functions2_authored_hint:
        courseD_artist_functions2_a: |-
          Programınız: -Fonksiyon kullanmalıdır. - 
          ileri 100 + 75 piksel ilerlemelidir- 
          Fonksiyon kullanmalıdır
      courseD_artist_functions3_authored_hint:
        courseD_artist_functions3_a: |-
          To solve this puzzle, you just need to add a  loop that repeats the starter code 8 times.
          
          If you can't remember what the starter code was, click "start over" in the upper right corner of the workspace.
      courseD_artist_functions4_authored_hint:
        courseD_artist_functions4_a: Try using a function!
      courseD_artist_functions5_authored_hint:
        courseD_artist_functions5_a: Don't give up!  Remember what you have been learning.
        courseD_artist_functions5_b: Functions make it easy to call saved code at any time, not just from inside a loop!
      courseD_artist_functions6_authored_hint:
        grade4_artist_functions_windows0_a: Focus only on making one window for now.  We'll create a function for it in the next puzzle.
        grade4_artist_functions_windows0_b: Try using nested loops, where the inner loop makes the square and the outer loop rotates the square four times.
      courseD_artist_functions7_authored_hint:
        courseD_artist_functions7_a: Try creating your function first then adding in windows one at a time.
        courseD_artist_functions7_b: You shouldn't need to add any extra repeat loops.  Just jump the artist 100 pixels forward for each top window, and 150 pixels down to get the bottom windows.
      courseD_artist_functions8_authored_hint:
        courseD_artist_functions8_a: |-
          Start by making a function for a square, then try making a function for a line of squares.
          
          How would you use the `draw a line of squares` function to make this image?
        courseD_artist_functions8_b: After your first line of squares, you need to move the artist down and back before you start your second line of squares.
        courseD_artist_functions8_c: You should move the artist back a different number of pixels for even lines than for odd ones.
      courseD_artist_functions9_authored_hint:
        courseD_artist_functions9_a: To get around the need to have multiple `move forward` blocks, create a `draw triangle` function and call that multiple times.
        courseD_artist_functions9_b: This drawing is made by creating a line of triangles and turning either 60 or 120 degrees after each time you draw the triangle line.
      courseD_artist_nestedLoops1_authored_hint:
        courseD_artist_nestedLoops1_a: The easiest way to draw this is to move forward and use right turns.
      courseD_artist_nestedLoops10_authored_hint:
        courseD_artist_nestedLoops10_a: To start this pattern, reuse the code from the first half of the last puzzle.
        courseD_artist_nestedLoops10_c: Remember, each square has a side length of 50 pixels.
        courseD_artist_nestedLoops10_b: Make sure the outer loop of the code is set to run 7 times and remove the outer turn.
      courseD_artist_nestedLoops1a_authored_hint:
        courseD_artist_nestedLoops1a_a: 'You will need to draw a total of 6 triangles, each rotated 60 degrees.  '
      courseD_artist_nestedLoops2_authored_hint:
        courseD_artist_nestedLoops2_a: Nest your loops by surrounding your triangle code with another `repeat` loop.
      courseD_artist_nestedLoops3_authored_hint:
        courseD_artist_nestedLoops3_a: "İleri atla bloğu ile bir karenin üstünden diğerine başlayacağın noktaya gel.\neğer karelerin 20 piksel yüksekliğinde ise ve arada 20 piksel var ise ne kadar atlaman gerekir?"
        courseD_artist_nestedLoops3_b: 'Don''t forget to use a nested loop to solve this puzzle quickly. '
      courseD_artist_nestedLoops4_authored_hint:
        courseD_artist_nestedLoops4_a: |-
          To make a circle:
          - Repeat 360 times
          - Move forward 1 pixel
          - Turn left 1 degree
        courseD_artist_nestedLoops4_b: Don't forget to jump forward by 50 pixels between circles.
        courseD_artist_nestedLoops4_c: Use a nested loop to draw your circles 4 times.
      courseD_artist_nestedLoops5_authored_hint:
        courseD_artist_nestedLoops5_a: |-
          To do this easily:
          
          - repeat 4 times
          - make a cirlce
          - jump forward 50 pixels
          - turn right 90 degrees
      courseD_artist_nestedLoops6_authored_hint:
        courseD_artist_nestedLoops6_a: You'll need to repeat your outer loop 6 times now, instead of only 4.
        courseD_artist_nestedLoops6_b: 'Now that you''re breaking 360 degrees into six pieces instead of only four, you will only need to turn 60 degrees between circles. '
      courseD_artist_nestedLoops7_authored_hint:
        courseD_artist_nestedLoops7_a: |-
          Use a nested loop, where the inner loop is the code for a square.
          
          - repeat 6 times
          - make square
          - jump forward by 50 pixels
          - turn 60 degrees
      courseD_artist_nestedLoops8_authored_hint:
        courseD_artist_nestedLoops8_d: To have 8 hexagons in your drawing, you'll need to turn 45 degrees between each of them.
        courseD_artist_nestedLoops8_a: If you're stuck, start by looking at the last puzzle, then change the things that are different.
      courseD_artist_nestedLoops9_authored_hint:
        courseD_artist_nestedLoops9_a: Start by using a nested loop like you had before, but this time, make it with squares.
        courseD_artist_nestedLoops9_b: Add a second set of nested loops to the end of the first set, but this time use triangles.
      courseD_artist_nestedLoops9_predict1_authored_hint:
        courseD_artist_nestedLoops9_a: Start by using a nested loop like you had before, but this time, make it with squares.
        courseD_artist_nestedLoops9_b: Add a second set of nested loops to the end of the first set, but this time use triangles.
      courseD_artist_nestedLoopsFP_authored_hint:
        courseD_artist_nestedLoopsFP_a: |-
          <img src="https://images.code.org/9257cbf61f238f5a749a949059731934-image-1478732674615.02.25.png" width="200px"/>
          
          This image was made using a single nested loop that repeats a hexagon (with 50px sides) 15 times using a 48 degree turn.
        courseD_artist_nestedLoopsFP_b: |
          <img src="https://images.code.org/31a85d4e5be5209240195d34b17a177b-image-1478732674613.32.53.png" width="200px"/>
          
          This image was made using similar code to other levels in this series, but with circles (repeat 360 times: move forward 1, turn 1 degree).
        courseD_artist_nestedLoopsFP_c: |-
          <img src="https://images.code.org/f654f1512860c6c8cf6795c961a8959c-image-1478732674616.02.58.png" width="200px"/>
          
          This image was made using a single nested loop that repeats a pentagon (with 50px sides) 15 times using a 48 degree turn.
      courseD_artist_nestedLoopsPre1_authored_hint: [ ]
      courseD_artist_ramp11_authored_hint:
        courseD_artist_ramp11a: Kenar çizmek içim 100 piksel ilerle bloğunu kullan ve 100 yerine 200 gir.
        courseD_artist_ramp11b: |-
          4 tarafı çizmek için bir döngü içinde 'ileri 100 piksel' bloğunu döngü içine yerleştirin ve 4 kez çizmek için ayarlandığından emin olun. Daha sonra dönmeyi unutma!
      courseD_artist_ramp12_authored_hint:
        courseD_artist_ramp12_a: Önce kare sonra üçgen çizebilirsin yada tam tersi sırada!
      courseD_bee_conditionals1_authored_hint:
        courseD_bee_conditionals1_a: You will need to use an `if` block to check to see if there is a flower beneath the cloud before you try to get nectar.
      courseD_bee_conditionals1_predict1_authored_hint:
        courseD_bee_conditionals1_a: You will need to use an `if` block to check to see if there is a flower beneath the cloud before you try to get nectar.
      courseD_bee_conditionals2_authored_hint:
        courseD_bee_conditionals2_a: Sometimes a flower will be there, sometimes it won't.  If you want your code to run in both cases, make sure to use an `if` statement.
      courseD_bee_conditionals3_authored_hint:
        courseD_bee_conditionals3_a: Be sure to use an `if` statement to check each space to see if it has either a flower or nothing.
      courseD_bee_conditionals4_authored_hint:
        courseD_bee_conditionals4_a: You can still treat every space as if there is a cloud over it, even though you can see the whole path.
        courseD_bee_conditionals4_b: 'Use an `if` statement inside your loop to check each space. '
      courseD_bee_conditionals6_authored_hint:
        courseD_bee_conditionals6_a: Make sure to use an `if` statement to check for honeycomb beneath each cloud.
      courseD_bee_conditionals7_authored_hint:
        courseD_bee_conditionals7_a: "**Remember:** This puzzle changes each time it's run.  \n\nYou'll want to use a conditional block (`if/else`) to solve the challenge."
      courseD_bee_conditionals7_predict2_authored_hint:
        courseD_bee_conditionals7_a: "**Remember:** This puzzle changes each time it's run.  \n\nYou'll want to use a conditional block (`if/else`) to solve the challenge."
      courseD_bee_conditionals8_authored_hint:
        courseD_bee_conditionals8_a: "** Dikkat: ** Bu bulmaca her çalıştırdığınızda değişir.   \n Bir koşullu blok kullanmak isteyeceksiniz ('eğer' veya ' Eğer/Değilse')."
        courseD_bee_conditionals8_b: |-
          This puzzle is tricky, because you can't check blank squares, nectar, *and* honey with just one single conditional.
          
          Only check for nectar and honey at the end of your path.
      courseD_bee_conditionals9_authored_hint:
        courseD_bee_conditionals9_a: In this puzzle, you know that each square has either a flower or a honeycomb.  That means you can repeat your `if/else` conditional at each square.
      courseD_bee_debugging1_authored_hint:
        courseD_bee_debugging1_a: |-
          Use the "Step" button to see if everything is right at the first step.
          
          How about the second?
          
          Where does it go wrong?
        courseD_bee_debugging1_b: Do you see any patterns that could be made more simple using a `repeat` loop?
      courseD_bee_debugging2_authored_hint:
        courseD_bee_debugging2_a: |-
          Use the "Step" button to see if everything is right at the first step.
          
          How about the second?
          
          Where does it go wrong?
        courseD_bee_debugging2_b: Do you see a pattern?  Try using nested loops to solve this puzzle.
      courseD_bee_debugging3_authored_hint:
        courseD_bee_debugging3_a: Is there any place where the bee does something that doesn't make sense? What happens when you change those blocks?
        courseD_bee_debugging3_b: Try simplifying the code using nested loops.
      courseD_bee_debugging4_authored_hint:
        courseD_bee_debugging4_a: "Try using the debugging process a couple of times in a row. \n\nWhat causes the first problem?\n\nOnce that problem is fixed, what goes wrong?"
        courseD_bee_debugging4_b: "If you're having a hard time figuring out how to make the stair step pattern, try tracing it with your finger and saying the commands out loud. \n\nDon't forget to point out the direction of the turns!"
      courseD_bee_debugging5_authored_hint:
        courseD_bee_debugging5_a: |-
          Start by looking at just the first loop.
          
          What does it do?
          
          What is it supposed to do?
          
          What does that tell you?
        courseD_bee_debugging5_b: Once you have the first loop the way you want it, what is left over in your code?
        courseD_bee_debugging5_c: |-
          Try wrapping the leftover loop around the rest of your completed code.  Does is work now?
          
          If not, what is still going wrong?
      courseD_bee_debugging6_authored_hint:
        courseD_bee_debugging6_a: |-
          Try running through the code using the "Step" button.  Is everything good at the first step?
          
          How about the second?
          
          Where do things go wrong?
        courseD_bee_debugging6_b: It looks like all of the right steps are here, you just need more of them.  How can you repeat the `get nectar` and `make honey` actions multiple times?
      courseD_bee_debugging7_authored_hint:
        courseD_bee_debugging7_a: "Try using the \"Step\" button.  Is everything right at the first step?  \n\nHow about the second?  \n\nWhere does it go wrong?  "
        courseD_bee_debugging7_b: If something needs to happen several times, try adding a `repeat` loop.
      courseD_bee_debugging8_authored_hint:
        courseD_bee_debugging8_a: Do you see a pattern that you can simplify with a loop?
        courseD_bee_debugging8_b: Try using a nested loop to make this code shorter.
      courseD_bee_debugging9_authored_hint:
        courseD_bee_debugging9_a: There are several ways to solve this problem...but they all involve turns!
        courseD_bee_debugging9_b: Figure out how you would solve the puzzle, then move step-by-step to try to make the code match what is in your head.
      courseD_bee_debugging9_predict1_authored_hint: [ ]
      courseD_bee_nestedLoops1_authored_hint:
        courseD_bee_nestedLoops1_a: Not working?  Try using the "Step" button to see what happens line by line.
      courseD_bee_nestedLoops2_authored_hint:
        courseD_bee_nestedLoops2_a: To solve this puzzle, you will need to nest one `repeat` loop inside of another.
      courseD_bee_nestedLoops2_predict1_authored_hint: [ ]
      courseD_bee_nestedLoops3_authored_hint:
        grade4_bee_nestedLoops1_a: If you don't understand how to use nested loops here, try writing out the instructions step by step on a piece of paper.  Circle the patterns that you see.
      courseD_bee_nestedLoops5_authored_hint:
        grade4_bee_nestedLoops4_a: Try building your code line by line and see if you can spot the places where a repeat will make the code shorter!
        grade4_bee_nestedLoops4_b: |-
          You will need a nested loop to move forward and get nectar, but only a single loop to collect honey at the end.
          
          Altogether, you should be using 3 loops.
      courseD_bee_nestedLoops6_authored_hint: [ ]
      courseD_bee_nestedLoops7_authored_hint:
        courseD_bee_nestedLoops7_a: You will need to repeat `get nectar` inside of another `repeat` that also has the `move forward` block inside of it.
        courseD_bee_nestedLoops7_b: You will need to use all three of the available `repeat` blocks to solve this puzzle.
        courseD_bee_nestedLoops7_c: |-
          Nest your blocks three deep, like this:
          
          - repeat 3
          - repeat 3
          - move forward
          - repeat 12
          - get nectar
          - turn right
      courseD_bee_nestedLoops8_authored_hint:
        courseD_bee_nestedLoops8_a: Try building your code line by line and see if you can spot the places where a repeat will make the code shorter!
        courseD_bee_nestedLoops8_b: |-
          You will need a nested loop to move forward and get nectar, but only a single loop to collect honey at the end.
          
          Altogether, you should be using 3 loops.
      courseD_bee_nestedLoops9_authored_hint: [ ]
      courseD_bee_nestedLoops9_predict2_authored_hint: [ ]
      courseD_collector_ramp10_authored_hint:
        courseD_artist_ramp10_a: |-
          Dört blok 'ilerle' bloğu kullanmak yerine, tekrarla döngü bloğu içine ilerle bloğu koymayı deneyin: <xml><block type="controls_repeat"> <title name="TIMES">4</title> <statement name="DO"> <block type="maze_moveForward"/> </statement> </block></xml>
        courseD_artist_ramp10_b: Önce bir parça hazine toplayın sonra birkaç adımdan sonra dönün!
      courseD_debugging_1_authored_hint:
        courseD_debugging_1_a: |-
          Use the "Step" button to see if everything is right at the first step.
          
          How about the second?
          
          Where does it go wrong?
        courseD_debugging_1_b: Do you see any patterns that could be made more simple using a `repeat` loop?
      courseD_debugging_2_authored_hint:
        courseD_debugging_2_a: |-
          Use the "Step" button to see if everything is right at the first step.
          
          How about the second?
          
          Where does it go wrong?
        courseD_debugging_2_b: Do you see a pattern?  Try using nested loops to solve this puzzle.
      courseD_debugging_3_authored_hint:
        courseD_debugging_3_a: Is there any place where the bee does something that doesn't make sense? What happens when you change those blocks?
        courseD_debugging_3_b: Try simplifying the code using nested loops.
      courseD_debugging_4_authored_hint:
        courseD_debugging_4_a: "Try using the debugging process a couple of times in a row. \n\nWhat causes the first problem?\n\nOnce that problem is fixed, what goes wrong?"
        courseD_debugging_4_b: "If you're having a hard time figuring out how to make the stair step pattern, try tracing it with your finger and saying the commands out loud. \n\nDon't forget to point out the direction of the turns!"
      courseD_debugging_5_authored_hint:
        courseD_debugging_5_a: |-
          Start by looking at just the first loop.
          
          What does it do?
          
          What is it supposed to do?
          
          What does that tell you?
        courseD_debugging_5_b: Once you have the first loop the way you want it, what is left over in your code?
        courseD_debugging_5_c: |-
          Try wrapping the leftover loop around the rest of your completed code.  Does is work now?
          
          If not, what is still going wrong?
      courseD_debugging_6_authored_hint:
        courseD_debugging_6_a: |-
          Try running through the code using the "Step" button.  Is everything good at the first step?
          
          How about the second?
          
          Where do things go wrong?
        courseD_debugging_6_b: It looks like all of the right steps are here, you just need more of them.  How can you repeat the `get nectar` and `make honey` actions multiple times?
      courseD_farmer_condLoops1_authored_hint:
        courseD_farmer_condLoops1_a: You will need to look for corn 5 times, using a repeat loop.
        courseD_farmer_condLoops1_b: Make sure to use an `if at corn` block or you might try to pick something that's not there!
      courseD_farmer_condLoops2_authored_hint:
        courseD_farmer_condLoops2_a: 'The best way to do this is to nest `if` statements by placing one inside of the other.  '
        courseD_farmer_condLoops2_b: For this puzzle, you should have one `if/else` statement and one plain `if` statement.
      courseD_farmer_condLoops3_authored_hint:
        courseD_farmer_condLoops3_a: |-
          To get all of the items, try nesting `if` statements three deep.
          
          This means you should put one `if` statement inside of another, then put a third `if` statement inside the second one.
        courseD_farmer_condLoops3_b: For this puzzle, you should have two `if/else` statements and one plain `if` statement.
      courseD_farmer_condLoops4_authored_hint:
        grade3_RunningFarm_4courseD_farmer_condLoops4: |-
          No one knows how many heads of lettuce will grow from each sprout.
          
          Use a `while there is lettuce` loop to keep picking until each piece has been gathered.
      courseD_farmer_condLoops5_authored_hint:
        courseD_farmer_condLoops5_a: You will need to check for each type of crop that the farmer can pick.  Try using two `if/else` statements and one  `if` block.
      courseD_farmer_condLoops6_authored_hint:
        courseD_farmer_condLoops6_a: Use a `while path ahead` loop to move the farmer down each piece of the spiral.
        courseD_farmer_condLoops6_b: You only need to check for corn during most of the harvest.  Just pick one pumpkin at the very end of your program.
      courseD_farmer_condLoops7_authored_hint:
        courseD_farmer_condLoops7_a: |-
          Notice that the easiest path to get to all of the crops is still a spiral.
          
          ![](https://images.code.org/ba8b8c624f21ade9ac823b045085c435-image-1479364378437.png)
        courseD_farmer_condLoops7_b: Try using `when path ahead` to keep the farmer moving the right number of steps.
        courseD_farmer_condLoops7_c: 'Use nested `if` statements and `while there is` loops to check each space for corn and lettuce, then pick only a single pumpkin at the end. '
      courseD_farmer_condLoops8_authored_hint:
        courseD_farmer_condLoops8_a: This puzzle uses almost the exact same code as the last level, except you only need to repeat 4 times.
      courseD_farmer_condLoops9_authored_hint:
        courseD_farmer_condLoops9_a: You shouldn't need the `while path ahead` loop this time.
      courseD_farmer_condLoops9_predict1_authored_hint:
        courseD_farmer_condLoops9_a: You shouldn't need the `while path ahead` loop this time.
      courseD_farmer_conditionals10_authored_hint: [ ]
      courseD_farmer_conditionals4_authored_hint:
        courseD_farmer_conditionals4_a: Instead of using a `repeat` loop, use a `while` loop to keep digging until the pile is gone.
      courseD_farmer_conditionals5_authored_hint:
        courseD_farmer_conditionals5a: Try nesting a `while` loop inside of a `repeat` loop.
      courseD_farmer_conditionals6_authored_hint:
        courseD_farmer_conditionals6_a: Make sure you're using the `while` loop to figure out how many times to fill each hole.
        courseD_farmer_conditionals6_b: Notice that the farmer needs to move forward and down several times in a stair-step pattern.
      courseD_farmer_conditionals7_authored_hint:
        courseD_farmer_conditionals8_a: The `while path ahead` block lets you keep going, even if you don't know how many squares are in a path.
      courseD_farmer_conditionals8_authored_hint:
        courseD_farmer_conditionals8_a: You are going to need to use more than one `while` loop.
        courseD_farmer_conditionals8_b: Every hole is at the end of a path, so use `while path ahead` before using `while there is a hole`.
        courseD_farmer_conditionals8_c: Notice that you need to repeat the `while path ahead`, `while there is a hole` code six times.
      courseD_farmer_conditionals9_authored_hint: [ ]
      courseD_farmer_while10_authored_hint: [ ]
      courseD_farmer_while10_predict2_authored_hint: [ ]
      courseD_farmer_while4_authored_hint:
        courseD_farmer_conditionals4_a: Instead of using a `repeat` loop, use a `while` loop to keep digging until the pile is gone.
      courseD_farmer_while4_predict1_authored_hint: [ ]
      courseD_farmer_while5_authored_hint:
        courseD_farmer_conditionals5a: Try nesting a `while` loop inside of a `repeat` loop.
      courseD_farmer_while6_authored_hint:
        courseD_farmer_conditionals6_a: Make sure you're using the `while` loop to figure out how many times to fill each hole.
        courseD_farmer_conditionals6_b: Notice that the farmer needs to move forward and down several times in a stair-step pattern.
      courseD_farmer_while7_authored_hint:
        courseD_farmer_conditionals8_a: The `while path ahead` block lets you keep going, even if you don't know how many squares are in a path.
      courseD_farmer_while8_authored_hint:
        courseD_farmer_conditionals8_a: You are going to need to use more than one `while` loop.
        courseD_farmer_conditionals8_b: Every hole is at the end of a path, so use `while path ahead` before using `while there is a hole`.
        courseD_farmer_conditionals8_c: Notice that you need to repeat the `while path ahead`, `while there is a hole` code six times.
      courseD_farmer_while9_authored_hint: [ ]
      courseD_maze_nestedLoops3_authored_hint:
        courseD_maze_nestedLoops3_a: To solve this puzzle, you will need to "nest" one `repeat` loop inside of another `repeat` loop.
      courseD_maze_nestedLoops4_authored_hint:
        courseD_maze_nestedLoops4_a: |-
          Try using this path through the maze.
          
          ![](https://images.code.org/6a8b4b97a8eef813d8a827b0b7b2d36b-image-1480446509692.05.22.png)
        courseD_maze_nestedLoops4_b: If the loop pattern is hard to see, try coding it all out first and see what things repeat over and over before you put the loops in.
        courseD_maze_nestedLoops4_c: Try using one `repeat` loop inside of another to cut down on the amount of code you need.
      courseD_maze_nestedLoops5_authored_hint:
        courseD_maze_nestedLoops5_a: Look for a stair-step pattern in this maze to find where a nested loop can be used.
      courseD_maze_nestedLoops6_authored_hint:
        courseD_maze_nestedLoops6_a: If you are stuck, try writing out the code out on paper without loops first and look for patterns.
        courseD_maze_nestedLoops6_b: Nesting `repeat` loops can help decrease the number of blocks used.
        courseD_maze_nestedLoops6_c: It will take two sets of nested `repeat` loops to solve this puzzle.
      courseD_maze_ramp1_authored_hint:
        courseC_maze_programming1_0: If the bird isn't getting to the pig, make sure all three of the blocks have been fully clicked together, then click "Run" again.
      courseD_maze_ramp2_authored_hint:
        courseC_maze_programming2_a: To use a `move forward` block, drag it from the toolbox out into the workspace and connect it to the `when run` block.
      courseD_maze_ramp3_authored_hint:
        courseC_maze_programming3_a: "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\nTo delete a block from the middle of your code, drag all of the blocks underneath it away to the right and let them sit in the workspace for a while.  \n\nClick on the block you want to delete, and drag it back to the toolbox.\n\nFinally, put your other blocks back in place where they belong.\n"
      courseD_maze_ramp4_authored_hint:
        courseC_maze_programming4_a: You can turn right or left from the bird's point of view. If you are facing right, turning right will make you point downwards.
        courseC_maze_programming4_b: To follow the path, move forward and turn one way, then move again and turn the opposite way. Move forward one more time to reach the pig.
      courseD_maze_ramp5_authored_hint:
        courseC_maze_programming5_a: Try using the "Step" button to run your code line by line. Can you figure out what you need to do next?
      courseD_maze_ramp6_authored_hint:
        courseC_maze_programming6_a: Bu bulmacayı çözmek için iki yol vardır!
      courseD_maze_ramp7_authored_hint:
        courseD_maze_ramp7_b: Don't forget to use the "Step" button to go through block by block and look for errors.
        courseD_maze_ramp7_a: Tekrarla bloğu kullanarak bir yada daha fazla bloğu tekrarlı çalıştırman mümkündür.
      courseD_maze_until10_authored_hint: [ ]
      courseD_maze_until10_predict2_authored_hint: [ ]
      courseD_maze_until2_authored_hint:
        courseD_maze_until2_a: An `until pig` loop will help you keep going until you succeed!
      courseD_maze_until2_predict1_authored_hint: [ ]
      courseD_maze_until3_authored_hint:
        courseD_maze_until3_a: |-
          - What does your code do?
          - What is it supposed to do?
          - What does that tell you?
      courseD_maze_until4_authored_hint:
        courseD_maze_until4_a: |-
          Use the "Step" button to go through your code line by line.
          
          - Does everything work at the first step?
          - Does everything work at the second step?
          - Where does it go wrong?
      courseD_maze_until5_authored_hint:
        courseD_maze_until5_a: Don't forget to use `if path to the left` to keep the zombie checking for a place to turn.
      courseD_maze_until6_authored_hint:
        courseD_maze_until6_a: This time, try the `if path to the right` to keep the zombie on track.
      courseD_maze_until7_authored_hint:
        courseD_maze_until7_a: You don't need your code to be any longer, just because the maze is!
      courseD_maze_until8_authored_hint:
        courseD_maze_until8_a: Make sure you're using an `if/else` block to keep the zombie headed the right direction.
      courseD_maze_until9_authored_hint:
        courseD_maze_until8_a: Using `if path ahead` will keep you going forward whenever possible, helping you miss the paths with chompers.
      courseD_playLab_cond1_authored_hint:
        courseD_playLab_cond1_a: To solve this challenge, attach the `move actor 1 up` block to the `when up arrow` event, then do the same for every other direction.
      courseD_playLab_cond2_authored_hint:
        courseD_playLab_cond2_a: To succeed with this puzzle, use the `score point` block beneath the `when actor 1 touches actor 2` event.
      courseD_playLab_cond3_authored_hint:
        courseD_playLab_cond3_a: You will need to add two blocks to your `repeat forever` loop.  One will choose a random emotion for the dragon (actor 2) and the other will wait 1 second before going through the loop again.
        courseD_playLab_cond3_b: 'You will need to use an `if / else` block for the second half of this challenge. '
        courseD_playLab_cond3_c: "`If` the dragon is happy `score point`, `score point`.\n<br/>\n \n`Else` `score point`."
      courseD_playLab_cond4_authored_hint:
        courseD_playLab_cond4_a: You will want to use the `when run` event to get the ninja to chase the pirate.
        courseD_playLab_cond4_b: There is a special block called `set every masked ninja to chase actor` that will keep the ninja hot on the pirate's trail!
        courseD_playLab_cond4_c: Put the `end game as a loss` block underneath the `when actor 1 touches actor 3` event.
      courseD_playLab_cond5_authored_hint:
        courseD_playLab_cond5_a: Use an `if` statement that compares whether `score` is `>` 5 to solve this challenge.
      courseD_playLab_cond6_authored_hint:
        courseD_playLab_cond6_a: Add the `set masked ninja speed` block to the beginning of the program to help slow the ninja down.
        courseD_playLab_cond6_b: You will need to use an `if actor 1 y position > 255` block inside of a `repeat forever` block to always check if the pirate is below the octopuses.
        courseD_playLab_cond6_c: Add a `wait 1 second` block to the top of the `repeat forever` loop that checks the pirate position (but not inside the `if` statement) to keep points from being removed too quickly.
      courseD_playLab_cond6cloneForTest_authored_hint:
        courseD_playLab_cond6_a: Add the `set masked ninja speed` block to the beginning of the program to help slow the ninja down.
        courseD_playLab_cond6_b: You will need to use an `if actor 1 y position > 255` block inside of a `repeat forever` block to always check if the pirate is below the octopuses.
        courseD_playLab_cond6_c: Add a `wait 1 second` block to the top of the `repeat forever` loop that checks the pirate position (but not inside the `if` statement) to keep points from being removed too quickly.
      courseE_artist_concept1_authored_hint:
        courseE_artist_concept1_a: The hexagons have 50 pixel sides and 60 degree turns to the right.
        courseE_artist_concept1_b: Try using a function here so you don't have to write the code for a hexagon over and over again.
      courseE_artist_concept4_authored_hint:
        courseE_artist_concept4_a: There are several ways to solve this puzzle. Can you make a plan?
        courseE_artist_concept4_b: Try creating one square. Then make a line of squares.  What comes next?
      courseE_artist_functions1_authored_hint:
        courseE_artist_functions1_a: Kareler 100 piksel genişliğinde, buda demek oluyor ki her kareden önce 175 piksel ilerlemelisin.
        courseE_artist_functions1_b: Gözlük yapmak için çakışan çizgiler olabilir.
      courseE_artist_functions10_authored_hint:
        courseD_artist_functions10_b: This drawing is a lot like the last one, except the function draws a different kind of line.
        courseD_artist_functions10_a: To get around using multiple `move forward` blocks, create a `draw hexagon` function and call that multiple times.
      courseE_artist_functions2_authored_hint:
        courseD_artist_functions2_a: |-
          Programınız: -Fonksiyon kullanmalıdır. - 
          ileri 100 + 75 piksel ilerlemelidir- 
          Fonksiyon kullanmalıdır
      courseE_artist_functions3_authored_hint:
        courseD_artist_functions3_a: |-
          To solve this puzzle, you just need to add a  loop that repeats the starter code 8 times.
          
          If you can't remember what the starter code was, click "start over" in the upper right corner of the workspace.
      courseE_artist_functions4_authored_hint:
        courseD_artist_functions4_a: Try using a function!
      courseE_artist_functions5_authored_hint:
        courseD_artist_functions5_a: Don't give up!  Remember what you have been learning.
        courseD_artist_functions5_b: Functions make it easy to call saved code at any time, not just from inside a loop!
      courseE_artist_functions6_authored_hint:
        grade4_artist_functions_windows0_a: Focus only on making one window for now.  We'll create a function for it in the next puzzle.
        grade4_artist_functions_windows0_b: Try using nested loops, where the inner loop makes the square and the outer loop rotates the square four times.
      courseE_artist_functions7_authored_hint:
        courseD_artist_functions7_a: Try creating your function first then adding in windows one at a time.
        courseD_artist_functions7_b: You shouldn't need to add any extra repeat loops.  Just jump the artist 100 pixels forward for each top window, and 150 pixels down to get the bottom windows.
      courseE_artist_functions8_authored_hint:
        courseD_artist_functions8_a: |-
          Start by making a function for a square, then try making a function for a line of squares.
          
          How would you use the `draw a line of squares` function to make this image?
        courseD_artist_functions8_b: After your first line of squares, you need to move the artist down and back before you start your second line of squares.
        courseD_artist_functions8_c: You should move the artist back a different number of pixels for even lines than for odd ones.
      courseE_artist_functions9_authored_hint:
        courseD_artist_functions9_a: To get around the need to have multiple `move forward` blocks, create a `draw triangle` function and call that multiple times.
        courseD_artist_functions9_b: This drawing is made by creating a line of triangles and turning either 60 or 120 degrees after each time you draw the triangle line.
      courseE_artist_functions_predict1_authored_hint: [ ]
      courseE_artist_functions_predict2_authored_hint: [ ]
      courseE_artist_predict1_authored_hint: [ ]
      courseE_artist_ramp10_authored_hint:
        courseD_artist_ramp10_a: Her üçgenden sonra 60 derece dönmeyi unutma. Hangi föngü içine ilgili komutları koyman gerekiyor?
      courseE_artist_ramp11_authored_hint:
        courseD_artist_ramp11a: Kenar çizmek içim 100 piksel ilerle bloğunu kullan ve 100 yerine 200 gir.
        courseD_artist_ramp11b: |-
          4 tarafı çizmek için bir döngü içinde 'ileri 100 piksel' bloğunu döngü içine yerleştirin ve 4 kez çizmek için ayarlandığından emin olun. Daha sonra dönmeyi unutma!
      courseE_artist_ramp12_authored_hint:
        courseD_artist_ramp12_a: Önce kare sonra üçgen çizebilirsin yada tam tersi sırada!
      courseE_artist_ramp8_authored_hint:
        courseE_artist_ramp8_a: Kenar çizmek içim 100 piksel ilerle bloğunu kullan ve 100 yerine 200 gir.
        courseE_artist_ramp8_b: |-
          4 tarafı çizmek için bir döngü içinde 'ileri 100 piksel' bloğunu döngü içine yerleştirin ve 4 kez çizmek için ayarlandığından emin olun. Daha sonra dönmeyi unutma!
      courseE_artist_ramp9_authored_hint:
        courseD_artist_ramp12_a: Bu kareye benzer bir şekil. Farklı olan nedir?
      courseE_bee_concept1_authored_hint:
        courseE_bee_concept1_a: If you don't understand how to use nested loops here, try writing out the instructions step by step on a piece of paper.  Circle the patterns that you see.
      courseE_bee_concept2_authored_hint:
        courseE_bee_concept2_a: An `if` block will help you out in this puzzle.
      courseE_bee_concept3_authored_hint:
        courseE_bee_concept3a_a: Try using nested `repeat` loops to solve this puzzle.
      courseE_bee_concept4_authored_hint:
        courseE_bee_concept4_a: An `if/else` statement could really help you out here.
      courseE_bee_concept5_authored_hint:
        courseE_bee_concept5_a: 'The flowers follow a rectangular path.  You can trace that rectangle using `while path ahead` even with a different number of squares per side. '
        courseE_bee_concept5_b: You can check every square for a flower using the `if` block, even if you already know there's not one there.
      courseE_bee_functions1_authored_hint:
        courseE_bee_functions1_a: There is more than one right answer to this puzzle.
      courseE_bee_functions2_authored_hint:
        courseE_bee_functions2_a: The function has been written for you, but you will need to call it at each flower.
      courseE_bee_functions3_authored_hint:
        courseE_bee_functions3_a: 'Your function for this puzzle only needs to collect nectar, it shouldn''t have any `move forward` or `turn` blocks in it. '
      courseE_bee_functions4_authored_hint:
        courseE_bee_functions4_a: Your function will already travel down the side paths and return the bee back to the main road.  You don't need to add that part to your program.
      courseE_bee_functions5_authored_hint:
        courseE_bee_functions5_a: Edit the function so that it solves the puzzle without having to change the main program.
        courseE_bee_functions5_b: "Your function should make the bee: \n- turn\n- move forward\n- collect all of the nectar\n- turn around\n- move back to the main path\n- turn back to the direction that the bee started from"
      courseE_bee_functions6_authored_hint:
        courseE_bee_functions6_a: "Bulmaca zorlu görünüyorsa, fonksiyonu  biraz tbiraz oluşturarak deneyin.    Bazı bloklar ekleyin, sonra deneyin. Daha fazla blok ekleyin, sonra yeniden deneyin.  Çözüme ulaşacaksınız!  ! [] (https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)"
      courseE_bee_functions7_authored_hint:
        courseE_bee_functions7_a: "Bulmaca zorlu görünüyorsa, fonksiyonunuzu biraz biraz oluşturmayıdeneyin.    Bazı bloklar ekleyin, sonra deneyin. Daha fazla bilgi ekleyin, sonra yeniden deneyin.  Çözümü bulacaksınız!"
        courseE_bee_functions7_b: |-
          Yeşil fonksiyon bloğu içinde kod oluşturmayı hatırla. ! [] (https://images.code.org/8fe1fae5caf4ede3a9c9bd9f26940cde-image-1467996837459.gif)
        courseE_bee_functions7_c: This function should turn the bee to head him down the path, collect the nectar, make the honey, then turn the bee around and bring him back.
      courseE_bee_functions8_authored_hint:
        courseE_bee_functions8_a: Your function will only need to collect nectar... but this time, you will need to use a `while` loop instead of a `repeat` loop.
        courseE_bee_functions8_b: Use `while nectar > 0` to make sure you get all of the nectar.
      courseE_bee_functions9_authored_hint:
        courseE_bee_functions9_a: You can use the exact same function for this puzzle as you did in the last puzzle.  All you need to do is create a function that collects all of the nectar when you get to each flower.
      courseE_bee_ramp14_authored_hint:
        courseE_bee_ramp14_a: The bee works just like the farmer in the previous puzzle. Buzz along the path and collect nectar if there is nectar, otherwise make honey!
      courseE_bee_ramp17_authored_hint:
        courseE_bee_ramp17_a: Because we don't have a repeat block to do something a certain number of times, what block should we use to get us along the path?
        courseE_bee_ramp17: If you were to solve this puzzle without a while block, where would you see repeated code? How can you use this repeated code to shape how you must use a while block to solve the problem?
      courseE_collector_ramp10_authored_hint:
        courseD_artist_ramp10_a: |-
          Dört blok 'ilerle' bloğu kullanmak yerine, tekrarla döngü bloğu içine ilerle bloğu koymayı deneyin: <xml><block type="controls_repeat"> <title name="TIMES">4</title> <statement name="DO"> <block type="maze_moveForward"/> </statement> </block></xml>
        courseD_artist_ramp10_b: Önce bir parça hazine toplayın sonra birkaç adımdan sonra dönün!
      courseE_farmer_concept1_authored_hint:
        courseE_farmer_concept1_a: A `while there is a hole` block will help you fill any hole until it's flat.
      courseE_farmer_concept2_authored_hint:
        courseE_farmer_concept2_a: The paths are all the same length, but they are a different number of squares apart.  A loop isn't ideal here. Try a function.
      courseE_farmer_concept3_authored_hint:
        grade3_robotFarmer_ConditionalsIntro_8_a: The `while path ahead` block lets you keep going, even if you don't know how many squares are in a path.
      courseE_farmer_concept4_authored_hint:
        4-5_Artist_Patterns_3_a: Araç kutusundan her seferinde tüm kod bloğunu çekmeyi unutmayın.
        4-5_Artist_Patterns_3_b: Kodunuzu çok kafa karıştırıcı hale gelirse, "Başla"'yı tıklayın ve yeniden deneyin!
      courseE_farmer_functions10_authored_hint: [ ]
      courseE_farmer_functions10b_authored_hint: [ ]
      courseE_farmer_functions11_predict_authored_hint: [ ]
      courseE_farmer_functions1a_authored_hint:
        courseE_farmer_functions1a_a: Nested `if` and `if/else` statements will really help you out here.
      courseE_farmer_functions2a_authored_hint: [ ]
      courseE_farmer_functions2aALT_authored_hint: [ ]
      courseE_farmer_functions2b_authored_hint:
        courseE_farmer_functions2b_a: Nested `if` and `if/else` statements will really help you out here.
        courseE_farmer_functions2b_b: You can repeat the code to check the squares for crops in two different `while path ahead` loops.
      courseE_farmer_functions3_authored_hint:
        courseE_farmer_functions3_a: Try using a `while path ahead` loop to get you where you need to be.
      courseE_farmer_functions3b_authored_hint:
        courseE_farmer_functions1a_a: Nested `if` and `if/else` statements will really help you out here.
      courseE_farmer_functions3c_authored_hint:
        courseE_farmer_functions3c_a: You will be able to replace TWO sets of code with calls to your `check and pick` function if you build it well.
        courseE_farmer_functions3c_b: |-
          If you're having trouble figuring out what goes into the function, use the "Step" button to run through the code until you get to the first line that checks to see if there's corn.
          
          Drag that conditional (and all of the code inside) into your function definition.
      courseE_farmer_functions4_authored_hint:
        courseE_farmer_functions4_a: Drag all of the code out of your `repeat` loop and into the `go get pumpkins` function.
        courseE_farmer_functions4_b: Don't forget to put the block that calls the `go get pumpkins` functions inside your loop before you run your code.
      courseE_farmer_functions4b_authored_hint: [ ]
      courseE_farmer_functions5_authored_hint: [ ]
      courseE_farmer_functions5a_authored_hint: [ ]
      courseE_farmer_functions5b_authored_hint:
        courseE_farmer_functions5b_a: You will need to use a `while corn` loop, a `while lettuce` and a `while pumpkin` to make sure you get everything.
      courseE_farmer_functions5c_authored_hint: [ ]
      courseE_farmer_functions6_authored_hint: [ ]
      courseE_farmer_functions6b_authored_hint: [ ]
      courseE_farmer_functions6c_authored_hint: [ ]
      courseE_farmer_functions7_authored_hint: [ ]
      courseE_farmer_functions7b_authored_hint:
        courseE_farmer_functions7b_a: You will want to use the `check and pick` function inside your new function to collect all of the produce.
      courseE_farmer_functions8_authored_hint:
        courseE_farmer_functions8_a: Create a function that takes the farmer to the corn, gets all of the corn, then turns around and comes back.
      courseE_farmer_functions8b_authored_hint: [ ]
      courseE_farmer_functions9_authored_hint:
        courseE_farmer_functions8_a: Create a function that takes the farmer to the corn, gets all of the corn, then turns around and comes back.
      courseE_farmer_functions9b_authored_hint: [ ]
      courseE_farmer_predict1_authored_hint:
        courseE_farmer_ramp12a: Feel free to go back to the last puzzle if you need a reminder of how to pick produce only **while** there is produce to pick.
      courseE_farmer_predict2_authored_hint: [ ]
      courseE_farmer_ramp11_authored_hint:
        courseE_farmer_ramp11_a: Eğer döngüyü nereye koyacağın konusunda zorlanıyorsan önce kodla sonra rtak kısımları bulmaya çalış.
        courseE_farmer_ramp11_b: 5 tane "Marul topla" bloğu kullanmak yerine, Tekrarla döngüsü kullanarak nasıl marul toplarsın?
        courseE_farmer_ramp11_c: 5 tane tekrarla bloğuna ihtiyacın yok. Bunun yerine bir döngü daha kullanın
      courseE_farmer_ramp11a_authored_hint:
        courseE_farmer_ramp12_a: 'Tekrarla bloğu yerine ''sürece'' marul ar döngüsü kullanın.  '
      courseE_farmer_ramp12_authored_hint:
        courseE_farmer_ramp12_a: 'Tekrarla bloğu yerine ''sürece'' marul ar döngüsü kullanın.  '
        courseE_farmer_ramp12_b: Çiftçiye kaç gere ilerleyip kaç marul almasını söylemek için tekrarla bloğuna ihtiyacın var.
      courseE_farmer_ramp12a_authored_hint:
        courseE_farmer_ramp12a: Feel free to go back to the last puzzle if you need a reminder of how to pick produce only **while** there is produce to pick.
      courseE_farmer_ramp13_authored_hint: [ ]
      courseE_farmer_ramp15_authored_hint:
        courseE_farmer_ramp15_a: Use the 'repeat until at pumpkin' block to make it to the end of the path.
        courseE_farmer_ramp15_b: What else needs to be done while moving along the path to the pumpkin?
      courseE_farmer_ramp16_authored_hint:
        courseE_farmer_ramp16_a: If we are moving along the path to the pumpkin, what do we have to repeatedly do? When do we stop repeating?
      courseE_maze_predict1_authored_hint: [ ]
      courseE_maze_ramp1_authored_hint:
        courseC_maze_programming1_0: If the bird isn't getting to the pig, make sure all three of the blocks have been fully clicked together, then click "Run" again.
      courseE_maze_ramp13_authored_hint:
        courseD_maze_ramp11_b: Don't forget to use the "Step" button to go through block by block and look for errors.
        courseD_maze_ramp11_a: Tekrarla bloğu kullanarak bir yada daha fazla bloğu tekrarlı çalıştırman mümkündür.
      courseE_maze_ramp2_authored_hint:
        courseC_maze_programming2_a: To use a `move forward` block, drag it from the toolbox out into the workspace and connect it to the `when run` block.
      courseE_maze_ramp3_authored_hint:
        courseC_maze_programming3_a: "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\nTo delete a block from the middle of your code, drag all of the blocks underneath it away to the right and let them sit in the workspace for a while.  \n\nClick on the block you want to delete, and drag it back to the toolbox.\n\nFinally, put your other blocks back in place where they belong.\n"
      courseE_maze_ramp4_authored_hint:
        courseC_maze_programming4_a: You can turn right or left from the bird's point of view. If you are facing right, turning right will make you point downwards.
        courseC_maze_programming4_b: To follow the path, move forward and turn one way, then move again and turn the opposite way. Move forward one more time to reach the pig.
      courseE_maze_ramp5_authored_hint:
        courseC_maze_programming5_a: Try using the "Step" button to run your code line by line. Can you figure out what you need to do next?
      courseE_maze_ramp6_authored_hint:
        courseC_maze_programming6_a: Bu bulmacayı çözmek için iki yol vardır!
      courseE_maze_ramp7_authored_hint:
        courseD_maze_ramp7_b: Don't forget to use the "Step" button to go through block by block and look for errors.
        courseD_maze_ramp7_a: Tekrarla bloğu kullanarak bir yada daha fazla bloğu tekrarlı çalıştırman mümkündür.
      courseE_maze_ramp_predict1_authored_hint: [ ]
      courseE_multi_maze_ramp5_authored_hint:
        courseC_maze_programming5_a: Try using the "Step" button to run your code line by line. Can you figure out what you need to do next?
      courseE_playLab_scaffold2_authored_hint:
        courseE_playLab_scaffold1_a: Pull on the dropdown menu of the `when ____ arrow` event to change the direction the block controls.
      courseE_playLab_scaffold3_authored_hint:
        courseE_playLab_scaffold3_a: Use a `repeat forever` loop to have extra actors patrol up and down, or left and right for the entire game.
      courseF_artist_for1_authored_hint:
        courseF_artist_for1_a: |-
          Can you draw something like this:
          
          ![](https://images.code.org/80ae9ab3e449db1ed4e13c86239f7617-image-1475906794954.06.12.png)
      courseF_artist_for10_authored_hint:
        courseF_artist_for10_a: The image in the drawing was made using a counter for the `set alpha` and `counter` / 10 as a brush size.
        courseF_artist_for10_b: The image in the drawing uses a turn of 61 degrees.
        courseF_artist_for10_c: |-
          Want to know how the sample image was done?
          
          ![](https://images.code.org/fdc5d6c15b357ba9763ac9ea914967a9-image-1475911612774.23.51.png)
      courseF_artist_for10_predict1_authored_hint: [ ]
      courseF_artist_for2_authored_hint:
        courseF_artist_for2_a: |-
          Use `counter` for the length of your triangles inside your `repeat` loop.
          
          ![](https://images.code.org/5e9465321a0b7a4d791848a79f3e6715-image-1475908305872.31.26.png)
      courseF_artist_for3_authored_hint:
        courseF_artist_for3_a: |-
          To have the `for` loop drive your movement, make sure that you're using `counter` as your distance in the `move forward` block.
          
          ![](https://images.code.org/15e87fc7fe408cbf1b63e0e8e69b7ffe-image-1475908502078.31.26.png)
      courseF_artist_for4_authored_hint:
        courseF_artist_for4_a: "** İhtiyacınız olacak en küçük sayı nedir?   \nEn büyük numarası nedir?   \nArtış ne kadar? ** \nŞununla say döngüsü için boşlukları doldururken sorman gereken sorular bunlardır."
      courseF_artist_for5_authored_hint:
        courseF_artist_for5_a: You don't need the `repeat` loop inside when making this spiral!
      courseF_artist_for7_authored_hint:
        courseF_artist_for7_a: The increment for this puzzle is 2.
        courseF_artist_for7_b: Notice that this spiral turns right instead of left!
      courseF_artist_for8_authored_hint: [ ]
      courseF_artist_for9_authored_hint: [ ]
      courseF_artist_fwp1_authored_hint:
        courseF_artist_fwp1_c: Put all of the code for drawing a square inside the function editor.
        courseF_artist_fwp1_a: Remember, you need to turn 90 degrees to draw a square.
        courseF_artist_fwp1_b: You only need to repeat as many times as the number of sides in a square.
      courseF_artist_fwp2_authored_hint:
        courseF_artist_fwp2_a: You need to click the "edit" button to get into the function.  Once you're there, add a parameter called `length` and use it inside your `move forward` block!
        courseF_artist_fwp2_b: When calling your function, use a `for loop` for the best possible code!
      courseF_artist_fwp2_predict1_authored_hint: [ ]
      courseF_artist_fwp3_authored_hint:
        courseF_artist_fwp3_a: This gets easier if you put it all in a `for` loop.
        courseF_artist_fwp3_b: |-
          Be sure to turn 90 degrees between each square!
          
          ![](https://images.code.org/97bd8eded03c5aa39740876c8e9f7ff8-image-1469224745277.gif)
      courseF_artist_fwp4_authored_hint:
        courseF_artist_fwp4_a: Use a `for` loop to get the code as smooth as you can.
        courseF_artist_fwp4_b: Remember to **add** a parameter.  Don't remove the one that is already there!
      courseF_artist_fwp5_authored_hint:
        courseF_artist_fwp5_a: The length of sides for each shape is 7 times the number of sides it has.
        courseF_artist_fwp5_b: Don't forget to jump 100 pixels between shapes.
      courseF_artist_fwp6_authored_hint:
        courseF_artist_fwp6_a: It's okay to run the program a few times to figure out how the function works with different parameters.
        courseF_artist_fwp6_b: You don't need to add any `move` or `turn` blocks to finish this code.
      courseF_artist_fwp7_authored_hint:
        courseF_artist_fwp7_a: 'Did the code get so scrambled up that it''s no longer recognizable?  Try clicking the "Start over" button in the upper right-hand corner. '
        courseF_artist_fwp7_b: Your new `min` variable should go in the first slot in your `for` loop, inside the function.
      courseF_artist_fwp8_authored_hint:
        courseF_artist_fwp8_a: If your function is correct, you shouldn't need to change it for this puzzle.
        courseF_artist_fwp8_b: The only thing you should need to do between function calls is change the color of the line.
      courseF_artist_variables4_authored_hint:
        courseF_artist_variables4_a: Your code won't be much different than it was in the last puzzle, except that you will need to turn the artist to jump down, then turn him back to get ready to jump forward again.
        courseF_artist_variables4_b: "![](https://images.code.org/fc31a4b60dc86d7b820c2d242f83e6ed-image-1477533361197.gif)"
      courseF_artist_variables5_authored_hint:
        courseF_artist_variables5_a: The second half of your code should look almost the same as the first half, except you will be turning *left*, jumping, then turning *right*.
      courseF_artist_variables6_authored_hint:
        courseF_artist_variables6_a: Thanks to variables, you only need to change one number at the top to make this work.
      courseF_artist_variables6a_authored_hint:
        courseF_artist_variables6a_a: Remember to use the variable `length` instead of an actual number to solve this puzzle.
      courseF_artist_variables8_authored_hint:
        courseF_artist_variables8_a: |
          Try putting the set of ![](https://images.code.org/6525bebee31ee15b84a48761b2866f53-image-1477531948829.31.37.png) blocks inside your loop at the end.
      courseF_artist_variables_4_authored_hint:
        courseF_artist_variables_4_a: Your code won't be much different than it was in the last puzzle, except that you will need to turn the artist to move down, then turn him back to get ready to move forward again.
        courseF_artist_variables_4_b: "![](https://images.code.org/fc31a4b60dc86d7b820c2d242f83e6ed-image-1477533361197.gif)"
      courseF_artist_variables_6_authored_hint:
        courseF_artist_variables_6_a: Thanks to variables, you only need to change one number at the top to make this work.
      courseF_artist_variables_6a_authored_hint:
        courseF_artist_variables6a_a: Remember to use the variable `length` instead of an actual number to solve this puzzle.
      courseF_artist_variables_8_authored_hint:
        courseF_artist_variables_8_a: |
          Try putting the set of ![](https://images.code.org/6525bebee31ee15b84a48761b2866f53-image-1477531948829.31.37.png) blocks inside your loop at the end.
      courseF_bee_for1_authored_hint:
        courseF_bee_for1_a: A loop will help you here.
      courseF_bee_for10_authored_hint:
        courseF_bee_for10_a: Can you find a pattern between the number of steps you need to take and the number of nectars to gather?
        courseF_bee_for10_b: You'll need to have 2 repeats, one will use a math block.
      courseF_bee_for11_authored_hint:
        courseF_bee_for11_a: "How much less is 12 than 15?  \nHow much less is 9 than 12?\n\nDo you see a pattern?"
      courseF_bee_for2_authored_hint:
        courseF_bee_for2_a: You'll need to use at least three loops (one after another) to solve this puzzle.
      courseF_bee_for3_authored_hint:
        courseF_bee_for3_a: 'Use the `counter` variable inside the `repeat` loop where nectar is gathered to solve this puzzle. '
        courseF_bee_for3_b: Your `for` loop will need to count from 1 to 5 with an increment of 1.
      courseF_bee_for3_predict1_authored_hint: [ ]
      courseF_bee_for4_authored_hint:
        courseF_bee_for4_a: Use a `for` loop that goes from 1 to 7 with an increment of 1 to solve this puzzle.
        courseF_bee_for4_b: Make sure to use the `counter` variable inside your nested `repeat` loop to get enough nectar!
      courseF_bee_for5_authored_hint:
        courseF_bee_for5_a: This time, your `move forward` block and your `get nectar` block will need to be in separate `repeat` loops, both inside the same `for` loop.
      courseF_bee_for6_authored_hint:
        courseF_bee_for6_a: Don't forget to use a `counter` variable inside your `repeat` loop.
      courseF_bee_for7_authored_hint:
        courseF_bee_for7_a: Your `for` loop will need to count from 1 to 7 by 2.
      courseF_bee_for8_authored_hint:
        courseF_bee_for8_a: "If your loop is counting up, the increment is added to your counter variable each time through. \n\nWhat do you need to add to each number to get the next amount of nectar?"
      courseF_bee_for9_authored_hint:
        courseF_bee_for9_a: |-
          Try doing some math with the counter variable.
          
          What do you have to do to the counter at each flower to equal the amount of nectar you need to collect?
        courseF_bee_for9_c: It looks like you will need to turn the bee at the beginning of each loop iteration if you want to solve the puzzle.
        courseF_bee_for9_b: "**Remember:** If your loop is counting up, the increment is added to your `counter` variable each time through."
      courseF_bee_fwp1_authored_hint:
        courseF_bee_fwp1_a: Use `if` statements to make sure you're only getting nectar from a flower.
      courseF_bee_fwp2_authored_hint:
        courseF_bee_fwp2_a: "To turn this into a function, simply drag the code into the existing function block.  \n\n\n![](https://images.code.org/4d918c677ecb9f1618c1556566805b32-image-1477621874625.gif)"
        courseF_bee_fwp2_b: Don't forget to connect the `rowOfNectar` block to `when run` to call the function that you just built.
      courseF_bee_fwp3_authored_hint:
        courseF_bee_fwp3_a: Your function will run no matter which direction you're facing.
      courseF_bee_fwp4_authored_hint:
        courseF_bee_fwp4_a: You will need to add a parameter and use the resulting variable in your loop.
      courseF_bee_fwp5_authored_hint:
        courseF_bee_fwp5_a: Count the number of spaces you need to check in each stretch and use those numbers as your parameters to the function call.
      courseF_bee_fwp6_authored_hint:
        courseF_bee_fwp6_a: Which block automatically increments a variable that you could use as a parameter?
        courseF_bee_fwp6_b: Try using a `for` loop to solve this puzzle.
      courseF_bee_fwp7_authored_hint:
        courseF_bee_fwp7_a: You don't need a second parameter for this function, only a second `if` statement.
      courseF_bee_fwp8_authored_hint: [ ]
      courseF_bee_fwp9_authored_hint: [ ]
      courseF_bee_fwp9_predict1_authored_hint: [ ]
      courseF_playlab_variables1a_authored_hint:
        courseF_playlab_variables1a_a: Put the word "Goal!" inside the green block that is connected to the purple `set shout to` block.
      courseF_playlab_variables3b_authored_hint:
        courseF_playlab_variables3b_a: The variable blocks are already in the workspace.  All you have to do is put them where they belong!
      courseF_playlab_variables3bEdit_authored_hint:
        courseF_playlab_variables3b_a: The variable blocks are already in the workspace.  All you have to do is put them where they belong!
      drawings!_authored_hint:
        triangle_geometry_hint: 'Unutmayın: bir eşkenar üçgenin 3 kenarı vardır ve her birinde 60 derece dönüş vardır!'
        repeat_pointer: Bir kena rçizim 3 dönüş yapmalısın.... Aynı komutu tekrarlı yapmanı sağlayan blok hangisi?
        repeat_bottom_out: '''3 kez tekrarlayın'' bloğu kullanın!'
      grade1_adventurer_loops10_authored_hint:
        grade1_adventurer_loops10_a: You'll need three `repeat` loops to solve this puzzle.
      grade1_adventurer_loops2_authored_hint:
        grade1_adventurer_loops2_a: Try using a `repeat` block to collect your gold.
      grade1_adventurer_loops3_authored_hint:
        grade1_adventurer_loops3_a: Is something not right? Try using the step button to figure out where things go wrong.
      grade1_adventurer_loops4_authored_hint:
        grade1_adventurer_loops4_a: Try using more than one loop to get the job done.
      grade1_adventurer_loops5_authored_hint:
        grade1_adventurer_loops5_a: Can't figure out where things start going wrong? Use the "Step" button to run through your program one block at a time.
      grade1_adventurer_loops6_authored_hint:
        grade1_adventurer_loops6_a: If you are having a hard time with the puzzle, try drawing it on paper to help you figure it out.
      grade1_adventurer_loops7_challenge_authored_hint:
        grade1_adventurer_loops7_challenge_a: 'If you can''t figure out where to put the repeat loops, program it out step-by-step and look for a pattern. '
        grade1_adventurer_loops7_challenge_b: Does the code feel a little long?  You can make it much shorter by moving two of your `repeat` loops inside of another loop.
      grade1_adventurer_loops8_challenge_authored_hint:
        grade1_adventurer_loops8_challenge_a: Can you find a pattern in the steps?  Where can you use a repeat?
      grade1_adventurer_loops9_authored_hint:
        grade1_adventurer_loops9_a: |
          Does this seem too hard?  Break it up into 4 little problems to make it feel easier.
      grade1_artist_loops1_authored_hint:
        grade1_artist_loops1_a: Eğer döngünün 4 defadan fazla tekrarlamasını istiyorsan bloğun üstündeki sayıyı değiştirebilirsin.
      grade1_artist_loops2_authored_hint:
        grade1_artist_loops2_a: Remember to use a `repeat` loop for better code!
      grade1_artist_loops3_authored_hint: [ ]
      grade1_artist_loops4_authored_hint:
        grade1_artist_loops4_a: Drag out a `repeat` loop, then put the other blocks inside of it. How many times do you need to repeat?
      grade1_artist_loops5_authored_hint: [ ]
      grade1_artist_loops6_authored_hint:
        grade1_artist_loops6_a: Bu meydan okuma dört döngü içerir, herbiri birbiri ardına kullanılır!
        grade1_artist_loops6_b: |-
          Notice that every loop makes a stair pattern that travels in a different direction.
          
          ![](https://images.code.org/7d08d5514766c5c15074e90731991505-image-1466705649513.gif)
        grade1_artist_loops6_c: "The loops should do this:\n- Loop 1\n  - Right\n  - Down\n  \n- Loop 2\n  - Right\n  - Up\n\n- Loop 3\n  - Left\n  - Up\n\n- Loop 4\n  - Left\n  - Down"
      grade1_artist_loops7_authored_hint: [ ]
      grade1_artist_loops7a_authored_hint:
        artistLoopsK9_a: Bu meydan okuma dört döngü içerir, herbiri birbiri ardına kullanılır!
        artistLoopsK9_b: |-
          Notice that every loop makes a stair pattern that travels in a different direction.
          
          ![](https://images.code.org/7d08d5514766c5c15074e90731991505-image-1466705649513.gif)
        artistLoopsK9_c: "The loops should do this:\n- Loop 1\n  - Right\n  - Down\n  \n- Loop 2\n  - Right\n  - Up\n\n- Loop 3\n  - Left\n  - Up\n\n- Loop 4\n  - Left\n  - Down"
      grade1_artist_loops7b_authored_hint:
        grade1_artist_loops7b_a: How many times should you repeat the pattern to make the ladder?
      grade1_artist_loops8_authored_hint: [ ]
      grade1_artist_loops9_authored_hint: [ ]
      grade1_artist_loopsFP_authored_hint: [ ]
      grade1_maze_sequence1_authored_hint:
        grade1_maze_sequence1_a: This program is missing one block. Can you figure out which one?
      grade1_maze_sequence10_authored_hint:
        grade1_maze_sequence10_a: If you're having trouble, try writing down the steps on a piece of paper first.
      grade1_maze_sequence2_authored_hint:
        grade1_maze_sequence2_a: One of the blocks is moving the bird in the wrong direction. Can you figure out which one and replace it with the correct block?
      grade1_maze_sequence3_authored_hint:
        grade1_maze_sequence3_a: Try adding one instruction at a time until you get to the pig.
      grade1_maze_sequence5_authored_hint:
        K2.0_sequence_5: Your final code should have three movement blocks.
      grade1_maze_sequence6_authored_hint:
        K2.0_sequence_6_a: There is 1 block that you need to add to move the bird to the pig.
      grade1_maze_sequence7_authored_hint:
        grade1_maze_sequence7a: If you're stuck, try adding one block at a time until you solve the puzzle.
      grade1_maze_sequence8_authored_hint:
        grade1_maze_sequence8_a: Stuck? Try tracing the bird's path with your finger.
        grade1_maze_sequence8_b: 'The extra blocks need to be added before the last ![](https://images.code.org/145dfc20c086bc8fc265de47f3cfe4b0-image-1467848177684.35.51 PM.png )'
      grade1_maze_sequence9_authored_hint:
        grade1_maze_sequence9_a: If you're having trouble, try writing down the steps on a piece of paper first.
      grade1_maze_sequenceA_authored_hint:
        grade1_maze_sequence10_a: If you're having trouble, try writing down the steps on a piece of paper first.
      grade1_maze_sequenceB_authored_hint:
        grade1_maze_sequenceB_a: If you're having trouble, try writing down the steps on a piece of paper first.
      grade1_maze_sequenceC_authored_hint:
        grade1_maze_sequenceC_a: If you're having trouble, try writing down the steps on a piece of paper first.
      grade2_CaringForNewPet_0_authored_hint:
        grade2_CaringForNewPet_0: If the bird isn't getting to the pig, make sure all three of the blocks have been fully clicked together, then click "Run" again.
      grade2_CaringForNewPet_1_authored_hint:
        2-3_Maze_1_a: To use a `move forward` block, drag it from the toolbox out into the workspace and connect it to the `when run` block.
      grade2_CaringForNewPet_11_authored_hint: [ ]
      grade2_CaringForNewPet_2courseC_maze_programming3_authored_hint:
        courseC_maze_programming3_a: "![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)\n\nTo delete a block from the middle of your code, drag all of the blocks underneath it away to the right and let them sit in the workspace for a while.  \n\nClick on the block you want to delete, and drag it back to the toolbox.\n\nFinally, put your other blocks back in place where they belong.\n"
      grade2_CaringForNewPet_3_authored_hint:
        hint1: You can turn right or left from the bird's point of view. If you are facing right, turning right will make you point downwards.
        hint2: This path is a zig-zag. You need to move forward 3 times and turn 2 times.
        hint3: To follow the path, move forward and turn one way, then move again and turn the opposite way. Move forward one more time to reach the pig.
      grade2_CaringForNewPet_3D_authored_hint: [ ]
      grade2_CaringForNewPet_4_authored_hint:
        2-3_Maze_6_a: Bu bulmacayı çözmek için iki yol vardır!
      grade2_CaringForNewPet_5_authored_hint:
        grade2_CaringForNewPet_5_a: If you can't quite see what you need to do, try saying the steps that your bird will take out loud one-by-one and see if they match the blocks in the workspace.
      grade2_CaringForNewPet_6_authored_hint:
        grade2_CaringForNewPet_6_a: You don't have to code the whole solution at once!  Try running the code as you go to make sure it works at each step.
      grade2_CaringForNewPet_7D_authored_hint:
        grade2_CaringForNewPet_7D_a: Don't forget to use the "Step" button to go through block by block and look for errors.
      grade2_MakeDogTag_1_authored_hint:
        2-3_Artist_1_new_a: Eğer blok bana sahip olduğu için 'ileri 100 piksel taşır' kullanıyorsanız, otomatik olarak bir çizgi çizmek.
        2-3_Artist_1_new_b: Köşeyi çevirirken sorun mu yaşıyorsunuz? `Turn right 90 degrees` blokunu kullanın.
      grade2_MakeDogTag_2_authored_hint:
        2-3_Artist_2_new_a: To create this window, just draw a square with 100 pixel sides.
      grade2_MakeDogTag_3_authored_hint:
        2-3_Artist_4_a: To finish the rocket, just draw the triangle on top!
      grade2_MakeDogTag_4_authored_hint: [ ]
      grade2_MakeDogTag_5_authored_hint:
        grade2_MakeDogTag_5a: The artist is already facing the correct way to draw his first line.
        grade2_MakeDogTag_5b: This diamond is really just a square that's standing on its corner.
        grade2_MakeDogTag_5c: Since this diamond is also a square, be sure to turn 90 degrees at the corners.
      grade2_MakeDogTag_6_authored_hint:
        grade2_MakeDogTag_6a: Every angle is either 45 or 90 degrees.
        grade2_MakeDogTag_6b: "Does it work at the first step?  \nHow about the second?  \nWhere does it go wrong?"
      grade2_MakeDogTag_7_authored_hint:
        2-3_Artist_11_a: The exterior angles on this triangle are 120 degrees each.
      grade2_MakeDogTag_9_authored_hint:
        2-3_Artist_Loops_New_11_a: |-
          Remember that the code from the last puzzle was:
          
          ![](https://images.code.org/e5c7492f509dd41efe2888c7e7895c28-image-1461177002636.29.02.png)
        2-3_Artist_Loops_New_11_b: Yeni dönüşün döngünün içindeki kodun sonuna gelmeli.
      grade2_MakeDogTag_BFP_authored_hint: [ ]
      grade2_PuppyLoops_10_authored_hint:
        2-3_Artist_Debugging_8_a: |-
          Şekil kaç kere tekrar ediyor? Şekil kaç kez tekrar etmeli? Programda bunu değiştirebilir miyim?
      grade2_PuppyLoops_3_authored_hint:
        hint1: This puzzle is very similar to the last one.
        hint2: Use a `repeat 5 times` block to create the loop.
        hint3: Place a `move forward` block inside the `repeat block`.
      grade2_PuppyLoops_5_authored_hint:
        hint1: The best solution uses two `move forward` commands and one loop.
      grade2_PuppyLoops_6_authored_hint:
        2-3_Maze_16_a: Tekrar eden kısımları görmek zor ise, her şeyi kodlamayı deneyin ve tekrar eden şeyleri döngüye koyun.
        2-3_Maze_16_b: "Birden fazla bloğu tekrarla bloğu içine koymak için döngüyü çalışma alanına sürükle sonra blokları sürükle ve blokları içine sürükle!"
      grade2_PuppyLoops_7_authored_hint:
        2-3_Maze_Loops_17_a: Tekrar eden kısımları görmek zor ise, her şeyi kodlamayı deneyin ve tekrar eden şeyleri döngüye koyun.
        2-3_Maze_Loops_17_b: Başlangıç kodu silindi mi? "Yeniden dene" kuşu ile tekrar alabilirsin!
      grade2_PuppyLoops_8_authored_hint:
        2-3_Artist_Debugging_2_a: 'İpucu: Her bıyık 75 piksel uzunluğundadır.'
      grade2_PuppyLoops_9_authored_hint:
        2-3_Artist_Debugging_7_a: Sanatçı ilk satırı çizdikten sonra İlerlese yada geriye doğru atlasa ne olur?
      grade2_collector_2_authored_hint:
        hint1: You can use four `move forward` blocks or use the `repeat 4 times` block to make your program shorter.
      grade2_maze_debuggingFP_authored_hint: [ ]
      grade2_maze_intro4_authored_hint:
        hint_1: Connect a "move forward" block to the bottom of the program.
      grade2_playlab_project_6_authored_hint:
        idea1: |-
          *Need an idea?*
          
          **Who's there?** Make characters appear with random images, so no one knows who's showing up next.
          
          ![](https://images.code.org/a56e03479801995d93ad5a4e4384a79e-image-1475340154498.gif)
        idea2: |-
          *Need an idea?*
          
          **Going on an Adventure** - Change the background, then have the characters talk about where they are now.
          
          ![](https://images.code.org/010c4d919f841d6049caf9211ab65ccc-image-1475340583052.gif)
        idea3: |-
          *Need an idea?*
          
          **Pinball** - Make one character move using the arrow keys (use `when up arrow`, `when down arrow` blocks), then play random sounds when it collides with other characters on the screen.
      grade2_puppy_loops2_authored_hint:
        hint1: You can solve this puzzle with just three blocks, including `when run`.
        hint2: Try putting the `move forward` block inside of a `repeat` block to create a loop.
        hint3: You need to repeat the `move forward` command 5 times to solve this puzzle.
      grade2_puppy_loops3_authored_hint:
        hint1: This puzzle is very similar to the last one.
        hint2: Use a `repeat 5 times` block to create the loop.
        hint3: Place a `move forward` block inside the `repeat block`.
      grade2_puppy_loops4_authored_hint:
        hint1: Not all command blocks should be repeated.
        hint2: Use two `repeat` blocks set to different numbers.
        hint3: "`Turn right` once between the two loops."
      grade2_puppy_loops5_authored_hint:
        hint1: The best solution uses two `move forward` commands and one loop.
      grade2_puppy_loops6_authored_hint:
        2-3_Maze_16_a: Tekrar eden kısımları görmek zor ise, her şeyi kodlamayı deneyin ve tekrar eden şeyleri döngüye koyun.
        2-3_Maze_16_b: "Birden fazla bloğu tekrarla bloğu içine koymak için döngüyü çalışma alanına sürükle sonra blokları sürükle ve blokları içine sürükle!"
      grade2_puppy_loops7_authored_hint:
        2-3_Maze_Loops_17_a: Tekrar eden kısımları görmek zor ise, her şeyi kodlamayı deneyin ve tekrar eden şeyleri döngüye koyun.
      grade3_ConditionalsElse_4_authored_hint:
        remember_quantum: "** Dikkat: ** Bu bulmaca her çalıştırdığınızda değişir.   \n Bir koşullu blok kullanmak isteyeceksiniz ('eğer' veya ' Eğer/Değilse')."
      grade3_ConditionalsElse_5_authored_hint:
        remember_quantum: "** Dikkat: ** Bu bulmaca her çalıştırdığınızda değişir.   \n Bir koşullu blok kullanmak isteyeceksiniz ('eğer' veya ' Eğer/Değilse')."
      grade3_ConditionalsElse_TeacherIDo_authored_hint:
        remember_quantum: "** Dikkat: ** Bu bulmaca her çalıştırdığınızda değişir.   \n Bir koşullu blok kullanmak isteyeceksiniz ('eğer' veya ' Eğer/Değilse')."
      grade3_Conditionals_10 BAD_authored_hint:
        4-5_Bee_Nested_Loops_Rows_a: Bu bulmacayı uzun bir kare olarak hayal edin. Arı ileri hareket etmeli defalarca dönmeli ve rotayı tamamlamalı.
      grade3_Conditionals_11_authored_hint:
        2-3_Bee_Conditionals_14_a: Blokları koymakta zorlanıyorsan kırmıı çiçeklerle mor çiçeklere aynı şekilde davranmaya çalış!
        2-3_Bee_Conditionals_14_b: Kırmızı çiçek mor olsaydı ektra tekrarla bloğuyla kodu ne kadar azaltabilirdin?
        2-3_Bee_Conditionals_14_c: "Try breaking this up into two separate chunks:  \n\n![](https://images.code.org/670ac0889a8f523865ff4099b4c54844-image-1463445460440.36.42.png)\n\n1) Gather nectar 3 times\n  - Move forward 5 times\n  - Check to see if nectar, if so: get it\n  - Turn left\n  \n2) Make honey \n  - Move forward one time\n  - Make two honey"
      grade3_Conditionals_12_authored_hint:
        2-3_Bee_Conditionals_15_a: 'Unutmayın: Mor çiçekler sadece ya 0 ya da 1 nektar bulunduruyor ve programı her çalıştırdığında bu değer değişebilir.'
      grade3_Conditionals_2_authored_hint:
        2-3_Bee_Conditionals_3_a: Eğer ilerleme için döngü kullanıp sonra diğer bir döngü ile nektar toplarsan ve üçüncü döngü ile bal yaparsan daha az blok kullanırsın.
      grade3_Conditionals_4_authored_hint:
        2-3_Bee_Conditionals_6_a: 'Unutmayın: mor çiçekler 0 ila 1 nektar bulundurur ve programınızı her çalıştırdığınızda değişir!'
      grade3_Conditionals_TeacherIDo_authored_hint:
        2-3_Bee_Conditionals_6_a: 'Unutmayın: mor çiçekler 0 ila 1 nektar bulundurur ve programınızı her çalıştırdığınızda değişir!'
      grade3_Debugging_1_authored_hint:
        2-3_Bee_Debugging_1_a: Hatalı bloğu bulup düzelttikten sonra tekrarla bloğu kullanarak kodu basitleştirebileceğini görebildin mi?
      grade3_Debugging_10_authored_hint:
        grade3_Debugging_10_a: |-
          Start by looking at just the first loop.
          
          What does it do?
          
          What is it supposed to do?
          
          What does that tell you?
        grade3_Debugging_10_b: Once you have the first loop the way you want it, what is left over in your code?
        grade3_Debugging_10_c: |-
          Try wrapping the leftover loop around the rest of your completed code.  Does is work now?
          
          If not, what is still going wrong?
      grade3_Debugging_11_authored_hint:
        grade3_Debugging_11_a: |-
          Try running through the code using the "Step" button.  Is everything good at the first step?
          
          How about the second?
          
          Where do things go wrong?
        grade3_Debugging_11_b: It looks like all of the right steps are here, you just need more of them.  How can you repeat the `get nectar` and `make honey` actions multiple times?
      grade3_Debugging_2_authored_hint:
        grade3_Debugging_2_a: |-
          Use the "Step" button to see if everything is right at the first step.
          
          How about the second?
          
          Where does it go wrong?
        grade3_Debugging_2_b: Do you see any patterns that could be made more simple using a `repeat` loop?
      grade3_Debugging_3_authored_hint:
        grade3_Debugging_3_a: |-
          Use the "Step" button to see if everything is right at the first step.
          
          How about the second?
          
          Where does it go wrong?
        grade3_Debugging_3_b: Do you see a pattern?  Try using nested loops to solve this puzzle.
      grade3_Debugging_4_authored_hint:
        grade3_Debugging_4_a: Is there any place where the bee does something that doesn't make sense? What happens when you change those blocks?
        grade3_Debugging_4_b: Try simplifying the code using nested loops.
      grade3_Debugging_8_authored_hint:
        grade3_Debugging_8_a: "Try using the debugging process a couple of times in a row. \n\nWhat causes the first problem?\n\nOnce that problem is fixed, what goes wrong?"
        grade3_Debugging_8_b: "If you're having a hard time figuring out how to make the stair step pattern, try tracing it with your finger and saying the commands out loud. \n\nDon't forget to point out the direction of the turns!"
      grade3_Debugging_TeacherIDo_authored_hint:
        2-3_Bee_Debugging_4_a: Biryerlerde arının yaptığı anlamsız bir hareket varmı? O bloğu değiştirdiğinde ne oluyor?
      grade3_Loops_10_authored_hint:
        2-3_Bee_Loops_4_a: Döngü içinde 5 blok olsun.
      grade3_Loops_11_authored_hint:
        2-3_Bee_Loops_5_a: Eğer tekrarla bloğunu koyacak yeri bulamadıysan kodu yaz ve tekrar eden yerlere dikkat et.
      grade3_Loops_12_authored_hint:
        2-3_Bee_Loops_6_a: Eğer tekrarla bloğu içine hangi blokların gireceğini bulamadıysan teker teker eklemeyi dene.
        2-3_Bee_Loops_6_b: İşiniz bittiğinde, döngü içinde 6 blok olmalıdır.
      grade3_Loops_4_authored_hint:
        2-3_Bee_Loops_3B_a: Birbiri ardına İki farklı döngü gerekir.
      grade3_Loops_5_authored_hint:
        2-3_Bee_Loops_7_a: İlk eylem bir hareket yerine bir dönüş olacak.
        2-3_Bee_Loops_7_b: 'Eğer döngüyü başlangıçta göremiyorsan, uzun şekilde ya ve tekrarlara dikkat et.  '
      grade3_Loops_6_authored_hint:
        2-3_Bee_Loops_4A_a: İlk eylem bir hareket yerine bir dönüş olacak.
        2-3_Bee_Loops_4A_b: Programın son parçası döngü sonrasına yazacağınız kod olmalı.
        2-3_Bee_Loops_4A_c: Eğer döngüleri bulmadıysanız kodu önce yazın ve tekrarla bloğunu nasıl kullanırsınız görmeye çalışın.
      grade3_Loops_8_authored_hint:
        2-3_Bee_Loops_2_a: Döngü içinde 4 blok olsun.
      grade3_Loops_9_authored_hint:
        2-3_Bee_Loops_3_a: Döngü içinde 6 blok olsun.
      grade3_RunningFarm_1_authored_hint:
        grade3_RunningFarm_1_a: You will need to look for corn 5 times, using a repeat loop.
        grade3_RunningFarm_1_b: Make sure to use an `if at corn` block or you might try to pick something that's not there!
      grade3_RunningFarm_10_authored_hint:
        grade3_RunningFarm_10_a: This puzzle uses almost the exact same code as the last level, except you only need to repeat 4 times.
      grade3_RunningFarm_11a_authored_hint:
        grade3_RunningFarm_11a_a: You shouldn't need the `while path ahead` loop this time.
      grade3_RunningFarm_2_authored_hint:
        grade3_RunningFarm_2_a: 'The best way to do this is to nest `if` statements by placing one inside of the other.  '
        grade3_RunningFarm_2_b: For this puzzle, you should have one `if/else` statement and one plain `if` statement.
      grade3_RunningFarm_3_authored_hint:
        grade3_RunningFarm_3_a: |-
          To get all of the items, try nesting `if` statements three deep.
          
          This means you should put one `if` statement inside of another, then put a third `if` statement inside the second one.
        grade3_RunningFarm_3_b: For this puzzle, you should have two `if/else` statements and one plain `if` statement.
      grade3_RunningFarm_4_authored_hint:
        grade3_RunningFarm_4_a: |-
          No one knows how many heads of lettuce will grow from each sprout.
          
          Use a `while there is lettuce` loop to keep picking until each piece has been gathered.
      grade3_RunningFarm_5_authored_hint:
        grade3_RunningFarm_5_a: You will need to check for each type of crop that the farmer can pick.  Try using two `if/else` statements and one  `if` block.
      grade3_RunningFarm_6_authored_hint:
        grade3_RunningFarm_6_a: Use a `while path ahead` loop to move the farmer down each piece of the spiral.
        grade3_RunningFarm_6_b: You only need to check for corn during most of the harvest.  Just pick one pumpkin at the very end of your program.
      grade3_RunningFarm_7_authored_hint:
        grade3_RunningFarm_7_a: |-
          Notice that the easiest path to get to all of the crops is still a spiral.
          
          ![](https://images.code.org/ba8b8c624f21ade9ac823b045085c435-image-1479364378437.png)
        grade3_RunningFarm_7_b: Try using `when path ahead` to keep the farmer moving the right number of steps.
        grade3_RunningFarm_7_c: 'Use nested `if` statements and `while there is` loops to check each space for corn and lettuce, then pick only a single pumpkin at the end. '
      grade3_bee_Conditionals_new4_authored_hint:
        grade3_bee_Conditionals_new4_a: Don't forget that you can use loops for shorter code!
      grade3_bee_conditionals_new1a_authored_hint:
        grade3_bee_conditionals_new1a_a: Be sure to use an `if` statement to check each space to see if it has a flower or nothing.
      grade3_bee_conditionals_new2a_authored_hint:
        grade3_bee_conditionals_new2a_a: You can still treat every space as if there is a cloud over it, even though you can see the whole path.
        grade3_bee_conditionals_new2a_b: 'Use an `if` statement inside your loop to check each space. '
      grade3_bee_conditionals_new3a_authored_hint:
        grade3_bee_conditionals_new3a_a: In this puzzle, you know that each square has either a flower or a honeycomb.  That means you can repeat your `if/else` conditional at each square.
      grade3_bee_conditionals_quantum1_authored_hint:
        grade3_bee_conditionals_quantum1_a: You will need to use an `if` block to check to see if there is a flower beneath the cloud before you try to get nectar.
      grade3_bee_conditionals_quantum2_authored_hint:
        grade3_bee_conditionals_quantum2_a: Sometimes a flower will be there, sometimes it won't.  If you want your code to run in both cases, make sure to use an `if` statement.
      grade3_bee_conditionals_quantum3_authored_hint:
        grade3_bee_conditionals_quantum3: Make sure to use an `if` statement to check for honeycomb beneath each cloud.
      grade3_bee_conditionals_quantum4_authored_hint:
        remember_quantum: "**Remember:** This puzzle changes each time it's run.  \n\nYou'll want to use a conditional block (`if/else`) to solve the challenge."
      grade3_bee_conditionals_quantum5_authored_hint:
        remember_quantum: "** Dikkat: ** Bu bulmaca her çalıştırdığınızda değişir.   \n Bir koşullu blok kullanmak isteyeceksiniz ('eğer' veya ' Eğer/Değilse')."
        grade3_bee_conditionals_quantum5_a: This puzzle is tricky, because you can't check blank squares, nectar *and* honey with a single conditional.
      grade3_maze_loops1_authored_hint:
        grade3_maze_loops1_a: Try using the "Step" button to find errors.
      grade3_maze_loops2_authored_hint:
        grade3_maze_loops2_a: |-
          Try using this path through the maze.
          
          ![](https://images.code.org/6a8b4b97a8eef813d8a827b0b7b2d36b-image-1480446509692.05.22.png)
        grade3_maze_loops2_b: Tekrar eden kısımları görmek zor ise, her şeyi kodlamayı deneyin ve tekrar eden şeyleri döngüye koyun.
        grade3_maze_loops2_c: Try using one `repeat` loop inside of another to cut down on the amount of code you need.
      grade3_maze_loops2a_authored_hint:
        grade3_maze_loops2a_a: To solve this puzzle, you will need to "nest" one `repeat` loop inside of another `repeat` loop.
      grade3_maze_loops3_authored_hint:
        2-3_Maze_Loops_19_a: If you are stuck, try writing out the code out on paper without loops first and look for patterns.
        2-3_Maze_Loops_19_b: Nesting `repeat` loops can help decrease the number of blocks used.
        2-3_Maze_Loops_19_c: It will take two sets of nested `repeat` loops to solve this puzzle.
      grade3_maze_loops4_authored_hint:
        2-3_Maze_Loops_20_a: Look for a stair-step pattern in this maze to find where a nested loop can be used.
      grade3_maze_loops5_authored_hint:
        2-3_Maze_Loops_21_a: Merdiven basamağı deseni bulmakta sorun yaşıyorsanız, parmağınızla engellenen yolları bulmayı deneyin.
      grade3_robotFarmer_ConditionalsIntro_10a_authored_hint: [ ]
      grade3_robotFarmer_ConditionalsIntro_11a_authored_hint: [ ]
      grade3_robotFarmer_ConditionalsIntro_5_authored_hint:
        grade3_robotFarmer_ConditionalsIntro_5a: Try nesting a `while` loop inside of a `repeat` loop.
      grade3_robotFarmer_ConditionalsIntro_7_authored_hint:
        grade3_robotFarmer_ConditionalsIntro_7_a: Make sure you're using the `while` loop to figure out how many times to fill each hole.
        grade3_robotFarmer_ConditionalsIntro_7_b: Notice that the farmer needs to move forward and down several times in a stair-step pattern.
      grade3_robotFarmer_ConditionalsIntro_8_authored_hint:
        grade3_robotFarmer_ConditionalsIntro_8_a: The `while path ahead` block lets you keep going, even if you don't know how many squares are in a path.
      grade3_robotFarmer_ConditionalsIntro_9_authored_hint:
        grade3_robotFarmer_ConditionalsIntro_9_a: You are going to need to use more than one `while` loop.
        grade3_robotFarmer_ConditionalsIntro_9_b: Every hole is at the end of a path, so use `while path ahead` before using `while there is a hole`.
        grade3_robotFarmer_ConditionalsIntro_9_c: Notice that you need to repeat the `while path ahead`, `while there is a hole` code six times.
      grade4_arist_nested_loop_polygons1_authored_hint:
        4-5_Nested_Loops_7_a: |-
          Bu tasarım 360 derece için on kez dönmelidir. ** 360 / 10 =? **
      grade4_arist_nested_loop_polygons2_authored_hint:
        4-5_Nested_Loops_8_a: |-
          Bu tasarım 360 derece için 6 kez dönmelidir. ** 360 / 6 =? **
      grade4_arist_nested_loop_triangles2_authored_hint: [ ]
      grade4_arist_nested_loop_triangles3_authored_hint:
        4-5_Nested_Loops_6_a: |-
          İç döngü sonrası bir dönüş yapmayı unutmayın. 6 üçgen için 360 derecenin üzerinde dönmen gerekir. 
          ** 360 / 6 =? **
      grade4_arist_nested_loop_triangles6_authored_hint:
        4-5_Nested_Loops_12_a: "** 360 / 36 =? **"
      grade4_artist_functions1_authored_hint:
        2-3_Artist_Functions_1_a: Kareler 100 piksel genişliğinde, buda demek oluyor ki her kareden önce 175 piksel ilerlemelisin.
        2-3_Artist_Functions_1_b: Gözlük yapmak için çakışan çizgiler olabilir.
      grade4_artist_functions2_authored_hint:
        2-3_Artist_Functions_2_a: |-
          Programınız: -Fonksiyon kullanmalıdır. - 
          ileri 100 + 75 piksel ilerlemelidir- 
          Fonksiyon kullanmalıdır
      grade4_artist_functions2a_authored_hint:
        grade4_artist_functions2a_a: To get around using multiple `move forward` blocks, create a `draw triangle` function and call that multiple times.
      grade4_artist_functions3a_authored_hint:
        grade4_artist_functions2a_a: To get around using multiple `move forward` blocks, create a `draw triangle` function and call that multiple times.
      grade4_artist_functions3b_authored_hint:
        grade4_artist_functions2a_a: To get around using multiple `move forward` blocks, create a `draw hexagon` function and call that multiple times.
      grade4_artist_functionsChallenge0_authored_hint:
        grade4_artist_functionsChallenge0_a: |-
          Start by making a function for a square, then try making a function for a line of squares.
          
          How would you use the `draw a line of squares` function to make this image?
        grade4_artist_functionsChallenge0_b: After your first line of squares, you need to move the artist down and back before you start your second line of squares.
        grade4_artist_functionsChallenge0_c: You should move the artist back a different number of pixels for even lines than for odd ones.
      grade4_artist_functions_challenge_authored_hint:
        Course_4_SCF_1_a: Her altıgenin 40 piksel kenar uzunluğu vardır.
        Course_4_SCF_1_b: Her altıgen arasında 120 piksel atla olmalı.
        Course_4_SCF_1_c: "İkinci sıra Altıgen çizdemden önce, sağa 60 derece dön be 40 piksel ilerle.\nDoğru dikey noktada olduktan sonra sanatçıyı döndür ve 320 piksel atla."
        Course_4_SCF_1_d: "Üçüncü sıra Altıgen çizmeden önce, sağa 60 derece dön be 40 piksel ilerle.\nDoğru dikey noktada olduktan sonra sanatçıyı döndür ve 440 piksel atla. "
        Course_4_SCF_1_e: |-
          ** Çözüm: **! [Çözüm] blokları (https://images.code.org/d64a0e22c1db1d98c35b243bca6460ab-image-1469727090121.png)
      grade4_artist_functions_challenge2_authored_hint:
        Course_4_SCF_1_a: Her altıgenin 40 piksel kenar uzunluğu vardır.
        Course_4_SCF_1_b: Her altıgen arasında 120 piksel atla olmalı.
        Course_4_SCF_1_c: "İkinci sıra Altıgen çizdemden önce, sağa 60 derece dön be 40 piksel ilerle.\nDoğru dikey noktada olduktan sonra sanatçıyı döndür ve 320 piksel atla."
        Course_4_SCF_1_d: "Üçüncü sıra Altıgen çizmeden önce, sağa 60 derece dön be 40 piksel ilerle.\nDoğru dikey noktada olduktan sonra sanatçıyı döndür ve 440 piksel atla. "
        Course_4_SCF_1_e: |-
          ** Çözüm: **! [Çözüm] blokları (https://images.code.org/d64a0e22c1db1d98c35b243bca6460ab-image-1469727090121.png)
      grade4_artist_functions_stars0_authored_hint:
        grade4_artist_functions_stars0_a: |-
          To solve this puzzle, you just need to add a  loop that repeats the starter code 8 times.
          
          If you can't remember what the starter code was, click "start over" in the upper right corner of the workspace.
      grade4_artist_functions_stars1_authored_hint:
        grade4_artist_functions_stars1_a: Try using a function!
      grade4_artist_functions_stars2_authored_hint:
        grade4_artist_functions_stars2_a: Don't give up!  Remember what you have been learning.
        grade4_artist_functions_stars2_b: Functions make it easy to call saved code at any time, not just from inside a loop!
      grade4_artist_functions_stars3_authored_hint:
        hint1: Don't give up!
      grade4_artist_functions_windows0_authored_hint:
        grade4_artist_functions_windows0_a: Focus only on making one window for now.  We'll create a function for it in the next puzzle.
        grade4_artist_functions_windows0_b: Try using nested loops, where the inner loop makes the square and the outer loop rotates the square four times.
      grade4_artist_functions_windows2_authored_hint:
        grade4_artist_functions_windows2_a: Try creating your function first then adding in windows one at a time.
        grade4_artist_functions_windows2_b: You shouldn't need to add any extra repeat loops.  Just jump the artist 100 pixels forward for each top window, and 150 pixels down to get the bottom windows.
      grade4_artist_nestedLoops_challenge2_authored_hint:
        Course_4_Artist_11_a: 'Yarım altıgenin ** 30 kenar uzunluğunu ** ve ** 60 derece sağa dönüşü**. vardır.  '
        Course_4_Artist_11_b: '2/3 üçgenini ** 80 kenar uzunluğunu ** ve ** 120 derece sağa dönüşü**. vardır.  '
      grade4_artist_nested_loop_polygons1_authored_hint:
        4-5_Nested_Loops_7_a: |-
          Bu tasarım 360 derece için on kez dönmelidir. ** 360 / 10 =? **
      grade4_artist_nested_loop_polygons2_authored_hint:
        4-5_Nested_Loops_8_a: |-
          Bu tasarım 360 derece için 6 kez dönmelidir. ** 360 / 6 =? **
      grade4_artist_nested_loop_triangles2_authored_hint: [ ]
      grade4_artist_nested_loop_triangles3_authored_hint:
        4-5_Nested_Loops_6_a: |-
          Don't forget to make a turn after your inner loop.
          
          You'll be looping 6 triangles over 360 degrees.
          
          **6 x ? = 360**
      grade4_artist_nested_loop_triangles6_authored_hint:
        4-5_Nested_Loops_12_a: "** 360 / 36 =? **"
      grade4_bee_conditionals_new1a_authored_hint:
        grade4_bee_conditionals_new1a_a: An `if` block will help you out in this puzzle.
      grade4_bee_conditionals_new2_authored_hint:
        grade4_bee_conditionals_new2_a: 'The flowers follow a rectangular path.  You can trace that rectangle using `while path ahead` even with a different number of squares per side. '
        grade4_bee_conditionals_new2_b: You can check every square for a flower using the `if` block, even if you already know there's not one there.
      grade4_bee_conditionals_new3b_authored_hint:
        grade4_bee_conditionals_new3b_a: An `if/else` statement could really help you out here.
      grade4_bee_conditionals_quantum4_authored_hint:
        remember_quantum: "** Dikkat: ** Bu bulmaca her çalıştırdığınızda değişir.   \n Bir koşullu blok kullanmak isteyeceksiniz ('eğer' veya ' Eğer/Değilse')."
      grade4_bee_conditionals_quantum5_authored_hint:
        remember_quantum: "** Dikkat: ** Bu bulmaca her çalıştırdığınızda değişir.   \n Bir koşullu blok kullanmak isteyeceksiniz ('eğer' veya ' Eğer/Değilse')."
      grade4_bee_functions1_authored_hint:
        grade4_bee_functions1_a: There is more than one right answer to this puzzle.
      grade4_bee_functions10_authored_hint:
        grade4_bee_functions10_a: You can use the exact same function for this puzzle as you did in the last puzzle.  All you need to do is create a function that collects all of the nectar when you get to each flower.
      grade4_bee_functions2_authored_hint:
        grade4_bee_functions2_a: The function has been written for you, but you will need to call it at each flower.
      grade4_bee_functions3_authored_hint:
        grade4_bee_functions3_a: 'Your function for this puzzle only needs to collect nectar, it shouldn''t have any `move forward` or `turn` blocks in it. '
      grade4_bee_functions4_authored_hint:
        grade4_bee_functions4_a: Your function will travel down the side paths and return the bee back to the main road.  You don't need to add that part to your program.
      grade4_bee_functions6_authored_hint:
        grade4_bee_functions6_a: Edit the function so that it solves the puzzle without having to change the main program.
        grade4_bee_functions6_b: "Your function should make the bee: \n- turn\n- move forward\n- collect all of the nectar\n- turn around\n- move back to the main path\n- turn back to the direction that the bee started from"
      grade4_bee_functions7_authored_hint:
        2-3_Bee_Functions_8_a: "Bulmaca zorlu görünüyorsa, fonksiyonu  biraz tbiraz oluşturarak deneyin.    Bazı bloklar ekleyin, sonra deneyin. Daha fazla blok ekleyin, sonra yeniden deneyin.  Çözüme ulaşacaksınız!  ! [] (https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)"
      grade4_bee_functions8_authored_hint:
        2-3_Bee_Functions_8_a: "Bulmaca zorlu görünüyorsa, fonksiyonunuzu biraz biraz oluşturmayıdeneyin.    Bazı bloklar ekleyin, sonra deneyin. Daha fazla bilgi ekleyin, sonra yeniden deneyin.  Çözümü bulacaksınız!"
        2-3_Bee_Functions_8_b: |-
          Yeşil fonksiyon bloğu içinde kod oluşturmayı hatırla. ! [] (https://images.code.org/8fe1fae5caf4ede3a9c9bd9f26940cde-image-1467996837459.gif)
        2-3_Bee_Functions_8_c: This function should turn the bee to head him down the path, collect the nectar, make the honey, then turn the bee around and bring him back.
      grade4_bee_functions9_authored_hint:
        grade4_bee_functions9_a: Your function will only need to collect nectar... but this time, you will need to use a `while` loop instead of a `repeat` loop.
        grade4_bee_functions9_b: Use `while nectar > 0` to make sure you get all of the nectar.
      grade4_bee_nestedLoops1_authored_hint:
        grade4_bee_nestedLoops1_a: If you don't understand how to use nested loops here, try writing out the instructions step by step on a piece of paper.  Circle the patterns that you see.
      grade4_bee_nestedLoops2_authored_hint:
        grade4_bee_nestedLoops2_a: You will need to repeat `get nectar` inside of another `repeat` that also has the `move forward` block inside of it.
        grade4_bee_nestedLoops2_b: You will need to use all three of the available `repeat` blocks to solve this puzzle.
        grade4_bee_nestedLoops2_c: |-
          Nest your blocks three deep, like this:
          
          - repeat 3
          - repeat 3
          - move forward
          - repeat 12
          - get nectar
          - turn right
      grade4_bee_nestedLoops2a_authored_hint:
        grade4_bee_nestedLoops2a_a: Try using nested `repeat` loops to solve this puzzle.
      grade4_bee_nestedLoops4_authored_hint:
        grade4_bee_nestedLoops4_a: Try building your code line by line and see if you can spot the places where a repeat will make the code shorter!
        grade4_bee_nestedLoops4_b: |-
          You will need a nested loop to move forward and get nectar, but only a single loop to collect honey at the end.
          
          Altogether, you should be using 3 loops.
      grade4_bee_nestedLoops5_authored_hint:
        grade4_bee_nestedLoops5_a: You will need 4 repeat blocks!
      grade4_review_artist1_authored_hint:
        2-3_Artist_1_new_a: Eğer blok bana sahip olduğu için 'ileri 100 piksel taşır' kullanıyorsanız, otomatik olarak bir çizgi çizmek.
        2-3_Artist_1_new_b: Köşeyi çevirirken sorun mu yaşıyorsunuz? `Turn right 90 degrees` blokunu kullanın.
      grade4_review_artist2_authored_hint:
        2-3_Artist_6_a: 'Bu münük melekleri yapmak için karede olduğu gibi her seferinde dön fakat bu sefer daha fazla.   '
        2-3_Artist_6_b: Ben zaten sağa baktığımdan ileri hareket ettirerek başlayın, sonra üçgen oluşturmak için sol dönüş yapın.
        2-3_Artist_6_c: Üçgenin Her tarafı kare ile aynı uzunlukta ise... 100 piksel!
      grade4_review_bee1_authored_hint:
        2-3_Bee_Loops_3B_a: Birbiri ardına İki farklı döngü gerekir.
      grade4_review_bee2_authored_hint:
        2-3_Bee_Loops_3_a: Döngü içinde 6 blok olsun.
      grade4_review_bee3_authored_hint:
        2-3_Bee_Loops_4_a: Döngü içinde 5 blok olsun.
      grade5_artist_binary10_authored_hint:
        Course_4_Artist_Binary_Free_Play_2b_a: Bu kod iki döngü kullanır. İlki 1'den 8'e, diğeri sayıları aşağı 8-1 sayılır.
        Course_4_Artist_Binary_Free_Play_2b_b: Her döngü üç kez tekrarlanır.  İlk olarak soldaki 1'ler  ikinci olarak ortadakı 0 lar, ve üçüncü olarak sağ tarafta 1ler çizer.
        Course_4_Artist_Binary_Free_Play_2b_c: Her tekrar için  'sayaç' 1'ler ve '16-(2 x counter)' 0lar olmalı.
        Course_4_Artist_Binary_Free_Play_2b_d: |-
          **Solution:**
          ![solution](https://images.code.org/866a92e042a546de3afcf462a8b5c695-image-1444438735003.58.28.png)
      grade5_artist_for_loops1_authored_hint:
        grade5_artist_for_loops1_a: |-
          If you use this `for` loop, it will run just like a `repeat 3 times` loop.
          
          ![](https://images.code.org/585d2e24f3021ac2561aec6e96dde430-image-1475906135993.54.11.png)
      grade5_artist_for_loops10_authored_hint:
        Course_4_Artist_For_Loops_Challenge_a: En büyük çokgenin 19 yüzü vardır.
        Course_4_Artist_For_Loops_Challenge_b: Her çokken olması gereken kenar sayısından bir eksik kenar sahiptir.
      grade5_artist_for_loops1b_authored_hint:
        grade5_artist_for_loops1b_a: |-
          Can you draw something like this:
          
          ![](https://images.code.org/80ae9ab3e449db1ed4e13c86239f7617-image-1475906794954.06.12.png)
      grade5_artist_for_loops2_authored_hint:
        grade5_artist_for_loops2_a: |-
          Use `counter` for the length of your triangles inside your `repeat` loop.
          
          ![](https://images.code.org/5e9465321a0b7a4d791848a79f3e6715-image-1475908305872.31.26.png)
      grade5_artist_for_loops3_authored_hint:
        Course_4_Artist_For_Loops_3_a: |-
          To have the `for` loop drive your movement, make sure that you're using `counter` as your distance in the `move forward` block.
          
          ![](https://images.code.org/15e87fc7fe408cbf1b63e0e8e69b7ffe-image-1475908502078.31.26.png)
      grade5_artist_for_loops4_authored_hint:
        Course_4_Artist_For_Loops_4_a: "** İhtiyacınız olacak en küçük sayı nedir?   \nEn büyük numarası nedir?   \nArtış ne kadar? ** \nŞununla say döngüsü için boşlukları doldururken sorman gereken sorular bunlardır."
      grade5_artist_for_loops5_authored_hint:
        grade5_artist_for_loops5_a: You don't need the traditional repeat loop when making this spiral!
      grade5_artist_for_loops7_authored_hint:
        grade5_artist_for_loops7_a: The pen is thinner in this puzzle. You will need to set it to `1` before you start.
        grade5_artist_for_loops7_b: Notice that this spiral turns right instead of left!
      grade5_artist_for_loops7a_authored_hint: [ ]
      grade5_artist_for_loops7b_authored_hint: [ ]
      grade5_artist_for_loops8_authored_hint:
        Course_4_Artist_For_Loops_11_a: "Dönüş açısı ile her şekil ile değişecek!    Matematik blokları kullanarak  \"360 bölü şeklin kenar sayısı\" ile döneceğin açıyı hesapla. "
      grade5_artist_for_loops9_authored_hint:
        Course_4_Artist_For_Loops_11a_a: '360/kenar sayısı değeri dönmen gereken açıyı verir.'
        Course_4_Artist_For_Loops_11a_b: 'Her seferinde şeklin kenar sayısının 10 karı kadar ilerlemen gerekiyor. '
      grade5_artist_for_loopsfreeplay11_authored_hint:
        Course_4_Artist_For_Loops_inspire_a: Bu dokun temeli bir önceki bulmaca ile aynıdır. Sadece birkaç basit değişiklik gerekir.
        Course_4_Artist_For_Loops_inspire_b: 10 dan 3 e birer birer sayan döngü kullanmayı dene.
        Course_4_Artist_For_Loops_inspire_c: Şununla say döngüsü içinde iki adet tekrarla döngüsü vardır. İkincisi ters yöne döner.
        Course_4_Artist_For_Loops_inspire_d: "**Solution:**  ![Solution](https://images.code.org/d619892fc17ff491c201d86bb917e523-image-1441005190828.12.30.png) "
      grade5_artist_for_loopsfreeplay12_authored_hint:
        grade5_artist_for_loopsfreeplay12_a: The image in the drawing was made using a counter for the `set alpha` and `counter` / 10 as a brush size.
        grade5_artist_for_loopsfreeplay12_b: The image in the drawing uses a turn of 61 degrees.
        grade5_artist_for_loopsfreeplay12_c: |-
          Want to know how the sample image was done?
          
          ![](https://images.code.org/fdc5d6c15b357ba9763ac9ea914967a9-image-1475911612774.23.51.png)
      grade5_artist_functionparameters10_authored_hint:
        brush_width: Fırca kalınlığını q yaptık ve rengi mavi yaptık. Başka birşey yapmış mıydık.
        double_loop: Tekrarla bloğu içine şununa say döngüsü koymayı dene.
        specifics: "Şununla say döngüsü 3 ten 17 ye kadar sayıyıor ve sonraki şekle geçiyor. tek sayılı çokgenler çiziliyor.\nset_alpha bloğı counter değeri arttıkça rengin solgunlaşmasını sağlıyor."
        after: Her "petal" ile işiniz bittiğinde, Önce 60 derece dön sonra 20 piksel 'ilerle '.
        solution: |-
          **Solution**
          
          ![](https://images.code.org/7e9f4be39d45726d537fe8e6e9147986-image-1456445254361.png)
      grade5_artist_functionparameters8_authored_hint:
        NEW_Course_4_Artist_Params_13_a: The length of sides for each shape is 7 times the number of sides it has.
      grade5_artist_functionparameters9_authored_hint:
        NEW_Course_4_Artist_Params_14_a: It's okay to run the program a few times to figure out how the function works with different parameters.
        grade5_artist_functionparameters9_b: You don't need to add any `move` or `turn` blocks to finish this code.
      grade5_artist_functionparameters9a_authored_hint:
        grade5_artist_functionparameters9a_a: 'Did the code get so scrambled up that it''s no longer recognizable?  Try clicking the "Start over" button in the upper righthand corner. '
        grade5_artist_functionparameters9a_b: Your new `min` variable should go in the first slot in your `for` loop, inside the function.
      grade5_artist_functionparameters9b_authored_hint:
        grade5_artist_functionparameters9b_a: If your function is correct, you shouldn't need to change it for this puzzle.
        grade5_artist_functionparameters9b_b: The only thing you should need to do between function calls is change the color of the line.
      grade5_artist_functionparameters_6_authored_hint:
        grade5_artist_functionparameters_6_a: Use a `for` loop to get the code as smooth as you can.
        grade5_artist_functionparameters_6_b: Remember to **add** a parameter.  Don't remove the one that is already there!
      grade5_artist_parameters_squares1a_authored_hint:
        grade5_artist_parameters_squares1a_a: Remember, you need to turn 90 degrees to draw a square.
        grade5_artist_parameters_squares1a_b: You only need to repeat as many times as the number of sides in a square.
      grade5_artist_parameters_squares2_authored_hint:
        grade5_artist_parameters_squares2_a: This gets easier if you put it all in a `for` loop.
        grade5_artist_parameters_squares2_b: |-
          Be sure to turn 90 degrees between each square!
          
          ![](https://images.code.org/97bd8eded03c5aa39740876c8e9f7ff8-image-1469224745277.gif)
      grade5_artist_parameters_squares2a_authored_hint:
        grade5_artist_parameters_squares2a_a: You need to click the "edit" button to get into the function.  Once you're there, add a parameter called `length` and use it inside your `move forward` block!
        grade5_artist_parameters_squares2a_b: When calling your function, use a `for loop` for the best possible code!
      grade5_artist_parameters_stars1_authored_hint:
        hint1: Don't give up!
      grade5_artist_variables_freeplay10_authored_hint:
        Course_4_Artist_Vars_8_a: Başlangıç uzunluğu kenar sayısına bölersen, kenar sayısı arttıkça kenar uzunluğu azalacaktır.
      grade5_artist_variables_freeplay15_authored_hint:
        Course_4_Artist_Inspire_a: Bir kareyi tamamladıktan sonra, uzunluğun yarısı kadar ileri atlayın ve sonra dönün.
        Course_4_Artist_Inspire_b: Her bir kare ve atlama 4 kez tekrarlanıyor. (aralarda dönüş ile birlikte).
        Course_4_Artist_Inspire_c: Her bir fırıldak 4 kez tekrarlanıyor. Dönüş açısı için 360/kenar değerini kullan.
        Course_4_Artist_Inspire_d: |-
          **Solution:**
          ![Blocks for solution](https://images.code.org/1865aaf1b4a8ba84a5e8a7408401092d-image-1440060930335.43.39.png)
      grade5_artist_variables_octagons13_authored_hint:
        Course_4_Artist_Vars_13_a: İçiçe İki adet tekrarla döngüsü kullanmalısın ve her biri kenar sayısı kadar tekrarlamalı.
        Course_4_Artist_Vars_13_b: "İç döngü (sola dönerek) bir sekizgen çizer.     Daha sonra dış döngünün içinde ileriye taşıyın ve sağa dönün."
        Course_4_Artist_Vars_13_c: Şeklin boyutunun aynı kalması için uzunluğu kenar sayısına bölün.
      grade5_artist_variables_square7_authored_hint:
        Course_4_Artist_Vars_6_a: Çokgen çizmek için ** 360 / taraf ** kadar dönün.
      grade5_bee_for_loops10_authored_hint:
        grade5_bee_for_loops10_a: "How much less is 12 than 15?  \nHow much less is 9 than 12?\n\nDo you see a pattern?"
      grade5_bee_for_loops11_authored_hint:
        NEW_Course_4_Bee_For_Loops_10a_a: Can you find a pattern between the number of steps you need to take and the number of nectars to gather?
        NEW_Course_4_Bee_For_Loops_10a_b: You'll need to have 2 repeats, one will use a math block.
      grade5_bee_for_loops3_authored_hint:
        grade5_bee_for_loops3_a: 'Use the `counter` variable inside the `repeat` loop where nectar is gathered to solve this puzzle. '
        grade5_bee_for_loops3_b: Your `for` loop will need to count from 1 to 5 with an increment of 1.
      grade5_bee_for_loops4_authored_hint:
        grade5_bee_for_loops4_a: Use a `for` loop that goes from 1 to 7 with an increment of 1 to solve this puzzle.
        grade5_bee_for_loops4_b: Make sure to use the `counter` variable inside your nested `repeat` loop to get enough nectar!
      grade5_bee_for_loops5_authored_hint:
        grade5_bee_for_loops5_a: This time, your `move forward` block and your `get nectar` block will need to be in separate `repeat` loops.
      grade5_bee_for_loops6_authored_hint:
        grade5_bee_for_loops6_a: Don't forget to use a `counter` variable inside your `repeat` loop.
      grade5_bee_for_loops7_authored_hint:
        grade5_bee_for_loops7_a: Your `for` loop will need to count from 1 to 7 by 2.
      grade5_bee_for_loops8_authored_hint:
        NEW_Course_4_Bee_For_Loops_8_a: "If your loop is counting up, the increment is added to your counter variable each time through. \n\nWhat do you need to add to each number to get the next amount of nectar?"
      grade5_bee_for_loops9_authored_hint:
        NEW_Course_4_Bee_For_Loops_7_a: |-
          Try doing some math with the counter variable.
          
          What do you have to do to the counter at each flower to equal the amount of nectar you need to collect?
        NEW_Course_4_Bee_For_Loops_7_b: 'Remember: If your loop is counting up, the increment is added to your `counter` variable each time through.'
      grade5_bee_parameters_new1_authored_hint:
        grade5_bee_parameters_new1_a: Use `if` statements to make sure you're only getting nectar from a flower.
      grade5_bee_parameters_new2_authored_hint:
        grade5_bee_parameters_new2_a: "To turn this into a function, simply drag the code into the existing function block.  \n\n\n![](https://images.code.org/4d918c677ecb9f1618c1556566805b32-image-1477621874625.gif)"
        grade5_bee_parameters_new2_b: Don't forget to connect the `rowOfNectar` block to `when run` to call the function that you just built.
      grade5_bee_parameters_new3_authored_hint:
        grade5_bee_parameters_new3_a: Your function will run no matter which direction you're facing.
      grade5_bee_parameters_new4_authored_hint:
        grade5_bee_parameters_new4_a: You will need to add a parameter and use the resulting variable in your loop.
      grade5_bee_parameters_new5_authored_hint:
        grade5_bee_parameters_new5_a: Count the number of spaces you need to check in each stretch and use those numbers as your parameters to the function call.
      grade5_bee_parameters_new6_authored_hint:
        grade5_bee_parameters_new6_a: Which block automatically increments a variable that you could use as a parameter?
      grade5_bee_parameters_new7_authored_hint:
        grade5_bee_parameters_new7_a: You don't need a second parameter for this function, only a second `if` statement.
      grade5_bee_parameters_new8a_authored_hint:
        grade5_bee_parameters_new8a_a: This spiral can be simplified with a `for` loop.
      grade5_bee_parameters_new9a_authored_hint:
        grade5_bee_parameters_new9a_a: A `for` loop can help you with this stair step pattern, too!
        grade5_bee_parameters_new9a_b: For each stair, you'll need to call the function once, turn right, call the function again, then turn left.
      grade5_playlab_variables2_authored_hint:
        Course_4_Play_Lab_Vars_2_a: Köpeğin hızını 'Dog_speed' değerini kedinin hızından 'cat_speed' değerinden büyük yaptığınızdan emin olun.
      gradeK_sequence_4_authored_hint:
        gradeK_sequence_4_a: Try writing down the steps on paper to find a solution!
      gradek_adventurer_loops3_authored_hint:
        gradek_adventurer_loops3_a: To change how far the adventurer goes, change the number of times that the loop runs.
        gradek_adventurer_loops3_b: Don't forget that the adventurer needs to walk down and collect gold after she finishes the `repeat` loop!
      gradek_adventurer_loops4_authored_hint:
        gradek_adventurer_loops4_a: If you can't figure out the answer right away, try using a piece of paper to figure out what arrows you will need and look for a pattern.
      gradek_adventurer_loops4a_authored_hint:
        gradek_adventurer_loops4a_a: Can't figure out what's wrong? Try running the code to see what happens.
      gradek_adventurer_loops5_authored_hint:
        gradek_adventurer_loops5_a: If you can't figure out what comes next, try running the code to see where Laurel ends up.
      gradek_adventurer_loops6_authored_hint:
        gradek_adventurer_loops6_a: If you are having trouble figuring this puzzle out, try writing the moves down on a piece of paper and look for a pattern.
      gradek_adventurer_loops7_challenge_authored_hint:
        gradek_adventurer_loops7_challenge_a: Does the code feel really long?  Try putting two of your `repeat` loops inside of another loop to make it much shorter!
      gradek_adventurer_loops8_authored_hint:
        gradek_adventurer_loops8_a: If you can't figure out where to put the loops, try writing the code out step-by-step and look for a pattern.
      gradek_adventurer_loops9_authored_hint:
        gradek_adventurer_loops9_a: If you can't figure out where to put the loops, try writing your code step-by-step and look for patterns.
      gradek_artist_loops1_authored_hint:
        gradek_artist_loops1_a: Can't figure out how to draw a line?  Start attaching blocks to the `when run` block to see what happens.
      gradek_artist_loops2_authored_hint:
        gradek_artist_loops2_a: Is something not quite right?  Use the "Step" button to see where things go wrong.
      gradek_artist_loops3_authored_hint:
        artistLoopsK2_a: Eğer döngünün 4 defadan fazla tekrarlamasını istiyorsan bloğun üstündeki sayıyı değiştirebilirsin.
      gradek_artist_loops4_authored_hint:
        artistLoopsK3_a: Tekrarla bloğu hakkında öğrendiklerini kullan!
      gradek_artist_loops5_authored_hint:
        gradek_artist_loops5_a: Can't figure out how to make the hill?  Try playing with the blocks a bit to see what each one draws.
      gradek_artist_loops6_authored_hint:
        gradek_artist_loops6_a: Can't figure out where to put the loop? Try writing the code step-by-step and look for a pattern.
      gradek_artist_loops7_authored_hint:
        gradek_artist_loops7_a: Try running the code to see what has been written for you.
        gradek_artist_loops7_b: How would you loop the code that has been given to you?
        gradek_artist_loops7_c: "What does the code do?  \nWhat is it supposed to do?  \nWhat does that tell you?"
      gradek_artist_loops8_authored_hint:
        gradek_artist_loops8_a: 'You don''t have to delete everything!  Some of the code is good. Use it to build the rest of the stairs. '
      gradek_artist_loops9_authored_hint:
        artistLoopsKA_a: İleri atla bloğı çizgi çizmeden ileri hareket etmek için kullanılır.
      gradek_artist_loopsA_authored_hint:
        artistLoopsKB_a: There should be 2 blocks inside of your loop to solve this puzzle.
      gradek_artist_loopsFP_authored_hint: [ ]
      gradek_playlab_events1a_authored_hint:
        gradek_playlab_events1a_a: Attach the `move up` block to the `when click` event so that the cat moves up when the "up" button is pressed.
      gradek_playlab_events1c_authored_hint:
        gradek_playlab_events1c_a: "Here is the block you should connect to the `when run` block: \n\n![](https://images.code.org/ae72d1270ad210cd00fae7e0dfb3549a-image-1478144412134.png)"
      gradek_playlab_events2c_authored_hint:
        gradek_playlab_events2c_a: 'drag this block out ![](https://images.code.org/b3d6215901969328333d6393f8101c5b-image-1478142333199.png) and connect it to ![](https://images.code.org/4f2130b2a3053695414a02c3d39ef864-image-1478143461271.png)'
      gradek_playlab_events3c_authored_hint:
        gradek_playlab_events3c_a: |-
          Here is the event block that you will need to get Jorge to move right:
          
          ![](https://images.code.org/cfc4b696b1ad5762ff40c1c8a17a194d-image-1478141370249.png)
        gradek_playlab_events3c_b: |-
          Here is the block you should connect to the `when right` event:
          
          ![](https://images.code.org/e5c559cc1deef643c8b997d17ecb78e3-image-1478141726783.png)
      gradek_playlab_events4c_authored_hint:
        gradek_playlab_events4c_a: "Here are the event blocks that you will need to use to move Jorge up and down:\n\n![](https://images.code.org/cf9a6992f7b4619dfb592fb6905effbb-image-1478140906017.png)\nand \n![](https://images.code.org/bb2a117cef485e79119a63e5d027968e-image-1478140979742.png)"
      gradek_playlab_events5c_authored_hint:
        gradek_playlab_events5c_a: |-
          Here is the event block that you would use to have Jorge do something when clicked:
          
          ![](https://images.code.org/6e3a654378643fd0590307ec3a0e429c-image-1478140058859.png)
        gradek_playlab_events5c_b: |-
          Here is the block you would use to change the background:
          
          ![](https://images.code.org/3f6d7a642b37c3abffe7b0de062ea076-image-1478140261440.png)
        gradek_playlab_events5c_c: |-
          Here is the block you would use to play a random sound:
          
          ![](https://images.code.org/81a8ef4f64023039438199fef67bb56b-image-1478140125332.png)
      gradek_playlab_eventsA_authored_hint:
        gradek_playlab_eventsA_a: |-
          If this seems like too much to do, try breaking it down into steps:
          
          1)  Have the actor change to a random size on click.
          2) Play a random sound when you click the actor.
          
          Now, make sure both of those actions are attached underneath the same event!
      harvey_tictactoe_authored_hint:
        harvey_tictactoe: Atla bloğu ile başka alanlara gidebilirsiniz.
      level 'grade3_Loops_10_authored_hint:
        2-3_Bee_Loops_4_a: Döngü içinde 5 blok olsun.
      level 'grade3_Loops_11_authored_hint:
        2-3_Bee_Loops_5_a: Eğer tekrarla bloğunu koyacak yeri bulamadıysan kodu yaz ve tekrar eden yerlere dikkat et.
      level 'grade3_Loops_12_authored_hint:
        2-3_Bee_Loops_6_a: Eğer tekrarla bloğu içine hangi blokların gireceğini bulamadıysan teker teker eklemeyi dene.
        2-3_Bee_Loops_6_b: İşiniz bittiğinde, döngü içinde 6 blok olmalıdır.
      level 'grade3_Loops_4_authored_hint:
        2-3_Bee_Loops_3B_a: Birbiri ardına İki farklı döngü gerekir.
      level 'grade3_Loops_5_authored_hint:
        2-3_Bee_Loops_7_a: İlk eylem bir hareket yerine bir dönüş olacak.
        2-3_Bee_Loops_7_b: 'Eğer döngüyü başlangıçta göremiyorsan, uzun şekilde ya ve tekrarlara dikkat et.  '
      level 'grade3_Loops_6_authored_hint:
        2-3_Bee_Loops_4A_a: İlk eylem bir hareket yerine bir dönüş olacak.
        2-3_Bee_Loops_4A_b: Programın son parçası döngü sonrasına yazacağınız kod olmalı.
        2-3_Bee_Loops_4A_c: Eğer döngüleri bulmadıysanız kodu önce yazın ve tekrarla bloğunu nasıl kullanırsınız görmeye çalışın.
      level 'grade3_Loops_8_authored_hint:
        2-3_Bee_Loops_2_a: Döngü içinde 4 blok olsun.
      level 'grade3_Loops_9_authored_hint:
        2-3_Bee_Loops_3_a: Döngü içinde 6 blok olsun.
      playLabDebugVideo1_authored_hint:
        courseA_playLab_events2_a: "Here is the block you should connect to the `when run` block: \n\n![](https://images.code.org/ae72d1270ad210cd00fae7e0dfb3549a-image-1478144412134.png)"
      sample3_authored_hint:
        sample3_a: |-
          Try writing the code once and looping it seven times:
          
          ![](https://images.code.org/2a116e75e31ee3a8a8683349c9460286-image-1464307689813.gif)
      sample5_authored_hint:
        sample5_a: Did you know that you can put as many blocks inside of a repeat loop as you want to?
        sample5_b: |-
          The bee is looping these actions over and over again:
          - move forward
          - make honey
          - turn left
          - move forward
          - turn right
      sample6_authored_hint:
        sample6_a: Did you know that you can use more than one repeat loop in a puzzle?
        sample6_b: Sometimes repeat loops have lots of blocks inside, and sometimes they might only have one!
      sample7assessment_authored_hint: [ ]
